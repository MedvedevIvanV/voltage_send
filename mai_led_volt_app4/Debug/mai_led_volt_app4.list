
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800d338  0800d338  0000e338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d81c  0800d81c  0000f2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d81c  0800d81c  0000e81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d824  0800d824  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d824  0800d824  0000e824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d828  0800d828  0000e828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800d82c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2c4  2**0
                  CONTENTS
 10 .bss          00001e00  200002c4  200002c4  0000f2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200020c4  200020c4  0000f2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012771  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003573  00000000  00000000  00021a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  00024fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba7  00000000  00000000  00025f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022294  00000000  00000000  00026aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014126  00000000  00000000  00048d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be178  00000000  00000000  0005ceb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b031  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053c8  00000000  00000000  0011b074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0012043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d31c 	.word	0x0800d31c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800d31c 	.word	0x0800d31c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <Write_Voltage_To_Flash>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef Write_Voltage_To_Flash(float voltage) {
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	ed87 0a01 	vstr	s0, [r7, #4]
    HAL_StatusTypeDef status;
    uint32_t voltageData = *(uint32_t*)&voltage;
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Разблокировка Flash
    HAL_FLASH_Unlock();
 8001030:	f000 fdd2 	bl	8001bd8 <HAL_FLASH_Unlock>

    // Очистка ошибок
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <Write_Voltage_To_Flash+0x84>)
 8001036:	22f3      	movs	r2, #243	@ 0xf3
 8001038:	60da      	str	r2, [r3, #12]
                          FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

    // Стирание сектора
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.Sector = FLASH_SECTOR;
 800103e:	230b      	movs	r3, #11
 8001040:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors = 1;
 8001042:	2301      	movs	r3, #1
 8001044:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3; // Для работы при 2.7-3.6V
 8001046:	2302      	movs	r3, #2
 8001048:	61fb      	str	r3, [r7, #28]

    uint32_t SectorError;
    status = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 800104a:	f107 0208 	add.w	r2, r7, #8
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f000 ff21 	bl	8001e9c <HAL_FLASHEx_Erase>
 800105a:	4603      	mov	r3, r0
 800105c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (status != HAL_OK) {
 8001060:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <Write_Voltage_To_Flash+0x52>
        HAL_FLASH_Lock();
 8001068:	f000 fdd8 	bl	8001c1c <HAL_FLASH_Lock>
        return status;
 800106c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001070:	e013      	b.n	800109a <Write_Voltage_To_Flash+0x7a>
    }

    // Запись данных
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, VOLTAGE_STORAGE_ADDR, voltageData);
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	2200      	movs	r2, #0
 8001076:	461c      	mov	r4, r3
 8001078:	4615      	mov	r5, r2
 800107a:	4622      	mov	r2, r4
 800107c:	462b      	mov	r3, r5
 800107e:	490a      	ldr	r1, [pc, #40]	@ (80010a8 <Write_Voltage_To_Flash+0x88>)
 8001080:	2002      	movs	r0, #2
 8001082:	f000 fd57 	bl	8001b34 <HAL_FLASH_Program>
 8001086:	4603      	mov	r3, r0
 8001088:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    FLASH_WaitForLastOperation(100);
 800108c:	2064      	movs	r0, #100	@ 0x64
 800108e:	f000 fdd5 	bl	8001c3c <FLASH_WaitForLastOperation>

    HAL_FLASH_Lock();
 8001092:	f000 fdc3 	bl	8001c1c <HAL_FLASH_Lock>
    return status;
 8001096:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800109a:	4618      	mov	r0, r3
 800109c:	3728      	adds	r7, #40	@ 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdb0      	pop	{r4, r5, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023c00 	.word	0x40023c00
 80010a8:	080e0000 	.word	0x080e0000

080010ac <Read_Voltage_From_Flash>:

// Функция для чтения float из Flash
float Read_Voltage_From_Flash() {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
    uint32_t voltageData = *(__IO uint32_t*)(VOLTAGE_STORAGE_ADDR);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <Read_Voltage_From_Flash+0x30>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	607b      	str	r3, [r7, #4]

    // Если Flash пуста (все 0xFF), возвращаем значение по умолчанию
    if (voltageData == 0xFFFFFFFF) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010be:	d101      	bne.n	80010c4 <Read_Voltage_From_Flash+0x18>
        return default_voltage;
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <Read_Voltage_From_Flash+0x34>)
 80010c2:	e001      	b.n	80010c8 <Read_Voltage_From_Flash+0x1c>
    }
    return *(float*)&voltageData;
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eeb0 0a67 	vmov.f32	s0, s15
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	080e0000 	.word	0x080e0000
 80010e0:	40533333 	.word	0x40533333

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0a6      	sub	sp, #152	@ 0x98
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ea:	f000 fb7b 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ee:	f000 f8bf 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f2:	f000 f94f 	bl	8001394 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010f6:	f000 f923 	bl	8001340 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80010fa:	f007 f86f 	bl	80081dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);  // Включаем транзистор
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001104:	4853      	ldr	r0, [pc, #332]	@ (8001254 <main+0x170>)
 8001106:	f001 f985 	bl	8002414 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {    if (usb_rx_flag) {
 800110a:	4b53      	ldr	r3, [pc, #332]	@ (8001258 <main+0x174>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 8099 	beq.w	8001248 <main+0x164>

	  float current_voltage = Read_Voltage_From_Flash();
 8001116:	f7ff ffc9 	bl	80010ac <Read_Voltage_From_Flash>
 800111a:	ed87 0a24 	vstr	s0, [r7, #144]	@ 0x90

	  char init_msg[32];
	  sprintf(init_msg, "Initial voltage: %.4fV\r\n", current_voltage);
 800111e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001122:	f7ff fa11 	bl	8000548 <__aeabi_f2d>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	1d38      	adds	r0, r7, #4
 800112c:	494b      	ldr	r1, [pc, #300]	@ (800125c <main+0x178>)
 800112e:	f009 fabb 	bl	800a6a8 <siprintf>
	  CDC_Transmit_FS((uint8_t*)init_msg, strlen(init_msg));
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f89b 	bl	8000270 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f007 f916 	bl	8008374 <CDC_Transmit_FS>

      usb_rx_flag = 0;
 8001148:	4b43      	ldr	r3, [pc, #268]	@ (8001258 <main+0x174>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
      uint8_t usb_led_command = 'm';
 800114e:	236d      	movs	r3, #109	@ 0x6d
 8001150:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      // 1. Отправляем команду дежурному МК
      if (HAL_UART_Transmit(&huart1, &usb_led_command, 1, 100) == HAL_OK) {
 8001154:	f107 0187 	add.w	r1, r7, #135	@ 0x87
 8001158:	2364      	movs	r3, #100	@ 0x64
 800115a:	2201      	movs	r2, #1
 800115c:	4840      	ldr	r0, [pc, #256]	@ (8001260 <main+0x17c>)
 800115e:	f003 f8ad 	bl	80042bc <HAL_UART_Transmit>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d16f      	bne.n	8001248 <main+0x164>
          uint8_t uart_rx_buffer[64] = {0};
 8001168:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800116c:	2240      	movs	r2, #64	@ 0x40
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f009 fafe 	bl	800a772 <memset>
          uint16_t index = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
          float voltage = 0.0f;
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

          // 2. Принимаем полное значение напряжения
          while (1) {
              if (HAL_UART_Receive(&huart1, &uart_rx_buffer[index], 1, 500) == HAL_OK) {
 8001184:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001188:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800118c:	18d1      	adds	r1, r2, r3
 800118e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001192:	2201      	movs	r2, #1
 8001194:	4832      	ldr	r0, [pc, #200]	@ (8001260 <main+0x17c>)
 8001196:	f003 f91c 	bl	80043d2 <HAL_UART_Receive>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d14f      	bne.n	8001240 <main+0x15c>
                  // Проверяем конец строки
                  if (uart_rx_buffer[index] == '\n' || index >= sizeof(uart_rx_buffer) - 1) {
 80011a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80011a4:	3398      	adds	r3, #152	@ 0x98
 80011a6:	443b      	add	r3, r7
 80011a8:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80011ac:	2b0a      	cmp	r3, #10
 80011ae:	d003      	beq.n	80011b8 <main+0xd4>
 80011b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80011b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80011b6:	d93d      	bls.n	8001234 <main+0x150>
                      uart_rx_buffer[index] = '\0'; // Добавляем терминатор
 80011b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80011bc:	3398      	adds	r3, #152	@ 0x98
 80011be:	443b      	add	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	f803 2c54 	strb.w	r2, [r3, #-84]

                      // 3. Преобразуем строку в float
                      voltage = atof((char*)uart_rx_buffer);
 80011c6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80011ca:	4618      	mov	r0, r3
 80011cc:	f007 fd2e 	bl	8008c2c <atof>
 80011d0:	ec53 2b10 	vmov	r2, r3, d0
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fd06 	bl	8000be8 <__aeabi_d2f>
 80011dc:	4603      	mov	r3, r0
 80011de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                      // 4. Записываем ВЕСЬ результат во Flash
                      if (Write_Voltage_To_Flash(voltage) == HAL_OK) {
 80011e2:	ed97 0a23 	vldr	s0, [r7, #140]	@ 0x8c
 80011e6:	f7ff ff1b 	bl	8001020 <Write_Voltage_To_Flash>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d11c      	bne.n	800122a <main+0x146>
                          // 5. Только после успешной записи читаем и отправляем
                          float stored_voltage = Read_Voltage_From_Flash();
 80011f0:	f7ff ff5c 	bl	80010ac <Read_Voltage_From_Flash>
 80011f4:	ed87 0a22 	vstr	s0, [r7, #136]	@ 0x88

                          char voltage_msg[32];
                          sprintf(voltage_msg, "FLASH: %.4fV\r\n", stored_voltage);
 80011f8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80011fc:	f7ff f9a4 	bl	8000548 <__aeabi_f2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001208:	4916      	ldr	r1, [pc, #88]	@ (8001264 <main+0x180>)
 800120a:	f009 fa4d 	bl	800a6a8 <siprintf>
                          CDC_Transmit_FS((uint8_t*)voltage_msg, strlen(voltage_msg));
 800120e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f82c 	bl	8000270 <strlen>
 8001218:	4603      	mov	r3, r0
 800121a:	b29a      	uxth	r2, r3
 800121c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f007 f8a6 	bl	8008374 <CDC_Transmit_FS>
                      } else {
                          CDC_Transmit_FS((uint8_t*)"Flash write error\r\n", 19);
                      }
                      break;
 8001228:	e00e      	b.n	8001248 <main+0x164>
                          CDC_Transmit_FS((uint8_t*)"Flash write error\r\n", 19);
 800122a:	2113      	movs	r1, #19
 800122c:	480e      	ldr	r0, [pc, #56]	@ (8001268 <main+0x184>)
 800122e:	f007 f8a1 	bl	8008374 <CDC_Transmit_FS>
                      break;
 8001232:	e009      	b.n	8001248 <main+0x164>
                  }
                  index++;
 8001234:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001238:	3301      	adds	r3, #1
 800123a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 800123e:	e7a1      	b.n	8001184 <main+0xa0>
              } else {
                  CDC_Transmit_FS((uint8_t*)"UART timeout\r\n", 14);
 8001240:	210e      	movs	r1, #14
 8001242:	480a      	ldr	r0, [pc, #40]	@ (800126c <main+0x188>)
 8001244:	f007 f896 	bl	8008374 <CDC_Transmit_FS>
                  break;
              }
          }
      }
    }
    HAL_Delay(5000);
 8001248:	f241 3088 	movw	r0, #5000	@ 0x1388
 800124c:	f000 fb3c 	bl	80018c8 <HAL_Delay>
  {    if (usb_rx_flag) {
 8001250:	e75b      	b.n	800110a <main+0x26>
 8001252:	bf00      	nop
 8001254:	40020800 	.word	0x40020800
 8001258:	20000670 	.word	0x20000670
 800125c:	0800d33c 	.word	0x0800d33c
 8001260:	200002e0 	.word	0x200002e0
 8001264:	0800d358 	.word	0x0800d358
 8001268:	0800d368 	.word	0x0800d368
 800126c:	0800d37c 	.word	0x0800d37c

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b094      	sub	sp, #80	@ 0x50
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	2230      	movs	r2, #48	@ 0x30
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f009 fa77 	bl	800a772 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	4b27      	ldr	r3, [pc, #156]	@ (8001338 <SystemClock_Config+0xc8>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	4a26      	ldr	r2, [pc, #152]	@ (8001338 <SystemClock_Config+0xc8>)
 800129e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a4:	4b24      	ldr	r3, [pc, #144]	@ (8001338 <SystemClock_Config+0xc8>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <SystemClock_Config+0xcc>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a20      	ldr	r2, [pc, #128]	@ (800133c <SystemClock_Config+0xcc>)
 80012ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <SystemClock_Config+0xcc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d6:	2302      	movs	r3, #2
 80012d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012e0:	2304      	movs	r3, #4
 80012e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012e4:	2348      	movs	r3, #72	@ 0x48
 80012e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012ec:	2303      	movs	r3, #3
 80012ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 faf9 	bl	80038ec <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001300:	f000 f8be 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001314:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2102      	movs	r1, #2
 8001320:	4618      	mov	r0, r3
 8001322:	f002 fd5b 	bl	8003ddc <HAL_RCC_ClockConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800132c:	f000 f8a8 	bl	8001480 <Error_Handler>
  }
}
 8001330:	bf00      	nop
 8001332:	3750      	adds	r7, #80	@ 0x50
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40007000 	.word	0x40007000

08001340 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_USART1_UART_Init+0x4c>)
 8001346:	4a12      	ldr	r2, [pc, #72]	@ (8001390 <MX_USART1_UART_Init+0x50>)
 8001348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <MX_USART1_UART_Init+0x4c>)
 800134c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <MX_USART1_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_USART1_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_USART1_UART_Init+0x4c>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <MX_USART1_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <MX_USART1_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_USART1_UART_Init+0x4c>)
 8001378:	f002 ff50 	bl	800421c <HAL_UART_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001382:	f000 f87d 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200002e0 	.word	0x200002e0
 8001390:	40011000 	.word	0x40011000

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	@ 0x28
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b31      	ldr	r3, [pc, #196]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a30      	ldr	r2, [pc, #192]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a29      	ldr	r2, [pc, #164]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b23      	ldr	r3, [pc, #140]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a22      	ldr	r2, [pc, #136]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <MX_GPIO_Init+0xe0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a1b      	ldr	r2, [pc, #108]	@ (8001474 <MX_GPIO_Init+0xe0>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <MX_GPIO_Init+0xe0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001420:	4815      	ldr	r0, [pc, #84]	@ (8001478 <MX_GPIO_Init+0xe4>)
 8001422:	f000 fff7 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2120      	movs	r1, #32
 800142a:	4814      	ldr	r0, [pc, #80]	@ (800147c <MX_GPIO_Init+0xe8>)
 800142c:	f000 fff2 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001430:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	480b      	ldr	r0, [pc, #44]	@ (8001478 <MX_GPIO_Init+0xe4>)
 800144a:	f000 fe47 	bl	80020dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800144e:	2320      	movs	r3, #32
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	@ (800147c <MX_GPIO_Init+0xe8>)
 8001466:	f000 fe39 	bl	80020dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800146a:	bf00      	nop
 800146c:	3728      	adds	r7, #40	@ 0x28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40020800 	.word	0x40020800
 800147c:	40020000 	.word	0x40020000

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <Error_Handler+0x8>

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	4a0f      	ldr	r2, [pc, #60]	@ (80014d8 <HAL_MspInit+0x4c>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a2:	4b0d      	ldr	r3, [pc, #52]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a08      	ldr	r2, [pc, #32]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a19      	ldr	r2, [pc, #100]	@ (8001560 <HAL_UART_MspInit+0x84>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12b      	bne.n	8001556 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6453      	str	r3, [r2, #68]	@ 0x44
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a10      	ldr	r2, [pc, #64]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <HAL_UART_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001536:	23c0      	movs	r3, #192	@ 0xc0
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001546:	2307      	movs	r3, #7
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <HAL_UART_MspInit+0x8c>)
 8001552:	f000 fdc3 	bl	80020dc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	@ 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40011000 	.word	0x40011000
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <NMI_Handler+0x4>

08001574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <MemManage_Handler+0x4>

08001584 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <UsageFault_Handler+0x4>

08001594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c2:	f000 f961 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <OTG_FS_IRQHandler+0x10>)
 80015d2:	f001 f87c 	bl	80026ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20001874 	.word	0x20001874

080015e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_kill>:

int _kill(int pid, int sig)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015fa:	f009 f91f 	bl	800a83c <__errno>
 80015fe:	4603      	mov	r3, r0
 8001600:	2216      	movs	r2, #22
 8001602:	601a      	str	r2, [r3, #0]
  return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_exit>:

void _exit (int status)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ffe7 	bl	80015f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001622:	bf00      	nop
 8001624:	e7fd      	b.n	8001622 <_exit+0x12>

08001626 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e00a      	b.n	800164e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001638:	f3af 8000 	nop.w
 800163c:	4601      	mov	r1, r0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	b2ca      	uxtb	r2, r1
 8001646:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	dbf0      	blt.n	8001638 <_read+0x12>
  }

  return len;
 8001656:	687b      	ldr	r3, [r7, #4]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e009      	b.n	8001686 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	60ba      	str	r2, [r7, #8]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	429a      	cmp	r2, r3
 800168c:	dbf1      	blt.n	8001672 <_write+0x12>
  }
  return len;
 800168e:	687b      	ldr	r3, [r7, #4]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_close>:

int _close(int file)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c0:	605a      	str	r2, [r3, #4]
  return 0;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_isatty>:

int _isatty(int file)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b085      	sub	sp, #20
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	@ (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f009 f884 	bl	800a83c <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20020000 	.word	0x20020000
 8001760:	00000400 	.word	0x00000400
 8001764:	20000328 	.word	0x20000328
 8001768:	200020c8 	.word	0x200020c8

0800176c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	@ (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001794:	f7ff ffea 	bl	800176c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001798:	480c      	ldr	r0, [pc, #48]	@ (80017cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800179a:	490d      	ldr	r1, [pc, #52]	@ (80017d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800179c:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0a      	ldr	r2, [pc, #40]	@ (80017d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b0:	4c0a      	ldr	r4, [pc, #40]	@ (80017dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80017be:	f009 f843 	bl	800a848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c2:	f7ff fc8f 	bl	80010e4 <main>
  bx  lr    
 80017c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80017d4:	0800d82c 	.word	0x0800d82c
  ldr r2, =_sbss
 80017d8:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 80017dc:	200020c4 	.word	0x200020c4

080017e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <HAL_Init+0x40>)
 80017ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <HAL_Init+0x40>)
 80017fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001800:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	@ (8001824 <HAL_Init+0x40>)
 8001806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180c:	2003      	movs	r0, #3
 800180e:	f000 f94f 	bl	8001ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001812:	200f      	movs	r0, #15
 8001814:	f000 f808 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001818:	f7ff fe38 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023c00 	.word	0x40023c00

08001828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001830:	4b12      	ldr	r3, [pc, #72]	@ (800187c <HAL_InitTick+0x54>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <HAL_InitTick+0x58>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f967 	bl	8001b1a <HAL_SYSTICK_Config>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00e      	b.n	8001874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b0f      	cmp	r3, #15
 800185a:	d80a      	bhi.n	8001872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f000 f92f 	bl	8001ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001868:	4a06      	ldr	r2, [pc, #24]	@ (8001884 <HAL_InitTick+0x5c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000000 	.word	0x20000000
 8001880:	20000008 	.word	0x20000008
 8001884:	20000004 	.word	0x20000004

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008
 80018ac:	2000032c 	.word	0x2000032c

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2000032c 	.word	0x2000032c

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff ffee 	bl	80018b0 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e0:	d005      	beq.n	80018ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <HAL_Delay+0x44>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ee:	bf00      	nop
 80018f0:	f7ff ffde 	bl	80018b0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d8f7      	bhi.n	80018f0 <HAL_Delay+0x28>
  {
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4907      	ldr	r1, [pc, #28]	@ (80019ac <__NVIC_EnableIRQ+0x38>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	@ (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	@ (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	@ 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	@ 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a7c:	d301      	bcc.n	8001a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00f      	b.n	8001aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a82:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <SysTick_Config+0x40>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f7ff ff8e 	bl	80019b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <SysTick_Config+0x40>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <SysTick_Config+0x40>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff29 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad8:	f7ff ff3e 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff ff8e 	bl	8001a04 <NVIC_EncodePriority>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff5d 	bl	80019b0 <__NVIC_SetPriority>
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff31 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffa2 	bl	8001a6c <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b42:	4b23      	ldr	r3, [pc, #140]	@ (8001bd0 <HAL_FLASH_Program+0x9c>)
 8001b44:	7e1b      	ldrb	r3, [r3, #24]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_FLASH_Program+0x1a>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e03b      	b.n	8001bc6 <HAL_FLASH_Program+0x92>
 8001b4e:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <HAL_FLASH_Program+0x9c>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b54:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001b58:	f000 f870 	bl	8001c3c <FLASH_WaitForLastOperation>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d12b      	bne.n	8001bbe <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001b6c:	783b      	ldrb	r3, [r7, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	68b8      	ldr	r0, [r7, #8]
 8001b72:	f000 f91b 	bl	8001dac <FLASH_Program_Byte>
 8001b76:	e016      	b.n	8001ba6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d105      	bne.n	8001b8a <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001b7e:	883b      	ldrh	r3, [r7, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	68b8      	ldr	r0, [r7, #8]
 8001b84:	f000 f8ee 	bl	8001d64 <FLASH_Program_HalfWord>
 8001b88:	e00d      	b.n	8001ba6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d105      	bne.n	8001b9c <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4619      	mov	r1, r3
 8001b94:	68b8      	ldr	r0, [r7, #8]
 8001b96:	f000 f8c3 	bl	8001d20 <FLASH_Program_Word>
 8001b9a:	e004      	b.n	8001ba6 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ba0:	68b8      	ldr	r0, [r7, #8]
 8001ba2:	f000 f88b 	bl	8001cbc <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ba6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001baa:	f000 f847 	bl	8001c3c <FLASH_WaitForLastOperation>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001bb2:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <HAL_FLASH_Program+0xa0>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	4a07      	ldr	r2, [pc, #28]	@ (8001bd4 <HAL_FLASH_Program+0xa0>)
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001bbe:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <HAL_FLASH_Program+0x9c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	761a      	strb	r2, [r3, #24]

  return status;
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000330 	.word	0x20000330
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001be2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <HAL_FLASH_Unlock+0x38>)
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da0b      	bge.n	8001c02 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_FLASH_Unlock+0x38>)
 8001bec:	4a09      	ldr	r2, [pc, #36]	@ (8001c14 <HAL_FLASH_Unlock+0x3c>)
 8001bee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001bf0:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <HAL_FLASH_Unlock+0x38>)
 8001bf2:	4a09      	ldr	r2, [pc, #36]	@ (8001c18 <HAL_FLASH_Unlock+0x40>)
 8001bf4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_FLASH_Unlock+0x38>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da01      	bge.n	8001c02 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001c02:	79fb      	ldrb	r3, [r7, #7]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	40023c00 	.word	0x40023c00
 8001c14:	45670123 	.word	0x45670123
 8001c18:	cdef89ab 	.word	0xcdef89ab

08001c1c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_FLASH_Lock+0x1c>)
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	4a04      	ldr	r2, [pc, #16]	@ (8001c38 <HAL_FLASH_Lock+0x1c>)
 8001c26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c2a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <FLASH_WaitForLastOperation+0x78>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c4e:	f7ff fe2f 	bl	80018b0 <HAL_GetTick>
 8001c52:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001c54:	e010      	b.n	8001c78 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d00c      	beq.n	8001c78 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d007      	beq.n	8001c74 <FLASH_WaitForLastOperation+0x38>
 8001c64:	f7ff fe24 	bl	80018b0 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d201      	bcs.n	8001c78 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e019      	b.n	8001cac <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001c78:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb8 <FLASH_WaitForLastOperation+0x7c>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e8      	bne.n	8001c56 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001c84:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <FLASH_WaitForLastOperation+0x7c>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c90:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <FLASH_WaitForLastOperation+0x7c>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001c96:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <FLASH_WaitForLastOperation+0x7c>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001ca2:	f000 f8a5 	bl	8001df0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0

}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000330 	.word	0x20000330
 8001cb8:	40023c00 	.word	0x40023c00

08001cbc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001cc8:	4b14      	ldr	r3, [pc, #80]	@ (8001d1c <FLASH_Program_DoubleWord+0x60>)
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	4a13      	ldr	r2, [pc, #76]	@ (8001d1c <FLASH_Program_DoubleWord+0x60>)
 8001cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <FLASH_Program_DoubleWord+0x60>)
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	4a10      	ldr	r2, [pc, #64]	@ (8001d1c <FLASH_Program_DoubleWord+0x60>)
 8001cda:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001cde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <FLASH_Program_DoubleWord+0x60>)
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d1c <FLASH_Program_DoubleWord+0x60>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	000a      	movs	r2, r1
 8001d06:	2300      	movs	r3, #0
 8001d08:	68f9      	ldr	r1, [r7, #12]
 8001d0a:	3104      	adds	r1, #4
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40023c00 	.word	0x40023c00

08001d20 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <FLASH_Program_Word+0x40>)
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d60 <FLASH_Program_Word+0x40>)
 8001d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001d36:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <FLASH_Program_Word+0x40>)
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	4a09      	ldr	r2, [pc, #36]	@ (8001d60 <FLASH_Program_Word+0x40>)
 8001d3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d42:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <FLASH_Program_Word+0x40>)
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <FLASH_Program_Word+0x40>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	601a      	str	r2, [r3, #0]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40023c00 	.word	0x40023c00

08001d64 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d70:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <FLASH_Program_HalfWord+0x44>)
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	4a0c      	ldr	r2, [pc, #48]	@ (8001da8 <FLASH_Program_HalfWord+0x44>)
 8001d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <FLASH_Program_HalfWord+0x44>)
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	4a09      	ldr	r2, [pc, #36]	@ (8001da8 <FLASH_Program_HalfWord+0x44>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d88:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <FLASH_Program_HalfWord+0x44>)
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	4a06      	ldr	r2, [pc, #24]	@ (8001da8 <FLASH_Program_HalfWord+0x44>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	801a      	strh	r2, [r3, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40023c00 	.word	0x40023c00

08001dac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001db8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <FLASH_Program_Byte+0x40>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001dec <FLASH_Program_Byte+0x40>)
 8001dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <FLASH_Program_Byte+0x40>)
 8001dc6:	4a09      	ldr	r2, [pc, #36]	@ (8001dec <FLASH_Program_Byte+0x40>)
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001dcc:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <FLASH_Program_Byte+0x40>)
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	4a06      	ldr	r2, [pc, #24]	@ (8001dec <FLASH_Program_Byte+0x40>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	701a      	strb	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023c00 	.word	0x40023c00

08001df0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001df4:	4b27      	ldr	r3, [pc, #156]	@ (8001e94 <FLASH_SetErrorCode+0xa4>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001e00:	4b25      	ldr	r3, [pc, #148]	@ (8001e98 <FLASH_SetErrorCode+0xa8>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	f043 0310 	orr.w	r3, r3, #16
 8001e08:	4a23      	ldr	r2, [pc, #140]	@ (8001e98 <FLASH_SetErrorCode+0xa8>)
 8001e0a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001e0c:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <FLASH_SetErrorCode+0xa4>)
 8001e0e:	2210      	movs	r2, #16
 8001e10:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001e12:	4b20      	ldr	r3, [pc, #128]	@ (8001e94 <FLASH_SetErrorCode+0xa4>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <FLASH_SetErrorCode+0xa8>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <FLASH_SetErrorCode+0xa8>)
 8001e28:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <FLASH_SetErrorCode+0xa4>)
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001e30:	4b18      	ldr	r3, [pc, #96]	@ (8001e94 <FLASH_SetErrorCode+0xa4>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001e3c:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <FLASH_SetErrorCode+0xa8>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	4a14      	ldr	r2, [pc, #80]	@ (8001e98 <FLASH_SetErrorCode+0xa8>)
 8001e46:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001e48:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <FLASH_SetErrorCode+0xa4>)
 8001e4a:	2240      	movs	r2, #64	@ 0x40
 8001e4c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001e4e:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <FLASH_SetErrorCode+0xa4>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d008      	beq.n	8001e6c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <FLASH_SetErrorCode+0xa8>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f043 0302 	orr.w	r3, r3, #2
 8001e62:	4a0d      	ldr	r2, [pc, #52]	@ (8001e98 <FLASH_SetErrorCode+0xa8>)
 8001e64:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001e66:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <FLASH_SetErrorCode+0xa4>)
 8001e68:	2280      	movs	r2, #128	@ 0x80
 8001e6a:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001e6c:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <FLASH_SetErrorCode+0xa4>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001e78:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <FLASH_SetErrorCode+0xa8>)
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	f043 0320 	orr.w	r3, r3, #32
 8001e80:	4a05      	ldr	r2, [pc, #20]	@ (8001e98 <FLASH_SetErrorCode+0xa8>)
 8001e82:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <FLASH_SetErrorCode+0xa4>)
 8001e86:	2202      	movs	r2, #2
 8001e88:	60da      	str	r2, [r3, #12]
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40023c00 	.word	0x40023c00
 8001e98:	20000330 	.word	0x20000330

08001e9c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001eaa:	4b31      	ldr	r3, [pc, #196]	@ (8001f70 <HAL_FLASHEx_Erase+0xd4>)
 8001eac:	7e1b      	ldrb	r3, [r3, #24]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_FLASHEx_Erase+0x1a>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e058      	b.n	8001f68 <HAL_FLASHEx_Erase+0xcc>
 8001eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f70 <HAL_FLASHEx_Erase+0xd4>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ebc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ec0:	f7ff febc 	bl	8001c3c <FLASH_WaitForLastOperation>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d148      	bne.n	8001f60 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d115      	bne.n	8001f0a <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4610      	mov	r0, r2
 8001eec:	f000 f844 	bl	8001f78 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ef0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ef4:	f7ff fea2 	bl	8001c3c <FLASH_WaitForLastOperation>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001efc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <HAL_FLASHEx_Erase+0xd8>)
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	4a1c      	ldr	r2, [pc, #112]	@ (8001f74 <HAL_FLASHEx_Erase+0xd8>)
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	6113      	str	r3, [r2, #16]
 8001f08:	e028      	b.n	8001f5c <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	e01c      	b.n	8001f4c <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	4619      	mov	r1, r3
 8001f1a:	68b8      	ldr	r0, [r7, #8]
 8001f1c:	f000 f850 	bl	8001fc0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f20:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001f24:	f7ff fe8a 	bl	8001c3c <FLASH_WaitForLastOperation>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <HAL_FLASHEx_Erase+0xd8>)
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	4a10      	ldr	r2, [pc, #64]	@ (8001f74 <HAL_FLASHEx_Erase+0xd8>)
 8001f32:	f023 037a 	bic.w	r3, r3, #122	@ 0x7a
 8001f36:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	601a      	str	r2, [r3, #0]
          break;
 8001f44:	e00a      	b.n	8001f5c <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4413      	add	r3, r2
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d3da      	bcc.n	8001f12 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001f5c:	f000 f878 	bl	8002050 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f60:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <HAL_FLASHEx_Erase+0xd4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	761a      	strb	r2, [r3, #24]

  return status;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000330 	.word	0x20000330
 8001f74:	40023c00 	.word	0x40023c00

08001f78 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f84:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <FLASH_MassErase+0x44>)
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	4a0c      	ldr	r2, [pc, #48]	@ (8001fbc <FLASH_MassErase+0x44>)
 8001f8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <FLASH_MassErase+0x44>)
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	4a09      	ldr	r2, [pc, #36]	@ (8001fbc <FLASH_MassErase+0x44>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001f9c:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <FLASH_MassErase+0x44>)
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <FLASH_MassErase+0x44>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fac:	6113      	str	r3, [r2, #16]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023c00 	.word	0x40023c00

08001fc0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d102      	bne.n	8001fdc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	e010      	b.n	8001ffe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d103      	bne.n	8001fea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001fe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e009      	b.n	8001ffe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d103      	bne.n	8001ff8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001ff0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e002      	b.n	8001ffe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ff8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ffe:	4b13      	ldr	r3, [pc, #76]	@ (800204c <FLASH_Erase_Sector+0x8c>)
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	4a12      	ldr	r2, [pc, #72]	@ (800204c <FLASH_Erase_Sector+0x8c>)
 8002004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002008:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <FLASH_Erase_Sector+0x8c>)
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	490f      	ldr	r1, [pc, #60]	@ (800204c <FLASH_Erase_Sector+0x8c>)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <FLASH_Erase_Sector+0x8c>)
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	4a0c      	ldr	r2, [pc, #48]	@ (800204c <FLASH_Erase_Sector+0x8c>)
 800201c:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8002020:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <FLASH_Erase_Sector+0x8c>)
 8002024:	691a      	ldr	r2, [r3, #16]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4313      	orrs	r3, r2
 800202c:	4a07      	ldr	r2, [pc, #28]	@ (800204c <FLASH_Erase_Sector+0x8c>)
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <FLASH_Erase_Sector+0x8c>)
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	4a04      	ldr	r2, [pc, #16]	@ (800204c <FLASH_Erase_Sector+0x8c>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203e:	6113      	str	r3, [r2, #16]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40023c00 	.word	0x40023c00

08002050 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002054:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800205c:	2b00      	cmp	r3, #0
 800205e:	d017      	beq.n	8002090 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002060:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1c      	ldr	r2, [pc, #112]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 8002066:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800206a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800206c:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a19      	ldr	r2, [pc, #100]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 8002072:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a16      	ldr	r2, [pc, #88]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 800207e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002082:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002084:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a13      	ldr	r2, [pc, #76]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 800208a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800208e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002090:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002098:	2b00      	cmp	r3, #0
 800209a:	d017      	beq.n	80020cc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800209c:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 80020a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80020a6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 80020ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a07      	ldr	r2, [pc, #28]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 80020ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020be:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a04      	ldr	r2, [pc, #16]	@ (80020d8 <FLASH_FlushCaches+0x88>)
 80020c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ca:	6013      	str	r3, [r2, #0]
  }
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00

080020dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	@ 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	e16b      	b.n	80023d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020f8:	2201      	movs	r2, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	429a      	cmp	r2, r3
 8002112:	f040 815a 	bne.w	80023ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d005      	beq.n	800212e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212a:	2b02      	cmp	r3, #2
 800212c:	d130      	bne.n	8002190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	2203      	movs	r2, #3
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002164:	2201      	movs	r2, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 0201 	and.w	r2, r3, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b03      	cmp	r3, #3
 800219a:	d017      	beq.n	80021cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d123      	bne.n	8002220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	08da      	lsrs	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3208      	adds	r2, #8
 80021e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	220f      	movs	r2, #15
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	08da      	lsrs	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3208      	adds	r2, #8
 800221a:	69b9      	ldr	r1, [r7, #24]
 800221c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0203 	and.w	r2, r3, #3
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80b4 	beq.w	80023ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b60      	ldr	r3, [pc, #384]	@ (80023e8 <HAL_GPIO_Init+0x30c>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	4a5f      	ldr	r2, [pc, #380]	@ (80023e8 <HAL_GPIO_Init+0x30c>)
 800226c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002270:	6453      	str	r3, [r2, #68]	@ 0x44
 8002272:	4b5d      	ldr	r3, [pc, #372]	@ (80023e8 <HAL_GPIO_Init+0x30c>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800227e:	4a5b      	ldr	r2, [pc, #364]	@ (80023ec <HAL_GPIO_Init+0x310>)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	3302      	adds	r3, #2
 8002286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	220f      	movs	r2, #15
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a52      	ldr	r2, [pc, #328]	@ (80023f0 <HAL_GPIO_Init+0x314>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d02b      	beq.n	8002302 <HAL_GPIO_Init+0x226>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a51      	ldr	r2, [pc, #324]	@ (80023f4 <HAL_GPIO_Init+0x318>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d025      	beq.n	80022fe <HAL_GPIO_Init+0x222>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a50      	ldr	r2, [pc, #320]	@ (80023f8 <HAL_GPIO_Init+0x31c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01f      	beq.n	80022fa <HAL_GPIO_Init+0x21e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4f      	ldr	r2, [pc, #316]	@ (80023fc <HAL_GPIO_Init+0x320>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d019      	beq.n	80022f6 <HAL_GPIO_Init+0x21a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002400 <HAL_GPIO_Init+0x324>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0x216>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002404 <HAL_GPIO_Init+0x328>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00d      	beq.n	80022ee <HAL_GPIO_Init+0x212>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002408 <HAL_GPIO_Init+0x32c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <HAL_GPIO_Init+0x20e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4b      	ldr	r2, [pc, #300]	@ (800240c <HAL_GPIO_Init+0x330>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_GPIO_Init+0x20a>
 80022e2:	2307      	movs	r3, #7
 80022e4:	e00e      	b.n	8002304 <HAL_GPIO_Init+0x228>
 80022e6:	2308      	movs	r3, #8
 80022e8:	e00c      	b.n	8002304 <HAL_GPIO_Init+0x228>
 80022ea:	2306      	movs	r3, #6
 80022ec:	e00a      	b.n	8002304 <HAL_GPIO_Init+0x228>
 80022ee:	2305      	movs	r3, #5
 80022f0:	e008      	b.n	8002304 <HAL_GPIO_Init+0x228>
 80022f2:	2304      	movs	r3, #4
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x228>
 80022f6:	2303      	movs	r3, #3
 80022f8:	e004      	b.n	8002304 <HAL_GPIO_Init+0x228>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e002      	b.n	8002304 <HAL_GPIO_Init+0x228>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_GPIO_Init+0x228>
 8002302:	2300      	movs	r3, #0
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	f002 0203 	and.w	r2, r2, #3
 800230a:	0092      	lsls	r2, r2, #2
 800230c:	4093      	lsls	r3, r2
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002314:	4935      	ldr	r1, [pc, #212]	@ (80023ec <HAL_GPIO_Init+0x310>)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002322:	4b3b      	ldr	r3, [pc, #236]	@ (8002410 <HAL_GPIO_Init+0x334>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002346:	4a32      	ldr	r2, [pc, #200]	@ (8002410 <HAL_GPIO_Init+0x334>)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800234c:	4b30      	ldr	r3, [pc, #192]	@ (8002410 <HAL_GPIO_Init+0x334>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002370:	4a27      	ldr	r2, [pc, #156]	@ (8002410 <HAL_GPIO_Init+0x334>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002376:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <HAL_GPIO_Init+0x334>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800239a:	4a1d      	ldr	r2, [pc, #116]	@ (8002410 <HAL_GPIO_Init+0x334>)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <HAL_GPIO_Init+0x334>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c4:	4a12      	ldr	r2, [pc, #72]	@ (8002410 <HAL_GPIO_Init+0x334>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3301      	adds	r3, #1
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b0f      	cmp	r3, #15
 80023d4:	f67f ae90 	bls.w	80020f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3724      	adds	r7, #36	@ 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40013800 	.word	0x40013800
 80023f0:	40020000 	.word	0x40020000
 80023f4:	40020400 	.word	0x40020400
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40020c00 	.word	0x40020c00
 8002400:	40021000 	.word	0x40021000
 8002404:	40021400 	.word	0x40021400
 8002408:	40021800 	.word	0x40021800
 800240c:	40021c00 	.word	0x40021c00
 8002410:	40013c00 	.word	0x40013c00

08002414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
 8002420:	4613      	mov	r3, r2
 8002422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002424:	787b      	ldrb	r3, [r7, #1]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002430:	e003      	b.n	800243a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	041a      	lsls	r2, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	619a      	str	r2, [r3, #24]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af02      	add	r7, sp, #8
 800244c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e101      	b.n	800265c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f006 f8c6 	bl	8008604 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2203      	movs	r2, #3
 800247c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002486:	d102      	bne.n	800248e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f002 fc7b 	bl	8004d8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7c1a      	ldrb	r2, [r3, #16]
 80024a0:	f88d 2000 	strb.w	r2, [sp]
 80024a4:	3304      	adds	r3, #4
 80024a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a8:	f002 fb5a 	bl	8004b60 <USB_CoreInit>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2202      	movs	r2, #2
 80024b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0ce      	b.n	800265c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f002 fc73 	bl	8004db0 <USB_SetCurrentMode>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0bf      	b.n	800265c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
 80024e0:	e04a      	b.n	8002578 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3315      	adds	r3, #21
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3314      	adds	r3, #20
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	b298      	uxth	r0, r3
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	332e      	adds	r3, #46	@ 0x2e
 800251e:	4602      	mov	r2, r0
 8002520:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	3318      	adds	r3, #24
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	331c      	adds	r3, #28
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	3320      	adds	r3, #32
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	3324      	adds	r3, #36	@ 0x24
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	3301      	adds	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	791b      	ldrb	r3, [r3, #4]
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	429a      	cmp	r2, r3
 8002580:	d3af      	bcc.n	80024e2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e044      	b.n	8002612 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	3301      	adds	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	791b      	ldrb	r3, [r3, #4]
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	429a      	cmp	r2, r3
 800261a:	d3b5      	bcc.n	8002588 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7c1a      	ldrb	r2, [r3, #16]
 8002624:	f88d 2000 	strb.w	r2, [sp]
 8002628:	3304      	adds	r3, #4
 800262a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262c:	f002 fc0c 	bl	8004e48 <USB_DevInit>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2202      	movs	r2, #2
 800263a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e00c      	b.n	800265c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f003 fc56 	bl	8005f06 <USB_DevDisconnect>

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_PCD_Start+0x1c>
 800267c:	2302      	movs	r3, #2
 800267e:	e022      	b.n	80026c6 <HAL_PCD_Start+0x62>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002698:	2b01      	cmp	r3, #1
 800269a:	d105      	bne.n	80026a8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f002 fb5d 	bl	8004d6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 fc04 	bl	8005ec4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026ce:	b590      	push	{r4, r7, lr}
 80026d0:	b08d      	sub	sp, #52	@ 0x34
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f003 fcc2 	bl	800606e <USB_GetMode>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f040 848c 	bne.w	800300a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 fc26 	bl	8005f48 <USB_ReadInterrupts>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8482 	beq.w	8003008 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f003 fc13 	bl	8005f48 <USB_ReadInterrupts>
 8002722:	4603      	mov	r3, r0
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b02      	cmp	r3, #2
 800272a:	d107      	bne.n	800273c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f002 0202 	and.w	r2, r2, #2
 800273a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fc01 	bl	8005f48 <USB_ReadInterrupts>
 8002746:	4603      	mov	r3, r0
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b10      	cmp	r3, #16
 800274e:	d161      	bne.n	8002814 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0210 	bic.w	r2, r2, #16
 800275e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	f003 020f 	and.w	r2, r3, #15
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	4413      	add	r3, r2
 800277c:	3304      	adds	r3, #4
 800277e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002786:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800278a:	d124      	bne.n	80027d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d035      	beq.n	8002804 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	6a38      	ldr	r0, [r7, #32]
 80027ac:	f003 fa38 	bl	8005c20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027bc:	441a      	add	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ce:	441a      	add	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	615a      	str	r2, [r3, #20]
 80027d4:	e016      	b.n	8002804 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80027dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80027e0:	d110      	bne.n	8002804 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027e8:	2208      	movs	r2, #8
 80027ea:	4619      	mov	r1, r3
 80027ec:	6a38      	ldr	r0, [r7, #32]
 80027ee:	f003 fa17 	bl	8005c20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027fe:	441a      	add	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0210 	orr.w	r2, r2, #16
 8002812:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f003 fb95 	bl	8005f48 <USB_ReadInterrupts>
 800281e:	4603      	mov	r3, r0
 8002820:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002824:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002828:	f040 80a7 	bne.w	800297a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f003 fb9a 	bl	8005f6e <USB_ReadDevAllOutEpInterrupt>
 800283a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800283c:	e099      	b.n	8002972 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800283e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 808e 	beq.w	8002966 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f003 fbbe 	bl	8005fd6 <USB_ReadDevOutEPInterrupt>
 800285a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00c      	beq.n	8002880 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002872:	461a      	mov	r2, r3
 8002874:	2301      	movs	r3, #1
 8002876:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fea4 	bl	80035c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00c      	beq.n	80028a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002896:	461a      	mov	r2, r3
 8002898:	2308      	movs	r3, #8
 800289a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800289c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 ff7a 	bl	8003798 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ba:	461a      	mov	r2, r3
 80028bc:	2310      	movs	r3, #16
 80028be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d030      	beq.n	800292c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d2:	2b80      	cmp	r3, #128	@ 0x80
 80028d4:	d109      	bne.n	80028ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	4413      	add	r3, r2
 80028fc:	3304      	adds	r3, #4
 80028fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	78db      	ldrb	r3, [r3, #3]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d108      	bne.n	800291a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2200      	movs	r2, #0
 800290c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	b2db      	uxtb	r3, r3
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f005 ff7b 	bl	8008810 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	4413      	add	r3, r2
 8002922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002926:	461a      	mov	r2, r3
 8002928:	2302      	movs	r3, #2
 800292a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	4413      	add	r3, r2
 800293e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002942:	461a      	mov	r2, r3
 8002944:	2320      	movs	r3, #32
 8002946:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800295e:	461a      	mov	r2, r3
 8002960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002964:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	3301      	adds	r3, #1
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800296c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002974:	2b00      	cmp	r3, #0
 8002976:	f47f af62 	bne.w	800283e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f003 fae2 	bl	8005f48 <USB_ReadInterrupts>
 8002984:	4603      	mov	r3, r0
 8002986:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800298a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800298e:	f040 80db 	bne.w	8002b48 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fb03 	bl	8005fa2 <USB_ReadDevAllInEpInterrupt>
 800299c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80029a2:	e0cd      	b.n	8002b40 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80c2 	beq.w	8002b34 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 fb29 	bl	8006012 <USB_ReadDevInEPInterrupt>
 80029c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d057      	beq.n	8002a7c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	2201      	movs	r2, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69f9      	ldr	r1, [r7, #28]
 80029e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80029ec:	4013      	ands	r3, r2
 80029ee:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029fc:	461a      	mov	r2, r3
 80029fe:	2301      	movs	r3, #1
 8002a00:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	799b      	ldrb	r3, [r3, #6]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d132      	bne.n	8002a70 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	3320      	adds	r3, #32
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4403      	add	r3, r0
 8002a2a:	331c      	adds	r3, #28
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4419      	add	r1, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4403      	add	r3, r0
 8002a3e:	3320      	adds	r3, #32
 8002a40:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d113      	bne.n	8002a70 <HAL_PCD_IRQHandler+0x3a2>
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	3324      	adds	r3, #36	@ 0x24
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d108      	bne.n	8002a70 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	f003 fb30 	bl	80060d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	4619      	mov	r1, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f005 fe45 	bl	8008706 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a92:	461a      	mov	r2, r3
 8002a94:	2308      	movs	r3, #8
 8002a96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002aca:	461a      	mov	r2, r3
 8002acc:	2340      	movs	r3, #64	@ 0x40
 8002ace:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d023      	beq.n	8002b22 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ada:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002adc:	6a38      	ldr	r0, [r7, #32]
 8002ade:	f002 fb17 	bl	8005110 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	3310      	adds	r3, #16
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	3304      	adds	r3, #4
 8002af4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	78db      	ldrb	r3, [r3, #3]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d108      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2200      	movs	r2, #0
 8002b02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f005 fe92 	bl	8008834 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2302      	movs	r3, #2
 8002b20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fcbd 	bl	80034ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	3301      	adds	r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f47f af2e 	bne.w	80029a4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f003 f9fb 	bl	8005f48 <USB_ReadInterrupts>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b5c:	d122      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d108      	bne.n	8002b8e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b84:	2100      	movs	r1, #0
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fea4 	bl	80038d4 <HAL_PCDEx_LPM_Callback>
 8002b8c:	e002      	b.n	8002b94 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f005 fe30 	bl	80087f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 f9cd 	bl	8005f48 <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bb8:	d112      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d102      	bne.n	8002bd0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f005 fdec 	bl	80087a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002bde:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 f9af 	bl	8005f48 <USB_ReadInterrupts>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bf4:	f040 80b7 	bne.w	8002d66 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2110      	movs	r1, #16
 8002c12:	4618      	mov	r0, r3
 8002c14:	f002 fa7c 	bl	8005110 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c1c:	e046      	b.n	8002cac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c30:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c42:	0151      	lsls	r1, r2, #5
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	440a      	add	r2, r1
 8002c48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c64:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c76:	0151      	lsls	r1, r2, #5
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	440a      	add	r2, r1
 8002c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c96:	0151      	lsls	r1, r2, #5
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	440a      	add	r2, r1
 8002c9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ca0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ca4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca8:	3301      	adds	r3, #1
 8002caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	791b      	ldrb	r3, [r3, #4]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d3b2      	bcc.n	8002c1e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cc6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002cca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7bdb      	ldrb	r3, [r3, #15]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d016      	beq.n	8002d02 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ce4:	f043 030b 	orr.w	r3, r3, #11
 8002ce8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cfa:	f043 030b 	orr.w	r3, r3, #11
 8002cfe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d00:	e015      	b.n	8002d2e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d14:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d18:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d28:	f043 030b 	orr.w	r3, r3, #11
 8002d2c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d3c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d40:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d50:	461a      	mov	r2, r3
 8002d52:	f003 f9bd 	bl	80060d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 f8ec 	bl	8005f48 <USB_ReadInterrupts>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d7a:	d123      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f003 f982 	bl	800608a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f002 fa39 	bl	8005202 <USB_GetDevSpeed>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681c      	ldr	r4, [r3, #0]
 8002d9c:	f001 fa0a 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 8002da0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002da6:	461a      	mov	r2, r3
 8002da8:	4620      	mov	r0, r4
 8002daa:	f001 ff3d 	bl	8004c28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f005 fcd1 	bl	8008756 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 f8bd 	bl	8005f48 <USB_ReadInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d10a      	bne.n	8002dee <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f005 fcae 	bl	800873a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f002 0208 	and.w	r2, r2, #8
 8002dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 f8a8 	bl	8005f48 <USB_ReadInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfe:	2b80      	cmp	r3, #128	@ 0x80
 8002e00:	d123      	bne.n	8002e4a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e0e:	2301      	movs	r3, #1
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e12:	e014      	b.n	8002e3e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fb0a 	bl	800344c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	791b      	ldrb	r3, [r3, #4]
 8002e42:	461a      	mov	r2, r3
 8002e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d3e4      	bcc.n	8002e14 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f003 f87a 	bl	8005f48 <USB_ReadInterrupts>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e5e:	d13c      	bne.n	8002eda <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e60:	2301      	movs	r3, #1
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e64:	e02b      	b.n	8002ebe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	3318      	adds	r3, #24
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d115      	bne.n	8002eb8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	da12      	bge.n	8002eb8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3317      	adds	r3, #23
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 faca 	bl	800344c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	3301      	adds	r3, #1
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	791b      	ldrb	r3, [r3, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d3cd      	bcc.n	8002e66 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 f832 	bl	8005f48 <USB_ReadInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002eee:	d156      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef4:	e045      	b.n	8002f82 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d12e      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	da2b      	bge.n	8002f7c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	0c1a      	lsrs	r2, r3, #16
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f2e:	4053      	eors	r3, r2
 8002f30:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d121      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f78:	6053      	str	r3, [r2, #4]
            break;
 8002f7a:	e008      	b.n	8002f8e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	3301      	adds	r3, #1
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	791b      	ldrb	r3, [r3, #4]
 8002f86:	461a      	mov	r2, r3
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d3b3      	bcc.n	8002ef6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002f9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f002 ffd0 	bl	8005f48 <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb2:	d10a      	bne.n	8002fca <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f005 fc4f 	bl	8008858 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f002 ffba 	bl	8005f48 <USB_ReadInterrupts>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d115      	bne.n	800300a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f005 fc3f 	bl	8008874 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	e000      	b.n	800300a <HAL_PCD_IRQHandler+0x93c>
      return;
 8003008:	bf00      	nop
    }
  }
}
 800300a:	3734      	adds	r7, #52	@ 0x34
 800300c:	46bd      	mov	sp, r7
 800300e:	bd90      	pop	{r4, r7, pc}

08003010 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_PCD_SetAddress+0x1a>
 8003026:	2302      	movs	r3, #2
 8003028:	e012      	b.n	8003050 <HAL_PCD_SetAddress+0x40>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f002 ff19 	bl	8005e78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	461a      	mov	r2, r3
 8003066:	4603      	mov	r3, r0
 8003068:	70fb      	strb	r3, [r7, #3]
 800306a:	460b      	mov	r3, r1
 800306c:	803b      	strh	r3, [r7, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307a:	2b00      	cmp	r3, #0
 800307c:	da0f      	bge.n	800309e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	f003 020f 	and.w	r2, r3, #15
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	3310      	adds	r3, #16
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	3304      	adds	r3, #4
 8003094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	705a      	strb	r2, [r3, #1]
 800309c:	e00f      	b.n	80030be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	f003 020f 	and.w	r2, r3, #15
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4413      	add	r3, r2
 80030b4:	3304      	adds	r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80030ca:	883b      	ldrh	r3, [r7, #0]
 80030cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	78ba      	ldrb	r2, [r7, #2]
 80030d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	785b      	ldrb	r3, [r3, #1]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030ec:	78bb      	ldrb	r3, [r7, #2]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d102      	bne.n	80030f8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_PCD_EP_Open+0xae>
 8003102:	2302      	movs	r3, #2
 8003104:	e00e      	b.n	8003124 <HAL_PCD_EP_Open+0xcc>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68f9      	ldr	r1, [r7, #12]
 8003114:	4618      	mov	r0, r3
 8003116:	f002 f899 	bl	800524c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003122:	7afb      	ldrb	r3, [r7, #11]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800313c:	2b00      	cmp	r3, #0
 800313e:	da0f      	bge.n	8003160 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	f003 020f 	and.w	r2, r3, #15
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	3310      	adds	r3, #16
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	705a      	strb	r2, [r3, #1]
 800315e:	e00f      	b.n	8003180 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	3304      	adds	r3, #4
 8003178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	b2da      	uxtb	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_PCD_EP_Close+0x6e>
 8003196:	2302      	movs	r3, #2
 8003198:	e00e      	b.n	80031b8 <HAL_PCD_EP_Close+0x8c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68f9      	ldr	r1, [r7, #12]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f002 f8d7 	bl	800535c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	460b      	mov	r3, r1
 80031ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d0:	7afb      	ldrb	r3, [r7, #11]
 80031d2:	f003 020f 	and.w	r2, r3, #15
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4413      	add	r3, r2
 80031e6:	3304      	adds	r3, #4
 80031e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2200      	movs	r2, #0
 80031fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2200      	movs	r2, #0
 8003200:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003202:	7afb      	ldrb	r3, [r7, #11]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	b2da      	uxtb	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	799b      	ldrb	r3, [r3, #6]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d102      	bne.n	800321c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	799b      	ldrb	r3, [r3, #6]
 8003224:	461a      	mov	r2, r3
 8003226:	6979      	ldr	r1, [r7, #20]
 8003228:	f002 f974 	bl	8005514 <USB_EPStartXfer>

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	460b      	mov	r3, r1
 8003240:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	f003 020f 	and.w	r2, r3, #15
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003258:	681b      	ldr	r3, [r3, #0]
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	460b      	mov	r3, r1
 8003274:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	f003 020f 	and.w	r2, r3, #15
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	3310      	adds	r3, #16
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	3304      	adds	r3, #4
 800328c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2200      	movs	r2, #0
 800329e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2201      	movs	r2, #1
 80032a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032a6:	7afb      	ldrb	r3, [r7, #11]
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	799b      	ldrb	r3, [r3, #6]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d102      	bne.n	80032c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	799b      	ldrb	r3, [r3, #6]
 80032c8:	461a      	mov	r2, r3
 80032ca:	6979      	ldr	r1, [r7, #20]
 80032cc:	f002 f922 	bl	8005514 <USB_EPStartXfer>

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	7912      	ldrb	r2, [r2, #4]
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e04f      	b.n	8003398 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da0f      	bge.n	8003320 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 020f 	and.w	r2, r3, #15
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	3310      	adds	r3, #16
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	3304      	adds	r3, #4
 8003316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	705a      	strb	r2, [r3, #1]
 800331e:	e00d      	b.n	800333c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	3304      	adds	r3, #4
 8003334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_PCD_EP_SetStall+0x82>
 8003358:	2302      	movs	r3, #2
 800335a:	e01d      	b.n	8003398 <HAL_PCD_EP_SetStall+0xbe>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68f9      	ldr	r1, [r7, #12]
 800336a:	4618      	mov	r0, r3
 800336c:	f002 fcb0 	bl	8005cd0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7999      	ldrb	r1, [r3, #6]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003388:	461a      	mov	r2, r3
 800338a:	f002 fea1 	bl	80060d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	7912      	ldrb	r2, [r2, #4]
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e042      	b.n	8003444 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	da0f      	bge.n	80033e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	f003 020f 	and.w	r2, r3, #15
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	3310      	adds	r3, #16
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	3304      	adds	r3, #4
 80033dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	705a      	strb	r2, [r3, #1]
 80033e4:	e00f      	b.n	8003406 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 020f 	and.w	r2, r3, #15
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	3304      	adds	r3, #4
 80033fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	b2da      	uxtb	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_PCD_EP_ClrStall+0x86>
 8003422:	2302      	movs	r3, #2
 8003424:	e00e      	b.n	8003444 <HAL_PCD_EP_ClrStall+0xa4>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68f9      	ldr	r1, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f002 fcb9 	bl	8005dac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800345c:	2b00      	cmp	r3, #0
 800345e:	da0c      	bge.n	800347a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	f003 020f 	and.w	r2, r3, #15
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	3310      	adds	r3, #16
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4413      	add	r3, r2
 8003474:	3304      	adds	r3, #4
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	e00c      	b.n	8003494 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	f003 020f 	and.w	r2, r3, #15
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	3304      	adds	r3, #4
 8003492:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68f9      	ldr	r1, [r7, #12]
 800349a:	4618      	mov	r0, r3
 800349c:	f002 fad8 	bl	8005a50 <USB_EPStopXfer>
 80034a0:	4603      	mov	r3, r0
 80034a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034a4:	7afb      	ldrb	r3, [r7, #11]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b08a      	sub	sp, #40	@ 0x28
 80034b2:	af02      	add	r7, sp, #8
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	3310      	adds	r3, #16
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	3304      	adds	r3, #4
 80034d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d901      	bls.n	80034e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06b      	b.n	80035be <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	691a      	ldr	r2, [r3, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d902      	bls.n	8003502 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3303      	adds	r3, #3
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800350a:	e02a      	b.n	8003562 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	429a      	cmp	r2, r3
 8003520:	d902      	bls.n	8003528 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	3303      	adds	r3, #3
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	68d9      	ldr	r1, [r3, #12]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	b2da      	uxtb	r2, r3
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	4603      	mov	r3, r0
 8003544:	6978      	ldr	r0, [r7, #20]
 8003546:	f002 fb2d 	bl	8005ba4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	441a      	add	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	441a      	add	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	429a      	cmp	r2, r3
 8003576:	d809      	bhi.n	800358c <PCD_WriteEmptyTxFifo+0xde>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003580:	429a      	cmp	r2, r3
 8003582:	d203      	bcs.n	800358c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1bf      	bne.n	800350c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	429a      	cmp	r2, r3
 8003596:	d811      	bhi.n	80035bc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	2201      	movs	r2, #1
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	6939      	ldr	r1, [r7, #16]
 80035b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035b8:	4013      	ands	r3, r2
 80035ba:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	333c      	adds	r3, #60	@ 0x3c
 80035e0:	3304      	adds	r3, #4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	799b      	ldrb	r3, [r3, #6]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d17b      	bne.n	80036f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d015      	beq.n	8003634 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4a61      	ldr	r2, [pc, #388]	@ (8003790 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	f240 80b9 	bls.w	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80b3 	beq.w	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800362a:	461a      	mov	r2, r3
 800362c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003630:	6093      	str	r3, [r2, #8]
 8003632:	e0a7      	b.n	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800364a:	461a      	mov	r2, r3
 800364c:	2320      	movs	r3, #32
 800364e:	6093      	str	r3, [r2, #8]
 8003650:	e098      	b.n	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	f040 8093 	bne.w	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	4a4b      	ldr	r2, [pc, #300]	@ (8003790 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d90f      	bls.n	8003686 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800367c:	461a      	mov	r2, r3
 800367e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003682:	6093      	str	r3, [r2, #8]
 8003684:	e07e      	b.n	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	3304      	adds	r3, #4
 800369a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1a      	ldr	r2, [r3, #32]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	0159      	lsls	r1, r3, #5
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	440b      	add	r3, r1
 80036a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b2:	1ad2      	subs	r2, r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d114      	bne.n	80036e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036d0:	461a      	mov	r2, r3
 80036d2:	2101      	movs	r1, #1
 80036d4:	f002 fcfc 	bl	80060d0 <USB_EP0_OutStart>
 80036d8:	e006      	b.n	80036e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	441a      	add	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f004 ffee 	bl	80086d0 <HAL_PCD_DataOutStageCallback>
 80036f4:	e046      	b.n	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	4a26      	ldr	r2, [pc, #152]	@ (8003794 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d124      	bne.n	8003748 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003714:	461a      	mov	r2, r3
 8003716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800371a:	6093      	str	r3, [r2, #8]
 800371c:	e032      	b.n	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003734:	461a      	mov	r2, r3
 8003736:	2320      	movs	r3, #32
 8003738:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f004 ffc5 	bl	80086d0 <HAL_PCD_DataOutStageCallback>
 8003746:	e01d      	b.n	8003784 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d114      	bne.n	8003778 <PCD_EP_OutXfrComplete_int+0x1b0>
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d108      	bne.n	8003778 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003770:	461a      	mov	r2, r3
 8003772:	2100      	movs	r1, #0
 8003774:	f002 fcac 	bl	80060d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	4619      	mov	r1, r3
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f004 ffa6 	bl	80086d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	4f54300a 	.word	0x4f54300a
 8003794:	4f54310a 	.word	0x4f54310a

08003798 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	333c      	adds	r3, #60	@ 0x3c
 80037b0:	3304      	adds	r3, #4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a15      	ldr	r2, [pc, #84]	@ (8003820 <PCD_EP_OutSetupPacket_int+0x88>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d90e      	bls.n	80037ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d009      	beq.n	80037ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e4:	461a      	mov	r2, r3
 80037e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f004 ff5d 	bl	80086ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003820 <PCD_EP_OutSetupPacket_int+0x88>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d90c      	bls.n	8003814 <PCD_EP_OutSetupPacket_int+0x7c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	799b      	ldrb	r3, [r3, #6]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d108      	bne.n	8003814 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800380c:	461a      	mov	r2, r3
 800380e:	2101      	movs	r1, #1
 8003810:	f002 fc5e 	bl	80060d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	4f54300a 	.word	0x4f54300a

08003824 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	70fb      	strb	r3, [r7, #3]
 8003830:	4613      	mov	r3, r2
 8003832:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d107      	bne.n	8003852 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003842:	883b      	ldrh	r3, [r7, #0]
 8003844:	0419      	lsls	r1, r3, #16
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	430a      	orrs	r2, r1
 800384e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003850:	e028      	b.n	80038a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	4413      	add	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
 8003864:	e00d      	b.n	8003882 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	3340      	adds	r3, #64	@ 0x40
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	4413      	add	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	3301      	adds	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	3b01      	subs	r3, #1
 8003888:	429a      	cmp	r2, r3
 800388a:	d3ec      	bcc.n	8003866 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800388c:	883b      	ldrh	r3, [r7, #0]
 800388e:	0418      	lsls	r0, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6819      	ldr	r1, [r3, #0]
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	3b01      	subs	r3, #1
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	4302      	orrs	r2, r0
 800389c:	3340      	adds	r3, #64	@ 0x40
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	887a      	ldrh	r2, [r7, #2]
 80038c4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e267      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d075      	beq.n	80039f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800390a:	4b88      	ldr	r3, [pc, #544]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b04      	cmp	r3, #4
 8003914:	d00c      	beq.n	8003930 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003916:	4b85      	ldr	r3, [pc, #532]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800391e:	2b08      	cmp	r3, #8
 8003920:	d112      	bne.n	8003948 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003922:	4b82      	ldr	r3, [pc, #520]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800392a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800392e:	d10b      	bne.n	8003948 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003930:	4b7e      	ldr	r3, [pc, #504]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d05b      	beq.n	80039f4 <HAL_RCC_OscConfig+0x108>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d157      	bne.n	80039f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e242      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003950:	d106      	bne.n	8003960 <HAL_RCC_OscConfig+0x74>
 8003952:	4b76      	ldr	r3, [pc, #472]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a75      	ldr	r2, [pc, #468]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e01d      	b.n	800399c <HAL_RCC_OscConfig+0xb0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003968:	d10c      	bne.n	8003984 <HAL_RCC_OscConfig+0x98>
 800396a:	4b70      	ldr	r3, [pc, #448]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a6f      	ldr	r2, [pc, #444]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	4b6d      	ldr	r3, [pc, #436]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a6c      	ldr	r2, [pc, #432]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e00b      	b.n	800399c <HAL_RCC_OscConfig+0xb0>
 8003984:	4b69      	ldr	r3, [pc, #420]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a68      	ldr	r2, [pc, #416]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 800398a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	4b66      	ldr	r3, [pc, #408]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a65      	ldr	r2, [pc, #404]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800399a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d013      	beq.n	80039cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fd ff84 	bl	80018b0 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fd ff80 	bl	80018b0 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	@ 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e207      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	4b5b      	ldr	r3, [pc, #364]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0xc0>
 80039ca:	e014      	b.n	80039f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fd ff70 	bl	80018b0 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d4:	f7fd ff6c 	bl	80018b0 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	@ 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e1f3      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	4b51      	ldr	r3, [pc, #324]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0xe8>
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d063      	beq.n	8003aca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a02:	4b4a      	ldr	r3, [pc, #296]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a0e:	4b47      	ldr	r3, [pc, #284]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d11c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1a:	4b44      	ldr	r3, [pc, #272]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d116      	bne.n	8003a54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	4b41      	ldr	r3, [pc, #260]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_RCC_OscConfig+0x152>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e1c7      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4937      	ldr	r1, [pc, #220]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	e03a      	b.n	8003aca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5c:	4b34      	ldr	r3, [pc, #208]	@ (8003b30 <HAL_RCC_OscConfig+0x244>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fd ff25 	bl	80018b0 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7fd ff21 	bl	80018b0 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e1a8      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	4b28      	ldr	r3, [pc, #160]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4925      	ldr	r1, [pc, #148]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
 8003a9c:	e015      	b.n	8003aca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9e:	4b24      	ldr	r3, [pc, #144]	@ (8003b30 <HAL_RCC_OscConfig+0x244>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fd ff04 	bl	80018b0 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aac:	f7fd ff00 	bl	80018b0 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e187      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	4b1b      	ldr	r3, [pc, #108]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d036      	beq.n	8003b44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d016      	beq.n	8003b0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ade:	4b15      	ldr	r3, [pc, #84]	@ (8003b34 <HAL_RCC_OscConfig+0x248>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae4:	f7fd fee4 	bl	80018b0 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aec:	f7fd fee0 	bl	80018b0 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e167      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x200>
 8003b0a:	e01b      	b.n	8003b44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0c:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <HAL_RCC_OscConfig+0x248>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b12:	f7fd fecd 	bl	80018b0 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b18:	e00e      	b.n	8003b38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1a:	f7fd fec9 	bl	80018b0 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d907      	bls.n	8003b38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e150      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	42470000 	.word	0x42470000
 8003b34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	4b88      	ldr	r3, [pc, #544]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ea      	bne.n	8003b1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8097 	beq.w	8003c80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4b81      	ldr	r3, [pc, #516]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	4b7d      	ldr	r3, [pc, #500]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b72:	4b7a      	ldr	r3, [pc, #488]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4b77      	ldr	r3, [pc, #476]	@ (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d118      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8e:	4b74      	ldr	r3, [pc, #464]	@ (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a73      	ldr	r2, [pc, #460]	@ (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9a:	f7fd fe89 	bl	80018b0 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba2:	f7fd fe85 	bl	80018b0 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e10c      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x2ea>
 8003bc8:	4b64      	ldr	r3, [pc, #400]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bcc:	4a63      	ldr	r2, [pc, #396]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd4:	e01c      	b.n	8003c10 <HAL_RCC_OscConfig+0x324>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x30c>
 8003bde:	4b5f      	ldr	r3, [pc, #380]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be2:	4a5e      	ldr	r2, [pc, #376]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003be4:	f043 0304 	orr.w	r3, r3, #4
 8003be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bea:	4b5c      	ldr	r3, [pc, #368]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bee:	4a5b      	ldr	r2, [pc, #364]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0x324>
 8003bf8:	4b58      	ldr	r3, [pc, #352]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfc:	4a57      	ldr	r2, [pc, #348]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c04:	4b55      	ldr	r3, [pc, #340]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c08:	4a54      	ldr	r2, [pc, #336]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c0a:	f023 0304 	bic.w	r3, r3, #4
 8003c0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fd fe4a 	bl	80018b0 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c20:	f7fd fe46 	bl	80018b0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e0cb      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	4b49      	ldr	r3, [pc, #292]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0ee      	beq.n	8003c20 <HAL_RCC_OscConfig+0x334>
 8003c42:	e014      	b.n	8003c6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c44:	f7fd fe34 	bl	80018b0 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fd fe30 	bl	80018b0 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e0b5      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c62:	4b3e      	ldr	r3, [pc, #248]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1ee      	bne.n	8003c4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d105      	bne.n	8003c80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c74:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	4a38      	ldr	r2, [pc, #224]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80a1 	beq.w	8003dcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c8a:	4b34      	ldr	r3, [pc, #208]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d05c      	beq.n	8003d50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d141      	bne.n	8003d22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b31      	ldr	r3, [pc, #196]	@ (8003d64 <HAL_RCC_OscConfig+0x478>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd fe04 	bl	80018b0 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fd fe00 	bl	80018b0 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e087      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	4b27      	ldr	r3, [pc, #156]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	019b      	lsls	r3, r3, #6
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	061b      	lsls	r3, r3, #24
 8003cee:	491b      	ldr	r1, [pc, #108]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d64 <HAL_RCC_OscConfig+0x478>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfa:	f7fd fdd9 	bl	80018b0 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d02:	f7fd fdd5 	bl	80018b0 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e05c      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d14:	4b11      	ldr	r3, [pc, #68]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x416>
 8003d20:	e054      	b.n	8003dcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d22:	4b10      	ldr	r3, [pc, #64]	@ (8003d64 <HAL_RCC_OscConfig+0x478>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fd fdc2 	bl	80018b0 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fd fdbe 	bl	80018b0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e045      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x444>
 8003d4e:	e03d      	b.n	8003dcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d107      	bne.n	8003d68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e038      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40007000 	.word	0x40007000
 8003d64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d68:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ec>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d028      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d121      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d11a      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d98:	4013      	ands	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d111      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dae:	085b      	lsrs	r3, r3, #1
 8003db0:	3b01      	subs	r3, #1
 8003db2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800

08003ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0cc      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003df0:	4b68      	ldr	r3, [pc, #416]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d90c      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfe:	4b65      	ldr	r3, [pc, #404]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b63      	ldr	r3, [pc, #396]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0b8      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e30:	4b59      	ldr	r3, [pc, #356]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4a58      	ldr	r2, [pc, #352]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e48:	4b53      	ldr	r3, [pc, #332]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a52      	ldr	r2, [pc, #328]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e54:	4b50      	ldr	r3, [pc, #320]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	494d      	ldr	r1, [pc, #308]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d044      	beq.n	8003efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7a:	4b47      	ldr	r3, [pc, #284]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d119      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e07f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d003      	beq.n	8003e9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e06f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e067      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eba:	4b37      	ldr	r3, [pc, #220]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f023 0203 	bic.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4934      	ldr	r1, [pc, #208]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ecc:	f7fd fcf0 	bl	80018b0 <HAL_GetTick>
 8003ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed4:	f7fd fcec 	bl	80018b0 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e04f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	4b2b      	ldr	r3, [pc, #172]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 020c 	and.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d1eb      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003efc:	4b25      	ldr	r3, [pc, #148]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d20c      	bcs.n	8003f24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	4b22      	ldr	r3, [pc, #136]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	4b20      	ldr	r3, [pc, #128]	@ (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e032      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f30:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4916      	ldr	r1, [pc, #88]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f4e:	4b12      	ldr	r3, [pc, #72]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	490e      	ldr	r1, [pc, #56]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f62:	f000 f821 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003f66:	4602      	mov	r2, r0
 8003f68:	4b0b      	ldr	r3, [pc, #44]	@ (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	490a      	ldr	r1, [pc, #40]	@ (8003f9c <HAL_RCC_ClockConfig+0x1c0>)
 8003f74:	5ccb      	ldrb	r3, [r1, r3]
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	4a09      	ldr	r2, [pc, #36]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd fc50 	bl	8001828 <HAL_InitTick>

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40023c00 	.word	0x40023c00
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	0800d3d4 	.word	0x0800d3d4
 8003fa0:	20000000 	.word	0x20000000
 8003fa4:	20000004 	.word	0x20000004

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fac:	b094      	sub	sp, #80	@ 0x50
 8003fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc0:	4b79      	ldr	r3, [pc, #484]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d00d      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	f200 80e1 	bhi.w	8004194 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0x34>
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fda:	e0db      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fdc:	4b73      	ldr	r3, [pc, #460]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003fde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fe0:	e0db      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fe2:	4b73      	ldr	r3, [pc, #460]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fe6:	e0d8      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe8:	4b6f      	ldr	r3, [pc, #444]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ff0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d063      	beq.n	80040c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	099b      	lsrs	r3, r3, #6
 8004004:	2200      	movs	r2, #0
 8004006:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004008:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800400a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004010:	633b      	str	r3, [r7, #48]	@ 0x30
 8004012:	2300      	movs	r3, #0
 8004014:	637b      	str	r3, [r7, #52]	@ 0x34
 8004016:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800401a:	4622      	mov	r2, r4
 800401c:	462b      	mov	r3, r5
 800401e:	f04f 0000 	mov.w	r0, #0
 8004022:	f04f 0100 	mov.w	r1, #0
 8004026:	0159      	lsls	r1, r3, #5
 8004028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800402c:	0150      	lsls	r0, r2, #5
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4621      	mov	r1, r4
 8004034:	1a51      	subs	r1, r2, r1
 8004036:	6139      	str	r1, [r7, #16]
 8004038:	4629      	mov	r1, r5
 800403a:	eb63 0301 	sbc.w	r3, r3, r1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800404c:	4659      	mov	r1, fp
 800404e:	018b      	lsls	r3, r1, #6
 8004050:	4651      	mov	r1, sl
 8004052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004056:	4651      	mov	r1, sl
 8004058:	018a      	lsls	r2, r1, #6
 800405a:	4651      	mov	r1, sl
 800405c:	ebb2 0801 	subs.w	r8, r2, r1
 8004060:	4659      	mov	r1, fp
 8004062:	eb63 0901 	sbc.w	r9, r3, r1
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800407a:	4690      	mov	r8, r2
 800407c:	4699      	mov	r9, r3
 800407e:	4623      	mov	r3, r4
 8004080:	eb18 0303 	adds.w	r3, r8, r3
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	462b      	mov	r3, r5
 8004088:	eb49 0303 	adc.w	r3, r9, r3
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800409a:	4629      	mov	r1, r5
 800409c:	024b      	lsls	r3, r1, #9
 800409e:	4621      	mov	r1, r4
 80040a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040a4:	4621      	mov	r1, r4
 80040a6:	024a      	lsls	r2, r1, #9
 80040a8:	4610      	mov	r0, r2
 80040aa:	4619      	mov	r1, r3
 80040ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ae:	2200      	movs	r2, #0
 80040b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040b8:	f7fc fde6 	bl	8000c88 <__aeabi_uldivmod>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4613      	mov	r3, r2
 80040c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c4:	e058      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c6:	4b38      	ldr	r3, [pc, #224]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	099b      	lsrs	r3, r3, #6
 80040cc:	2200      	movs	r2, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	4611      	mov	r1, r2
 80040d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040d6:	623b      	str	r3, [r7, #32]
 80040d8:	2300      	movs	r3, #0
 80040da:	627b      	str	r3, [r7, #36]	@ 0x24
 80040dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040e0:	4642      	mov	r2, r8
 80040e2:	464b      	mov	r3, r9
 80040e4:	f04f 0000 	mov.w	r0, #0
 80040e8:	f04f 0100 	mov.w	r1, #0
 80040ec:	0159      	lsls	r1, r3, #5
 80040ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f2:	0150      	lsls	r0, r2, #5
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4641      	mov	r1, r8
 80040fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80040fe:	4649      	mov	r1, r9
 8004100:	eb63 0b01 	sbc.w	fp, r3, r1
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004110:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004114:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004118:	ebb2 040a 	subs.w	r4, r2, sl
 800411c:	eb63 050b 	sbc.w	r5, r3, fp
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	00eb      	lsls	r3, r5, #3
 800412a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800412e:	00e2      	lsls	r2, r4, #3
 8004130:	4614      	mov	r4, r2
 8004132:	461d      	mov	r5, r3
 8004134:	4643      	mov	r3, r8
 8004136:	18e3      	adds	r3, r4, r3
 8004138:	603b      	str	r3, [r7, #0]
 800413a:	464b      	mov	r3, r9
 800413c:	eb45 0303 	adc.w	r3, r5, r3
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800414e:	4629      	mov	r1, r5
 8004150:	028b      	lsls	r3, r1, #10
 8004152:	4621      	mov	r1, r4
 8004154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004158:	4621      	mov	r1, r4
 800415a:	028a      	lsls	r2, r1, #10
 800415c:	4610      	mov	r0, r2
 800415e:	4619      	mov	r1, r3
 8004160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004162:	2200      	movs	r2, #0
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	61fa      	str	r2, [r7, #28]
 8004168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800416c:	f7fc fd8c 	bl	8000c88 <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4613      	mov	r3, r2
 8004176:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004178:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	0c1b      	lsrs	r3, r3, #16
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	3301      	adds	r3, #1
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004188:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800418a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004192:	e002      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004196:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800419a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800419c:	4618      	mov	r0, r3
 800419e:	3750      	adds	r7, #80	@ 0x50
 80041a0:	46bd      	mov	sp, r7
 80041a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	00f42400 	.word	0x00f42400
 80041b0:	007a1200 	.word	0x007a1200

080041b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b8:	4b03      	ldr	r3, [pc, #12]	@ (80041c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000000 	.word	0x20000000

080041cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041d0:	f7ff fff0 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	0a9b      	lsrs	r3, r3, #10
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	4903      	ldr	r1, [pc, #12]	@ (80041f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041e2:	5ccb      	ldrb	r3, [r1, r3]
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40023800 	.word	0x40023800
 80041f0:	0800d3e4 	.word	0x0800d3e4

080041f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041f8:	f7ff ffdc 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	0b5b      	lsrs	r3, r3, #13
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4903      	ldr	r1, [pc, #12]	@ (8004218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40023800 	.word	0x40023800
 8004218:	0800d3e4 	.word	0x0800d3e4

0800421c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e042      	b.n	80042b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fd f94a 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2224      	movs	r2, #36	@ 0x24
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800425e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fa09 	bl	8004678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08a      	sub	sp, #40	@ 0x28
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d175      	bne.n	80043c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_UART_Transmit+0x2c>
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e06e      	b.n	80043ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2221      	movs	r2, #33	@ 0x21
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042fa:	f7fd fad9 	bl	80018b0 <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	88fa      	ldrh	r2, [r7, #6]
 8004304:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	88fa      	ldrh	r2, [r7, #6]
 800430a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004314:	d108      	bne.n	8004328 <HAL_UART_Transmit+0x6c>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d104      	bne.n	8004328 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	e003      	b.n	8004330 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800432c:	2300      	movs	r3, #0
 800432e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004330:	e02e      	b.n	8004390 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2200      	movs	r2, #0
 800433a:	2180      	movs	r1, #128	@ 0x80
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f8df 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e03a      	b.n	80043ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004368:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	3302      	adds	r3, #2
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	e007      	b.n	8004382 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	3301      	adds	r3, #1
 8004380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1cb      	bne.n	8004332 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2200      	movs	r2, #0
 80043a2:	2140      	movs	r1, #64	@ 0x40
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f8ab 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e006      	b.n	80043ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b08a      	sub	sp, #40	@ 0x28
 80043d6:	af02      	add	r7, sp, #8
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	4613      	mov	r3, r2
 80043e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	f040 8081 	bne.w	80044f6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_UART_Receive+0x2e>
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e079      	b.n	80044f8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2222      	movs	r2, #34	@ 0x22
 800440e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004418:	f7fd fa4a 	bl	80018b0 <HAL_GetTick>
 800441c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	88fa      	ldrh	r2, [r7, #6]
 8004422:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	88fa      	ldrh	r2, [r7, #6]
 8004428:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004432:	d108      	bne.n	8004446 <HAL_UART_Receive+0x74>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d104      	bne.n	8004446 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800443c:	2300      	movs	r3, #0
 800443e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	e003      	b.n	800444e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800444e:	e047      	b.n	80044e0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2200      	movs	r2, #0
 8004458:	2120      	movs	r1, #32
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f850 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e042      	b.n	80044f8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10c      	bne.n	8004492 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	b29b      	uxth	r3, r3
 8004480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004484:	b29a      	uxth	r2, r3
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	3302      	adds	r3, #2
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	e01f      	b.n	80044d2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449a:	d007      	beq.n	80044ac <HAL_UART_Receive+0xda>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <HAL_UART_Receive+0xe8>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e008      	b.n	80044cc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	3301      	adds	r3, #1
 80044d0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1b2      	bne.n	8004450 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e000      	b.n	80044f8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80044f6:	2302      	movs	r3, #2
  }
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3720      	adds	r7, #32
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004510:	e03b      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d037      	beq.n	800458a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451a:	f7fd f9c9 	bl	80018b0 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	429a      	cmp	r2, r3
 8004528:	d302      	bcc.n	8004530 <UART_WaitOnFlagUntilTimeout+0x30>
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e03a      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d023      	beq.n	800458a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b80      	cmp	r3, #128	@ 0x80
 8004546:	d020      	beq.n	800458a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b40      	cmp	r3, #64	@ 0x40
 800454c:	d01d      	beq.n	800458a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b08      	cmp	r3, #8
 800455a:	d116      	bne.n	800458a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f81d 	bl	80045b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2208      	movs	r2, #8
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e00f      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4013      	ands	r3, r2
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	bf0c      	ite	eq
 800459a:	2301      	moveq	r3, #1
 800459c:	2300      	movne	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d0b4      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b095      	sub	sp, #84	@ 0x54
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	330c      	adds	r3, #12
 80045c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	330c      	adds	r3, #12
 80045d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045da:	643a      	str	r2, [r7, #64]	@ 0x40
 80045dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e5      	bne.n	80045ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3314      	adds	r3, #20
 80045f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3314      	adds	r3, #20
 800460c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800460e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004610:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e5      	bne.n	80045ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004626:	2b01      	cmp	r3, #1
 8004628:	d119      	bne.n	800465e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	60bb      	str	r3, [r7, #8]
   return(result);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f023 0310 	bic.w	r3, r3, #16
 8004640:	647b      	str	r3, [r7, #68]	@ 0x44
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800464a:	61ba      	str	r2, [r7, #24]
 800464c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6979      	ldr	r1, [r7, #20]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	613b      	str	r3, [r7, #16]
   return(result);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e5      	bne.n	800462a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800466c:	bf00      	nop
 800466e:	3754      	adds	r7, #84	@ 0x54
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800467c:	b0c0      	sub	sp, #256	@ 0x100
 800467e:	af00      	add	r7, sp, #0
 8004680:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004694:	68d9      	ldr	r1, [r3, #12]
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	ea40 0301 	orr.w	r3, r0, r1
 80046a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046d0:	f021 010c 	bic.w	r1, r1, #12
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046de:	430b      	orrs	r3, r1
 80046e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f2:	6999      	ldr	r1, [r3, #24]
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	ea40 0301 	orr.w	r3, r0, r1
 80046fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4b8f      	ldr	r3, [pc, #572]	@ (8004944 <UART_SetConfig+0x2cc>)
 8004708:	429a      	cmp	r2, r3
 800470a:	d005      	beq.n	8004718 <UART_SetConfig+0xa0>
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4b8d      	ldr	r3, [pc, #564]	@ (8004948 <UART_SetConfig+0x2d0>)
 8004714:	429a      	cmp	r2, r3
 8004716:	d104      	bne.n	8004722 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004718:	f7ff fd6c 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 800471c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004720:	e003      	b.n	800472a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004722:	f7ff fd53 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 8004726:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800472a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004734:	f040 810c 	bne.w	8004950 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800473c:	2200      	movs	r2, #0
 800473e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004742:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004746:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800474a:	4622      	mov	r2, r4
 800474c:	462b      	mov	r3, r5
 800474e:	1891      	adds	r1, r2, r2
 8004750:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004752:	415b      	adcs	r3, r3
 8004754:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004756:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800475a:	4621      	mov	r1, r4
 800475c:	eb12 0801 	adds.w	r8, r2, r1
 8004760:	4629      	mov	r1, r5
 8004762:	eb43 0901 	adc.w	r9, r3, r1
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800477a:	4690      	mov	r8, r2
 800477c:	4699      	mov	r9, r3
 800477e:	4623      	mov	r3, r4
 8004780:	eb18 0303 	adds.w	r3, r8, r3
 8004784:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004788:	462b      	mov	r3, r5
 800478a:	eb49 0303 	adc.w	r3, r9, r3
 800478e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800479e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80047a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80047a6:	460b      	mov	r3, r1
 80047a8:	18db      	adds	r3, r3, r3
 80047aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80047ac:	4613      	mov	r3, r2
 80047ae:	eb42 0303 	adc.w	r3, r2, r3
 80047b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80047b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80047b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047bc:	f7fc fa64 	bl	8000c88 <__aeabi_uldivmod>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4b61      	ldr	r3, [pc, #388]	@ (800494c <UART_SetConfig+0x2d4>)
 80047c6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	011c      	lsls	r4, r3, #4
 80047ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047e0:	4642      	mov	r2, r8
 80047e2:	464b      	mov	r3, r9
 80047e4:	1891      	adds	r1, r2, r2
 80047e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80047e8:	415b      	adcs	r3, r3
 80047ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047f0:	4641      	mov	r1, r8
 80047f2:	eb12 0a01 	adds.w	sl, r2, r1
 80047f6:	4649      	mov	r1, r9
 80047f8:	eb43 0b01 	adc.w	fp, r3, r1
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004808:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800480c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004810:	4692      	mov	sl, r2
 8004812:	469b      	mov	fp, r3
 8004814:	4643      	mov	r3, r8
 8004816:	eb1a 0303 	adds.w	r3, sl, r3
 800481a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800481e:	464b      	mov	r3, r9
 8004820:	eb4b 0303 	adc.w	r3, fp, r3
 8004824:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004834:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004838:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800483c:	460b      	mov	r3, r1
 800483e:	18db      	adds	r3, r3, r3
 8004840:	643b      	str	r3, [r7, #64]	@ 0x40
 8004842:	4613      	mov	r3, r2
 8004844:	eb42 0303 	adc.w	r3, r2, r3
 8004848:	647b      	str	r3, [r7, #68]	@ 0x44
 800484a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800484e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004852:	f7fc fa19 	bl	8000c88 <__aeabi_uldivmod>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4611      	mov	r1, r2
 800485c:	4b3b      	ldr	r3, [pc, #236]	@ (800494c <UART_SetConfig+0x2d4>)
 800485e:	fba3 2301 	umull	r2, r3, r3, r1
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	2264      	movs	r2, #100	@ 0x64
 8004866:	fb02 f303 	mul.w	r3, r2, r3
 800486a:	1acb      	subs	r3, r1, r3
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004872:	4b36      	ldr	r3, [pc, #216]	@ (800494c <UART_SetConfig+0x2d4>)
 8004874:	fba3 2302 	umull	r2, r3, r3, r2
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004880:	441c      	add	r4, r3
 8004882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004886:	2200      	movs	r2, #0
 8004888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800488c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004890:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004894:	4642      	mov	r2, r8
 8004896:	464b      	mov	r3, r9
 8004898:	1891      	adds	r1, r2, r2
 800489a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800489c:	415b      	adcs	r3, r3
 800489e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80048a4:	4641      	mov	r1, r8
 80048a6:	1851      	adds	r1, r2, r1
 80048a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80048aa:	4649      	mov	r1, r9
 80048ac:	414b      	adcs	r3, r1
 80048ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048bc:	4659      	mov	r1, fp
 80048be:	00cb      	lsls	r3, r1, #3
 80048c0:	4651      	mov	r1, sl
 80048c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048c6:	4651      	mov	r1, sl
 80048c8:	00ca      	lsls	r2, r1, #3
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	4642      	mov	r2, r8
 80048d2:	189b      	adds	r3, r3, r2
 80048d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048d8:	464b      	mov	r3, r9
 80048da:	460a      	mov	r2, r1
 80048dc:	eb42 0303 	adc.w	r3, r2, r3
 80048e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80048f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048f8:	460b      	mov	r3, r1
 80048fa:	18db      	adds	r3, r3, r3
 80048fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048fe:	4613      	mov	r3, r2
 8004900:	eb42 0303 	adc.w	r3, r2, r3
 8004904:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004906:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800490a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800490e:	f7fc f9bb 	bl	8000c88 <__aeabi_uldivmod>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4b0d      	ldr	r3, [pc, #52]	@ (800494c <UART_SetConfig+0x2d4>)
 8004918:	fba3 1302 	umull	r1, r3, r3, r2
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	2164      	movs	r1, #100	@ 0x64
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	3332      	adds	r3, #50	@ 0x32
 800492a:	4a08      	ldr	r2, [pc, #32]	@ (800494c <UART_SetConfig+0x2d4>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	f003 0207 	and.w	r2, r3, #7
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4422      	add	r2, r4
 800493e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004940:	e106      	b.n	8004b50 <UART_SetConfig+0x4d8>
 8004942:	bf00      	nop
 8004944:	40011000 	.word	0x40011000
 8004948:	40011400 	.word	0x40011400
 800494c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004954:	2200      	movs	r2, #0
 8004956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800495a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800495e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004962:	4642      	mov	r2, r8
 8004964:	464b      	mov	r3, r9
 8004966:	1891      	adds	r1, r2, r2
 8004968:	6239      	str	r1, [r7, #32]
 800496a:	415b      	adcs	r3, r3
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
 800496e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004972:	4641      	mov	r1, r8
 8004974:	1854      	adds	r4, r2, r1
 8004976:	4649      	mov	r1, r9
 8004978:	eb43 0501 	adc.w	r5, r3, r1
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	00eb      	lsls	r3, r5, #3
 8004986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800498a:	00e2      	lsls	r2, r4, #3
 800498c:	4614      	mov	r4, r2
 800498e:	461d      	mov	r5, r3
 8004990:	4643      	mov	r3, r8
 8004992:	18e3      	adds	r3, r4, r3
 8004994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004998:	464b      	mov	r3, r9
 800499a:	eb45 0303 	adc.w	r3, r5, r3
 800499e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049be:	4629      	mov	r1, r5
 80049c0:	008b      	lsls	r3, r1, #2
 80049c2:	4621      	mov	r1, r4
 80049c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049c8:	4621      	mov	r1, r4
 80049ca:	008a      	lsls	r2, r1, #2
 80049cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049d0:	f7fc f95a 	bl	8000c88 <__aeabi_uldivmod>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4b60      	ldr	r3, [pc, #384]	@ (8004b5c <UART_SetConfig+0x4e4>)
 80049da:	fba3 2302 	umull	r2, r3, r3, r2
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	011c      	lsls	r4, r3, #4
 80049e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80049f4:	4642      	mov	r2, r8
 80049f6:	464b      	mov	r3, r9
 80049f8:	1891      	adds	r1, r2, r2
 80049fa:	61b9      	str	r1, [r7, #24]
 80049fc:	415b      	adcs	r3, r3
 80049fe:	61fb      	str	r3, [r7, #28]
 8004a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a04:	4641      	mov	r1, r8
 8004a06:	1851      	adds	r1, r2, r1
 8004a08:	6139      	str	r1, [r7, #16]
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	414b      	adcs	r3, r1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	00cb      	lsls	r3, r1, #3
 8004a20:	4651      	mov	r1, sl
 8004a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a26:	4651      	mov	r1, sl
 8004a28:	00ca      	lsls	r2, r1, #3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4642      	mov	r2, r8
 8004a32:	189b      	adds	r3, r3, r2
 8004a34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a38:	464b      	mov	r3, r9
 8004a3a:	460a      	mov	r2, r1
 8004a3c:	eb42 0303 	adc.w	r3, r2, r3
 8004a40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	008b      	lsls	r3, r1, #2
 8004a60:	4641      	mov	r1, r8
 8004a62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a66:	4641      	mov	r1, r8
 8004a68:	008a      	lsls	r2, r1, #2
 8004a6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a6e:	f7fc f90b 	bl	8000c88 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4611      	mov	r1, r2
 8004a78:	4b38      	ldr	r3, [pc, #224]	@ (8004b5c <UART_SetConfig+0x4e4>)
 8004a7a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	2264      	movs	r2, #100	@ 0x64
 8004a82:	fb02 f303 	mul.w	r3, r2, r3
 8004a86:	1acb      	subs	r3, r1, r3
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	3332      	adds	r3, #50	@ 0x32
 8004a8c:	4a33      	ldr	r2, [pc, #204]	@ (8004b5c <UART_SetConfig+0x4e4>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a98:	441c      	add	r4, r3
 8004a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004aa2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004aa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	464b      	mov	r3, r9
 8004aac:	1891      	adds	r1, r2, r2
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	415b      	adcs	r3, r3
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ab8:	4641      	mov	r1, r8
 8004aba:	1851      	adds	r1, r2, r1
 8004abc:	6039      	str	r1, [r7, #0]
 8004abe:	4649      	mov	r1, r9
 8004ac0:	414b      	adcs	r3, r1
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ad0:	4659      	mov	r1, fp
 8004ad2:	00cb      	lsls	r3, r1, #3
 8004ad4:	4651      	mov	r1, sl
 8004ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ada:	4651      	mov	r1, sl
 8004adc:	00ca      	lsls	r2, r1, #3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4642      	mov	r2, r8
 8004ae6:	189b      	adds	r3, r3, r2
 8004ae8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004aea:	464b      	mov	r3, r9
 8004aec:	460a      	mov	r2, r1
 8004aee:	eb42 0303 	adc.w	r3, r2, r3
 8004af2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004afe:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	008b      	lsls	r3, r1, #2
 8004b10:	4641      	mov	r1, r8
 8004b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b16:	4641      	mov	r1, r8
 8004b18:	008a      	lsls	r2, r1, #2
 8004b1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b1e:	f7fc f8b3 	bl	8000c88 <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4b0d      	ldr	r3, [pc, #52]	@ (8004b5c <UART_SetConfig+0x4e4>)
 8004b28:	fba3 1302 	umull	r1, r3, r3, r2
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	2164      	movs	r1, #100	@ 0x64
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	3332      	adds	r3, #50	@ 0x32
 8004b3a:	4a08      	ldr	r2, [pc, #32]	@ (8004b5c <UART_SetConfig+0x4e4>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	f003 020f 	and.w	r2, r3, #15
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4422      	add	r2, r4
 8004b4e:	609a      	str	r2, [r3, #8]
}
 8004b50:	bf00      	nop
 8004b52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b56:	46bd      	mov	sp, r7
 8004b58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b5c:	51eb851f 	.word	0x51eb851f

08004b60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b60:	b084      	sub	sp, #16
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	f107 001c 	add.w	r0, r7, #28
 8004b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d123      	bne.n	8004bc2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004b8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ba2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d105      	bne.n	8004bb6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f001 fae8 	bl	800618c <USB_CoreReset>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	73fb      	strb	r3, [r7, #15]
 8004bc0:	e01b      	b.n	8004bfa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f001 fadc 	bl	800618c <USB_CoreReset>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004bd8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d106      	bne.n	8004bee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	639a      	str	r2, [r3, #56]	@ 0x38
 8004bec:	e005      	b.n	8004bfa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004bfa:	7fbb      	ldrb	r3, [r7, #30]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10b      	bne.n	8004c18 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f043 0206 	orr.w	r2, r3, #6
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c24:	b004      	add	sp, #16
 8004c26:	4770      	bx	lr

08004c28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	4613      	mov	r3, r2
 8004c34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d165      	bne.n	8004d08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4a41      	ldr	r2, [pc, #260]	@ (8004d44 <USB_SetTurnaroundTime+0x11c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d906      	bls.n	8004c52 <USB_SetTurnaroundTime+0x2a>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4a40      	ldr	r2, [pc, #256]	@ (8004d48 <USB_SetTurnaroundTime+0x120>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d202      	bcs.n	8004c52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004c4c:	230f      	movs	r3, #15
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	e062      	b.n	8004d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4a3c      	ldr	r2, [pc, #240]	@ (8004d48 <USB_SetTurnaroundTime+0x120>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d306      	bcc.n	8004c68 <USB_SetTurnaroundTime+0x40>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d4c <USB_SetTurnaroundTime+0x124>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d202      	bcs.n	8004c68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004c62:	230e      	movs	r3, #14
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	e057      	b.n	8004d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4a38      	ldr	r2, [pc, #224]	@ (8004d4c <USB_SetTurnaroundTime+0x124>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d306      	bcc.n	8004c7e <USB_SetTurnaroundTime+0x56>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4a37      	ldr	r2, [pc, #220]	@ (8004d50 <USB_SetTurnaroundTime+0x128>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d202      	bcs.n	8004c7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c78:	230d      	movs	r3, #13
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	e04c      	b.n	8004d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4a33      	ldr	r2, [pc, #204]	@ (8004d50 <USB_SetTurnaroundTime+0x128>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d306      	bcc.n	8004c94 <USB_SetTurnaroundTime+0x6c>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	4a32      	ldr	r2, [pc, #200]	@ (8004d54 <USB_SetTurnaroundTime+0x12c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d802      	bhi.n	8004c94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c8e:	230c      	movs	r3, #12
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	e041      	b.n	8004d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4a2f      	ldr	r2, [pc, #188]	@ (8004d54 <USB_SetTurnaroundTime+0x12c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d906      	bls.n	8004caa <USB_SetTurnaroundTime+0x82>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8004d58 <USB_SetTurnaroundTime+0x130>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d802      	bhi.n	8004caa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ca4:	230b      	movs	r3, #11
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	e036      	b.n	8004d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4a2a      	ldr	r2, [pc, #168]	@ (8004d58 <USB_SetTurnaroundTime+0x130>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d906      	bls.n	8004cc0 <USB_SetTurnaroundTime+0x98>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4a29      	ldr	r2, [pc, #164]	@ (8004d5c <USB_SetTurnaroundTime+0x134>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d802      	bhi.n	8004cc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004cba:	230a      	movs	r3, #10
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	e02b      	b.n	8004d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4a26      	ldr	r2, [pc, #152]	@ (8004d5c <USB_SetTurnaroundTime+0x134>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d906      	bls.n	8004cd6 <USB_SetTurnaroundTime+0xae>
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4a25      	ldr	r2, [pc, #148]	@ (8004d60 <USB_SetTurnaroundTime+0x138>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d202      	bcs.n	8004cd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004cd0:	2309      	movs	r3, #9
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	e020      	b.n	8004d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4a21      	ldr	r2, [pc, #132]	@ (8004d60 <USB_SetTurnaroundTime+0x138>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d306      	bcc.n	8004cec <USB_SetTurnaroundTime+0xc4>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4a20      	ldr	r2, [pc, #128]	@ (8004d64 <USB_SetTurnaroundTime+0x13c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d802      	bhi.n	8004cec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	e015      	b.n	8004d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4a1d      	ldr	r2, [pc, #116]	@ (8004d64 <USB_SetTurnaroundTime+0x13c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d906      	bls.n	8004d02 <USB_SetTurnaroundTime+0xda>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d68 <USB_SetTurnaroundTime+0x140>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d202      	bcs.n	8004d02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004cfc:	2307      	movs	r3, #7
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	e00a      	b.n	8004d18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d02:	2306      	movs	r3, #6
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	e007      	b.n	8004d18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d0e:	2309      	movs	r3, #9
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	e001      	b.n	8004d18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d14:	2309      	movs	r3, #9
 8004d16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	029b      	lsls	r3, r3, #10
 8004d2c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004d30:	431a      	orrs	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	00d8acbf 	.word	0x00d8acbf
 8004d48:	00e4e1c0 	.word	0x00e4e1c0
 8004d4c:	00f42400 	.word	0x00f42400
 8004d50:	01067380 	.word	0x01067380
 8004d54:	011a499f 	.word	0x011a499f
 8004d58:	01312cff 	.word	0x01312cff
 8004d5c:	014ca43f 	.word	0x014ca43f
 8004d60:	016e3600 	.word	0x016e3600
 8004d64:	01a6ab1f 	.word	0x01a6ab1f
 8004d68:	01e84800 	.word	0x01e84800

08004d6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f043 0201 	orr.w	r2, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f023 0201 	bic.w	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d115      	bne.n	8004dfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004dde:	200a      	movs	r0, #10
 8004de0:	f7fc fd72 	bl	80018c8 <HAL_Delay>
      ms += 10U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	330a      	adds	r3, #10
 8004de8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f001 f93f 	bl	800606e <USB_GetMode>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d01e      	beq.n	8004e34 <USB_SetCurrentMode+0x84>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2bc7      	cmp	r3, #199	@ 0xc7
 8004dfa:	d9f0      	bls.n	8004dde <USB_SetCurrentMode+0x2e>
 8004dfc:	e01a      	b.n	8004e34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d115      	bne.n	8004e30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e10:	200a      	movs	r0, #10
 8004e12:	f7fc fd59 	bl	80018c8 <HAL_Delay>
      ms += 10U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	330a      	adds	r3, #10
 8004e1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 f926 	bl	800606e <USB_GetMode>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <USB_SetCurrentMode+0x84>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e2c:	d9f0      	bls.n	8004e10 <USB_SetCurrentMode+0x60>
 8004e2e:	e001      	b.n	8004e34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e005      	b.n	8004e40 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2bc8      	cmp	r3, #200	@ 0xc8
 8004e38:	d101      	bne.n	8004e3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e48:	b084      	sub	sp, #16
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b086      	sub	sp, #24
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e62:	2300      	movs	r3, #0
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	e009      	b.n	8004e7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	3340      	adds	r3, #64	@ 0x40
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	2200      	movs	r2, #0
 8004e74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b0e      	cmp	r3, #14
 8004e80:	d9f2      	bls.n	8004e68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d11c      	bne.n	8004ec4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e98:	f043 0302 	orr.w	r3, r3, #2
 8004e9c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ec2:	e00b      	b.n	8004edc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ee8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d10d      	bne.n	8004f0c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ef8:	2100      	movs	r1, #0
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f968 	bl	80051d0 <USB_SetDevSpeed>
 8004f00:	e008      	b.n	8004f14 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f02:	2101      	movs	r1, #1
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f963 	bl	80051d0 <USB_SetDevSpeed>
 8004f0a:	e003      	b.n	8004f14 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f0c:	2103      	movs	r1, #3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f95e 	bl	80051d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f14:	2110      	movs	r1, #16
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8fa 	bl	8005110 <USB_FlushTxFifo>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f924 	bl	8005174 <USB_FlushRxFifo>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2300      	movs	r3, #0
 8004f40:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f48:	461a      	mov	r2, r3
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f54:	461a      	mov	r2, r3
 8004f56:	2300      	movs	r3, #0
 8004f58:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	e043      	b.n	8004fe8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f76:	d118      	bne.n	8004faa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	e013      	b.n	8004fbc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	e008      	b.n	8004fbc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	2300      	movs	r3, #0
 8004fba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2300      	movs	r3, #0
 8004fcc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004fe0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fec:	461a      	mov	r2, r3
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d3b5      	bcc.n	8004f60 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	e043      	b.n	8005082 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800500c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005010:	d118      	bne.n	8005044 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005024:	461a      	mov	r2, r3
 8005026:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	e013      	b.n	8005056 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800503a:	461a      	mov	r2, r3
 800503c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e008      	b.n	8005056 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005050:	461a      	mov	r2, r3
 8005052:	2300      	movs	r3, #0
 8005054:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005062:	461a      	mov	r2, r3
 8005064:	2300      	movs	r3, #0
 8005066:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005074:	461a      	mov	r2, r3
 8005076:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800507a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	3301      	adds	r3, #1
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005086:	461a      	mov	r2, r3
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4293      	cmp	r3, r2
 800508c:	d3b5      	bcc.n	8004ffa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800509c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80050ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f043 0210 	orr.w	r2, r3, #16
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699a      	ldr	r2, [r3, #24]
 80050c8:	4b10      	ldr	r3, [pc, #64]	@ (800510c <USB_DevInit+0x2c4>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f043 0208 	orr.w	r2, r3, #8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050f4:	f043 0304 	orr.w	r3, r3, #4
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005108:	b004      	add	sp, #16
 800510a:	4770      	bx	lr
 800510c:	803c3800 	.word	0x803c3800

08005110 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3301      	adds	r3, #1
 8005122:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800512a:	d901      	bls.n	8005130 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e01b      	b.n	8005168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	daf2      	bge.n	800511e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	019b      	lsls	r3, r3, #6
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3301      	adds	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005154:	d901      	bls.n	800515a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e006      	b.n	8005168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b20      	cmp	r3, #32
 8005164:	d0f0      	beq.n	8005148 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3301      	adds	r3, #1
 8005184:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800518c:	d901      	bls.n	8005192 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e018      	b.n	80051c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	daf2      	bge.n	8005180 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2210      	movs	r2, #16
 80051a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3301      	adds	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051b0:	d901      	bls.n	80051b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e006      	b.n	80051c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d0f0      	beq.n	80051a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	68f9      	ldr	r1, [r7, #12]
 80051ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051f0:	4313      	orrs	r3, r2
 80051f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005202:	b480      	push	{r7}
 8005204:	b087      	sub	sp, #28
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 0306 	and.w	r3, r3, #6
 800521a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d102      	bne.n	8005228 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005222:	2300      	movs	r3, #0
 8005224:	75fb      	strb	r3, [r7, #23]
 8005226:	e00a      	b.n	800523e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d002      	beq.n	8005234 <USB_GetDevSpeed+0x32>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b06      	cmp	r3, #6
 8005232:	d102      	bne.n	800523a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005234:	2302      	movs	r3, #2
 8005236:	75fb      	strb	r3, [r7, #23]
 8005238:	e001      	b.n	800523e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800523a:	230f      	movs	r3, #15
 800523c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800523e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005240:	4618      	mov	r0, r3
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d13a      	bne.n	80052de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800526e:	69da      	ldr	r2, [r3, #28]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	2101      	movs	r1, #1
 800527a:	fa01 f303 	lsl.w	r3, r1, r3
 800527e:	b29b      	uxth	r3, r3
 8005280:	68f9      	ldr	r1, [r7, #12]
 8005282:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005286:	4313      	orrs	r3, r2
 8005288:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d155      	bne.n	800534c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	791b      	ldrb	r3, [r3, #4]
 80052ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	059b      	lsls	r3, r3, #22
 80052c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052c4:	4313      	orrs	r3, r2
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	e036      	b.n	800534c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052e4:	69da      	ldr	r2, [r3, #28]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	2101      	movs	r1, #1
 80052f0:	fa01 f303 	lsl.w	r3, r1, r3
 80052f4:	041b      	lsls	r3, r3, #16
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052fc:	4313      	orrs	r3, r2
 80052fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d11a      	bne.n	800534c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	791b      	ldrb	r3, [r3, #4]
 8005330:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005332:	430b      	orrs	r3, r1
 8005334:	4313      	orrs	r3, r2
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800534a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d161      	bne.n	800543c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800538a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800538e:	d11f      	bne.n	80053d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	2101      	movs	r1, #1
 80053e2:	fa01 f303 	lsl.w	r3, r1, r3
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	43db      	mvns	r3, r3
 80053ea:	68f9      	ldr	r1, [r7, #12]
 80053ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053f0:	4013      	ands	r3, r2
 80053f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	2101      	movs	r1, #1
 8005406:	fa01 f303 	lsl.w	r3, r1, r3
 800540a:	b29b      	uxth	r3, r3
 800540c:	43db      	mvns	r3, r3
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005414:	4013      	ands	r3, r2
 8005416:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	0159      	lsls	r1, r3, #5
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	440b      	add	r3, r1
 800542e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005432:	4619      	mov	r1, r3
 8005434:	4b35      	ldr	r3, [pc, #212]	@ (800550c <USB_DeactivateEndpoint+0x1b0>)
 8005436:	4013      	ands	r3, r2
 8005438:	600b      	str	r3, [r1, #0]
 800543a:	e060      	b.n	80054fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800544e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005452:	d11f      	bne.n	8005494 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800546e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005472:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800548e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005492:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800549a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	2101      	movs	r1, #1
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	43db      	mvns	r3, r3
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054b4:	4013      	ands	r3, r2
 80054b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	2101      	movs	r1, #1
 80054ca:	fa01 f303 	lsl.w	r3, r1, r3
 80054ce:	041b      	lsls	r3, r3, #16
 80054d0:	43db      	mvns	r3, r3
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054d8:	4013      	ands	r3, r2
 80054da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	0159      	lsls	r1, r3, #5
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	440b      	add	r3, r1
 80054f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f6:	4619      	mov	r1, r3
 80054f8:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <USB_DeactivateEndpoint+0x1b4>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	ec337800 	.word	0xec337800
 8005510:	eff37800 	.word	0xeff37800

08005514 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	@ 0x28
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	4613      	mov	r3, r2
 8005520:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	785b      	ldrb	r3, [r3, #1]
 8005530:	2b01      	cmp	r3, #1
 8005532:	f040 817f 	bne.w	8005834 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d132      	bne.n	80055a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	440a      	add	r2, r1
 8005554:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005558:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800555c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005560:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	440a      	add	r2, r1
 8005578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800557c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005580:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800559c:	0cdb      	lsrs	r3, r3, #19
 800559e:	04db      	lsls	r3, r3, #19
 80055a0:	6113      	str	r3, [r2, #16]
 80055a2:	e097      	b.n	80056d4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055be:	0cdb      	lsrs	r3, r3, #19
 80055c0:	04db      	lsls	r3, r3, #19
 80055c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	0151      	lsls	r1, r2, #5
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	440a      	add	r2, r1
 80055da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80055e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80055e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d11a      	bne.n	8005624 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d903      	bls.n	8005602 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800561c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005620:	6113      	str	r3, [r2, #16]
 8005622:	e044      	b.n	80056ae <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4413      	add	r3, r2
 800562e:	1e5a      	subs	r2, r3, #1
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	fbb2 f3f3 	udiv	r3, r2, r3
 8005638:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	8afb      	ldrh	r3, [r7, #22]
 800564a:	04d9      	lsls	r1, r3, #19
 800564c:	4ba4      	ldr	r3, [pc, #656]	@ (80058e0 <USB_EPStartXfer+0x3cc>)
 800564e:	400b      	ands	r3, r1
 8005650:	69b9      	ldr	r1, [r7, #24]
 8005652:	0148      	lsls	r0, r1, #5
 8005654:	69f9      	ldr	r1, [r7, #28]
 8005656:	4401      	add	r1, r0
 8005658:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800565c:	4313      	orrs	r3, r2
 800565e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	791b      	ldrb	r3, [r3, #4]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d122      	bne.n	80056ae <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	440a      	add	r2, r1
 800567e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005682:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005686:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	8afb      	ldrh	r3, [r7, #22]
 8005698:	075b      	lsls	r3, r3, #29
 800569a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800569e:	69b9      	ldr	r1, [r7, #24]
 80056a0:	0148      	lsls	r0, r1, #5
 80056a2:	69f9      	ldr	r1, [r7, #28]
 80056a4:	4401      	add	r1, r0
 80056a6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80056aa:	4313      	orrs	r3, r2
 80056ac:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c4:	69b9      	ldr	r1, [r7, #24]
 80056c6:	0148      	lsls	r0, r1, #5
 80056c8:	69f9      	ldr	r1, [r7, #28]
 80056ca:	4401      	add	r1, r0
 80056cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80056d0:	4313      	orrs	r3, r2
 80056d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d14b      	bne.n	8005772 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ee:	461a      	mov	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	791b      	ldrb	r3, [r3, #4]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d128      	bne.n	8005750 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570a:	2b00      	cmp	r3, #0
 800570c:	d110      	bne.n	8005730 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	440a      	add	r2, r1
 8005724:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005728:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e00f      	b.n	8005750 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	0151      	lsls	r1, r2, #5
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	440a      	add	r2, r1
 8005746:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800574a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800574e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	0151      	lsls	r1, r2, #5
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	440a      	add	r2, r1
 8005766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800576a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	e166      	b.n	8005a40 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	0151      	lsls	r1, r2, #5
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	440a      	add	r2, r1
 8005788:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800578c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005790:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	791b      	ldrb	r3, [r3, #4]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d015      	beq.n	80057c6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 814e 	beq.w	8005a40 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	2101      	movs	r1, #1
 80057b6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ba:	69f9      	ldr	r1, [r7, #28]
 80057bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057c0:	4313      	orrs	r3, r2
 80057c2:	634b      	str	r3, [r1, #52]	@ 0x34
 80057c4:	e13c      	b.n	8005a40 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d110      	bne.n	80057f8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	0151      	lsls	r1, r2, #5
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	440a      	add	r2, r1
 80057ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e00f      	b.n	8005818 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005816:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	68d9      	ldr	r1, [r3, #12]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	781a      	ldrb	r2, [r3, #0]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	b298      	uxth	r0, r3
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	4603      	mov	r3, r0
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f9b9 	bl	8005ba4 <USB_WritePacket>
 8005832:	e105      	b.n	8005a40 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800584e:	0cdb      	lsrs	r3, r3, #19
 8005850:	04db      	lsls	r3, r3, #19
 8005852:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	440a      	add	r2, r1
 800586a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800586e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005872:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005876:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d132      	bne.n	80058e4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ac:	69b9      	ldr	r1, [r7, #24]
 80058ae:	0148      	lsls	r0, r1, #5
 80058b0:	69f9      	ldr	r1, [r7, #28]
 80058b2:	4401      	add	r1, r0
 80058b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80058b8:	4313      	orrs	r3, r2
 80058ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058da:	6113      	str	r3, [r2, #16]
 80058dc:	e062      	b.n	80059a4 <USB_EPStartXfer+0x490>
 80058de:	bf00      	nop
 80058e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d123      	bne.n	8005934 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f8:	691a      	ldr	r2, [r3, #16]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005902:	69b9      	ldr	r1, [r7, #24]
 8005904:	0148      	lsls	r0, r1, #5
 8005906:	69f9      	ldr	r1, [r7, #28]
 8005908:	4401      	add	r1, r0
 800590a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800590e:	4313      	orrs	r3, r2
 8005910:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800592c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005930:	6113      	str	r3, [r2, #16]
 8005932:	e037      	b.n	80059a4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4413      	add	r3, r2
 800593e:	1e5a      	subs	r2, r3, #1
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	fbb2 f3f3 	udiv	r3, r2, r3
 8005948:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	8afa      	ldrh	r2, [r7, #22]
 8005950:	fb03 f202 	mul.w	r2, r3, r2
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	8afb      	ldrh	r3, [r7, #22]
 8005968:	04d9      	lsls	r1, r3, #19
 800596a:	4b38      	ldr	r3, [pc, #224]	@ (8005a4c <USB_EPStartXfer+0x538>)
 800596c:	400b      	ands	r3, r1
 800596e:	69b9      	ldr	r1, [r7, #24]
 8005970:	0148      	lsls	r0, r1, #5
 8005972:	69f9      	ldr	r1, [r7, #28]
 8005974:	4401      	add	r1, r0
 8005976:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800597a:	4313      	orrs	r3, r2
 800597c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	0148      	lsls	r0, r1, #5
 8005998:	69f9      	ldr	r1, [r7, #28]
 800599a:	4401      	add	r1, r0
 800599c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059a0:	4313      	orrs	r3, r2
 80059a2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d10d      	bne.n	80059c6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d009      	beq.n	80059c6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	68d9      	ldr	r1, [r3, #12]
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c2:	460a      	mov	r2, r1
 80059c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	791b      	ldrb	r3, [r3, #4]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d128      	bne.n	8005a20 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d110      	bne.n	8005a00 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	e00f      	b.n	8005a20 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005a3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3720      	adds	r7, #32
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	1ff80000 	.word	0x1ff80000

08005a50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	785b      	ldrb	r3, [r3, #1]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d14a      	bne.n	8005b04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a86:	f040 8086 	bne.w	8005b96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	7812      	ldrb	r2, [r2, #0]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aa8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005aac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	7812      	ldrb	r2, [r2, #0]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005acc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ad0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d902      	bls.n	8005ae8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ae6:	e056      	b.n	8005b96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005afc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b00:	d0e7      	beq.n	8005ad2 <USB_EPStopXfer+0x82>
 8005b02:	e048      	b.n	8005b96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b1c:	d13b      	bne.n	8005b96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	7812      	ldrb	r2, [r2, #0]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d902      	bls.n	8005b7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	75fb      	strb	r3, [r7, #23]
          break;
 8005b7a:	e00c      	b.n	8005b96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b94:	d0e7      	beq.n	8005b66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b089      	sub	sp, #36	@ 0x24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	4611      	mov	r1, r2
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	71fb      	strb	r3, [r7, #7]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d123      	bne.n	8005c12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005bca:	88bb      	ldrh	r3, [r7, #4]
 8005bcc:	3303      	adds	r3, #3
 8005bce:	089b      	lsrs	r3, r3, #2
 8005bd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	e018      	b.n	8005c0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	031a      	lsls	r2, r3, #12
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005be4:	461a      	mov	r2, r3
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	3301      	adds	r3, #1
 8005c02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	3301      	adds	r3, #1
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d3e2      	bcc.n	8005bd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3724      	adds	r7, #36	@ 0x24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b08b      	sub	sp, #44	@ 0x2c
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	089b      	lsrs	r3, r3, #2
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c46:	2300      	movs	r3, #0
 8005c48:	623b      	str	r3, [r7, #32]
 8005c4a:	e014      	b.n	8005c76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	3301      	adds	r3, #1
 8005c62:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	3301      	adds	r3, #1
 8005c68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	3301      	adds	r3, #1
 8005c74:	623b      	str	r3, [r7, #32]
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d3e6      	bcc.n	8005c4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c7e:	8bfb      	ldrh	r3, [r7, #30]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01e      	beq.n	8005cc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f107 0310 	add.w	r3, r7, #16
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	701a      	strb	r2, [r3, #0]
      i++;
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	3301      	adds	r3, #1
 8005cae:	623b      	str	r3, [r7, #32]
      pDest++;
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005cb6:	8bfb      	ldrh	r3, [r7, #30]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005cbc:	8bfb      	ldrh	r3, [r7, #30]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1ea      	bne.n	8005c98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	372c      	adds	r7, #44	@ 0x2c
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d12c      	bne.n	8005d46 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	db12      	blt.n	8005d24 <USB_EPSetStall+0x54>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00f      	beq.n	8005d24 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d22:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	0151      	lsls	r1, r2, #5
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	440a      	add	r2, r1
 8005d3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	e02b      	b.n	8005d9e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	db12      	blt.n	8005d7e <USB_EPSetStall+0xae>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00f      	beq.n	8005d7e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d7c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005d9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d128      	bne.n	8005e1a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005de2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005de6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	791b      	ldrb	r3, [r3, #4]
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d003      	beq.n	8005df8 <USB_EPClearStall+0x4c>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	791b      	ldrb	r3, [r3, #4]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d138      	bne.n	8005e6a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	e027      	b.n	8005e6a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	791b      	ldrb	r3, [r3, #4]
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d003      	beq.n	8005e4a <USB_EPClearStall+0x9e>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	791b      	ldrb	r3, [r3, #4]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d10f      	bne.n	8005e6a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e68:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e96:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005e9a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005eac:	68f9      	ldr	r1, [r7, #12]
 8005eae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005ede:	f023 0303 	bic.w	r3, r3, #3
 8005ee2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ef2:	f023 0302 	bic.w	r3, r3, #2
 8005ef6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005f20:	f023 0303 	bic.w	r3, r3, #3
 8005f24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f34:	f043 0302 	orr.w	r3, r3, #2
 8005f38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f60:	68fb      	ldr	r3, [r7, #12]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	0c1b      	lsrs	r3, r3, #16
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	b29b      	uxth	r3, r3
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b085      	sub	sp, #20
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4013      	ands	r3, r2
 8006002:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006004:	68bb      	ldr	r3, [r7, #8]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006012:	b480      	push	{r7}
 8006014:	b087      	sub	sp, #28
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	460b      	mov	r3, r1
 800601c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006034:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	fa22 f303 	lsr.w	r3, r2, r3
 8006042:	01db      	lsls	r3, r3, #7
 8006044:	b2db      	uxtb	r3, r3
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4013      	ands	r3, r2
 800605e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006060:	68bb      	ldr	r3, [r7, #8]
}
 8006062:	4618      	mov	r0, r3
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f003 0301 	and.w	r3, r3, #1
}
 800607e:	4618      	mov	r0, r3
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80060a8:	f023 0307 	bic.w	r3, r3, #7
 80060ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	460b      	mov	r3, r1
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	333c      	adds	r3, #60	@ 0x3c
 80060e6:	3304      	adds	r3, #4
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	4a26      	ldr	r2, [pc, #152]	@ (8006188 <USB_EP0_OutStart+0xb8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d90a      	bls.n	800610a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006100:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006104:	d101      	bne.n	800610a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e037      	b.n	800617a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006110:	461a      	mov	r2, r3
 8006112:	2300      	movs	r3, #0
 8006114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006124:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006128:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006138:	f043 0318 	orr.w	r3, r3, #24
 800613c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800614c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006150:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006152:	7afb      	ldrb	r3, [r7, #11]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d10f      	bne.n	8006178 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615e:	461a      	mov	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006172:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006176:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	4f54300a 	.word	0x4f54300a

0800618c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3301      	adds	r3, #1
 800619c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061a4:	d901      	bls.n	80061aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e022      	b.n	80061f0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	daf2      	bge.n	8006198 <USB_CoreReset+0xc>

  count = 10U;
 80061b2:	230a      	movs	r3, #10
 80061b4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80061b6:	e002      	b.n	80061be <USB_CoreReset+0x32>
  {
    count--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1f9      	bne.n	80061b8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	f043 0201 	orr.w	r2, r3, #1
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3301      	adds	r3, #1
 80061d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061dc:	d901      	bls.n	80061e2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e006      	b.n	80061f0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d0f0      	beq.n	80061d0 <USB_CoreReset+0x44>

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006208:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800620c:	f002 fcca 	bl	8008ba4 <USBD_static_malloc>
 8006210:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	32b0      	adds	r2, #176	@ 0xb0
 8006222:	2100      	movs	r1, #0
 8006224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006228:	2302      	movs	r3, #2
 800622a:	e0d4      	b.n	80063d6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800622c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006230:	2100      	movs	r1, #0
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f004 fa9d 	bl	800a772 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	32b0      	adds	r2, #176	@ 0xb0
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	32b0      	adds	r2, #176	@ 0xb0
 8006252:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	7c1b      	ldrb	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d138      	bne.n	80062d6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006264:	4b5e      	ldr	r3, [pc, #376]	@ (80063e0 <USBD_CDC_Init+0x1e4>)
 8006266:	7819      	ldrb	r1, [r3, #0]
 8006268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800626c:	2202      	movs	r2, #2
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f002 fb75 	bl	800895e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006274:	4b5a      	ldr	r3, [pc, #360]	@ (80063e0 <USBD_CDC_Init+0x1e4>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	f003 020f 	and.w	r2, r3, #15
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	3323      	adds	r3, #35	@ 0x23
 800628a:	2201      	movs	r2, #1
 800628c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800628e:	4b55      	ldr	r3, [pc, #340]	@ (80063e4 <USBD_CDC_Init+0x1e8>)
 8006290:	7819      	ldrb	r1, [r3, #0]
 8006292:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006296:	2202      	movs	r2, #2
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f002 fb60 	bl	800895e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800629e:	4b51      	ldr	r3, [pc, #324]	@ (80063e4 <USBD_CDC_Init+0x1e8>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	f003 020f 	and.w	r2, r3, #15
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80062b6:	2201      	movs	r2, #1
 80062b8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80062ba:	4b4b      	ldr	r3, [pc, #300]	@ (80063e8 <USBD_CDC_Init+0x1ec>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	f003 020f 	and.w	r2, r3, #15
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	331c      	adds	r3, #28
 80062d0:	2210      	movs	r2, #16
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	e035      	b.n	8006342 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80062d6:	4b42      	ldr	r3, [pc, #264]	@ (80063e0 <USBD_CDC_Init+0x1e4>)
 80062d8:	7819      	ldrb	r1, [r3, #0]
 80062da:	2340      	movs	r3, #64	@ 0x40
 80062dc:	2202      	movs	r2, #2
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f002 fb3d 	bl	800895e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80062e4:	4b3e      	ldr	r3, [pc, #248]	@ (80063e0 <USBD_CDC_Init+0x1e4>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	f003 020f 	and.w	r2, r3, #15
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	440b      	add	r3, r1
 80062f8:	3323      	adds	r3, #35	@ 0x23
 80062fa:	2201      	movs	r2, #1
 80062fc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80062fe:	4b39      	ldr	r3, [pc, #228]	@ (80063e4 <USBD_CDC_Init+0x1e8>)
 8006300:	7819      	ldrb	r1, [r3, #0]
 8006302:	2340      	movs	r3, #64	@ 0x40
 8006304:	2202      	movs	r2, #2
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f002 fb29 	bl	800895e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800630c:	4b35      	ldr	r3, [pc, #212]	@ (80063e4 <USBD_CDC_Init+0x1e8>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	f003 020f 	and.w	r2, r3, #15
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006324:	2201      	movs	r2, #1
 8006326:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006328:	4b2f      	ldr	r3, [pc, #188]	@ (80063e8 <USBD_CDC_Init+0x1ec>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f003 020f 	and.w	r2, r3, #15
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	440b      	add	r3, r1
 800633c:	331c      	adds	r3, #28
 800633e:	2210      	movs	r2, #16
 8006340:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006342:	4b29      	ldr	r3, [pc, #164]	@ (80063e8 <USBD_CDC_Init+0x1ec>)
 8006344:	7819      	ldrb	r1, [r3, #0]
 8006346:	2308      	movs	r3, #8
 8006348:	2203      	movs	r2, #3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f002 fb07 	bl	800895e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006350:	4b25      	ldr	r3, [pc, #148]	@ (80063e8 <USBD_CDC_Init+0x1ec>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	f003 020f 	and.w	r2, r3, #15
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	440b      	add	r3, r1
 8006364:	3323      	adds	r3, #35	@ 0x23
 8006366:	2201      	movs	r2, #1
 8006368:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	33b0      	adds	r3, #176	@ 0xb0
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80063a0:	2302      	movs	r3, #2
 80063a2:	e018      	b.n	80063d6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	7c1b      	ldrb	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063ac:	4b0d      	ldr	r3, [pc, #52]	@ (80063e4 <USBD_CDC_Init+0x1e8>)
 80063ae:	7819      	ldrb	r1, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80063b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f002 fbbe 	bl	8008b3c <USBD_LL_PrepareReceive>
 80063c0:	e008      	b.n	80063d4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063c2:	4b08      	ldr	r3, [pc, #32]	@ (80063e4 <USBD_CDC_Init+0x1e8>)
 80063c4:	7819      	ldrb	r1, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80063cc:	2340      	movs	r3, #64	@ 0x40
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f002 fbb4 	bl	8008b3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000093 	.word	0x20000093
 80063e4:	20000094 	.word	0x20000094
 80063e8:	20000095 	.word	0x20000095

080063ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	460b      	mov	r3, r1
 80063f6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80063f8:	4b3a      	ldr	r3, [pc, #232]	@ (80064e4 <USBD_CDC_DeInit+0xf8>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f002 fad3 	bl	80089aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006404:	4b37      	ldr	r3, [pc, #220]	@ (80064e4 <USBD_CDC_DeInit+0xf8>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	f003 020f 	and.w	r2, r3, #15
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	3323      	adds	r3, #35	@ 0x23
 800641a:	2200      	movs	r2, #0
 800641c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800641e:	4b32      	ldr	r3, [pc, #200]	@ (80064e8 <USBD_CDC_DeInit+0xfc>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f002 fac0 	bl	80089aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800642a:	4b2f      	ldr	r3, [pc, #188]	@ (80064e8 <USBD_CDC_DeInit+0xfc>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	f003 020f 	and.w	r2, r3, #15
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006446:	4b29      	ldr	r3, [pc, #164]	@ (80064ec <USBD_CDC_DeInit+0x100>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f002 faac 	bl	80089aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006452:	4b26      	ldr	r3, [pc, #152]	@ (80064ec <USBD_CDC_DeInit+0x100>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	f003 020f 	and.w	r2, r3, #15
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	440b      	add	r3, r1
 8006466:	3323      	adds	r3, #35	@ 0x23
 8006468:	2200      	movs	r2, #0
 800646a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800646c:	4b1f      	ldr	r3, [pc, #124]	@ (80064ec <USBD_CDC_DeInit+0x100>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	f003 020f 	and.w	r2, r3, #15
 8006474:	6879      	ldr	r1, [r7, #4]
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	440b      	add	r3, r1
 8006480:	331c      	adds	r3, #28
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	32b0      	adds	r2, #176	@ 0xb0
 8006490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01f      	beq.n	80064d8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	33b0      	adds	r3, #176	@ 0xb0
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	32b0      	adds	r2, #176	@ 0xb0
 80064b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f002 fb80 	bl	8008bc0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	32b0      	adds	r2, #176	@ 0xb0
 80064ca:	2100      	movs	r1, #0
 80064cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20000093 	.word	0x20000093
 80064e8:	20000094 	.word	0x20000094
 80064ec:	20000095 	.word	0x20000095

080064f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	32b0      	adds	r2, #176	@ 0xb0
 8006504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006508:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800651c:	2303      	movs	r3, #3
 800651e:	e0bf      	b.n	80066a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006528:	2b00      	cmp	r3, #0
 800652a:	d050      	beq.n	80065ce <USBD_CDC_Setup+0xde>
 800652c:	2b20      	cmp	r3, #32
 800652e:	f040 80af 	bne.w	8006690 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	88db      	ldrh	r3, [r3, #6]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d03a      	beq.n	80065b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	b25b      	sxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	da1b      	bge.n	800657c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	33b0      	adds	r3, #176	@ 0xb0
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800655a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	88d2      	ldrh	r2, [r2, #6]
 8006560:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	88db      	ldrh	r3, [r3, #6]
 8006566:	2b07      	cmp	r3, #7
 8006568:	bf28      	it	cs
 800656a:	2307      	movcs	r3, #7
 800656c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	89fa      	ldrh	r2, [r7, #14]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fda9 	bl	80080cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800657a:	e090      	b.n	800669e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	785a      	ldrb	r2, [r3, #1]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	88db      	ldrh	r3, [r3, #6]
 800658a:	2b3f      	cmp	r3, #63	@ 0x3f
 800658c:	d803      	bhi.n	8006596 <USBD_CDC_Setup+0xa6>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	88db      	ldrh	r3, [r3, #6]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	e000      	b.n	8006598 <USBD_CDC_Setup+0xa8>
 8006596:	2240      	movs	r2, #64	@ 0x40
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800659e:	6939      	ldr	r1, [r7, #16]
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80065a6:	461a      	mov	r2, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 fdbe 	bl	800812a <USBD_CtlPrepareRx>
      break;
 80065ae:	e076      	b.n	800669e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	33b0      	adds	r3, #176	@ 0xb0
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	7850      	ldrb	r0, [r2, #1]
 80065c6:	2200      	movs	r2, #0
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	4798      	blx	r3
      break;
 80065cc:	e067      	b.n	800669e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b0b      	cmp	r3, #11
 80065d4:	d851      	bhi.n	800667a <USBD_CDC_Setup+0x18a>
 80065d6:	a201      	add	r2, pc, #4	@ (adr r2, 80065dc <USBD_CDC_Setup+0xec>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	0800660d 	.word	0x0800660d
 80065e0:	08006689 	.word	0x08006689
 80065e4:	0800667b 	.word	0x0800667b
 80065e8:	0800667b 	.word	0x0800667b
 80065ec:	0800667b 	.word	0x0800667b
 80065f0:	0800667b 	.word	0x0800667b
 80065f4:	0800667b 	.word	0x0800667b
 80065f8:	0800667b 	.word	0x0800667b
 80065fc:	0800667b 	.word	0x0800667b
 8006600:	0800667b 	.word	0x0800667b
 8006604:	08006637 	.word	0x08006637
 8006608:	08006661 	.word	0x08006661
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b03      	cmp	r3, #3
 8006616:	d107      	bne.n	8006628 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006618:	f107 030a 	add.w	r3, r7, #10
 800661c:	2202      	movs	r2, #2
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fd53 	bl	80080cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006626:	e032      	b.n	800668e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 fcd1 	bl	8007fd2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006630:	2303      	movs	r3, #3
 8006632:	75fb      	strb	r3, [r7, #23]
          break;
 8006634:	e02b      	b.n	800668e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b03      	cmp	r3, #3
 8006640:	d107      	bne.n	8006652 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006642:	f107 030d 	add.w	r3, r7, #13
 8006646:	2201      	movs	r2, #1
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 fd3e 	bl	80080cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006650:	e01d      	b.n	800668e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 fcbc 	bl	8007fd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800665a:	2303      	movs	r3, #3
 800665c:	75fb      	strb	r3, [r7, #23]
          break;
 800665e:	e016      	b.n	800668e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b03      	cmp	r3, #3
 800666a:	d00f      	beq.n	800668c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f001 fcaf 	bl	8007fd2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006674:	2303      	movs	r3, #3
 8006676:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006678:	e008      	b.n	800668c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fca8 	bl	8007fd2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006682:	2303      	movs	r3, #3
 8006684:	75fb      	strb	r3, [r7, #23]
          break;
 8006686:	e002      	b.n	800668e <USBD_CDC_Setup+0x19e>
          break;
 8006688:	bf00      	nop
 800668a:	e008      	b.n	800669e <USBD_CDC_Setup+0x1ae>
          break;
 800668c:	bf00      	nop
      }
      break;
 800668e:	e006      	b.n	800669e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fc9d 	bl	8007fd2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006698:	2303      	movs	r3, #3
 800669a:	75fb      	strb	r3, [r7, #23]
      break;
 800669c:	bf00      	nop
  }

  return (uint8_t)ret;
 800669e:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80066ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	32b0      	adds	r2, #176	@ 0xb0
 80066c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e065      	b.n	800679e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	32b0      	adds	r2, #176	@ 0xb0
 80066dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	f003 020f 	and.w	r2, r3, #15
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	4613      	mov	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	440b      	add	r3, r1
 80066f4:	3314      	adds	r3, #20
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d02f      	beq.n	800675c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	f003 020f 	and.w	r2, r3, #15
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	3314      	adds	r3, #20
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	f003 010f 	and.w	r1, r3, #15
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	460b      	mov	r3, r1
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	440b      	add	r3, r1
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4403      	add	r3, r0
 8006724:	331c      	adds	r3, #28
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	fbb2 f1f3 	udiv	r1, r2, r3
 800672c:	fb01 f303 	mul.w	r3, r1, r3
 8006730:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006732:	2b00      	cmp	r3, #0
 8006734:	d112      	bne.n	800675c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006736:	78fb      	ldrb	r3, [r7, #3]
 8006738:	f003 020f 	and.w	r2, r3, #15
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	3314      	adds	r3, #20
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800674e:	78f9      	ldrb	r1, [r7, #3]
 8006750:	2300      	movs	r3, #0
 8006752:	2200      	movs	r2, #0
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f002 f9d0 	bl	8008afa <USBD_LL_Transmit>
 800675a:	e01f      	b.n	800679c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	33b0      	adds	r3, #176	@ 0xb0
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d010      	beq.n	800679c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	33b0      	adds	r3, #176	@ 0xb0
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006798:	78fa      	ldrb	r2, [r7, #3]
 800679a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	460b      	mov	r3, r1
 80067b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	32b0      	adds	r2, #176	@ 0xb0
 80067bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	32b0      	adds	r2, #176	@ 0xb0
 80067cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e01a      	b.n	800680e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	4619      	mov	r1, r3
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f002 f9ce 	bl	8008b7e <USBD_LL_GetRxDataSize>
 80067e2:	4602      	mov	r2, r0
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	33b0      	adds	r3, #176	@ 0xb0
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006808:	4611      	mov	r1, r2
 800680a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	32b0      	adds	r2, #176	@ 0xb0
 8006828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006834:	2303      	movs	r3, #3
 8006836:	e024      	b.n	8006882 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	33b0      	adds	r3, #176	@ 0xb0
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d019      	beq.n	8006880 <USBD_CDC_EP0_RxReady+0x6a>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006852:	2bff      	cmp	r3, #255	@ 0xff
 8006854:	d014      	beq.n	8006880 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	33b0      	adds	r3, #176	@ 0xb0
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800686e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006876:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	22ff      	movs	r2, #255	@ 0xff
 800687c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006894:	2182      	movs	r1, #130	@ 0x82
 8006896:	4818      	ldr	r0, [pc, #96]	@ (80068f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006898:	f000 fd62 	bl	8007360 <USBD_GetEpDesc>
 800689c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800689e:	2101      	movs	r1, #1
 80068a0:	4815      	ldr	r0, [pc, #84]	@ (80068f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068a2:	f000 fd5d 	bl	8007360 <USBD_GetEpDesc>
 80068a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068a8:	2181      	movs	r1, #129	@ 0x81
 80068aa:	4813      	ldr	r0, [pc, #76]	@ (80068f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068ac:	f000 fd58 	bl	8007360 <USBD_GetEpDesc>
 80068b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2210      	movs	r2, #16
 80068bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d006      	beq.n	80068d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068cc:	711a      	strb	r2, [r3, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d006      	beq.n	80068e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068e0:	711a      	strb	r2, [r3, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2243      	movs	r2, #67	@ 0x43
 80068ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068ec:	4b02      	ldr	r3, [pc, #8]	@ (80068f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20000050 	.word	0x20000050

080068fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006904:	2182      	movs	r1, #130	@ 0x82
 8006906:	4818      	ldr	r0, [pc, #96]	@ (8006968 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006908:	f000 fd2a 	bl	8007360 <USBD_GetEpDesc>
 800690c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800690e:	2101      	movs	r1, #1
 8006910:	4815      	ldr	r0, [pc, #84]	@ (8006968 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006912:	f000 fd25 	bl	8007360 <USBD_GetEpDesc>
 8006916:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006918:	2181      	movs	r1, #129	@ 0x81
 800691a:	4813      	ldr	r0, [pc, #76]	@ (8006968 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800691c:	f000 fd20 	bl	8007360 <USBD_GetEpDesc>
 8006920:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2210      	movs	r2, #16
 800692c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d006      	beq.n	8006942 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2200      	movs	r2, #0
 8006938:	711a      	strb	r2, [r3, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f042 0202 	orr.w	r2, r2, #2
 8006940:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d006      	beq.n	8006956 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	711a      	strb	r2, [r3, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f042 0202 	orr.w	r2, r2, #2
 8006954:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2243      	movs	r2, #67	@ 0x43
 800695a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800695c:	4b02      	ldr	r3, [pc, #8]	@ (8006968 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20000050 	.word	0x20000050

0800696c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006974:	2182      	movs	r1, #130	@ 0x82
 8006976:	4818      	ldr	r0, [pc, #96]	@ (80069d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006978:	f000 fcf2 	bl	8007360 <USBD_GetEpDesc>
 800697c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800697e:	2101      	movs	r1, #1
 8006980:	4815      	ldr	r0, [pc, #84]	@ (80069d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006982:	f000 fced 	bl	8007360 <USBD_GetEpDesc>
 8006986:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006988:	2181      	movs	r1, #129	@ 0x81
 800698a:	4813      	ldr	r0, [pc, #76]	@ (80069d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800698c:	f000 fce8 	bl	8007360 <USBD_GetEpDesc>
 8006990:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2210      	movs	r2, #16
 800699c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d006      	beq.n	80069b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069ac:	711a      	strb	r2, [r3, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d006      	beq.n	80069c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069c0:	711a      	strb	r2, [r3, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2243      	movs	r2, #67	@ 0x43
 80069ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069cc:	4b02      	ldr	r3, [pc, #8]	@ (80069d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000050 	.word	0x20000050

080069dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	220a      	movs	r2, #10
 80069e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80069ea:	4b03      	ldr	r3, [pc, #12]	@ (80069f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	2000000c 	.word	0x2000000c

080069fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e009      	b.n	8006a24 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	33b0      	adds	r3, #176	@ 0xb0
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	32b0      	adds	r2, #176	@ 0xb0
 8006a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e008      	b.n	8006a68 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	32b0      	adds	r2, #176	@ 0xb0
 8006a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e004      	b.n	8006aa2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	32b0      	adds	r2, #176	@ 0xb0
 8006ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e025      	b.n	8006b22 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d11f      	bne.n	8006b20 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006ae8:	4b10      	ldr	r3, [pc, #64]	@ (8006b2c <USBD_CDC_TransmitPacket+0x7c>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	f003 020f 	and.w	r2, r3, #15
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4613      	mov	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4403      	add	r3, r0
 8006b02:	3314      	adds	r3, #20
 8006b04:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006b06:	4b09      	ldr	r3, [pc, #36]	@ (8006b2c <USBD_CDC_TransmitPacket+0x7c>)
 8006b08:	7819      	ldrb	r1, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 ffef 	bl	8008afa <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000093 	.word	0x20000093

08006b30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	32b0      	adds	r2, #176	@ 0xb0
 8006b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b46:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	32b0      	adds	r2, #176	@ 0xb0
 8006b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e018      	b.n	8006b90 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	7c1b      	ldrb	r3, [r3, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b66:	4b0c      	ldr	r3, [pc, #48]	@ (8006b98 <USBD_CDC_ReceivePacket+0x68>)
 8006b68:	7819      	ldrb	r1, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 ffe1 	bl	8008b3c <USBD_LL_PrepareReceive>
 8006b7a:	e008      	b.n	8006b8e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b7c:	4b06      	ldr	r3, [pc, #24]	@ (8006b98 <USBD_CDC_ReceivePacket+0x68>)
 8006b7e:	7819      	ldrb	r1, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b86:	2340      	movs	r3, #64	@ 0x40
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 ffd7 	bl	8008b3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	20000094 	.word	0x20000094

08006b9c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e01f      	b.n	8006bf4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	79fa      	ldrb	r2, [r7, #7]
 8006be6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f001 fe51 	bl	8008890 <USBD_LL_Init>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e025      	b.n	8006c60 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	32ae      	adds	r2, #174	@ 0xae
 8006c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00f      	beq.n	8006c50 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	32ae      	adds	r2, #174	@ 0xae
 8006c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c40:	f107 020e 	add.w	r2, r7, #14
 8006c44:	4610      	mov	r0, r2
 8006c46:	4798      	blx	r3
 8006c48:	4602      	mov	r2, r0
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 fe59 	bl	8008928 <USBD_LL_Start>
 8006c76:	4603      	mov	r3, r0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c88:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d009      	beq.n	8006cc4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	78fa      	ldrb	r2, [r7, #3]
 8006cba:	4611      	mov	r1, r2
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	4798      	blx	r3
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	78fa      	ldrb	r2, [r7, #3]
 8006ce8:	4611      	mov	r1, r2
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f001 f922 	bl	8007f5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d36:	f003 031f 	and.w	r3, r3, #31
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d01a      	beq.n	8006d74 <USBD_LL_SetupStage+0x72>
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d822      	bhi.n	8006d88 <USBD_LL_SetupStage+0x86>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <USBD_LL_SetupStage+0x4a>
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d00a      	beq.n	8006d60 <USBD_LL_SetupStage+0x5e>
 8006d4a:	e01d      	b.n	8006d88 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fb77 	bl	8007448 <USBD_StdDevReq>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d5e:	e020      	b.n	8006da2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fbdf 	bl	800752c <USBD_StdItfReq>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73fb      	strb	r3, [r7, #15]
      break;
 8006d72:	e016      	b.n	8006da2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fc41 	bl	8007604 <USBD_StdEPReq>
 8006d82:	4603      	mov	r3, r0
 8006d84:	73fb      	strb	r3, [r7, #15]
      break;
 8006d86:	e00c      	b.n	8006da2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d8e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 fe26 	bl	80089e8 <USBD_LL_StallEP>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006da0:	bf00      	nop
  }

  return ret;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	460b      	mov	r3, r1
 8006db6:	607a      	str	r2, [r7, #4]
 8006db8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006dbe:	7afb      	ldrb	r3, [r7, #11]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d177      	bne.n	8006eb4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006dca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	f040 80a1 	bne.w	8006f1a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	8992      	ldrh	r2, [r2, #12]
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d91c      	bls.n	8006e1e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	8992      	ldrh	r2, [r2, #12]
 8006dec:	1a9a      	subs	r2, r3, r2
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	8992      	ldrh	r2, [r2, #12]
 8006dfa:	441a      	add	r2, r3
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	6919      	ldr	r1, [r3, #16]
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	899b      	ldrh	r3, [r3, #12]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	bf38      	it	cc
 8006e12:	4613      	movcc	r3, r2
 8006e14:	461a      	mov	r2, r3
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f001 f9a8 	bl	800816c <USBD_CtlContinueRx>
 8006e1c:	e07d      	b.n	8006f1a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e24:	f003 031f 	and.w	r3, r3, #31
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d014      	beq.n	8006e56 <USBD_LL_DataOutStage+0xaa>
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d81d      	bhi.n	8006e6c <USBD_LL_DataOutStage+0xc0>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <USBD_LL_DataOutStage+0x8e>
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d003      	beq.n	8006e40 <USBD_LL_DataOutStage+0x94>
 8006e38:	e018      	b.n	8006e6c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	75bb      	strb	r3, [r7, #22]
            break;
 8006e3e:	e018      	b.n	8006e72 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	4619      	mov	r1, r3
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 fa6e 	bl	800732c <USBD_CoreFindIF>
 8006e50:	4603      	mov	r3, r0
 8006e52:	75bb      	strb	r3, [r7, #22]
            break;
 8006e54:	e00d      	b.n	8006e72 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	4619      	mov	r1, r3
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 fa70 	bl	8007346 <USBD_CoreFindEP>
 8006e66:	4603      	mov	r3, r0
 8006e68:	75bb      	strb	r3, [r7, #22]
            break;
 8006e6a:	e002      	b.n	8006e72 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	75bb      	strb	r3, [r7, #22]
            break;
 8006e70:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e72:	7dbb      	ldrb	r3, [r7, #22]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d119      	bne.n	8006eac <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d113      	bne.n	8006eac <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e84:	7dba      	ldrb	r2, [r7, #22]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	32ae      	adds	r2, #174	@ 0xae
 8006e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00b      	beq.n	8006eac <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006e94:	7dba      	ldrb	r2, [r7, #22]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006e9c:	7dba      	ldrb	r2, [r7, #22]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	32ae      	adds	r2, #174	@ 0xae
 8006ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f001 f96e 	bl	800818e <USBD_CtlSendStatus>
 8006eb2:	e032      	b.n	8006f1a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006eb4:	7afb      	ldrb	r3, [r7, #11]
 8006eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 fa41 	bl	8007346 <USBD_CoreFindEP>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ec8:	7dbb      	ldrb	r3, [r7, #22]
 8006eca:	2bff      	cmp	r3, #255	@ 0xff
 8006ecc:	d025      	beq.n	8006f1a <USBD_LL_DataOutStage+0x16e>
 8006ece:	7dbb      	ldrb	r3, [r7, #22]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d122      	bne.n	8006f1a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d117      	bne.n	8006f10 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006ee0:	7dba      	ldrb	r2, [r7, #22]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	32ae      	adds	r2, #174	@ 0xae
 8006ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00f      	beq.n	8006f10 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006ef0:	7dba      	ldrb	r2, [r7, #22]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006ef8:	7dba      	ldrb	r2, [r7, #22]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	32ae      	adds	r2, #174	@ 0xae
 8006efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	7afa      	ldrb	r2, [r7, #11]
 8006f06:	4611      	mov	r1, r2
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	4798      	blx	r3
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	e000      	b.n	8006f1c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006f32:	7afb      	ldrb	r3, [r7, #11]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d178      	bne.n	800702a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3314      	adds	r3, #20
 8006f3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d163      	bne.n	8007010 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	8992      	ldrh	r2, [r2, #12]
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d91c      	bls.n	8006f8e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	8992      	ldrh	r2, [r2, #12]
 8006f5c:	1a9a      	subs	r2, r3, r2
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	8992      	ldrh	r2, [r2, #12]
 8006f6a:	441a      	add	r2, r3
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	6919      	ldr	r1, [r3, #16]
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f001 f8c4 	bl	8008108 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f80:	2300      	movs	r3, #0
 8006f82:	2200      	movs	r2, #0
 8006f84:	2100      	movs	r1, #0
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f001 fdd8 	bl	8008b3c <USBD_LL_PrepareReceive>
 8006f8c:	e040      	b.n	8007010 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	899b      	ldrh	r3, [r3, #12]
 8006f92:	461a      	mov	r2, r3
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d11c      	bne.n	8006fd6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d316      	bcc.n	8006fd6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d20f      	bcs.n	8006fd6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2100      	movs	r1, #0
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f001 f8a4 	bl	8008108 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fc8:	2300      	movs	r3, #0
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2100      	movs	r1, #0
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f001 fdb4 	bl	8008b3c <USBD_LL_PrepareReceive>
 8006fd4:	e01c      	b.n	8007010 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d10f      	bne.n	8007002 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d009      	beq.n	8007002 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007002:	2180      	movs	r1, #128	@ 0x80
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f001 fcef 	bl	80089e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f001 f8d2 	bl	80081b4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d03a      	beq.n	8007090 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f7ff fe30 	bl	8006c80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007028:	e032      	b.n	8007090 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800702a:	7afb      	ldrb	r3, [r7, #11]
 800702c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007030:	b2db      	uxtb	r3, r3
 8007032:	4619      	mov	r1, r3
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f986 	bl	8007346 <USBD_CoreFindEP>
 800703a:	4603      	mov	r3, r0
 800703c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	2bff      	cmp	r3, #255	@ 0xff
 8007042:	d025      	beq.n	8007090 <USBD_LL_DataInStage+0x16c>
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d122      	bne.n	8007090 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b03      	cmp	r3, #3
 8007054:	d11c      	bne.n	8007090 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007056:	7dfa      	ldrb	r2, [r7, #23]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	32ae      	adds	r2, #174	@ 0xae
 800705c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d014      	beq.n	8007090 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007066:	7dfa      	ldrb	r2, [r7, #23]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800706e:	7dfa      	ldrb	r2, [r7, #23]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	32ae      	adds	r2, #174	@ 0xae
 8007074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	7afa      	ldrb	r2, [r7, #11]
 800707c:	4611      	mov	r1, r2
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	4798      	blx	r3
 8007082:	4603      	mov	r3, r0
 8007084:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007086:	7dbb      	ldrb	r3, [r7, #22]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800708c:	7dbb      	ldrb	r3, [r7, #22]
 800708e:	e000      	b.n	8007092 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d014      	beq.n	8007100 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00e      	beq.n	8007100 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	6852      	ldr	r2, [r2, #4]
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	4611      	mov	r1, r2
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80070fc:	2303      	movs	r3, #3
 80070fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007100:	2340      	movs	r3, #64	@ 0x40
 8007102:	2200      	movs	r2, #0
 8007104:	2100      	movs	r1, #0
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 fc29 	bl	800895e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2240      	movs	r2, #64	@ 0x40
 8007118:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800711c:	2340      	movs	r3, #64	@ 0x40
 800711e:	2200      	movs	r2, #0
 8007120:	2180      	movs	r1, #128	@ 0x80
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 fc1b 	bl	800895e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2240      	movs	r2, #64	@ 0x40
 8007134:	841a      	strh	r2, [r3, #32]

  return ret;
 8007136:	7bfb      	ldrb	r3, [r7, #15]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	78fa      	ldrb	r2, [r7, #3]
 8007150:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b04      	cmp	r3, #4
 8007172:	d006      	beq.n	8007182 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800717a:	b2da      	uxtb	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2204      	movs	r2, #4
 8007186:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d106      	bne.n	80071ba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d110      	bne.n	80071fe <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	32ae      	adds	r2, #174	@ 0xae
 800721e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007226:	2303      	movs	r3, #3
 8007228:	e01c      	b.n	8007264 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b03      	cmp	r3, #3
 8007234:	d115      	bne.n	8007262 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	32ae      	adds	r2, #174	@ 0xae
 8007240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	32ae      	adds	r2, #174	@ 0xae
 8007254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	78fa      	ldrb	r2, [r7, #3]
 800725c:	4611      	mov	r1, r2
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	32ae      	adds	r2, #174	@ 0xae
 8007282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800728a:	2303      	movs	r3, #3
 800728c:	e01c      	b.n	80072c8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b03      	cmp	r3, #3
 8007298:	d115      	bne.n	80072c6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	32ae      	adds	r2, #174	@ 0xae
 80072a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00b      	beq.n	80072c6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	32ae      	adds	r2, #174	@ 0xae
 80072b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072be:	78fa      	ldrb	r2, [r7, #3]
 80072c0:	4611      	mov	r1, r2
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00e      	beq.n	8007322 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6852      	ldr	r2, [r2, #4]
 8007310:	b2d2      	uxtb	r2, r2
 8007312:	4611      	mov	r1, r2
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	4798      	blx	r3
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800731e:	2303      	movs	r3, #3
 8007320:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007338:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007352:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007374:	2300      	movs	r3, #0
 8007376:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	885b      	ldrh	r3, [r3, #2]
 800737c:	b29b      	uxth	r3, r3
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	7812      	ldrb	r2, [r2, #0]
 8007382:	4293      	cmp	r3, r2
 8007384:	d91f      	bls.n	80073c6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800738c:	e013      	b.n	80073b6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800738e:	f107 030a 	add.w	r3, r7, #10
 8007392:	4619      	mov	r1, r3
 8007394:	6978      	ldr	r0, [r7, #20]
 8007396:	f000 f81b 	bl	80073d0 <USBD_GetNextDesc>
 800739a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	2b05      	cmp	r3, #5
 80073a2:	d108      	bne.n	80073b6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	789b      	ldrb	r3, [r3, #2]
 80073ac:	78fa      	ldrb	r2, [r7, #3]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d008      	beq.n	80073c4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	885b      	ldrh	r3, [r3, #2]
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	897b      	ldrh	r3, [r7, #10]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d8e5      	bhi.n	800738e <USBD_GetEpDesc+0x2e>
 80073c2:	e000      	b.n	80073c6 <USBD_GetEpDesc+0x66>
          break;
 80073c4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80073c6:	693b      	ldr	r3, [r7, #16]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	7812      	ldrb	r2, [r2, #0]
 80073e6:	4413      	add	r3, r2
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4413      	add	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80073fa:	68fb      	ldr	r3, [r7, #12]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	3301      	adds	r3, #1
 800741e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007426:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800742a:	021b      	lsls	r3, r3, #8
 800742c:	b21a      	sxth	r2, r3
 800742e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007432:	4313      	orrs	r3, r2
 8007434:	b21b      	sxth	r3, r3
 8007436:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007438:	89fb      	ldrh	r3, [r7, #14]
}
 800743a:	4618      	mov	r0, r3
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
	...

08007448 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800745e:	2b40      	cmp	r3, #64	@ 0x40
 8007460:	d005      	beq.n	800746e <USBD_StdDevReq+0x26>
 8007462:	2b40      	cmp	r3, #64	@ 0x40
 8007464:	d857      	bhi.n	8007516 <USBD_StdDevReq+0xce>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00f      	beq.n	800748a <USBD_StdDevReq+0x42>
 800746a:	2b20      	cmp	r3, #32
 800746c:	d153      	bne.n	8007516 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	32ae      	adds	r2, #174	@ 0xae
 8007478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	4798      	blx	r3
 8007484:	4603      	mov	r3, r0
 8007486:	73fb      	strb	r3, [r7, #15]
      break;
 8007488:	e04a      	b.n	8007520 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	2b09      	cmp	r3, #9
 8007490:	d83b      	bhi.n	800750a <USBD_StdDevReq+0xc2>
 8007492:	a201      	add	r2, pc, #4	@ (adr r2, 8007498 <USBD_StdDevReq+0x50>)
 8007494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007498:	080074ed 	.word	0x080074ed
 800749c:	08007501 	.word	0x08007501
 80074a0:	0800750b 	.word	0x0800750b
 80074a4:	080074f7 	.word	0x080074f7
 80074a8:	0800750b 	.word	0x0800750b
 80074ac:	080074cb 	.word	0x080074cb
 80074b0:	080074c1 	.word	0x080074c1
 80074b4:	0800750b 	.word	0x0800750b
 80074b8:	080074e3 	.word	0x080074e3
 80074bc:	080074d5 	.word	0x080074d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa3e 	bl	8007944 <USBD_GetDescriptor>
          break;
 80074c8:	e024      	b.n	8007514 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fba3 	bl	8007c18 <USBD_SetAddress>
          break;
 80074d2:	e01f      	b.n	8007514 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fbe2 	bl	8007ca0 <USBD_SetConfig>
 80074dc:	4603      	mov	r3, r0
 80074de:	73fb      	strb	r3, [r7, #15]
          break;
 80074e0:	e018      	b.n	8007514 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fc85 	bl	8007df4 <USBD_GetConfig>
          break;
 80074ea:	e013      	b.n	8007514 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fcb6 	bl	8007e60 <USBD_GetStatus>
          break;
 80074f4:	e00e      	b.n	8007514 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fce5 	bl	8007ec8 <USBD_SetFeature>
          break;
 80074fe:	e009      	b.n	8007514 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fd09 	bl	8007f1a <USBD_ClrFeature>
          break;
 8007508:	e004      	b.n	8007514 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fd60 	bl	8007fd2 <USBD_CtlError>
          break;
 8007512:	bf00      	nop
      }
      break;
 8007514:	e004      	b.n	8007520 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fd5a 	bl	8007fd2 <USBD_CtlError>
      break;
 800751e:	bf00      	nop
  }

  return ret;
 8007520:	7bfb      	ldrb	r3, [r7, #15]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop

0800752c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007542:	2b40      	cmp	r3, #64	@ 0x40
 8007544:	d005      	beq.n	8007552 <USBD_StdItfReq+0x26>
 8007546:	2b40      	cmp	r3, #64	@ 0x40
 8007548:	d852      	bhi.n	80075f0 <USBD_StdItfReq+0xc4>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <USBD_StdItfReq+0x26>
 800754e:	2b20      	cmp	r3, #32
 8007550:	d14e      	bne.n	80075f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007558:	b2db      	uxtb	r3, r3
 800755a:	3b01      	subs	r3, #1
 800755c:	2b02      	cmp	r3, #2
 800755e:	d840      	bhi.n	80075e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	889b      	ldrh	r3, [r3, #4]
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b01      	cmp	r3, #1
 8007568:	d836      	bhi.n	80075d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	889b      	ldrh	r3, [r3, #4]
 800756e:	b2db      	uxtb	r3, r3
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff feda 	bl	800732c <USBD_CoreFindIF>
 8007578:	4603      	mov	r3, r0
 800757a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2bff      	cmp	r3, #255	@ 0xff
 8007580:	d01d      	beq.n	80075be <USBD_StdItfReq+0x92>
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d11a      	bne.n	80075be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007588:	7bba      	ldrb	r2, [r7, #14]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	32ae      	adds	r2, #174	@ 0xae
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00f      	beq.n	80075b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007598:	7bba      	ldrb	r2, [r7, #14]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075a0:	7bba      	ldrb	r2, [r7, #14]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	32ae      	adds	r2, #174	@ 0xae
 80075a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	4798      	blx	r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075b6:	e004      	b.n	80075c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80075b8:	2303      	movs	r3, #3
 80075ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075bc:	e001      	b.n	80075c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80075be:	2303      	movs	r3, #3
 80075c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	88db      	ldrh	r3, [r3, #6]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d110      	bne.n	80075ec <USBD_StdItfReq+0xc0>
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10d      	bne.n	80075ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fddc 	bl	800818e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075d6:	e009      	b.n	80075ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fcf9 	bl	8007fd2 <USBD_CtlError>
          break;
 80075e0:	e004      	b.n	80075ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fcf4 	bl	8007fd2 <USBD_CtlError>
          break;
 80075ea:	e000      	b.n	80075ee <USBD_StdItfReq+0xc2>
          break;
 80075ec:	bf00      	nop
      }
      break;
 80075ee:	e004      	b.n	80075fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fced 	bl	8007fd2 <USBD_CtlError>
      break;
 80075f8:	bf00      	nop
  }

  return ret;
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	889b      	ldrh	r3, [r3, #4]
 8007616:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007620:	2b40      	cmp	r3, #64	@ 0x40
 8007622:	d007      	beq.n	8007634 <USBD_StdEPReq+0x30>
 8007624:	2b40      	cmp	r3, #64	@ 0x40
 8007626:	f200 8181 	bhi.w	800792c <USBD_StdEPReq+0x328>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d02a      	beq.n	8007684 <USBD_StdEPReq+0x80>
 800762e:	2b20      	cmp	r3, #32
 8007630:	f040 817c 	bne.w	800792c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7ff fe84 	bl	8007346 <USBD_CoreFindEP>
 800763e:	4603      	mov	r3, r0
 8007640:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007642:	7b7b      	ldrb	r3, [r7, #13]
 8007644:	2bff      	cmp	r3, #255	@ 0xff
 8007646:	f000 8176 	beq.w	8007936 <USBD_StdEPReq+0x332>
 800764a:	7b7b      	ldrb	r3, [r7, #13]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f040 8172 	bne.w	8007936 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007652:	7b7a      	ldrb	r2, [r7, #13]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800765a:	7b7a      	ldrb	r2, [r7, #13]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	32ae      	adds	r2, #174	@ 0xae
 8007660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 8165 	beq.w	8007936 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800766c:	7b7a      	ldrb	r2, [r7, #13]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	32ae      	adds	r2, #174	@ 0xae
 8007672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
 800767e:	4603      	mov	r3, r0
 8007680:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007682:	e158      	b.n	8007936 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	785b      	ldrb	r3, [r3, #1]
 8007688:	2b03      	cmp	r3, #3
 800768a:	d008      	beq.n	800769e <USBD_StdEPReq+0x9a>
 800768c:	2b03      	cmp	r3, #3
 800768e:	f300 8147 	bgt.w	8007920 <USBD_StdEPReq+0x31c>
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 809b 	beq.w	80077ce <USBD_StdEPReq+0x1ca>
 8007698:	2b01      	cmp	r3, #1
 800769a:	d03c      	beq.n	8007716 <USBD_StdEPReq+0x112>
 800769c:	e140      	b.n	8007920 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d002      	beq.n	80076b0 <USBD_StdEPReq+0xac>
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d016      	beq.n	80076dc <USBD_StdEPReq+0xd8>
 80076ae:	e02c      	b.n	800770a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00d      	beq.n	80076d2 <USBD_StdEPReq+0xce>
 80076b6:	7bbb      	ldrb	r3, [r7, #14]
 80076b8:	2b80      	cmp	r3, #128	@ 0x80
 80076ba:	d00a      	beq.n	80076d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 f991 	bl	80089e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076c6:	2180      	movs	r1, #128	@ 0x80
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 f98d 	bl	80089e8 <USBD_LL_StallEP>
 80076ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076d0:	e020      	b.n	8007714 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fc7c 	bl	8007fd2 <USBD_CtlError>
              break;
 80076da:	e01b      	b.n	8007714 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	885b      	ldrh	r3, [r3, #2]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10e      	bne.n	8007702 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00b      	beq.n	8007702 <USBD_StdEPReq+0xfe>
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	2b80      	cmp	r3, #128	@ 0x80
 80076ee:	d008      	beq.n	8007702 <USBD_StdEPReq+0xfe>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	88db      	ldrh	r3, [r3, #6]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d104      	bne.n	8007702 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f001 f973 	bl	80089e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fd43 	bl	800818e <USBD_CtlSendStatus>

              break;
 8007708:	e004      	b.n	8007714 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fc60 	bl	8007fd2 <USBD_CtlError>
              break;
 8007712:	bf00      	nop
          }
          break;
 8007714:	e109      	b.n	800792a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d002      	beq.n	8007728 <USBD_StdEPReq+0x124>
 8007722:	2b03      	cmp	r3, #3
 8007724:	d016      	beq.n	8007754 <USBD_StdEPReq+0x150>
 8007726:	e04b      	b.n	80077c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00d      	beq.n	800774a <USBD_StdEPReq+0x146>
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	2b80      	cmp	r3, #128	@ 0x80
 8007732:	d00a      	beq.n	800774a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 f955 	bl	80089e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800773e:	2180      	movs	r1, #128	@ 0x80
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 f951 	bl	80089e8 <USBD_LL_StallEP>
 8007746:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007748:	e040      	b.n	80077cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fc40 	bl	8007fd2 <USBD_CtlError>
              break;
 8007752:	e03b      	b.n	80077cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	885b      	ldrh	r3, [r3, #2]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d136      	bne.n	80077ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007762:	2b00      	cmp	r3, #0
 8007764:	d004      	beq.n	8007770 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007766:	7bbb      	ldrb	r3, [r7, #14]
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f001 f95b 	bl	8008a26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fd0c 	bl	800818e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7ff fde3 	bl	8007346 <USBD_CoreFindEP>
 8007780:	4603      	mov	r3, r0
 8007782:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007784:	7b7b      	ldrb	r3, [r7, #13]
 8007786:	2bff      	cmp	r3, #255	@ 0xff
 8007788:	d01f      	beq.n	80077ca <USBD_StdEPReq+0x1c6>
 800778a:	7b7b      	ldrb	r3, [r7, #13]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d11c      	bne.n	80077ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007790:	7b7a      	ldrb	r2, [r7, #13]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007798:	7b7a      	ldrb	r2, [r7, #13]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	32ae      	adds	r2, #174	@ 0xae
 800779e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d010      	beq.n	80077ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80077a8:	7b7a      	ldrb	r2, [r7, #13]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	32ae      	adds	r2, #174	@ 0xae
 80077ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	4798      	blx	r3
 80077ba:	4603      	mov	r3, r0
 80077bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80077be:	e004      	b.n	80077ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fc05 	bl	8007fd2 <USBD_CtlError>
              break;
 80077c8:	e000      	b.n	80077cc <USBD_StdEPReq+0x1c8>
              break;
 80077ca:	bf00      	nop
          }
          break;
 80077cc:	e0ad      	b.n	800792a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d002      	beq.n	80077e0 <USBD_StdEPReq+0x1dc>
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d033      	beq.n	8007846 <USBD_StdEPReq+0x242>
 80077de:	e099      	b.n	8007914 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d007      	beq.n	80077f6 <USBD_StdEPReq+0x1f2>
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	2b80      	cmp	r3, #128	@ 0x80
 80077ea:	d004      	beq.n	80077f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fbef 	bl	8007fd2 <USBD_CtlError>
                break;
 80077f4:	e093      	b.n	800791e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	da0b      	bge.n	8007816 <USBD_StdEPReq+0x212>
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007804:	4613      	mov	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	3310      	adds	r3, #16
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4413      	add	r3, r2
 8007812:	3304      	adds	r3, #4
 8007814:	e00b      	b.n	800782e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	4413      	add	r3, r2
 800782c:	3304      	adds	r3, #4
 800782e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2200      	movs	r2, #0
 8007834:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	330e      	adds	r3, #14
 800783a:	2202      	movs	r2, #2
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fc44 	bl	80080cc <USBD_CtlSendData>
              break;
 8007844:	e06b      	b.n	800791e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007846:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800784a:	2b00      	cmp	r3, #0
 800784c:	da11      	bge.n	8007872 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	f003 020f 	and.w	r2, r3, #15
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	3323      	adds	r3, #35	@ 0x23
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d117      	bne.n	8007898 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fbb1 	bl	8007fd2 <USBD_CtlError>
                  break;
 8007870:	e055      	b.n	800791e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	f003 020f 	and.w	r2, r3, #15
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	440b      	add	r3, r1
 8007884:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fb9e 	bl	8007fd2 <USBD_CtlError>
                  break;
 8007896:	e042      	b.n	800791e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007898:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800789c:	2b00      	cmp	r3, #0
 800789e:	da0b      	bge.n	80078b8 <USBD_StdEPReq+0x2b4>
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078a6:	4613      	mov	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	3310      	adds	r3, #16
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	4413      	add	r3, r2
 80078b4:	3304      	adds	r3, #4
 80078b6:	e00b      	b.n	80078d0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078be:	4613      	mov	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	3304      	adds	r3, #4
 80078d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <USBD_StdEPReq+0x2da>
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	2b80      	cmp	r3, #128	@ 0x80
 80078dc:	d103      	bne.n	80078e6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2200      	movs	r2, #0
 80078e2:	739a      	strb	r2, [r3, #14]
 80078e4:	e00e      	b.n	8007904 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f001 f8ba 	bl	8008a64 <USBD_LL_IsStallEP>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2201      	movs	r2, #1
 80078fa:	739a      	strb	r2, [r3, #14]
 80078fc:	e002      	b.n	8007904 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2200      	movs	r2, #0
 8007902:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	330e      	adds	r3, #14
 8007908:	2202      	movs	r2, #2
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fbdd 	bl	80080cc <USBD_CtlSendData>
              break;
 8007912:	e004      	b.n	800791e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fb5b 	bl	8007fd2 <USBD_CtlError>
              break;
 800791c:	bf00      	nop
          }
          break;
 800791e:	e004      	b.n	800792a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fb55 	bl	8007fd2 <USBD_CtlError>
          break;
 8007928:	bf00      	nop
      }
      break;
 800792a:	e005      	b.n	8007938 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fb4f 	bl	8007fd2 <USBD_CtlError>
      break;
 8007934:	e000      	b.n	8007938 <USBD_StdEPReq+0x334>
      break;
 8007936:	bf00      	nop
  }

  return ret;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007952:	2300      	movs	r3, #0
 8007954:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	885b      	ldrh	r3, [r3, #2]
 800795e:	0a1b      	lsrs	r3, r3, #8
 8007960:	b29b      	uxth	r3, r3
 8007962:	3b01      	subs	r3, #1
 8007964:	2b06      	cmp	r3, #6
 8007966:	f200 8128 	bhi.w	8007bba <USBD_GetDescriptor+0x276>
 800796a:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <USBD_GetDescriptor+0x2c>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	0800798d 	.word	0x0800798d
 8007974:	080079a5 	.word	0x080079a5
 8007978:	080079e5 	.word	0x080079e5
 800797c:	08007bbb 	.word	0x08007bbb
 8007980:	08007bbb 	.word	0x08007bbb
 8007984:	08007b5b 	.word	0x08007b5b
 8007988:	08007b87 	.word	0x08007b87
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	7c12      	ldrb	r2, [r2, #16]
 8007998:	f107 0108 	add.w	r1, r7, #8
 800799c:	4610      	mov	r0, r2
 800799e:	4798      	blx	r3
 80079a0:	60f8      	str	r0, [r7, #12]
      break;
 80079a2:	e112      	b.n	8007bca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	7c1b      	ldrb	r3, [r3, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10d      	bne.n	80079c8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b4:	f107 0208 	add.w	r2, r7, #8
 80079b8:	4610      	mov	r0, r2
 80079ba:	4798      	blx	r3
 80079bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3301      	adds	r3, #1
 80079c2:	2202      	movs	r2, #2
 80079c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079c6:	e100      	b.n	8007bca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d0:	f107 0208 	add.w	r2, r7, #8
 80079d4:	4610      	mov	r0, r2
 80079d6:	4798      	blx	r3
 80079d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	3301      	adds	r3, #1
 80079de:	2202      	movs	r2, #2
 80079e0:	701a      	strb	r2, [r3, #0]
      break;
 80079e2:	e0f2      	b.n	8007bca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	885b      	ldrh	r3, [r3, #2]
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b05      	cmp	r3, #5
 80079ec:	f200 80ac 	bhi.w	8007b48 <USBD_GetDescriptor+0x204>
 80079f0:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <USBD_GetDescriptor+0xb4>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a11 	.word	0x08007a11
 80079fc:	08007a45 	.word	0x08007a45
 8007a00:	08007a79 	.word	0x08007a79
 8007a04:	08007aad 	.word	0x08007aad
 8007a08:	08007ae1 	.word	0x08007ae1
 8007a0c:	08007b15 	.word	0x08007b15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00b      	beq.n	8007a34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	7c12      	ldrb	r2, [r2, #16]
 8007a28:	f107 0108 	add.w	r1, r7, #8
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4798      	blx	r3
 8007a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a32:	e091      	b.n	8007b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 facb 	bl	8007fd2 <USBD_CtlError>
            err++;
 8007a3c:	7afb      	ldrb	r3, [r7, #11]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	72fb      	strb	r3, [r7, #11]
          break;
 8007a42:	e089      	b.n	8007b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	7c12      	ldrb	r2, [r2, #16]
 8007a5c:	f107 0108 	add.w	r1, r7, #8
 8007a60:	4610      	mov	r0, r2
 8007a62:	4798      	blx	r3
 8007a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a66:	e077      	b.n	8007b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fab1 	bl	8007fd2 <USBD_CtlError>
            err++;
 8007a70:	7afb      	ldrb	r3, [r7, #11]
 8007a72:	3301      	adds	r3, #1
 8007a74:	72fb      	strb	r3, [r7, #11]
          break;
 8007a76:	e06f      	b.n	8007b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	7c12      	ldrb	r2, [r2, #16]
 8007a90:	f107 0108 	add.w	r1, r7, #8
 8007a94:	4610      	mov	r0, r2
 8007a96:	4798      	blx	r3
 8007a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a9a:	e05d      	b.n	8007b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fa97 	bl	8007fd2 <USBD_CtlError>
            err++;
 8007aa4:	7afb      	ldrb	r3, [r7, #11]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aaa:	e055      	b.n	8007b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	7c12      	ldrb	r2, [r2, #16]
 8007ac4:	f107 0108 	add.w	r1, r7, #8
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4798      	blx	r3
 8007acc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ace:	e043      	b.n	8007b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa7d 	bl	8007fd2 <USBD_CtlError>
            err++;
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	3301      	adds	r3, #1
 8007adc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ade:	e03b      	b.n	8007b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	7c12      	ldrb	r2, [r2, #16]
 8007af8:	f107 0108 	add.w	r1, r7, #8
 8007afc:	4610      	mov	r0, r2
 8007afe:	4798      	blx	r3
 8007b00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b02:	e029      	b.n	8007b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa63 	bl	8007fd2 <USBD_CtlError>
            err++;
 8007b0c:	7afb      	ldrb	r3, [r7, #11]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	72fb      	strb	r3, [r7, #11]
          break;
 8007b12:	e021      	b.n	8007b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	7c12      	ldrb	r2, [r2, #16]
 8007b2c:	f107 0108 	add.w	r1, r7, #8
 8007b30:	4610      	mov	r0, r2
 8007b32:	4798      	blx	r3
 8007b34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b36:	e00f      	b.n	8007b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa49 	bl	8007fd2 <USBD_CtlError>
            err++;
 8007b40:	7afb      	ldrb	r3, [r7, #11]
 8007b42:	3301      	adds	r3, #1
 8007b44:	72fb      	strb	r3, [r7, #11]
          break;
 8007b46:	e007      	b.n	8007b58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa41 	bl	8007fd2 <USBD_CtlError>
          err++;
 8007b50:	7afb      	ldrb	r3, [r7, #11]
 8007b52:	3301      	adds	r3, #1
 8007b54:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b56:	bf00      	nop
      }
      break;
 8007b58:	e037      	b.n	8007bca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	7c1b      	ldrb	r3, [r3, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d109      	bne.n	8007b76 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b6a:	f107 0208 	add.w	r2, r7, #8
 8007b6e:	4610      	mov	r0, r2
 8007b70:	4798      	blx	r3
 8007b72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b74:	e029      	b.n	8007bca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fa2a 	bl	8007fd2 <USBD_CtlError>
        err++;
 8007b7e:	7afb      	ldrb	r3, [r7, #11]
 8007b80:	3301      	adds	r3, #1
 8007b82:	72fb      	strb	r3, [r7, #11]
      break;
 8007b84:	e021      	b.n	8007bca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	7c1b      	ldrb	r3, [r3, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10d      	bne.n	8007baa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b96:	f107 0208 	add.w	r2, r7, #8
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	4798      	blx	r3
 8007b9e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	2207      	movs	r2, #7
 8007ba6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ba8:	e00f      	b.n	8007bca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fa10 	bl	8007fd2 <USBD_CtlError>
        err++;
 8007bb2:	7afb      	ldrb	r3, [r7, #11]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	72fb      	strb	r3, [r7, #11]
      break;
 8007bb8:	e007      	b.n	8007bca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fa08 	bl	8007fd2 <USBD_CtlError>
      err++;
 8007bc2:	7afb      	ldrb	r3, [r7, #11]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	72fb      	strb	r3, [r7, #11]
      break;
 8007bc8:	bf00      	nop
  }

  if (err != 0U)
 8007bca:	7afb      	ldrb	r3, [r7, #11]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d11e      	bne.n	8007c0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	88db      	ldrh	r3, [r3, #6]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d016      	beq.n	8007c06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007bd8:	893b      	ldrh	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00e      	beq.n	8007bfc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	88da      	ldrh	r2, [r3, #6]
 8007be2:	893b      	ldrh	r3, [r7, #8]
 8007be4:	4293      	cmp	r3, r2
 8007be6:	bf28      	it	cs
 8007be8:	4613      	movcs	r3, r2
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bee:	893b      	ldrh	r3, [r7, #8]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	68f9      	ldr	r1, [r7, #12]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fa69 	bl	80080cc <USBD_CtlSendData>
 8007bfa:	e009      	b.n	8007c10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f9e7 	bl	8007fd2 <USBD_CtlError>
 8007c04:	e004      	b.n	8007c10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fac1 	bl	800818e <USBD_CtlSendStatus>
 8007c0c:	e000      	b.n	8007c10 <USBD_GetDescriptor+0x2cc>
    return;
 8007c0e:	bf00      	nop
  }
}
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop

08007c18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	889b      	ldrh	r3, [r3, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d131      	bne.n	8007c8e <USBD_SetAddress+0x76>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	88db      	ldrh	r3, [r3, #6]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d12d      	bne.n	8007c8e <USBD_SetAddress+0x76>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	885b      	ldrh	r3, [r3, #2]
 8007c36:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c38:	d829      	bhi.n	8007c8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	885b      	ldrh	r3, [r3, #2]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d104      	bne.n	8007c5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f9bc 	bl	8007fd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c5a:	e01d      	b.n	8007c98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	7bfa      	ldrb	r2, [r7, #15]
 8007c60:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 ff27 	bl	8008abc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa8d 	bl	800818e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d004      	beq.n	8007c84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c82:	e009      	b.n	8007c98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c8c:	e004      	b.n	8007c98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f99e 	bl	8007fd2 <USBD_CtlError>
  }
}
 8007c96:	bf00      	nop
 8007c98:	bf00      	nop
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	885b      	ldrh	r3, [r3, #2]
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	4b4e      	ldr	r3, [pc, #312]	@ (8007df0 <USBD_SetConfig+0x150>)
 8007cb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8007df0 <USBD_SetConfig+0x150>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d905      	bls.n	8007ccc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f985 	bl	8007fd2 <USBD_CtlError>
    return USBD_FAIL;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e08c      	b.n	8007de6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d002      	beq.n	8007cde <USBD_SetConfig+0x3e>
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d029      	beq.n	8007d30 <USBD_SetConfig+0x90>
 8007cdc:	e075      	b.n	8007dca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007cde:	4b44      	ldr	r3, [pc, #272]	@ (8007df0 <USBD_SetConfig+0x150>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d020      	beq.n	8007d28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007ce6:	4b42      	ldr	r3, [pc, #264]	@ (8007df0 <USBD_SetConfig+0x150>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8007df0 <USBD_SetConfig+0x150>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fe ffcd 	bl	8006c96 <USBD_SetClassConfig>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d008      	beq.n	8007d18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f962 	bl	8007fd2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2202      	movs	r2, #2
 8007d12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d16:	e065      	b.n	8007de4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fa38 	bl	800818e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2203      	movs	r2, #3
 8007d22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007d26:	e05d      	b.n	8007de4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fa30 	bl	800818e <USBD_CtlSendStatus>
      break;
 8007d2e:	e059      	b.n	8007de4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d30:	4b2f      	ldr	r3, [pc, #188]	@ (8007df0 <USBD_SetConfig+0x150>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d112      	bne.n	8007d5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007d40:	4b2b      	ldr	r3, [pc, #172]	@ (8007df0 <USBD_SetConfig+0x150>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d4a:	4b29      	ldr	r3, [pc, #164]	@ (8007df0 <USBD_SetConfig+0x150>)
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7fe ffbc 	bl	8006cce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa19 	bl	800818e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d5c:	e042      	b.n	8007de4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d5e:	4b24      	ldr	r3, [pc, #144]	@ (8007df0 <USBD_SetConfig+0x150>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d02a      	beq.n	8007dc2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7fe ffaa 	bl	8006cce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8007df0 <USBD_SetConfig+0x150>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d84:	4b1a      	ldr	r3, [pc, #104]	@ (8007df0 <USBD_SetConfig+0x150>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fe ff83 	bl	8006c96 <USBD_SetClassConfig>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00f      	beq.n	8007dba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f918 	bl	8007fd2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7fe ff8f 	bl	8006cce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007db8:	e014      	b.n	8007de4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f9e7 	bl	800818e <USBD_CtlSendStatus>
      break;
 8007dc0:	e010      	b.n	8007de4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f9e3 	bl	800818e <USBD_CtlSendStatus>
      break;
 8007dc8:	e00c      	b.n	8007de4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f900 	bl	8007fd2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007dd2:	4b07      	ldr	r3, [pc, #28]	@ (8007df0 <USBD_SetConfig+0x150>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7fe ff78 	bl	8006cce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007dde:	2303      	movs	r3, #3
 8007de0:	73fb      	strb	r3, [r7, #15]
      break;
 8007de2:	bf00      	nop
  }

  return ret;
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000350 	.word	0x20000350

08007df4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	88db      	ldrh	r3, [r3, #6]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d004      	beq.n	8007e10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f8e2 	bl	8007fd2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e0e:	e023      	b.n	8007e58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	dc02      	bgt.n	8007e22 <USBD_GetConfig+0x2e>
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	dc03      	bgt.n	8007e28 <USBD_GetConfig+0x34>
 8007e20:	e015      	b.n	8007e4e <USBD_GetConfig+0x5a>
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d00b      	beq.n	8007e3e <USBD_GetConfig+0x4a>
 8007e26:	e012      	b.n	8007e4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3308      	adds	r3, #8
 8007e32:	2201      	movs	r2, #1
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f948 	bl	80080cc <USBD_CtlSendData>
        break;
 8007e3c:	e00c      	b.n	8007e58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3304      	adds	r3, #4
 8007e42:	2201      	movs	r2, #1
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f940 	bl	80080cc <USBD_CtlSendData>
        break;
 8007e4c:	e004      	b.n	8007e58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f8be 	bl	8007fd2 <USBD_CtlError>
        break;
 8007e56:	bf00      	nop
}
 8007e58:	bf00      	nop
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	3b01      	subs	r3, #1
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d81e      	bhi.n	8007eb6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	88db      	ldrh	r3, [r3, #6]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d004      	beq.n	8007e8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f8a5 	bl	8007fd2 <USBD_CtlError>
        break;
 8007e88:	e01a      	b.n	8007ec0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d005      	beq.n	8007ea6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f043 0202 	orr.w	r2, r3, #2
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	330c      	adds	r3, #12
 8007eaa:	2202      	movs	r2, #2
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f90c 	bl	80080cc <USBD_CtlSendData>
      break;
 8007eb4:	e004      	b.n	8007ec0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f88a 	bl	8007fd2 <USBD_CtlError>
      break;
 8007ebe:	bf00      	nop
  }
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	885b      	ldrh	r3, [r3, #2]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d107      	bne.n	8007eea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f953 	bl	800818e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ee8:	e013      	b.n	8007f12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	885b      	ldrh	r3, [r3, #2]
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d10b      	bne.n	8007f0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	889b      	ldrh	r3, [r3, #4]
 8007ef6:	0a1b      	lsrs	r3, r3, #8
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f943 	bl	800818e <USBD_CtlSendStatus>
}
 8007f08:	e003      	b.n	8007f12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f860 	bl	8007fd2 <USBD_CtlError>
}
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d80b      	bhi.n	8007f4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	885b      	ldrh	r3, [r3, #2]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d10c      	bne.n	8007f54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f923 	bl	800818e <USBD_CtlSendStatus>
      }
      break;
 8007f48:	e004      	b.n	8007f54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f840 	bl	8007fd2 <USBD_CtlError>
      break;
 8007f52:	e000      	b.n	8007f56 <USBD_ClrFeature+0x3c>
      break;
 8007f54:	bf00      	nop
  }
}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	781a      	ldrb	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	3301      	adds	r3, #1
 8007f78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	781a      	ldrb	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3301      	adds	r3, #1
 8007f86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f7ff fa3d 	bl	8007408 <SWAPBYTE>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	461a      	mov	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7ff fa30 	bl	8007408 <SWAPBYTE>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	461a      	mov	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7ff fa23 	bl	8007408 <SWAPBYTE>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	80da      	strh	r2, [r3, #6]
}
 8007fca:	bf00      	nop
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b082      	sub	sp, #8
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fdc:	2180      	movs	r1, #128	@ 0x80
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fd02 	bl	80089e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fcfe 	bl	80089e8 <USBD_LL_StallEP>
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d042      	beq.n	8008090 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800800e:	6938      	ldr	r0, [r7, #16]
 8008010:	f000 f842 	bl	8008098 <USBD_GetLen>
 8008014:	4603      	mov	r3, r0
 8008016:	3301      	adds	r3, #1
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800801e:	d808      	bhi.n	8008032 <USBD_GetString+0x3e>
 8008020:	6938      	ldr	r0, [r7, #16]
 8008022:	f000 f839 	bl	8008098 <USBD_GetLen>
 8008026:	4603      	mov	r3, r0
 8008028:	3301      	adds	r3, #1
 800802a:	b29b      	uxth	r3, r3
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	b29a      	uxth	r2, r3
 8008030:	e001      	b.n	8008036 <USBD_GetString+0x42>
 8008032:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800803a:	7dfb      	ldrb	r3, [r7, #23]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	4413      	add	r3, r2
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	7812      	ldrb	r2, [r2, #0]
 8008044:	701a      	strb	r2, [r3, #0]
  idx++;
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	3301      	adds	r3, #1
 800804a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800804c:	7dfb      	ldrb	r3, [r7, #23]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	4413      	add	r3, r2
 8008052:	2203      	movs	r2, #3
 8008054:	701a      	strb	r2, [r3, #0]
  idx++;
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	3301      	adds	r3, #1
 800805a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800805c:	e013      	b.n	8008086 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	4413      	add	r3, r2
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	7812      	ldrb	r2, [r2, #0]
 8008068:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	3301      	adds	r3, #1
 800806e:	613b      	str	r3, [r7, #16]
    idx++;
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	3301      	adds	r3, #1
 8008074:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008076:	7dfb      	ldrb	r3, [r7, #23]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	4413      	add	r3, r2
 800807c:	2200      	movs	r2, #0
 800807e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008080:	7dfb      	ldrb	r3, [r7, #23]
 8008082:	3301      	adds	r3, #1
 8008084:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1e7      	bne.n	800805e <USBD_GetString+0x6a>
 800808e:	e000      	b.n	8008092 <USBD_GetString+0x9e>
    return;
 8008090:	bf00      	nop
  }
}
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80080a8:	e005      	b.n	80080b6 <USBD_GetLen+0x1e>
  {
    len++;
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	3301      	adds	r3, #1
 80080ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	3301      	adds	r3, #1
 80080b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1f5      	bne.n	80080aa <USBD_GetLen+0x12>
  }

  return len;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2202      	movs	r2, #2
 80080dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	2100      	movs	r1, #0
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fcfe 	bl	8008afa <USBD_LL_Transmit>

  return USBD_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	2100      	movs	r1, #0
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 fced 	bl	8008afa <USBD_LL_Transmit>

  return USBD_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2203      	movs	r2, #3
 800813a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	2100      	movs	r1, #0
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 fced 	bl	8008b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	2100      	movs	r1, #0
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 fcdc 	bl	8008b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2204      	movs	r2, #4
 800819a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800819e:	2300      	movs	r3, #0
 80081a0:	2200      	movs	r2, #0
 80081a2:	2100      	movs	r1, #0
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fca8 	bl	8008afa <USBD_LL_Transmit>

  return USBD_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2205      	movs	r2, #5
 80081c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081c4:	2300      	movs	r3, #0
 80081c6:	2200      	movs	r2, #0
 80081c8:	2100      	movs	r1, #0
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fcb6 	bl	8008b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081e0:	2200      	movs	r2, #0
 80081e2:	4912      	ldr	r1, [pc, #72]	@ (800822c <MX_USB_DEVICE_Init+0x50>)
 80081e4:	4812      	ldr	r0, [pc, #72]	@ (8008230 <MX_USB_DEVICE_Init+0x54>)
 80081e6:	f7fe fcd9 	bl	8006b9c <USBD_Init>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081f0:	f7f9 f946 	bl	8001480 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081f4:	490f      	ldr	r1, [pc, #60]	@ (8008234 <MX_USB_DEVICE_Init+0x58>)
 80081f6:	480e      	ldr	r0, [pc, #56]	@ (8008230 <MX_USB_DEVICE_Init+0x54>)
 80081f8:	f7fe fd00 	bl	8006bfc <USBD_RegisterClass>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008202:	f7f9 f93d 	bl	8001480 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008206:	490c      	ldr	r1, [pc, #48]	@ (8008238 <MX_USB_DEVICE_Init+0x5c>)
 8008208:	4809      	ldr	r0, [pc, #36]	@ (8008230 <MX_USB_DEVICE_Init+0x54>)
 800820a:	f7fe fbf7 	bl	80069fc <USBD_CDC_RegisterInterface>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008214:	f7f9 f934 	bl	8001480 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008218:	4805      	ldr	r0, [pc, #20]	@ (8008230 <MX_USB_DEVICE_Init+0x54>)
 800821a:	f7fe fd25 	bl	8006c68 <USBD_Start>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008224:	f7f9 f92c 	bl	8001480 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008228:	bf00      	nop
 800822a:	bd80      	pop	{r7, pc}
 800822c:	200000ac 	.word	0x200000ac
 8008230:	20000354 	.word	0x20000354
 8008234:	20000018 	.word	0x20000018
 8008238:	20000098 	.word	0x20000098

0800823c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008240:	2200      	movs	r2, #0
 8008242:	4905      	ldr	r1, [pc, #20]	@ (8008258 <CDC_Init_FS+0x1c>)
 8008244:	4805      	ldr	r0, [pc, #20]	@ (800825c <CDC_Init_FS+0x20>)
 8008246:	f7fe fbf3 	bl	8006a30 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800824a:	4905      	ldr	r1, [pc, #20]	@ (8008260 <CDC_Init_FS+0x24>)
 800824c:	4803      	ldr	r0, [pc, #12]	@ (800825c <CDC_Init_FS+0x20>)
 800824e:	f7fe fc11 	bl	8006a74 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008252:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008254:	4618      	mov	r0, r3
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000e74 	.word	0x20000e74
 800825c:	20000354 	.word	0x20000354
 8008260:	20000674 	.word	0x20000674

08008264 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008268:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800826a:	4618      	mov	r0, r3
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	6039      	str	r1, [r7, #0]
 800827e:	71fb      	strb	r3, [r7, #7]
 8008280:	4613      	mov	r3, r2
 8008282:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	2b23      	cmp	r3, #35	@ 0x23
 8008288:	d84a      	bhi.n	8008320 <CDC_Control_FS+0xac>
 800828a:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <CDC_Control_FS+0x1c>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	08008321 	.word	0x08008321
 8008294:	08008321 	.word	0x08008321
 8008298:	08008321 	.word	0x08008321
 800829c:	08008321 	.word	0x08008321
 80082a0:	08008321 	.word	0x08008321
 80082a4:	08008321 	.word	0x08008321
 80082a8:	08008321 	.word	0x08008321
 80082ac:	08008321 	.word	0x08008321
 80082b0:	08008321 	.word	0x08008321
 80082b4:	08008321 	.word	0x08008321
 80082b8:	08008321 	.word	0x08008321
 80082bc:	08008321 	.word	0x08008321
 80082c0:	08008321 	.word	0x08008321
 80082c4:	08008321 	.word	0x08008321
 80082c8:	08008321 	.word	0x08008321
 80082cc:	08008321 	.word	0x08008321
 80082d0:	08008321 	.word	0x08008321
 80082d4:	08008321 	.word	0x08008321
 80082d8:	08008321 	.word	0x08008321
 80082dc:	08008321 	.word	0x08008321
 80082e0:	08008321 	.word	0x08008321
 80082e4:	08008321 	.word	0x08008321
 80082e8:	08008321 	.word	0x08008321
 80082ec:	08008321 	.word	0x08008321
 80082f0:	08008321 	.word	0x08008321
 80082f4:	08008321 	.word	0x08008321
 80082f8:	08008321 	.word	0x08008321
 80082fc:	08008321 	.word	0x08008321
 8008300:	08008321 	.word	0x08008321
 8008304:	08008321 	.word	0x08008321
 8008308:	08008321 	.word	0x08008321
 800830c:	08008321 	.word	0x08008321
 8008310:	08008321 	.word	0x08008321
 8008314:	08008321 	.word	0x08008321
 8008318:	08008321 	.word	0x08008321
 800831c:	08008321 	.word	0x08008321
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008320:	bf00      	nop
  }

  return (USBD_OK);
 8008322:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  memcpy((void*)usb_rx_buffer, Buf, *Len); // Копируем полученные данные
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	4809      	ldr	r0, [pc, #36]	@ (8008368 <CDC_Receive_FS+0x38>)
 8008344:	f002 faa7 	bl	800a896 <memcpy>
	  usb_rx_flag = 1; // Устанавливаем флаг получения
 8008348:	4b08      	ldr	r3, [pc, #32]	@ (800836c <CDC_Receive_FS+0x3c>)
 800834a:	2201      	movs	r2, #1
 800834c:	701a      	strb	r2, [r3, #0]

	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4807      	ldr	r0, [pc, #28]	@ (8008370 <CDC_Receive_FS+0x40>)
 8008352:	f7fe fb8f 	bl	8006a74 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008356:	4806      	ldr	r0, [pc, #24]	@ (8008370 <CDC_Receive_FS+0x40>)
 8008358:	f7fe fbea 	bl	8006b30 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 800835c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	20000630 	.word	0x20000630
 800836c:	20000670 	.word	0x20000670
 8008370:	20000354 	.word	0x20000354

08008374 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008384:	4b0d      	ldr	r3, [pc, #52]	@ (80083bc <CDC_Transmit_FS+0x48>)
 8008386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800838a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008396:	2301      	movs	r3, #1
 8008398:	e00b      	b.n	80083b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800839a:	887b      	ldrh	r3, [r7, #2]
 800839c:	461a      	mov	r2, r3
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4806      	ldr	r0, [pc, #24]	@ (80083bc <CDC_Transmit_FS+0x48>)
 80083a2:	f7fe fb45 	bl	8006a30 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80083a6:	4805      	ldr	r0, [pc, #20]	@ (80083bc <CDC_Transmit_FS+0x48>)
 80083a8:	f7fe fb82 	bl	8006ab0 <USBD_CDC_TransmitPacket>
 80083ac:	4603      	mov	r3, r0
 80083ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20000354 	.word	0x20000354

080083c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	4613      	mov	r3, r2
 80083cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80083d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
	...

080083e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	6039      	str	r1, [r7, #0]
 80083ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2212      	movs	r2, #18
 80083f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083f6:	4b03      	ldr	r3, [pc, #12]	@ (8008404 <USBD_FS_DeviceDescriptor+0x20>)
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	200000c8 	.word	0x200000c8

08008408 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	6039      	str	r1, [r7, #0]
 8008412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2204      	movs	r2, #4
 8008418:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800841a:	4b03      	ldr	r3, [pc, #12]	@ (8008428 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800841c:	4618      	mov	r0, r3
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	200000dc 	.word	0x200000dc

0800842c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	6039      	str	r1, [r7, #0]
 8008436:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008438:	79fb      	ldrb	r3, [r7, #7]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d105      	bne.n	800844a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	4907      	ldr	r1, [pc, #28]	@ (8008460 <USBD_FS_ProductStrDescriptor+0x34>)
 8008442:	4808      	ldr	r0, [pc, #32]	@ (8008464 <USBD_FS_ProductStrDescriptor+0x38>)
 8008444:	f7ff fdd6 	bl	8007ff4 <USBD_GetString>
 8008448:	e004      	b.n	8008454 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	4904      	ldr	r1, [pc, #16]	@ (8008460 <USBD_FS_ProductStrDescriptor+0x34>)
 800844e:	4805      	ldr	r0, [pc, #20]	@ (8008464 <USBD_FS_ProductStrDescriptor+0x38>)
 8008450:	f7ff fdd0 	bl	8007ff4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008454:	4b02      	ldr	r3, [pc, #8]	@ (8008460 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20001674 	.word	0x20001674
 8008464:	0800d38c 	.word	0x0800d38c

08008468 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	6039      	str	r1, [r7, #0]
 8008472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	4904      	ldr	r1, [pc, #16]	@ (8008488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008478:	4804      	ldr	r0, [pc, #16]	@ (800848c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800847a:	f7ff fdbb 	bl	8007ff4 <USBD_GetString>
  return USBD_StrDesc;
 800847e:	4b02      	ldr	r3, [pc, #8]	@ (8008488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008480:	4618      	mov	r0, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	20001674 	.word	0x20001674
 800848c:	0800d3a4 	.word	0x0800d3a4

08008490 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	6039      	str	r1, [r7, #0]
 800849a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	221a      	movs	r2, #26
 80084a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084a2:	f000 f843 	bl	800852c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084a6:	4b02      	ldr	r3, [pc, #8]	@ (80084b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	200000e0 	.word	0x200000e0

080084b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	4603      	mov	r3, r0
 80084bc:	6039      	str	r1, [r7, #0]
 80084be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d105      	bne.n	80084d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	4907      	ldr	r1, [pc, #28]	@ (80084e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084ca:	4808      	ldr	r0, [pc, #32]	@ (80084ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80084cc:	f7ff fd92 	bl	8007ff4 <USBD_GetString>
 80084d0:	e004      	b.n	80084dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	4904      	ldr	r1, [pc, #16]	@ (80084e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084d6:	4805      	ldr	r0, [pc, #20]	@ (80084ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80084d8:	f7ff fd8c 	bl	8007ff4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084dc:	4b02      	ldr	r3, [pc, #8]	@ (80084e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20001674 	.word	0x20001674
 80084ec:	0800d3b8 	.word	0x0800d3b8

080084f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	6039      	str	r1, [r7, #0]
 80084fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084fc:	79fb      	ldrb	r3, [r7, #7]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d105      	bne.n	800850e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	4907      	ldr	r1, [pc, #28]	@ (8008524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008506:	4808      	ldr	r0, [pc, #32]	@ (8008528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008508:	f7ff fd74 	bl	8007ff4 <USBD_GetString>
 800850c:	e004      	b.n	8008518 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	4904      	ldr	r1, [pc, #16]	@ (8008524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008512:	4805      	ldr	r0, [pc, #20]	@ (8008528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008514:	f7ff fd6e 	bl	8007ff4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008518:	4b02      	ldr	r3, [pc, #8]	@ (8008524 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20001674 	.word	0x20001674
 8008528:	0800d3c4 	.word	0x0800d3c4

0800852c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008532:	4b0f      	ldr	r3, [pc, #60]	@ (8008570 <Get_SerialNum+0x44>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008538:	4b0e      	ldr	r3, [pc, #56]	@ (8008574 <Get_SerialNum+0x48>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800853e:	4b0e      	ldr	r3, [pc, #56]	@ (8008578 <Get_SerialNum+0x4c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4413      	add	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d009      	beq.n	8008566 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008552:	2208      	movs	r2, #8
 8008554:	4909      	ldr	r1, [pc, #36]	@ (800857c <Get_SerialNum+0x50>)
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 f814 	bl	8008584 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800855c:	2204      	movs	r2, #4
 800855e:	4908      	ldr	r1, [pc, #32]	@ (8008580 <Get_SerialNum+0x54>)
 8008560:	68b8      	ldr	r0, [r7, #8]
 8008562:	f000 f80f 	bl	8008584 <IntToUnicode>
  }
}
 8008566:	bf00      	nop
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	1fff7a10 	.word	0x1fff7a10
 8008574:	1fff7a14 	.word	0x1fff7a14
 8008578:	1fff7a18 	.word	0x1fff7a18
 800857c:	200000e2 	.word	0x200000e2
 8008580:	200000f2 	.word	0x200000f2

08008584 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	4613      	mov	r3, r2
 8008590:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008592:	2300      	movs	r3, #0
 8008594:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]
 800859a:	e027      	b.n	80085ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	0f1b      	lsrs	r3, r3, #28
 80085a0:	2b09      	cmp	r3, #9
 80085a2:	d80b      	bhi.n	80085bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	0f1b      	lsrs	r3, r3, #28
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	005b      	lsls	r3, r3, #1
 80085ae:	4619      	mov	r1, r3
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	440b      	add	r3, r1
 80085b4:	3230      	adds	r2, #48	@ 0x30
 80085b6:	b2d2      	uxtb	r2, r2
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	e00a      	b.n	80085d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	0f1b      	lsrs	r3, r3, #28
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	4619      	mov	r1, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	440b      	add	r3, r1
 80085cc:	3237      	adds	r2, #55	@ 0x37
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	011b      	lsls	r3, r3, #4
 80085d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
 80085da:	005b      	lsls	r3, r3, #1
 80085dc:	3301      	adds	r3, #1
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	4413      	add	r3, r2
 80085e2:	2200      	movs	r2, #0
 80085e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	3301      	adds	r3, #1
 80085ea:	75fb      	strb	r3, [r7, #23]
 80085ec:	7dfa      	ldrb	r2, [r7, #23]
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d3d3      	bcc.n	800859c <IntToUnicode+0x18>
  }
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	371c      	adds	r7, #28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
	...

08008604 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b08a      	sub	sp, #40	@ 0x28
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800860c:	f107 0314 	add.w	r3, r7, #20
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	605a      	str	r2, [r3, #4]
 8008616:	609a      	str	r2, [r3, #8]
 8008618:	60da      	str	r2, [r3, #12]
 800861a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008624:	d13a      	bne.n	800869c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008626:	2300      	movs	r3, #0
 8008628:	613b      	str	r3, [r7, #16]
 800862a:	4b1e      	ldr	r3, [pc, #120]	@ (80086a4 <HAL_PCD_MspInit+0xa0>)
 800862c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800862e:	4a1d      	ldr	r2, [pc, #116]	@ (80086a4 <HAL_PCD_MspInit+0xa0>)
 8008630:	f043 0301 	orr.w	r3, r3, #1
 8008634:	6313      	str	r3, [r2, #48]	@ 0x30
 8008636:	4b1b      	ldr	r3, [pc, #108]	@ (80086a4 <HAL_PCD_MspInit+0xa0>)
 8008638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	613b      	str	r3, [r7, #16]
 8008640:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008642:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008648:	2302      	movs	r3, #2
 800864a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800864c:	2300      	movs	r3, #0
 800864e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008650:	2303      	movs	r3, #3
 8008652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008654:	230a      	movs	r3, #10
 8008656:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008658:	f107 0314 	add.w	r3, r7, #20
 800865c:	4619      	mov	r1, r3
 800865e:	4812      	ldr	r0, [pc, #72]	@ (80086a8 <HAL_PCD_MspInit+0xa4>)
 8008660:	f7f9 fd3c 	bl	80020dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008664:	4b0f      	ldr	r3, [pc, #60]	@ (80086a4 <HAL_PCD_MspInit+0xa0>)
 8008666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008668:	4a0e      	ldr	r2, [pc, #56]	@ (80086a4 <HAL_PCD_MspInit+0xa0>)
 800866a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800866e:	6353      	str	r3, [r2, #52]	@ 0x34
 8008670:	2300      	movs	r3, #0
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	4b0b      	ldr	r3, [pc, #44]	@ (80086a4 <HAL_PCD_MspInit+0xa0>)
 8008676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008678:	4a0a      	ldr	r2, [pc, #40]	@ (80086a4 <HAL_PCD_MspInit+0xa0>)
 800867a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800867e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008680:	4b08      	ldr	r3, [pc, #32]	@ (80086a4 <HAL_PCD_MspInit+0xa0>)
 8008682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008688:	60fb      	str	r3, [r7, #12]
 800868a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800868c:	2200      	movs	r2, #0
 800868e:	2100      	movs	r1, #0
 8008690:	2043      	movs	r0, #67	@ 0x43
 8008692:	f7f9 fa18 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008696:	2043      	movs	r0, #67	@ 0x43
 8008698:	f7f9 fa31 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800869c:	bf00      	nop
 800869e:	3728      	adds	r7, #40	@ 0x28
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	40023800 	.word	0x40023800
 80086a8:	40020000 	.word	0x40020000

080086ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80086c0:	4619      	mov	r1, r3
 80086c2:	4610      	mov	r0, r2
 80086c4:	f7fe fb1d 	bl	8006d02 <USBD_LL_SetupStage>
}
 80086c8:	bf00      	nop
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80086e2:	78fa      	ldrb	r2, [r7, #3]
 80086e4:	6879      	ldr	r1, [r7, #4]
 80086e6:	4613      	mov	r3, r2
 80086e8:	00db      	lsls	r3, r3, #3
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	440b      	add	r3, r1
 80086f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	4619      	mov	r1, r3
 80086fa:	f7fe fb57 	bl	8006dac <USBD_LL_DataOutStage>
}
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008718:	78fa      	ldrb	r2, [r7, #3]
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	4613      	mov	r3, r2
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	440b      	add	r3, r1
 8008726:	3320      	adds	r3, #32
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	78fb      	ldrb	r3, [r7, #3]
 800872c:	4619      	mov	r1, r3
 800872e:	f7fe fbf9 	bl	8006f24 <USBD_LL_DataInStage>
}
 8008732:	bf00      	nop
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b082      	sub	sp, #8
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008748:	4618      	mov	r0, r3
 800874a:	f7fe fd3d 	bl	80071c8 <USBD_LL_SOF>
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800875e:	2301      	movs	r3, #1
 8008760:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	79db      	ldrb	r3, [r3, #7]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
 800876e:	e008      	b.n	8008782 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	79db      	ldrb	r3, [r3, #7]
 8008774:	2b02      	cmp	r3, #2
 8008776:	d102      	bne.n	800877e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008778:	2301      	movs	r3, #1
 800877a:	73fb      	strb	r3, [r7, #15]
 800877c:	e001      	b.n	8008782 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800877e:	f7f8 fe7f 	bl	8001480 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008788:	7bfa      	ldrb	r2, [r7, #15]
 800878a:	4611      	mov	r1, r2
 800878c:	4618      	mov	r0, r3
 800878e:	f7fe fcd7 	bl	8007140 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008798:	4618      	mov	r0, r3
 800879a:	f7fe fc7e 	bl	800709a <USBD_LL_Reset>
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe fcd2 	bl	8007160 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	6812      	ldr	r2, [r2, #0]
 80087ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80087ce:	f043 0301 	orr.w	r3, r3, #1
 80087d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	7adb      	ldrb	r3, [r3, #11]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087dc:	4b04      	ldr	r3, [pc, #16]	@ (80087f0 <HAL_PCD_SuspendCallback+0x48>)
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	4a03      	ldr	r2, [pc, #12]	@ (80087f0 <HAL_PCD_SuspendCallback+0x48>)
 80087e2:	f043 0306 	orr.w	r3, r3, #6
 80087e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80087e8:	bf00      	nop
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	e000ed00 	.word	0xe000ed00

080087f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fcc8 	bl	8007198 <USBD_LL_Resume>
}
 8008808:	bf00      	nop
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008822:	78fa      	ldrb	r2, [r7, #3]
 8008824:	4611      	mov	r1, r2
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fd20 	bl	800726c <USBD_LL_IsoOUTIncomplete>
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008846:	78fa      	ldrb	r2, [r7, #3]
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe fcdc 	bl	8007208 <USBD_LL_IsoINIncomplete>
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe fd32 	bl	80072d0 <USBD_LL_DevConnected>
}
 800886c:	bf00      	nop
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe fd2f 	bl	80072e6 <USBD_LL_DevDisconnected>
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d13c      	bne.n	800891a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80088a0:	4a20      	ldr	r2, [pc, #128]	@ (8008924 <USBD_LL_Init+0x94>)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008924 <USBD_LL_Init+0x94>)
 80088ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008924 <USBD_LL_Init+0x94>)
 80088b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80088b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80088b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008924 <USBD_LL_Init+0x94>)
 80088ba:	2204      	movs	r2, #4
 80088bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80088be:	4b19      	ldr	r3, [pc, #100]	@ (8008924 <USBD_LL_Init+0x94>)
 80088c0:	2202      	movs	r2, #2
 80088c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088c4:	4b17      	ldr	r3, [pc, #92]	@ (8008924 <USBD_LL_Init+0x94>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088ca:	4b16      	ldr	r3, [pc, #88]	@ (8008924 <USBD_LL_Init+0x94>)
 80088cc:	2202      	movs	r2, #2
 80088ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80088d0:	4b14      	ldr	r3, [pc, #80]	@ (8008924 <USBD_LL_Init+0x94>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80088d6:	4b13      	ldr	r3, [pc, #76]	@ (8008924 <USBD_LL_Init+0x94>)
 80088d8:	2200      	movs	r2, #0
 80088da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80088dc:	4b11      	ldr	r3, [pc, #68]	@ (8008924 <USBD_LL_Init+0x94>)
 80088de:	2200      	movs	r2, #0
 80088e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80088e2:	4b10      	ldr	r3, [pc, #64]	@ (8008924 <USBD_LL_Init+0x94>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80088e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008924 <USBD_LL_Init+0x94>)
 80088ea:	2200      	movs	r2, #0
 80088ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80088ee:	480d      	ldr	r0, [pc, #52]	@ (8008924 <USBD_LL_Init+0x94>)
 80088f0:	f7f9 fda9 	bl	8002446 <HAL_PCD_Init>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80088fa:	f7f8 fdc1 	bl	8001480 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80088fe:	2180      	movs	r1, #128	@ 0x80
 8008900:	4808      	ldr	r0, [pc, #32]	@ (8008924 <USBD_LL_Init+0x94>)
 8008902:	f7fa ffd6 	bl	80038b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008906:	2240      	movs	r2, #64	@ 0x40
 8008908:	2100      	movs	r1, #0
 800890a:	4806      	ldr	r0, [pc, #24]	@ (8008924 <USBD_LL_Init+0x94>)
 800890c:	f7fa ff8a 	bl	8003824 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008910:	2280      	movs	r2, #128	@ 0x80
 8008912:	2101      	movs	r1, #1
 8008914:	4803      	ldr	r0, [pc, #12]	@ (8008924 <USBD_LL_Init+0x94>)
 8008916:	f7fa ff85 	bl	8003824 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	20001874 	.word	0x20001874

08008928 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800893e:	4618      	mov	r0, r3
 8008940:	f7f9 fe90 	bl	8002664 <HAL_PCD_Start>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	4618      	mov	r0, r3
 800894c:	f000 f942 	bl	8008bd4 <USBD_Get_USB_Status>
 8008950:	4603      	mov	r3, r0
 8008952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008954:	7bbb      	ldrb	r3, [r7, #14]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	4608      	mov	r0, r1
 8008968:	4611      	mov	r1, r2
 800896a:	461a      	mov	r2, r3
 800896c:	4603      	mov	r3, r0
 800896e:	70fb      	strb	r3, [r7, #3]
 8008970:	460b      	mov	r3, r1
 8008972:	70bb      	strb	r3, [r7, #2]
 8008974:	4613      	mov	r3, r2
 8008976:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008986:	78bb      	ldrb	r3, [r7, #2]
 8008988:	883a      	ldrh	r2, [r7, #0]
 800898a:	78f9      	ldrb	r1, [r7, #3]
 800898c:	f7fa fb64 	bl	8003058 <HAL_PCD_EP_Open>
 8008990:	4603      	mov	r3, r0
 8008992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	4618      	mov	r0, r3
 8008998:	f000 f91c 	bl	8008bd4 <USBD_Get_USB_Status>
 800899c:	4603      	mov	r3, r0
 800899e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	460b      	mov	r3, r1
 80089b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089c4:	78fa      	ldrb	r2, [r7, #3]
 80089c6:	4611      	mov	r1, r2
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fa fbaf 	bl	800312c <HAL_PCD_EP_Close>
 80089ce:	4603      	mov	r3, r0
 80089d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 f8fd 	bl	8008bd4 <USBD_Get_USB_Status>
 80089da:	4603      	mov	r3, r0
 80089dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089de:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a02:	78fa      	ldrb	r2, [r7, #3]
 8008a04:	4611      	mov	r1, r2
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fa fc67 	bl	80032da <HAL_PCD_EP_SetStall>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 f8de 	bl	8008bd4 <USBD_Get_USB_Status>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a40:	78fa      	ldrb	r2, [r7, #3]
 8008a42:	4611      	mov	r1, r2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fa fcab 	bl	80033a0 <HAL_PCD_EP_ClrStall>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 f8bf 	bl	8008bd4 <USBD_Get_USB_Status>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	da0b      	bge.n	8008a98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a86:	68f9      	ldr	r1, [r7, #12]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	440b      	add	r3, r1
 8008a92:	3316      	adds	r3, #22
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	e00b      	b.n	8008ab0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a98:	78fb      	ldrb	r3, [r7, #3]
 8008a9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a9e:	68f9      	ldr	r1, [r7, #12]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	4413      	add	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	440b      	add	r3, r1
 8008aaa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008aae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ad6:	78fa      	ldrb	r2, [r7, #3]
 8008ad8:	4611      	mov	r1, r2
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fa fa98 	bl	8003010 <HAL_PCD_SetAddress>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 f874 	bl	8008bd4 <USBD_Get_USB_Status>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b086      	sub	sp, #24
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	603b      	str	r3, [r7, #0]
 8008b06:	460b      	mov	r3, r1
 8008b08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b18:	7af9      	ldrb	r1, [r7, #11]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	f7fa fba2 	bl	8003266 <HAL_PCD_EP_Transmit>
 8008b22:	4603      	mov	r3, r0
 8008b24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 f853 	bl	8008bd4 <USBD_Get_USB_Status>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b32:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	607a      	str	r2, [r7, #4]
 8008b46:	603b      	str	r3, [r7, #0]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b5a:	7af9      	ldrb	r1, [r7, #11]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	f7fa fb2e 	bl	80031c0 <HAL_PCD_EP_Receive>
 8008b64:	4603      	mov	r3, r0
 8008b66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 f832 	bl	8008bd4 <USBD_Get_USB_Status>
 8008b70:	4603      	mov	r3, r0
 8008b72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b74:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b90:	78fa      	ldrb	r2, [r7, #3]
 8008b92:	4611      	mov	r1, r2
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fa fb4e 	bl	8003236 <HAL_PCD_EP_GetRxCount>
 8008b9a:	4603      	mov	r3, r0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bac:	4b03      	ldr	r3, [pc, #12]	@ (8008bbc <USBD_static_malloc+0x18>)
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	20001d58 	.word	0x20001d58

08008bc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]

}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008be2:	79fb      	ldrb	r3, [r7, #7]
 8008be4:	2b03      	cmp	r3, #3
 8008be6:	d817      	bhi.n	8008c18 <USBD_Get_USB_Status+0x44>
 8008be8:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf0 <USBD_Get_USB_Status+0x1c>)
 8008bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bee:	bf00      	nop
 8008bf0:	08008c01 	.word	0x08008c01
 8008bf4:	08008c07 	.word	0x08008c07
 8008bf8:	08008c0d 	.word	0x08008c0d
 8008bfc:	08008c13 	.word	0x08008c13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
    break;
 8008c04:	e00b      	b.n	8008c1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c06:	2303      	movs	r3, #3
 8008c08:	73fb      	strb	r3, [r7, #15]
    break;
 8008c0a:	e008      	b.n	8008c1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c10:	e005      	b.n	8008c1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c12:	2303      	movs	r3, #3
 8008c14:	73fb      	strb	r3, [r7, #15]
    break;
 8008c16:	e002      	b.n	8008c1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c1c:	bf00      	nop
  }
  return usb_status;
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <atof>:
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	f000 be09 	b.w	8009844 <strtod>

08008c32 <sulp>:
 8008c32:	b570      	push	{r4, r5, r6, lr}
 8008c34:	4604      	mov	r4, r0
 8008c36:	460d      	mov	r5, r1
 8008c38:	ec45 4b10 	vmov	d0, r4, r5
 8008c3c:	4616      	mov	r6, r2
 8008c3e:	f003 fc5b 	bl	800c4f8 <__ulp>
 8008c42:	ec51 0b10 	vmov	r0, r1, d0
 8008c46:	b17e      	cbz	r6, 8008c68 <sulp+0x36>
 8008c48:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008c4c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	dd09      	ble.n	8008c68 <sulp+0x36>
 8008c54:	051b      	lsls	r3, r3, #20
 8008c56:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008c5a:	2400      	movs	r4, #0
 8008c5c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008c60:	4622      	mov	r2, r4
 8008c62:	462b      	mov	r3, r5
 8008c64:	f7f7 fcc8 	bl	80005f8 <__aeabi_dmul>
 8008c68:	ec41 0b10 	vmov	d0, r0, r1
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c70 <_strtod_l>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	b09f      	sub	sp, #124	@ 0x7c
 8008c76:	460c      	mov	r4, r1
 8008c78:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008c7e:	9005      	str	r0, [sp, #20]
 8008c80:	f04f 0a00 	mov.w	sl, #0
 8008c84:	f04f 0b00 	mov.w	fp, #0
 8008c88:	460a      	mov	r2, r1
 8008c8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c8c:	7811      	ldrb	r1, [r2, #0]
 8008c8e:	292b      	cmp	r1, #43	@ 0x2b
 8008c90:	d04a      	beq.n	8008d28 <_strtod_l+0xb8>
 8008c92:	d838      	bhi.n	8008d06 <_strtod_l+0x96>
 8008c94:	290d      	cmp	r1, #13
 8008c96:	d832      	bhi.n	8008cfe <_strtod_l+0x8e>
 8008c98:	2908      	cmp	r1, #8
 8008c9a:	d832      	bhi.n	8008d02 <_strtod_l+0x92>
 8008c9c:	2900      	cmp	r1, #0
 8008c9e:	d03b      	beq.n	8008d18 <_strtod_l+0xa8>
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ca4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008ca6:	782a      	ldrb	r2, [r5, #0]
 8008ca8:	2a30      	cmp	r2, #48	@ 0x30
 8008caa:	f040 80b2 	bne.w	8008e12 <_strtod_l+0x1a2>
 8008cae:	786a      	ldrb	r2, [r5, #1]
 8008cb0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008cb4:	2a58      	cmp	r2, #88	@ 0x58
 8008cb6:	d16e      	bne.n	8008d96 <_strtod_l+0x126>
 8008cb8:	9302      	str	r3, [sp, #8]
 8008cba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	ab1a      	add	r3, sp, #104	@ 0x68
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	4a8f      	ldr	r2, [pc, #572]	@ (8008f00 <_strtod_l+0x290>)
 8008cc4:	9805      	ldr	r0, [sp, #20]
 8008cc6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008cc8:	a919      	add	r1, sp, #100	@ 0x64
 8008cca:	f002 fd0f 	bl	800b6ec <__gethex>
 8008cce:	f010 060f 	ands.w	r6, r0, #15
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	d005      	beq.n	8008ce2 <_strtod_l+0x72>
 8008cd6:	2e06      	cmp	r6, #6
 8008cd8:	d128      	bne.n	8008d2c <_strtod_l+0xbc>
 8008cda:	3501      	adds	r5, #1
 8008cdc:	2300      	movs	r3, #0
 8008cde:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ce0:	930e      	str	r3, [sp, #56]	@ 0x38
 8008ce2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f040 858e 	bne.w	8009806 <_strtod_l+0xb96>
 8008cea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cec:	b1cb      	cbz	r3, 8008d22 <_strtod_l+0xb2>
 8008cee:	4652      	mov	r2, sl
 8008cf0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008cf4:	ec43 2b10 	vmov	d0, r2, r3
 8008cf8:	b01f      	add	sp, #124	@ 0x7c
 8008cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfe:	2920      	cmp	r1, #32
 8008d00:	d1ce      	bne.n	8008ca0 <_strtod_l+0x30>
 8008d02:	3201      	adds	r2, #1
 8008d04:	e7c1      	b.n	8008c8a <_strtod_l+0x1a>
 8008d06:	292d      	cmp	r1, #45	@ 0x2d
 8008d08:	d1ca      	bne.n	8008ca0 <_strtod_l+0x30>
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	910e      	str	r1, [sp, #56]	@ 0x38
 8008d0e:	1c51      	adds	r1, r2, #1
 8008d10:	9119      	str	r1, [sp, #100]	@ 0x64
 8008d12:	7852      	ldrb	r2, [r2, #1]
 8008d14:	2a00      	cmp	r2, #0
 8008d16:	d1c5      	bne.n	8008ca4 <_strtod_l+0x34>
 8008d18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d1a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f040 8570 	bne.w	8009802 <_strtod_l+0xb92>
 8008d22:	4652      	mov	r2, sl
 8008d24:	465b      	mov	r3, fp
 8008d26:	e7e5      	b.n	8008cf4 <_strtod_l+0x84>
 8008d28:	2100      	movs	r1, #0
 8008d2a:	e7ef      	b.n	8008d0c <_strtod_l+0x9c>
 8008d2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008d2e:	b13a      	cbz	r2, 8008d40 <_strtod_l+0xd0>
 8008d30:	2135      	movs	r1, #53	@ 0x35
 8008d32:	a81c      	add	r0, sp, #112	@ 0x70
 8008d34:	f003 fcda 	bl	800c6ec <__copybits>
 8008d38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d3a:	9805      	ldr	r0, [sp, #20]
 8008d3c:	f003 f8b0 	bl	800bea0 <_Bfree>
 8008d40:	3e01      	subs	r6, #1
 8008d42:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008d44:	2e04      	cmp	r6, #4
 8008d46:	d806      	bhi.n	8008d56 <_strtod_l+0xe6>
 8008d48:	e8df f006 	tbb	[pc, r6]
 8008d4c:	201d0314 	.word	0x201d0314
 8008d50:	14          	.byte	0x14
 8008d51:	00          	.byte	0x00
 8008d52:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008d56:	05e1      	lsls	r1, r4, #23
 8008d58:	bf48      	it	mi
 8008d5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008d5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d62:	0d1b      	lsrs	r3, r3, #20
 8008d64:	051b      	lsls	r3, r3, #20
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1bb      	bne.n	8008ce2 <_strtod_l+0x72>
 8008d6a:	f001 fd67 	bl	800a83c <__errno>
 8008d6e:	2322      	movs	r3, #34	@ 0x22
 8008d70:	6003      	str	r3, [r0, #0]
 8008d72:	e7b6      	b.n	8008ce2 <_strtod_l+0x72>
 8008d74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008d78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008d7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008d80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d84:	e7e7      	b.n	8008d56 <_strtod_l+0xe6>
 8008d86:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008f08 <_strtod_l+0x298>
 8008d8a:	e7e4      	b.n	8008d56 <_strtod_l+0xe6>
 8008d8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008d90:	f04f 3aff 	mov.w	sl, #4294967295
 8008d94:	e7df      	b.n	8008d56 <_strtod_l+0xe6>
 8008d96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d9c:	785b      	ldrb	r3, [r3, #1]
 8008d9e:	2b30      	cmp	r3, #48	@ 0x30
 8008da0:	d0f9      	beq.n	8008d96 <_strtod_l+0x126>
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d09d      	beq.n	8008ce2 <_strtod_l+0x72>
 8008da6:	2301      	movs	r3, #1
 8008da8:	2700      	movs	r7, #0
 8008daa:	9308      	str	r3, [sp, #32]
 8008dac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dae:	930c      	str	r3, [sp, #48]	@ 0x30
 8008db0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008db2:	46b9      	mov	r9, r7
 8008db4:	220a      	movs	r2, #10
 8008db6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008db8:	7805      	ldrb	r5, [r0, #0]
 8008dba:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008dbe:	b2d9      	uxtb	r1, r3
 8008dc0:	2909      	cmp	r1, #9
 8008dc2:	d928      	bls.n	8008e16 <_strtod_l+0x1a6>
 8008dc4:	494f      	ldr	r1, [pc, #316]	@ (8008f04 <_strtod_l+0x294>)
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f001 fcdb 	bl	800a782 <strncmp>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d032      	beq.n	8008e36 <_strtod_l+0x1c6>
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008dd6:	464d      	mov	r5, r9
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2a65      	cmp	r2, #101	@ 0x65
 8008ddc:	d001      	beq.n	8008de2 <_strtod_l+0x172>
 8008dde:	2a45      	cmp	r2, #69	@ 0x45
 8008de0:	d114      	bne.n	8008e0c <_strtod_l+0x19c>
 8008de2:	b91d      	cbnz	r5, 8008dec <_strtod_l+0x17c>
 8008de4:	9a08      	ldr	r2, [sp, #32]
 8008de6:	4302      	orrs	r2, r0
 8008de8:	d096      	beq.n	8008d18 <_strtod_l+0xa8>
 8008dea:	2500      	movs	r5, #0
 8008dec:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008dee:	1c62      	adds	r2, r4, #1
 8008df0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008df2:	7862      	ldrb	r2, [r4, #1]
 8008df4:	2a2b      	cmp	r2, #43	@ 0x2b
 8008df6:	d07a      	beq.n	8008eee <_strtod_l+0x27e>
 8008df8:	2a2d      	cmp	r2, #45	@ 0x2d
 8008dfa:	d07e      	beq.n	8008efa <_strtod_l+0x28a>
 8008dfc:	f04f 0c00 	mov.w	ip, #0
 8008e00:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008e04:	2909      	cmp	r1, #9
 8008e06:	f240 8085 	bls.w	8008f14 <_strtod_l+0x2a4>
 8008e0a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008e0c:	f04f 0800 	mov.w	r8, #0
 8008e10:	e0a5      	b.n	8008f5e <_strtod_l+0x2ee>
 8008e12:	2300      	movs	r3, #0
 8008e14:	e7c8      	b.n	8008da8 <_strtod_l+0x138>
 8008e16:	f1b9 0f08 	cmp.w	r9, #8
 8008e1a:	bfd8      	it	le
 8008e1c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008e1e:	f100 0001 	add.w	r0, r0, #1
 8008e22:	bfda      	itte	le
 8008e24:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e28:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008e2a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008e2e:	f109 0901 	add.w	r9, r9, #1
 8008e32:	9019      	str	r0, [sp, #100]	@ 0x64
 8008e34:	e7bf      	b.n	8008db6 <_strtod_l+0x146>
 8008e36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e3c:	785a      	ldrb	r2, [r3, #1]
 8008e3e:	f1b9 0f00 	cmp.w	r9, #0
 8008e42:	d03b      	beq.n	8008ebc <_strtod_l+0x24c>
 8008e44:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e46:	464d      	mov	r5, r9
 8008e48:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008e4c:	2b09      	cmp	r3, #9
 8008e4e:	d912      	bls.n	8008e76 <_strtod_l+0x206>
 8008e50:	2301      	movs	r3, #1
 8008e52:	e7c2      	b.n	8008dda <_strtod_l+0x16a>
 8008e54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e5a:	785a      	ldrb	r2, [r3, #1]
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	2a30      	cmp	r2, #48	@ 0x30
 8008e60:	d0f8      	beq.n	8008e54 <_strtod_l+0x1e4>
 8008e62:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008e66:	2b08      	cmp	r3, #8
 8008e68:	f200 84d2 	bhi.w	8009810 <_strtod_l+0xba0>
 8008e6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e6e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e70:	2000      	movs	r0, #0
 8008e72:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e74:	4605      	mov	r5, r0
 8008e76:	3a30      	subs	r2, #48	@ 0x30
 8008e78:	f100 0301 	add.w	r3, r0, #1
 8008e7c:	d018      	beq.n	8008eb0 <_strtod_l+0x240>
 8008e7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e80:	4419      	add	r1, r3
 8008e82:	910a      	str	r1, [sp, #40]	@ 0x28
 8008e84:	462e      	mov	r6, r5
 8008e86:	f04f 0e0a 	mov.w	lr, #10
 8008e8a:	1c71      	adds	r1, r6, #1
 8008e8c:	eba1 0c05 	sub.w	ip, r1, r5
 8008e90:	4563      	cmp	r3, ip
 8008e92:	dc15      	bgt.n	8008ec0 <_strtod_l+0x250>
 8008e94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008e98:	182b      	adds	r3, r5, r0
 8008e9a:	2b08      	cmp	r3, #8
 8008e9c:	f105 0501 	add.w	r5, r5, #1
 8008ea0:	4405      	add	r5, r0
 8008ea2:	dc1a      	bgt.n	8008eda <_strtod_l+0x26a>
 8008ea4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ea6:	230a      	movs	r3, #10
 8008ea8:	fb03 2301 	mla	r3, r3, r1, r2
 8008eac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eae:	2300      	movs	r3, #0
 8008eb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008eb2:	1c51      	adds	r1, r2, #1
 8008eb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008eb6:	7852      	ldrb	r2, [r2, #1]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	e7c5      	b.n	8008e48 <_strtod_l+0x1d8>
 8008ebc:	4648      	mov	r0, r9
 8008ebe:	e7ce      	b.n	8008e5e <_strtod_l+0x1ee>
 8008ec0:	2e08      	cmp	r6, #8
 8008ec2:	dc05      	bgt.n	8008ed0 <_strtod_l+0x260>
 8008ec4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008ec6:	fb0e f606 	mul.w	r6, lr, r6
 8008eca:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008ecc:	460e      	mov	r6, r1
 8008ece:	e7dc      	b.n	8008e8a <_strtod_l+0x21a>
 8008ed0:	2910      	cmp	r1, #16
 8008ed2:	bfd8      	it	le
 8008ed4:	fb0e f707 	mulle.w	r7, lr, r7
 8008ed8:	e7f8      	b.n	8008ecc <_strtod_l+0x25c>
 8008eda:	2b0f      	cmp	r3, #15
 8008edc:	bfdc      	itt	le
 8008ede:	230a      	movle	r3, #10
 8008ee0:	fb03 2707 	mlale	r7, r3, r7, r2
 8008ee4:	e7e3      	b.n	8008eae <_strtod_l+0x23e>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008eea:	2301      	movs	r3, #1
 8008eec:	e77a      	b.n	8008de4 <_strtod_l+0x174>
 8008eee:	f04f 0c00 	mov.w	ip, #0
 8008ef2:	1ca2      	adds	r2, r4, #2
 8008ef4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ef6:	78a2      	ldrb	r2, [r4, #2]
 8008ef8:	e782      	b.n	8008e00 <_strtod_l+0x190>
 8008efa:	f04f 0c01 	mov.w	ip, #1
 8008efe:	e7f8      	b.n	8008ef2 <_strtod_l+0x282>
 8008f00:	0800d5d8 	.word	0x0800d5d8
 8008f04:	0800d3ec 	.word	0x0800d3ec
 8008f08:	7ff00000 	.word	0x7ff00000
 8008f0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f0e:	1c51      	adds	r1, r2, #1
 8008f10:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f12:	7852      	ldrb	r2, [r2, #1]
 8008f14:	2a30      	cmp	r2, #48	@ 0x30
 8008f16:	d0f9      	beq.n	8008f0c <_strtod_l+0x29c>
 8008f18:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008f1c:	2908      	cmp	r1, #8
 8008f1e:	f63f af75 	bhi.w	8008e0c <_strtod_l+0x19c>
 8008f22:	3a30      	subs	r2, #48	@ 0x30
 8008f24:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f26:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f28:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008f2a:	f04f 080a 	mov.w	r8, #10
 8008f2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f30:	1c56      	adds	r6, r2, #1
 8008f32:	9619      	str	r6, [sp, #100]	@ 0x64
 8008f34:	7852      	ldrb	r2, [r2, #1]
 8008f36:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008f3a:	f1be 0f09 	cmp.w	lr, #9
 8008f3e:	d939      	bls.n	8008fb4 <_strtod_l+0x344>
 8008f40:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008f42:	1a76      	subs	r6, r6, r1
 8008f44:	2e08      	cmp	r6, #8
 8008f46:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008f4a:	dc03      	bgt.n	8008f54 <_strtod_l+0x2e4>
 8008f4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f4e:	4588      	cmp	r8, r1
 8008f50:	bfa8      	it	ge
 8008f52:	4688      	movge	r8, r1
 8008f54:	f1bc 0f00 	cmp.w	ip, #0
 8008f58:	d001      	beq.n	8008f5e <_strtod_l+0x2ee>
 8008f5a:	f1c8 0800 	rsb	r8, r8, #0
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	d14e      	bne.n	8009000 <_strtod_l+0x390>
 8008f62:	9908      	ldr	r1, [sp, #32]
 8008f64:	4308      	orrs	r0, r1
 8008f66:	f47f aebc 	bne.w	8008ce2 <_strtod_l+0x72>
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f47f aed4 	bne.w	8008d18 <_strtod_l+0xa8>
 8008f70:	2a69      	cmp	r2, #105	@ 0x69
 8008f72:	d028      	beq.n	8008fc6 <_strtod_l+0x356>
 8008f74:	dc25      	bgt.n	8008fc2 <_strtod_l+0x352>
 8008f76:	2a49      	cmp	r2, #73	@ 0x49
 8008f78:	d025      	beq.n	8008fc6 <_strtod_l+0x356>
 8008f7a:	2a4e      	cmp	r2, #78	@ 0x4e
 8008f7c:	f47f aecc 	bne.w	8008d18 <_strtod_l+0xa8>
 8008f80:	499a      	ldr	r1, [pc, #616]	@ (80091ec <_strtod_l+0x57c>)
 8008f82:	a819      	add	r0, sp, #100	@ 0x64
 8008f84:	f002 fdd4 	bl	800bb30 <__match>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	f43f aec5 	beq.w	8008d18 <_strtod_l+0xa8>
 8008f8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b28      	cmp	r3, #40	@ 0x28
 8008f94:	d12e      	bne.n	8008ff4 <_strtod_l+0x384>
 8008f96:	4996      	ldr	r1, [pc, #600]	@ (80091f0 <_strtod_l+0x580>)
 8008f98:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f9a:	a819      	add	r0, sp, #100	@ 0x64
 8008f9c:	f002 fddc 	bl	800bb58 <__hexnan>
 8008fa0:	2805      	cmp	r0, #5
 8008fa2:	d127      	bne.n	8008ff4 <_strtod_l+0x384>
 8008fa4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008fa6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008faa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008fae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008fb2:	e696      	b.n	8008ce2 <_strtod_l+0x72>
 8008fb4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fb6:	fb08 2101 	mla	r1, r8, r1, r2
 8008fba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008fbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fc0:	e7b5      	b.n	8008f2e <_strtod_l+0x2be>
 8008fc2:	2a6e      	cmp	r2, #110	@ 0x6e
 8008fc4:	e7da      	b.n	8008f7c <_strtod_l+0x30c>
 8008fc6:	498b      	ldr	r1, [pc, #556]	@ (80091f4 <_strtod_l+0x584>)
 8008fc8:	a819      	add	r0, sp, #100	@ 0x64
 8008fca:	f002 fdb1 	bl	800bb30 <__match>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f43f aea2 	beq.w	8008d18 <_strtod_l+0xa8>
 8008fd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fd6:	4988      	ldr	r1, [pc, #544]	@ (80091f8 <_strtod_l+0x588>)
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	a819      	add	r0, sp, #100	@ 0x64
 8008fdc:	9319      	str	r3, [sp, #100]	@ 0x64
 8008fde:	f002 fda7 	bl	800bb30 <__match>
 8008fe2:	b910      	cbnz	r0, 8008fea <_strtod_l+0x37a>
 8008fe4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	9319      	str	r3, [sp, #100]	@ 0x64
 8008fea:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009208 <_strtod_l+0x598>
 8008fee:	f04f 0a00 	mov.w	sl, #0
 8008ff2:	e676      	b.n	8008ce2 <_strtod_l+0x72>
 8008ff4:	4881      	ldr	r0, [pc, #516]	@ (80091fc <_strtod_l+0x58c>)
 8008ff6:	f001 fc5f 	bl	800a8b8 <nan>
 8008ffa:	ec5b ab10 	vmov	sl, fp, d0
 8008ffe:	e670      	b.n	8008ce2 <_strtod_l+0x72>
 8009000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009002:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009004:	eba8 0303 	sub.w	r3, r8, r3
 8009008:	f1b9 0f00 	cmp.w	r9, #0
 800900c:	bf08      	it	eq
 800900e:	46a9      	moveq	r9, r5
 8009010:	2d10      	cmp	r5, #16
 8009012:	9309      	str	r3, [sp, #36]	@ 0x24
 8009014:	462c      	mov	r4, r5
 8009016:	bfa8      	it	ge
 8009018:	2410      	movge	r4, #16
 800901a:	f7f7 fa73 	bl	8000504 <__aeabi_ui2d>
 800901e:	2d09      	cmp	r5, #9
 8009020:	4682      	mov	sl, r0
 8009022:	468b      	mov	fp, r1
 8009024:	dc13      	bgt.n	800904e <_strtod_l+0x3de>
 8009026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009028:	2b00      	cmp	r3, #0
 800902a:	f43f ae5a 	beq.w	8008ce2 <_strtod_l+0x72>
 800902e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009030:	dd78      	ble.n	8009124 <_strtod_l+0x4b4>
 8009032:	2b16      	cmp	r3, #22
 8009034:	dc5f      	bgt.n	80090f6 <_strtod_l+0x486>
 8009036:	4972      	ldr	r1, [pc, #456]	@ (8009200 <_strtod_l+0x590>)
 8009038:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800903c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009040:	4652      	mov	r2, sl
 8009042:	465b      	mov	r3, fp
 8009044:	f7f7 fad8 	bl	80005f8 <__aeabi_dmul>
 8009048:	4682      	mov	sl, r0
 800904a:	468b      	mov	fp, r1
 800904c:	e649      	b.n	8008ce2 <_strtod_l+0x72>
 800904e:	4b6c      	ldr	r3, [pc, #432]	@ (8009200 <_strtod_l+0x590>)
 8009050:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009054:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009058:	f7f7 face 	bl	80005f8 <__aeabi_dmul>
 800905c:	4682      	mov	sl, r0
 800905e:	4638      	mov	r0, r7
 8009060:	468b      	mov	fp, r1
 8009062:	f7f7 fa4f 	bl	8000504 <__aeabi_ui2d>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	4650      	mov	r0, sl
 800906c:	4659      	mov	r1, fp
 800906e:	f7f7 f90d 	bl	800028c <__adddf3>
 8009072:	2d0f      	cmp	r5, #15
 8009074:	4682      	mov	sl, r0
 8009076:	468b      	mov	fp, r1
 8009078:	ddd5      	ble.n	8009026 <_strtod_l+0x3b6>
 800907a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800907c:	1b2c      	subs	r4, r5, r4
 800907e:	441c      	add	r4, r3
 8009080:	2c00      	cmp	r4, #0
 8009082:	f340 8093 	ble.w	80091ac <_strtod_l+0x53c>
 8009086:	f014 030f 	ands.w	r3, r4, #15
 800908a:	d00a      	beq.n	80090a2 <_strtod_l+0x432>
 800908c:	495c      	ldr	r1, [pc, #368]	@ (8009200 <_strtod_l+0x590>)
 800908e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009092:	4652      	mov	r2, sl
 8009094:	465b      	mov	r3, fp
 8009096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800909a:	f7f7 faad 	bl	80005f8 <__aeabi_dmul>
 800909e:	4682      	mov	sl, r0
 80090a0:	468b      	mov	fp, r1
 80090a2:	f034 040f 	bics.w	r4, r4, #15
 80090a6:	d073      	beq.n	8009190 <_strtod_l+0x520>
 80090a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80090ac:	dd49      	ble.n	8009142 <_strtod_l+0x4d2>
 80090ae:	2400      	movs	r4, #0
 80090b0:	46a0      	mov	r8, r4
 80090b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80090b4:	46a1      	mov	r9, r4
 80090b6:	9a05      	ldr	r2, [sp, #20]
 80090b8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009208 <_strtod_l+0x598>
 80090bc:	2322      	movs	r3, #34	@ 0x22
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	f04f 0a00 	mov.w	sl, #0
 80090c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f43f ae0b 	beq.w	8008ce2 <_strtod_l+0x72>
 80090cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090ce:	9805      	ldr	r0, [sp, #20]
 80090d0:	f002 fee6 	bl	800bea0 <_Bfree>
 80090d4:	9805      	ldr	r0, [sp, #20]
 80090d6:	4649      	mov	r1, r9
 80090d8:	f002 fee2 	bl	800bea0 <_Bfree>
 80090dc:	9805      	ldr	r0, [sp, #20]
 80090de:	4641      	mov	r1, r8
 80090e0:	f002 fede 	bl	800bea0 <_Bfree>
 80090e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80090e6:	9805      	ldr	r0, [sp, #20]
 80090e8:	f002 feda 	bl	800bea0 <_Bfree>
 80090ec:	9805      	ldr	r0, [sp, #20]
 80090ee:	4621      	mov	r1, r4
 80090f0:	f002 fed6 	bl	800bea0 <_Bfree>
 80090f4:	e5f5      	b.n	8008ce2 <_strtod_l+0x72>
 80090f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80090fc:	4293      	cmp	r3, r2
 80090fe:	dbbc      	blt.n	800907a <_strtod_l+0x40a>
 8009100:	4c3f      	ldr	r4, [pc, #252]	@ (8009200 <_strtod_l+0x590>)
 8009102:	f1c5 050f 	rsb	r5, r5, #15
 8009106:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800910a:	4652      	mov	r2, sl
 800910c:	465b      	mov	r3, fp
 800910e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009112:	f7f7 fa71 	bl	80005f8 <__aeabi_dmul>
 8009116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009118:	1b5d      	subs	r5, r3, r5
 800911a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800911e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009122:	e78f      	b.n	8009044 <_strtod_l+0x3d4>
 8009124:	3316      	adds	r3, #22
 8009126:	dba8      	blt.n	800907a <_strtod_l+0x40a>
 8009128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800912a:	eba3 0808 	sub.w	r8, r3, r8
 800912e:	4b34      	ldr	r3, [pc, #208]	@ (8009200 <_strtod_l+0x590>)
 8009130:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009134:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009138:	4650      	mov	r0, sl
 800913a:	4659      	mov	r1, fp
 800913c:	f7f7 fb86 	bl	800084c <__aeabi_ddiv>
 8009140:	e782      	b.n	8009048 <_strtod_l+0x3d8>
 8009142:	2300      	movs	r3, #0
 8009144:	4f2f      	ldr	r7, [pc, #188]	@ (8009204 <_strtod_l+0x594>)
 8009146:	1124      	asrs	r4, r4, #4
 8009148:	4650      	mov	r0, sl
 800914a:	4659      	mov	r1, fp
 800914c:	461e      	mov	r6, r3
 800914e:	2c01      	cmp	r4, #1
 8009150:	dc21      	bgt.n	8009196 <_strtod_l+0x526>
 8009152:	b10b      	cbz	r3, 8009158 <_strtod_l+0x4e8>
 8009154:	4682      	mov	sl, r0
 8009156:	468b      	mov	fp, r1
 8009158:	492a      	ldr	r1, [pc, #168]	@ (8009204 <_strtod_l+0x594>)
 800915a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800915e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009162:	4652      	mov	r2, sl
 8009164:	465b      	mov	r3, fp
 8009166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800916a:	f7f7 fa45 	bl	80005f8 <__aeabi_dmul>
 800916e:	4b26      	ldr	r3, [pc, #152]	@ (8009208 <_strtod_l+0x598>)
 8009170:	460a      	mov	r2, r1
 8009172:	400b      	ands	r3, r1
 8009174:	4925      	ldr	r1, [pc, #148]	@ (800920c <_strtod_l+0x59c>)
 8009176:	428b      	cmp	r3, r1
 8009178:	4682      	mov	sl, r0
 800917a:	d898      	bhi.n	80090ae <_strtod_l+0x43e>
 800917c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009180:	428b      	cmp	r3, r1
 8009182:	bf86      	itte	hi
 8009184:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009210 <_strtod_l+0x5a0>
 8009188:	f04f 3aff 	movhi.w	sl, #4294967295
 800918c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009190:	2300      	movs	r3, #0
 8009192:	9308      	str	r3, [sp, #32]
 8009194:	e076      	b.n	8009284 <_strtod_l+0x614>
 8009196:	07e2      	lsls	r2, r4, #31
 8009198:	d504      	bpl.n	80091a4 <_strtod_l+0x534>
 800919a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800919e:	f7f7 fa2b 	bl	80005f8 <__aeabi_dmul>
 80091a2:	2301      	movs	r3, #1
 80091a4:	3601      	adds	r6, #1
 80091a6:	1064      	asrs	r4, r4, #1
 80091a8:	3708      	adds	r7, #8
 80091aa:	e7d0      	b.n	800914e <_strtod_l+0x4de>
 80091ac:	d0f0      	beq.n	8009190 <_strtod_l+0x520>
 80091ae:	4264      	negs	r4, r4
 80091b0:	f014 020f 	ands.w	r2, r4, #15
 80091b4:	d00a      	beq.n	80091cc <_strtod_l+0x55c>
 80091b6:	4b12      	ldr	r3, [pc, #72]	@ (8009200 <_strtod_l+0x590>)
 80091b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091bc:	4650      	mov	r0, sl
 80091be:	4659      	mov	r1, fp
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	f7f7 fb42 	bl	800084c <__aeabi_ddiv>
 80091c8:	4682      	mov	sl, r0
 80091ca:	468b      	mov	fp, r1
 80091cc:	1124      	asrs	r4, r4, #4
 80091ce:	d0df      	beq.n	8009190 <_strtod_l+0x520>
 80091d0:	2c1f      	cmp	r4, #31
 80091d2:	dd1f      	ble.n	8009214 <_strtod_l+0x5a4>
 80091d4:	2400      	movs	r4, #0
 80091d6:	46a0      	mov	r8, r4
 80091d8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80091da:	46a1      	mov	r9, r4
 80091dc:	9a05      	ldr	r2, [sp, #20]
 80091de:	2322      	movs	r3, #34	@ 0x22
 80091e0:	f04f 0a00 	mov.w	sl, #0
 80091e4:	f04f 0b00 	mov.w	fp, #0
 80091e8:	6013      	str	r3, [r2, #0]
 80091ea:	e76b      	b.n	80090c4 <_strtod_l+0x454>
 80091ec:	0800d3fb 	.word	0x0800d3fb
 80091f0:	0800d5c4 	.word	0x0800d5c4
 80091f4:	0800d3f3 	.word	0x0800d3f3
 80091f8:	0800d432 	.word	0x0800d432
 80091fc:	0800d5c1 	.word	0x0800d5c1
 8009200:	0800d650 	.word	0x0800d650
 8009204:	0800d628 	.word	0x0800d628
 8009208:	7ff00000 	.word	0x7ff00000
 800920c:	7ca00000 	.word	0x7ca00000
 8009210:	7fefffff 	.word	0x7fefffff
 8009214:	f014 0310 	ands.w	r3, r4, #16
 8009218:	bf18      	it	ne
 800921a:	236a      	movne	r3, #106	@ 0x6a
 800921c:	4ea9      	ldr	r6, [pc, #676]	@ (80094c4 <_strtod_l+0x854>)
 800921e:	9308      	str	r3, [sp, #32]
 8009220:	4650      	mov	r0, sl
 8009222:	4659      	mov	r1, fp
 8009224:	2300      	movs	r3, #0
 8009226:	07e7      	lsls	r7, r4, #31
 8009228:	d504      	bpl.n	8009234 <_strtod_l+0x5c4>
 800922a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800922e:	f7f7 f9e3 	bl	80005f8 <__aeabi_dmul>
 8009232:	2301      	movs	r3, #1
 8009234:	1064      	asrs	r4, r4, #1
 8009236:	f106 0608 	add.w	r6, r6, #8
 800923a:	d1f4      	bne.n	8009226 <_strtod_l+0x5b6>
 800923c:	b10b      	cbz	r3, 8009242 <_strtod_l+0x5d2>
 800923e:	4682      	mov	sl, r0
 8009240:	468b      	mov	fp, r1
 8009242:	9b08      	ldr	r3, [sp, #32]
 8009244:	b1b3      	cbz	r3, 8009274 <_strtod_l+0x604>
 8009246:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800924a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800924e:	2b00      	cmp	r3, #0
 8009250:	4659      	mov	r1, fp
 8009252:	dd0f      	ble.n	8009274 <_strtod_l+0x604>
 8009254:	2b1f      	cmp	r3, #31
 8009256:	dd56      	ble.n	8009306 <_strtod_l+0x696>
 8009258:	2b34      	cmp	r3, #52	@ 0x34
 800925a:	bfde      	ittt	le
 800925c:	f04f 33ff 	movle.w	r3, #4294967295
 8009260:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009264:	4093      	lslle	r3, r2
 8009266:	f04f 0a00 	mov.w	sl, #0
 800926a:	bfcc      	ite	gt
 800926c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009270:	ea03 0b01 	andle.w	fp, r3, r1
 8009274:	2200      	movs	r2, #0
 8009276:	2300      	movs	r3, #0
 8009278:	4650      	mov	r0, sl
 800927a:	4659      	mov	r1, fp
 800927c:	f7f7 fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 8009280:	2800      	cmp	r0, #0
 8009282:	d1a7      	bne.n	80091d4 <_strtod_l+0x564>
 8009284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800928a:	9805      	ldr	r0, [sp, #20]
 800928c:	462b      	mov	r3, r5
 800928e:	464a      	mov	r2, r9
 8009290:	f002 fe6e 	bl	800bf70 <__s2b>
 8009294:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009296:	2800      	cmp	r0, #0
 8009298:	f43f af09 	beq.w	80090ae <_strtod_l+0x43e>
 800929c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800929e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092a0:	2a00      	cmp	r2, #0
 80092a2:	eba3 0308 	sub.w	r3, r3, r8
 80092a6:	bfa8      	it	ge
 80092a8:	2300      	movge	r3, #0
 80092aa:	9312      	str	r3, [sp, #72]	@ 0x48
 80092ac:	2400      	movs	r4, #0
 80092ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80092b2:	9316      	str	r3, [sp, #88]	@ 0x58
 80092b4:	46a0      	mov	r8, r4
 80092b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092b8:	9805      	ldr	r0, [sp, #20]
 80092ba:	6859      	ldr	r1, [r3, #4]
 80092bc:	f002 fdb0 	bl	800be20 <_Balloc>
 80092c0:	4681      	mov	r9, r0
 80092c2:	2800      	cmp	r0, #0
 80092c4:	f43f aef7 	beq.w	80090b6 <_strtod_l+0x446>
 80092c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092ca:	691a      	ldr	r2, [r3, #16]
 80092cc:	3202      	adds	r2, #2
 80092ce:	f103 010c 	add.w	r1, r3, #12
 80092d2:	0092      	lsls	r2, r2, #2
 80092d4:	300c      	adds	r0, #12
 80092d6:	f001 fade 	bl	800a896 <memcpy>
 80092da:	ec4b ab10 	vmov	d0, sl, fp
 80092de:	9805      	ldr	r0, [sp, #20]
 80092e0:	aa1c      	add	r2, sp, #112	@ 0x70
 80092e2:	a91b      	add	r1, sp, #108	@ 0x6c
 80092e4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80092e8:	f003 f976 	bl	800c5d8 <__d2b>
 80092ec:	901a      	str	r0, [sp, #104]	@ 0x68
 80092ee:	2800      	cmp	r0, #0
 80092f0:	f43f aee1 	beq.w	80090b6 <_strtod_l+0x446>
 80092f4:	9805      	ldr	r0, [sp, #20]
 80092f6:	2101      	movs	r1, #1
 80092f8:	f002 fed0 	bl	800c09c <__i2b>
 80092fc:	4680      	mov	r8, r0
 80092fe:	b948      	cbnz	r0, 8009314 <_strtod_l+0x6a4>
 8009300:	f04f 0800 	mov.w	r8, #0
 8009304:	e6d7      	b.n	80090b6 <_strtod_l+0x446>
 8009306:	f04f 32ff 	mov.w	r2, #4294967295
 800930a:	fa02 f303 	lsl.w	r3, r2, r3
 800930e:	ea03 0a0a 	and.w	sl, r3, sl
 8009312:	e7af      	b.n	8009274 <_strtod_l+0x604>
 8009314:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009316:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009318:	2d00      	cmp	r5, #0
 800931a:	bfab      	itete	ge
 800931c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800931e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009320:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009322:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009324:	bfac      	ite	ge
 8009326:	18ef      	addge	r7, r5, r3
 8009328:	1b5e      	sublt	r6, r3, r5
 800932a:	9b08      	ldr	r3, [sp, #32]
 800932c:	1aed      	subs	r5, r5, r3
 800932e:	4415      	add	r5, r2
 8009330:	4b65      	ldr	r3, [pc, #404]	@ (80094c8 <_strtod_l+0x858>)
 8009332:	3d01      	subs	r5, #1
 8009334:	429d      	cmp	r5, r3
 8009336:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800933a:	da50      	bge.n	80093de <_strtod_l+0x76e>
 800933c:	1b5b      	subs	r3, r3, r5
 800933e:	2b1f      	cmp	r3, #31
 8009340:	eba2 0203 	sub.w	r2, r2, r3
 8009344:	f04f 0101 	mov.w	r1, #1
 8009348:	dc3d      	bgt.n	80093c6 <_strtod_l+0x756>
 800934a:	fa01 f303 	lsl.w	r3, r1, r3
 800934e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009350:	2300      	movs	r3, #0
 8009352:	9310      	str	r3, [sp, #64]	@ 0x40
 8009354:	18bd      	adds	r5, r7, r2
 8009356:	9b08      	ldr	r3, [sp, #32]
 8009358:	42af      	cmp	r7, r5
 800935a:	4416      	add	r6, r2
 800935c:	441e      	add	r6, r3
 800935e:	463b      	mov	r3, r7
 8009360:	bfa8      	it	ge
 8009362:	462b      	movge	r3, r5
 8009364:	42b3      	cmp	r3, r6
 8009366:	bfa8      	it	ge
 8009368:	4633      	movge	r3, r6
 800936a:	2b00      	cmp	r3, #0
 800936c:	bfc2      	ittt	gt
 800936e:	1aed      	subgt	r5, r5, r3
 8009370:	1af6      	subgt	r6, r6, r3
 8009372:	1aff      	subgt	r7, r7, r3
 8009374:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009376:	2b00      	cmp	r3, #0
 8009378:	dd16      	ble.n	80093a8 <_strtod_l+0x738>
 800937a:	4641      	mov	r1, r8
 800937c:	9805      	ldr	r0, [sp, #20]
 800937e:	461a      	mov	r2, r3
 8009380:	f002 ff44 	bl	800c20c <__pow5mult>
 8009384:	4680      	mov	r8, r0
 8009386:	2800      	cmp	r0, #0
 8009388:	d0ba      	beq.n	8009300 <_strtod_l+0x690>
 800938a:	4601      	mov	r1, r0
 800938c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800938e:	9805      	ldr	r0, [sp, #20]
 8009390:	f002 fe9a 	bl	800c0c8 <__multiply>
 8009394:	900a      	str	r0, [sp, #40]	@ 0x28
 8009396:	2800      	cmp	r0, #0
 8009398:	f43f ae8d 	beq.w	80090b6 <_strtod_l+0x446>
 800939c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800939e:	9805      	ldr	r0, [sp, #20]
 80093a0:	f002 fd7e 	bl	800bea0 <_Bfree>
 80093a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80093a8:	2d00      	cmp	r5, #0
 80093aa:	dc1d      	bgt.n	80093e8 <_strtod_l+0x778>
 80093ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	dd23      	ble.n	80093fa <_strtod_l+0x78a>
 80093b2:	4649      	mov	r1, r9
 80093b4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80093b6:	9805      	ldr	r0, [sp, #20]
 80093b8:	f002 ff28 	bl	800c20c <__pow5mult>
 80093bc:	4681      	mov	r9, r0
 80093be:	b9e0      	cbnz	r0, 80093fa <_strtod_l+0x78a>
 80093c0:	f04f 0900 	mov.w	r9, #0
 80093c4:	e677      	b.n	80090b6 <_strtod_l+0x446>
 80093c6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80093ca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80093ce:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80093d2:	35e2      	adds	r5, #226	@ 0xe2
 80093d4:	fa01 f305 	lsl.w	r3, r1, r5
 80093d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80093da:	9113      	str	r1, [sp, #76]	@ 0x4c
 80093dc:	e7ba      	b.n	8009354 <_strtod_l+0x6e4>
 80093de:	2300      	movs	r3, #0
 80093e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80093e2:	2301      	movs	r3, #1
 80093e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093e6:	e7b5      	b.n	8009354 <_strtod_l+0x6e4>
 80093e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093ea:	9805      	ldr	r0, [sp, #20]
 80093ec:	462a      	mov	r2, r5
 80093ee:	f002 ff67 	bl	800c2c0 <__lshift>
 80093f2:	901a      	str	r0, [sp, #104]	@ 0x68
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d1d9      	bne.n	80093ac <_strtod_l+0x73c>
 80093f8:	e65d      	b.n	80090b6 <_strtod_l+0x446>
 80093fa:	2e00      	cmp	r6, #0
 80093fc:	dd07      	ble.n	800940e <_strtod_l+0x79e>
 80093fe:	4649      	mov	r1, r9
 8009400:	9805      	ldr	r0, [sp, #20]
 8009402:	4632      	mov	r2, r6
 8009404:	f002 ff5c 	bl	800c2c0 <__lshift>
 8009408:	4681      	mov	r9, r0
 800940a:	2800      	cmp	r0, #0
 800940c:	d0d8      	beq.n	80093c0 <_strtod_l+0x750>
 800940e:	2f00      	cmp	r7, #0
 8009410:	dd08      	ble.n	8009424 <_strtod_l+0x7b4>
 8009412:	4641      	mov	r1, r8
 8009414:	9805      	ldr	r0, [sp, #20]
 8009416:	463a      	mov	r2, r7
 8009418:	f002 ff52 	bl	800c2c0 <__lshift>
 800941c:	4680      	mov	r8, r0
 800941e:	2800      	cmp	r0, #0
 8009420:	f43f ae49 	beq.w	80090b6 <_strtod_l+0x446>
 8009424:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009426:	9805      	ldr	r0, [sp, #20]
 8009428:	464a      	mov	r2, r9
 800942a:	f002 ffd1 	bl	800c3d0 <__mdiff>
 800942e:	4604      	mov	r4, r0
 8009430:	2800      	cmp	r0, #0
 8009432:	f43f ae40 	beq.w	80090b6 <_strtod_l+0x446>
 8009436:	68c3      	ldr	r3, [r0, #12]
 8009438:	930f      	str	r3, [sp, #60]	@ 0x3c
 800943a:	2300      	movs	r3, #0
 800943c:	60c3      	str	r3, [r0, #12]
 800943e:	4641      	mov	r1, r8
 8009440:	f002 ffaa 	bl	800c398 <__mcmp>
 8009444:	2800      	cmp	r0, #0
 8009446:	da45      	bge.n	80094d4 <_strtod_l+0x864>
 8009448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800944a:	ea53 030a 	orrs.w	r3, r3, sl
 800944e:	d16b      	bne.n	8009528 <_strtod_l+0x8b8>
 8009450:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009454:	2b00      	cmp	r3, #0
 8009456:	d167      	bne.n	8009528 <_strtod_l+0x8b8>
 8009458:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800945c:	0d1b      	lsrs	r3, r3, #20
 800945e:	051b      	lsls	r3, r3, #20
 8009460:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009464:	d960      	bls.n	8009528 <_strtod_l+0x8b8>
 8009466:	6963      	ldr	r3, [r4, #20]
 8009468:	b913      	cbnz	r3, 8009470 <_strtod_l+0x800>
 800946a:	6923      	ldr	r3, [r4, #16]
 800946c:	2b01      	cmp	r3, #1
 800946e:	dd5b      	ble.n	8009528 <_strtod_l+0x8b8>
 8009470:	4621      	mov	r1, r4
 8009472:	2201      	movs	r2, #1
 8009474:	9805      	ldr	r0, [sp, #20]
 8009476:	f002 ff23 	bl	800c2c0 <__lshift>
 800947a:	4641      	mov	r1, r8
 800947c:	4604      	mov	r4, r0
 800947e:	f002 ff8b 	bl	800c398 <__mcmp>
 8009482:	2800      	cmp	r0, #0
 8009484:	dd50      	ble.n	8009528 <_strtod_l+0x8b8>
 8009486:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800948a:	9a08      	ldr	r2, [sp, #32]
 800948c:	0d1b      	lsrs	r3, r3, #20
 800948e:	051b      	lsls	r3, r3, #20
 8009490:	2a00      	cmp	r2, #0
 8009492:	d06a      	beq.n	800956a <_strtod_l+0x8fa>
 8009494:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009498:	d867      	bhi.n	800956a <_strtod_l+0x8fa>
 800949a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800949e:	f67f ae9d 	bls.w	80091dc <_strtod_l+0x56c>
 80094a2:	4b0a      	ldr	r3, [pc, #40]	@ (80094cc <_strtod_l+0x85c>)
 80094a4:	4650      	mov	r0, sl
 80094a6:	4659      	mov	r1, fp
 80094a8:	2200      	movs	r2, #0
 80094aa:	f7f7 f8a5 	bl	80005f8 <__aeabi_dmul>
 80094ae:	4b08      	ldr	r3, [pc, #32]	@ (80094d0 <_strtod_l+0x860>)
 80094b0:	400b      	ands	r3, r1
 80094b2:	4682      	mov	sl, r0
 80094b4:	468b      	mov	fp, r1
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f47f ae08 	bne.w	80090cc <_strtod_l+0x45c>
 80094bc:	9a05      	ldr	r2, [sp, #20]
 80094be:	2322      	movs	r3, #34	@ 0x22
 80094c0:	6013      	str	r3, [r2, #0]
 80094c2:	e603      	b.n	80090cc <_strtod_l+0x45c>
 80094c4:	0800d5f0 	.word	0x0800d5f0
 80094c8:	fffffc02 	.word	0xfffffc02
 80094cc:	39500000 	.word	0x39500000
 80094d0:	7ff00000 	.word	0x7ff00000
 80094d4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80094d8:	d165      	bne.n	80095a6 <_strtod_l+0x936>
 80094da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80094dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094e0:	b35a      	cbz	r2, 800953a <_strtod_l+0x8ca>
 80094e2:	4a9f      	ldr	r2, [pc, #636]	@ (8009760 <_strtod_l+0xaf0>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d12b      	bne.n	8009540 <_strtod_l+0x8d0>
 80094e8:	9b08      	ldr	r3, [sp, #32]
 80094ea:	4651      	mov	r1, sl
 80094ec:	b303      	cbz	r3, 8009530 <_strtod_l+0x8c0>
 80094ee:	4b9d      	ldr	r3, [pc, #628]	@ (8009764 <_strtod_l+0xaf4>)
 80094f0:	465a      	mov	r2, fp
 80094f2:	4013      	ands	r3, r2
 80094f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80094f8:	f04f 32ff 	mov.w	r2, #4294967295
 80094fc:	d81b      	bhi.n	8009536 <_strtod_l+0x8c6>
 80094fe:	0d1b      	lsrs	r3, r3, #20
 8009500:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009504:	fa02 f303 	lsl.w	r3, r2, r3
 8009508:	4299      	cmp	r1, r3
 800950a:	d119      	bne.n	8009540 <_strtod_l+0x8d0>
 800950c:	4b96      	ldr	r3, [pc, #600]	@ (8009768 <_strtod_l+0xaf8>)
 800950e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009510:	429a      	cmp	r2, r3
 8009512:	d102      	bne.n	800951a <_strtod_l+0x8aa>
 8009514:	3101      	adds	r1, #1
 8009516:	f43f adce 	beq.w	80090b6 <_strtod_l+0x446>
 800951a:	4b92      	ldr	r3, [pc, #584]	@ (8009764 <_strtod_l+0xaf4>)
 800951c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800951e:	401a      	ands	r2, r3
 8009520:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009524:	f04f 0a00 	mov.w	sl, #0
 8009528:	9b08      	ldr	r3, [sp, #32]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1b9      	bne.n	80094a2 <_strtod_l+0x832>
 800952e:	e5cd      	b.n	80090cc <_strtod_l+0x45c>
 8009530:	f04f 33ff 	mov.w	r3, #4294967295
 8009534:	e7e8      	b.n	8009508 <_strtod_l+0x898>
 8009536:	4613      	mov	r3, r2
 8009538:	e7e6      	b.n	8009508 <_strtod_l+0x898>
 800953a:	ea53 030a 	orrs.w	r3, r3, sl
 800953e:	d0a2      	beq.n	8009486 <_strtod_l+0x816>
 8009540:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009542:	b1db      	cbz	r3, 800957c <_strtod_l+0x90c>
 8009544:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009546:	4213      	tst	r3, r2
 8009548:	d0ee      	beq.n	8009528 <_strtod_l+0x8b8>
 800954a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800954c:	9a08      	ldr	r2, [sp, #32]
 800954e:	4650      	mov	r0, sl
 8009550:	4659      	mov	r1, fp
 8009552:	b1bb      	cbz	r3, 8009584 <_strtod_l+0x914>
 8009554:	f7ff fb6d 	bl	8008c32 <sulp>
 8009558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800955c:	ec53 2b10 	vmov	r2, r3, d0
 8009560:	f7f6 fe94 	bl	800028c <__adddf3>
 8009564:	4682      	mov	sl, r0
 8009566:	468b      	mov	fp, r1
 8009568:	e7de      	b.n	8009528 <_strtod_l+0x8b8>
 800956a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800956e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009572:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009576:	f04f 3aff 	mov.w	sl, #4294967295
 800957a:	e7d5      	b.n	8009528 <_strtod_l+0x8b8>
 800957c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800957e:	ea13 0f0a 	tst.w	r3, sl
 8009582:	e7e1      	b.n	8009548 <_strtod_l+0x8d8>
 8009584:	f7ff fb55 	bl	8008c32 <sulp>
 8009588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800958c:	ec53 2b10 	vmov	r2, r3, d0
 8009590:	f7f6 fe7a 	bl	8000288 <__aeabi_dsub>
 8009594:	2200      	movs	r2, #0
 8009596:	2300      	movs	r3, #0
 8009598:	4682      	mov	sl, r0
 800959a:	468b      	mov	fp, r1
 800959c:	f7f7 fa94 	bl	8000ac8 <__aeabi_dcmpeq>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d0c1      	beq.n	8009528 <_strtod_l+0x8b8>
 80095a4:	e61a      	b.n	80091dc <_strtod_l+0x56c>
 80095a6:	4641      	mov	r1, r8
 80095a8:	4620      	mov	r0, r4
 80095aa:	f003 f86d 	bl	800c688 <__ratio>
 80095ae:	ec57 6b10 	vmov	r6, r7, d0
 80095b2:	2200      	movs	r2, #0
 80095b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80095b8:	4630      	mov	r0, r6
 80095ba:	4639      	mov	r1, r7
 80095bc:	f7f7 fa98 	bl	8000af0 <__aeabi_dcmple>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d06f      	beq.n	80096a4 <_strtod_l+0xa34>
 80095c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d17a      	bne.n	80096c0 <_strtod_l+0xa50>
 80095ca:	f1ba 0f00 	cmp.w	sl, #0
 80095ce:	d158      	bne.n	8009682 <_strtod_l+0xa12>
 80095d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d15a      	bne.n	8009690 <_strtod_l+0xa20>
 80095da:	4b64      	ldr	r3, [pc, #400]	@ (800976c <_strtod_l+0xafc>)
 80095dc:	2200      	movs	r2, #0
 80095de:	4630      	mov	r0, r6
 80095e0:	4639      	mov	r1, r7
 80095e2:	f7f7 fa7b 	bl	8000adc <__aeabi_dcmplt>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d159      	bne.n	800969e <_strtod_l+0xa2e>
 80095ea:	4630      	mov	r0, r6
 80095ec:	4639      	mov	r1, r7
 80095ee:	4b60      	ldr	r3, [pc, #384]	@ (8009770 <_strtod_l+0xb00>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	f7f7 f801 	bl	80005f8 <__aeabi_dmul>
 80095f6:	4606      	mov	r6, r0
 80095f8:	460f      	mov	r7, r1
 80095fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80095fe:	9606      	str	r6, [sp, #24]
 8009600:	9307      	str	r3, [sp, #28]
 8009602:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009606:	4d57      	ldr	r5, [pc, #348]	@ (8009764 <_strtod_l+0xaf4>)
 8009608:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800960c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800960e:	401d      	ands	r5, r3
 8009610:	4b58      	ldr	r3, [pc, #352]	@ (8009774 <_strtod_l+0xb04>)
 8009612:	429d      	cmp	r5, r3
 8009614:	f040 80b2 	bne.w	800977c <_strtod_l+0xb0c>
 8009618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800961a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800961e:	ec4b ab10 	vmov	d0, sl, fp
 8009622:	f002 ff69 	bl	800c4f8 <__ulp>
 8009626:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800962a:	ec51 0b10 	vmov	r0, r1, d0
 800962e:	f7f6 ffe3 	bl	80005f8 <__aeabi_dmul>
 8009632:	4652      	mov	r2, sl
 8009634:	465b      	mov	r3, fp
 8009636:	f7f6 fe29 	bl	800028c <__adddf3>
 800963a:	460b      	mov	r3, r1
 800963c:	4949      	ldr	r1, [pc, #292]	@ (8009764 <_strtod_l+0xaf4>)
 800963e:	4a4e      	ldr	r2, [pc, #312]	@ (8009778 <_strtod_l+0xb08>)
 8009640:	4019      	ands	r1, r3
 8009642:	4291      	cmp	r1, r2
 8009644:	4682      	mov	sl, r0
 8009646:	d942      	bls.n	80096ce <_strtod_l+0xa5e>
 8009648:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800964a:	4b47      	ldr	r3, [pc, #284]	@ (8009768 <_strtod_l+0xaf8>)
 800964c:	429a      	cmp	r2, r3
 800964e:	d103      	bne.n	8009658 <_strtod_l+0x9e8>
 8009650:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009652:	3301      	adds	r3, #1
 8009654:	f43f ad2f 	beq.w	80090b6 <_strtod_l+0x446>
 8009658:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009768 <_strtod_l+0xaf8>
 800965c:	f04f 3aff 	mov.w	sl, #4294967295
 8009660:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009662:	9805      	ldr	r0, [sp, #20]
 8009664:	f002 fc1c 	bl	800bea0 <_Bfree>
 8009668:	9805      	ldr	r0, [sp, #20]
 800966a:	4649      	mov	r1, r9
 800966c:	f002 fc18 	bl	800bea0 <_Bfree>
 8009670:	9805      	ldr	r0, [sp, #20]
 8009672:	4641      	mov	r1, r8
 8009674:	f002 fc14 	bl	800bea0 <_Bfree>
 8009678:	9805      	ldr	r0, [sp, #20]
 800967a:	4621      	mov	r1, r4
 800967c:	f002 fc10 	bl	800bea0 <_Bfree>
 8009680:	e619      	b.n	80092b6 <_strtod_l+0x646>
 8009682:	f1ba 0f01 	cmp.w	sl, #1
 8009686:	d103      	bne.n	8009690 <_strtod_l+0xa20>
 8009688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800968a:	2b00      	cmp	r3, #0
 800968c:	f43f ada6 	beq.w	80091dc <_strtod_l+0x56c>
 8009690:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009740 <_strtod_l+0xad0>
 8009694:	4f35      	ldr	r7, [pc, #212]	@ (800976c <_strtod_l+0xafc>)
 8009696:	ed8d 7b06 	vstr	d7, [sp, #24]
 800969a:	2600      	movs	r6, #0
 800969c:	e7b1      	b.n	8009602 <_strtod_l+0x992>
 800969e:	4f34      	ldr	r7, [pc, #208]	@ (8009770 <_strtod_l+0xb00>)
 80096a0:	2600      	movs	r6, #0
 80096a2:	e7aa      	b.n	80095fa <_strtod_l+0x98a>
 80096a4:	4b32      	ldr	r3, [pc, #200]	@ (8009770 <_strtod_l+0xb00>)
 80096a6:	4630      	mov	r0, r6
 80096a8:	4639      	mov	r1, r7
 80096aa:	2200      	movs	r2, #0
 80096ac:	f7f6 ffa4 	bl	80005f8 <__aeabi_dmul>
 80096b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096b2:	4606      	mov	r6, r0
 80096b4:	460f      	mov	r7, r1
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d09f      	beq.n	80095fa <_strtod_l+0x98a>
 80096ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80096be:	e7a0      	b.n	8009602 <_strtod_l+0x992>
 80096c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009748 <_strtod_l+0xad8>
 80096c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80096c8:	ec57 6b17 	vmov	r6, r7, d7
 80096cc:	e799      	b.n	8009602 <_strtod_l+0x992>
 80096ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80096d2:	9b08      	ldr	r3, [sp, #32]
 80096d4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1c1      	bne.n	8009660 <_strtod_l+0x9f0>
 80096dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80096e0:	0d1b      	lsrs	r3, r3, #20
 80096e2:	051b      	lsls	r3, r3, #20
 80096e4:	429d      	cmp	r5, r3
 80096e6:	d1bb      	bne.n	8009660 <_strtod_l+0x9f0>
 80096e8:	4630      	mov	r0, r6
 80096ea:	4639      	mov	r1, r7
 80096ec:	f7f7 fae4 	bl	8000cb8 <__aeabi_d2lz>
 80096f0:	f7f6 ff54 	bl	800059c <__aeabi_l2d>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	4630      	mov	r0, r6
 80096fa:	4639      	mov	r1, r7
 80096fc:	f7f6 fdc4 	bl	8000288 <__aeabi_dsub>
 8009700:	460b      	mov	r3, r1
 8009702:	4602      	mov	r2, r0
 8009704:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009708:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800970c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800970e:	ea46 060a 	orr.w	r6, r6, sl
 8009712:	431e      	orrs	r6, r3
 8009714:	d06f      	beq.n	80097f6 <_strtod_l+0xb86>
 8009716:	a30e      	add	r3, pc, #56	@ (adr r3, 8009750 <_strtod_l+0xae0>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f7f7 f9de 	bl	8000adc <__aeabi_dcmplt>
 8009720:	2800      	cmp	r0, #0
 8009722:	f47f acd3 	bne.w	80090cc <_strtod_l+0x45c>
 8009726:	a30c      	add	r3, pc, #48	@ (adr r3, 8009758 <_strtod_l+0xae8>)
 8009728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009730:	f7f7 f9f2 	bl	8000b18 <__aeabi_dcmpgt>
 8009734:	2800      	cmp	r0, #0
 8009736:	d093      	beq.n	8009660 <_strtod_l+0x9f0>
 8009738:	e4c8      	b.n	80090cc <_strtod_l+0x45c>
 800973a:	bf00      	nop
 800973c:	f3af 8000 	nop.w
 8009740:	00000000 	.word	0x00000000
 8009744:	bff00000 	.word	0xbff00000
 8009748:	00000000 	.word	0x00000000
 800974c:	3ff00000 	.word	0x3ff00000
 8009750:	94a03595 	.word	0x94a03595
 8009754:	3fdfffff 	.word	0x3fdfffff
 8009758:	35afe535 	.word	0x35afe535
 800975c:	3fe00000 	.word	0x3fe00000
 8009760:	000fffff 	.word	0x000fffff
 8009764:	7ff00000 	.word	0x7ff00000
 8009768:	7fefffff 	.word	0x7fefffff
 800976c:	3ff00000 	.word	0x3ff00000
 8009770:	3fe00000 	.word	0x3fe00000
 8009774:	7fe00000 	.word	0x7fe00000
 8009778:	7c9fffff 	.word	0x7c9fffff
 800977c:	9b08      	ldr	r3, [sp, #32]
 800977e:	b323      	cbz	r3, 80097ca <_strtod_l+0xb5a>
 8009780:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009784:	d821      	bhi.n	80097ca <_strtod_l+0xb5a>
 8009786:	a328      	add	r3, pc, #160	@ (adr r3, 8009828 <_strtod_l+0xbb8>)
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	4630      	mov	r0, r6
 800978e:	4639      	mov	r1, r7
 8009790:	f7f7 f9ae 	bl	8000af0 <__aeabi_dcmple>
 8009794:	b1a0      	cbz	r0, 80097c0 <_strtod_l+0xb50>
 8009796:	4639      	mov	r1, r7
 8009798:	4630      	mov	r0, r6
 800979a:	f7f7 fa05 	bl	8000ba8 <__aeabi_d2uiz>
 800979e:	2801      	cmp	r0, #1
 80097a0:	bf38      	it	cc
 80097a2:	2001      	movcc	r0, #1
 80097a4:	f7f6 feae 	bl	8000504 <__aeabi_ui2d>
 80097a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097aa:	4606      	mov	r6, r0
 80097ac:	460f      	mov	r7, r1
 80097ae:	b9fb      	cbnz	r3, 80097f0 <_strtod_l+0xb80>
 80097b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80097b4:	9014      	str	r0, [sp, #80]	@ 0x50
 80097b6:	9315      	str	r3, [sp, #84]	@ 0x54
 80097b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80097bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80097c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80097c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80097c6:	1b5b      	subs	r3, r3, r5
 80097c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80097ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80097ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80097d2:	f002 fe91 	bl	800c4f8 <__ulp>
 80097d6:	4650      	mov	r0, sl
 80097d8:	ec53 2b10 	vmov	r2, r3, d0
 80097dc:	4659      	mov	r1, fp
 80097de:	f7f6 ff0b 	bl	80005f8 <__aeabi_dmul>
 80097e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80097e6:	f7f6 fd51 	bl	800028c <__adddf3>
 80097ea:	4682      	mov	sl, r0
 80097ec:	468b      	mov	fp, r1
 80097ee:	e770      	b.n	80096d2 <_strtod_l+0xa62>
 80097f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80097f4:	e7e0      	b.n	80097b8 <_strtod_l+0xb48>
 80097f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009830 <_strtod_l+0xbc0>)
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	f7f7 f96e 	bl	8000adc <__aeabi_dcmplt>
 8009800:	e798      	b.n	8009734 <_strtod_l+0xac4>
 8009802:	2300      	movs	r3, #0
 8009804:	930e      	str	r3, [sp, #56]	@ 0x38
 8009806:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009808:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	f7ff ba6d 	b.w	8008cea <_strtod_l+0x7a>
 8009810:	2a65      	cmp	r2, #101	@ 0x65
 8009812:	f43f ab68 	beq.w	8008ee6 <_strtod_l+0x276>
 8009816:	2a45      	cmp	r2, #69	@ 0x45
 8009818:	f43f ab65 	beq.w	8008ee6 <_strtod_l+0x276>
 800981c:	2301      	movs	r3, #1
 800981e:	f7ff bba0 	b.w	8008f62 <_strtod_l+0x2f2>
 8009822:	bf00      	nop
 8009824:	f3af 8000 	nop.w
 8009828:	ffc00000 	.word	0xffc00000
 800982c:	41dfffff 	.word	0x41dfffff
 8009830:	94a03595 	.word	0x94a03595
 8009834:	3fcfffff 	.word	0x3fcfffff

08009838 <_strtod_r>:
 8009838:	4b01      	ldr	r3, [pc, #4]	@ (8009840 <_strtod_r+0x8>)
 800983a:	f7ff ba19 	b.w	8008c70 <_strtod_l>
 800983e:	bf00      	nop
 8009840:	20000108 	.word	0x20000108

08009844 <strtod>:
 8009844:	460a      	mov	r2, r1
 8009846:	4601      	mov	r1, r0
 8009848:	4802      	ldr	r0, [pc, #8]	@ (8009854 <strtod+0x10>)
 800984a:	4b03      	ldr	r3, [pc, #12]	@ (8009858 <strtod+0x14>)
 800984c:	6800      	ldr	r0, [r0, #0]
 800984e:	f7ff ba0f 	b.w	8008c70 <_strtod_l>
 8009852:	bf00      	nop
 8009854:	20000274 	.word	0x20000274
 8009858:	20000108 	.word	0x20000108

0800985c <__cvt>:
 800985c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009860:	ec57 6b10 	vmov	r6, r7, d0
 8009864:	2f00      	cmp	r7, #0
 8009866:	460c      	mov	r4, r1
 8009868:	4619      	mov	r1, r3
 800986a:	463b      	mov	r3, r7
 800986c:	bfbb      	ittet	lt
 800986e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009872:	461f      	movlt	r7, r3
 8009874:	2300      	movge	r3, #0
 8009876:	232d      	movlt	r3, #45	@ 0x2d
 8009878:	700b      	strb	r3, [r1, #0]
 800987a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800987c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009880:	4691      	mov	r9, r2
 8009882:	f023 0820 	bic.w	r8, r3, #32
 8009886:	bfbc      	itt	lt
 8009888:	4632      	movlt	r2, r6
 800988a:	4616      	movlt	r6, r2
 800988c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009890:	d005      	beq.n	800989e <__cvt+0x42>
 8009892:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009896:	d100      	bne.n	800989a <__cvt+0x3e>
 8009898:	3401      	adds	r4, #1
 800989a:	2102      	movs	r1, #2
 800989c:	e000      	b.n	80098a0 <__cvt+0x44>
 800989e:	2103      	movs	r1, #3
 80098a0:	ab03      	add	r3, sp, #12
 80098a2:	9301      	str	r3, [sp, #4]
 80098a4:	ab02      	add	r3, sp, #8
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	ec47 6b10 	vmov	d0, r6, r7
 80098ac:	4653      	mov	r3, sl
 80098ae:	4622      	mov	r2, r4
 80098b0:	f001 f89a 	bl	800a9e8 <_dtoa_r>
 80098b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80098b8:	4605      	mov	r5, r0
 80098ba:	d119      	bne.n	80098f0 <__cvt+0x94>
 80098bc:	f019 0f01 	tst.w	r9, #1
 80098c0:	d00e      	beq.n	80098e0 <__cvt+0x84>
 80098c2:	eb00 0904 	add.w	r9, r0, r4
 80098c6:	2200      	movs	r2, #0
 80098c8:	2300      	movs	r3, #0
 80098ca:	4630      	mov	r0, r6
 80098cc:	4639      	mov	r1, r7
 80098ce:	f7f7 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80098d2:	b108      	cbz	r0, 80098d8 <__cvt+0x7c>
 80098d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80098d8:	2230      	movs	r2, #48	@ 0x30
 80098da:	9b03      	ldr	r3, [sp, #12]
 80098dc:	454b      	cmp	r3, r9
 80098de:	d31e      	bcc.n	800991e <__cvt+0xc2>
 80098e0:	9b03      	ldr	r3, [sp, #12]
 80098e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098e4:	1b5b      	subs	r3, r3, r5
 80098e6:	4628      	mov	r0, r5
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	b004      	add	sp, #16
 80098ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80098f4:	eb00 0904 	add.w	r9, r0, r4
 80098f8:	d1e5      	bne.n	80098c6 <__cvt+0x6a>
 80098fa:	7803      	ldrb	r3, [r0, #0]
 80098fc:	2b30      	cmp	r3, #48	@ 0x30
 80098fe:	d10a      	bne.n	8009916 <__cvt+0xba>
 8009900:	2200      	movs	r2, #0
 8009902:	2300      	movs	r3, #0
 8009904:	4630      	mov	r0, r6
 8009906:	4639      	mov	r1, r7
 8009908:	f7f7 f8de 	bl	8000ac8 <__aeabi_dcmpeq>
 800990c:	b918      	cbnz	r0, 8009916 <__cvt+0xba>
 800990e:	f1c4 0401 	rsb	r4, r4, #1
 8009912:	f8ca 4000 	str.w	r4, [sl]
 8009916:	f8da 3000 	ldr.w	r3, [sl]
 800991a:	4499      	add	r9, r3
 800991c:	e7d3      	b.n	80098c6 <__cvt+0x6a>
 800991e:	1c59      	adds	r1, r3, #1
 8009920:	9103      	str	r1, [sp, #12]
 8009922:	701a      	strb	r2, [r3, #0]
 8009924:	e7d9      	b.n	80098da <__cvt+0x7e>

08009926 <__exponent>:
 8009926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009928:	2900      	cmp	r1, #0
 800992a:	bfba      	itte	lt
 800992c:	4249      	neglt	r1, r1
 800992e:	232d      	movlt	r3, #45	@ 0x2d
 8009930:	232b      	movge	r3, #43	@ 0x2b
 8009932:	2909      	cmp	r1, #9
 8009934:	7002      	strb	r2, [r0, #0]
 8009936:	7043      	strb	r3, [r0, #1]
 8009938:	dd29      	ble.n	800998e <__exponent+0x68>
 800993a:	f10d 0307 	add.w	r3, sp, #7
 800993e:	461d      	mov	r5, r3
 8009940:	270a      	movs	r7, #10
 8009942:	461a      	mov	r2, r3
 8009944:	fbb1 f6f7 	udiv	r6, r1, r7
 8009948:	fb07 1416 	mls	r4, r7, r6, r1
 800994c:	3430      	adds	r4, #48	@ 0x30
 800994e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009952:	460c      	mov	r4, r1
 8009954:	2c63      	cmp	r4, #99	@ 0x63
 8009956:	f103 33ff 	add.w	r3, r3, #4294967295
 800995a:	4631      	mov	r1, r6
 800995c:	dcf1      	bgt.n	8009942 <__exponent+0x1c>
 800995e:	3130      	adds	r1, #48	@ 0x30
 8009960:	1e94      	subs	r4, r2, #2
 8009962:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009966:	1c41      	adds	r1, r0, #1
 8009968:	4623      	mov	r3, r4
 800996a:	42ab      	cmp	r3, r5
 800996c:	d30a      	bcc.n	8009984 <__exponent+0x5e>
 800996e:	f10d 0309 	add.w	r3, sp, #9
 8009972:	1a9b      	subs	r3, r3, r2
 8009974:	42ac      	cmp	r4, r5
 8009976:	bf88      	it	hi
 8009978:	2300      	movhi	r3, #0
 800997a:	3302      	adds	r3, #2
 800997c:	4403      	add	r3, r0
 800997e:	1a18      	subs	r0, r3, r0
 8009980:	b003      	add	sp, #12
 8009982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009984:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009988:	f801 6f01 	strb.w	r6, [r1, #1]!
 800998c:	e7ed      	b.n	800996a <__exponent+0x44>
 800998e:	2330      	movs	r3, #48	@ 0x30
 8009990:	3130      	adds	r1, #48	@ 0x30
 8009992:	7083      	strb	r3, [r0, #2]
 8009994:	70c1      	strb	r1, [r0, #3]
 8009996:	1d03      	adds	r3, r0, #4
 8009998:	e7f1      	b.n	800997e <__exponent+0x58>
	...

0800999c <_printf_float>:
 800999c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a0:	b08d      	sub	sp, #52	@ 0x34
 80099a2:	460c      	mov	r4, r1
 80099a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80099a8:	4616      	mov	r6, r2
 80099aa:	461f      	mov	r7, r3
 80099ac:	4605      	mov	r5, r0
 80099ae:	f000 fefb 	bl	800a7a8 <_localeconv_r>
 80099b2:	6803      	ldr	r3, [r0, #0]
 80099b4:	9304      	str	r3, [sp, #16]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7f6 fc5a 	bl	8000270 <strlen>
 80099bc:	2300      	movs	r3, #0
 80099be:	930a      	str	r3, [sp, #40]	@ 0x28
 80099c0:	f8d8 3000 	ldr.w	r3, [r8]
 80099c4:	9005      	str	r0, [sp, #20]
 80099c6:	3307      	adds	r3, #7
 80099c8:	f023 0307 	bic.w	r3, r3, #7
 80099cc:	f103 0208 	add.w	r2, r3, #8
 80099d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80099d4:	f8d4 b000 	ldr.w	fp, [r4]
 80099d8:	f8c8 2000 	str.w	r2, [r8]
 80099dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80099e4:	9307      	str	r3, [sp, #28]
 80099e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80099ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80099ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099f2:	4b9c      	ldr	r3, [pc, #624]	@ (8009c64 <_printf_float+0x2c8>)
 80099f4:	f04f 32ff 	mov.w	r2, #4294967295
 80099f8:	f7f7 f898 	bl	8000b2c <__aeabi_dcmpun>
 80099fc:	bb70      	cbnz	r0, 8009a5c <_printf_float+0xc0>
 80099fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a02:	4b98      	ldr	r3, [pc, #608]	@ (8009c64 <_printf_float+0x2c8>)
 8009a04:	f04f 32ff 	mov.w	r2, #4294967295
 8009a08:	f7f7 f872 	bl	8000af0 <__aeabi_dcmple>
 8009a0c:	bb30      	cbnz	r0, 8009a5c <_printf_float+0xc0>
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2300      	movs	r3, #0
 8009a12:	4640      	mov	r0, r8
 8009a14:	4649      	mov	r1, r9
 8009a16:	f7f7 f861 	bl	8000adc <__aeabi_dcmplt>
 8009a1a:	b110      	cbz	r0, 8009a22 <_printf_float+0x86>
 8009a1c:	232d      	movs	r3, #45	@ 0x2d
 8009a1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a22:	4a91      	ldr	r2, [pc, #580]	@ (8009c68 <_printf_float+0x2cc>)
 8009a24:	4b91      	ldr	r3, [pc, #580]	@ (8009c6c <_printf_float+0x2d0>)
 8009a26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009a2a:	bf8c      	ite	hi
 8009a2c:	4690      	movhi	r8, r2
 8009a2e:	4698      	movls	r8, r3
 8009a30:	2303      	movs	r3, #3
 8009a32:	6123      	str	r3, [r4, #16]
 8009a34:	f02b 0304 	bic.w	r3, fp, #4
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	f04f 0900 	mov.w	r9, #0
 8009a3e:	9700      	str	r7, [sp, #0]
 8009a40:	4633      	mov	r3, r6
 8009a42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009a44:	4621      	mov	r1, r4
 8009a46:	4628      	mov	r0, r5
 8009a48:	f000 f9d2 	bl	8009df0 <_printf_common>
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	f040 808d 	bne.w	8009b6c <_printf_float+0x1d0>
 8009a52:	f04f 30ff 	mov.w	r0, #4294967295
 8009a56:	b00d      	add	sp, #52	@ 0x34
 8009a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5c:	4642      	mov	r2, r8
 8009a5e:	464b      	mov	r3, r9
 8009a60:	4640      	mov	r0, r8
 8009a62:	4649      	mov	r1, r9
 8009a64:	f7f7 f862 	bl	8000b2c <__aeabi_dcmpun>
 8009a68:	b140      	cbz	r0, 8009a7c <_printf_float+0xe0>
 8009a6a:	464b      	mov	r3, r9
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	bfbc      	itt	lt
 8009a70:	232d      	movlt	r3, #45	@ 0x2d
 8009a72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a76:	4a7e      	ldr	r2, [pc, #504]	@ (8009c70 <_printf_float+0x2d4>)
 8009a78:	4b7e      	ldr	r3, [pc, #504]	@ (8009c74 <_printf_float+0x2d8>)
 8009a7a:	e7d4      	b.n	8009a26 <_printf_float+0x8a>
 8009a7c:	6863      	ldr	r3, [r4, #4]
 8009a7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009a82:	9206      	str	r2, [sp, #24]
 8009a84:	1c5a      	adds	r2, r3, #1
 8009a86:	d13b      	bne.n	8009b00 <_printf_float+0x164>
 8009a88:	2306      	movs	r3, #6
 8009a8a:	6063      	str	r3, [r4, #4]
 8009a8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009a90:	2300      	movs	r3, #0
 8009a92:	6022      	str	r2, [r4, #0]
 8009a94:	9303      	str	r3, [sp, #12]
 8009a96:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009a9c:	ab09      	add	r3, sp, #36	@ 0x24
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	6861      	ldr	r1, [r4, #4]
 8009aa2:	ec49 8b10 	vmov	d0, r8, r9
 8009aa6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f7ff fed6 	bl	800985c <__cvt>
 8009ab0:	9b06      	ldr	r3, [sp, #24]
 8009ab2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ab4:	2b47      	cmp	r3, #71	@ 0x47
 8009ab6:	4680      	mov	r8, r0
 8009ab8:	d129      	bne.n	8009b0e <_printf_float+0x172>
 8009aba:	1cc8      	adds	r0, r1, #3
 8009abc:	db02      	blt.n	8009ac4 <_printf_float+0x128>
 8009abe:	6863      	ldr	r3, [r4, #4]
 8009ac0:	4299      	cmp	r1, r3
 8009ac2:	dd41      	ble.n	8009b48 <_printf_float+0x1ac>
 8009ac4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ac8:	fa5f fa8a 	uxtb.w	sl, sl
 8009acc:	3901      	subs	r1, #1
 8009ace:	4652      	mov	r2, sl
 8009ad0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009ad4:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ad6:	f7ff ff26 	bl	8009926 <__exponent>
 8009ada:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009adc:	1813      	adds	r3, r2, r0
 8009ade:	2a01      	cmp	r2, #1
 8009ae0:	4681      	mov	r9, r0
 8009ae2:	6123      	str	r3, [r4, #16]
 8009ae4:	dc02      	bgt.n	8009aec <_printf_float+0x150>
 8009ae6:	6822      	ldr	r2, [r4, #0]
 8009ae8:	07d2      	lsls	r2, r2, #31
 8009aea:	d501      	bpl.n	8009af0 <_printf_float+0x154>
 8009aec:	3301      	adds	r3, #1
 8009aee:	6123      	str	r3, [r4, #16]
 8009af0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d0a2      	beq.n	8009a3e <_printf_float+0xa2>
 8009af8:	232d      	movs	r3, #45	@ 0x2d
 8009afa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009afe:	e79e      	b.n	8009a3e <_printf_float+0xa2>
 8009b00:	9a06      	ldr	r2, [sp, #24]
 8009b02:	2a47      	cmp	r2, #71	@ 0x47
 8009b04:	d1c2      	bne.n	8009a8c <_printf_float+0xf0>
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1c0      	bne.n	8009a8c <_printf_float+0xf0>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e7bd      	b.n	8009a8a <_printf_float+0xee>
 8009b0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b12:	d9db      	bls.n	8009acc <_printf_float+0x130>
 8009b14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009b18:	d118      	bne.n	8009b4c <_printf_float+0x1b0>
 8009b1a:	2900      	cmp	r1, #0
 8009b1c:	6863      	ldr	r3, [r4, #4]
 8009b1e:	dd0b      	ble.n	8009b38 <_printf_float+0x19c>
 8009b20:	6121      	str	r1, [r4, #16]
 8009b22:	b913      	cbnz	r3, 8009b2a <_printf_float+0x18e>
 8009b24:	6822      	ldr	r2, [r4, #0]
 8009b26:	07d0      	lsls	r0, r2, #31
 8009b28:	d502      	bpl.n	8009b30 <_printf_float+0x194>
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	440b      	add	r3, r1
 8009b2e:	6123      	str	r3, [r4, #16]
 8009b30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009b32:	f04f 0900 	mov.w	r9, #0
 8009b36:	e7db      	b.n	8009af0 <_printf_float+0x154>
 8009b38:	b913      	cbnz	r3, 8009b40 <_printf_float+0x1a4>
 8009b3a:	6822      	ldr	r2, [r4, #0]
 8009b3c:	07d2      	lsls	r2, r2, #31
 8009b3e:	d501      	bpl.n	8009b44 <_printf_float+0x1a8>
 8009b40:	3302      	adds	r3, #2
 8009b42:	e7f4      	b.n	8009b2e <_printf_float+0x192>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e7f2      	b.n	8009b2e <_printf_float+0x192>
 8009b48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b4e:	4299      	cmp	r1, r3
 8009b50:	db05      	blt.n	8009b5e <_printf_float+0x1c2>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	6121      	str	r1, [r4, #16]
 8009b56:	07d8      	lsls	r0, r3, #31
 8009b58:	d5ea      	bpl.n	8009b30 <_printf_float+0x194>
 8009b5a:	1c4b      	adds	r3, r1, #1
 8009b5c:	e7e7      	b.n	8009b2e <_printf_float+0x192>
 8009b5e:	2900      	cmp	r1, #0
 8009b60:	bfd4      	ite	le
 8009b62:	f1c1 0202 	rsble	r2, r1, #2
 8009b66:	2201      	movgt	r2, #1
 8009b68:	4413      	add	r3, r2
 8009b6a:	e7e0      	b.n	8009b2e <_printf_float+0x192>
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	055a      	lsls	r2, r3, #21
 8009b70:	d407      	bmi.n	8009b82 <_printf_float+0x1e6>
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	4642      	mov	r2, r8
 8009b76:	4631      	mov	r1, r6
 8009b78:	4628      	mov	r0, r5
 8009b7a:	47b8      	blx	r7
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d12b      	bne.n	8009bd8 <_printf_float+0x23c>
 8009b80:	e767      	b.n	8009a52 <_printf_float+0xb6>
 8009b82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b86:	f240 80dd 	bls.w	8009d44 <_printf_float+0x3a8>
 8009b8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2300      	movs	r3, #0
 8009b92:	f7f6 ff99 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b96:	2800      	cmp	r0, #0
 8009b98:	d033      	beq.n	8009c02 <_printf_float+0x266>
 8009b9a:	4a37      	ldr	r2, [pc, #220]	@ (8009c78 <_printf_float+0x2dc>)
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	47b8      	blx	r7
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	f43f af54 	beq.w	8009a52 <_printf_float+0xb6>
 8009baa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009bae:	4543      	cmp	r3, r8
 8009bb0:	db02      	blt.n	8009bb8 <_printf_float+0x21c>
 8009bb2:	6823      	ldr	r3, [r4, #0]
 8009bb4:	07d8      	lsls	r0, r3, #31
 8009bb6:	d50f      	bpl.n	8009bd8 <_printf_float+0x23c>
 8009bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	47b8      	blx	r7
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	f43f af45 	beq.w	8009a52 <_printf_float+0xb6>
 8009bc8:	f04f 0900 	mov.w	r9, #0
 8009bcc:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bd0:	f104 0a1a 	add.w	sl, r4, #26
 8009bd4:	45c8      	cmp	r8, r9
 8009bd6:	dc09      	bgt.n	8009bec <_printf_float+0x250>
 8009bd8:	6823      	ldr	r3, [r4, #0]
 8009bda:	079b      	lsls	r3, r3, #30
 8009bdc:	f100 8103 	bmi.w	8009de6 <_printf_float+0x44a>
 8009be0:	68e0      	ldr	r0, [r4, #12]
 8009be2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009be4:	4298      	cmp	r0, r3
 8009be6:	bfb8      	it	lt
 8009be8:	4618      	movlt	r0, r3
 8009bea:	e734      	b.n	8009a56 <_printf_float+0xba>
 8009bec:	2301      	movs	r3, #1
 8009bee:	4652      	mov	r2, sl
 8009bf0:	4631      	mov	r1, r6
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	47b8      	blx	r7
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	f43f af2b 	beq.w	8009a52 <_printf_float+0xb6>
 8009bfc:	f109 0901 	add.w	r9, r9, #1
 8009c00:	e7e8      	b.n	8009bd4 <_printf_float+0x238>
 8009c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	dc39      	bgt.n	8009c7c <_printf_float+0x2e0>
 8009c08:	4a1b      	ldr	r2, [pc, #108]	@ (8009c78 <_printf_float+0x2dc>)
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4628      	mov	r0, r5
 8009c10:	47b8      	blx	r7
 8009c12:	3001      	adds	r0, #1
 8009c14:	f43f af1d 	beq.w	8009a52 <_printf_float+0xb6>
 8009c18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009c1c:	ea59 0303 	orrs.w	r3, r9, r3
 8009c20:	d102      	bne.n	8009c28 <_printf_float+0x28c>
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	07d9      	lsls	r1, r3, #31
 8009c26:	d5d7      	bpl.n	8009bd8 <_printf_float+0x23c>
 8009c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4628      	mov	r0, r5
 8009c30:	47b8      	blx	r7
 8009c32:	3001      	adds	r0, #1
 8009c34:	f43f af0d 	beq.w	8009a52 <_printf_float+0xb6>
 8009c38:	f04f 0a00 	mov.w	sl, #0
 8009c3c:	f104 0b1a 	add.w	fp, r4, #26
 8009c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c42:	425b      	negs	r3, r3
 8009c44:	4553      	cmp	r3, sl
 8009c46:	dc01      	bgt.n	8009c4c <_printf_float+0x2b0>
 8009c48:	464b      	mov	r3, r9
 8009c4a:	e793      	b.n	8009b74 <_printf_float+0x1d8>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	465a      	mov	r2, fp
 8009c50:	4631      	mov	r1, r6
 8009c52:	4628      	mov	r0, r5
 8009c54:	47b8      	blx	r7
 8009c56:	3001      	adds	r0, #1
 8009c58:	f43f aefb 	beq.w	8009a52 <_printf_float+0xb6>
 8009c5c:	f10a 0a01 	add.w	sl, sl, #1
 8009c60:	e7ee      	b.n	8009c40 <_printf_float+0x2a4>
 8009c62:	bf00      	nop
 8009c64:	7fefffff 	.word	0x7fefffff
 8009c68:	0800d3f2 	.word	0x0800d3f2
 8009c6c:	0800d3ee 	.word	0x0800d3ee
 8009c70:	0800d3fa 	.word	0x0800d3fa
 8009c74:	0800d3f6 	.word	0x0800d3f6
 8009c78:	0800d3fe 	.word	0x0800d3fe
 8009c7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c82:	4553      	cmp	r3, sl
 8009c84:	bfa8      	it	ge
 8009c86:	4653      	movge	r3, sl
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	4699      	mov	r9, r3
 8009c8c:	dc36      	bgt.n	8009cfc <_printf_float+0x360>
 8009c8e:	f04f 0b00 	mov.w	fp, #0
 8009c92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c96:	f104 021a 	add.w	r2, r4, #26
 8009c9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c9c:	9306      	str	r3, [sp, #24]
 8009c9e:	eba3 0309 	sub.w	r3, r3, r9
 8009ca2:	455b      	cmp	r3, fp
 8009ca4:	dc31      	bgt.n	8009d0a <_printf_float+0x36e>
 8009ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca8:	459a      	cmp	sl, r3
 8009caa:	dc3a      	bgt.n	8009d22 <_printf_float+0x386>
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	07da      	lsls	r2, r3, #31
 8009cb0:	d437      	bmi.n	8009d22 <_printf_float+0x386>
 8009cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb4:	ebaa 0903 	sub.w	r9, sl, r3
 8009cb8:	9b06      	ldr	r3, [sp, #24]
 8009cba:	ebaa 0303 	sub.w	r3, sl, r3
 8009cbe:	4599      	cmp	r9, r3
 8009cc0:	bfa8      	it	ge
 8009cc2:	4699      	movge	r9, r3
 8009cc4:	f1b9 0f00 	cmp.w	r9, #0
 8009cc8:	dc33      	bgt.n	8009d32 <_printf_float+0x396>
 8009cca:	f04f 0800 	mov.w	r8, #0
 8009cce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cd2:	f104 0b1a 	add.w	fp, r4, #26
 8009cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd8:	ebaa 0303 	sub.w	r3, sl, r3
 8009cdc:	eba3 0309 	sub.w	r3, r3, r9
 8009ce0:	4543      	cmp	r3, r8
 8009ce2:	f77f af79 	ble.w	8009bd8 <_printf_float+0x23c>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	465a      	mov	r2, fp
 8009cea:	4631      	mov	r1, r6
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b8      	blx	r7
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	f43f aeae 	beq.w	8009a52 <_printf_float+0xb6>
 8009cf6:	f108 0801 	add.w	r8, r8, #1
 8009cfa:	e7ec      	b.n	8009cd6 <_printf_float+0x33a>
 8009cfc:	4642      	mov	r2, r8
 8009cfe:	4631      	mov	r1, r6
 8009d00:	4628      	mov	r0, r5
 8009d02:	47b8      	blx	r7
 8009d04:	3001      	adds	r0, #1
 8009d06:	d1c2      	bne.n	8009c8e <_printf_float+0x2f2>
 8009d08:	e6a3      	b.n	8009a52 <_printf_float+0xb6>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	4628      	mov	r0, r5
 8009d10:	9206      	str	r2, [sp, #24]
 8009d12:	47b8      	blx	r7
 8009d14:	3001      	adds	r0, #1
 8009d16:	f43f ae9c 	beq.w	8009a52 <_printf_float+0xb6>
 8009d1a:	9a06      	ldr	r2, [sp, #24]
 8009d1c:	f10b 0b01 	add.w	fp, fp, #1
 8009d20:	e7bb      	b.n	8009c9a <_printf_float+0x2fe>
 8009d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d26:	4631      	mov	r1, r6
 8009d28:	4628      	mov	r0, r5
 8009d2a:	47b8      	blx	r7
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d1c0      	bne.n	8009cb2 <_printf_float+0x316>
 8009d30:	e68f      	b.n	8009a52 <_printf_float+0xb6>
 8009d32:	9a06      	ldr	r2, [sp, #24]
 8009d34:	464b      	mov	r3, r9
 8009d36:	4442      	add	r2, r8
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	47b8      	blx	r7
 8009d3e:	3001      	adds	r0, #1
 8009d40:	d1c3      	bne.n	8009cca <_printf_float+0x32e>
 8009d42:	e686      	b.n	8009a52 <_printf_float+0xb6>
 8009d44:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d48:	f1ba 0f01 	cmp.w	sl, #1
 8009d4c:	dc01      	bgt.n	8009d52 <_printf_float+0x3b6>
 8009d4e:	07db      	lsls	r3, r3, #31
 8009d50:	d536      	bpl.n	8009dc0 <_printf_float+0x424>
 8009d52:	2301      	movs	r3, #1
 8009d54:	4642      	mov	r2, r8
 8009d56:	4631      	mov	r1, r6
 8009d58:	4628      	mov	r0, r5
 8009d5a:	47b8      	blx	r7
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	f43f ae78 	beq.w	8009a52 <_printf_float+0xb6>
 8009d62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d66:	4631      	mov	r1, r6
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b8      	blx	r7
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	f43f ae70 	beq.w	8009a52 <_printf_float+0xb6>
 8009d72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d76:	2200      	movs	r2, #0
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d7e:	f7f6 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d82:	b9c0      	cbnz	r0, 8009db6 <_printf_float+0x41a>
 8009d84:	4653      	mov	r3, sl
 8009d86:	f108 0201 	add.w	r2, r8, #1
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	47b8      	blx	r7
 8009d90:	3001      	adds	r0, #1
 8009d92:	d10c      	bne.n	8009dae <_printf_float+0x412>
 8009d94:	e65d      	b.n	8009a52 <_printf_float+0xb6>
 8009d96:	2301      	movs	r3, #1
 8009d98:	465a      	mov	r2, fp
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	47b8      	blx	r7
 8009da0:	3001      	adds	r0, #1
 8009da2:	f43f ae56 	beq.w	8009a52 <_printf_float+0xb6>
 8009da6:	f108 0801 	add.w	r8, r8, #1
 8009daa:	45d0      	cmp	r8, sl
 8009dac:	dbf3      	blt.n	8009d96 <_printf_float+0x3fa>
 8009dae:	464b      	mov	r3, r9
 8009db0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009db4:	e6df      	b.n	8009b76 <_printf_float+0x1da>
 8009db6:	f04f 0800 	mov.w	r8, #0
 8009dba:	f104 0b1a 	add.w	fp, r4, #26
 8009dbe:	e7f4      	b.n	8009daa <_printf_float+0x40e>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	4642      	mov	r2, r8
 8009dc4:	e7e1      	b.n	8009d8a <_printf_float+0x3ee>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	464a      	mov	r2, r9
 8009dca:	4631      	mov	r1, r6
 8009dcc:	4628      	mov	r0, r5
 8009dce:	47b8      	blx	r7
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	f43f ae3e 	beq.w	8009a52 <_printf_float+0xb6>
 8009dd6:	f108 0801 	add.w	r8, r8, #1
 8009dda:	68e3      	ldr	r3, [r4, #12]
 8009ddc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009dde:	1a5b      	subs	r3, r3, r1
 8009de0:	4543      	cmp	r3, r8
 8009de2:	dcf0      	bgt.n	8009dc6 <_printf_float+0x42a>
 8009de4:	e6fc      	b.n	8009be0 <_printf_float+0x244>
 8009de6:	f04f 0800 	mov.w	r8, #0
 8009dea:	f104 0919 	add.w	r9, r4, #25
 8009dee:	e7f4      	b.n	8009dda <_printf_float+0x43e>

08009df0 <_printf_common>:
 8009df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df4:	4616      	mov	r6, r2
 8009df6:	4698      	mov	r8, r3
 8009df8:	688a      	ldr	r2, [r1, #8]
 8009dfa:	690b      	ldr	r3, [r1, #16]
 8009dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e00:	4293      	cmp	r3, r2
 8009e02:	bfb8      	it	lt
 8009e04:	4613      	movlt	r3, r2
 8009e06:	6033      	str	r3, [r6, #0]
 8009e08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e0c:	4607      	mov	r7, r0
 8009e0e:	460c      	mov	r4, r1
 8009e10:	b10a      	cbz	r2, 8009e16 <_printf_common+0x26>
 8009e12:	3301      	adds	r3, #1
 8009e14:	6033      	str	r3, [r6, #0]
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	0699      	lsls	r1, r3, #26
 8009e1a:	bf42      	ittt	mi
 8009e1c:	6833      	ldrmi	r3, [r6, #0]
 8009e1e:	3302      	addmi	r3, #2
 8009e20:	6033      	strmi	r3, [r6, #0]
 8009e22:	6825      	ldr	r5, [r4, #0]
 8009e24:	f015 0506 	ands.w	r5, r5, #6
 8009e28:	d106      	bne.n	8009e38 <_printf_common+0x48>
 8009e2a:	f104 0a19 	add.w	sl, r4, #25
 8009e2e:	68e3      	ldr	r3, [r4, #12]
 8009e30:	6832      	ldr	r2, [r6, #0]
 8009e32:	1a9b      	subs	r3, r3, r2
 8009e34:	42ab      	cmp	r3, r5
 8009e36:	dc26      	bgt.n	8009e86 <_printf_common+0x96>
 8009e38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e3c:	6822      	ldr	r2, [r4, #0]
 8009e3e:	3b00      	subs	r3, #0
 8009e40:	bf18      	it	ne
 8009e42:	2301      	movne	r3, #1
 8009e44:	0692      	lsls	r2, r2, #26
 8009e46:	d42b      	bmi.n	8009ea0 <_printf_common+0xb0>
 8009e48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e4c:	4641      	mov	r1, r8
 8009e4e:	4638      	mov	r0, r7
 8009e50:	47c8      	blx	r9
 8009e52:	3001      	adds	r0, #1
 8009e54:	d01e      	beq.n	8009e94 <_printf_common+0xa4>
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	6922      	ldr	r2, [r4, #16]
 8009e5a:	f003 0306 	and.w	r3, r3, #6
 8009e5e:	2b04      	cmp	r3, #4
 8009e60:	bf02      	ittt	eq
 8009e62:	68e5      	ldreq	r5, [r4, #12]
 8009e64:	6833      	ldreq	r3, [r6, #0]
 8009e66:	1aed      	subeq	r5, r5, r3
 8009e68:	68a3      	ldr	r3, [r4, #8]
 8009e6a:	bf0c      	ite	eq
 8009e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e70:	2500      	movne	r5, #0
 8009e72:	4293      	cmp	r3, r2
 8009e74:	bfc4      	itt	gt
 8009e76:	1a9b      	subgt	r3, r3, r2
 8009e78:	18ed      	addgt	r5, r5, r3
 8009e7a:	2600      	movs	r6, #0
 8009e7c:	341a      	adds	r4, #26
 8009e7e:	42b5      	cmp	r5, r6
 8009e80:	d11a      	bne.n	8009eb8 <_printf_common+0xc8>
 8009e82:	2000      	movs	r0, #0
 8009e84:	e008      	b.n	8009e98 <_printf_common+0xa8>
 8009e86:	2301      	movs	r3, #1
 8009e88:	4652      	mov	r2, sl
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	4638      	mov	r0, r7
 8009e8e:	47c8      	blx	r9
 8009e90:	3001      	adds	r0, #1
 8009e92:	d103      	bne.n	8009e9c <_printf_common+0xac>
 8009e94:	f04f 30ff 	mov.w	r0, #4294967295
 8009e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9c:	3501      	adds	r5, #1
 8009e9e:	e7c6      	b.n	8009e2e <_printf_common+0x3e>
 8009ea0:	18e1      	adds	r1, r4, r3
 8009ea2:	1c5a      	adds	r2, r3, #1
 8009ea4:	2030      	movs	r0, #48	@ 0x30
 8009ea6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009eaa:	4422      	add	r2, r4
 8009eac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009eb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009eb4:	3302      	adds	r3, #2
 8009eb6:	e7c7      	b.n	8009e48 <_printf_common+0x58>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	4622      	mov	r2, r4
 8009ebc:	4641      	mov	r1, r8
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	47c8      	blx	r9
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	d0e6      	beq.n	8009e94 <_printf_common+0xa4>
 8009ec6:	3601      	adds	r6, #1
 8009ec8:	e7d9      	b.n	8009e7e <_printf_common+0x8e>
	...

08009ecc <_printf_i>:
 8009ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed0:	7e0f      	ldrb	r7, [r1, #24]
 8009ed2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ed4:	2f78      	cmp	r7, #120	@ 0x78
 8009ed6:	4691      	mov	r9, r2
 8009ed8:	4680      	mov	r8, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	469a      	mov	sl, r3
 8009ede:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ee2:	d807      	bhi.n	8009ef4 <_printf_i+0x28>
 8009ee4:	2f62      	cmp	r7, #98	@ 0x62
 8009ee6:	d80a      	bhi.n	8009efe <_printf_i+0x32>
 8009ee8:	2f00      	cmp	r7, #0
 8009eea:	f000 80d1 	beq.w	800a090 <_printf_i+0x1c4>
 8009eee:	2f58      	cmp	r7, #88	@ 0x58
 8009ef0:	f000 80b8 	beq.w	800a064 <_printf_i+0x198>
 8009ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ef8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009efc:	e03a      	b.n	8009f74 <_printf_i+0xa8>
 8009efe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f02:	2b15      	cmp	r3, #21
 8009f04:	d8f6      	bhi.n	8009ef4 <_printf_i+0x28>
 8009f06:	a101      	add	r1, pc, #4	@ (adr r1, 8009f0c <_printf_i+0x40>)
 8009f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f0c:	08009f65 	.word	0x08009f65
 8009f10:	08009f79 	.word	0x08009f79
 8009f14:	08009ef5 	.word	0x08009ef5
 8009f18:	08009ef5 	.word	0x08009ef5
 8009f1c:	08009ef5 	.word	0x08009ef5
 8009f20:	08009ef5 	.word	0x08009ef5
 8009f24:	08009f79 	.word	0x08009f79
 8009f28:	08009ef5 	.word	0x08009ef5
 8009f2c:	08009ef5 	.word	0x08009ef5
 8009f30:	08009ef5 	.word	0x08009ef5
 8009f34:	08009ef5 	.word	0x08009ef5
 8009f38:	0800a077 	.word	0x0800a077
 8009f3c:	08009fa3 	.word	0x08009fa3
 8009f40:	0800a031 	.word	0x0800a031
 8009f44:	08009ef5 	.word	0x08009ef5
 8009f48:	08009ef5 	.word	0x08009ef5
 8009f4c:	0800a099 	.word	0x0800a099
 8009f50:	08009ef5 	.word	0x08009ef5
 8009f54:	08009fa3 	.word	0x08009fa3
 8009f58:	08009ef5 	.word	0x08009ef5
 8009f5c:	08009ef5 	.word	0x08009ef5
 8009f60:	0800a039 	.word	0x0800a039
 8009f64:	6833      	ldr	r3, [r6, #0]
 8009f66:	1d1a      	adds	r2, r3, #4
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6032      	str	r2, [r6, #0]
 8009f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f74:	2301      	movs	r3, #1
 8009f76:	e09c      	b.n	800a0b2 <_printf_i+0x1e6>
 8009f78:	6833      	ldr	r3, [r6, #0]
 8009f7a:	6820      	ldr	r0, [r4, #0]
 8009f7c:	1d19      	adds	r1, r3, #4
 8009f7e:	6031      	str	r1, [r6, #0]
 8009f80:	0606      	lsls	r6, r0, #24
 8009f82:	d501      	bpl.n	8009f88 <_printf_i+0xbc>
 8009f84:	681d      	ldr	r5, [r3, #0]
 8009f86:	e003      	b.n	8009f90 <_printf_i+0xc4>
 8009f88:	0645      	lsls	r5, r0, #25
 8009f8a:	d5fb      	bpl.n	8009f84 <_printf_i+0xb8>
 8009f8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f90:	2d00      	cmp	r5, #0
 8009f92:	da03      	bge.n	8009f9c <_printf_i+0xd0>
 8009f94:	232d      	movs	r3, #45	@ 0x2d
 8009f96:	426d      	negs	r5, r5
 8009f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f9c:	4858      	ldr	r0, [pc, #352]	@ (800a100 <_printf_i+0x234>)
 8009f9e:	230a      	movs	r3, #10
 8009fa0:	e011      	b.n	8009fc6 <_printf_i+0xfa>
 8009fa2:	6821      	ldr	r1, [r4, #0]
 8009fa4:	6833      	ldr	r3, [r6, #0]
 8009fa6:	0608      	lsls	r0, r1, #24
 8009fa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009fac:	d402      	bmi.n	8009fb4 <_printf_i+0xe8>
 8009fae:	0649      	lsls	r1, r1, #25
 8009fb0:	bf48      	it	mi
 8009fb2:	b2ad      	uxthmi	r5, r5
 8009fb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009fb6:	4852      	ldr	r0, [pc, #328]	@ (800a100 <_printf_i+0x234>)
 8009fb8:	6033      	str	r3, [r6, #0]
 8009fba:	bf14      	ite	ne
 8009fbc:	230a      	movne	r3, #10
 8009fbe:	2308      	moveq	r3, #8
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009fc6:	6866      	ldr	r6, [r4, #4]
 8009fc8:	60a6      	str	r6, [r4, #8]
 8009fca:	2e00      	cmp	r6, #0
 8009fcc:	db05      	blt.n	8009fda <_printf_i+0x10e>
 8009fce:	6821      	ldr	r1, [r4, #0]
 8009fd0:	432e      	orrs	r6, r5
 8009fd2:	f021 0104 	bic.w	r1, r1, #4
 8009fd6:	6021      	str	r1, [r4, #0]
 8009fd8:	d04b      	beq.n	800a072 <_printf_i+0x1a6>
 8009fda:	4616      	mov	r6, r2
 8009fdc:	fbb5 f1f3 	udiv	r1, r5, r3
 8009fe0:	fb03 5711 	mls	r7, r3, r1, r5
 8009fe4:	5dc7      	ldrb	r7, [r0, r7]
 8009fe6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fea:	462f      	mov	r7, r5
 8009fec:	42bb      	cmp	r3, r7
 8009fee:	460d      	mov	r5, r1
 8009ff0:	d9f4      	bls.n	8009fdc <_printf_i+0x110>
 8009ff2:	2b08      	cmp	r3, #8
 8009ff4:	d10b      	bne.n	800a00e <_printf_i+0x142>
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	07df      	lsls	r7, r3, #31
 8009ffa:	d508      	bpl.n	800a00e <_printf_i+0x142>
 8009ffc:	6923      	ldr	r3, [r4, #16]
 8009ffe:	6861      	ldr	r1, [r4, #4]
 800a000:	4299      	cmp	r1, r3
 800a002:	bfde      	ittt	le
 800a004:	2330      	movle	r3, #48	@ 0x30
 800a006:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a00a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a00e:	1b92      	subs	r2, r2, r6
 800a010:	6122      	str	r2, [r4, #16]
 800a012:	f8cd a000 	str.w	sl, [sp]
 800a016:	464b      	mov	r3, r9
 800a018:	aa03      	add	r2, sp, #12
 800a01a:	4621      	mov	r1, r4
 800a01c:	4640      	mov	r0, r8
 800a01e:	f7ff fee7 	bl	8009df0 <_printf_common>
 800a022:	3001      	adds	r0, #1
 800a024:	d14a      	bne.n	800a0bc <_printf_i+0x1f0>
 800a026:	f04f 30ff 	mov.w	r0, #4294967295
 800a02a:	b004      	add	sp, #16
 800a02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	f043 0320 	orr.w	r3, r3, #32
 800a036:	6023      	str	r3, [r4, #0]
 800a038:	4832      	ldr	r0, [pc, #200]	@ (800a104 <_printf_i+0x238>)
 800a03a:	2778      	movs	r7, #120	@ 0x78
 800a03c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a040:	6823      	ldr	r3, [r4, #0]
 800a042:	6831      	ldr	r1, [r6, #0]
 800a044:	061f      	lsls	r7, r3, #24
 800a046:	f851 5b04 	ldr.w	r5, [r1], #4
 800a04a:	d402      	bmi.n	800a052 <_printf_i+0x186>
 800a04c:	065f      	lsls	r7, r3, #25
 800a04e:	bf48      	it	mi
 800a050:	b2ad      	uxthmi	r5, r5
 800a052:	6031      	str	r1, [r6, #0]
 800a054:	07d9      	lsls	r1, r3, #31
 800a056:	bf44      	itt	mi
 800a058:	f043 0320 	orrmi.w	r3, r3, #32
 800a05c:	6023      	strmi	r3, [r4, #0]
 800a05e:	b11d      	cbz	r5, 800a068 <_printf_i+0x19c>
 800a060:	2310      	movs	r3, #16
 800a062:	e7ad      	b.n	8009fc0 <_printf_i+0xf4>
 800a064:	4826      	ldr	r0, [pc, #152]	@ (800a100 <_printf_i+0x234>)
 800a066:	e7e9      	b.n	800a03c <_printf_i+0x170>
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	f023 0320 	bic.w	r3, r3, #32
 800a06e:	6023      	str	r3, [r4, #0]
 800a070:	e7f6      	b.n	800a060 <_printf_i+0x194>
 800a072:	4616      	mov	r6, r2
 800a074:	e7bd      	b.n	8009ff2 <_printf_i+0x126>
 800a076:	6833      	ldr	r3, [r6, #0]
 800a078:	6825      	ldr	r5, [r4, #0]
 800a07a:	6961      	ldr	r1, [r4, #20]
 800a07c:	1d18      	adds	r0, r3, #4
 800a07e:	6030      	str	r0, [r6, #0]
 800a080:	062e      	lsls	r6, r5, #24
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	d501      	bpl.n	800a08a <_printf_i+0x1be>
 800a086:	6019      	str	r1, [r3, #0]
 800a088:	e002      	b.n	800a090 <_printf_i+0x1c4>
 800a08a:	0668      	lsls	r0, r5, #25
 800a08c:	d5fb      	bpl.n	800a086 <_printf_i+0x1ba>
 800a08e:	8019      	strh	r1, [r3, #0]
 800a090:	2300      	movs	r3, #0
 800a092:	6123      	str	r3, [r4, #16]
 800a094:	4616      	mov	r6, r2
 800a096:	e7bc      	b.n	800a012 <_printf_i+0x146>
 800a098:	6833      	ldr	r3, [r6, #0]
 800a09a:	1d1a      	adds	r2, r3, #4
 800a09c:	6032      	str	r2, [r6, #0]
 800a09e:	681e      	ldr	r6, [r3, #0]
 800a0a0:	6862      	ldr	r2, [r4, #4]
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	f7f6 f893 	bl	80001d0 <memchr>
 800a0aa:	b108      	cbz	r0, 800a0b0 <_printf_i+0x1e4>
 800a0ac:	1b80      	subs	r0, r0, r6
 800a0ae:	6060      	str	r0, [r4, #4]
 800a0b0:	6863      	ldr	r3, [r4, #4]
 800a0b2:	6123      	str	r3, [r4, #16]
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0ba:	e7aa      	b.n	800a012 <_printf_i+0x146>
 800a0bc:	6923      	ldr	r3, [r4, #16]
 800a0be:	4632      	mov	r2, r6
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	4640      	mov	r0, r8
 800a0c4:	47d0      	blx	sl
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	d0ad      	beq.n	800a026 <_printf_i+0x15a>
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	079b      	lsls	r3, r3, #30
 800a0ce:	d413      	bmi.n	800a0f8 <_printf_i+0x22c>
 800a0d0:	68e0      	ldr	r0, [r4, #12]
 800a0d2:	9b03      	ldr	r3, [sp, #12]
 800a0d4:	4298      	cmp	r0, r3
 800a0d6:	bfb8      	it	lt
 800a0d8:	4618      	movlt	r0, r3
 800a0da:	e7a6      	b.n	800a02a <_printf_i+0x15e>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	4632      	mov	r2, r6
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	47d0      	blx	sl
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	d09d      	beq.n	800a026 <_printf_i+0x15a>
 800a0ea:	3501      	adds	r5, #1
 800a0ec:	68e3      	ldr	r3, [r4, #12]
 800a0ee:	9903      	ldr	r1, [sp, #12]
 800a0f0:	1a5b      	subs	r3, r3, r1
 800a0f2:	42ab      	cmp	r3, r5
 800a0f4:	dcf2      	bgt.n	800a0dc <_printf_i+0x210>
 800a0f6:	e7eb      	b.n	800a0d0 <_printf_i+0x204>
 800a0f8:	2500      	movs	r5, #0
 800a0fa:	f104 0619 	add.w	r6, r4, #25
 800a0fe:	e7f5      	b.n	800a0ec <_printf_i+0x220>
 800a100:	0800d400 	.word	0x0800d400
 800a104:	0800d411 	.word	0x0800d411

0800a108 <_scanf_float>:
 800a108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10c:	b087      	sub	sp, #28
 800a10e:	4691      	mov	r9, r2
 800a110:	9303      	str	r3, [sp, #12]
 800a112:	688b      	ldr	r3, [r1, #8]
 800a114:	1e5a      	subs	r2, r3, #1
 800a116:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a11a:	bf81      	itttt	hi
 800a11c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a120:	eb03 0b05 	addhi.w	fp, r3, r5
 800a124:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a128:	608b      	strhi	r3, [r1, #8]
 800a12a:	680b      	ldr	r3, [r1, #0]
 800a12c:	460a      	mov	r2, r1
 800a12e:	f04f 0500 	mov.w	r5, #0
 800a132:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a136:	f842 3b1c 	str.w	r3, [r2], #28
 800a13a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a13e:	4680      	mov	r8, r0
 800a140:	460c      	mov	r4, r1
 800a142:	bf98      	it	ls
 800a144:	f04f 0b00 	movls.w	fp, #0
 800a148:	9201      	str	r2, [sp, #4]
 800a14a:	4616      	mov	r6, r2
 800a14c:	46aa      	mov	sl, r5
 800a14e:	462f      	mov	r7, r5
 800a150:	9502      	str	r5, [sp, #8]
 800a152:	68a2      	ldr	r2, [r4, #8]
 800a154:	b15a      	cbz	r2, 800a16e <_scanf_float+0x66>
 800a156:	f8d9 3000 	ldr.w	r3, [r9]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b4e      	cmp	r3, #78	@ 0x4e
 800a15e:	d863      	bhi.n	800a228 <_scanf_float+0x120>
 800a160:	2b40      	cmp	r3, #64	@ 0x40
 800a162:	d83b      	bhi.n	800a1dc <_scanf_float+0xd4>
 800a164:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a168:	b2c8      	uxtb	r0, r1
 800a16a:	280e      	cmp	r0, #14
 800a16c:	d939      	bls.n	800a1e2 <_scanf_float+0xda>
 800a16e:	b11f      	cbz	r7, 800a178 <_scanf_float+0x70>
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a176:	6023      	str	r3, [r4, #0]
 800a178:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a17c:	f1ba 0f01 	cmp.w	sl, #1
 800a180:	f200 8114 	bhi.w	800a3ac <_scanf_float+0x2a4>
 800a184:	9b01      	ldr	r3, [sp, #4]
 800a186:	429e      	cmp	r6, r3
 800a188:	f200 8105 	bhi.w	800a396 <_scanf_float+0x28e>
 800a18c:	2001      	movs	r0, #1
 800a18e:	b007      	add	sp, #28
 800a190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a194:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a198:	2a0d      	cmp	r2, #13
 800a19a:	d8e8      	bhi.n	800a16e <_scanf_float+0x66>
 800a19c:	a101      	add	r1, pc, #4	@ (adr r1, 800a1a4 <_scanf_float+0x9c>)
 800a19e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a1a2:	bf00      	nop
 800a1a4:	0800a2ed 	.word	0x0800a2ed
 800a1a8:	0800a16f 	.word	0x0800a16f
 800a1ac:	0800a16f 	.word	0x0800a16f
 800a1b0:	0800a16f 	.word	0x0800a16f
 800a1b4:	0800a349 	.word	0x0800a349
 800a1b8:	0800a323 	.word	0x0800a323
 800a1bc:	0800a16f 	.word	0x0800a16f
 800a1c0:	0800a16f 	.word	0x0800a16f
 800a1c4:	0800a2fb 	.word	0x0800a2fb
 800a1c8:	0800a16f 	.word	0x0800a16f
 800a1cc:	0800a16f 	.word	0x0800a16f
 800a1d0:	0800a16f 	.word	0x0800a16f
 800a1d4:	0800a16f 	.word	0x0800a16f
 800a1d8:	0800a2b7 	.word	0x0800a2b7
 800a1dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a1e0:	e7da      	b.n	800a198 <_scanf_float+0x90>
 800a1e2:	290e      	cmp	r1, #14
 800a1e4:	d8c3      	bhi.n	800a16e <_scanf_float+0x66>
 800a1e6:	a001      	add	r0, pc, #4	@ (adr r0, 800a1ec <_scanf_float+0xe4>)
 800a1e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a1ec:	0800a2a7 	.word	0x0800a2a7
 800a1f0:	0800a16f 	.word	0x0800a16f
 800a1f4:	0800a2a7 	.word	0x0800a2a7
 800a1f8:	0800a337 	.word	0x0800a337
 800a1fc:	0800a16f 	.word	0x0800a16f
 800a200:	0800a249 	.word	0x0800a249
 800a204:	0800a28d 	.word	0x0800a28d
 800a208:	0800a28d 	.word	0x0800a28d
 800a20c:	0800a28d 	.word	0x0800a28d
 800a210:	0800a28d 	.word	0x0800a28d
 800a214:	0800a28d 	.word	0x0800a28d
 800a218:	0800a28d 	.word	0x0800a28d
 800a21c:	0800a28d 	.word	0x0800a28d
 800a220:	0800a28d 	.word	0x0800a28d
 800a224:	0800a28d 	.word	0x0800a28d
 800a228:	2b6e      	cmp	r3, #110	@ 0x6e
 800a22a:	d809      	bhi.n	800a240 <_scanf_float+0x138>
 800a22c:	2b60      	cmp	r3, #96	@ 0x60
 800a22e:	d8b1      	bhi.n	800a194 <_scanf_float+0x8c>
 800a230:	2b54      	cmp	r3, #84	@ 0x54
 800a232:	d07b      	beq.n	800a32c <_scanf_float+0x224>
 800a234:	2b59      	cmp	r3, #89	@ 0x59
 800a236:	d19a      	bne.n	800a16e <_scanf_float+0x66>
 800a238:	2d07      	cmp	r5, #7
 800a23a:	d198      	bne.n	800a16e <_scanf_float+0x66>
 800a23c:	2508      	movs	r5, #8
 800a23e:	e02f      	b.n	800a2a0 <_scanf_float+0x198>
 800a240:	2b74      	cmp	r3, #116	@ 0x74
 800a242:	d073      	beq.n	800a32c <_scanf_float+0x224>
 800a244:	2b79      	cmp	r3, #121	@ 0x79
 800a246:	e7f6      	b.n	800a236 <_scanf_float+0x12e>
 800a248:	6821      	ldr	r1, [r4, #0]
 800a24a:	05c8      	lsls	r0, r1, #23
 800a24c:	d51e      	bpl.n	800a28c <_scanf_float+0x184>
 800a24e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a252:	6021      	str	r1, [r4, #0]
 800a254:	3701      	adds	r7, #1
 800a256:	f1bb 0f00 	cmp.w	fp, #0
 800a25a:	d003      	beq.n	800a264 <_scanf_float+0x15c>
 800a25c:	3201      	adds	r2, #1
 800a25e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a262:	60a2      	str	r2, [r4, #8]
 800a264:	68a3      	ldr	r3, [r4, #8]
 800a266:	3b01      	subs	r3, #1
 800a268:	60a3      	str	r3, [r4, #8]
 800a26a:	6923      	ldr	r3, [r4, #16]
 800a26c:	3301      	adds	r3, #1
 800a26e:	6123      	str	r3, [r4, #16]
 800a270:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a274:	3b01      	subs	r3, #1
 800a276:	2b00      	cmp	r3, #0
 800a278:	f8c9 3004 	str.w	r3, [r9, #4]
 800a27c:	f340 8082 	ble.w	800a384 <_scanf_float+0x27c>
 800a280:	f8d9 3000 	ldr.w	r3, [r9]
 800a284:	3301      	adds	r3, #1
 800a286:	f8c9 3000 	str.w	r3, [r9]
 800a28a:	e762      	b.n	800a152 <_scanf_float+0x4a>
 800a28c:	eb1a 0105 	adds.w	r1, sl, r5
 800a290:	f47f af6d 	bne.w	800a16e <_scanf_float+0x66>
 800a294:	6822      	ldr	r2, [r4, #0]
 800a296:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a29a:	6022      	str	r2, [r4, #0]
 800a29c:	460d      	mov	r5, r1
 800a29e:	468a      	mov	sl, r1
 800a2a0:	f806 3b01 	strb.w	r3, [r6], #1
 800a2a4:	e7de      	b.n	800a264 <_scanf_float+0x15c>
 800a2a6:	6822      	ldr	r2, [r4, #0]
 800a2a8:	0610      	lsls	r0, r2, #24
 800a2aa:	f57f af60 	bpl.w	800a16e <_scanf_float+0x66>
 800a2ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a2b2:	6022      	str	r2, [r4, #0]
 800a2b4:	e7f4      	b.n	800a2a0 <_scanf_float+0x198>
 800a2b6:	f1ba 0f00 	cmp.w	sl, #0
 800a2ba:	d10c      	bne.n	800a2d6 <_scanf_float+0x1ce>
 800a2bc:	b977      	cbnz	r7, 800a2dc <_scanf_float+0x1d4>
 800a2be:	6822      	ldr	r2, [r4, #0]
 800a2c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a2c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a2c8:	d108      	bne.n	800a2dc <_scanf_float+0x1d4>
 800a2ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a2ce:	6022      	str	r2, [r4, #0]
 800a2d0:	f04f 0a01 	mov.w	sl, #1
 800a2d4:	e7e4      	b.n	800a2a0 <_scanf_float+0x198>
 800a2d6:	f1ba 0f02 	cmp.w	sl, #2
 800a2da:	d050      	beq.n	800a37e <_scanf_float+0x276>
 800a2dc:	2d01      	cmp	r5, #1
 800a2de:	d002      	beq.n	800a2e6 <_scanf_float+0x1de>
 800a2e0:	2d04      	cmp	r5, #4
 800a2e2:	f47f af44 	bne.w	800a16e <_scanf_float+0x66>
 800a2e6:	3501      	adds	r5, #1
 800a2e8:	b2ed      	uxtb	r5, r5
 800a2ea:	e7d9      	b.n	800a2a0 <_scanf_float+0x198>
 800a2ec:	f1ba 0f01 	cmp.w	sl, #1
 800a2f0:	f47f af3d 	bne.w	800a16e <_scanf_float+0x66>
 800a2f4:	f04f 0a02 	mov.w	sl, #2
 800a2f8:	e7d2      	b.n	800a2a0 <_scanf_float+0x198>
 800a2fa:	b975      	cbnz	r5, 800a31a <_scanf_float+0x212>
 800a2fc:	2f00      	cmp	r7, #0
 800a2fe:	f47f af37 	bne.w	800a170 <_scanf_float+0x68>
 800a302:	6822      	ldr	r2, [r4, #0]
 800a304:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a308:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a30c:	f040 8103 	bne.w	800a516 <_scanf_float+0x40e>
 800a310:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a314:	6022      	str	r2, [r4, #0]
 800a316:	2501      	movs	r5, #1
 800a318:	e7c2      	b.n	800a2a0 <_scanf_float+0x198>
 800a31a:	2d03      	cmp	r5, #3
 800a31c:	d0e3      	beq.n	800a2e6 <_scanf_float+0x1de>
 800a31e:	2d05      	cmp	r5, #5
 800a320:	e7df      	b.n	800a2e2 <_scanf_float+0x1da>
 800a322:	2d02      	cmp	r5, #2
 800a324:	f47f af23 	bne.w	800a16e <_scanf_float+0x66>
 800a328:	2503      	movs	r5, #3
 800a32a:	e7b9      	b.n	800a2a0 <_scanf_float+0x198>
 800a32c:	2d06      	cmp	r5, #6
 800a32e:	f47f af1e 	bne.w	800a16e <_scanf_float+0x66>
 800a332:	2507      	movs	r5, #7
 800a334:	e7b4      	b.n	800a2a0 <_scanf_float+0x198>
 800a336:	6822      	ldr	r2, [r4, #0]
 800a338:	0591      	lsls	r1, r2, #22
 800a33a:	f57f af18 	bpl.w	800a16e <_scanf_float+0x66>
 800a33e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a342:	6022      	str	r2, [r4, #0]
 800a344:	9702      	str	r7, [sp, #8]
 800a346:	e7ab      	b.n	800a2a0 <_scanf_float+0x198>
 800a348:	6822      	ldr	r2, [r4, #0]
 800a34a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a34e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a352:	d005      	beq.n	800a360 <_scanf_float+0x258>
 800a354:	0550      	lsls	r0, r2, #21
 800a356:	f57f af0a 	bpl.w	800a16e <_scanf_float+0x66>
 800a35a:	2f00      	cmp	r7, #0
 800a35c:	f000 80db 	beq.w	800a516 <_scanf_float+0x40e>
 800a360:	0591      	lsls	r1, r2, #22
 800a362:	bf58      	it	pl
 800a364:	9902      	ldrpl	r1, [sp, #8]
 800a366:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a36a:	bf58      	it	pl
 800a36c:	1a79      	subpl	r1, r7, r1
 800a36e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a372:	bf58      	it	pl
 800a374:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a378:	6022      	str	r2, [r4, #0]
 800a37a:	2700      	movs	r7, #0
 800a37c:	e790      	b.n	800a2a0 <_scanf_float+0x198>
 800a37e:	f04f 0a03 	mov.w	sl, #3
 800a382:	e78d      	b.n	800a2a0 <_scanf_float+0x198>
 800a384:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a388:	4649      	mov	r1, r9
 800a38a:	4640      	mov	r0, r8
 800a38c:	4798      	blx	r3
 800a38e:	2800      	cmp	r0, #0
 800a390:	f43f aedf 	beq.w	800a152 <_scanf_float+0x4a>
 800a394:	e6eb      	b.n	800a16e <_scanf_float+0x66>
 800a396:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a39a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a39e:	464a      	mov	r2, r9
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	4798      	blx	r3
 800a3a4:	6923      	ldr	r3, [r4, #16]
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	6123      	str	r3, [r4, #16]
 800a3aa:	e6eb      	b.n	800a184 <_scanf_float+0x7c>
 800a3ac:	1e6b      	subs	r3, r5, #1
 800a3ae:	2b06      	cmp	r3, #6
 800a3b0:	d824      	bhi.n	800a3fc <_scanf_float+0x2f4>
 800a3b2:	2d02      	cmp	r5, #2
 800a3b4:	d836      	bhi.n	800a424 <_scanf_float+0x31c>
 800a3b6:	9b01      	ldr	r3, [sp, #4]
 800a3b8:	429e      	cmp	r6, r3
 800a3ba:	f67f aee7 	bls.w	800a18c <_scanf_float+0x84>
 800a3be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3c6:	464a      	mov	r2, r9
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	4798      	blx	r3
 800a3cc:	6923      	ldr	r3, [r4, #16]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	6123      	str	r3, [r4, #16]
 800a3d2:	e7f0      	b.n	800a3b6 <_scanf_float+0x2ae>
 800a3d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a3dc:	464a      	mov	r2, r9
 800a3de:	4640      	mov	r0, r8
 800a3e0:	4798      	blx	r3
 800a3e2:	6923      	ldr	r3, [r4, #16]
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	6123      	str	r3, [r4, #16]
 800a3e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3ec:	fa5f fa8a 	uxtb.w	sl, sl
 800a3f0:	f1ba 0f02 	cmp.w	sl, #2
 800a3f4:	d1ee      	bne.n	800a3d4 <_scanf_float+0x2cc>
 800a3f6:	3d03      	subs	r5, #3
 800a3f8:	b2ed      	uxtb	r5, r5
 800a3fa:	1b76      	subs	r6, r6, r5
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	05da      	lsls	r2, r3, #23
 800a400:	d530      	bpl.n	800a464 <_scanf_float+0x35c>
 800a402:	055b      	lsls	r3, r3, #21
 800a404:	d511      	bpl.n	800a42a <_scanf_float+0x322>
 800a406:	9b01      	ldr	r3, [sp, #4]
 800a408:	429e      	cmp	r6, r3
 800a40a:	f67f aebf 	bls.w	800a18c <_scanf_float+0x84>
 800a40e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a412:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a416:	464a      	mov	r2, r9
 800a418:	4640      	mov	r0, r8
 800a41a:	4798      	blx	r3
 800a41c:	6923      	ldr	r3, [r4, #16]
 800a41e:	3b01      	subs	r3, #1
 800a420:	6123      	str	r3, [r4, #16]
 800a422:	e7f0      	b.n	800a406 <_scanf_float+0x2fe>
 800a424:	46aa      	mov	sl, r5
 800a426:	46b3      	mov	fp, r6
 800a428:	e7de      	b.n	800a3e8 <_scanf_float+0x2e0>
 800a42a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	2965      	cmp	r1, #101	@ 0x65
 800a432:	f103 33ff 	add.w	r3, r3, #4294967295
 800a436:	f106 35ff 	add.w	r5, r6, #4294967295
 800a43a:	6123      	str	r3, [r4, #16]
 800a43c:	d00c      	beq.n	800a458 <_scanf_float+0x350>
 800a43e:	2945      	cmp	r1, #69	@ 0x45
 800a440:	d00a      	beq.n	800a458 <_scanf_float+0x350>
 800a442:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a446:	464a      	mov	r2, r9
 800a448:	4640      	mov	r0, r8
 800a44a:	4798      	blx	r3
 800a44c:	6923      	ldr	r3, [r4, #16]
 800a44e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a452:	3b01      	subs	r3, #1
 800a454:	1eb5      	subs	r5, r6, #2
 800a456:	6123      	str	r3, [r4, #16]
 800a458:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a45c:	464a      	mov	r2, r9
 800a45e:	4640      	mov	r0, r8
 800a460:	4798      	blx	r3
 800a462:	462e      	mov	r6, r5
 800a464:	6822      	ldr	r2, [r4, #0]
 800a466:	f012 0210 	ands.w	r2, r2, #16
 800a46a:	d001      	beq.n	800a470 <_scanf_float+0x368>
 800a46c:	2000      	movs	r0, #0
 800a46e:	e68e      	b.n	800a18e <_scanf_float+0x86>
 800a470:	7032      	strb	r2, [r6, #0]
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a47c:	d125      	bne.n	800a4ca <_scanf_float+0x3c2>
 800a47e:	9b02      	ldr	r3, [sp, #8]
 800a480:	429f      	cmp	r7, r3
 800a482:	d00a      	beq.n	800a49a <_scanf_float+0x392>
 800a484:	1bda      	subs	r2, r3, r7
 800a486:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a48a:	429e      	cmp	r6, r3
 800a48c:	bf28      	it	cs
 800a48e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a492:	4922      	ldr	r1, [pc, #136]	@ (800a51c <_scanf_float+0x414>)
 800a494:	4630      	mov	r0, r6
 800a496:	f000 f907 	bl	800a6a8 <siprintf>
 800a49a:	9901      	ldr	r1, [sp, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	4640      	mov	r0, r8
 800a4a0:	f7ff f9ca 	bl	8009838 <_strtod_r>
 800a4a4:	9b03      	ldr	r3, [sp, #12]
 800a4a6:	6821      	ldr	r1, [r4, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f011 0f02 	tst.w	r1, #2
 800a4ae:	ec57 6b10 	vmov	r6, r7, d0
 800a4b2:	f103 0204 	add.w	r2, r3, #4
 800a4b6:	d015      	beq.n	800a4e4 <_scanf_float+0x3dc>
 800a4b8:	9903      	ldr	r1, [sp, #12]
 800a4ba:	600a      	str	r2, [r1, #0]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	e9c3 6700 	strd	r6, r7, [r3]
 800a4c2:	68e3      	ldr	r3, [r4, #12]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	60e3      	str	r3, [r4, #12]
 800a4c8:	e7d0      	b.n	800a46c <_scanf_float+0x364>
 800a4ca:	9b04      	ldr	r3, [sp, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d0e4      	beq.n	800a49a <_scanf_float+0x392>
 800a4d0:	9905      	ldr	r1, [sp, #20]
 800a4d2:	230a      	movs	r3, #10
 800a4d4:	3101      	adds	r1, #1
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	f002 f9c6 	bl	800c868 <_strtol_r>
 800a4dc:	9b04      	ldr	r3, [sp, #16]
 800a4de:	9e05      	ldr	r6, [sp, #20]
 800a4e0:	1ac2      	subs	r2, r0, r3
 800a4e2:	e7d0      	b.n	800a486 <_scanf_float+0x37e>
 800a4e4:	f011 0f04 	tst.w	r1, #4
 800a4e8:	9903      	ldr	r1, [sp, #12]
 800a4ea:	600a      	str	r2, [r1, #0]
 800a4ec:	d1e6      	bne.n	800a4bc <_scanf_float+0x3b4>
 800a4ee:	681d      	ldr	r5, [r3, #0]
 800a4f0:	4632      	mov	r2, r6
 800a4f2:	463b      	mov	r3, r7
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	4639      	mov	r1, r7
 800a4f8:	f7f6 fb18 	bl	8000b2c <__aeabi_dcmpun>
 800a4fc:	b128      	cbz	r0, 800a50a <_scanf_float+0x402>
 800a4fe:	4808      	ldr	r0, [pc, #32]	@ (800a520 <_scanf_float+0x418>)
 800a500:	f000 f9e2 	bl	800a8c8 <nanf>
 800a504:	ed85 0a00 	vstr	s0, [r5]
 800a508:	e7db      	b.n	800a4c2 <_scanf_float+0x3ba>
 800a50a:	4630      	mov	r0, r6
 800a50c:	4639      	mov	r1, r7
 800a50e:	f7f6 fb6b 	bl	8000be8 <__aeabi_d2f>
 800a512:	6028      	str	r0, [r5, #0]
 800a514:	e7d5      	b.n	800a4c2 <_scanf_float+0x3ba>
 800a516:	2700      	movs	r7, #0
 800a518:	e62e      	b.n	800a178 <_scanf_float+0x70>
 800a51a:	bf00      	nop
 800a51c:	0800d422 	.word	0x0800d422
 800a520:	0800d5c1 	.word	0x0800d5c1

0800a524 <std>:
 800a524:	2300      	movs	r3, #0
 800a526:	b510      	push	{r4, lr}
 800a528:	4604      	mov	r4, r0
 800a52a:	e9c0 3300 	strd	r3, r3, [r0]
 800a52e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a532:	6083      	str	r3, [r0, #8]
 800a534:	8181      	strh	r1, [r0, #12]
 800a536:	6643      	str	r3, [r0, #100]	@ 0x64
 800a538:	81c2      	strh	r2, [r0, #14]
 800a53a:	6183      	str	r3, [r0, #24]
 800a53c:	4619      	mov	r1, r3
 800a53e:	2208      	movs	r2, #8
 800a540:	305c      	adds	r0, #92	@ 0x5c
 800a542:	f000 f916 	bl	800a772 <memset>
 800a546:	4b0d      	ldr	r3, [pc, #52]	@ (800a57c <std+0x58>)
 800a548:	6263      	str	r3, [r4, #36]	@ 0x24
 800a54a:	4b0d      	ldr	r3, [pc, #52]	@ (800a580 <std+0x5c>)
 800a54c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a54e:	4b0d      	ldr	r3, [pc, #52]	@ (800a584 <std+0x60>)
 800a550:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a552:	4b0d      	ldr	r3, [pc, #52]	@ (800a588 <std+0x64>)
 800a554:	6323      	str	r3, [r4, #48]	@ 0x30
 800a556:	4b0d      	ldr	r3, [pc, #52]	@ (800a58c <std+0x68>)
 800a558:	6224      	str	r4, [r4, #32]
 800a55a:	429c      	cmp	r4, r3
 800a55c:	d006      	beq.n	800a56c <std+0x48>
 800a55e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a562:	4294      	cmp	r4, r2
 800a564:	d002      	beq.n	800a56c <std+0x48>
 800a566:	33d0      	adds	r3, #208	@ 0xd0
 800a568:	429c      	cmp	r4, r3
 800a56a:	d105      	bne.n	800a578 <std+0x54>
 800a56c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a574:	f000 b98c 	b.w	800a890 <__retarget_lock_init_recursive>
 800a578:	bd10      	pop	{r4, pc}
 800a57a:	bf00      	nop
 800a57c:	0800a6ed 	.word	0x0800a6ed
 800a580:	0800a70f 	.word	0x0800a70f
 800a584:	0800a747 	.word	0x0800a747
 800a588:	0800a76b 	.word	0x0800a76b
 800a58c:	20001f78 	.word	0x20001f78

0800a590 <stdio_exit_handler>:
 800a590:	4a02      	ldr	r2, [pc, #8]	@ (800a59c <stdio_exit_handler+0xc>)
 800a592:	4903      	ldr	r1, [pc, #12]	@ (800a5a0 <stdio_exit_handler+0x10>)
 800a594:	4803      	ldr	r0, [pc, #12]	@ (800a5a4 <stdio_exit_handler+0x14>)
 800a596:	f000 b869 	b.w	800a66c <_fwalk_sglue>
 800a59a:	bf00      	nop
 800a59c:	200000fc 	.word	0x200000fc
 800a5a0:	0800cc3d 	.word	0x0800cc3d
 800a5a4:	20000278 	.word	0x20000278

0800a5a8 <cleanup_stdio>:
 800a5a8:	6841      	ldr	r1, [r0, #4]
 800a5aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a5dc <cleanup_stdio+0x34>)
 800a5ac:	4299      	cmp	r1, r3
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	d001      	beq.n	800a5b8 <cleanup_stdio+0x10>
 800a5b4:	f002 fb42 	bl	800cc3c <_fflush_r>
 800a5b8:	68a1      	ldr	r1, [r4, #8]
 800a5ba:	4b09      	ldr	r3, [pc, #36]	@ (800a5e0 <cleanup_stdio+0x38>)
 800a5bc:	4299      	cmp	r1, r3
 800a5be:	d002      	beq.n	800a5c6 <cleanup_stdio+0x1e>
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f002 fb3b 	bl	800cc3c <_fflush_r>
 800a5c6:	68e1      	ldr	r1, [r4, #12]
 800a5c8:	4b06      	ldr	r3, [pc, #24]	@ (800a5e4 <cleanup_stdio+0x3c>)
 800a5ca:	4299      	cmp	r1, r3
 800a5cc:	d004      	beq.n	800a5d8 <cleanup_stdio+0x30>
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d4:	f002 bb32 	b.w	800cc3c <_fflush_r>
 800a5d8:	bd10      	pop	{r4, pc}
 800a5da:	bf00      	nop
 800a5dc:	20001f78 	.word	0x20001f78
 800a5e0:	20001fe0 	.word	0x20001fe0
 800a5e4:	20002048 	.word	0x20002048

0800a5e8 <global_stdio_init.part.0>:
 800a5e8:	b510      	push	{r4, lr}
 800a5ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a618 <global_stdio_init.part.0+0x30>)
 800a5ec:	4c0b      	ldr	r4, [pc, #44]	@ (800a61c <global_stdio_init.part.0+0x34>)
 800a5ee:	4a0c      	ldr	r2, [pc, #48]	@ (800a620 <global_stdio_init.part.0+0x38>)
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2104      	movs	r1, #4
 800a5f8:	f7ff ff94 	bl	800a524 <std>
 800a5fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a600:	2201      	movs	r2, #1
 800a602:	2109      	movs	r1, #9
 800a604:	f7ff ff8e 	bl	800a524 <std>
 800a608:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a60c:	2202      	movs	r2, #2
 800a60e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a612:	2112      	movs	r1, #18
 800a614:	f7ff bf86 	b.w	800a524 <std>
 800a618:	200020b0 	.word	0x200020b0
 800a61c:	20001f78 	.word	0x20001f78
 800a620:	0800a591 	.word	0x0800a591

0800a624 <__sfp_lock_acquire>:
 800a624:	4801      	ldr	r0, [pc, #4]	@ (800a62c <__sfp_lock_acquire+0x8>)
 800a626:	f000 b934 	b.w	800a892 <__retarget_lock_acquire_recursive>
 800a62a:	bf00      	nop
 800a62c:	200020b9 	.word	0x200020b9

0800a630 <__sfp_lock_release>:
 800a630:	4801      	ldr	r0, [pc, #4]	@ (800a638 <__sfp_lock_release+0x8>)
 800a632:	f000 b92f 	b.w	800a894 <__retarget_lock_release_recursive>
 800a636:	bf00      	nop
 800a638:	200020b9 	.word	0x200020b9

0800a63c <__sinit>:
 800a63c:	b510      	push	{r4, lr}
 800a63e:	4604      	mov	r4, r0
 800a640:	f7ff fff0 	bl	800a624 <__sfp_lock_acquire>
 800a644:	6a23      	ldr	r3, [r4, #32]
 800a646:	b11b      	cbz	r3, 800a650 <__sinit+0x14>
 800a648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a64c:	f7ff bff0 	b.w	800a630 <__sfp_lock_release>
 800a650:	4b04      	ldr	r3, [pc, #16]	@ (800a664 <__sinit+0x28>)
 800a652:	6223      	str	r3, [r4, #32]
 800a654:	4b04      	ldr	r3, [pc, #16]	@ (800a668 <__sinit+0x2c>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1f5      	bne.n	800a648 <__sinit+0xc>
 800a65c:	f7ff ffc4 	bl	800a5e8 <global_stdio_init.part.0>
 800a660:	e7f2      	b.n	800a648 <__sinit+0xc>
 800a662:	bf00      	nop
 800a664:	0800a5a9 	.word	0x0800a5a9
 800a668:	200020b0 	.word	0x200020b0

0800a66c <_fwalk_sglue>:
 800a66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a670:	4607      	mov	r7, r0
 800a672:	4688      	mov	r8, r1
 800a674:	4614      	mov	r4, r2
 800a676:	2600      	movs	r6, #0
 800a678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a67c:	f1b9 0901 	subs.w	r9, r9, #1
 800a680:	d505      	bpl.n	800a68e <_fwalk_sglue+0x22>
 800a682:	6824      	ldr	r4, [r4, #0]
 800a684:	2c00      	cmp	r4, #0
 800a686:	d1f7      	bne.n	800a678 <_fwalk_sglue+0xc>
 800a688:	4630      	mov	r0, r6
 800a68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68e:	89ab      	ldrh	r3, [r5, #12]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d907      	bls.n	800a6a4 <_fwalk_sglue+0x38>
 800a694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a698:	3301      	adds	r3, #1
 800a69a:	d003      	beq.n	800a6a4 <_fwalk_sglue+0x38>
 800a69c:	4629      	mov	r1, r5
 800a69e:	4638      	mov	r0, r7
 800a6a0:	47c0      	blx	r8
 800a6a2:	4306      	orrs	r6, r0
 800a6a4:	3568      	adds	r5, #104	@ 0x68
 800a6a6:	e7e9      	b.n	800a67c <_fwalk_sglue+0x10>

0800a6a8 <siprintf>:
 800a6a8:	b40e      	push	{r1, r2, r3}
 800a6aa:	b510      	push	{r4, lr}
 800a6ac:	b09d      	sub	sp, #116	@ 0x74
 800a6ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a6b0:	9002      	str	r0, [sp, #8]
 800a6b2:	9006      	str	r0, [sp, #24]
 800a6b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a6b8:	480a      	ldr	r0, [pc, #40]	@ (800a6e4 <siprintf+0x3c>)
 800a6ba:	9107      	str	r1, [sp, #28]
 800a6bc:	9104      	str	r1, [sp, #16]
 800a6be:	490a      	ldr	r1, [pc, #40]	@ (800a6e8 <siprintf+0x40>)
 800a6c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6c4:	9105      	str	r1, [sp, #20]
 800a6c6:	2400      	movs	r4, #0
 800a6c8:	a902      	add	r1, sp, #8
 800a6ca:	6800      	ldr	r0, [r0, #0]
 800a6cc:	9301      	str	r3, [sp, #4]
 800a6ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a6d0:	f002 f934 	bl	800c93c <_svfiprintf_r>
 800a6d4:	9b02      	ldr	r3, [sp, #8]
 800a6d6:	701c      	strb	r4, [r3, #0]
 800a6d8:	b01d      	add	sp, #116	@ 0x74
 800a6da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6de:	b003      	add	sp, #12
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	20000274 	.word	0x20000274
 800a6e8:	ffff0208 	.word	0xffff0208

0800a6ec <__sread>:
 800a6ec:	b510      	push	{r4, lr}
 800a6ee:	460c      	mov	r4, r1
 800a6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f4:	f000 f87e 	bl	800a7f4 <_read_r>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	bfab      	itete	ge
 800a6fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6fe:	89a3      	ldrhlt	r3, [r4, #12]
 800a700:	181b      	addge	r3, r3, r0
 800a702:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a706:	bfac      	ite	ge
 800a708:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a70a:	81a3      	strhlt	r3, [r4, #12]
 800a70c:	bd10      	pop	{r4, pc}

0800a70e <__swrite>:
 800a70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a712:	461f      	mov	r7, r3
 800a714:	898b      	ldrh	r3, [r1, #12]
 800a716:	05db      	lsls	r3, r3, #23
 800a718:	4605      	mov	r5, r0
 800a71a:	460c      	mov	r4, r1
 800a71c:	4616      	mov	r6, r2
 800a71e:	d505      	bpl.n	800a72c <__swrite+0x1e>
 800a720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a724:	2302      	movs	r3, #2
 800a726:	2200      	movs	r2, #0
 800a728:	f000 f852 	bl	800a7d0 <_lseek_r>
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a732:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a736:	81a3      	strh	r3, [r4, #12]
 800a738:	4632      	mov	r2, r6
 800a73a:	463b      	mov	r3, r7
 800a73c:	4628      	mov	r0, r5
 800a73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a742:	f000 b869 	b.w	800a818 <_write_r>

0800a746 <__sseek>:
 800a746:	b510      	push	{r4, lr}
 800a748:	460c      	mov	r4, r1
 800a74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a74e:	f000 f83f 	bl	800a7d0 <_lseek_r>
 800a752:	1c43      	adds	r3, r0, #1
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	bf15      	itete	ne
 800a758:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a75a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a75e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a762:	81a3      	strheq	r3, [r4, #12]
 800a764:	bf18      	it	ne
 800a766:	81a3      	strhne	r3, [r4, #12]
 800a768:	bd10      	pop	{r4, pc}

0800a76a <__sclose>:
 800a76a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76e:	f000 b81f 	b.w	800a7b0 <_close_r>

0800a772 <memset>:
 800a772:	4402      	add	r2, r0
 800a774:	4603      	mov	r3, r0
 800a776:	4293      	cmp	r3, r2
 800a778:	d100      	bne.n	800a77c <memset+0xa>
 800a77a:	4770      	bx	lr
 800a77c:	f803 1b01 	strb.w	r1, [r3], #1
 800a780:	e7f9      	b.n	800a776 <memset+0x4>

0800a782 <strncmp>:
 800a782:	b510      	push	{r4, lr}
 800a784:	b16a      	cbz	r2, 800a7a2 <strncmp+0x20>
 800a786:	3901      	subs	r1, #1
 800a788:	1884      	adds	r4, r0, r2
 800a78a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a78e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a792:	429a      	cmp	r2, r3
 800a794:	d103      	bne.n	800a79e <strncmp+0x1c>
 800a796:	42a0      	cmp	r0, r4
 800a798:	d001      	beq.n	800a79e <strncmp+0x1c>
 800a79a:	2a00      	cmp	r2, #0
 800a79c:	d1f5      	bne.n	800a78a <strncmp+0x8>
 800a79e:	1ad0      	subs	r0, r2, r3
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	e7fc      	b.n	800a7a0 <strncmp+0x1e>
	...

0800a7a8 <_localeconv_r>:
 800a7a8:	4800      	ldr	r0, [pc, #0]	@ (800a7ac <_localeconv_r+0x4>)
 800a7aa:	4770      	bx	lr
 800a7ac:	200001f8 	.word	0x200001f8

0800a7b0 <_close_r>:
 800a7b0:	b538      	push	{r3, r4, r5, lr}
 800a7b2:	4d06      	ldr	r5, [pc, #24]	@ (800a7cc <_close_r+0x1c>)
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	602b      	str	r3, [r5, #0]
 800a7bc:	f7f6 ff6c 	bl	8001698 <_close>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d102      	bne.n	800a7ca <_close_r+0x1a>
 800a7c4:	682b      	ldr	r3, [r5, #0]
 800a7c6:	b103      	cbz	r3, 800a7ca <_close_r+0x1a>
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	200020b4 	.word	0x200020b4

0800a7d0 <_lseek_r>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	4d07      	ldr	r5, [pc, #28]	@ (800a7f0 <_lseek_r+0x20>)
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	4608      	mov	r0, r1
 800a7d8:	4611      	mov	r1, r2
 800a7da:	2200      	movs	r2, #0
 800a7dc:	602a      	str	r2, [r5, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	f7f6 ff81 	bl	80016e6 <_lseek>
 800a7e4:	1c43      	adds	r3, r0, #1
 800a7e6:	d102      	bne.n	800a7ee <_lseek_r+0x1e>
 800a7e8:	682b      	ldr	r3, [r5, #0]
 800a7ea:	b103      	cbz	r3, 800a7ee <_lseek_r+0x1e>
 800a7ec:	6023      	str	r3, [r4, #0]
 800a7ee:	bd38      	pop	{r3, r4, r5, pc}
 800a7f0:	200020b4 	.word	0x200020b4

0800a7f4 <_read_r>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	4d07      	ldr	r5, [pc, #28]	@ (800a814 <_read_r+0x20>)
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	4608      	mov	r0, r1
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	2200      	movs	r2, #0
 800a800:	602a      	str	r2, [r5, #0]
 800a802:	461a      	mov	r2, r3
 800a804:	f7f6 ff0f 	bl	8001626 <_read>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d102      	bne.n	800a812 <_read_r+0x1e>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	b103      	cbz	r3, 800a812 <_read_r+0x1e>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	200020b4 	.word	0x200020b4

0800a818 <_write_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	4d07      	ldr	r5, [pc, #28]	@ (800a838 <_write_r+0x20>)
 800a81c:	4604      	mov	r4, r0
 800a81e:	4608      	mov	r0, r1
 800a820:	4611      	mov	r1, r2
 800a822:	2200      	movs	r2, #0
 800a824:	602a      	str	r2, [r5, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	f7f6 ff1a 	bl	8001660 <_write>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d102      	bne.n	800a836 <_write_r+0x1e>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	b103      	cbz	r3, 800a836 <_write_r+0x1e>
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	bd38      	pop	{r3, r4, r5, pc}
 800a838:	200020b4 	.word	0x200020b4

0800a83c <__errno>:
 800a83c:	4b01      	ldr	r3, [pc, #4]	@ (800a844 <__errno+0x8>)
 800a83e:	6818      	ldr	r0, [r3, #0]
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	20000274 	.word	0x20000274

0800a848 <__libc_init_array>:
 800a848:	b570      	push	{r4, r5, r6, lr}
 800a84a:	4d0d      	ldr	r5, [pc, #52]	@ (800a880 <__libc_init_array+0x38>)
 800a84c:	4c0d      	ldr	r4, [pc, #52]	@ (800a884 <__libc_init_array+0x3c>)
 800a84e:	1b64      	subs	r4, r4, r5
 800a850:	10a4      	asrs	r4, r4, #2
 800a852:	2600      	movs	r6, #0
 800a854:	42a6      	cmp	r6, r4
 800a856:	d109      	bne.n	800a86c <__libc_init_array+0x24>
 800a858:	4d0b      	ldr	r5, [pc, #44]	@ (800a888 <__libc_init_array+0x40>)
 800a85a:	4c0c      	ldr	r4, [pc, #48]	@ (800a88c <__libc_init_array+0x44>)
 800a85c:	f002 fd5e 	bl	800d31c <_init>
 800a860:	1b64      	subs	r4, r4, r5
 800a862:	10a4      	asrs	r4, r4, #2
 800a864:	2600      	movs	r6, #0
 800a866:	42a6      	cmp	r6, r4
 800a868:	d105      	bne.n	800a876 <__libc_init_array+0x2e>
 800a86a:	bd70      	pop	{r4, r5, r6, pc}
 800a86c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a870:	4798      	blx	r3
 800a872:	3601      	adds	r6, #1
 800a874:	e7ee      	b.n	800a854 <__libc_init_array+0xc>
 800a876:	f855 3b04 	ldr.w	r3, [r5], #4
 800a87a:	4798      	blx	r3
 800a87c:	3601      	adds	r6, #1
 800a87e:	e7f2      	b.n	800a866 <__libc_init_array+0x1e>
 800a880:	0800d824 	.word	0x0800d824
 800a884:	0800d824 	.word	0x0800d824
 800a888:	0800d824 	.word	0x0800d824
 800a88c:	0800d828 	.word	0x0800d828

0800a890 <__retarget_lock_init_recursive>:
 800a890:	4770      	bx	lr

0800a892 <__retarget_lock_acquire_recursive>:
 800a892:	4770      	bx	lr

0800a894 <__retarget_lock_release_recursive>:
 800a894:	4770      	bx	lr

0800a896 <memcpy>:
 800a896:	440a      	add	r2, r1
 800a898:	4291      	cmp	r1, r2
 800a89a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a89e:	d100      	bne.n	800a8a2 <memcpy+0xc>
 800a8a0:	4770      	bx	lr
 800a8a2:	b510      	push	{r4, lr}
 800a8a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8ac:	4291      	cmp	r1, r2
 800a8ae:	d1f9      	bne.n	800a8a4 <memcpy+0xe>
 800a8b0:	bd10      	pop	{r4, pc}
 800a8b2:	0000      	movs	r0, r0
 800a8b4:	0000      	movs	r0, r0
	...

0800a8b8 <nan>:
 800a8b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a8c0 <nan+0x8>
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	00000000 	.word	0x00000000
 800a8c4:	7ff80000 	.word	0x7ff80000

0800a8c8 <nanf>:
 800a8c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a8d0 <nanf+0x8>
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	7fc00000 	.word	0x7fc00000

0800a8d4 <quorem>:
 800a8d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	6903      	ldr	r3, [r0, #16]
 800a8da:	690c      	ldr	r4, [r1, #16]
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	4607      	mov	r7, r0
 800a8e0:	db7e      	blt.n	800a9e0 <quorem+0x10c>
 800a8e2:	3c01      	subs	r4, #1
 800a8e4:	f101 0814 	add.w	r8, r1, #20
 800a8e8:	00a3      	lsls	r3, r4, #2
 800a8ea:	f100 0514 	add.w	r5, r0, #20
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8f4:	9301      	str	r3, [sp, #4]
 800a8f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8fe:	3301      	adds	r3, #1
 800a900:	429a      	cmp	r2, r3
 800a902:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a906:	fbb2 f6f3 	udiv	r6, r2, r3
 800a90a:	d32e      	bcc.n	800a96a <quorem+0x96>
 800a90c:	f04f 0a00 	mov.w	sl, #0
 800a910:	46c4      	mov	ip, r8
 800a912:	46ae      	mov	lr, r5
 800a914:	46d3      	mov	fp, sl
 800a916:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a91a:	b298      	uxth	r0, r3
 800a91c:	fb06 a000 	mla	r0, r6, r0, sl
 800a920:	0c02      	lsrs	r2, r0, #16
 800a922:	0c1b      	lsrs	r3, r3, #16
 800a924:	fb06 2303 	mla	r3, r6, r3, r2
 800a928:	f8de 2000 	ldr.w	r2, [lr]
 800a92c:	b280      	uxth	r0, r0
 800a92e:	b292      	uxth	r2, r2
 800a930:	1a12      	subs	r2, r2, r0
 800a932:	445a      	add	r2, fp
 800a934:	f8de 0000 	ldr.w	r0, [lr]
 800a938:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a942:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a946:	b292      	uxth	r2, r2
 800a948:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a94c:	45e1      	cmp	r9, ip
 800a94e:	f84e 2b04 	str.w	r2, [lr], #4
 800a952:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a956:	d2de      	bcs.n	800a916 <quorem+0x42>
 800a958:	9b00      	ldr	r3, [sp, #0]
 800a95a:	58eb      	ldr	r3, [r5, r3]
 800a95c:	b92b      	cbnz	r3, 800a96a <quorem+0x96>
 800a95e:	9b01      	ldr	r3, [sp, #4]
 800a960:	3b04      	subs	r3, #4
 800a962:	429d      	cmp	r5, r3
 800a964:	461a      	mov	r2, r3
 800a966:	d32f      	bcc.n	800a9c8 <quorem+0xf4>
 800a968:	613c      	str	r4, [r7, #16]
 800a96a:	4638      	mov	r0, r7
 800a96c:	f001 fd14 	bl	800c398 <__mcmp>
 800a970:	2800      	cmp	r0, #0
 800a972:	db25      	blt.n	800a9c0 <quorem+0xec>
 800a974:	4629      	mov	r1, r5
 800a976:	2000      	movs	r0, #0
 800a978:	f858 2b04 	ldr.w	r2, [r8], #4
 800a97c:	f8d1 c000 	ldr.w	ip, [r1]
 800a980:	fa1f fe82 	uxth.w	lr, r2
 800a984:	fa1f f38c 	uxth.w	r3, ip
 800a988:	eba3 030e 	sub.w	r3, r3, lr
 800a98c:	4403      	add	r3, r0
 800a98e:	0c12      	lsrs	r2, r2, #16
 800a990:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a994:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a998:	b29b      	uxth	r3, r3
 800a99a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a99e:	45c1      	cmp	r9, r8
 800a9a0:	f841 3b04 	str.w	r3, [r1], #4
 800a9a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9a8:	d2e6      	bcs.n	800a978 <quorem+0xa4>
 800a9aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9b2:	b922      	cbnz	r2, 800a9be <quorem+0xea>
 800a9b4:	3b04      	subs	r3, #4
 800a9b6:	429d      	cmp	r5, r3
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	d30b      	bcc.n	800a9d4 <quorem+0x100>
 800a9bc:	613c      	str	r4, [r7, #16]
 800a9be:	3601      	adds	r6, #1
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	b003      	add	sp, #12
 800a9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c8:	6812      	ldr	r2, [r2, #0]
 800a9ca:	3b04      	subs	r3, #4
 800a9cc:	2a00      	cmp	r2, #0
 800a9ce:	d1cb      	bne.n	800a968 <quorem+0x94>
 800a9d0:	3c01      	subs	r4, #1
 800a9d2:	e7c6      	b.n	800a962 <quorem+0x8e>
 800a9d4:	6812      	ldr	r2, [r2, #0]
 800a9d6:	3b04      	subs	r3, #4
 800a9d8:	2a00      	cmp	r2, #0
 800a9da:	d1ef      	bne.n	800a9bc <quorem+0xe8>
 800a9dc:	3c01      	subs	r4, #1
 800a9de:	e7ea      	b.n	800a9b6 <quorem+0xe2>
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	e7ee      	b.n	800a9c2 <quorem+0xee>
 800a9e4:	0000      	movs	r0, r0
	...

0800a9e8 <_dtoa_r>:
 800a9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ec:	69c7      	ldr	r7, [r0, #28]
 800a9ee:	b097      	sub	sp, #92	@ 0x5c
 800a9f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a9f4:	ec55 4b10 	vmov	r4, r5, d0
 800a9f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a9fa:	9107      	str	r1, [sp, #28]
 800a9fc:	4681      	mov	r9, r0
 800a9fe:	920c      	str	r2, [sp, #48]	@ 0x30
 800aa00:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa02:	b97f      	cbnz	r7, 800aa24 <_dtoa_r+0x3c>
 800aa04:	2010      	movs	r0, #16
 800aa06:	f001 f943 	bl	800bc90 <malloc>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	f8c9 001c 	str.w	r0, [r9, #28]
 800aa10:	b920      	cbnz	r0, 800aa1c <_dtoa_r+0x34>
 800aa12:	4ba9      	ldr	r3, [pc, #676]	@ (800acb8 <_dtoa_r+0x2d0>)
 800aa14:	21ef      	movs	r1, #239	@ 0xef
 800aa16:	48a9      	ldr	r0, [pc, #676]	@ (800acbc <_dtoa_r+0x2d4>)
 800aa18:	f002 f962 	bl	800cce0 <__assert_func>
 800aa1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aa20:	6007      	str	r7, [r0, #0]
 800aa22:	60c7      	str	r7, [r0, #12]
 800aa24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa28:	6819      	ldr	r1, [r3, #0]
 800aa2a:	b159      	cbz	r1, 800aa44 <_dtoa_r+0x5c>
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	604a      	str	r2, [r1, #4]
 800aa30:	2301      	movs	r3, #1
 800aa32:	4093      	lsls	r3, r2
 800aa34:	608b      	str	r3, [r1, #8]
 800aa36:	4648      	mov	r0, r9
 800aa38:	f001 fa32 	bl	800bea0 <_Bfree>
 800aa3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]
 800aa44:	1e2b      	subs	r3, r5, #0
 800aa46:	bfb9      	ittee	lt
 800aa48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa4c:	9305      	strlt	r3, [sp, #20]
 800aa4e:	2300      	movge	r3, #0
 800aa50:	6033      	strge	r3, [r6, #0]
 800aa52:	9f05      	ldr	r7, [sp, #20]
 800aa54:	4b9a      	ldr	r3, [pc, #616]	@ (800acc0 <_dtoa_r+0x2d8>)
 800aa56:	bfbc      	itt	lt
 800aa58:	2201      	movlt	r2, #1
 800aa5a:	6032      	strlt	r2, [r6, #0]
 800aa5c:	43bb      	bics	r3, r7
 800aa5e:	d112      	bne.n	800aa86 <_dtoa_r+0x9e>
 800aa60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aa62:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa6c:	4323      	orrs	r3, r4
 800aa6e:	f000 855a 	beq.w	800b526 <_dtoa_r+0xb3e>
 800aa72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa74:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800acd4 <_dtoa_r+0x2ec>
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 855c 	beq.w	800b536 <_dtoa_r+0xb4e>
 800aa7e:	f10a 0303 	add.w	r3, sl, #3
 800aa82:	f000 bd56 	b.w	800b532 <_dtoa_r+0xb4a>
 800aa86:	ed9d 7b04 	vldr	d7, [sp, #16]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	ec51 0b17 	vmov	r0, r1, d7
 800aa90:	2300      	movs	r3, #0
 800aa92:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800aa96:	f7f6 f817 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa9a:	4680      	mov	r8, r0
 800aa9c:	b158      	cbz	r0, 800aab6 <_dtoa_r+0xce>
 800aa9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	6013      	str	r3, [r2, #0]
 800aaa4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aaa6:	b113      	cbz	r3, 800aaae <_dtoa_r+0xc6>
 800aaa8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aaaa:	4b86      	ldr	r3, [pc, #536]	@ (800acc4 <_dtoa_r+0x2dc>)
 800aaac:	6013      	str	r3, [r2, #0]
 800aaae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800acd8 <_dtoa_r+0x2f0>
 800aab2:	f000 bd40 	b.w	800b536 <_dtoa_r+0xb4e>
 800aab6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800aaba:	aa14      	add	r2, sp, #80	@ 0x50
 800aabc:	a915      	add	r1, sp, #84	@ 0x54
 800aabe:	4648      	mov	r0, r9
 800aac0:	f001 fd8a 	bl	800c5d8 <__d2b>
 800aac4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aac8:	9002      	str	r0, [sp, #8]
 800aaca:	2e00      	cmp	r6, #0
 800aacc:	d078      	beq.n	800abc0 <_dtoa_r+0x1d8>
 800aace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aad0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800aad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aad8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aadc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aae0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aae4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aae8:	4619      	mov	r1, r3
 800aaea:	2200      	movs	r2, #0
 800aaec:	4b76      	ldr	r3, [pc, #472]	@ (800acc8 <_dtoa_r+0x2e0>)
 800aaee:	f7f5 fbcb 	bl	8000288 <__aeabi_dsub>
 800aaf2:	a36b      	add	r3, pc, #428	@ (adr r3, 800aca0 <_dtoa_r+0x2b8>)
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	f7f5 fd7e 	bl	80005f8 <__aeabi_dmul>
 800aafc:	a36a      	add	r3, pc, #424	@ (adr r3, 800aca8 <_dtoa_r+0x2c0>)
 800aafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab02:	f7f5 fbc3 	bl	800028c <__adddf3>
 800ab06:	4604      	mov	r4, r0
 800ab08:	4630      	mov	r0, r6
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	f7f5 fd0a 	bl	8000524 <__aeabi_i2d>
 800ab10:	a367      	add	r3, pc, #412	@ (adr r3, 800acb0 <_dtoa_r+0x2c8>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7f5 fd6f 	bl	80005f8 <__aeabi_dmul>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	4620      	mov	r0, r4
 800ab20:	4629      	mov	r1, r5
 800ab22:	f7f5 fbb3 	bl	800028c <__adddf3>
 800ab26:	4604      	mov	r4, r0
 800ab28:	460d      	mov	r5, r1
 800ab2a:	f7f6 f815 	bl	8000b58 <__aeabi_d2iz>
 800ab2e:	2200      	movs	r2, #0
 800ab30:	4607      	mov	r7, r0
 800ab32:	2300      	movs	r3, #0
 800ab34:	4620      	mov	r0, r4
 800ab36:	4629      	mov	r1, r5
 800ab38:	f7f5 ffd0 	bl	8000adc <__aeabi_dcmplt>
 800ab3c:	b140      	cbz	r0, 800ab50 <_dtoa_r+0x168>
 800ab3e:	4638      	mov	r0, r7
 800ab40:	f7f5 fcf0 	bl	8000524 <__aeabi_i2d>
 800ab44:	4622      	mov	r2, r4
 800ab46:	462b      	mov	r3, r5
 800ab48:	f7f5 ffbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab4c:	b900      	cbnz	r0, 800ab50 <_dtoa_r+0x168>
 800ab4e:	3f01      	subs	r7, #1
 800ab50:	2f16      	cmp	r7, #22
 800ab52:	d852      	bhi.n	800abfa <_dtoa_r+0x212>
 800ab54:	4b5d      	ldr	r3, [pc, #372]	@ (800accc <_dtoa_r+0x2e4>)
 800ab56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab62:	f7f5 ffbb 	bl	8000adc <__aeabi_dcmplt>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d049      	beq.n	800abfe <_dtoa_r+0x216>
 800ab6a:	3f01      	subs	r7, #1
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab72:	1b9b      	subs	r3, r3, r6
 800ab74:	1e5a      	subs	r2, r3, #1
 800ab76:	bf45      	ittet	mi
 800ab78:	f1c3 0301 	rsbmi	r3, r3, #1
 800ab7c:	9300      	strmi	r3, [sp, #0]
 800ab7e:	2300      	movpl	r3, #0
 800ab80:	2300      	movmi	r3, #0
 800ab82:	9206      	str	r2, [sp, #24]
 800ab84:	bf54      	ite	pl
 800ab86:	9300      	strpl	r3, [sp, #0]
 800ab88:	9306      	strmi	r3, [sp, #24]
 800ab8a:	2f00      	cmp	r7, #0
 800ab8c:	db39      	blt.n	800ac02 <_dtoa_r+0x21a>
 800ab8e:	9b06      	ldr	r3, [sp, #24]
 800ab90:	970d      	str	r7, [sp, #52]	@ 0x34
 800ab92:	443b      	add	r3, r7
 800ab94:	9306      	str	r3, [sp, #24]
 800ab96:	2300      	movs	r3, #0
 800ab98:	9308      	str	r3, [sp, #32]
 800ab9a:	9b07      	ldr	r3, [sp, #28]
 800ab9c:	2b09      	cmp	r3, #9
 800ab9e:	d863      	bhi.n	800ac68 <_dtoa_r+0x280>
 800aba0:	2b05      	cmp	r3, #5
 800aba2:	bfc4      	itt	gt
 800aba4:	3b04      	subgt	r3, #4
 800aba6:	9307      	strgt	r3, [sp, #28]
 800aba8:	9b07      	ldr	r3, [sp, #28]
 800abaa:	f1a3 0302 	sub.w	r3, r3, #2
 800abae:	bfcc      	ite	gt
 800abb0:	2400      	movgt	r4, #0
 800abb2:	2401      	movle	r4, #1
 800abb4:	2b03      	cmp	r3, #3
 800abb6:	d863      	bhi.n	800ac80 <_dtoa_r+0x298>
 800abb8:	e8df f003 	tbb	[pc, r3]
 800abbc:	2b375452 	.word	0x2b375452
 800abc0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800abc4:	441e      	add	r6, r3
 800abc6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800abca:	2b20      	cmp	r3, #32
 800abcc:	bfc1      	itttt	gt
 800abce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800abd2:	409f      	lslgt	r7, r3
 800abd4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800abd8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800abdc:	bfd6      	itet	le
 800abde:	f1c3 0320 	rsble	r3, r3, #32
 800abe2:	ea47 0003 	orrgt.w	r0, r7, r3
 800abe6:	fa04 f003 	lslle.w	r0, r4, r3
 800abea:	f7f5 fc8b 	bl	8000504 <__aeabi_ui2d>
 800abee:	2201      	movs	r2, #1
 800abf0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800abf4:	3e01      	subs	r6, #1
 800abf6:	9212      	str	r2, [sp, #72]	@ 0x48
 800abf8:	e776      	b.n	800aae8 <_dtoa_r+0x100>
 800abfa:	2301      	movs	r3, #1
 800abfc:	e7b7      	b.n	800ab6e <_dtoa_r+0x186>
 800abfe:	9010      	str	r0, [sp, #64]	@ 0x40
 800ac00:	e7b6      	b.n	800ab70 <_dtoa_r+0x188>
 800ac02:	9b00      	ldr	r3, [sp, #0]
 800ac04:	1bdb      	subs	r3, r3, r7
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	427b      	negs	r3, r7
 800ac0a:	9308      	str	r3, [sp, #32]
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ac10:	e7c3      	b.n	800ab9a <_dtoa_r+0x1b2>
 800ac12:	2301      	movs	r3, #1
 800ac14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac18:	eb07 0b03 	add.w	fp, r7, r3
 800ac1c:	f10b 0301 	add.w	r3, fp, #1
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	9303      	str	r3, [sp, #12]
 800ac24:	bfb8      	it	lt
 800ac26:	2301      	movlt	r3, #1
 800ac28:	e006      	b.n	800ac38 <_dtoa_r+0x250>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	dd28      	ble.n	800ac86 <_dtoa_r+0x29e>
 800ac34:	469b      	mov	fp, r3
 800ac36:	9303      	str	r3, [sp, #12]
 800ac38:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	2204      	movs	r2, #4
 800ac40:	f102 0514 	add.w	r5, r2, #20
 800ac44:	429d      	cmp	r5, r3
 800ac46:	d926      	bls.n	800ac96 <_dtoa_r+0x2ae>
 800ac48:	6041      	str	r1, [r0, #4]
 800ac4a:	4648      	mov	r0, r9
 800ac4c:	f001 f8e8 	bl	800be20 <_Balloc>
 800ac50:	4682      	mov	sl, r0
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d142      	bne.n	800acdc <_dtoa_r+0x2f4>
 800ac56:	4b1e      	ldr	r3, [pc, #120]	@ (800acd0 <_dtoa_r+0x2e8>)
 800ac58:	4602      	mov	r2, r0
 800ac5a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac5e:	e6da      	b.n	800aa16 <_dtoa_r+0x2e>
 800ac60:	2300      	movs	r3, #0
 800ac62:	e7e3      	b.n	800ac2c <_dtoa_r+0x244>
 800ac64:	2300      	movs	r3, #0
 800ac66:	e7d5      	b.n	800ac14 <_dtoa_r+0x22c>
 800ac68:	2401      	movs	r4, #1
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	9307      	str	r3, [sp, #28]
 800ac6e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ac70:	f04f 3bff 	mov.w	fp, #4294967295
 800ac74:	2200      	movs	r2, #0
 800ac76:	f8cd b00c 	str.w	fp, [sp, #12]
 800ac7a:	2312      	movs	r3, #18
 800ac7c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ac7e:	e7db      	b.n	800ac38 <_dtoa_r+0x250>
 800ac80:	2301      	movs	r3, #1
 800ac82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac84:	e7f4      	b.n	800ac70 <_dtoa_r+0x288>
 800ac86:	f04f 0b01 	mov.w	fp, #1
 800ac8a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ac8e:	465b      	mov	r3, fp
 800ac90:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ac94:	e7d0      	b.n	800ac38 <_dtoa_r+0x250>
 800ac96:	3101      	adds	r1, #1
 800ac98:	0052      	lsls	r2, r2, #1
 800ac9a:	e7d1      	b.n	800ac40 <_dtoa_r+0x258>
 800ac9c:	f3af 8000 	nop.w
 800aca0:	636f4361 	.word	0x636f4361
 800aca4:	3fd287a7 	.word	0x3fd287a7
 800aca8:	8b60c8b3 	.word	0x8b60c8b3
 800acac:	3fc68a28 	.word	0x3fc68a28
 800acb0:	509f79fb 	.word	0x509f79fb
 800acb4:	3fd34413 	.word	0x3fd34413
 800acb8:	0800d43c 	.word	0x0800d43c
 800acbc:	0800d453 	.word	0x0800d453
 800acc0:	7ff00000 	.word	0x7ff00000
 800acc4:	0800d3ff 	.word	0x0800d3ff
 800acc8:	3ff80000 	.word	0x3ff80000
 800accc:	0800d650 	.word	0x0800d650
 800acd0:	0800d4ab 	.word	0x0800d4ab
 800acd4:	0800d438 	.word	0x0800d438
 800acd8:	0800d3fe 	.word	0x0800d3fe
 800acdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ace0:	6018      	str	r0, [r3, #0]
 800ace2:	9b03      	ldr	r3, [sp, #12]
 800ace4:	2b0e      	cmp	r3, #14
 800ace6:	f200 80a1 	bhi.w	800ae2c <_dtoa_r+0x444>
 800acea:	2c00      	cmp	r4, #0
 800acec:	f000 809e 	beq.w	800ae2c <_dtoa_r+0x444>
 800acf0:	2f00      	cmp	r7, #0
 800acf2:	dd33      	ble.n	800ad5c <_dtoa_r+0x374>
 800acf4:	4b9c      	ldr	r3, [pc, #624]	@ (800af68 <_dtoa_r+0x580>)
 800acf6:	f007 020f 	and.w	r2, r7, #15
 800acfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acfe:	ed93 7b00 	vldr	d7, [r3]
 800ad02:	05f8      	lsls	r0, r7, #23
 800ad04:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ad08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ad0c:	d516      	bpl.n	800ad3c <_dtoa_r+0x354>
 800ad0e:	4b97      	ldr	r3, [pc, #604]	@ (800af6c <_dtoa_r+0x584>)
 800ad10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ad14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad18:	f7f5 fd98 	bl	800084c <__aeabi_ddiv>
 800ad1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad20:	f004 040f 	and.w	r4, r4, #15
 800ad24:	2603      	movs	r6, #3
 800ad26:	4d91      	ldr	r5, [pc, #580]	@ (800af6c <_dtoa_r+0x584>)
 800ad28:	b954      	cbnz	r4, 800ad40 <_dtoa_r+0x358>
 800ad2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad32:	f7f5 fd8b 	bl	800084c <__aeabi_ddiv>
 800ad36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad3a:	e028      	b.n	800ad8e <_dtoa_r+0x3a6>
 800ad3c:	2602      	movs	r6, #2
 800ad3e:	e7f2      	b.n	800ad26 <_dtoa_r+0x33e>
 800ad40:	07e1      	lsls	r1, r4, #31
 800ad42:	d508      	bpl.n	800ad56 <_dtoa_r+0x36e>
 800ad44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ad48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad4c:	f7f5 fc54 	bl	80005f8 <__aeabi_dmul>
 800ad50:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ad54:	3601      	adds	r6, #1
 800ad56:	1064      	asrs	r4, r4, #1
 800ad58:	3508      	adds	r5, #8
 800ad5a:	e7e5      	b.n	800ad28 <_dtoa_r+0x340>
 800ad5c:	f000 80af 	beq.w	800aebe <_dtoa_r+0x4d6>
 800ad60:	427c      	negs	r4, r7
 800ad62:	4b81      	ldr	r3, [pc, #516]	@ (800af68 <_dtoa_r+0x580>)
 800ad64:	4d81      	ldr	r5, [pc, #516]	@ (800af6c <_dtoa_r+0x584>)
 800ad66:	f004 020f 	and.w	r2, r4, #15
 800ad6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ad76:	f7f5 fc3f 	bl	80005f8 <__aeabi_dmul>
 800ad7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad7e:	1124      	asrs	r4, r4, #4
 800ad80:	2300      	movs	r3, #0
 800ad82:	2602      	movs	r6, #2
 800ad84:	2c00      	cmp	r4, #0
 800ad86:	f040 808f 	bne.w	800aea8 <_dtoa_r+0x4c0>
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1d3      	bne.n	800ad36 <_dtoa_r+0x34e>
 800ad8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad90:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f000 8094 	beq.w	800aec2 <_dtoa_r+0x4da>
 800ad9a:	4b75      	ldr	r3, [pc, #468]	@ (800af70 <_dtoa_r+0x588>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	4620      	mov	r0, r4
 800ada0:	4629      	mov	r1, r5
 800ada2:	f7f5 fe9b 	bl	8000adc <__aeabi_dcmplt>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	f000 808b 	beq.w	800aec2 <_dtoa_r+0x4da>
 800adac:	9b03      	ldr	r3, [sp, #12]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f000 8087 	beq.w	800aec2 <_dtoa_r+0x4da>
 800adb4:	f1bb 0f00 	cmp.w	fp, #0
 800adb8:	dd34      	ble.n	800ae24 <_dtoa_r+0x43c>
 800adba:	4620      	mov	r0, r4
 800adbc:	4b6d      	ldr	r3, [pc, #436]	@ (800af74 <_dtoa_r+0x58c>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	4629      	mov	r1, r5
 800adc2:	f7f5 fc19 	bl	80005f8 <__aeabi_dmul>
 800adc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adca:	f107 38ff 	add.w	r8, r7, #4294967295
 800adce:	3601      	adds	r6, #1
 800add0:	465c      	mov	r4, fp
 800add2:	4630      	mov	r0, r6
 800add4:	f7f5 fba6 	bl	8000524 <__aeabi_i2d>
 800add8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800addc:	f7f5 fc0c 	bl	80005f8 <__aeabi_dmul>
 800ade0:	4b65      	ldr	r3, [pc, #404]	@ (800af78 <_dtoa_r+0x590>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	f7f5 fa52 	bl	800028c <__adddf3>
 800ade8:	4605      	mov	r5, r0
 800adea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800adee:	2c00      	cmp	r4, #0
 800adf0:	d16a      	bne.n	800aec8 <_dtoa_r+0x4e0>
 800adf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adf6:	4b61      	ldr	r3, [pc, #388]	@ (800af7c <_dtoa_r+0x594>)
 800adf8:	2200      	movs	r2, #0
 800adfa:	f7f5 fa45 	bl	8000288 <__aeabi_dsub>
 800adfe:	4602      	mov	r2, r0
 800ae00:	460b      	mov	r3, r1
 800ae02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae06:	462a      	mov	r2, r5
 800ae08:	4633      	mov	r3, r6
 800ae0a:	f7f5 fe85 	bl	8000b18 <__aeabi_dcmpgt>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	f040 8298 	bne.w	800b344 <_dtoa_r+0x95c>
 800ae14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae18:	462a      	mov	r2, r5
 800ae1a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ae1e:	f7f5 fe5d 	bl	8000adc <__aeabi_dcmplt>
 800ae22:	bb38      	cbnz	r0, 800ae74 <_dtoa_r+0x48c>
 800ae24:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ae28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f2c0 8157 	blt.w	800b0e2 <_dtoa_r+0x6fa>
 800ae34:	2f0e      	cmp	r7, #14
 800ae36:	f300 8154 	bgt.w	800b0e2 <_dtoa_r+0x6fa>
 800ae3a:	4b4b      	ldr	r3, [pc, #300]	@ (800af68 <_dtoa_r+0x580>)
 800ae3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae40:	ed93 7b00 	vldr	d7, [r3]
 800ae44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	ed8d 7b00 	vstr	d7, [sp]
 800ae4c:	f280 80e5 	bge.w	800b01a <_dtoa_r+0x632>
 800ae50:	9b03      	ldr	r3, [sp, #12]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f300 80e1 	bgt.w	800b01a <_dtoa_r+0x632>
 800ae58:	d10c      	bne.n	800ae74 <_dtoa_r+0x48c>
 800ae5a:	4b48      	ldr	r3, [pc, #288]	@ (800af7c <_dtoa_r+0x594>)
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	ec51 0b17 	vmov	r0, r1, d7
 800ae62:	f7f5 fbc9 	bl	80005f8 <__aeabi_dmul>
 800ae66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae6a:	f7f5 fe4b 	bl	8000b04 <__aeabi_dcmpge>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f000 8266 	beq.w	800b340 <_dtoa_r+0x958>
 800ae74:	2400      	movs	r4, #0
 800ae76:	4625      	mov	r5, r4
 800ae78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae7a:	4656      	mov	r6, sl
 800ae7c:	ea6f 0803 	mvn.w	r8, r3
 800ae80:	2700      	movs	r7, #0
 800ae82:	4621      	mov	r1, r4
 800ae84:	4648      	mov	r0, r9
 800ae86:	f001 f80b 	bl	800bea0 <_Bfree>
 800ae8a:	2d00      	cmp	r5, #0
 800ae8c:	f000 80bd 	beq.w	800b00a <_dtoa_r+0x622>
 800ae90:	b12f      	cbz	r7, 800ae9e <_dtoa_r+0x4b6>
 800ae92:	42af      	cmp	r7, r5
 800ae94:	d003      	beq.n	800ae9e <_dtoa_r+0x4b6>
 800ae96:	4639      	mov	r1, r7
 800ae98:	4648      	mov	r0, r9
 800ae9a:	f001 f801 	bl	800bea0 <_Bfree>
 800ae9e:	4629      	mov	r1, r5
 800aea0:	4648      	mov	r0, r9
 800aea2:	f000 fffd 	bl	800bea0 <_Bfree>
 800aea6:	e0b0      	b.n	800b00a <_dtoa_r+0x622>
 800aea8:	07e2      	lsls	r2, r4, #31
 800aeaa:	d505      	bpl.n	800aeb8 <_dtoa_r+0x4d0>
 800aeac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aeb0:	f7f5 fba2 	bl	80005f8 <__aeabi_dmul>
 800aeb4:	3601      	adds	r6, #1
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	1064      	asrs	r4, r4, #1
 800aeba:	3508      	adds	r5, #8
 800aebc:	e762      	b.n	800ad84 <_dtoa_r+0x39c>
 800aebe:	2602      	movs	r6, #2
 800aec0:	e765      	b.n	800ad8e <_dtoa_r+0x3a6>
 800aec2:	9c03      	ldr	r4, [sp, #12]
 800aec4:	46b8      	mov	r8, r7
 800aec6:	e784      	b.n	800add2 <_dtoa_r+0x3ea>
 800aec8:	4b27      	ldr	r3, [pc, #156]	@ (800af68 <_dtoa_r+0x580>)
 800aeca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aecc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aed0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aed4:	4454      	add	r4, sl
 800aed6:	2900      	cmp	r1, #0
 800aed8:	d054      	beq.n	800af84 <_dtoa_r+0x59c>
 800aeda:	4929      	ldr	r1, [pc, #164]	@ (800af80 <_dtoa_r+0x598>)
 800aedc:	2000      	movs	r0, #0
 800aede:	f7f5 fcb5 	bl	800084c <__aeabi_ddiv>
 800aee2:	4633      	mov	r3, r6
 800aee4:	462a      	mov	r2, r5
 800aee6:	f7f5 f9cf 	bl	8000288 <__aeabi_dsub>
 800aeea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aeee:	4656      	mov	r6, sl
 800aef0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aef4:	f7f5 fe30 	bl	8000b58 <__aeabi_d2iz>
 800aef8:	4605      	mov	r5, r0
 800aefa:	f7f5 fb13 	bl	8000524 <__aeabi_i2d>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af06:	f7f5 f9bf 	bl	8000288 <__aeabi_dsub>
 800af0a:	3530      	adds	r5, #48	@ 0x30
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af14:	f806 5b01 	strb.w	r5, [r6], #1
 800af18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800af1c:	f7f5 fdde 	bl	8000adc <__aeabi_dcmplt>
 800af20:	2800      	cmp	r0, #0
 800af22:	d172      	bne.n	800b00a <_dtoa_r+0x622>
 800af24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af28:	4911      	ldr	r1, [pc, #68]	@ (800af70 <_dtoa_r+0x588>)
 800af2a:	2000      	movs	r0, #0
 800af2c:	f7f5 f9ac 	bl	8000288 <__aeabi_dsub>
 800af30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800af34:	f7f5 fdd2 	bl	8000adc <__aeabi_dcmplt>
 800af38:	2800      	cmp	r0, #0
 800af3a:	f040 80b4 	bne.w	800b0a6 <_dtoa_r+0x6be>
 800af3e:	42a6      	cmp	r6, r4
 800af40:	f43f af70 	beq.w	800ae24 <_dtoa_r+0x43c>
 800af44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800af48:	4b0a      	ldr	r3, [pc, #40]	@ (800af74 <_dtoa_r+0x58c>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	f7f5 fb54 	bl	80005f8 <__aeabi_dmul>
 800af50:	4b08      	ldr	r3, [pc, #32]	@ (800af74 <_dtoa_r+0x58c>)
 800af52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800af56:	2200      	movs	r2, #0
 800af58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af5c:	f7f5 fb4c 	bl	80005f8 <__aeabi_dmul>
 800af60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af64:	e7c4      	b.n	800aef0 <_dtoa_r+0x508>
 800af66:	bf00      	nop
 800af68:	0800d650 	.word	0x0800d650
 800af6c:	0800d628 	.word	0x0800d628
 800af70:	3ff00000 	.word	0x3ff00000
 800af74:	40240000 	.word	0x40240000
 800af78:	401c0000 	.word	0x401c0000
 800af7c:	40140000 	.word	0x40140000
 800af80:	3fe00000 	.word	0x3fe00000
 800af84:	4631      	mov	r1, r6
 800af86:	4628      	mov	r0, r5
 800af88:	f7f5 fb36 	bl	80005f8 <__aeabi_dmul>
 800af8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800af90:	9413      	str	r4, [sp, #76]	@ 0x4c
 800af92:	4656      	mov	r6, sl
 800af94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af98:	f7f5 fdde 	bl	8000b58 <__aeabi_d2iz>
 800af9c:	4605      	mov	r5, r0
 800af9e:	f7f5 fac1 	bl	8000524 <__aeabi_i2d>
 800afa2:	4602      	mov	r2, r0
 800afa4:	460b      	mov	r3, r1
 800afa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afaa:	f7f5 f96d 	bl	8000288 <__aeabi_dsub>
 800afae:	3530      	adds	r5, #48	@ 0x30
 800afb0:	f806 5b01 	strb.w	r5, [r6], #1
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	42a6      	cmp	r6, r4
 800afba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afbe:	f04f 0200 	mov.w	r2, #0
 800afc2:	d124      	bne.n	800b00e <_dtoa_r+0x626>
 800afc4:	4baf      	ldr	r3, [pc, #700]	@ (800b284 <_dtoa_r+0x89c>)
 800afc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800afca:	f7f5 f95f 	bl	800028c <__adddf3>
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afd6:	f7f5 fd9f 	bl	8000b18 <__aeabi_dcmpgt>
 800afda:	2800      	cmp	r0, #0
 800afdc:	d163      	bne.n	800b0a6 <_dtoa_r+0x6be>
 800afde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800afe2:	49a8      	ldr	r1, [pc, #672]	@ (800b284 <_dtoa_r+0x89c>)
 800afe4:	2000      	movs	r0, #0
 800afe6:	f7f5 f94f 	bl	8000288 <__aeabi_dsub>
 800afea:	4602      	mov	r2, r0
 800afec:	460b      	mov	r3, r1
 800afee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aff2:	f7f5 fd73 	bl	8000adc <__aeabi_dcmplt>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	f43f af14 	beq.w	800ae24 <_dtoa_r+0x43c>
 800affc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800affe:	1e73      	subs	r3, r6, #1
 800b000:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b002:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b006:	2b30      	cmp	r3, #48	@ 0x30
 800b008:	d0f8      	beq.n	800affc <_dtoa_r+0x614>
 800b00a:	4647      	mov	r7, r8
 800b00c:	e03b      	b.n	800b086 <_dtoa_r+0x69e>
 800b00e:	4b9e      	ldr	r3, [pc, #632]	@ (800b288 <_dtoa_r+0x8a0>)
 800b010:	f7f5 faf2 	bl	80005f8 <__aeabi_dmul>
 800b014:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b018:	e7bc      	b.n	800af94 <_dtoa_r+0x5ac>
 800b01a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b01e:	4656      	mov	r6, sl
 800b020:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b024:	4620      	mov	r0, r4
 800b026:	4629      	mov	r1, r5
 800b028:	f7f5 fc10 	bl	800084c <__aeabi_ddiv>
 800b02c:	f7f5 fd94 	bl	8000b58 <__aeabi_d2iz>
 800b030:	4680      	mov	r8, r0
 800b032:	f7f5 fa77 	bl	8000524 <__aeabi_i2d>
 800b036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b03a:	f7f5 fadd 	bl	80005f8 <__aeabi_dmul>
 800b03e:	4602      	mov	r2, r0
 800b040:	460b      	mov	r3, r1
 800b042:	4620      	mov	r0, r4
 800b044:	4629      	mov	r1, r5
 800b046:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b04a:	f7f5 f91d 	bl	8000288 <__aeabi_dsub>
 800b04e:	f806 4b01 	strb.w	r4, [r6], #1
 800b052:	9d03      	ldr	r5, [sp, #12]
 800b054:	eba6 040a 	sub.w	r4, r6, sl
 800b058:	42a5      	cmp	r5, r4
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	d133      	bne.n	800b0c8 <_dtoa_r+0x6e0>
 800b060:	f7f5 f914 	bl	800028c <__adddf3>
 800b064:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b068:	4604      	mov	r4, r0
 800b06a:	460d      	mov	r5, r1
 800b06c:	f7f5 fd54 	bl	8000b18 <__aeabi_dcmpgt>
 800b070:	b9c0      	cbnz	r0, 800b0a4 <_dtoa_r+0x6bc>
 800b072:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b076:	4620      	mov	r0, r4
 800b078:	4629      	mov	r1, r5
 800b07a:	f7f5 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800b07e:	b110      	cbz	r0, 800b086 <_dtoa_r+0x69e>
 800b080:	f018 0f01 	tst.w	r8, #1
 800b084:	d10e      	bne.n	800b0a4 <_dtoa_r+0x6bc>
 800b086:	9902      	ldr	r1, [sp, #8]
 800b088:	4648      	mov	r0, r9
 800b08a:	f000 ff09 	bl	800bea0 <_Bfree>
 800b08e:	2300      	movs	r3, #0
 800b090:	7033      	strb	r3, [r6, #0]
 800b092:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b094:	3701      	adds	r7, #1
 800b096:	601f      	str	r7, [r3, #0]
 800b098:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f000 824b 	beq.w	800b536 <_dtoa_r+0xb4e>
 800b0a0:	601e      	str	r6, [r3, #0]
 800b0a2:	e248      	b.n	800b536 <_dtoa_r+0xb4e>
 800b0a4:	46b8      	mov	r8, r7
 800b0a6:	4633      	mov	r3, r6
 800b0a8:	461e      	mov	r6, r3
 800b0aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0ae:	2a39      	cmp	r2, #57	@ 0x39
 800b0b0:	d106      	bne.n	800b0c0 <_dtoa_r+0x6d8>
 800b0b2:	459a      	cmp	sl, r3
 800b0b4:	d1f8      	bne.n	800b0a8 <_dtoa_r+0x6c0>
 800b0b6:	2230      	movs	r2, #48	@ 0x30
 800b0b8:	f108 0801 	add.w	r8, r8, #1
 800b0bc:	f88a 2000 	strb.w	r2, [sl]
 800b0c0:	781a      	ldrb	r2, [r3, #0]
 800b0c2:	3201      	adds	r2, #1
 800b0c4:	701a      	strb	r2, [r3, #0]
 800b0c6:	e7a0      	b.n	800b00a <_dtoa_r+0x622>
 800b0c8:	4b6f      	ldr	r3, [pc, #444]	@ (800b288 <_dtoa_r+0x8a0>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f7f5 fa94 	bl	80005f8 <__aeabi_dmul>
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	460d      	mov	r5, r1
 800b0d8:	f7f5 fcf6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d09f      	beq.n	800b020 <_dtoa_r+0x638>
 800b0e0:	e7d1      	b.n	800b086 <_dtoa_r+0x69e>
 800b0e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0e4:	2a00      	cmp	r2, #0
 800b0e6:	f000 80ea 	beq.w	800b2be <_dtoa_r+0x8d6>
 800b0ea:	9a07      	ldr	r2, [sp, #28]
 800b0ec:	2a01      	cmp	r2, #1
 800b0ee:	f300 80cd 	bgt.w	800b28c <_dtoa_r+0x8a4>
 800b0f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b0f4:	2a00      	cmp	r2, #0
 800b0f6:	f000 80c1 	beq.w	800b27c <_dtoa_r+0x894>
 800b0fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b0fe:	9c08      	ldr	r4, [sp, #32]
 800b100:	9e00      	ldr	r6, [sp, #0]
 800b102:	9a00      	ldr	r2, [sp, #0]
 800b104:	441a      	add	r2, r3
 800b106:	9200      	str	r2, [sp, #0]
 800b108:	9a06      	ldr	r2, [sp, #24]
 800b10a:	2101      	movs	r1, #1
 800b10c:	441a      	add	r2, r3
 800b10e:	4648      	mov	r0, r9
 800b110:	9206      	str	r2, [sp, #24]
 800b112:	f000 ffc3 	bl	800c09c <__i2b>
 800b116:	4605      	mov	r5, r0
 800b118:	b166      	cbz	r6, 800b134 <_dtoa_r+0x74c>
 800b11a:	9b06      	ldr	r3, [sp, #24]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	dd09      	ble.n	800b134 <_dtoa_r+0x74c>
 800b120:	42b3      	cmp	r3, r6
 800b122:	9a00      	ldr	r2, [sp, #0]
 800b124:	bfa8      	it	ge
 800b126:	4633      	movge	r3, r6
 800b128:	1ad2      	subs	r2, r2, r3
 800b12a:	9200      	str	r2, [sp, #0]
 800b12c:	9a06      	ldr	r2, [sp, #24]
 800b12e:	1af6      	subs	r6, r6, r3
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	9306      	str	r3, [sp, #24]
 800b134:	9b08      	ldr	r3, [sp, #32]
 800b136:	b30b      	cbz	r3, 800b17c <_dtoa_r+0x794>
 800b138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 80c6 	beq.w	800b2cc <_dtoa_r+0x8e4>
 800b140:	2c00      	cmp	r4, #0
 800b142:	f000 80c0 	beq.w	800b2c6 <_dtoa_r+0x8de>
 800b146:	4629      	mov	r1, r5
 800b148:	4622      	mov	r2, r4
 800b14a:	4648      	mov	r0, r9
 800b14c:	f001 f85e 	bl	800c20c <__pow5mult>
 800b150:	9a02      	ldr	r2, [sp, #8]
 800b152:	4601      	mov	r1, r0
 800b154:	4605      	mov	r5, r0
 800b156:	4648      	mov	r0, r9
 800b158:	f000 ffb6 	bl	800c0c8 <__multiply>
 800b15c:	9902      	ldr	r1, [sp, #8]
 800b15e:	4680      	mov	r8, r0
 800b160:	4648      	mov	r0, r9
 800b162:	f000 fe9d 	bl	800bea0 <_Bfree>
 800b166:	9b08      	ldr	r3, [sp, #32]
 800b168:	1b1b      	subs	r3, r3, r4
 800b16a:	9308      	str	r3, [sp, #32]
 800b16c:	f000 80b1 	beq.w	800b2d2 <_dtoa_r+0x8ea>
 800b170:	9a08      	ldr	r2, [sp, #32]
 800b172:	4641      	mov	r1, r8
 800b174:	4648      	mov	r0, r9
 800b176:	f001 f849 	bl	800c20c <__pow5mult>
 800b17a:	9002      	str	r0, [sp, #8]
 800b17c:	2101      	movs	r1, #1
 800b17e:	4648      	mov	r0, r9
 800b180:	f000 ff8c 	bl	800c09c <__i2b>
 800b184:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b186:	4604      	mov	r4, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 81d8 	beq.w	800b53e <_dtoa_r+0xb56>
 800b18e:	461a      	mov	r2, r3
 800b190:	4601      	mov	r1, r0
 800b192:	4648      	mov	r0, r9
 800b194:	f001 f83a 	bl	800c20c <__pow5mult>
 800b198:	9b07      	ldr	r3, [sp, #28]
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	4604      	mov	r4, r0
 800b19e:	f300 809f 	bgt.w	800b2e0 <_dtoa_r+0x8f8>
 800b1a2:	9b04      	ldr	r3, [sp, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f040 8097 	bne.w	800b2d8 <_dtoa_r+0x8f0>
 800b1aa:	9b05      	ldr	r3, [sp, #20]
 800b1ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f040 8093 	bne.w	800b2dc <_dtoa_r+0x8f4>
 800b1b6:	9b05      	ldr	r3, [sp, #20]
 800b1b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1bc:	0d1b      	lsrs	r3, r3, #20
 800b1be:	051b      	lsls	r3, r3, #20
 800b1c0:	b133      	cbz	r3, 800b1d0 <_dtoa_r+0x7e8>
 800b1c2:	9b00      	ldr	r3, [sp, #0]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	9b06      	ldr	r3, [sp, #24]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	9306      	str	r3, [sp, #24]
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	9308      	str	r3, [sp, #32]
 800b1d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 81b8 	beq.w	800b54a <_dtoa_r+0xb62>
 800b1da:	6923      	ldr	r3, [r4, #16]
 800b1dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1e0:	6918      	ldr	r0, [r3, #16]
 800b1e2:	f000 ff0f 	bl	800c004 <__hi0bits>
 800b1e6:	f1c0 0020 	rsb	r0, r0, #32
 800b1ea:	9b06      	ldr	r3, [sp, #24]
 800b1ec:	4418      	add	r0, r3
 800b1ee:	f010 001f 	ands.w	r0, r0, #31
 800b1f2:	f000 8082 	beq.w	800b2fa <_dtoa_r+0x912>
 800b1f6:	f1c0 0320 	rsb	r3, r0, #32
 800b1fa:	2b04      	cmp	r3, #4
 800b1fc:	dd73      	ble.n	800b2e6 <_dtoa_r+0x8fe>
 800b1fe:	9b00      	ldr	r3, [sp, #0]
 800b200:	f1c0 001c 	rsb	r0, r0, #28
 800b204:	4403      	add	r3, r0
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	9b06      	ldr	r3, [sp, #24]
 800b20a:	4403      	add	r3, r0
 800b20c:	4406      	add	r6, r0
 800b20e:	9306      	str	r3, [sp, #24]
 800b210:	9b00      	ldr	r3, [sp, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	dd05      	ble.n	800b222 <_dtoa_r+0x83a>
 800b216:	9902      	ldr	r1, [sp, #8]
 800b218:	461a      	mov	r2, r3
 800b21a:	4648      	mov	r0, r9
 800b21c:	f001 f850 	bl	800c2c0 <__lshift>
 800b220:	9002      	str	r0, [sp, #8]
 800b222:	9b06      	ldr	r3, [sp, #24]
 800b224:	2b00      	cmp	r3, #0
 800b226:	dd05      	ble.n	800b234 <_dtoa_r+0x84c>
 800b228:	4621      	mov	r1, r4
 800b22a:	461a      	mov	r2, r3
 800b22c:	4648      	mov	r0, r9
 800b22e:	f001 f847 	bl	800c2c0 <__lshift>
 800b232:	4604      	mov	r4, r0
 800b234:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b236:	2b00      	cmp	r3, #0
 800b238:	d061      	beq.n	800b2fe <_dtoa_r+0x916>
 800b23a:	9802      	ldr	r0, [sp, #8]
 800b23c:	4621      	mov	r1, r4
 800b23e:	f001 f8ab 	bl	800c398 <__mcmp>
 800b242:	2800      	cmp	r0, #0
 800b244:	da5b      	bge.n	800b2fe <_dtoa_r+0x916>
 800b246:	2300      	movs	r3, #0
 800b248:	9902      	ldr	r1, [sp, #8]
 800b24a:	220a      	movs	r2, #10
 800b24c:	4648      	mov	r0, r9
 800b24e:	f000 fe49 	bl	800bee4 <__multadd>
 800b252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b254:	9002      	str	r0, [sp, #8]
 800b256:	f107 38ff 	add.w	r8, r7, #4294967295
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f000 8177 	beq.w	800b54e <_dtoa_r+0xb66>
 800b260:	4629      	mov	r1, r5
 800b262:	2300      	movs	r3, #0
 800b264:	220a      	movs	r2, #10
 800b266:	4648      	mov	r0, r9
 800b268:	f000 fe3c 	bl	800bee4 <__multadd>
 800b26c:	f1bb 0f00 	cmp.w	fp, #0
 800b270:	4605      	mov	r5, r0
 800b272:	dc6f      	bgt.n	800b354 <_dtoa_r+0x96c>
 800b274:	9b07      	ldr	r3, [sp, #28]
 800b276:	2b02      	cmp	r3, #2
 800b278:	dc49      	bgt.n	800b30e <_dtoa_r+0x926>
 800b27a:	e06b      	b.n	800b354 <_dtoa_r+0x96c>
 800b27c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b27e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b282:	e73c      	b.n	800b0fe <_dtoa_r+0x716>
 800b284:	3fe00000 	.word	0x3fe00000
 800b288:	40240000 	.word	0x40240000
 800b28c:	9b03      	ldr	r3, [sp, #12]
 800b28e:	1e5c      	subs	r4, r3, #1
 800b290:	9b08      	ldr	r3, [sp, #32]
 800b292:	42a3      	cmp	r3, r4
 800b294:	db09      	blt.n	800b2aa <_dtoa_r+0x8c2>
 800b296:	1b1c      	subs	r4, r3, r4
 800b298:	9b03      	ldr	r3, [sp, #12]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f6bf af30 	bge.w	800b100 <_dtoa_r+0x718>
 800b2a0:	9b00      	ldr	r3, [sp, #0]
 800b2a2:	9a03      	ldr	r2, [sp, #12]
 800b2a4:	1a9e      	subs	r6, r3, r2
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	e72b      	b.n	800b102 <_dtoa_r+0x71a>
 800b2aa:	9b08      	ldr	r3, [sp, #32]
 800b2ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2ae:	9408      	str	r4, [sp, #32]
 800b2b0:	1ae3      	subs	r3, r4, r3
 800b2b2:	441a      	add	r2, r3
 800b2b4:	9e00      	ldr	r6, [sp, #0]
 800b2b6:	9b03      	ldr	r3, [sp, #12]
 800b2b8:	920d      	str	r2, [sp, #52]	@ 0x34
 800b2ba:	2400      	movs	r4, #0
 800b2bc:	e721      	b.n	800b102 <_dtoa_r+0x71a>
 800b2be:	9c08      	ldr	r4, [sp, #32]
 800b2c0:	9e00      	ldr	r6, [sp, #0]
 800b2c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b2c4:	e728      	b.n	800b118 <_dtoa_r+0x730>
 800b2c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b2ca:	e751      	b.n	800b170 <_dtoa_r+0x788>
 800b2cc:	9a08      	ldr	r2, [sp, #32]
 800b2ce:	9902      	ldr	r1, [sp, #8]
 800b2d0:	e750      	b.n	800b174 <_dtoa_r+0x78c>
 800b2d2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b2d6:	e751      	b.n	800b17c <_dtoa_r+0x794>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	e779      	b.n	800b1d0 <_dtoa_r+0x7e8>
 800b2dc:	9b04      	ldr	r3, [sp, #16]
 800b2de:	e777      	b.n	800b1d0 <_dtoa_r+0x7e8>
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	9308      	str	r3, [sp, #32]
 800b2e4:	e779      	b.n	800b1da <_dtoa_r+0x7f2>
 800b2e6:	d093      	beq.n	800b210 <_dtoa_r+0x828>
 800b2e8:	9a00      	ldr	r2, [sp, #0]
 800b2ea:	331c      	adds	r3, #28
 800b2ec:	441a      	add	r2, r3
 800b2ee:	9200      	str	r2, [sp, #0]
 800b2f0:	9a06      	ldr	r2, [sp, #24]
 800b2f2:	441a      	add	r2, r3
 800b2f4:	441e      	add	r6, r3
 800b2f6:	9206      	str	r2, [sp, #24]
 800b2f8:	e78a      	b.n	800b210 <_dtoa_r+0x828>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	e7f4      	b.n	800b2e8 <_dtoa_r+0x900>
 800b2fe:	9b03      	ldr	r3, [sp, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	46b8      	mov	r8, r7
 800b304:	dc20      	bgt.n	800b348 <_dtoa_r+0x960>
 800b306:	469b      	mov	fp, r3
 800b308:	9b07      	ldr	r3, [sp, #28]
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	dd1e      	ble.n	800b34c <_dtoa_r+0x964>
 800b30e:	f1bb 0f00 	cmp.w	fp, #0
 800b312:	f47f adb1 	bne.w	800ae78 <_dtoa_r+0x490>
 800b316:	4621      	mov	r1, r4
 800b318:	465b      	mov	r3, fp
 800b31a:	2205      	movs	r2, #5
 800b31c:	4648      	mov	r0, r9
 800b31e:	f000 fde1 	bl	800bee4 <__multadd>
 800b322:	4601      	mov	r1, r0
 800b324:	4604      	mov	r4, r0
 800b326:	9802      	ldr	r0, [sp, #8]
 800b328:	f001 f836 	bl	800c398 <__mcmp>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	f77f ada3 	ble.w	800ae78 <_dtoa_r+0x490>
 800b332:	4656      	mov	r6, sl
 800b334:	2331      	movs	r3, #49	@ 0x31
 800b336:	f806 3b01 	strb.w	r3, [r6], #1
 800b33a:	f108 0801 	add.w	r8, r8, #1
 800b33e:	e59f      	b.n	800ae80 <_dtoa_r+0x498>
 800b340:	9c03      	ldr	r4, [sp, #12]
 800b342:	46b8      	mov	r8, r7
 800b344:	4625      	mov	r5, r4
 800b346:	e7f4      	b.n	800b332 <_dtoa_r+0x94a>
 800b348:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f000 8101 	beq.w	800b556 <_dtoa_r+0xb6e>
 800b354:	2e00      	cmp	r6, #0
 800b356:	dd05      	ble.n	800b364 <_dtoa_r+0x97c>
 800b358:	4629      	mov	r1, r5
 800b35a:	4632      	mov	r2, r6
 800b35c:	4648      	mov	r0, r9
 800b35e:	f000 ffaf 	bl	800c2c0 <__lshift>
 800b362:	4605      	mov	r5, r0
 800b364:	9b08      	ldr	r3, [sp, #32]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d05c      	beq.n	800b424 <_dtoa_r+0xa3c>
 800b36a:	6869      	ldr	r1, [r5, #4]
 800b36c:	4648      	mov	r0, r9
 800b36e:	f000 fd57 	bl	800be20 <_Balloc>
 800b372:	4606      	mov	r6, r0
 800b374:	b928      	cbnz	r0, 800b382 <_dtoa_r+0x99a>
 800b376:	4b82      	ldr	r3, [pc, #520]	@ (800b580 <_dtoa_r+0xb98>)
 800b378:	4602      	mov	r2, r0
 800b37a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b37e:	f7ff bb4a 	b.w	800aa16 <_dtoa_r+0x2e>
 800b382:	692a      	ldr	r2, [r5, #16]
 800b384:	3202      	adds	r2, #2
 800b386:	0092      	lsls	r2, r2, #2
 800b388:	f105 010c 	add.w	r1, r5, #12
 800b38c:	300c      	adds	r0, #12
 800b38e:	f7ff fa82 	bl	800a896 <memcpy>
 800b392:	2201      	movs	r2, #1
 800b394:	4631      	mov	r1, r6
 800b396:	4648      	mov	r0, r9
 800b398:	f000 ff92 	bl	800c2c0 <__lshift>
 800b39c:	f10a 0301 	add.w	r3, sl, #1
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	eb0a 030b 	add.w	r3, sl, fp
 800b3a6:	9308      	str	r3, [sp, #32]
 800b3a8:	9b04      	ldr	r3, [sp, #16]
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	462f      	mov	r7, r5
 800b3b0:	9306      	str	r3, [sp, #24]
 800b3b2:	4605      	mov	r5, r0
 800b3b4:	9b00      	ldr	r3, [sp, #0]
 800b3b6:	9802      	ldr	r0, [sp, #8]
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	f103 3bff 	add.w	fp, r3, #4294967295
 800b3be:	f7ff fa89 	bl	800a8d4 <quorem>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	3330      	adds	r3, #48	@ 0x30
 800b3c6:	9003      	str	r0, [sp, #12]
 800b3c8:	4639      	mov	r1, r7
 800b3ca:	9802      	ldr	r0, [sp, #8]
 800b3cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3ce:	f000 ffe3 	bl	800c398 <__mcmp>
 800b3d2:	462a      	mov	r2, r5
 800b3d4:	9004      	str	r0, [sp, #16]
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	4648      	mov	r0, r9
 800b3da:	f000 fff9 	bl	800c3d0 <__mdiff>
 800b3de:	68c2      	ldr	r2, [r0, #12]
 800b3e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3e2:	4606      	mov	r6, r0
 800b3e4:	bb02      	cbnz	r2, 800b428 <_dtoa_r+0xa40>
 800b3e6:	4601      	mov	r1, r0
 800b3e8:	9802      	ldr	r0, [sp, #8]
 800b3ea:	f000 ffd5 	bl	800c398 <__mcmp>
 800b3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4648      	mov	r0, r9
 800b3f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b3f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3fa:	f000 fd51 	bl	800bea0 <_Bfree>
 800b3fe:	9b07      	ldr	r3, [sp, #28]
 800b400:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b402:	9e00      	ldr	r6, [sp, #0]
 800b404:	ea42 0103 	orr.w	r1, r2, r3
 800b408:	9b06      	ldr	r3, [sp, #24]
 800b40a:	4319      	orrs	r1, r3
 800b40c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b40e:	d10d      	bne.n	800b42c <_dtoa_r+0xa44>
 800b410:	2b39      	cmp	r3, #57	@ 0x39
 800b412:	d027      	beq.n	800b464 <_dtoa_r+0xa7c>
 800b414:	9a04      	ldr	r2, [sp, #16]
 800b416:	2a00      	cmp	r2, #0
 800b418:	dd01      	ble.n	800b41e <_dtoa_r+0xa36>
 800b41a:	9b03      	ldr	r3, [sp, #12]
 800b41c:	3331      	adds	r3, #49	@ 0x31
 800b41e:	f88b 3000 	strb.w	r3, [fp]
 800b422:	e52e      	b.n	800ae82 <_dtoa_r+0x49a>
 800b424:	4628      	mov	r0, r5
 800b426:	e7b9      	b.n	800b39c <_dtoa_r+0x9b4>
 800b428:	2201      	movs	r2, #1
 800b42a:	e7e2      	b.n	800b3f2 <_dtoa_r+0xa0a>
 800b42c:	9904      	ldr	r1, [sp, #16]
 800b42e:	2900      	cmp	r1, #0
 800b430:	db04      	blt.n	800b43c <_dtoa_r+0xa54>
 800b432:	9807      	ldr	r0, [sp, #28]
 800b434:	4301      	orrs	r1, r0
 800b436:	9806      	ldr	r0, [sp, #24]
 800b438:	4301      	orrs	r1, r0
 800b43a:	d120      	bne.n	800b47e <_dtoa_r+0xa96>
 800b43c:	2a00      	cmp	r2, #0
 800b43e:	ddee      	ble.n	800b41e <_dtoa_r+0xa36>
 800b440:	9902      	ldr	r1, [sp, #8]
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	2201      	movs	r2, #1
 800b446:	4648      	mov	r0, r9
 800b448:	f000 ff3a 	bl	800c2c0 <__lshift>
 800b44c:	4621      	mov	r1, r4
 800b44e:	9002      	str	r0, [sp, #8]
 800b450:	f000 ffa2 	bl	800c398 <__mcmp>
 800b454:	2800      	cmp	r0, #0
 800b456:	9b00      	ldr	r3, [sp, #0]
 800b458:	dc02      	bgt.n	800b460 <_dtoa_r+0xa78>
 800b45a:	d1e0      	bne.n	800b41e <_dtoa_r+0xa36>
 800b45c:	07da      	lsls	r2, r3, #31
 800b45e:	d5de      	bpl.n	800b41e <_dtoa_r+0xa36>
 800b460:	2b39      	cmp	r3, #57	@ 0x39
 800b462:	d1da      	bne.n	800b41a <_dtoa_r+0xa32>
 800b464:	2339      	movs	r3, #57	@ 0x39
 800b466:	f88b 3000 	strb.w	r3, [fp]
 800b46a:	4633      	mov	r3, r6
 800b46c:	461e      	mov	r6, r3
 800b46e:	3b01      	subs	r3, #1
 800b470:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b474:	2a39      	cmp	r2, #57	@ 0x39
 800b476:	d04e      	beq.n	800b516 <_dtoa_r+0xb2e>
 800b478:	3201      	adds	r2, #1
 800b47a:	701a      	strb	r2, [r3, #0]
 800b47c:	e501      	b.n	800ae82 <_dtoa_r+0x49a>
 800b47e:	2a00      	cmp	r2, #0
 800b480:	dd03      	ble.n	800b48a <_dtoa_r+0xaa2>
 800b482:	2b39      	cmp	r3, #57	@ 0x39
 800b484:	d0ee      	beq.n	800b464 <_dtoa_r+0xa7c>
 800b486:	3301      	adds	r3, #1
 800b488:	e7c9      	b.n	800b41e <_dtoa_r+0xa36>
 800b48a:	9a00      	ldr	r2, [sp, #0]
 800b48c:	9908      	ldr	r1, [sp, #32]
 800b48e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b492:	428a      	cmp	r2, r1
 800b494:	d028      	beq.n	800b4e8 <_dtoa_r+0xb00>
 800b496:	9902      	ldr	r1, [sp, #8]
 800b498:	2300      	movs	r3, #0
 800b49a:	220a      	movs	r2, #10
 800b49c:	4648      	mov	r0, r9
 800b49e:	f000 fd21 	bl	800bee4 <__multadd>
 800b4a2:	42af      	cmp	r7, r5
 800b4a4:	9002      	str	r0, [sp, #8]
 800b4a6:	f04f 0300 	mov.w	r3, #0
 800b4aa:	f04f 020a 	mov.w	r2, #10
 800b4ae:	4639      	mov	r1, r7
 800b4b0:	4648      	mov	r0, r9
 800b4b2:	d107      	bne.n	800b4c4 <_dtoa_r+0xadc>
 800b4b4:	f000 fd16 	bl	800bee4 <__multadd>
 800b4b8:	4607      	mov	r7, r0
 800b4ba:	4605      	mov	r5, r0
 800b4bc:	9b00      	ldr	r3, [sp, #0]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	e777      	b.n	800b3b4 <_dtoa_r+0x9cc>
 800b4c4:	f000 fd0e 	bl	800bee4 <__multadd>
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	4607      	mov	r7, r0
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	220a      	movs	r2, #10
 800b4d0:	4648      	mov	r0, r9
 800b4d2:	f000 fd07 	bl	800bee4 <__multadd>
 800b4d6:	4605      	mov	r5, r0
 800b4d8:	e7f0      	b.n	800b4bc <_dtoa_r+0xad4>
 800b4da:	f1bb 0f00 	cmp.w	fp, #0
 800b4de:	bfcc      	ite	gt
 800b4e0:	465e      	movgt	r6, fp
 800b4e2:	2601      	movle	r6, #1
 800b4e4:	4456      	add	r6, sl
 800b4e6:	2700      	movs	r7, #0
 800b4e8:	9902      	ldr	r1, [sp, #8]
 800b4ea:	9300      	str	r3, [sp, #0]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	4648      	mov	r0, r9
 800b4f0:	f000 fee6 	bl	800c2c0 <__lshift>
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	9002      	str	r0, [sp, #8]
 800b4f8:	f000 ff4e 	bl	800c398 <__mcmp>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	dcb4      	bgt.n	800b46a <_dtoa_r+0xa82>
 800b500:	d102      	bne.n	800b508 <_dtoa_r+0xb20>
 800b502:	9b00      	ldr	r3, [sp, #0]
 800b504:	07db      	lsls	r3, r3, #31
 800b506:	d4b0      	bmi.n	800b46a <_dtoa_r+0xa82>
 800b508:	4633      	mov	r3, r6
 800b50a:	461e      	mov	r6, r3
 800b50c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b510:	2a30      	cmp	r2, #48	@ 0x30
 800b512:	d0fa      	beq.n	800b50a <_dtoa_r+0xb22>
 800b514:	e4b5      	b.n	800ae82 <_dtoa_r+0x49a>
 800b516:	459a      	cmp	sl, r3
 800b518:	d1a8      	bne.n	800b46c <_dtoa_r+0xa84>
 800b51a:	2331      	movs	r3, #49	@ 0x31
 800b51c:	f108 0801 	add.w	r8, r8, #1
 800b520:	f88a 3000 	strb.w	r3, [sl]
 800b524:	e4ad      	b.n	800ae82 <_dtoa_r+0x49a>
 800b526:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b528:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b584 <_dtoa_r+0xb9c>
 800b52c:	b11b      	cbz	r3, 800b536 <_dtoa_r+0xb4e>
 800b52e:	f10a 0308 	add.w	r3, sl, #8
 800b532:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b534:	6013      	str	r3, [r2, #0]
 800b536:	4650      	mov	r0, sl
 800b538:	b017      	add	sp, #92	@ 0x5c
 800b53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b53e:	9b07      	ldr	r3, [sp, #28]
 800b540:	2b01      	cmp	r3, #1
 800b542:	f77f ae2e 	ble.w	800b1a2 <_dtoa_r+0x7ba>
 800b546:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b548:	9308      	str	r3, [sp, #32]
 800b54a:	2001      	movs	r0, #1
 800b54c:	e64d      	b.n	800b1ea <_dtoa_r+0x802>
 800b54e:	f1bb 0f00 	cmp.w	fp, #0
 800b552:	f77f aed9 	ble.w	800b308 <_dtoa_r+0x920>
 800b556:	4656      	mov	r6, sl
 800b558:	9802      	ldr	r0, [sp, #8]
 800b55a:	4621      	mov	r1, r4
 800b55c:	f7ff f9ba 	bl	800a8d4 <quorem>
 800b560:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b564:	f806 3b01 	strb.w	r3, [r6], #1
 800b568:	eba6 020a 	sub.w	r2, r6, sl
 800b56c:	4593      	cmp	fp, r2
 800b56e:	ddb4      	ble.n	800b4da <_dtoa_r+0xaf2>
 800b570:	9902      	ldr	r1, [sp, #8]
 800b572:	2300      	movs	r3, #0
 800b574:	220a      	movs	r2, #10
 800b576:	4648      	mov	r0, r9
 800b578:	f000 fcb4 	bl	800bee4 <__multadd>
 800b57c:	9002      	str	r0, [sp, #8]
 800b57e:	e7eb      	b.n	800b558 <_dtoa_r+0xb70>
 800b580:	0800d4ab 	.word	0x0800d4ab
 800b584:	0800d42f 	.word	0x0800d42f

0800b588 <_free_r>:
 800b588:	b538      	push	{r3, r4, r5, lr}
 800b58a:	4605      	mov	r5, r0
 800b58c:	2900      	cmp	r1, #0
 800b58e:	d041      	beq.n	800b614 <_free_r+0x8c>
 800b590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b594:	1f0c      	subs	r4, r1, #4
 800b596:	2b00      	cmp	r3, #0
 800b598:	bfb8      	it	lt
 800b59a:	18e4      	addlt	r4, r4, r3
 800b59c:	f000 fc34 	bl	800be08 <__malloc_lock>
 800b5a0:	4a1d      	ldr	r2, [pc, #116]	@ (800b618 <_free_r+0x90>)
 800b5a2:	6813      	ldr	r3, [r2, #0]
 800b5a4:	b933      	cbnz	r3, 800b5b4 <_free_r+0x2c>
 800b5a6:	6063      	str	r3, [r4, #4]
 800b5a8:	6014      	str	r4, [r2, #0]
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5b0:	f000 bc30 	b.w	800be14 <__malloc_unlock>
 800b5b4:	42a3      	cmp	r3, r4
 800b5b6:	d908      	bls.n	800b5ca <_free_r+0x42>
 800b5b8:	6820      	ldr	r0, [r4, #0]
 800b5ba:	1821      	adds	r1, r4, r0
 800b5bc:	428b      	cmp	r3, r1
 800b5be:	bf01      	itttt	eq
 800b5c0:	6819      	ldreq	r1, [r3, #0]
 800b5c2:	685b      	ldreq	r3, [r3, #4]
 800b5c4:	1809      	addeq	r1, r1, r0
 800b5c6:	6021      	streq	r1, [r4, #0]
 800b5c8:	e7ed      	b.n	800b5a6 <_free_r+0x1e>
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	b10b      	cbz	r3, 800b5d4 <_free_r+0x4c>
 800b5d0:	42a3      	cmp	r3, r4
 800b5d2:	d9fa      	bls.n	800b5ca <_free_r+0x42>
 800b5d4:	6811      	ldr	r1, [r2, #0]
 800b5d6:	1850      	adds	r0, r2, r1
 800b5d8:	42a0      	cmp	r0, r4
 800b5da:	d10b      	bne.n	800b5f4 <_free_r+0x6c>
 800b5dc:	6820      	ldr	r0, [r4, #0]
 800b5de:	4401      	add	r1, r0
 800b5e0:	1850      	adds	r0, r2, r1
 800b5e2:	4283      	cmp	r3, r0
 800b5e4:	6011      	str	r1, [r2, #0]
 800b5e6:	d1e0      	bne.n	800b5aa <_free_r+0x22>
 800b5e8:	6818      	ldr	r0, [r3, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	6053      	str	r3, [r2, #4]
 800b5ee:	4408      	add	r0, r1
 800b5f0:	6010      	str	r0, [r2, #0]
 800b5f2:	e7da      	b.n	800b5aa <_free_r+0x22>
 800b5f4:	d902      	bls.n	800b5fc <_free_r+0x74>
 800b5f6:	230c      	movs	r3, #12
 800b5f8:	602b      	str	r3, [r5, #0]
 800b5fa:	e7d6      	b.n	800b5aa <_free_r+0x22>
 800b5fc:	6820      	ldr	r0, [r4, #0]
 800b5fe:	1821      	adds	r1, r4, r0
 800b600:	428b      	cmp	r3, r1
 800b602:	bf04      	itt	eq
 800b604:	6819      	ldreq	r1, [r3, #0]
 800b606:	685b      	ldreq	r3, [r3, #4]
 800b608:	6063      	str	r3, [r4, #4]
 800b60a:	bf04      	itt	eq
 800b60c:	1809      	addeq	r1, r1, r0
 800b60e:	6021      	streq	r1, [r4, #0]
 800b610:	6054      	str	r4, [r2, #4]
 800b612:	e7ca      	b.n	800b5aa <_free_r+0x22>
 800b614:	bd38      	pop	{r3, r4, r5, pc}
 800b616:	bf00      	nop
 800b618:	200020c0 	.word	0x200020c0

0800b61c <rshift>:
 800b61c:	6903      	ldr	r3, [r0, #16]
 800b61e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b622:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b626:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b62a:	f100 0414 	add.w	r4, r0, #20
 800b62e:	dd45      	ble.n	800b6bc <rshift+0xa0>
 800b630:	f011 011f 	ands.w	r1, r1, #31
 800b634:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b638:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b63c:	d10c      	bne.n	800b658 <rshift+0x3c>
 800b63e:	f100 0710 	add.w	r7, r0, #16
 800b642:	4629      	mov	r1, r5
 800b644:	42b1      	cmp	r1, r6
 800b646:	d334      	bcc.n	800b6b2 <rshift+0x96>
 800b648:	1a9b      	subs	r3, r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	1eea      	subs	r2, r5, #3
 800b64e:	4296      	cmp	r6, r2
 800b650:	bf38      	it	cc
 800b652:	2300      	movcc	r3, #0
 800b654:	4423      	add	r3, r4
 800b656:	e015      	b.n	800b684 <rshift+0x68>
 800b658:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b65c:	f1c1 0820 	rsb	r8, r1, #32
 800b660:	40cf      	lsrs	r7, r1
 800b662:	f105 0e04 	add.w	lr, r5, #4
 800b666:	46a1      	mov	r9, r4
 800b668:	4576      	cmp	r6, lr
 800b66a:	46f4      	mov	ip, lr
 800b66c:	d815      	bhi.n	800b69a <rshift+0x7e>
 800b66e:	1a9a      	subs	r2, r3, r2
 800b670:	0092      	lsls	r2, r2, #2
 800b672:	3a04      	subs	r2, #4
 800b674:	3501      	adds	r5, #1
 800b676:	42ae      	cmp	r6, r5
 800b678:	bf38      	it	cc
 800b67a:	2200      	movcc	r2, #0
 800b67c:	18a3      	adds	r3, r4, r2
 800b67e:	50a7      	str	r7, [r4, r2]
 800b680:	b107      	cbz	r7, 800b684 <rshift+0x68>
 800b682:	3304      	adds	r3, #4
 800b684:	1b1a      	subs	r2, r3, r4
 800b686:	42a3      	cmp	r3, r4
 800b688:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b68c:	bf08      	it	eq
 800b68e:	2300      	moveq	r3, #0
 800b690:	6102      	str	r2, [r0, #16]
 800b692:	bf08      	it	eq
 800b694:	6143      	streq	r3, [r0, #20]
 800b696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b69a:	f8dc c000 	ldr.w	ip, [ip]
 800b69e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b6a2:	ea4c 0707 	orr.w	r7, ip, r7
 800b6a6:	f849 7b04 	str.w	r7, [r9], #4
 800b6aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6ae:	40cf      	lsrs	r7, r1
 800b6b0:	e7da      	b.n	800b668 <rshift+0x4c>
 800b6b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b6b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b6ba:	e7c3      	b.n	800b644 <rshift+0x28>
 800b6bc:	4623      	mov	r3, r4
 800b6be:	e7e1      	b.n	800b684 <rshift+0x68>

0800b6c0 <__hexdig_fun>:
 800b6c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b6c4:	2b09      	cmp	r3, #9
 800b6c6:	d802      	bhi.n	800b6ce <__hexdig_fun+0xe>
 800b6c8:	3820      	subs	r0, #32
 800b6ca:	b2c0      	uxtb	r0, r0
 800b6cc:	4770      	bx	lr
 800b6ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b6d2:	2b05      	cmp	r3, #5
 800b6d4:	d801      	bhi.n	800b6da <__hexdig_fun+0x1a>
 800b6d6:	3847      	subs	r0, #71	@ 0x47
 800b6d8:	e7f7      	b.n	800b6ca <__hexdig_fun+0xa>
 800b6da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b6de:	2b05      	cmp	r3, #5
 800b6e0:	d801      	bhi.n	800b6e6 <__hexdig_fun+0x26>
 800b6e2:	3827      	subs	r0, #39	@ 0x27
 800b6e4:	e7f1      	b.n	800b6ca <__hexdig_fun+0xa>
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	4770      	bx	lr
	...

0800b6ec <__gethex>:
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	b085      	sub	sp, #20
 800b6f2:	468a      	mov	sl, r1
 800b6f4:	9302      	str	r3, [sp, #8]
 800b6f6:	680b      	ldr	r3, [r1, #0]
 800b6f8:	9001      	str	r0, [sp, #4]
 800b6fa:	4690      	mov	r8, r2
 800b6fc:	1c9c      	adds	r4, r3, #2
 800b6fe:	46a1      	mov	r9, r4
 800b700:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b704:	2830      	cmp	r0, #48	@ 0x30
 800b706:	d0fa      	beq.n	800b6fe <__gethex+0x12>
 800b708:	eba9 0303 	sub.w	r3, r9, r3
 800b70c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b710:	f7ff ffd6 	bl	800b6c0 <__hexdig_fun>
 800b714:	4605      	mov	r5, r0
 800b716:	2800      	cmp	r0, #0
 800b718:	d168      	bne.n	800b7ec <__gethex+0x100>
 800b71a:	49a0      	ldr	r1, [pc, #640]	@ (800b99c <__gethex+0x2b0>)
 800b71c:	2201      	movs	r2, #1
 800b71e:	4648      	mov	r0, r9
 800b720:	f7ff f82f 	bl	800a782 <strncmp>
 800b724:	4607      	mov	r7, r0
 800b726:	2800      	cmp	r0, #0
 800b728:	d167      	bne.n	800b7fa <__gethex+0x10e>
 800b72a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b72e:	4626      	mov	r6, r4
 800b730:	f7ff ffc6 	bl	800b6c0 <__hexdig_fun>
 800b734:	2800      	cmp	r0, #0
 800b736:	d062      	beq.n	800b7fe <__gethex+0x112>
 800b738:	4623      	mov	r3, r4
 800b73a:	7818      	ldrb	r0, [r3, #0]
 800b73c:	2830      	cmp	r0, #48	@ 0x30
 800b73e:	4699      	mov	r9, r3
 800b740:	f103 0301 	add.w	r3, r3, #1
 800b744:	d0f9      	beq.n	800b73a <__gethex+0x4e>
 800b746:	f7ff ffbb 	bl	800b6c0 <__hexdig_fun>
 800b74a:	fab0 f580 	clz	r5, r0
 800b74e:	096d      	lsrs	r5, r5, #5
 800b750:	f04f 0b01 	mov.w	fp, #1
 800b754:	464a      	mov	r2, r9
 800b756:	4616      	mov	r6, r2
 800b758:	3201      	adds	r2, #1
 800b75a:	7830      	ldrb	r0, [r6, #0]
 800b75c:	f7ff ffb0 	bl	800b6c0 <__hexdig_fun>
 800b760:	2800      	cmp	r0, #0
 800b762:	d1f8      	bne.n	800b756 <__gethex+0x6a>
 800b764:	498d      	ldr	r1, [pc, #564]	@ (800b99c <__gethex+0x2b0>)
 800b766:	2201      	movs	r2, #1
 800b768:	4630      	mov	r0, r6
 800b76a:	f7ff f80a 	bl	800a782 <strncmp>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d13f      	bne.n	800b7f2 <__gethex+0x106>
 800b772:	b944      	cbnz	r4, 800b786 <__gethex+0x9a>
 800b774:	1c74      	adds	r4, r6, #1
 800b776:	4622      	mov	r2, r4
 800b778:	4616      	mov	r6, r2
 800b77a:	3201      	adds	r2, #1
 800b77c:	7830      	ldrb	r0, [r6, #0]
 800b77e:	f7ff ff9f 	bl	800b6c0 <__hexdig_fun>
 800b782:	2800      	cmp	r0, #0
 800b784:	d1f8      	bne.n	800b778 <__gethex+0x8c>
 800b786:	1ba4      	subs	r4, r4, r6
 800b788:	00a7      	lsls	r7, r4, #2
 800b78a:	7833      	ldrb	r3, [r6, #0]
 800b78c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b790:	2b50      	cmp	r3, #80	@ 0x50
 800b792:	d13e      	bne.n	800b812 <__gethex+0x126>
 800b794:	7873      	ldrb	r3, [r6, #1]
 800b796:	2b2b      	cmp	r3, #43	@ 0x2b
 800b798:	d033      	beq.n	800b802 <__gethex+0x116>
 800b79a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b79c:	d034      	beq.n	800b808 <__gethex+0x11c>
 800b79e:	1c71      	adds	r1, r6, #1
 800b7a0:	2400      	movs	r4, #0
 800b7a2:	7808      	ldrb	r0, [r1, #0]
 800b7a4:	f7ff ff8c 	bl	800b6c0 <__hexdig_fun>
 800b7a8:	1e43      	subs	r3, r0, #1
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	2b18      	cmp	r3, #24
 800b7ae:	d830      	bhi.n	800b812 <__gethex+0x126>
 800b7b0:	f1a0 0210 	sub.w	r2, r0, #16
 800b7b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7b8:	f7ff ff82 	bl	800b6c0 <__hexdig_fun>
 800b7bc:	f100 3cff 	add.w	ip, r0, #4294967295
 800b7c0:	fa5f fc8c 	uxtb.w	ip, ip
 800b7c4:	f1bc 0f18 	cmp.w	ip, #24
 800b7c8:	f04f 030a 	mov.w	r3, #10
 800b7cc:	d91e      	bls.n	800b80c <__gethex+0x120>
 800b7ce:	b104      	cbz	r4, 800b7d2 <__gethex+0xe6>
 800b7d0:	4252      	negs	r2, r2
 800b7d2:	4417      	add	r7, r2
 800b7d4:	f8ca 1000 	str.w	r1, [sl]
 800b7d8:	b1ed      	cbz	r5, 800b816 <__gethex+0x12a>
 800b7da:	f1bb 0f00 	cmp.w	fp, #0
 800b7de:	bf0c      	ite	eq
 800b7e0:	2506      	moveq	r5, #6
 800b7e2:	2500      	movne	r5, #0
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	b005      	add	sp, #20
 800b7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ec:	2500      	movs	r5, #0
 800b7ee:	462c      	mov	r4, r5
 800b7f0:	e7b0      	b.n	800b754 <__gethex+0x68>
 800b7f2:	2c00      	cmp	r4, #0
 800b7f4:	d1c7      	bne.n	800b786 <__gethex+0x9a>
 800b7f6:	4627      	mov	r7, r4
 800b7f8:	e7c7      	b.n	800b78a <__gethex+0x9e>
 800b7fa:	464e      	mov	r6, r9
 800b7fc:	462f      	mov	r7, r5
 800b7fe:	2501      	movs	r5, #1
 800b800:	e7c3      	b.n	800b78a <__gethex+0x9e>
 800b802:	2400      	movs	r4, #0
 800b804:	1cb1      	adds	r1, r6, #2
 800b806:	e7cc      	b.n	800b7a2 <__gethex+0xb6>
 800b808:	2401      	movs	r4, #1
 800b80a:	e7fb      	b.n	800b804 <__gethex+0x118>
 800b80c:	fb03 0002 	mla	r0, r3, r2, r0
 800b810:	e7ce      	b.n	800b7b0 <__gethex+0xc4>
 800b812:	4631      	mov	r1, r6
 800b814:	e7de      	b.n	800b7d4 <__gethex+0xe8>
 800b816:	eba6 0309 	sub.w	r3, r6, r9
 800b81a:	3b01      	subs	r3, #1
 800b81c:	4629      	mov	r1, r5
 800b81e:	2b07      	cmp	r3, #7
 800b820:	dc0a      	bgt.n	800b838 <__gethex+0x14c>
 800b822:	9801      	ldr	r0, [sp, #4]
 800b824:	f000 fafc 	bl	800be20 <_Balloc>
 800b828:	4604      	mov	r4, r0
 800b82a:	b940      	cbnz	r0, 800b83e <__gethex+0x152>
 800b82c:	4b5c      	ldr	r3, [pc, #368]	@ (800b9a0 <__gethex+0x2b4>)
 800b82e:	4602      	mov	r2, r0
 800b830:	21e4      	movs	r1, #228	@ 0xe4
 800b832:	485c      	ldr	r0, [pc, #368]	@ (800b9a4 <__gethex+0x2b8>)
 800b834:	f001 fa54 	bl	800cce0 <__assert_func>
 800b838:	3101      	adds	r1, #1
 800b83a:	105b      	asrs	r3, r3, #1
 800b83c:	e7ef      	b.n	800b81e <__gethex+0x132>
 800b83e:	f100 0a14 	add.w	sl, r0, #20
 800b842:	2300      	movs	r3, #0
 800b844:	4655      	mov	r5, sl
 800b846:	469b      	mov	fp, r3
 800b848:	45b1      	cmp	r9, r6
 800b84a:	d337      	bcc.n	800b8bc <__gethex+0x1d0>
 800b84c:	f845 bb04 	str.w	fp, [r5], #4
 800b850:	eba5 050a 	sub.w	r5, r5, sl
 800b854:	10ad      	asrs	r5, r5, #2
 800b856:	6125      	str	r5, [r4, #16]
 800b858:	4658      	mov	r0, fp
 800b85a:	f000 fbd3 	bl	800c004 <__hi0bits>
 800b85e:	016d      	lsls	r5, r5, #5
 800b860:	f8d8 6000 	ldr.w	r6, [r8]
 800b864:	1a2d      	subs	r5, r5, r0
 800b866:	42b5      	cmp	r5, r6
 800b868:	dd54      	ble.n	800b914 <__gethex+0x228>
 800b86a:	1bad      	subs	r5, r5, r6
 800b86c:	4629      	mov	r1, r5
 800b86e:	4620      	mov	r0, r4
 800b870:	f000 ff5f 	bl	800c732 <__any_on>
 800b874:	4681      	mov	r9, r0
 800b876:	b178      	cbz	r0, 800b898 <__gethex+0x1ac>
 800b878:	1e6b      	subs	r3, r5, #1
 800b87a:	1159      	asrs	r1, r3, #5
 800b87c:	f003 021f 	and.w	r2, r3, #31
 800b880:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b884:	f04f 0901 	mov.w	r9, #1
 800b888:	fa09 f202 	lsl.w	r2, r9, r2
 800b88c:	420a      	tst	r2, r1
 800b88e:	d003      	beq.n	800b898 <__gethex+0x1ac>
 800b890:	454b      	cmp	r3, r9
 800b892:	dc36      	bgt.n	800b902 <__gethex+0x216>
 800b894:	f04f 0902 	mov.w	r9, #2
 800b898:	4629      	mov	r1, r5
 800b89a:	4620      	mov	r0, r4
 800b89c:	f7ff febe 	bl	800b61c <rshift>
 800b8a0:	442f      	add	r7, r5
 800b8a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8a6:	42bb      	cmp	r3, r7
 800b8a8:	da42      	bge.n	800b930 <__gethex+0x244>
 800b8aa:	9801      	ldr	r0, [sp, #4]
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	f000 faf7 	bl	800bea0 <_Bfree>
 800b8b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	6013      	str	r3, [r2, #0]
 800b8b8:	25a3      	movs	r5, #163	@ 0xa3
 800b8ba:	e793      	b.n	800b7e4 <__gethex+0xf8>
 800b8bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b8c0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b8c2:	d012      	beq.n	800b8ea <__gethex+0x1fe>
 800b8c4:	2b20      	cmp	r3, #32
 800b8c6:	d104      	bne.n	800b8d2 <__gethex+0x1e6>
 800b8c8:	f845 bb04 	str.w	fp, [r5], #4
 800b8cc:	f04f 0b00 	mov.w	fp, #0
 800b8d0:	465b      	mov	r3, fp
 800b8d2:	7830      	ldrb	r0, [r6, #0]
 800b8d4:	9303      	str	r3, [sp, #12]
 800b8d6:	f7ff fef3 	bl	800b6c0 <__hexdig_fun>
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	f000 000f 	and.w	r0, r0, #15
 800b8e0:	4098      	lsls	r0, r3
 800b8e2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	e7ae      	b.n	800b848 <__gethex+0x15c>
 800b8ea:	45b1      	cmp	r9, r6
 800b8ec:	d8ea      	bhi.n	800b8c4 <__gethex+0x1d8>
 800b8ee:	492b      	ldr	r1, [pc, #172]	@ (800b99c <__gethex+0x2b0>)
 800b8f0:	9303      	str	r3, [sp, #12]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f7fe ff44 	bl	800a782 <strncmp>
 800b8fa:	9b03      	ldr	r3, [sp, #12]
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d1e1      	bne.n	800b8c4 <__gethex+0x1d8>
 800b900:	e7a2      	b.n	800b848 <__gethex+0x15c>
 800b902:	1ea9      	subs	r1, r5, #2
 800b904:	4620      	mov	r0, r4
 800b906:	f000 ff14 	bl	800c732 <__any_on>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d0c2      	beq.n	800b894 <__gethex+0x1a8>
 800b90e:	f04f 0903 	mov.w	r9, #3
 800b912:	e7c1      	b.n	800b898 <__gethex+0x1ac>
 800b914:	da09      	bge.n	800b92a <__gethex+0x23e>
 800b916:	1b75      	subs	r5, r6, r5
 800b918:	4621      	mov	r1, r4
 800b91a:	9801      	ldr	r0, [sp, #4]
 800b91c:	462a      	mov	r2, r5
 800b91e:	f000 fccf 	bl	800c2c0 <__lshift>
 800b922:	1b7f      	subs	r7, r7, r5
 800b924:	4604      	mov	r4, r0
 800b926:	f100 0a14 	add.w	sl, r0, #20
 800b92a:	f04f 0900 	mov.w	r9, #0
 800b92e:	e7b8      	b.n	800b8a2 <__gethex+0x1b6>
 800b930:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b934:	42bd      	cmp	r5, r7
 800b936:	dd6f      	ble.n	800ba18 <__gethex+0x32c>
 800b938:	1bed      	subs	r5, r5, r7
 800b93a:	42ae      	cmp	r6, r5
 800b93c:	dc34      	bgt.n	800b9a8 <__gethex+0x2bc>
 800b93e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b942:	2b02      	cmp	r3, #2
 800b944:	d022      	beq.n	800b98c <__gethex+0x2a0>
 800b946:	2b03      	cmp	r3, #3
 800b948:	d024      	beq.n	800b994 <__gethex+0x2a8>
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d115      	bne.n	800b97a <__gethex+0x28e>
 800b94e:	42ae      	cmp	r6, r5
 800b950:	d113      	bne.n	800b97a <__gethex+0x28e>
 800b952:	2e01      	cmp	r6, #1
 800b954:	d10b      	bne.n	800b96e <__gethex+0x282>
 800b956:	9a02      	ldr	r2, [sp, #8]
 800b958:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b95c:	6013      	str	r3, [r2, #0]
 800b95e:	2301      	movs	r3, #1
 800b960:	6123      	str	r3, [r4, #16]
 800b962:	f8ca 3000 	str.w	r3, [sl]
 800b966:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b968:	2562      	movs	r5, #98	@ 0x62
 800b96a:	601c      	str	r4, [r3, #0]
 800b96c:	e73a      	b.n	800b7e4 <__gethex+0xf8>
 800b96e:	1e71      	subs	r1, r6, #1
 800b970:	4620      	mov	r0, r4
 800b972:	f000 fede 	bl	800c732 <__any_on>
 800b976:	2800      	cmp	r0, #0
 800b978:	d1ed      	bne.n	800b956 <__gethex+0x26a>
 800b97a:	9801      	ldr	r0, [sp, #4]
 800b97c:	4621      	mov	r1, r4
 800b97e:	f000 fa8f 	bl	800bea0 <_Bfree>
 800b982:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b984:	2300      	movs	r3, #0
 800b986:	6013      	str	r3, [r2, #0]
 800b988:	2550      	movs	r5, #80	@ 0x50
 800b98a:	e72b      	b.n	800b7e4 <__gethex+0xf8>
 800b98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1f3      	bne.n	800b97a <__gethex+0x28e>
 800b992:	e7e0      	b.n	800b956 <__gethex+0x26a>
 800b994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1dd      	bne.n	800b956 <__gethex+0x26a>
 800b99a:	e7ee      	b.n	800b97a <__gethex+0x28e>
 800b99c:	0800d3ec 	.word	0x0800d3ec
 800b9a0:	0800d4ab 	.word	0x0800d4ab
 800b9a4:	0800d4bc 	.word	0x0800d4bc
 800b9a8:	1e6f      	subs	r7, r5, #1
 800b9aa:	f1b9 0f00 	cmp.w	r9, #0
 800b9ae:	d130      	bne.n	800ba12 <__gethex+0x326>
 800b9b0:	b127      	cbz	r7, 800b9bc <__gethex+0x2d0>
 800b9b2:	4639      	mov	r1, r7
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f000 febc 	bl	800c732 <__any_on>
 800b9ba:	4681      	mov	r9, r0
 800b9bc:	117a      	asrs	r2, r7, #5
 800b9be:	2301      	movs	r3, #1
 800b9c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b9c4:	f007 071f 	and.w	r7, r7, #31
 800b9c8:	40bb      	lsls	r3, r7
 800b9ca:	4213      	tst	r3, r2
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	bf18      	it	ne
 800b9d2:	f049 0902 	orrne.w	r9, r9, #2
 800b9d6:	f7ff fe21 	bl	800b61c <rshift>
 800b9da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b9de:	1b76      	subs	r6, r6, r5
 800b9e0:	2502      	movs	r5, #2
 800b9e2:	f1b9 0f00 	cmp.w	r9, #0
 800b9e6:	d047      	beq.n	800ba78 <__gethex+0x38c>
 800b9e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d015      	beq.n	800ba1c <__gethex+0x330>
 800b9f0:	2b03      	cmp	r3, #3
 800b9f2:	d017      	beq.n	800ba24 <__gethex+0x338>
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d109      	bne.n	800ba0c <__gethex+0x320>
 800b9f8:	f019 0f02 	tst.w	r9, #2
 800b9fc:	d006      	beq.n	800ba0c <__gethex+0x320>
 800b9fe:	f8da 3000 	ldr.w	r3, [sl]
 800ba02:	ea49 0903 	orr.w	r9, r9, r3
 800ba06:	f019 0f01 	tst.w	r9, #1
 800ba0a:	d10e      	bne.n	800ba2a <__gethex+0x33e>
 800ba0c:	f045 0510 	orr.w	r5, r5, #16
 800ba10:	e032      	b.n	800ba78 <__gethex+0x38c>
 800ba12:	f04f 0901 	mov.w	r9, #1
 800ba16:	e7d1      	b.n	800b9bc <__gethex+0x2d0>
 800ba18:	2501      	movs	r5, #1
 800ba1a:	e7e2      	b.n	800b9e2 <__gethex+0x2f6>
 800ba1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba1e:	f1c3 0301 	rsb	r3, r3, #1
 800ba22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d0f0      	beq.n	800ba0c <__gethex+0x320>
 800ba2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba2e:	f104 0314 	add.w	r3, r4, #20
 800ba32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ba3a:	f04f 0c00 	mov.w	ip, #0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba44:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ba48:	d01b      	beq.n	800ba82 <__gethex+0x396>
 800ba4a:	3201      	adds	r2, #1
 800ba4c:	6002      	str	r2, [r0, #0]
 800ba4e:	2d02      	cmp	r5, #2
 800ba50:	f104 0314 	add.w	r3, r4, #20
 800ba54:	d13c      	bne.n	800bad0 <__gethex+0x3e4>
 800ba56:	f8d8 2000 	ldr.w	r2, [r8]
 800ba5a:	3a01      	subs	r2, #1
 800ba5c:	42b2      	cmp	r2, r6
 800ba5e:	d109      	bne.n	800ba74 <__gethex+0x388>
 800ba60:	1171      	asrs	r1, r6, #5
 800ba62:	2201      	movs	r2, #1
 800ba64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba68:	f006 061f 	and.w	r6, r6, #31
 800ba6c:	fa02 f606 	lsl.w	r6, r2, r6
 800ba70:	421e      	tst	r6, r3
 800ba72:	d13a      	bne.n	800baea <__gethex+0x3fe>
 800ba74:	f045 0520 	orr.w	r5, r5, #32
 800ba78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba7a:	601c      	str	r4, [r3, #0]
 800ba7c:	9b02      	ldr	r3, [sp, #8]
 800ba7e:	601f      	str	r7, [r3, #0]
 800ba80:	e6b0      	b.n	800b7e4 <__gethex+0xf8>
 800ba82:	4299      	cmp	r1, r3
 800ba84:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba88:	d8d9      	bhi.n	800ba3e <__gethex+0x352>
 800ba8a:	68a3      	ldr	r3, [r4, #8]
 800ba8c:	459b      	cmp	fp, r3
 800ba8e:	db17      	blt.n	800bac0 <__gethex+0x3d4>
 800ba90:	6861      	ldr	r1, [r4, #4]
 800ba92:	9801      	ldr	r0, [sp, #4]
 800ba94:	3101      	adds	r1, #1
 800ba96:	f000 f9c3 	bl	800be20 <_Balloc>
 800ba9a:	4681      	mov	r9, r0
 800ba9c:	b918      	cbnz	r0, 800baa6 <__gethex+0x3ba>
 800ba9e:	4b1a      	ldr	r3, [pc, #104]	@ (800bb08 <__gethex+0x41c>)
 800baa0:	4602      	mov	r2, r0
 800baa2:	2184      	movs	r1, #132	@ 0x84
 800baa4:	e6c5      	b.n	800b832 <__gethex+0x146>
 800baa6:	6922      	ldr	r2, [r4, #16]
 800baa8:	3202      	adds	r2, #2
 800baaa:	f104 010c 	add.w	r1, r4, #12
 800baae:	0092      	lsls	r2, r2, #2
 800bab0:	300c      	adds	r0, #12
 800bab2:	f7fe fef0 	bl	800a896 <memcpy>
 800bab6:	4621      	mov	r1, r4
 800bab8:	9801      	ldr	r0, [sp, #4]
 800baba:	f000 f9f1 	bl	800bea0 <_Bfree>
 800babe:	464c      	mov	r4, r9
 800bac0:	6923      	ldr	r3, [r4, #16]
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bac8:	6122      	str	r2, [r4, #16]
 800baca:	2201      	movs	r2, #1
 800bacc:	615a      	str	r2, [r3, #20]
 800bace:	e7be      	b.n	800ba4e <__gethex+0x362>
 800bad0:	6922      	ldr	r2, [r4, #16]
 800bad2:	455a      	cmp	r2, fp
 800bad4:	dd0b      	ble.n	800baee <__gethex+0x402>
 800bad6:	2101      	movs	r1, #1
 800bad8:	4620      	mov	r0, r4
 800bada:	f7ff fd9f 	bl	800b61c <rshift>
 800bade:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bae2:	3701      	adds	r7, #1
 800bae4:	42bb      	cmp	r3, r7
 800bae6:	f6ff aee0 	blt.w	800b8aa <__gethex+0x1be>
 800baea:	2501      	movs	r5, #1
 800baec:	e7c2      	b.n	800ba74 <__gethex+0x388>
 800baee:	f016 061f 	ands.w	r6, r6, #31
 800baf2:	d0fa      	beq.n	800baea <__gethex+0x3fe>
 800baf4:	4453      	add	r3, sl
 800baf6:	f1c6 0620 	rsb	r6, r6, #32
 800bafa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bafe:	f000 fa81 	bl	800c004 <__hi0bits>
 800bb02:	42b0      	cmp	r0, r6
 800bb04:	dbe7      	blt.n	800bad6 <__gethex+0x3ea>
 800bb06:	e7f0      	b.n	800baea <__gethex+0x3fe>
 800bb08:	0800d4ab 	.word	0x0800d4ab

0800bb0c <L_shift>:
 800bb0c:	f1c2 0208 	rsb	r2, r2, #8
 800bb10:	0092      	lsls	r2, r2, #2
 800bb12:	b570      	push	{r4, r5, r6, lr}
 800bb14:	f1c2 0620 	rsb	r6, r2, #32
 800bb18:	6843      	ldr	r3, [r0, #4]
 800bb1a:	6804      	ldr	r4, [r0, #0]
 800bb1c:	fa03 f506 	lsl.w	r5, r3, r6
 800bb20:	432c      	orrs	r4, r5
 800bb22:	40d3      	lsrs	r3, r2
 800bb24:	6004      	str	r4, [r0, #0]
 800bb26:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb2a:	4288      	cmp	r0, r1
 800bb2c:	d3f4      	bcc.n	800bb18 <L_shift+0xc>
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}

0800bb30 <__match>:
 800bb30:	b530      	push	{r4, r5, lr}
 800bb32:	6803      	ldr	r3, [r0, #0]
 800bb34:	3301      	adds	r3, #1
 800bb36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb3a:	b914      	cbnz	r4, 800bb42 <__match+0x12>
 800bb3c:	6003      	str	r3, [r0, #0]
 800bb3e:	2001      	movs	r0, #1
 800bb40:	bd30      	pop	{r4, r5, pc}
 800bb42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bb4a:	2d19      	cmp	r5, #25
 800bb4c:	bf98      	it	ls
 800bb4e:	3220      	addls	r2, #32
 800bb50:	42a2      	cmp	r2, r4
 800bb52:	d0f0      	beq.n	800bb36 <__match+0x6>
 800bb54:	2000      	movs	r0, #0
 800bb56:	e7f3      	b.n	800bb40 <__match+0x10>

0800bb58 <__hexnan>:
 800bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	680b      	ldr	r3, [r1, #0]
 800bb5e:	6801      	ldr	r1, [r0, #0]
 800bb60:	115e      	asrs	r6, r3, #5
 800bb62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb66:	f013 031f 	ands.w	r3, r3, #31
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	bf18      	it	ne
 800bb6e:	3604      	addne	r6, #4
 800bb70:	2500      	movs	r5, #0
 800bb72:	1f37      	subs	r7, r6, #4
 800bb74:	4682      	mov	sl, r0
 800bb76:	4690      	mov	r8, r2
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bb7e:	46b9      	mov	r9, r7
 800bb80:	463c      	mov	r4, r7
 800bb82:	9502      	str	r5, [sp, #8]
 800bb84:	46ab      	mov	fp, r5
 800bb86:	784a      	ldrb	r2, [r1, #1]
 800bb88:	1c4b      	adds	r3, r1, #1
 800bb8a:	9303      	str	r3, [sp, #12]
 800bb8c:	b342      	cbz	r2, 800bbe0 <__hexnan+0x88>
 800bb8e:	4610      	mov	r0, r2
 800bb90:	9105      	str	r1, [sp, #20]
 800bb92:	9204      	str	r2, [sp, #16]
 800bb94:	f7ff fd94 	bl	800b6c0 <__hexdig_fun>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d151      	bne.n	800bc40 <__hexnan+0xe8>
 800bb9c:	9a04      	ldr	r2, [sp, #16]
 800bb9e:	9905      	ldr	r1, [sp, #20]
 800bba0:	2a20      	cmp	r2, #32
 800bba2:	d818      	bhi.n	800bbd6 <__hexnan+0x7e>
 800bba4:	9b02      	ldr	r3, [sp, #8]
 800bba6:	459b      	cmp	fp, r3
 800bba8:	dd13      	ble.n	800bbd2 <__hexnan+0x7a>
 800bbaa:	454c      	cmp	r4, r9
 800bbac:	d206      	bcs.n	800bbbc <__hexnan+0x64>
 800bbae:	2d07      	cmp	r5, #7
 800bbb0:	dc04      	bgt.n	800bbbc <__hexnan+0x64>
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	4649      	mov	r1, r9
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f7ff ffa8 	bl	800bb0c <L_shift>
 800bbbc:	4544      	cmp	r4, r8
 800bbbe:	d952      	bls.n	800bc66 <__hexnan+0x10e>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f1a4 0904 	sub.w	r9, r4, #4
 800bbc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbca:	f8cd b008 	str.w	fp, [sp, #8]
 800bbce:	464c      	mov	r4, r9
 800bbd0:	461d      	mov	r5, r3
 800bbd2:	9903      	ldr	r1, [sp, #12]
 800bbd4:	e7d7      	b.n	800bb86 <__hexnan+0x2e>
 800bbd6:	2a29      	cmp	r2, #41	@ 0x29
 800bbd8:	d157      	bne.n	800bc8a <__hexnan+0x132>
 800bbda:	3102      	adds	r1, #2
 800bbdc:	f8ca 1000 	str.w	r1, [sl]
 800bbe0:	f1bb 0f00 	cmp.w	fp, #0
 800bbe4:	d051      	beq.n	800bc8a <__hexnan+0x132>
 800bbe6:	454c      	cmp	r4, r9
 800bbe8:	d206      	bcs.n	800bbf8 <__hexnan+0xa0>
 800bbea:	2d07      	cmp	r5, #7
 800bbec:	dc04      	bgt.n	800bbf8 <__hexnan+0xa0>
 800bbee:	462a      	mov	r2, r5
 800bbf0:	4649      	mov	r1, r9
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f7ff ff8a 	bl	800bb0c <L_shift>
 800bbf8:	4544      	cmp	r4, r8
 800bbfa:	d936      	bls.n	800bc6a <__hexnan+0x112>
 800bbfc:	f1a8 0204 	sub.w	r2, r8, #4
 800bc00:	4623      	mov	r3, r4
 800bc02:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc06:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc0a:	429f      	cmp	r7, r3
 800bc0c:	d2f9      	bcs.n	800bc02 <__hexnan+0xaa>
 800bc0e:	1b3b      	subs	r3, r7, r4
 800bc10:	f023 0303 	bic.w	r3, r3, #3
 800bc14:	3304      	adds	r3, #4
 800bc16:	3401      	adds	r4, #1
 800bc18:	3e03      	subs	r6, #3
 800bc1a:	42b4      	cmp	r4, r6
 800bc1c:	bf88      	it	hi
 800bc1e:	2304      	movhi	r3, #4
 800bc20:	4443      	add	r3, r8
 800bc22:	2200      	movs	r2, #0
 800bc24:	f843 2b04 	str.w	r2, [r3], #4
 800bc28:	429f      	cmp	r7, r3
 800bc2a:	d2fb      	bcs.n	800bc24 <__hexnan+0xcc>
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	b91b      	cbnz	r3, 800bc38 <__hexnan+0xe0>
 800bc30:	4547      	cmp	r7, r8
 800bc32:	d128      	bne.n	800bc86 <__hexnan+0x12e>
 800bc34:	2301      	movs	r3, #1
 800bc36:	603b      	str	r3, [r7, #0]
 800bc38:	2005      	movs	r0, #5
 800bc3a:	b007      	add	sp, #28
 800bc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc40:	3501      	adds	r5, #1
 800bc42:	2d08      	cmp	r5, #8
 800bc44:	f10b 0b01 	add.w	fp, fp, #1
 800bc48:	dd06      	ble.n	800bc58 <__hexnan+0x100>
 800bc4a:	4544      	cmp	r4, r8
 800bc4c:	d9c1      	bls.n	800bbd2 <__hexnan+0x7a>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc54:	2501      	movs	r5, #1
 800bc56:	3c04      	subs	r4, #4
 800bc58:	6822      	ldr	r2, [r4, #0]
 800bc5a:	f000 000f 	and.w	r0, r0, #15
 800bc5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bc62:	6020      	str	r0, [r4, #0]
 800bc64:	e7b5      	b.n	800bbd2 <__hexnan+0x7a>
 800bc66:	2508      	movs	r5, #8
 800bc68:	e7b3      	b.n	800bbd2 <__hexnan+0x7a>
 800bc6a:	9b01      	ldr	r3, [sp, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d0dd      	beq.n	800bc2c <__hexnan+0xd4>
 800bc70:	f1c3 0320 	rsb	r3, r3, #32
 800bc74:	f04f 32ff 	mov.w	r2, #4294967295
 800bc78:	40da      	lsrs	r2, r3
 800bc7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bc7e:	4013      	ands	r3, r2
 800bc80:	f846 3c04 	str.w	r3, [r6, #-4]
 800bc84:	e7d2      	b.n	800bc2c <__hexnan+0xd4>
 800bc86:	3f04      	subs	r7, #4
 800bc88:	e7d0      	b.n	800bc2c <__hexnan+0xd4>
 800bc8a:	2004      	movs	r0, #4
 800bc8c:	e7d5      	b.n	800bc3a <__hexnan+0xe2>
	...

0800bc90 <malloc>:
 800bc90:	4b02      	ldr	r3, [pc, #8]	@ (800bc9c <malloc+0xc>)
 800bc92:	4601      	mov	r1, r0
 800bc94:	6818      	ldr	r0, [r3, #0]
 800bc96:	f000 b825 	b.w	800bce4 <_malloc_r>
 800bc9a:	bf00      	nop
 800bc9c:	20000274 	.word	0x20000274

0800bca0 <sbrk_aligned>:
 800bca0:	b570      	push	{r4, r5, r6, lr}
 800bca2:	4e0f      	ldr	r6, [pc, #60]	@ (800bce0 <sbrk_aligned+0x40>)
 800bca4:	460c      	mov	r4, r1
 800bca6:	6831      	ldr	r1, [r6, #0]
 800bca8:	4605      	mov	r5, r0
 800bcaa:	b911      	cbnz	r1, 800bcb2 <sbrk_aligned+0x12>
 800bcac:	f001 f808 	bl	800ccc0 <_sbrk_r>
 800bcb0:	6030      	str	r0, [r6, #0]
 800bcb2:	4621      	mov	r1, r4
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f001 f803 	bl	800ccc0 <_sbrk_r>
 800bcba:	1c43      	adds	r3, r0, #1
 800bcbc:	d103      	bne.n	800bcc6 <sbrk_aligned+0x26>
 800bcbe:	f04f 34ff 	mov.w	r4, #4294967295
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	bd70      	pop	{r4, r5, r6, pc}
 800bcc6:	1cc4      	adds	r4, r0, #3
 800bcc8:	f024 0403 	bic.w	r4, r4, #3
 800bccc:	42a0      	cmp	r0, r4
 800bcce:	d0f8      	beq.n	800bcc2 <sbrk_aligned+0x22>
 800bcd0:	1a21      	subs	r1, r4, r0
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	f000 fff4 	bl	800ccc0 <_sbrk_r>
 800bcd8:	3001      	adds	r0, #1
 800bcda:	d1f2      	bne.n	800bcc2 <sbrk_aligned+0x22>
 800bcdc:	e7ef      	b.n	800bcbe <sbrk_aligned+0x1e>
 800bcde:	bf00      	nop
 800bce0:	200020bc 	.word	0x200020bc

0800bce4 <_malloc_r>:
 800bce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce8:	1ccd      	adds	r5, r1, #3
 800bcea:	f025 0503 	bic.w	r5, r5, #3
 800bcee:	3508      	adds	r5, #8
 800bcf0:	2d0c      	cmp	r5, #12
 800bcf2:	bf38      	it	cc
 800bcf4:	250c      	movcc	r5, #12
 800bcf6:	2d00      	cmp	r5, #0
 800bcf8:	4606      	mov	r6, r0
 800bcfa:	db01      	blt.n	800bd00 <_malloc_r+0x1c>
 800bcfc:	42a9      	cmp	r1, r5
 800bcfe:	d904      	bls.n	800bd0a <_malloc_r+0x26>
 800bd00:	230c      	movs	r3, #12
 800bd02:	6033      	str	r3, [r6, #0]
 800bd04:	2000      	movs	r0, #0
 800bd06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bde0 <_malloc_r+0xfc>
 800bd0e:	f000 f87b 	bl	800be08 <__malloc_lock>
 800bd12:	f8d8 3000 	ldr.w	r3, [r8]
 800bd16:	461c      	mov	r4, r3
 800bd18:	bb44      	cbnz	r4, 800bd6c <_malloc_r+0x88>
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f7ff ffbf 	bl	800bca0 <sbrk_aligned>
 800bd22:	1c43      	adds	r3, r0, #1
 800bd24:	4604      	mov	r4, r0
 800bd26:	d158      	bne.n	800bdda <_malloc_r+0xf6>
 800bd28:	f8d8 4000 	ldr.w	r4, [r8]
 800bd2c:	4627      	mov	r7, r4
 800bd2e:	2f00      	cmp	r7, #0
 800bd30:	d143      	bne.n	800bdba <_malloc_r+0xd6>
 800bd32:	2c00      	cmp	r4, #0
 800bd34:	d04b      	beq.n	800bdce <_malloc_r+0xea>
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	4639      	mov	r1, r7
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	eb04 0903 	add.w	r9, r4, r3
 800bd40:	f000 ffbe 	bl	800ccc0 <_sbrk_r>
 800bd44:	4581      	cmp	r9, r0
 800bd46:	d142      	bne.n	800bdce <_malloc_r+0xea>
 800bd48:	6821      	ldr	r1, [r4, #0]
 800bd4a:	1a6d      	subs	r5, r5, r1
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f7ff ffa6 	bl	800bca0 <sbrk_aligned>
 800bd54:	3001      	adds	r0, #1
 800bd56:	d03a      	beq.n	800bdce <_malloc_r+0xea>
 800bd58:	6823      	ldr	r3, [r4, #0]
 800bd5a:	442b      	add	r3, r5
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	f8d8 3000 	ldr.w	r3, [r8]
 800bd62:	685a      	ldr	r2, [r3, #4]
 800bd64:	bb62      	cbnz	r2, 800bdc0 <_malloc_r+0xdc>
 800bd66:	f8c8 7000 	str.w	r7, [r8]
 800bd6a:	e00f      	b.n	800bd8c <_malloc_r+0xa8>
 800bd6c:	6822      	ldr	r2, [r4, #0]
 800bd6e:	1b52      	subs	r2, r2, r5
 800bd70:	d420      	bmi.n	800bdb4 <_malloc_r+0xd0>
 800bd72:	2a0b      	cmp	r2, #11
 800bd74:	d917      	bls.n	800bda6 <_malloc_r+0xc2>
 800bd76:	1961      	adds	r1, r4, r5
 800bd78:	42a3      	cmp	r3, r4
 800bd7a:	6025      	str	r5, [r4, #0]
 800bd7c:	bf18      	it	ne
 800bd7e:	6059      	strne	r1, [r3, #4]
 800bd80:	6863      	ldr	r3, [r4, #4]
 800bd82:	bf08      	it	eq
 800bd84:	f8c8 1000 	streq.w	r1, [r8]
 800bd88:	5162      	str	r2, [r4, r5]
 800bd8a:	604b      	str	r3, [r1, #4]
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f000 f841 	bl	800be14 <__malloc_unlock>
 800bd92:	f104 000b 	add.w	r0, r4, #11
 800bd96:	1d23      	adds	r3, r4, #4
 800bd98:	f020 0007 	bic.w	r0, r0, #7
 800bd9c:	1ac2      	subs	r2, r0, r3
 800bd9e:	bf1c      	itt	ne
 800bda0:	1a1b      	subne	r3, r3, r0
 800bda2:	50a3      	strne	r3, [r4, r2]
 800bda4:	e7af      	b.n	800bd06 <_malloc_r+0x22>
 800bda6:	6862      	ldr	r2, [r4, #4]
 800bda8:	42a3      	cmp	r3, r4
 800bdaa:	bf0c      	ite	eq
 800bdac:	f8c8 2000 	streq.w	r2, [r8]
 800bdb0:	605a      	strne	r2, [r3, #4]
 800bdb2:	e7eb      	b.n	800bd8c <_malloc_r+0xa8>
 800bdb4:	4623      	mov	r3, r4
 800bdb6:	6864      	ldr	r4, [r4, #4]
 800bdb8:	e7ae      	b.n	800bd18 <_malloc_r+0x34>
 800bdba:	463c      	mov	r4, r7
 800bdbc:	687f      	ldr	r7, [r7, #4]
 800bdbe:	e7b6      	b.n	800bd2e <_malloc_r+0x4a>
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	42a3      	cmp	r3, r4
 800bdc6:	d1fb      	bne.n	800bdc0 <_malloc_r+0xdc>
 800bdc8:	2300      	movs	r3, #0
 800bdca:	6053      	str	r3, [r2, #4]
 800bdcc:	e7de      	b.n	800bd8c <_malloc_r+0xa8>
 800bdce:	230c      	movs	r3, #12
 800bdd0:	6033      	str	r3, [r6, #0]
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f000 f81e 	bl	800be14 <__malloc_unlock>
 800bdd8:	e794      	b.n	800bd04 <_malloc_r+0x20>
 800bdda:	6005      	str	r5, [r0, #0]
 800bddc:	e7d6      	b.n	800bd8c <_malloc_r+0xa8>
 800bdde:	bf00      	nop
 800bde0:	200020c0 	.word	0x200020c0

0800bde4 <__ascii_mbtowc>:
 800bde4:	b082      	sub	sp, #8
 800bde6:	b901      	cbnz	r1, 800bdea <__ascii_mbtowc+0x6>
 800bde8:	a901      	add	r1, sp, #4
 800bdea:	b142      	cbz	r2, 800bdfe <__ascii_mbtowc+0x1a>
 800bdec:	b14b      	cbz	r3, 800be02 <__ascii_mbtowc+0x1e>
 800bdee:	7813      	ldrb	r3, [r2, #0]
 800bdf0:	600b      	str	r3, [r1, #0]
 800bdf2:	7812      	ldrb	r2, [r2, #0]
 800bdf4:	1e10      	subs	r0, r2, #0
 800bdf6:	bf18      	it	ne
 800bdf8:	2001      	movne	r0, #1
 800bdfa:	b002      	add	sp, #8
 800bdfc:	4770      	bx	lr
 800bdfe:	4610      	mov	r0, r2
 800be00:	e7fb      	b.n	800bdfa <__ascii_mbtowc+0x16>
 800be02:	f06f 0001 	mvn.w	r0, #1
 800be06:	e7f8      	b.n	800bdfa <__ascii_mbtowc+0x16>

0800be08 <__malloc_lock>:
 800be08:	4801      	ldr	r0, [pc, #4]	@ (800be10 <__malloc_lock+0x8>)
 800be0a:	f7fe bd42 	b.w	800a892 <__retarget_lock_acquire_recursive>
 800be0e:	bf00      	nop
 800be10:	200020b8 	.word	0x200020b8

0800be14 <__malloc_unlock>:
 800be14:	4801      	ldr	r0, [pc, #4]	@ (800be1c <__malloc_unlock+0x8>)
 800be16:	f7fe bd3d 	b.w	800a894 <__retarget_lock_release_recursive>
 800be1a:	bf00      	nop
 800be1c:	200020b8 	.word	0x200020b8

0800be20 <_Balloc>:
 800be20:	b570      	push	{r4, r5, r6, lr}
 800be22:	69c6      	ldr	r6, [r0, #28]
 800be24:	4604      	mov	r4, r0
 800be26:	460d      	mov	r5, r1
 800be28:	b976      	cbnz	r6, 800be48 <_Balloc+0x28>
 800be2a:	2010      	movs	r0, #16
 800be2c:	f7ff ff30 	bl	800bc90 <malloc>
 800be30:	4602      	mov	r2, r0
 800be32:	61e0      	str	r0, [r4, #28]
 800be34:	b920      	cbnz	r0, 800be40 <_Balloc+0x20>
 800be36:	4b18      	ldr	r3, [pc, #96]	@ (800be98 <_Balloc+0x78>)
 800be38:	4818      	ldr	r0, [pc, #96]	@ (800be9c <_Balloc+0x7c>)
 800be3a:	216b      	movs	r1, #107	@ 0x6b
 800be3c:	f000 ff50 	bl	800cce0 <__assert_func>
 800be40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be44:	6006      	str	r6, [r0, #0]
 800be46:	60c6      	str	r6, [r0, #12]
 800be48:	69e6      	ldr	r6, [r4, #28]
 800be4a:	68f3      	ldr	r3, [r6, #12]
 800be4c:	b183      	cbz	r3, 800be70 <_Balloc+0x50>
 800be4e:	69e3      	ldr	r3, [r4, #28]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be56:	b9b8      	cbnz	r0, 800be88 <_Balloc+0x68>
 800be58:	2101      	movs	r1, #1
 800be5a:	fa01 f605 	lsl.w	r6, r1, r5
 800be5e:	1d72      	adds	r2, r6, #5
 800be60:	0092      	lsls	r2, r2, #2
 800be62:	4620      	mov	r0, r4
 800be64:	f000 ff5a 	bl	800cd1c <_calloc_r>
 800be68:	b160      	cbz	r0, 800be84 <_Balloc+0x64>
 800be6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be6e:	e00e      	b.n	800be8e <_Balloc+0x6e>
 800be70:	2221      	movs	r2, #33	@ 0x21
 800be72:	2104      	movs	r1, #4
 800be74:	4620      	mov	r0, r4
 800be76:	f000 ff51 	bl	800cd1c <_calloc_r>
 800be7a:	69e3      	ldr	r3, [r4, #28]
 800be7c:	60f0      	str	r0, [r6, #12]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1e4      	bne.n	800be4e <_Balloc+0x2e>
 800be84:	2000      	movs	r0, #0
 800be86:	bd70      	pop	{r4, r5, r6, pc}
 800be88:	6802      	ldr	r2, [r0, #0]
 800be8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be8e:	2300      	movs	r3, #0
 800be90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be94:	e7f7      	b.n	800be86 <_Balloc+0x66>
 800be96:	bf00      	nop
 800be98:	0800d43c 	.word	0x0800d43c
 800be9c:	0800d51c 	.word	0x0800d51c

0800bea0 <_Bfree>:
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	69c6      	ldr	r6, [r0, #28]
 800bea4:	4605      	mov	r5, r0
 800bea6:	460c      	mov	r4, r1
 800bea8:	b976      	cbnz	r6, 800bec8 <_Bfree+0x28>
 800beaa:	2010      	movs	r0, #16
 800beac:	f7ff fef0 	bl	800bc90 <malloc>
 800beb0:	4602      	mov	r2, r0
 800beb2:	61e8      	str	r0, [r5, #28]
 800beb4:	b920      	cbnz	r0, 800bec0 <_Bfree+0x20>
 800beb6:	4b09      	ldr	r3, [pc, #36]	@ (800bedc <_Bfree+0x3c>)
 800beb8:	4809      	ldr	r0, [pc, #36]	@ (800bee0 <_Bfree+0x40>)
 800beba:	218f      	movs	r1, #143	@ 0x8f
 800bebc:	f000 ff10 	bl	800cce0 <__assert_func>
 800bec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bec4:	6006      	str	r6, [r0, #0]
 800bec6:	60c6      	str	r6, [r0, #12]
 800bec8:	b13c      	cbz	r4, 800beda <_Bfree+0x3a>
 800beca:	69eb      	ldr	r3, [r5, #28]
 800becc:	6862      	ldr	r2, [r4, #4]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bed4:	6021      	str	r1, [r4, #0]
 800bed6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800beda:	bd70      	pop	{r4, r5, r6, pc}
 800bedc:	0800d43c 	.word	0x0800d43c
 800bee0:	0800d51c 	.word	0x0800d51c

0800bee4 <__multadd>:
 800bee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bee8:	690d      	ldr	r5, [r1, #16]
 800beea:	4607      	mov	r7, r0
 800beec:	460c      	mov	r4, r1
 800beee:	461e      	mov	r6, r3
 800bef0:	f101 0c14 	add.w	ip, r1, #20
 800bef4:	2000      	movs	r0, #0
 800bef6:	f8dc 3000 	ldr.w	r3, [ip]
 800befa:	b299      	uxth	r1, r3
 800befc:	fb02 6101 	mla	r1, r2, r1, r6
 800bf00:	0c1e      	lsrs	r6, r3, #16
 800bf02:	0c0b      	lsrs	r3, r1, #16
 800bf04:	fb02 3306 	mla	r3, r2, r6, r3
 800bf08:	b289      	uxth	r1, r1
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf10:	4285      	cmp	r5, r0
 800bf12:	f84c 1b04 	str.w	r1, [ip], #4
 800bf16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf1a:	dcec      	bgt.n	800bef6 <__multadd+0x12>
 800bf1c:	b30e      	cbz	r6, 800bf62 <__multadd+0x7e>
 800bf1e:	68a3      	ldr	r3, [r4, #8]
 800bf20:	42ab      	cmp	r3, r5
 800bf22:	dc19      	bgt.n	800bf58 <__multadd+0x74>
 800bf24:	6861      	ldr	r1, [r4, #4]
 800bf26:	4638      	mov	r0, r7
 800bf28:	3101      	adds	r1, #1
 800bf2a:	f7ff ff79 	bl	800be20 <_Balloc>
 800bf2e:	4680      	mov	r8, r0
 800bf30:	b928      	cbnz	r0, 800bf3e <__multadd+0x5a>
 800bf32:	4602      	mov	r2, r0
 800bf34:	4b0c      	ldr	r3, [pc, #48]	@ (800bf68 <__multadd+0x84>)
 800bf36:	480d      	ldr	r0, [pc, #52]	@ (800bf6c <__multadd+0x88>)
 800bf38:	21ba      	movs	r1, #186	@ 0xba
 800bf3a:	f000 fed1 	bl	800cce0 <__assert_func>
 800bf3e:	6922      	ldr	r2, [r4, #16]
 800bf40:	3202      	adds	r2, #2
 800bf42:	f104 010c 	add.w	r1, r4, #12
 800bf46:	0092      	lsls	r2, r2, #2
 800bf48:	300c      	adds	r0, #12
 800bf4a:	f7fe fca4 	bl	800a896 <memcpy>
 800bf4e:	4621      	mov	r1, r4
 800bf50:	4638      	mov	r0, r7
 800bf52:	f7ff ffa5 	bl	800bea0 <_Bfree>
 800bf56:	4644      	mov	r4, r8
 800bf58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf5c:	3501      	adds	r5, #1
 800bf5e:	615e      	str	r6, [r3, #20]
 800bf60:	6125      	str	r5, [r4, #16]
 800bf62:	4620      	mov	r0, r4
 800bf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf68:	0800d4ab 	.word	0x0800d4ab
 800bf6c:	0800d51c 	.word	0x0800d51c

0800bf70 <__s2b>:
 800bf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf74:	460c      	mov	r4, r1
 800bf76:	4615      	mov	r5, r2
 800bf78:	461f      	mov	r7, r3
 800bf7a:	2209      	movs	r2, #9
 800bf7c:	3308      	adds	r3, #8
 800bf7e:	4606      	mov	r6, r0
 800bf80:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf84:	2100      	movs	r1, #0
 800bf86:	2201      	movs	r2, #1
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	db09      	blt.n	800bfa0 <__s2b+0x30>
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f7ff ff47 	bl	800be20 <_Balloc>
 800bf92:	b940      	cbnz	r0, 800bfa6 <__s2b+0x36>
 800bf94:	4602      	mov	r2, r0
 800bf96:	4b19      	ldr	r3, [pc, #100]	@ (800bffc <__s2b+0x8c>)
 800bf98:	4819      	ldr	r0, [pc, #100]	@ (800c000 <__s2b+0x90>)
 800bf9a:	21d3      	movs	r1, #211	@ 0xd3
 800bf9c:	f000 fea0 	bl	800cce0 <__assert_func>
 800bfa0:	0052      	lsls	r2, r2, #1
 800bfa2:	3101      	adds	r1, #1
 800bfa4:	e7f0      	b.n	800bf88 <__s2b+0x18>
 800bfa6:	9b08      	ldr	r3, [sp, #32]
 800bfa8:	6143      	str	r3, [r0, #20]
 800bfaa:	2d09      	cmp	r5, #9
 800bfac:	f04f 0301 	mov.w	r3, #1
 800bfb0:	6103      	str	r3, [r0, #16]
 800bfb2:	dd16      	ble.n	800bfe2 <__s2b+0x72>
 800bfb4:	f104 0909 	add.w	r9, r4, #9
 800bfb8:	46c8      	mov	r8, r9
 800bfba:	442c      	add	r4, r5
 800bfbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bfc0:	4601      	mov	r1, r0
 800bfc2:	3b30      	subs	r3, #48	@ 0x30
 800bfc4:	220a      	movs	r2, #10
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f7ff ff8c 	bl	800bee4 <__multadd>
 800bfcc:	45a0      	cmp	r8, r4
 800bfce:	d1f5      	bne.n	800bfbc <__s2b+0x4c>
 800bfd0:	f1a5 0408 	sub.w	r4, r5, #8
 800bfd4:	444c      	add	r4, r9
 800bfd6:	1b2d      	subs	r5, r5, r4
 800bfd8:	1963      	adds	r3, r4, r5
 800bfda:	42bb      	cmp	r3, r7
 800bfdc:	db04      	blt.n	800bfe8 <__s2b+0x78>
 800bfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfe2:	340a      	adds	r4, #10
 800bfe4:	2509      	movs	r5, #9
 800bfe6:	e7f6      	b.n	800bfd6 <__s2b+0x66>
 800bfe8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bfec:	4601      	mov	r1, r0
 800bfee:	3b30      	subs	r3, #48	@ 0x30
 800bff0:	220a      	movs	r2, #10
 800bff2:	4630      	mov	r0, r6
 800bff4:	f7ff ff76 	bl	800bee4 <__multadd>
 800bff8:	e7ee      	b.n	800bfd8 <__s2b+0x68>
 800bffa:	bf00      	nop
 800bffc:	0800d4ab 	.word	0x0800d4ab
 800c000:	0800d51c 	.word	0x0800d51c

0800c004 <__hi0bits>:
 800c004:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c008:	4603      	mov	r3, r0
 800c00a:	bf36      	itet	cc
 800c00c:	0403      	lslcc	r3, r0, #16
 800c00e:	2000      	movcs	r0, #0
 800c010:	2010      	movcc	r0, #16
 800c012:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c016:	bf3c      	itt	cc
 800c018:	021b      	lslcc	r3, r3, #8
 800c01a:	3008      	addcc	r0, #8
 800c01c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c020:	bf3c      	itt	cc
 800c022:	011b      	lslcc	r3, r3, #4
 800c024:	3004      	addcc	r0, #4
 800c026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c02a:	bf3c      	itt	cc
 800c02c:	009b      	lslcc	r3, r3, #2
 800c02e:	3002      	addcc	r0, #2
 800c030:	2b00      	cmp	r3, #0
 800c032:	db05      	blt.n	800c040 <__hi0bits+0x3c>
 800c034:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c038:	f100 0001 	add.w	r0, r0, #1
 800c03c:	bf08      	it	eq
 800c03e:	2020      	moveq	r0, #32
 800c040:	4770      	bx	lr

0800c042 <__lo0bits>:
 800c042:	6803      	ldr	r3, [r0, #0]
 800c044:	4602      	mov	r2, r0
 800c046:	f013 0007 	ands.w	r0, r3, #7
 800c04a:	d00b      	beq.n	800c064 <__lo0bits+0x22>
 800c04c:	07d9      	lsls	r1, r3, #31
 800c04e:	d421      	bmi.n	800c094 <__lo0bits+0x52>
 800c050:	0798      	lsls	r0, r3, #30
 800c052:	bf49      	itett	mi
 800c054:	085b      	lsrmi	r3, r3, #1
 800c056:	089b      	lsrpl	r3, r3, #2
 800c058:	2001      	movmi	r0, #1
 800c05a:	6013      	strmi	r3, [r2, #0]
 800c05c:	bf5c      	itt	pl
 800c05e:	6013      	strpl	r3, [r2, #0]
 800c060:	2002      	movpl	r0, #2
 800c062:	4770      	bx	lr
 800c064:	b299      	uxth	r1, r3
 800c066:	b909      	cbnz	r1, 800c06c <__lo0bits+0x2a>
 800c068:	0c1b      	lsrs	r3, r3, #16
 800c06a:	2010      	movs	r0, #16
 800c06c:	b2d9      	uxtb	r1, r3
 800c06e:	b909      	cbnz	r1, 800c074 <__lo0bits+0x32>
 800c070:	3008      	adds	r0, #8
 800c072:	0a1b      	lsrs	r3, r3, #8
 800c074:	0719      	lsls	r1, r3, #28
 800c076:	bf04      	itt	eq
 800c078:	091b      	lsreq	r3, r3, #4
 800c07a:	3004      	addeq	r0, #4
 800c07c:	0799      	lsls	r1, r3, #30
 800c07e:	bf04      	itt	eq
 800c080:	089b      	lsreq	r3, r3, #2
 800c082:	3002      	addeq	r0, #2
 800c084:	07d9      	lsls	r1, r3, #31
 800c086:	d403      	bmi.n	800c090 <__lo0bits+0x4e>
 800c088:	085b      	lsrs	r3, r3, #1
 800c08a:	f100 0001 	add.w	r0, r0, #1
 800c08e:	d003      	beq.n	800c098 <__lo0bits+0x56>
 800c090:	6013      	str	r3, [r2, #0]
 800c092:	4770      	bx	lr
 800c094:	2000      	movs	r0, #0
 800c096:	4770      	bx	lr
 800c098:	2020      	movs	r0, #32
 800c09a:	4770      	bx	lr

0800c09c <__i2b>:
 800c09c:	b510      	push	{r4, lr}
 800c09e:	460c      	mov	r4, r1
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	f7ff febd 	bl	800be20 <_Balloc>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	b928      	cbnz	r0, 800c0b6 <__i2b+0x1a>
 800c0aa:	4b05      	ldr	r3, [pc, #20]	@ (800c0c0 <__i2b+0x24>)
 800c0ac:	4805      	ldr	r0, [pc, #20]	@ (800c0c4 <__i2b+0x28>)
 800c0ae:	f240 1145 	movw	r1, #325	@ 0x145
 800c0b2:	f000 fe15 	bl	800cce0 <__assert_func>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	6144      	str	r4, [r0, #20]
 800c0ba:	6103      	str	r3, [r0, #16]
 800c0bc:	bd10      	pop	{r4, pc}
 800c0be:	bf00      	nop
 800c0c0:	0800d4ab 	.word	0x0800d4ab
 800c0c4:	0800d51c 	.word	0x0800d51c

0800c0c8 <__multiply>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	4617      	mov	r7, r2
 800c0ce:	690a      	ldr	r2, [r1, #16]
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	bfa8      	it	ge
 800c0d6:	463b      	movge	r3, r7
 800c0d8:	4689      	mov	r9, r1
 800c0da:	bfa4      	itt	ge
 800c0dc:	460f      	movge	r7, r1
 800c0de:	4699      	movge	r9, r3
 800c0e0:	693d      	ldr	r5, [r7, #16]
 800c0e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	6879      	ldr	r1, [r7, #4]
 800c0ea:	eb05 060a 	add.w	r6, r5, sl
 800c0ee:	42b3      	cmp	r3, r6
 800c0f0:	b085      	sub	sp, #20
 800c0f2:	bfb8      	it	lt
 800c0f4:	3101      	addlt	r1, #1
 800c0f6:	f7ff fe93 	bl	800be20 <_Balloc>
 800c0fa:	b930      	cbnz	r0, 800c10a <__multiply+0x42>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	4b41      	ldr	r3, [pc, #260]	@ (800c204 <__multiply+0x13c>)
 800c100:	4841      	ldr	r0, [pc, #260]	@ (800c208 <__multiply+0x140>)
 800c102:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c106:	f000 fdeb 	bl	800cce0 <__assert_func>
 800c10a:	f100 0414 	add.w	r4, r0, #20
 800c10e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c112:	4623      	mov	r3, r4
 800c114:	2200      	movs	r2, #0
 800c116:	4573      	cmp	r3, lr
 800c118:	d320      	bcc.n	800c15c <__multiply+0x94>
 800c11a:	f107 0814 	add.w	r8, r7, #20
 800c11e:	f109 0114 	add.w	r1, r9, #20
 800c122:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c126:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c12a:	9302      	str	r3, [sp, #8]
 800c12c:	1beb      	subs	r3, r5, r7
 800c12e:	3b15      	subs	r3, #21
 800c130:	f023 0303 	bic.w	r3, r3, #3
 800c134:	3304      	adds	r3, #4
 800c136:	3715      	adds	r7, #21
 800c138:	42bd      	cmp	r5, r7
 800c13a:	bf38      	it	cc
 800c13c:	2304      	movcc	r3, #4
 800c13e:	9301      	str	r3, [sp, #4]
 800c140:	9b02      	ldr	r3, [sp, #8]
 800c142:	9103      	str	r1, [sp, #12]
 800c144:	428b      	cmp	r3, r1
 800c146:	d80c      	bhi.n	800c162 <__multiply+0x9a>
 800c148:	2e00      	cmp	r6, #0
 800c14a:	dd03      	ble.n	800c154 <__multiply+0x8c>
 800c14c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c150:	2b00      	cmp	r3, #0
 800c152:	d055      	beq.n	800c200 <__multiply+0x138>
 800c154:	6106      	str	r6, [r0, #16]
 800c156:	b005      	add	sp, #20
 800c158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15c:	f843 2b04 	str.w	r2, [r3], #4
 800c160:	e7d9      	b.n	800c116 <__multiply+0x4e>
 800c162:	f8b1 a000 	ldrh.w	sl, [r1]
 800c166:	f1ba 0f00 	cmp.w	sl, #0
 800c16a:	d01f      	beq.n	800c1ac <__multiply+0xe4>
 800c16c:	46c4      	mov	ip, r8
 800c16e:	46a1      	mov	r9, r4
 800c170:	2700      	movs	r7, #0
 800c172:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c176:	f8d9 3000 	ldr.w	r3, [r9]
 800c17a:	fa1f fb82 	uxth.w	fp, r2
 800c17e:	b29b      	uxth	r3, r3
 800c180:	fb0a 330b 	mla	r3, sl, fp, r3
 800c184:	443b      	add	r3, r7
 800c186:	f8d9 7000 	ldr.w	r7, [r9]
 800c18a:	0c12      	lsrs	r2, r2, #16
 800c18c:	0c3f      	lsrs	r7, r7, #16
 800c18e:	fb0a 7202 	mla	r2, sl, r2, r7
 800c192:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c196:	b29b      	uxth	r3, r3
 800c198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c19c:	4565      	cmp	r5, ip
 800c19e:	f849 3b04 	str.w	r3, [r9], #4
 800c1a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c1a6:	d8e4      	bhi.n	800c172 <__multiply+0xaa>
 800c1a8:	9b01      	ldr	r3, [sp, #4]
 800c1aa:	50e7      	str	r7, [r4, r3]
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c1b2:	3104      	adds	r1, #4
 800c1b4:	f1b9 0f00 	cmp.w	r9, #0
 800c1b8:	d020      	beq.n	800c1fc <__multiply+0x134>
 800c1ba:	6823      	ldr	r3, [r4, #0]
 800c1bc:	4647      	mov	r7, r8
 800c1be:	46a4      	mov	ip, r4
 800c1c0:	f04f 0a00 	mov.w	sl, #0
 800c1c4:	f8b7 b000 	ldrh.w	fp, [r7]
 800c1c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c1cc:	fb09 220b 	mla	r2, r9, fp, r2
 800c1d0:	4452      	add	r2, sl
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1d8:	f84c 3b04 	str.w	r3, [ip], #4
 800c1dc:	f857 3b04 	ldr.w	r3, [r7], #4
 800c1e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c1e4:	f8bc 3000 	ldrh.w	r3, [ip]
 800c1e8:	fb09 330a 	mla	r3, r9, sl, r3
 800c1ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c1f0:	42bd      	cmp	r5, r7
 800c1f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c1f6:	d8e5      	bhi.n	800c1c4 <__multiply+0xfc>
 800c1f8:	9a01      	ldr	r2, [sp, #4]
 800c1fa:	50a3      	str	r3, [r4, r2]
 800c1fc:	3404      	adds	r4, #4
 800c1fe:	e79f      	b.n	800c140 <__multiply+0x78>
 800c200:	3e01      	subs	r6, #1
 800c202:	e7a1      	b.n	800c148 <__multiply+0x80>
 800c204:	0800d4ab 	.word	0x0800d4ab
 800c208:	0800d51c 	.word	0x0800d51c

0800c20c <__pow5mult>:
 800c20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c210:	4615      	mov	r5, r2
 800c212:	f012 0203 	ands.w	r2, r2, #3
 800c216:	4607      	mov	r7, r0
 800c218:	460e      	mov	r6, r1
 800c21a:	d007      	beq.n	800c22c <__pow5mult+0x20>
 800c21c:	4c25      	ldr	r4, [pc, #148]	@ (800c2b4 <__pow5mult+0xa8>)
 800c21e:	3a01      	subs	r2, #1
 800c220:	2300      	movs	r3, #0
 800c222:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c226:	f7ff fe5d 	bl	800bee4 <__multadd>
 800c22a:	4606      	mov	r6, r0
 800c22c:	10ad      	asrs	r5, r5, #2
 800c22e:	d03d      	beq.n	800c2ac <__pow5mult+0xa0>
 800c230:	69fc      	ldr	r4, [r7, #28]
 800c232:	b97c      	cbnz	r4, 800c254 <__pow5mult+0x48>
 800c234:	2010      	movs	r0, #16
 800c236:	f7ff fd2b 	bl	800bc90 <malloc>
 800c23a:	4602      	mov	r2, r0
 800c23c:	61f8      	str	r0, [r7, #28]
 800c23e:	b928      	cbnz	r0, 800c24c <__pow5mult+0x40>
 800c240:	4b1d      	ldr	r3, [pc, #116]	@ (800c2b8 <__pow5mult+0xac>)
 800c242:	481e      	ldr	r0, [pc, #120]	@ (800c2bc <__pow5mult+0xb0>)
 800c244:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c248:	f000 fd4a 	bl	800cce0 <__assert_func>
 800c24c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c250:	6004      	str	r4, [r0, #0]
 800c252:	60c4      	str	r4, [r0, #12]
 800c254:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c258:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c25c:	b94c      	cbnz	r4, 800c272 <__pow5mult+0x66>
 800c25e:	f240 2171 	movw	r1, #625	@ 0x271
 800c262:	4638      	mov	r0, r7
 800c264:	f7ff ff1a 	bl	800c09c <__i2b>
 800c268:	2300      	movs	r3, #0
 800c26a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c26e:	4604      	mov	r4, r0
 800c270:	6003      	str	r3, [r0, #0]
 800c272:	f04f 0900 	mov.w	r9, #0
 800c276:	07eb      	lsls	r3, r5, #31
 800c278:	d50a      	bpl.n	800c290 <__pow5mult+0x84>
 800c27a:	4631      	mov	r1, r6
 800c27c:	4622      	mov	r2, r4
 800c27e:	4638      	mov	r0, r7
 800c280:	f7ff ff22 	bl	800c0c8 <__multiply>
 800c284:	4631      	mov	r1, r6
 800c286:	4680      	mov	r8, r0
 800c288:	4638      	mov	r0, r7
 800c28a:	f7ff fe09 	bl	800bea0 <_Bfree>
 800c28e:	4646      	mov	r6, r8
 800c290:	106d      	asrs	r5, r5, #1
 800c292:	d00b      	beq.n	800c2ac <__pow5mult+0xa0>
 800c294:	6820      	ldr	r0, [r4, #0]
 800c296:	b938      	cbnz	r0, 800c2a8 <__pow5mult+0x9c>
 800c298:	4622      	mov	r2, r4
 800c29a:	4621      	mov	r1, r4
 800c29c:	4638      	mov	r0, r7
 800c29e:	f7ff ff13 	bl	800c0c8 <__multiply>
 800c2a2:	6020      	str	r0, [r4, #0]
 800c2a4:	f8c0 9000 	str.w	r9, [r0]
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	e7e4      	b.n	800c276 <__pow5mult+0x6a>
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2b2:	bf00      	nop
 800c2b4:	0800d618 	.word	0x0800d618
 800c2b8:	0800d43c 	.word	0x0800d43c
 800c2bc:	0800d51c 	.word	0x0800d51c

0800c2c0 <__lshift>:
 800c2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2c4:	460c      	mov	r4, r1
 800c2c6:	6849      	ldr	r1, [r1, #4]
 800c2c8:	6923      	ldr	r3, [r4, #16]
 800c2ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2ce:	68a3      	ldr	r3, [r4, #8]
 800c2d0:	4607      	mov	r7, r0
 800c2d2:	4691      	mov	r9, r2
 800c2d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2d8:	f108 0601 	add.w	r6, r8, #1
 800c2dc:	42b3      	cmp	r3, r6
 800c2de:	db0b      	blt.n	800c2f8 <__lshift+0x38>
 800c2e0:	4638      	mov	r0, r7
 800c2e2:	f7ff fd9d 	bl	800be20 <_Balloc>
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	b948      	cbnz	r0, 800c2fe <__lshift+0x3e>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	4b28      	ldr	r3, [pc, #160]	@ (800c390 <__lshift+0xd0>)
 800c2ee:	4829      	ldr	r0, [pc, #164]	@ (800c394 <__lshift+0xd4>)
 800c2f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c2f4:	f000 fcf4 	bl	800cce0 <__assert_func>
 800c2f8:	3101      	adds	r1, #1
 800c2fa:	005b      	lsls	r3, r3, #1
 800c2fc:	e7ee      	b.n	800c2dc <__lshift+0x1c>
 800c2fe:	2300      	movs	r3, #0
 800c300:	f100 0114 	add.w	r1, r0, #20
 800c304:	f100 0210 	add.w	r2, r0, #16
 800c308:	4618      	mov	r0, r3
 800c30a:	4553      	cmp	r3, sl
 800c30c:	db33      	blt.n	800c376 <__lshift+0xb6>
 800c30e:	6920      	ldr	r0, [r4, #16]
 800c310:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c314:	f104 0314 	add.w	r3, r4, #20
 800c318:	f019 091f 	ands.w	r9, r9, #31
 800c31c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c320:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c324:	d02b      	beq.n	800c37e <__lshift+0xbe>
 800c326:	f1c9 0e20 	rsb	lr, r9, #32
 800c32a:	468a      	mov	sl, r1
 800c32c:	2200      	movs	r2, #0
 800c32e:	6818      	ldr	r0, [r3, #0]
 800c330:	fa00 f009 	lsl.w	r0, r0, r9
 800c334:	4310      	orrs	r0, r2
 800c336:	f84a 0b04 	str.w	r0, [sl], #4
 800c33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c33e:	459c      	cmp	ip, r3
 800c340:	fa22 f20e 	lsr.w	r2, r2, lr
 800c344:	d8f3      	bhi.n	800c32e <__lshift+0x6e>
 800c346:	ebac 0304 	sub.w	r3, ip, r4
 800c34a:	3b15      	subs	r3, #21
 800c34c:	f023 0303 	bic.w	r3, r3, #3
 800c350:	3304      	adds	r3, #4
 800c352:	f104 0015 	add.w	r0, r4, #21
 800c356:	4560      	cmp	r0, ip
 800c358:	bf88      	it	hi
 800c35a:	2304      	movhi	r3, #4
 800c35c:	50ca      	str	r2, [r1, r3]
 800c35e:	b10a      	cbz	r2, 800c364 <__lshift+0xa4>
 800c360:	f108 0602 	add.w	r6, r8, #2
 800c364:	3e01      	subs	r6, #1
 800c366:	4638      	mov	r0, r7
 800c368:	612e      	str	r6, [r5, #16]
 800c36a:	4621      	mov	r1, r4
 800c36c:	f7ff fd98 	bl	800bea0 <_Bfree>
 800c370:	4628      	mov	r0, r5
 800c372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c376:	f842 0f04 	str.w	r0, [r2, #4]!
 800c37a:	3301      	adds	r3, #1
 800c37c:	e7c5      	b.n	800c30a <__lshift+0x4a>
 800c37e:	3904      	subs	r1, #4
 800c380:	f853 2b04 	ldr.w	r2, [r3], #4
 800c384:	f841 2f04 	str.w	r2, [r1, #4]!
 800c388:	459c      	cmp	ip, r3
 800c38a:	d8f9      	bhi.n	800c380 <__lshift+0xc0>
 800c38c:	e7ea      	b.n	800c364 <__lshift+0xa4>
 800c38e:	bf00      	nop
 800c390:	0800d4ab 	.word	0x0800d4ab
 800c394:	0800d51c 	.word	0x0800d51c

0800c398 <__mcmp>:
 800c398:	690a      	ldr	r2, [r1, #16]
 800c39a:	4603      	mov	r3, r0
 800c39c:	6900      	ldr	r0, [r0, #16]
 800c39e:	1a80      	subs	r0, r0, r2
 800c3a0:	b530      	push	{r4, r5, lr}
 800c3a2:	d10e      	bne.n	800c3c2 <__mcmp+0x2a>
 800c3a4:	3314      	adds	r3, #20
 800c3a6:	3114      	adds	r1, #20
 800c3a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c3ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c3b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c3b8:	4295      	cmp	r5, r2
 800c3ba:	d003      	beq.n	800c3c4 <__mcmp+0x2c>
 800c3bc:	d205      	bcs.n	800c3ca <__mcmp+0x32>
 800c3be:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c2:	bd30      	pop	{r4, r5, pc}
 800c3c4:	42a3      	cmp	r3, r4
 800c3c6:	d3f3      	bcc.n	800c3b0 <__mcmp+0x18>
 800c3c8:	e7fb      	b.n	800c3c2 <__mcmp+0x2a>
 800c3ca:	2001      	movs	r0, #1
 800c3cc:	e7f9      	b.n	800c3c2 <__mcmp+0x2a>
	...

0800c3d0 <__mdiff>:
 800c3d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d4:	4689      	mov	r9, r1
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	4611      	mov	r1, r2
 800c3da:	4648      	mov	r0, r9
 800c3dc:	4614      	mov	r4, r2
 800c3de:	f7ff ffdb 	bl	800c398 <__mcmp>
 800c3e2:	1e05      	subs	r5, r0, #0
 800c3e4:	d112      	bne.n	800c40c <__mdiff+0x3c>
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	f7ff fd19 	bl	800be20 <_Balloc>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	b928      	cbnz	r0, 800c3fe <__mdiff+0x2e>
 800c3f2:	4b3f      	ldr	r3, [pc, #252]	@ (800c4f0 <__mdiff+0x120>)
 800c3f4:	f240 2137 	movw	r1, #567	@ 0x237
 800c3f8:	483e      	ldr	r0, [pc, #248]	@ (800c4f4 <__mdiff+0x124>)
 800c3fa:	f000 fc71 	bl	800cce0 <__assert_func>
 800c3fe:	2301      	movs	r3, #1
 800c400:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c404:	4610      	mov	r0, r2
 800c406:	b003      	add	sp, #12
 800c408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c40c:	bfbc      	itt	lt
 800c40e:	464b      	movlt	r3, r9
 800c410:	46a1      	movlt	r9, r4
 800c412:	4630      	mov	r0, r6
 800c414:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c418:	bfba      	itte	lt
 800c41a:	461c      	movlt	r4, r3
 800c41c:	2501      	movlt	r5, #1
 800c41e:	2500      	movge	r5, #0
 800c420:	f7ff fcfe 	bl	800be20 <_Balloc>
 800c424:	4602      	mov	r2, r0
 800c426:	b918      	cbnz	r0, 800c430 <__mdiff+0x60>
 800c428:	4b31      	ldr	r3, [pc, #196]	@ (800c4f0 <__mdiff+0x120>)
 800c42a:	f240 2145 	movw	r1, #581	@ 0x245
 800c42e:	e7e3      	b.n	800c3f8 <__mdiff+0x28>
 800c430:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c434:	6926      	ldr	r6, [r4, #16]
 800c436:	60c5      	str	r5, [r0, #12]
 800c438:	f109 0310 	add.w	r3, r9, #16
 800c43c:	f109 0514 	add.w	r5, r9, #20
 800c440:	f104 0e14 	add.w	lr, r4, #20
 800c444:	f100 0b14 	add.w	fp, r0, #20
 800c448:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c44c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c450:	9301      	str	r3, [sp, #4]
 800c452:	46d9      	mov	r9, fp
 800c454:	f04f 0c00 	mov.w	ip, #0
 800c458:	9b01      	ldr	r3, [sp, #4]
 800c45a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c45e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c462:	9301      	str	r3, [sp, #4]
 800c464:	fa1f f38a 	uxth.w	r3, sl
 800c468:	4619      	mov	r1, r3
 800c46a:	b283      	uxth	r3, r0
 800c46c:	1acb      	subs	r3, r1, r3
 800c46e:	0c00      	lsrs	r0, r0, #16
 800c470:	4463      	add	r3, ip
 800c472:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c476:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c480:	4576      	cmp	r6, lr
 800c482:	f849 3b04 	str.w	r3, [r9], #4
 800c486:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c48a:	d8e5      	bhi.n	800c458 <__mdiff+0x88>
 800c48c:	1b33      	subs	r3, r6, r4
 800c48e:	3b15      	subs	r3, #21
 800c490:	f023 0303 	bic.w	r3, r3, #3
 800c494:	3415      	adds	r4, #21
 800c496:	3304      	adds	r3, #4
 800c498:	42a6      	cmp	r6, r4
 800c49a:	bf38      	it	cc
 800c49c:	2304      	movcc	r3, #4
 800c49e:	441d      	add	r5, r3
 800c4a0:	445b      	add	r3, fp
 800c4a2:	461e      	mov	r6, r3
 800c4a4:	462c      	mov	r4, r5
 800c4a6:	4544      	cmp	r4, r8
 800c4a8:	d30e      	bcc.n	800c4c8 <__mdiff+0xf8>
 800c4aa:	f108 0103 	add.w	r1, r8, #3
 800c4ae:	1b49      	subs	r1, r1, r5
 800c4b0:	f021 0103 	bic.w	r1, r1, #3
 800c4b4:	3d03      	subs	r5, #3
 800c4b6:	45a8      	cmp	r8, r5
 800c4b8:	bf38      	it	cc
 800c4ba:	2100      	movcc	r1, #0
 800c4bc:	440b      	add	r3, r1
 800c4be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4c2:	b191      	cbz	r1, 800c4ea <__mdiff+0x11a>
 800c4c4:	6117      	str	r7, [r2, #16]
 800c4c6:	e79d      	b.n	800c404 <__mdiff+0x34>
 800c4c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c4cc:	46e6      	mov	lr, ip
 800c4ce:	0c08      	lsrs	r0, r1, #16
 800c4d0:	fa1c fc81 	uxtah	ip, ip, r1
 800c4d4:	4471      	add	r1, lr
 800c4d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c4da:	b289      	uxth	r1, r1
 800c4dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c4e0:	f846 1b04 	str.w	r1, [r6], #4
 800c4e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4e8:	e7dd      	b.n	800c4a6 <__mdiff+0xd6>
 800c4ea:	3f01      	subs	r7, #1
 800c4ec:	e7e7      	b.n	800c4be <__mdiff+0xee>
 800c4ee:	bf00      	nop
 800c4f0:	0800d4ab 	.word	0x0800d4ab
 800c4f4:	0800d51c 	.word	0x0800d51c

0800c4f8 <__ulp>:
 800c4f8:	b082      	sub	sp, #8
 800c4fa:	ed8d 0b00 	vstr	d0, [sp]
 800c4fe:	9a01      	ldr	r2, [sp, #4]
 800c500:	4b0f      	ldr	r3, [pc, #60]	@ (800c540 <__ulp+0x48>)
 800c502:	4013      	ands	r3, r2
 800c504:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c508:	2b00      	cmp	r3, #0
 800c50a:	dc08      	bgt.n	800c51e <__ulp+0x26>
 800c50c:	425b      	negs	r3, r3
 800c50e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c512:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c516:	da04      	bge.n	800c522 <__ulp+0x2a>
 800c518:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c51c:	4113      	asrs	r3, r2
 800c51e:	2200      	movs	r2, #0
 800c520:	e008      	b.n	800c534 <__ulp+0x3c>
 800c522:	f1a2 0314 	sub.w	r3, r2, #20
 800c526:	2b1e      	cmp	r3, #30
 800c528:	bfda      	itte	le
 800c52a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c52e:	40da      	lsrle	r2, r3
 800c530:	2201      	movgt	r2, #1
 800c532:	2300      	movs	r3, #0
 800c534:	4619      	mov	r1, r3
 800c536:	4610      	mov	r0, r2
 800c538:	ec41 0b10 	vmov	d0, r0, r1
 800c53c:	b002      	add	sp, #8
 800c53e:	4770      	bx	lr
 800c540:	7ff00000 	.word	0x7ff00000

0800c544 <__b2d>:
 800c544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c548:	6906      	ldr	r6, [r0, #16]
 800c54a:	f100 0814 	add.w	r8, r0, #20
 800c54e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c552:	1f37      	subs	r7, r6, #4
 800c554:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c558:	4610      	mov	r0, r2
 800c55a:	f7ff fd53 	bl	800c004 <__hi0bits>
 800c55e:	f1c0 0320 	rsb	r3, r0, #32
 800c562:	280a      	cmp	r0, #10
 800c564:	600b      	str	r3, [r1, #0]
 800c566:	491b      	ldr	r1, [pc, #108]	@ (800c5d4 <__b2d+0x90>)
 800c568:	dc15      	bgt.n	800c596 <__b2d+0x52>
 800c56a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c56e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c572:	45b8      	cmp	r8, r7
 800c574:	ea43 0501 	orr.w	r5, r3, r1
 800c578:	bf34      	ite	cc
 800c57a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c57e:	2300      	movcs	r3, #0
 800c580:	3015      	adds	r0, #21
 800c582:	fa02 f000 	lsl.w	r0, r2, r0
 800c586:	fa23 f30c 	lsr.w	r3, r3, ip
 800c58a:	4303      	orrs	r3, r0
 800c58c:	461c      	mov	r4, r3
 800c58e:	ec45 4b10 	vmov	d0, r4, r5
 800c592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c596:	45b8      	cmp	r8, r7
 800c598:	bf3a      	itte	cc
 800c59a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c59e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c5a2:	2300      	movcs	r3, #0
 800c5a4:	380b      	subs	r0, #11
 800c5a6:	d012      	beq.n	800c5ce <__b2d+0x8a>
 800c5a8:	f1c0 0120 	rsb	r1, r0, #32
 800c5ac:	fa23 f401 	lsr.w	r4, r3, r1
 800c5b0:	4082      	lsls	r2, r0
 800c5b2:	4322      	orrs	r2, r4
 800c5b4:	4547      	cmp	r7, r8
 800c5b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c5ba:	bf8c      	ite	hi
 800c5bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c5c0:	2200      	movls	r2, #0
 800c5c2:	4083      	lsls	r3, r0
 800c5c4:	40ca      	lsrs	r2, r1
 800c5c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	e7de      	b.n	800c58c <__b2d+0x48>
 800c5ce:	ea42 0501 	orr.w	r5, r2, r1
 800c5d2:	e7db      	b.n	800c58c <__b2d+0x48>
 800c5d4:	3ff00000 	.word	0x3ff00000

0800c5d8 <__d2b>:
 800c5d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5dc:	460f      	mov	r7, r1
 800c5de:	2101      	movs	r1, #1
 800c5e0:	ec59 8b10 	vmov	r8, r9, d0
 800c5e4:	4616      	mov	r6, r2
 800c5e6:	f7ff fc1b 	bl	800be20 <_Balloc>
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	b930      	cbnz	r0, 800c5fc <__d2b+0x24>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	4b23      	ldr	r3, [pc, #140]	@ (800c680 <__d2b+0xa8>)
 800c5f2:	4824      	ldr	r0, [pc, #144]	@ (800c684 <__d2b+0xac>)
 800c5f4:	f240 310f 	movw	r1, #783	@ 0x30f
 800c5f8:	f000 fb72 	bl	800cce0 <__assert_func>
 800c5fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c600:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c604:	b10d      	cbz	r5, 800c60a <__d2b+0x32>
 800c606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c60a:	9301      	str	r3, [sp, #4]
 800c60c:	f1b8 0300 	subs.w	r3, r8, #0
 800c610:	d023      	beq.n	800c65a <__d2b+0x82>
 800c612:	4668      	mov	r0, sp
 800c614:	9300      	str	r3, [sp, #0]
 800c616:	f7ff fd14 	bl	800c042 <__lo0bits>
 800c61a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c61e:	b1d0      	cbz	r0, 800c656 <__d2b+0x7e>
 800c620:	f1c0 0320 	rsb	r3, r0, #32
 800c624:	fa02 f303 	lsl.w	r3, r2, r3
 800c628:	430b      	orrs	r3, r1
 800c62a:	40c2      	lsrs	r2, r0
 800c62c:	6163      	str	r3, [r4, #20]
 800c62e:	9201      	str	r2, [sp, #4]
 800c630:	9b01      	ldr	r3, [sp, #4]
 800c632:	61a3      	str	r3, [r4, #24]
 800c634:	2b00      	cmp	r3, #0
 800c636:	bf0c      	ite	eq
 800c638:	2201      	moveq	r2, #1
 800c63a:	2202      	movne	r2, #2
 800c63c:	6122      	str	r2, [r4, #16]
 800c63e:	b1a5      	cbz	r5, 800c66a <__d2b+0x92>
 800c640:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c644:	4405      	add	r5, r0
 800c646:	603d      	str	r5, [r7, #0]
 800c648:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c64c:	6030      	str	r0, [r6, #0]
 800c64e:	4620      	mov	r0, r4
 800c650:	b003      	add	sp, #12
 800c652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c656:	6161      	str	r1, [r4, #20]
 800c658:	e7ea      	b.n	800c630 <__d2b+0x58>
 800c65a:	a801      	add	r0, sp, #4
 800c65c:	f7ff fcf1 	bl	800c042 <__lo0bits>
 800c660:	9b01      	ldr	r3, [sp, #4]
 800c662:	6163      	str	r3, [r4, #20]
 800c664:	3020      	adds	r0, #32
 800c666:	2201      	movs	r2, #1
 800c668:	e7e8      	b.n	800c63c <__d2b+0x64>
 800c66a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c66e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c672:	6038      	str	r0, [r7, #0]
 800c674:	6918      	ldr	r0, [r3, #16]
 800c676:	f7ff fcc5 	bl	800c004 <__hi0bits>
 800c67a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c67e:	e7e5      	b.n	800c64c <__d2b+0x74>
 800c680:	0800d4ab 	.word	0x0800d4ab
 800c684:	0800d51c 	.word	0x0800d51c

0800c688 <__ratio>:
 800c688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	b085      	sub	sp, #20
 800c68e:	e9cd 1000 	strd	r1, r0, [sp]
 800c692:	a902      	add	r1, sp, #8
 800c694:	f7ff ff56 	bl	800c544 <__b2d>
 800c698:	9800      	ldr	r0, [sp, #0]
 800c69a:	a903      	add	r1, sp, #12
 800c69c:	ec55 4b10 	vmov	r4, r5, d0
 800c6a0:	f7ff ff50 	bl	800c544 <__b2d>
 800c6a4:	9b01      	ldr	r3, [sp, #4]
 800c6a6:	6919      	ldr	r1, [r3, #16]
 800c6a8:	9b00      	ldr	r3, [sp, #0]
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	1ac9      	subs	r1, r1, r3
 800c6ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c6b2:	1a9b      	subs	r3, r3, r2
 800c6b4:	ec5b ab10 	vmov	sl, fp, d0
 800c6b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	bfce      	itee	gt
 800c6c0:	462a      	movgt	r2, r5
 800c6c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c6c6:	465a      	movle	r2, fp
 800c6c8:	462f      	mov	r7, r5
 800c6ca:	46d9      	mov	r9, fp
 800c6cc:	bfcc      	ite	gt
 800c6ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c6d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c6d6:	464b      	mov	r3, r9
 800c6d8:	4652      	mov	r2, sl
 800c6da:	4620      	mov	r0, r4
 800c6dc:	4639      	mov	r1, r7
 800c6de:	f7f4 f8b5 	bl	800084c <__aeabi_ddiv>
 800c6e2:	ec41 0b10 	vmov	d0, r0, r1
 800c6e6:	b005      	add	sp, #20
 800c6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c6ec <__copybits>:
 800c6ec:	3901      	subs	r1, #1
 800c6ee:	b570      	push	{r4, r5, r6, lr}
 800c6f0:	1149      	asrs	r1, r1, #5
 800c6f2:	6914      	ldr	r4, [r2, #16]
 800c6f4:	3101      	adds	r1, #1
 800c6f6:	f102 0314 	add.w	r3, r2, #20
 800c6fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c6fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c702:	1f05      	subs	r5, r0, #4
 800c704:	42a3      	cmp	r3, r4
 800c706:	d30c      	bcc.n	800c722 <__copybits+0x36>
 800c708:	1aa3      	subs	r3, r4, r2
 800c70a:	3b11      	subs	r3, #17
 800c70c:	f023 0303 	bic.w	r3, r3, #3
 800c710:	3211      	adds	r2, #17
 800c712:	42a2      	cmp	r2, r4
 800c714:	bf88      	it	hi
 800c716:	2300      	movhi	r3, #0
 800c718:	4418      	add	r0, r3
 800c71a:	2300      	movs	r3, #0
 800c71c:	4288      	cmp	r0, r1
 800c71e:	d305      	bcc.n	800c72c <__copybits+0x40>
 800c720:	bd70      	pop	{r4, r5, r6, pc}
 800c722:	f853 6b04 	ldr.w	r6, [r3], #4
 800c726:	f845 6f04 	str.w	r6, [r5, #4]!
 800c72a:	e7eb      	b.n	800c704 <__copybits+0x18>
 800c72c:	f840 3b04 	str.w	r3, [r0], #4
 800c730:	e7f4      	b.n	800c71c <__copybits+0x30>

0800c732 <__any_on>:
 800c732:	f100 0214 	add.w	r2, r0, #20
 800c736:	6900      	ldr	r0, [r0, #16]
 800c738:	114b      	asrs	r3, r1, #5
 800c73a:	4298      	cmp	r0, r3
 800c73c:	b510      	push	{r4, lr}
 800c73e:	db11      	blt.n	800c764 <__any_on+0x32>
 800c740:	dd0a      	ble.n	800c758 <__any_on+0x26>
 800c742:	f011 011f 	ands.w	r1, r1, #31
 800c746:	d007      	beq.n	800c758 <__any_on+0x26>
 800c748:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c74c:	fa24 f001 	lsr.w	r0, r4, r1
 800c750:	fa00 f101 	lsl.w	r1, r0, r1
 800c754:	428c      	cmp	r4, r1
 800c756:	d10b      	bne.n	800c770 <__any_on+0x3e>
 800c758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d803      	bhi.n	800c768 <__any_on+0x36>
 800c760:	2000      	movs	r0, #0
 800c762:	bd10      	pop	{r4, pc}
 800c764:	4603      	mov	r3, r0
 800c766:	e7f7      	b.n	800c758 <__any_on+0x26>
 800c768:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c76c:	2900      	cmp	r1, #0
 800c76e:	d0f5      	beq.n	800c75c <__any_on+0x2a>
 800c770:	2001      	movs	r0, #1
 800c772:	e7f6      	b.n	800c762 <__any_on+0x30>

0800c774 <_strtol_l.isra.0>:
 800c774:	2b24      	cmp	r3, #36	@ 0x24
 800c776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c77a:	4686      	mov	lr, r0
 800c77c:	4690      	mov	r8, r2
 800c77e:	d801      	bhi.n	800c784 <_strtol_l.isra.0+0x10>
 800c780:	2b01      	cmp	r3, #1
 800c782:	d106      	bne.n	800c792 <_strtol_l.isra.0+0x1e>
 800c784:	f7fe f85a 	bl	800a83c <__errno>
 800c788:	2316      	movs	r3, #22
 800c78a:	6003      	str	r3, [r0, #0]
 800c78c:	2000      	movs	r0, #0
 800c78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c792:	4834      	ldr	r0, [pc, #208]	@ (800c864 <_strtol_l.isra.0+0xf0>)
 800c794:	460d      	mov	r5, r1
 800c796:	462a      	mov	r2, r5
 800c798:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c79c:	5d06      	ldrb	r6, [r0, r4]
 800c79e:	f016 0608 	ands.w	r6, r6, #8
 800c7a2:	d1f8      	bne.n	800c796 <_strtol_l.isra.0+0x22>
 800c7a4:	2c2d      	cmp	r4, #45	@ 0x2d
 800c7a6:	d110      	bne.n	800c7ca <_strtol_l.isra.0+0x56>
 800c7a8:	782c      	ldrb	r4, [r5, #0]
 800c7aa:	2601      	movs	r6, #1
 800c7ac:	1c95      	adds	r5, r2, #2
 800c7ae:	f033 0210 	bics.w	r2, r3, #16
 800c7b2:	d115      	bne.n	800c7e0 <_strtol_l.isra.0+0x6c>
 800c7b4:	2c30      	cmp	r4, #48	@ 0x30
 800c7b6:	d10d      	bne.n	800c7d4 <_strtol_l.isra.0+0x60>
 800c7b8:	782a      	ldrb	r2, [r5, #0]
 800c7ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c7be:	2a58      	cmp	r2, #88	@ 0x58
 800c7c0:	d108      	bne.n	800c7d4 <_strtol_l.isra.0+0x60>
 800c7c2:	786c      	ldrb	r4, [r5, #1]
 800c7c4:	3502      	adds	r5, #2
 800c7c6:	2310      	movs	r3, #16
 800c7c8:	e00a      	b.n	800c7e0 <_strtol_l.isra.0+0x6c>
 800c7ca:	2c2b      	cmp	r4, #43	@ 0x2b
 800c7cc:	bf04      	itt	eq
 800c7ce:	782c      	ldrbeq	r4, [r5, #0]
 800c7d0:	1c95      	addeq	r5, r2, #2
 800c7d2:	e7ec      	b.n	800c7ae <_strtol_l.isra.0+0x3a>
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1f6      	bne.n	800c7c6 <_strtol_l.isra.0+0x52>
 800c7d8:	2c30      	cmp	r4, #48	@ 0x30
 800c7da:	bf14      	ite	ne
 800c7dc:	230a      	movne	r3, #10
 800c7de:	2308      	moveq	r3, #8
 800c7e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c7e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	fbbc f9f3 	udiv	r9, ip, r3
 800c7ee:	4610      	mov	r0, r2
 800c7f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800c7f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c7f8:	2f09      	cmp	r7, #9
 800c7fa:	d80f      	bhi.n	800c81c <_strtol_l.isra.0+0xa8>
 800c7fc:	463c      	mov	r4, r7
 800c7fe:	42a3      	cmp	r3, r4
 800c800:	dd1b      	ble.n	800c83a <_strtol_l.isra.0+0xc6>
 800c802:	1c57      	adds	r7, r2, #1
 800c804:	d007      	beq.n	800c816 <_strtol_l.isra.0+0xa2>
 800c806:	4581      	cmp	r9, r0
 800c808:	d314      	bcc.n	800c834 <_strtol_l.isra.0+0xc0>
 800c80a:	d101      	bne.n	800c810 <_strtol_l.isra.0+0x9c>
 800c80c:	45a2      	cmp	sl, r4
 800c80e:	db11      	blt.n	800c834 <_strtol_l.isra.0+0xc0>
 800c810:	fb00 4003 	mla	r0, r0, r3, r4
 800c814:	2201      	movs	r2, #1
 800c816:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c81a:	e7eb      	b.n	800c7f4 <_strtol_l.isra.0+0x80>
 800c81c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c820:	2f19      	cmp	r7, #25
 800c822:	d801      	bhi.n	800c828 <_strtol_l.isra.0+0xb4>
 800c824:	3c37      	subs	r4, #55	@ 0x37
 800c826:	e7ea      	b.n	800c7fe <_strtol_l.isra.0+0x8a>
 800c828:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c82c:	2f19      	cmp	r7, #25
 800c82e:	d804      	bhi.n	800c83a <_strtol_l.isra.0+0xc6>
 800c830:	3c57      	subs	r4, #87	@ 0x57
 800c832:	e7e4      	b.n	800c7fe <_strtol_l.isra.0+0x8a>
 800c834:	f04f 32ff 	mov.w	r2, #4294967295
 800c838:	e7ed      	b.n	800c816 <_strtol_l.isra.0+0xa2>
 800c83a:	1c53      	adds	r3, r2, #1
 800c83c:	d108      	bne.n	800c850 <_strtol_l.isra.0+0xdc>
 800c83e:	2322      	movs	r3, #34	@ 0x22
 800c840:	f8ce 3000 	str.w	r3, [lr]
 800c844:	4660      	mov	r0, ip
 800c846:	f1b8 0f00 	cmp.w	r8, #0
 800c84a:	d0a0      	beq.n	800c78e <_strtol_l.isra.0+0x1a>
 800c84c:	1e69      	subs	r1, r5, #1
 800c84e:	e006      	b.n	800c85e <_strtol_l.isra.0+0xea>
 800c850:	b106      	cbz	r6, 800c854 <_strtol_l.isra.0+0xe0>
 800c852:	4240      	negs	r0, r0
 800c854:	f1b8 0f00 	cmp.w	r8, #0
 800c858:	d099      	beq.n	800c78e <_strtol_l.isra.0+0x1a>
 800c85a:	2a00      	cmp	r2, #0
 800c85c:	d1f6      	bne.n	800c84c <_strtol_l.isra.0+0xd8>
 800c85e:	f8c8 1000 	str.w	r1, [r8]
 800c862:	e794      	b.n	800c78e <_strtol_l.isra.0+0x1a>
 800c864:	0800d719 	.word	0x0800d719

0800c868 <_strtol_r>:
 800c868:	f7ff bf84 	b.w	800c774 <_strtol_l.isra.0>

0800c86c <__ascii_wctomb>:
 800c86c:	4603      	mov	r3, r0
 800c86e:	4608      	mov	r0, r1
 800c870:	b141      	cbz	r1, 800c884 <__ascii_wctomb+0x18>
 800c872:	2aff      	cmp	r2, #255	@ 0xff
 800c874:	d904      	bls.n	800c880 <__ascii_wctomb+0x14>
 800c876:	228a      	movs	r2, #138	@ 0x8a
 800c878:	601a      	str	r2, [r3, #0]
 800c87a:	f04f 30ff 	mov.w	r0, #4294967295
 800c87e:	4770      	bx	lr
 800c880:	700a      	strb	r2, [r1, #0]
 800c882:	2001      	movs	r0, #1
 800c884:	4770      	bx	lr

0800c886 <__ssputs_r>:
 800c886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c88a:	688e      	ldr	r6, [r1, #8]
 800c88c:	461f      	mov	r7, r3
 800c88e:	42be      	cmp	r6, r7
 800c890:	680b      	ldr	r3, [r1, #0]
 800c892:	4682      	mov	sl, r0
 800c894:	460c      	mov	r4, r1
 800c896:	4690      	mov	r8, r2
 800c898:	d82d      	bhi.n	800c8f6 <__ssputs_r+0x70>
 800c89a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c89e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c8a2:	d026      	beq.n	800c8f2 <__ssputs_r+0x6c>
 800c8a4:	6965      	ldr	r5, [r4, #20]
 800c8a6:	6909      	ldr	r1, [r1, #16]
 800c8a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8ac:	eba3 0901 	sub.w	r9, r3, r1
 800c8b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8b4:	1c7b      	adds	r3, r7, #1
 800c8b6:	444b      	add	r3, r9
 800c8b8:	106d      	asrs	r5, r5, #1
 800c8ba:	429d      	cmp	r5, r3
 800c8bc:	bf38      	it	cc
 800c8be:	461d      	movcc	r5, r3
 800c8c0:	0553      	lsls	r3, r2, #21
 800c8c2:	d527      	bpl.n	800c914 <__ssputs_r+0x8e>
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	f7ff fa0d 	bl	800bce4 <_malloc_r>
 800c8ca:	4606      	mov	r6, r0
 800c8cc:	b360      	cbz	r0, 800c928 <__ssputs_r+0xa2>
 800c8ce:	6921      	ldr	r1, [r4, #16]
 800c8d0:	464a      	mov	r2, r9
 800c8d2:	f7fd ffe0 	bl	800a896 <memcpy>
 800c8d6:	89a3      	ldrh	r3, [r4, #12]
 800c8d8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c8dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8e0:	81a3      	strh	r3, [r4, #12]
 800c8e2:	6126      	str	r6, [r4, #16]
 800c8e4:	6165      	str	r5, [r4, #20]
 800c8e6:	444e      	add	r6, r9
 800c8e8:	eba5 0509 	sub.w	r5, r5, r9
 800c8ec:	6026      	str	r6, [r4, #0]
 800c8ee:	60a5      	str	r5, [r4, #8]
 800c8f0:	463e      	mov	r6, r7
 800c8f2:	42be      	cmp	r6, r7
 800c8f4:	d900      	bls.n	800c8f8 <__ssputs_r+0x72>
 800c8f6:	463e      	mov	r6, r7
 800c8f8:	6820      	ldr	r0, [r4, #0]
 800c8fa:	4632      	mov	r2, r6
 800c8fc:	4641      	mov	r1, r8
 800c8fe:	f000 f9c5 	bl	800cc8c <memmove>
 800c902:	68a3      	ldr	r3, [r4, #8]
 800c904:	1b9b      	subs	r3, r3, r6
 800c906:	60a3      	str	r3, [r4, #8]
 800c908:	6823      	ldr	r3, [r4, #0]
 800c90a:	4433      	add	r3, r6
 800c90c:	6023      	str	r3, [r4, #0]
 800c90e:	2000      	movs	r0, #0
 800c910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c914:	462a      	mov	r2, r5
 800c916:	f000 fa15 	bl	800cd44 <_realloc_r>
 800c91a:	4606      	mov	r6, r0
 800c91c:	2800      	cmp	r0, #0
 800c91e:	d1e0      	bne.n	800c8e2 <__ssputs_r+0x5c>
 800c920:	6921      	ldr	r1, [r4, #16]
 800c922:	4650      	mov	r0, sl
 800c924:	f7fe fe30 	bl	800b588 <_free_r>
 800c928:	230c      	movs	r3, #12
 800c92a:	f8ca 3000 	str.w	r3, [sl]
 800c92e:	89a3      	ldrh	r3, [r4, #12]
 800c930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c934:	81a3      	strh	r3, [r4, #12]
 800c936:	f04f 30ff 	mov.w	r0, #4294967295
 800c93a:	e7e9      	b.n	800c910 <__ssputs_r+0x8a>

0800c93c <_svfiprintf_r>:
 800c93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c940:	4698      	mov	r8, r3
 800c942:	898b      	ldrh	r3, [r1, #12]
 800c944:	061b      	lsls	r3, r3, #24
 800c946:	b09d      	sub	sp, #116	@ 0x74
 800c948:	4607      	mov	r7, r0
 800c94a:	460d      	mov	r5, r1
 800c94c:	4614      	mov	r4, r2
 800c94e:	d510      	bpl.n	800c972 <_svfiprintf_r+0x36>
 800c950:	690b      	ldr	r3, [r1, #16]
 800c952:	b973      	cbnz	r3, 800c972 <_svfiprintf_r+0x36>
 800c954:	2140      	movs	r1, #64	@ 0x40
 800c956:	f7ff f9c5 	bl	800bce4 <_malloc_r>
 800c95a:	6028      	str	r0, [r5, #0]
 800c95c:	6128      	str	r0, [r5, #16]
 800c95e:	b930      	cbnz	r0, 800c96e <_svfiprintf_r+0x32>
 800c960:	230c      	movs	r3, #12
 800c962:	603b      	str	r3, [r7, #0]
 800c964:	f04f 30ff 	mov.w	r0, #4294967295
 800c968:	b01d      	add	sp, #116	@ 0x74
 800c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c96e:	2340      	movs	r3, #64	@ 0x40
 800c970:	616b      	str	r3, [r5, #20]
 800c972:	2300      	movs	r3, #0
 800c974:	9309      	str	r3, [sp, #36]	@ 0x24
 800c976:	2320      	movs	r3, #32
 800c978:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c97c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c980:	2330      	movs	r3, #48	@ 0x30
 800c982:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cb20 <_svfiprintf_r+0x1e4>
 800c986:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c98a:	f04f 0901 	mov.w	r9, #1
 800c98e:	4623      	mov	r3, r4
 800c990:	469a      	mov	sl, r3
 800c992:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c996:	b10a      	cbz	r2, 800c99c <_svfiprintf_r+0x60>
 800c998:	2a25      	cmp	r2, #37	@ 0x25
 800c99a:	d1f9      	bne.n	800c990 <_svfiprintf_r+0x54>
 800c99c:	ebba 0b04 	subs.w	fp, sl, r4
 800c9a0:	d00b      	beq.n	800c9ba <_svfiprintf_r+0x7e>
 800c9a2:	465b      	mov	r3, fp
 800c9a4:	4622      	mov	r2, r4
 800c9a6:	4629      	mov	r1, r5
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	f7ff ff6c 	bl	800c886 <__ssputs_r>
 800c9ae:	3001      	adds	r0, #1
 800c9b0:	f000 80a7 	beq.w	800cb02 <_svfiprintf_r+0x1c6>
 800c9b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9b6:	445a      	add	r2, fp
 800c9b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	f000 809f 	beq.w	800cb02 <_svfiprintf_r+0x1c6>
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9ce:	f10a 0a01 	add.w	sl, sl, #1
 800c9d2:	9304      	str	r3, [sp, #16]
 800c9d4:	9307      	str	r3, [sp, #28]
 800c9d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9da:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9dc:	4654      	mov	r4, sl
 800c9de:	2205      	movs	r2, #5
 800c9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9e4:	484e      	ldr	r0, [pc, #312]	@ (800cb20 <_svfiprintf_r+0x1e4>)
 800c9e6:	f7f3 fbf3 	bl	80001d0 <memchr>
 800c9ea:	9a04      	ldr	r2, [sp, #16]
 800c9ec:	b9d8      	cbnz	r0, 800ca26 <_svfiprintf_r+0xea>
 800c9ee:	06d0      	lsls	r0, r2, #27
 800c9f0:	bf44      	itt	mi
 800c9f2:	2320      	movmi	r3, #32
 800c9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9f8:	0711      	lsls	r1, r2, #28
 800c9fa:	bf44      	itt	mi
 800c9fc:	232b      	movmi	r3, #43	@ 0x2b
 800c9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca02:	f89a 3000 	ldrb.w	r3, [sl]
 800ca06:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca08:	d015      	beq.n	800ca36 <_svfiprintf_r+0xfa>
 800ca0a:	9a07      	ldr	r2, [sp, #28]
 800ca0c:	4654      	mov	r4, sl
 800ca0e:	2000      	movs	r0, #0
 800ca10:	f04f 0c0a 	mov.w	ip, #10
 800ca14:	4621      	mov	r1, r4
 800ca16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca1a:	3b30      	subs	r3, #48	@ 0x30
 800ca1c:	2b09      	cmp	r3, #9
 800ca1e:	d94b      	bls.n	800cab8 <_svfiprintf_r+0x17c>
 800ca20:	b1b0      	cbz	r0, 800ca50 <_svfiprintf_r+0x114>
 800ca22:	9207      	str	r2, [sp, #28]
 800ca24:	e014      	b.n	800ca50 <_svfiprintf_r+0x114>
 800ca26:	eba0 0308 	sub.w	r3, r0, r8
 800ca2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	9304      	str	r3, [sp, #16]
 800ca32:	46a2      	mov	sl, r4
 800ca34:	e7d2      	b.n	800c9dc <_svfiprintf_r+0xa0>
 800ca36:	9b03      	ldr	r3, [sp, #12]
 800ca38:	1d19      	adds	r1, r3, #4
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	9103      	str	r1, [sp, #12]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	bfbb      	ittet	lt
 800ca42:	425b      	neglt	r3, r3
 800ca44:	f042 0202 	orrlt.w	r2, r2, #2
 800ca48:	9307      	strge	r3, [sp, #28]
 800ca4a:	9307      	strlt	r3, [sp, #28]
 800ca4c:	bfb8      	it	lt
 800ca4e:	9204      	strlt	r2, [sp, #16]
 800ca50:	7823      	ldrb	r3, [r4, #0]
 800ca52:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca54:	d10a      	bne.n	800ca6c <_svfiprintf_r+0x130>
 800ca56:	7863      	ldrb	r3, [r4, #1]
 800ca58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca5a:	d132      	bne.n	800cac2 <_svfiprintf_r+0x186>
 800ca5c:	9b03      	ldr	r3, [sp, #12]
 800ca5e:	1d1a      	adds	r2, r3, #4
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	9203      	str	r2, [sp, #12]
 800ca64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca68:	3402      	adds	r4, #2
 800ca6a:	9305      	str	r3, [sp, #20]
 800ca6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cb30 <_svfiprintf_r+0x1f4>
 800ca70:	7821      	ldrb	r1, [r4, #0]
 800ca72:	2203      	movs	r2, #3
 800ca74:	4650      	mov	r0, sl
 800ca76:	f7f3 fbab 	bl	80001d0 <memchr>
 800ca7a:	b138      	cbz	r0, 800ca8c <_svfiprintf_r+0x150>
 800ca7c:	9b04      	ldr	r3, [sp, #16]
 800ca7e:	eba0 000a 	sub.w	r0, r0, sl
 800ca82:	2240      	movs	r2, #64	@ 0x40
 800ca84:	4082      	lsls	r2, r0
 800ca86:	4313      	orrs	r3, r2
 800ca88:	3401      	adds	r4, #1
 800ca8a:	9304      	str	r3, [sp, #16]
 800ca8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca90:	4824      	ldr	r0, [pc, #144]	@ (800cb24 <_svfiprintf_r+0x1e8>)
 800ca92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca96:	2206      	movs	r2, #6
 800ca98:	f7f3 fb9a 	bl	80001d0 <memchr>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d036      	beq.n	800cb0e <_svfiprintf_r+0x1d2>
 800caa0:	4b21      	ldr	r3, [pc, #132]	@ (800cb28 <_svfiprintf_r+0x1ec>)
 800caa2:	bb1b      	cbnz	r3, 800caec <_svfiprintf_r+0x1b0>
 800caa4:	9b03      	ldr	r3, [sp, #12]
 800caa6:	3307      	adds	r3, #7
 800caa8:	f023 0307 	bic.w	r3, r3, #7
 800caac:	3308      	adds	r3, #8
 800caae:	9303      	str	r3, [sp, #12]
 800cab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cab2:	4433      	add	r3, r6
 800cab4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cab6:	e76a      	b.n	800c98e <_svfiprintf_r+0x52>
 800cab8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cabc:	460c      	mov	r4, r1
 800cabe:	2001      	movs	r0, #1
 800cac0:	e7a8      	b.n	800ca14 <_svfiprintf_r+0xd8>
 800cac2:	2300      	movs	r3, #0
 800cac4:	3401      	adds	r4, #1
 800cac6:	9305      	str	r3, [sp, #20]
 800cac8:	4619      	mov	r1, r3
 800caca:	f04f 0c0a 	mov.w	ip, #10
 800cace:	4620      	mov	r0, r4
 800cad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cad4:	3a30      	subs	r2, #48	@ 0x30
 800cad6:	2a09      	cmp	r2, #9
 800cad8:	d903      	bls.n	800cae2 <_svfiprintf_r+0x1a6>
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d0c6      	beq.n	800ca6c <_svfiprintf_r+0x130>
 800cade:	9105      	str	r1, [sp, #20]
 800cae0:	e7c4      	b.n	800ca6c <_svfiprintf_r+0x130>
 800cae2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cae6:	4604      	mov	r4, r0
 800cae8:	2301      	movs	r3, #1
 800caea:	e7f0      	b.n	800cace <_svfiprintf_r+0x192>
 800caec:	ab03      	add	r3, sp, #12
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	462a      	mov	r2, r5
 800caf2:	4b0e      	ldr	r3, [pc, #56]	@ (800cb2c <_svfiprintf_r+0x1f0>)
 800caf4:	a904      	add	r1, sp, #16
 800caf6:	4638      	mov	r0, r7
 800caf8:	f7fc ff50 	bl	800999c <_printf_float>
 800cafc:	1c42      	adds	r2, r0, #1
 800cafe:	4606      	mov	r6, r0
 800cb00:	d1d6      	bne.n	800cab0 <_svfiprintf_r+0x174>
 800cb02:	89ab      	ldrh	r3, [r5, #12]
 800cb04:	065b      	lsls	r3, r3, #25
 800cb06:	f53f af2d 	bmi.w	800c964 <_svfiprintf_r+0x28>
 800cb0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb0c:	e72c      	b.n	800c968 <_svfiprintf_r+0x2c>
 800cb0e:	ab03      	add	r3, sp, #12
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	462a      	mov	r2, r5
 800cb14:	4b05      	ldr	r3, [pc, #20]	@ (800cb2c <_svfiprintf_r+0x1f0>)
 800cb16:	a904      	add	r1, sp, #16
 800cb18:	4638      	mov	r0, r7
 800cb1a:	f7fd f9d7 	bl	8009ecc <_printf_i>
 800cb1e:	e7ed      	b.n	800cafc <_svfiprintf_r+0x1c0>
 800cb20:	0800d575 	.word	0x0800d575
 800cb24:	0800d57f 	.word	0x0800d57f
 800cb28:	0800999d 	.word	0x0800999d
 800cb2c:	0800c887 	.word	0x0800c887
 800cb30:	0800d57b 	.word	0x0800d57b

0800cb34 <__sflush_r>:
 800cb34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb3c:	0716      	lsls	r6, r2, #28
 800cb3e:	4605      	mov	r5, r0
 800cb40:	460c      	mov	r4, r1
 800cb42:	d454      	bmi.n	800cbee <__sflush_r+0xba>
 800cb44:	684b      	ldr	r3, [r1, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	dc02      	bgt.n	800cb50 <__sflush_r+0x1c>
 800cb4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	dd48      	ble.n	800cbe2 <__sflush_r+0xae>
 800cb50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb52:	2e00      	cmp	r6, #0
 800cb54:	d045      	beq.n	800cbe2 <__sflush_r+0xae>
 800cb56:	2300      	movs	r3, #0
 800cb58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb5c:	682f      	ldr	r7, [r5, #0]
 800cb5e:	6a21      	ldr	r1, [r4, #32]
 800cb60:	602b      	str	r3, [r5, #0]
 800cb62:	d030      	beq.n	800cbc6 <__sflush_r+0x92>
 800cb64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb66:	89a3      	ldrh	r3, [r4, #12]
 800cb68:	0759      	lsls	r1, r3, #29
 800cb6a:	d505      	bpl.n	800cb78 <__sflush_r+0x44>
 800cb6c:	6863      	ldr	r3, [r4, #4]
 800cb6e:	1ad2      	subs	r2, r2, r3
 800cb70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb72:	b10b      	cbz	r3, 800cb78 <__sflush_r+0x44>
 800cb74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb76:	1ad2      	subs	r2, r2, r3
 800cb78:	2300      	movs	r3, #0
 800cb7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb7c:	6a21      	ldr	r1, [r4, #32]
 800cb7e:	4628      	mov	r0, r5
 800cb80:	47b0      	blx	r6
 800cb82:	1c43      	adds	r3, r0, #1
 800cb84:	89a3      	ldrh	r3, [r4, #12]
 800cb86:	d106      	bne.n	800cb96 <__sflush_r+0x62>
 800cb88:	6829      	ldr	r1, [r5, #0]
 800cb8a:	291d      	cmp	r1, #29
 800cb8c:	d82b      	bhi.n	800cbe6 <__sflush_r+0xb2>
 800cb8e:	4a2a      	ldr	r2, [pc, #168]	@ (800cc38 <__sflush_r+0x104>)
 800cb90:	40ca      	lsrs	r2, r1
 800cb92:	07d6      	lsls	r6, r2, #31
 800cb94:	d527      	bpl.n	800cbe6 <__sflush_r+0xb2>
 800cb96:	2200      	movs	r2, #0
 800cb98:	6062      	str	r2, [r4, #4]
 800cb9a:	04d9      	lsls	r1, r3, #19
 800cb9c:	6922      	ldr	r2, [r4, #16]
 800cb9e:	6022      	str	r2, [r4, #0]
 800cba0:	d504      	bpl.n	800cbac <__sflush_r+0x78>
 800cba2:	1c42      	adds	r2, r0, #1
 800cba4:	d101      	bne.n	800cbaa <__sflush_r+0x76>
 800cba6:	682b      	ldr	r3, [r5, #0]
 800cba8:	b903      	cbnz	r3, 800cbac <__sflush_r+0x78>
 800cbaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800cbac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbae:	602f      	str	r7, [r5, #0]
 800cbb0:	b1b9      	cbz	r1, 800cbe2 <__sflush_r+0xae>
 800cbb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbb6:	4299      	cmp	r1, r3
 800cbb8:	d002      	beq.n	800cbc0 <__sflush_r+0x8c>
 800cbba:	4628      	mov	r0, r5
 800cbbc:	f7fe fce4 	bl	800b588 <_free_r>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbc4:	e00d      	b.n	800cbe2 <__sflush_r+0xae>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	4628      	mov	r0, r5
 800cbca:	47b0      	blx	r6
 800cbcc:	4602      	mov	r2, r0
 800cbce:	1c50      	adds	r0, r2, #1
 800cbd0:	d1c9      	bne.n	800cb66 <__sflush_r+0x32>
 800cbd2:	682b      	ldr	r3, [r5, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d0c6      	beq.n	800cb66 <__sflush_r+0x32>
 800cbd8:	2b1d      	cmp	r3, #29
 800cbda:	d001      	beq.n	800cbe0 <__sflush_r+0xac>
 800cbdc:	2b16      	cmp	r3, #22
 800cbde:	d11e      	bne.n	800cc1e <__sflush_r+0xea>
 800cbe0:	602f      	str	r7, [r5, #0]
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	e022      	b.n	800cc2c <__sflush_r+0xf8>
 800cbe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbea:	b21b      	sxth	r3, r3
 800cbec:	e01b      	b.n	800cc26 <__sflush_r+0xf2>
 800cbee:	690f      	ldr	r7, [r1, #16]
 800cbf0:	2f00      	cmp	r7, #0
 800cbf2:	d0f6      	beq.n	800cbe2 <__sflush_r+0xae>
 800cbf4:	0793      	lsls	r3, r2, #30
 800cbf6:	680e      	ldr	r6, [r1, #0]
 800cbf8:	bf08      	it	eq
 800cbfa:	694b      	ldreq	r3, [r1, #20]
 800cbfc:	600f      	str	r7, [r1, #0]
 800cbfe:	bf18      	it	ne
 800cc00:	2300      	movne	r3, #0
 800cc02:	eba6 0807 	sub.w	r8, r6, r7
 800cc06:	608b      	str	r3, [r1, #8]
 800cc08:	f1b8 0f00 	cmp.w	r8, #0
 800cc0c:	dde9      	ble.n	800cbe2 <__sflush_r+0xae>
 800cc0e:	6a21      	ldr	r1, [r4, #32]
 800cc10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc12:	4643      	mov	r3, r8
 800cc14:	463a      	mov	r2, r7
 800cc16:	4628      	mov	r0, r5
 800cc18:	47b0      	blx	r6
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	dc08      	bgt.n	800cc30 <__sflush_r+0xfc>
 800cc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc26:	81a3      	strh	r3, [r4, #12]
 800cc28:	f04f 30ff 	mov.w	r0, #4294967295
 800cc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc30:	4407      	add	r7, r0
 800cc32:	eba8 0800 	sub.w	r8, r8, r0
 800cc36:	e7e7      	b.n	800cc08 <__sflush_r+0xd4>
 800cc38:	20400001 	.word	0x20400001

0800cc3c <_fflush_r>:
 800cc3c:	b538      	push	{r3, r4, r5, lr}
 800cc3e:	690b      	ldr	r3, [r1, #16]
 800cc40:	4605      	mov	r5, r0
 800cc42:	460c      	mov	r4, r1
 800cc44:	b913      	cbnz	r3, 800cc4c <_fflush_r+0x10>
 800cc46:	2500      	movs	r5, #0
 800cc48:	4628      	mov	r0, r5
 800cc4a:	bd38      	pop	{r3, r4, r5, pc}
 800cc4c:	b118      	cbz	r0, 800cc56 <_fflush_r+0x1a>
 800cc4e:	6a03      	ldr	r3, [r0, #32]
 800cc50:	b90b      	cbnz	r3, 800cc56 <_fflush_r+0x1a>
 800cc52:	f7fd fcf3 	bl	800a63c <__sinit>
 800cc56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d0f3      	beq.n	800cc46 <_fflush_r+0xa>
 800cc5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc60:	07d0      	lsls	r0, r2, #31
 800cc62:	d404      	bmi.n	800cc6e <_fflush_r+0x32>
 800cc64:	0599      	lsls	r1, r3, #22
 800cc66:	d402      	bmi.n	800cc6e <_fflush_r+0x32>
 800cc68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc6a:	f7fd fe12 	bl	800a892 <__retarget_lock_acquire_recursive>
 800cc6e:	4628      	mov	r0, r5
 800cc70:	4621      	mov	r1, r4
 800cc72:	f7ff ff5f 	bl	800cb34 <__sflush_r>
 800cc76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc78:	07da      	lsls	r2, r3, #31
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	d4e4      	bmi.n	800cc48 <_fflush_r+0xc>
 800cc7e:	89a3      	ldrh	r3, [r4, #12]
 800cc80:	059b      	lsls	r3, r3, #22
 800cc82:	d4e1      	bmi.n	800cc48 <_fflush_r+0xc>
 800cc84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc86:	f7fd fe05 	bl	800a894 <__retarget_lock_release_recursive>
 800cc8a:	e7dd      	b.n	800cc48 <_fflush_r+0xc>

0800cc8c <memmove>:
 800cc8c:	4288      	cmp	r0, r1
 800cc8e:	b510      	push	{r4, lr}
 800cc90:	eb01 0402 	add.w	r4, r1, r2
 800cc94:	d902      	bls.n	800cc9c <memmove+0x10>
 800cc96:	4284      	cmp	r4, r0
 800cc98:	4623      	mov	r3, r4
 800cc9a:	d807      	bhi.n	800ccac <memmove+0x20>
 800cc9c:	1e43      	subs	r3, r0, #1
 800cc9e:	42a1      	cmp	r1, r4
 800cca0:	d008      	beq.n	800ccb4 <memmove+0x28>
 800cca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cca6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccaa:	e7f8      	b.n	800cc9e <memmove+0x12>
 800ccac:	4402      	add	r2, r0
 800ccae:	4601      	mov	r1, r0
 800ccb0:	428a      	cmp	r2, r1
 800ccb2:	d100      	bne.n	800ccb6 <memmove+0x2a>
 800ccb4:	bd10      	pop	{r4, pc}
 800ccb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccbe:	e7f7      	b.n	800ccb0 <memmove+0x24>

0800ccc0 <_sbrk_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	4d06      	ldr	r5, [pc, #24]	@ (800ccdc <_sbrk_r+0x1c>)
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	4608      	mov	r0, r1
 800ccca:	602b      	str	r3, [r5, #0]
 800cccc:	f7f4 fd18 	bl	8001700 <_sbrk>
 800ccd0:	1c43      	adds	r3, r0, #1
 800ccd2:	d102      	bne.n	800ccda <_sbrk_r+0x1a>
 800ccd4:	682b      	ldr	r3, [r5, #0]
 800ccd6:	b103      	cbz	r3, 800ccda <_sbrk_r+0x1a>
 800ccd8:	6023      	str	r3, [r4, #0]
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	200020b4 	.word	0x200020b4

0800cce0 <__assert_func>:
 800cce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cce2:	4614      	mov	r4, r2
 800cce4:	461a      	mov	r2, r3
 800cce6:	4b09      	ldr	r3, [pc, #36]	@ (800cd0c <__assert_func+0x2c>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4605      	mov	r5, r0
 800ccec:	68d8      	ldr	r0, [r3, #12]
 800ccee:	b14c      	cbz	r4, 800cd04 <__assert_func+0x24>
 800ccf0:	4b07      	ldr	r3, [pc, #28]	@ (800cd10 <__assert_func+0x30>)
 800ccf2:	9100      	str	r1, [sp, #0]
 800ccf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ccf8:	4906      	ldr	r1, [pc, #24]	@ (800cd14 <__assert_func+0x34>)
 800ccfa:	462b      	mov	r3, r5
 800ccfc:	f000 f850 	bl	800cda0 <fiprintf>
 800cd00:	f000 f860 	bl	800cdc4 <abort>
 800cd04:	4b04      	ldr	r3, [pc, #16]	@ (800cd18 <__assert_func+0x38>)
 800cd06:	461c      	mov	r4, r3
 800cd08:	e7f3      	b.n	800ccf2 <__assert_func+0x12>
 800cd0a:	bf00      	nop
 800cd0c:	20000274 	.word	0x20000274
 800cd10:	0800d586 	.word	0x0800d586
 800cd14:	0800d593 	.word	0x0800d593
 800cd18:	0800d5c1 	.word	0x0800d5c1

0800cd1c <_calloc_r>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	fba1 5402 	umull	r5, r4, r1, r2
 800cd22:	b934      	cbnz	r4, 800cd32 <_calloc_r+0x16>
 800cd24:	4629      	mov	r1, r5
 800cd26:	f7fe ffdd 	bl	800bce4 <_malloc_r>
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	b928      	cbnz	r0, 800cd3a <_calloc_r+0x1e>
 800cd2e:	4630      	mov	r0, r6
 800cd30:	bd70      	pop	{r4, r5, r6, pc}
 800cd32:	220c      	movs	r2, #12
 800cd34:	6002      	str	r2, [r0, #0]
 800cd36:	2600      	movs	r6, #0
 800cd38:	e7f9      	b.n	800cd2e <_calloc_r+0x12>
 800cd3a:	462a      	mov	r2, r5
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	f7fd fd18 	bl	800a772 <memset>
 800cd42:	e7f4      	b.n	800cd2e <_calloc_r+0x12>

0800cd44 <_realloc_r>:
 800cd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd48:	4607      	mov	r7, r0
 800cd4a:	4614      	mov	r4, r2
 800cd4c:	460d      	mov	r5, r1
 800cd4e:	b921      	cbnz	r1, 800cd5a <_realloc_r+0x16>
 800cd50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd54:	4611      	mov	r1, r2
 800cd56:	f7fe bfc5 	b.w	800bce4 <_malloc_r>
 800cd5a:	b92a      	cbnz	r2, 800cd68 <_realloc_r+0x24>
 800cd5c:	f7fe fc14 	bl	800b588 <_free_r>
 800cd60:	4625      	mov	r5, r4
 800cd62:	4628      	mov	r0, r5
 800cd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd68:	f000 f833 	bl	800cdd2 <_malloc_usable_size_r>
 800cd6c:	4284      	cmp	r4, r0
 800cd6e:	4606      	mov	r6, r0
 800cd70:	d802      	bhi.n	800cd78 <_realloc_r+0x34>
 800cd72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd76:	d8f4      	bhi.n	800cd62 <_realloc_r+0x1e>
 800cd78:	4621      	mov	r1, r4
 800cd7a:	4638      	mov	r0, r7
 800cd7c:	f7fe ffb2 	bl	800bce4 <_malloc_r>
 800cd80:	4680      	mov	r8, r0
 800cd82:	b908      	cbnz	r0, 800cd88 <_realloc_r+0x44>
 800cd84:	4645      	mov	r5, r8
 800cd86:	e7ec      	b.n	800cd62 <_realloc_r+0x1e>
 800cd88:	42b4      	cmp	r4, r6
 800cd8a:	4622      	mov	r2, r4
 800cd8c:	4629      	mov	r1, r5
 800cd8e:	bf28      	it	cs
 800cd90:	4632      	movcs	r2, r6
 800cd92:	f7fd fd80 	bl	800a896 <memcpy>
 800cd96:	4629      	mov	r1, r5
 800cd98:	4638      	mov	r0, r7
 800cd9a:	f7fe fbf5 	bl	800b588 <_free_r>
 800cd9e:	e7f1      	b.n	800cd84 <_realloc_r+0x40>

0800cda0 <fiprintf>:
 800cda0:	b40e      	push	{r1, r2, r3}
 800cda2:	b503      	push	{r0, r1, lr}
 800cda4:	4601      	mov	r1, r0
 800cda6:	ab03      	add	r3, sp, #12
 800cda8:	4805      	ldr	r0, [pc, #20]	@ (800cdc0 <fiprintf+0x20>)
 800cdaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdae:	6800      	ldr	r0, [r0, #0]
 800cdb0:	9301      	str	r3, [sp, #4]
 800cdb2:	f000 f83f 	bl	800ce34 <_vfiprintf_r>
 800cdb6:	b002      	add	sp, #8
 800cdb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdbc:	b003      	add	sp, #12
 800cdbe:	4770      	bx	lr
 800cdc0:	20000274 	.word	0x20000274

0800cdc4 <abort>:
 800cdc4:	b508      	push	{r3, lr}
 800cdc6:	2006      	movs	r0, #6
 800cdc8:	f000 fa08 	bl	800d1dc <raise>
 800cdcc:	2001      	movs	r0, #1
 800cdce:	f7f4 fc1f 	bl	8001610 <_exit>

0800cdd2 <_malloc_usable_size_r>:
 800cdd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdd6:	1f18      	subs	r0, r3, #4
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	bfbc      	itt	lt
 800cddc:	580b      	ldrlt	r3, [r1, r0]
 800cdde:	18c0      	addlt	r0, r0, r3
 800cde0:	4770      	bx	lr

0800cde2 <__sfputc_r>:
 800cde2:	6893      	ldr	r3, [r2, #8]
 800cde4:	3b01      	subs	r3, #1
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	b410      	push	{r4}
 800cdea:	6093      	str	r3, [r2, #8]
 800cdec:	da08      	bge.n	800ce00 <__sfputc_r+0x1e>
 800cdee:	6994      	ldr	r4, [r2, #24]
 800cdf0:	42a3      	cmp	r3, r4
 800cdf2:	db01      	blt.n	800cdf8 <__sfputc_r+0x16>
 800cdf4:	290a      	cmp	r1, #10
 800cdf6:	d103      	bne.n	800ce00 <__sfputc_r+0x1e>
 800cdf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdfc:	f000 b932 	b.w	800d064 <__swbuf_r>
 800ce00:	6813      	ldr	r3, [r2, #0]
 800ce02:	1c58      	adds	r0, r3, #1
 800ce04:	6010      	str	r0, [r2, #0]
 800ce06:	7019      	strb	r1, [r3, #0]
 800ce08:	4608      	mov	r0, r1
 800ce0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <__sfputs_r>:
 800ce10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce12:	4606      	mov	r6, r0
 800ce14:	460f      	mov	r7, r1
 800ce16:	4614      	mov	r4, r2
 800ce18:	18d5      	adds	r5, r2, r3
 800ce1a:	42ac      	cmp	r4, r5
 800ce1c:	d101      	bne.n	800ce22 <__sfputs_r+0x12>
 800ce1e:	2000      	movs	r0, #0
 800ce20:	e007      	b.n	800ce32 <__sfputs_r+0x22>
 800ce22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce26:	463a      	mov	r2, r7
 800ce28:	4630      	mov	r0, r6
 800ce2a:	f7ff ffda 	bl	800cde2 <__sfputc_r>
 800ce2e:	1c43      	adds	r3, r0, #1
 800ce30:	d1f3      	bne.n	800ce1a <__sfputs_r+0xa>
 800ce32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce34 <_vfiprintf_r>:
 800ce34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce38:	460d      	mov	r5, r1
 800ce3a:	b09d      	sub	sp, #116	@ 0x74
 800ce3c:	4614      	mov	r4, r2
 800ce3e:	4698      	mov	r8, r3
 800ce40:	4606      	mov	r6, r0
 800ce42:	b118      	cbz	r0, 800ce4c <_vfiprintf_r+0x18>
 800ce44:	6a03      	ldr	r3, [r0, #32]
 800ce46:	b90b      	cbnz	r3, 800ce4c <_vfiprintf_r+0x18>
 800ce48:	f7fd fbf8 	bl	800a63c <__sinit>
 800ce4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce4e:	07d9      	lsls	r1, r3, #31
 800ce50:	d405      	bmi.n	800ce5e <_vfiprintf_r+0x2a>
 800ce52:	89ab      	ldrh	r3, [r5, #12]
 800ce54:	059a      	lsls	r2, r3, #22
 800ce56:	d402      	bmi.n	800ce5e <_vfiprintf_r+0x2a>
 800ce58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce5a:	f7fd fd1a 	bl	800a892 <__retarget_lock_acquire_recursive>
 800ce5e:	89ab      	ldrh	r3, [r5, #12]
 800ce60:	071b      	lsls	r3, r3, #28
 800ce62:	d501      	bpl.n	800ce68 <_vfiprintf_r+0x34>
 800ce64:	692b      	ldr	r3, [r5, #16]
 800ce66:	b99b      	cbnz	r3, 800ce90 <_vfiprintf_r+0x5c>
 800ce68:	4629      	mov	r1, r5
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	f000 f938 	bl	800d0e0 <__swsetup_r>
 800ce70:	b170      	cbz	r0, 800ce90 <_vfiprintf_r+0x5c>
 800ce72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce74:	07dc      	lsls	r4, r3, #31
 800ce76:	d504      	bpl.n	800ce82 <_vfiprintf_r+0x4e>
 800ce78:	f04f 30ff 	mov.w	r0, #4294967295
 800ce7c:	b01d      	add	sp, #116	@ 0x74
 800ce7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce82:	89ab      	ldrh	r3, [r5, #12]
 800ce84:	0598      	lsls	r0, r3, #22
 800ce86:	d4f7      	bmi.n	800ce78 <_vfiprintf_r+0x44>
 800ce88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce8a:	f7fd fd03 	bl	800a894 <__retarget_lock_release_recursive>
 800ce8e:	e7f3      	b.n	800ce78 <_vfiprintf_r+0x44>
 800ce90:	2300      	movs	r3, #0
 800ce92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce94:	2320      	movs	r3, #32
 800ce96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce9e:	2330      	movs	r3, #48	@ 0x30
 800cea0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d050 <_vfiprintf_r+0x21c>
 800cea4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cea8:	f04f 0901 	mov.w	r9, #1
 800ceac:	4623      	mov	r3, r4
 800ceae:	469a      	mov	sl, r3
 800ceb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceb4:	b10a      	cbz	r2, 800ceba <_vfiprintf_r+0x86>
 800ceb6:	2a25      	cmp	r2, #37	@ 0x25
 800ceb8:	d1f9      	bne.n	800ceae <_vfiprintf_r+0x7a>
 800ceba:	ebba 0b04 	subs.w	fp, sl, r4
 800cebe:	d00b      	beq.n	800ced8 <_vfiprintf_r+0xa4>
 800cec0:	465b      	mov	r3, fp
 800cec2:	4622      	mov	r2, r4
 800cec4:	4629      	mov	r1, r5
 800cec6:	4630      	mov	r0, r6
 800cec8:	f7ff ffa2 	bl	800ce10 <__sfputs_r>
 800cecc:	3001      	adds	r0, #1
 800cece:	f000 80a7 	beq.w	800d020 <_vfiprintf_r+0x1ec>
 800ced2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ced4:	445a      	add	r2, fp
 800ced6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ced8:	f89a 3000 	ldrb.w	r3, [sl]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f000 809f 	beq.w	800d020 <_vfiprintf_r+0x1ec>
 800cee2:	2300      	movs	r3, #0
 800cee4:	f04f 32ff 	mov.w	r2, #4294967295
 800cee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceec:	f10a 0a01 	add.w	sl, sl, #1
 800cef0:	9304      	str	r3, [sp, #16]
 800cef2:	9307      	str	r3, [sp, #28]
 800cef4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cef8:	931a      	str	r3, [sp, #104]	@ 0x68
 800cefa:	4654      	mov	r4, sl
 800cefc:	2205      	movs	r2, #5
 800cefe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf02:	4853      	ldr	r0, [pc, #332]	@ (800d050 <_vfiprintf_r+0x21c>)
 800cf04:	f7f3 f964 	bl	80001d0 <memchr>
 800cf08:	9a04      	ldr	r2, [sp, #16]
 800cf0a:	b9d8      	cbnz	r0, 800cf44 <_vfiprintf_r+0x110>
 800cf0c:	06d1      	lsls	r1, r2, #27
 800cf0e:	bf44      	itt	mi
 800cf10:	2320      	movmi	r3, #32
 800cf12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf16:	0713      	lsls	r3, r2, #28
 800cf18:	bf44      	itt	mi
 800cf1a:	232b      	movmi	r3, #43	@ 0x2b
 800cf1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf20:	f89a 3000 	ldrb.w	r3, [sl]
 800cf24:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf26:	d015      	beq.n	800cf54 <_vfiprintf_r+0x120>
 800cf28:	9a07      	ldr	r2, [sp, #28]
 800cf2a:	4654      	mov	r4, sl
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	f04f 0c0a 	mov.w	ip, #10
 800cf32:	4621      	mov	r1, r4
 800cf34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf38:	3b30      	subs	r3, #48	@ 0x30
 800cf3a:	2b09      	cmp	r3, #9
 800cf3c:	d94b      	bls.n	800cfd6 <_vfiprintf_r+0x1a2>
 800cf3e:	b1b0      	cbz	r0, 800cf6e <_vfiprintf_r+0x13a>
 800cf40:	9207      	str	r2, [sp, #28]
 800cf42:	e014      	b.n	800cf6e <_vfiprintf_r+0x13a>
 800cf44:	eba0 0308 	sub.w	r3, r0, r8
 800cf48:	fa09 f303 	lsl.w	r3, r9, r3
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	9304      	str	r3, [sp, #16]
 800cf50:	46a2      	mov	sl, r4
 800cf52:	e7d2      	b.n	800cefa <_vfiprintf_r+0xc6>
 800cf54:	9b03      	ldr	r3, [sp, #12]
 800cf56:	1d19      	adds	r1, r3, #4
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	9103      	str	r1, [sp, #12]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	bfbb      	ittet	lt
 800cf60:	425b      	neglt	r3, r3
 800cf62:	f042 0202 	orrlt.w	r2, r2, #2
 800cf66:	9307      	strge	r3, [sp, #28]
 800cf68:	9307      	strlt	r3, [sp, #28]
 800cf6a:	bfb8      	it	lt
 800cf6c:	9204      	strlt	r2, [sp, #16]
 800cf6e:	7823      	ldrb	r3, [r4, #0]
 800cf70:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf72:	d10a      	bne.n	800cf8a <_vfiprintf_r+0x156>
 800cf74:	7863      	ldrb	r3, [r4, #1]
 800cf76:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf78:	d132      	bne.n	800cfe0 <_vfiprintf_r+0x1ac>
 800cf7a:	9b03      	ldr	r3, [sp, #12]
 800cf7c:	1d1a      	adds	r2, r3, #4
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	9203      	str	r2, [sp, #12]
 800cf82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf86:	3402      	adds	r4, #2
 800cf88:	9305      	str	r3, [sp, #20]
 800cf8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d060 <_vfiprintf_r+0x22c>
 800cf8e:	7821      	ldrb	r1, [r4, #0]
 800cf90:	2203      	movs	r2, #3
 800cf92:	4650      	mov	r0, sl
 800cf94:	f7f3 f91c 	bl	80001d0 <memchr>
 800cf98:	b138      	cbz	r0, 800cfaa <_vfiprintf_r+0x176>
 800cf9a:	9b04      	ldr	r3, [sp, #16]
 800cf9c:	eba0 000a 	sub.w	r0, r0, sl
 800cfa0:	2240      	movs	r2, #64	@ 0x40
 800cfa2:	4082      	lsls	r2, r0
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	3401      	adds	r4, #1
 800cfa8:	9304      	str	r3, [sp, #16]
 800cfaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfae:	4829      	ldr	r0, [pc, #164]	@ (800d054 <_vfiprintf_r+0x220>)
 800cfb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cfb4:	2206      	movs	r2, #6
 800cfb6:	f7f3 f90b 	bl	80001d0 <memchr>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d03f      	beq.n	800d03e <_vfiprintf_r+0x20a>
 800cfbe:	4b26      	ldr	r3, [pc, #152]	@ (800d058 <_vfiprintf_r+0x224>)
 800cfc0:	bb1b      	cbnz	r3, 800d00a <_vfiprintf_r+0x1d6>
 800cfc2:	9b03      	ldr	r3, [sp, #12]
 800cfc4:	3307      	adds	r3, #7
 800cfc6:	f023 0307 	bic.w	r3, r3, #7
 800cfca:	3308      	adds	r3, #8
 800cfcc:	9303      	str	r3, [sp, #12]
 800cfce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfd0:	443b      	add	r3, r7
 800cfd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfd4:	e76a      	b.n	800ceac <_vfiprintf_r+0x78>
 800cfd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfda:	460c      	mov	r4, r1
 800cfdc:	2001      	movs	r0, #1
 800cfde:	e7a8      	b.n	800cf32 <_vfiprintf_r+0xfe>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	3401      	adds	r4, #1
 800cfe4:	9305      	str	r3, [sp, #20]
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	f04f 0c0a 	mov.w	ip, #10
 800cfec:	4620      	mov	r0, r4
 800cfee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cff2:	3a30      	subs	r2, #48	@ 0x30
 800cff4:	2a09      	cmp	r2, #9
 800cff6:	d903      	bls.n	800d000 <_vfiprintf_r+0x1cc>
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d0c6      	beq.n	800cf8a <_vfiprintf_r+0x156>
 800cffc:	9105      	str	r1, [sp, #20]
 800cffe:	e7c4      	b.n	800cf8a <_vfiprintf_r+0x156>
 800d000:	fb0c 2101 	mla	r1, ip, r1, r2
 800d004:	4604      	mov	r4, r0
 800d006:	2301      	movs	r3, #1
 800d008:	e7f0      	b.n	800cfec <_vfiprintf_r+0x1b8>
 800d00a:	ab03      	add	r3, sp, #12
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	462a      	mov	r2, r5
 800d010:	4b12      	ldr	r3, [pc, #72]	@ (800d05c <_vfiprintf_r+0x228>)
 800d012:	a904      	add	r1, sp, #16
 800d014:	4630      	mov	r0, r6
 800d016:	f7fc fcc1 	bl	800999c <_printf_float>
 800d01a:	4607      	mov	r7, r0
 800d01c:	1c78      	adds	r0, r7, #1
 800d01e:	d1d6      	bne.n	800cfce <_vfiprintf_r+0x19a>
 800d020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d022:	07d9      	lsls	r1, r3, #31
 800d024:	d405      	bmi.n	800d032 <_vfiprintf_r+0x1fe>
 800d026:	89ab      	ldrh	r3, [r5, #12]
 800d028:	059a      	lsls	r2, r3, #22
 800d02a:	d402      	bmi.n	800d032 <_vfiprintf_r+0x1fe>
 800d02c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d02e:	f7fd fc31 	bl	800a894 <__retarget_lock_release_recursive>
 800d032:	89ab      	ldrh	r3, [r5, #12]
 800d034:	065b      	lsls	r3, r3, #25
 800d036:	f53f af1f 	bmi.w	800ce78 <_vfiprintf_r+0x44>
 800d03a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d03c:	e71e      	b.n	800ce7c <_vfiprintf_r+0x48>
 800d03e:	ab03      	add	r3, sp, #12
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	462a      	mov	r2, r5
 800d044:	4b05      	ldr	r3, [pc, #20]	@ (800d05c <_vfiprintf_r+0x228>)
 800d046:	a904      	add	r1, sp, #16
 800d048:	4630      	mov	r0, r6
 800d04a:	f7fc ff3f 	bl	8009ecc <_printf_i>
 800d04e:	e7e4      	b.n	800d01a <_vfiprintf_r+0x1e6>
 800d050:	0800d575 	.word	0x0800d575
 800d054:	0800d57f 	.word	0x0800d57f
 800d058:	0800999d 	.word	0x0800999d
 800d05c:	0800ce11 	.word	0x0800ce11
 800d060:	0800d57b 	.word	0x0800d57b

0800d064 <__swbuf_r>:
 800d064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d066:	460e      	mov	r6, r1
 800d068:	4614      	mov	r4, r2
 800d06a:	4605      	mov	r5, r0
 800d06c:	b118      	cbz	r0, 800d076 <__swbuf_r+0x12>
 800d06e:	6a03      	ldr	r3, [r0, #32]
 800d070:	b90b      	cbnz	r3, 800d076 <__swbuf_r+0x12>
 800d072:	f7fd fae3 	bl	800a63c <__sinit>
 800d076:	69a3      	ldr	r3, [r4, #24]
 800d078:	60a3      	str	r3, [r4, #8]
 800d07a:	89a3      	ldrh	r3, [r4, #12]
 800d07c:	071a      	lsls	r2, r3, #28
 800d07e:	d501      	bpl.n	800d084 <__swbuf_r+0x20>
 800d080:	6923      	ldr	r3, [r4, #16]
 800d082:	b943      	cbnz	r3, 800d096 <__swbuf_r+0x32>
 800d084:	4621      	mov	r1, r4
 800d086:	4628      	mov	r0, r5
 800d088:	f000 f82a 	bl	800d0e0 <__swsetup_r>
 800d08c:	b118      	cbz	r0, 800d096 <__swbuf_r+0x32>
 800d08e:	f04f 37ff 	mov.w	r7, #4294967295
 800d092:	4638      	mov	r0, r7
 800d094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d096:	6823      	ldr	r3, [r4, #0]
 800d098:	6922      	ldr	r2, [r4, #16]
 800d09a:	1a98      	subs	r0, r3, r2
 800d09c:	6963      	ldr	r3, [r4, #20]
 800d09e:	b2f6      	uxtb	r6, r6
 800d0a0:	4283      	cmp	r3, r0
 800d0a2:	4637      	mov	r7, r6
 800d0a4:	dc05      	bgt.n	800d0b2 <__swbuf_r+0x4e>
 800d0a6:	4621      	mov	r1, r4
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	f7ff fdc7 	bl	800cc3c <_fflush_r>
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	d1ed      	bne.n	800d08e <__swbuf_r+0x2a>
 800d0b2:	68a3      	ldr	r3, [r4, #8]
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	60a3      	str	r3, [r4, #8]
 800d0b8:	6823      	ldr	r3, [r4, #0]
 800d0ba:	1c5a      	adds	r2, r3, #1
 800d0bc:	6022      	str	r2, [r4, #0]
 800d0be:	701e      	strb	r6, [r3, #0]
 800d0c0:	6962      	ldr	r2, [r4, #20]
 800d0c2:	1c43      	adds	r3, r0, #1
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d004      	beq.n	800d0d2 <__swbuf_r+0x6e>
 800d0c8:	89a3      	ldrh	r3, [r4, #12]
 800d0ca:	07db      	lsls	r3, r3, #31
 800d0cc:	d5e1      	bpl.n	800d092 <__swbuf_r+0x2e>
 800d0ce:	2e0a      	cmp	r6, #10
 800d0d0:	d1df      	bne.n	800d092 <__swbuf_r+0x2e>
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	f7ff fdb1 	bl	800cc3c <_fflush_r>
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	d0d9      	beq.n	800d092 <__swbuf_r+0x2e>
 800d0de:	e7d6      	b.n	800d08e <__swbuf_r+0x2a>

0800d0e0 <__swsetup_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4b29      	ldr	r3, [pc, #164]	@ (800d188 <__swsetup_r+0xa8>)
 800d0e4:	4605      	mov	r5, r0
 800d0e6:	6818      	ldr	r0, [r3, #0]
 800d0e8:	460c      	mov	r4, r1
 800d0ea:	b118      	cbz	r0, 800d0f4 <__swsetup_r+0x14>
 800d0ec:	6a03      	ldr	r3, [r0, #32]
 800d0ee:	b90b      	cbnz	r3, 800d0f4 <__swsetup_r+0x14>
 800d0f0:	f7fd faa4 	bl	800a63c <__sinit>
 800d0f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0f8:	0719      	lsls	r1, r3, #28
 800d0fa:	d422      	bmi.n	800d142 <__swsetup_r+0x62>
 800d0fc:	06da      	lsls	r2, r3, #27
 800d0fe:	d407      	bmi.n	800d110 <__swsetup_r+0x30>
 800d100:	2209      	movs	r2, #9
 800d102:	602a      	str	r2, [r5, #0]
 800d104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d108:	81a3      	strh	r3, [r4, #12]
 800d10a:	f04f 30ff 	mov.w	r0, #4294967295
 800d10e:	e033      	b.n	800d178 <__swsetup_r+0x98>
 800d110:	0758      	lsls	r0, r3, #29
 800d112:	d512      	bpl.n	800d13a <__swsetup_r+0x5a>
 800d114:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d116:	b141      	cbz	r1, 800d12a <__swsetup_r+0x4a>
 800d118:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d11c:	4299      	cmp	r1, r3
 800d11e:	d002      	beq.n	800d126 <__swsetup_r+0x46>
 800d120:	4628      	mov	r0, r5
 800d122:	f7fe fa31 	bl	800b588 <_free_r>
 800d126:	2300      	movs	r3, #0
 800d128:	6363      	str	r3, [r4, #52]	@ 0x34
 800d12a:	89a3      	ldrh	r3, [r4, #12]
 800d12c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d130:	81a3      	strh	r3, [r4, #12]
 800d132:	2300      	movs	r3, #0
 800d134:	6063      	str	r3, [r4, #4]
 800d136:	6923      	ldr	r3, [r4, #16]
 800d138:	6023      	str	r3, [r4, #0]
 800d13a:	89a3      	ldrh	r3, [r4, #12]
 800d13c:	f043 0308 	orr.w	r3, r3, #8
 800d140:	81a3      	strh	r3, [r4, #12]
 800d142:	6923      	ldr	r3, [r4, #16]
 800d144:	b94b      	cbnz	r3, 800d15a <__swsetup_r+0x7a>
 800d146:	89a3      	ldrh	r3, [r4, #12]
 800d148:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d14c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d150:	d003      	beq.n	800d15a <__swsetup_r+0x7a>
 800d152:	4621      	mov	r1, r4
 800d154:	4628      	mov	r0, r5
 800d156:	f000 f883 	bl	800d260 <__smakebuf_r>
 800d15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d15e:	f013 0201 	ands.w	r2, r3, #1
 800d162:	d00a      	beq.n	800d17a <__swsetup_r+0x9a>
 800d164:	2200      	movs	r2, #0
 800d166:	60a2      	str	r2, [r4, #8]
 800d168:	6962      	ldr	r2, [r4, #20]
 800d16a:	4252      	negs	r2, r2
 800d16c:	61a2      	str	r2, [r4, #24]
 800d16e:	6922      	ldr	r2, [r4, #16]
 800d170:	b942      	cbnz	r2, 800d184 <__swsetup_r+0xa4>
 800d172:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d176:	d1c5      	bne.n	800d104 <__swsetup_r+0x24>
 800d178:	bd38      	pop	{r3, r4, r5, pc}
 800d17a:	0799      	lsls	r1, r3, #30
 800d17c:	bf58      	it	pl
 800d17e:	6962      	ldrpl	r2, [r4, #20]
 800d180:	60a2      	str	r2, [r4, #8]
 800d182:	e7f4      	b.n	800d16e <__swsetup_r+0x8e>
 800d184:	2000      	movs	r0, #0
 800d186:	e7f7      	b.n	800d178 <__swsetup_r+0x98>
 800d188:	20000274 	.word	0x20000274

0800d18c <_raise_r>:
 800d18c:	291f      	cmp	r1, #31
 800d18e:	b538      	push	{r3, r4, r5, lr}
 800d190:	4605      	mov	r5, r0
 800d192:	460c      	mov	r4, r1
 800d194:	d904      	bls.n	800d1a0 <_raise_r+0x14>
 800d196:	2316      	movs	r3, #22
 800d198:	6003      	str	r3, [r0, #0]
 800d19a:	f04f 30ff 	mov.w	r0, #4294967295
 800d19e:	bd38      	pop	{r3, r4, r5, pc}
 800d1a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d1a2:	b112      	cbz	r2, 800d1aa <_raise_r+0x1e>
 800d1a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1a8:	b94b      	cbnz	r3, 800d1be <_raise_r+0x32>
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	f000 f830 	bl	800d210 <_getpid_r>
 800d1b0:	4622      	mov	r2, r4
 800d1b2:	4601      	mov	r1, r0
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1ba:	f000 b817 	b.w	800d1ec <_kill_r>
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d00a      	beq.n	800d1d8 <_raise_r+0x4c>
 800d1c2:	1c59      	adds	r1, r3, #1
 800d1c4:	d103      	bne.n	800d1ce <_raise_r+0x42>
 800d1c6:	2316      	movs	r3, #22
 800d1c8:	6003      	str	r3, [r0, #0]
 800d1ca:	2001      	movs	r0, #1
 800d1cc:	e7e7      	b.n	800d19e <_raise_r+0x12>
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	4798      	blx	r3
 800d1d8:	2000      	movs	r0, #0
 800d1da:	e7e0      	b.n	800d19e <_raise_r+0x12>

0800d1dc <raise>:
 800d1dc:	4b02      	ldr	r3, [pc, #8]	@ (800d1e8 <raise+0xc>)
 800d1de:	4601      	mov	r1, r0
 800d1e0:	6818      	ldr	r0, [r3, #0]
 800d1e2:	f7ff bfd3 	b.w	800d18c <_raise_r>
 800d1e6:	bf00      	nop
 800d1e8:	20000274 	.word	0x20000274

0800d1ec <_kill_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4d07      	ldr	r5, [pc, #28]	@ (800d20c <_kill_r+0x20>)
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	4608      	mov	r0, r1
 800d1f6:	4611      	mov	r1, r2
 800d1f8:	602b      	str	r3, [r5, #0]
 800d1fa:	f7f4 f9f9 	bl	80015f0 <_kill>
 800d1fe:	1c43      	adds	r3, r0, #1
 800d200:	d102      	bne.n	800d208 <_kill_r+0x1c>
 800d202:	682b      	ldr	r3, [r5, #0]
 800d204:	b103      	cbz	r3, 800d208 <_kill_r+0x1c>
 800d206:	6023      	str	r3, [r4, #0]
 800d208:	bd38      	pop	{r3, r4, r5, pc}
 800d20a:	bf00      	nop
 800d20c:	200020b4 	.word	0x200020b4

0800d210 <_getpid_r>:
 800d210:	f7f4 b9e6 	b.w	80015e0 <_getpid>

0800d214 <__swhatbuf_r>:
 800d214:	b570      	push	{r4, r5, r6, lr}
 800d216:	460c      	mov	r4, r1
 800d218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d21c:	2900      	cmp	r1, #0
 800d21e:	b096      	sub	sp, #88	@ 0x58
 800d220:	4615      	mov	r5, r2
 800d222:	461e      	mov	r6, r3
 800d224:	da0d      	bge.n	800d242 <__swhatbuf_r+0x2e>
 800d226:	89a3      	ldrh	r3, [r4, #12]
 800d228:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d22c:	f04f 0100 	mov.w	r1, #0
 800d230:	bf14      	ite	ne
 800d232:	2340      	movne	r3, #64	@ 0x40
 800d234:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d238:	2000      	movs	r0, #0
 800d23a:	6031      	str	r1, [r6, #0]
 800d23c:	602b      	str	r3, [r5, #0]
 800d23e:	b016      	add	sp, #88	@ 0x58
 800d240:	bd70      	pop	{r4, r5, r6, pc}
 800d242:	466a      	mov	r2, sp
 800d244:	f000 f848 	bl	800d2d8 <_fstat_r>
 800d248:	2800      	cmp	r0, #0
 800d24a:	dbec      	blt.n	800d226 <__swhatbuf_r+0x12>
 800d24c:	9901      	ldr	r1, [sp, #4]
 800d24e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d252:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d256:	4259      	negs	r1, r3
 800d258:	4159      	adcs	r1, r3
 800d25a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d25e:	e7eb      	b.n	800d238 <__swhatbuf_r+0x24>

0800d260 <__smakebuf_r>:
 800d260:	898b      	ldrh	r3, [r1, #12]
 800d262:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d264:	079d      	lsls	r5, r3, #30
 800d266:	4606      	mov	r6, r0
 800d268:	460c      	mov	r4, r1
 800d26a:	d507      	bpl.n	800d27c <__smakebuf_r+0x1c>
 800d26c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d270:	6023      	str	r3, [r4, #0]
 800d272:	6123      	str	r3, [r4, #16]
 800d274:	2301      	movs	r3, #1
 800d276:	6163      	str	r3, [r4, #20]
 800d278:	b003      	add	sp, #12
 800d27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d27c:	ab01      	add	r3, sp, #4
 800d27e:	466a      	mov	r2, sp
 800d280:	f7ff ffc8 	bl	800d214 <__swhatbuf_r>
 800d284:	9f00      	ldr	r7, [sp, #0]
 800d286:	4605      	mov	r5, r0
 800d288:	4639      	mov	r1, r7
 800d28a:	4630      	mov	r0, r6
 800d28c:	f7fe fd2a 	bl	800bce4 <_malloc_r>
 800d290:	b948      	cbnz	r0, 800d2a6 <__smakebuf_r+0x46>
 800d292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d296:	059a      	lsls	r2, r3, #22
 800d298:	d4ee      	bmi.n	800d278 <__smakebuf_r+0x18>
 800d29a:	f023 0303 	bic.w	r3, r3, #3
 800d29e:	f043 0302 	orr.w	r3, r3, #2
 800d2a2:	81a3      	strh	r3, [r4, #12]
 800d2a4:	e7e2      	b.n	800d26c <__smakebuf_r+0xc>
 800d2a6:	89a3      	ldrh	r3, [r4, #12]
 800d2a8:	6020      	str	r0, [r4, #0]
 800d2aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2ae:	81a3      	strh	r3, [r4, #12]
 800d2b0:	9b01      	ldr	r3, [sp, #4]
 800d2b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d2b6:	b15b      	cbz	r3, 800d2d0 <__smakebuf_r+0x70>
 800d2b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2bc:	4630      	mov	r0, r6
 800d2be:	f000 f81d 	bl	800d2fc <_isatty_r>
 800d2c2:	b128      	cbz	r0, 800d2d0 <__smakebuf_r+0x70>
 800d2c4:	89a3      	ldrh	r3, [r4, #12]
 800d2c6:	f023 0303 	bic.w	r3, r3, #3
 800d2ca:	f043 0301 	orr.w	r3, r3, #1
 800d2ce:	81a3      	strh	r3, [r4, #12]
 800d2d0:	89a3      	ldrh	r3, [r4, #12]
 800d2d2:	431d      	orrs	r5, r3
 800d2d4:	81a5      	strh	r5, [r4, #12]
 800d2d6:	e7cf      	b.n	800d278 <__smakebuf_r+0x18>

0800d2d8 <_fstat_r>:
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	4d07      	ldr	r5, [pc, #28]	@ (800d2f8 <_fstat_r+0x20>)
 800d2dc:	2300      	movs	r3, #0
 800d2de:	4604      	mov	r4, r0
 800d2e0:	4608      	mov	r0, r1
 800d2e2:	4611      	mov	r1, r2
 800d2e4:	602b      	str	r3, [r5, #0]
 800d2e6:	f7f4 f9e3 	bl	80016b0 <_fstat>
 800d2ea:	1c43      	adds	r3, r0, #1
 800d2ec:	d102      	bne.n	800d2f4 <_fstat_r+0x1c>
 800d2ee:	682b      	ldr	r3, [r5, #0]
 800d2f0:	b103      	cbz	r3, 800d2f4 <_fstat_r+0x1c>
 800d2f2:	6023      	str	r3, [r4, #0]
 800d2f4:	bd38      	pop	{r3, r4, r5, pc}
 800d2f6:	bf00      	nop
 800d2f8:	200020b4 	.word	0x200020b4

0800d2fc <_isatty_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4d06      	ldr	r5, [pc, #24]	@ (800d318 <_isatty_r+0x1c>)
 800d300:	2300      	movs	r3, #0
 800d302:	4604      	mov	r4, r0
 800d304:	4608      	mov	r0, r1
 800d306:	602b      	str	r3, [r5, #0]
 800d308:	f7f4 f9e2 	bl	80016d0 <_isatty>
 800d30c:	1c43      	adds	r3, r0, #1
 800d30e:	d102      	bne.n	800d316 <_isatty_r+0x1a>
 800d310:	682b      	ldr	r3, [r5, #0]
 800d312:	b103      	cbz	r3, 800d316 <_isatty_r+0x1a>
 800d314:	6023      	str	r3, [r4, #0]
 800d316:	bd38      	pop	{r3, r4, r5, pc}
 800d318:	200020b4 	.word	0x200020b4

0800d31c <_init>:
 800d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31e:	bf00      	nop
 800d320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d322:	bc08      	pop	{r3}
 800d324:	469e      	mov	lr, r3
 800d326:	4770      	bx	lr

0800d328 <_fini>:
 800d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32a:	bf00      	nop
 800d32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d32e:	bc08      	pop	{r3}
 800d330:	469e      	mov	lr, r3
 800d332:	4770      	bx	lr
