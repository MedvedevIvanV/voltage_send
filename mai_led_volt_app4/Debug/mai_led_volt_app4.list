
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800e098  0800e098  0000f098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e544  0800e544  000102c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e544  0800e544  0000f544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e54c  0800e54c  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e54c  0800e54c  0000f54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e550  0800e550  0000f550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800e554  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102c4  2**0
                  CONTENTS
 10 .bss          00001e94  200002c4  200002c4  000102c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002158  20002158  000102c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018284  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a63  00000000  00000000  00028578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  0002bfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001034  00000000  00000000  0002d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023587  00000000  00000000  0002e52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a1df  00000000  00000000  00051ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7f5e  00000000  00000000  0006bc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133bf0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e2c  00000000  00000000  00133c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0013aa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e07c 	.word	0x0800e07c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800e07c 	.word	0x0800e07c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <ResetSPIReceiver>:
void ResetSPIReceiver(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ResetSPIReceiver(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  memset(&spi_receiver, 0, sizeof(spi_receiver));
 8001024:	221a      	movs	r2, #26
 8001026:	2100      	movs	r1, #0
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <ResetSPIReceiver+0x20>)
 800102a:	f009 fc3a 	bl	800a8a2 <memset>
  spi_receiver.last_sclk_state = (SPI_MODE == 0 || SPI_MODE == 2) ? 0 : 1;
 800102e:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <ResetSPIReceiver+0x20>)
 8001030:	2200      	movs	r2, #0
 8001032:	761a      	strb	r2, [r3, #24]
  spi_state = SPI_STATE_IDLE;
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <ResetSPIReceiver+0x24>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000384 	.word	0x20000384
 8001044:	2000039e 	.word	0x2000039e

08001048 <PrintSPIData>:

void PrintSPIData(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
  snprintf(usb_msg, sizeof(usb_msg), "SPI Data (12-bit): ");
 800104e:	4a1d      	ldr	r2, [pc, #116]	@ (80010c4 <PrintSPIData+0x7c>)
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	481d      	ldr	r0, [pc, #116]	@ (80010c8 <PrintSPIData+0x80>)
 8001054:	f009 fb8a 	bl	800a76c <sniprintf>
  for (int i = 0; i < NUM_EXPECTED_WORDS; i++) {
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	e018      	b.n	8001090 <PrintSPIData+0x48>
    char word_str[8];
    snprintf(word_str, sizeof(word_str), "%04X ", spi_receiver.data[i] & 0xFFF); // Маска для 12 бит
 800105e:	4a1b      	ldr	r2, [pc, #108]	@ (80010cc <PrintSPIData+0x84>)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800106a:	1d38      	adds	r0, r7, #4
 800106c:	4a18      	ldr	r2, [pc, #96]	@ (80010d0 <PrintSPIData+0x88>)
 800106e:	2108      	movs	r1, #8
 8001070:	f009 fb7c 	bl	800a76c <sniprintf>
    strncat(usb_msg, word_str, sizeof(usb_msg) - strlen(usb_msg) - 1);
 8001074:	4814      	ldr	r0, [pc, #80]	@ (80010c8 <PrintSPIData+0x80>)
 8001076:	f7ff f8fb 	bl	8000270 <strlen>
 800107a:	4603      	mov	r3, r0
 800107c:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4619      	mov	r1, r3
 8001084:	4810      	ldr	r0, [pc, #64]	@ (80010c8 <PrintSPIData+0x80>)
 8001086:	f009 fc14 	bl	800a8b2 <strncat>
  for (int i = 0; i < NUM_EXPECTED_WORDS; i++) {
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b09      	cmp	r3, #9
 8001094:	dde3      	ble.n	800105e <PrintSPIData+0x16>
  }
  strncat(usb_msg, "\r\n", sizeof(usb_msg) - strlen(usb_msg) - 1);
 8001096:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <PrintSPIData+0x80>)
 8001098:	f7ff f8ea 	bl	8000270 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80010a2:	461a      	mov	r2, r3
 80010a4:	490b      	ldr	r1, [pc, #44]	@ (80010d4 <PrintSPIData+0x8c>)
 80010a6:	4808      	ldr	r0, [pc, #32]	@ (80010c8 <PrintSPIData+0x80>)
 80010a8:	f009 fc03 	bl	800a8b2 <strncat>
  CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80010ac:	4806      	ldr	r0, [pc, #24]	@ (80010c8 <PrintSPIData+0x80>)
 80010ae:	f7ff f8df 	bl	8000270 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <PrintSPIData+0x80>)
 80010b8:	f007 ffd6 	bl	8009068 <CDC_Transmit_FS>
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	0800e098 	.word	0x0800e098
 80010c8:	200003a0 	.word	0x200003a0
 80010cc:	20000384 	.word	0x20000384
 80010d0:	0800e0ac 	.word	0x0800e0ac
 80010d4:	0800e0b4 	.word	0x0800e0b4

080010d8 <ProcessSPI_GPIO>:

void ProcessSPI_GPIO(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
    uint8_t current_cs = HAL_GPIO_ReadPin(CS_GPIO_Port, CS_Pin);
 80010de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010e2:	483e      	ldr	r0, [pc, #248]	@ (80011dc <ProcessSPI_GPIO+0x104>)
 80010e4:	f001 f8ea 	bl	80022bc <HAL_GPIO_ReadPin>
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
    uint8_t current_sclk = HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin);
 80010ec:	2101      	movs	r1, #1
 80010ee:	483b      	ldr	r0, [pc, #236]	@ (80011dc <ProcessSPI_GPIO+0x104>)
 80010f0:	f001 f8e4 	bl	80022bc <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	71bb      	strb	r3, [r7, #6]
    uint8_t current_miso = HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin);
 80010f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010fc:	4837      	ldr	r0, [pc, #220]	@ (80011dc <ProcessSPI_GPIO+0x104>)
 80010fe:	f001 f8dd 	bl	80022bc <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	717b      	strb	r3, [r7, #5]

    // SPI Mode 0 (CPOL=0, CPHA=0) - sampling on rising edge
    if (spi_state == SPI_STATE_CS_LOW && current_cs == 0) {
 8001106:	4b36      	ldr	r3, [pc, #216]	@ (80011e0 <ProcessSPI_GPIO+0x108>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d13e      	bne.n	800118e <ProcessSPI_GPIO+0xb6>
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d13b      	bne.n	800118e <ProcessSPI_GPIO+0xb6>
        if (current_sclk && !spi_receiver.last_sclk_state) { // Rising edge
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d054      	beq.n	80011c6 <ProcessSPI_GPIO+0xee>
 800111c:	4b31      	ldr	r3, [pc, #196]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 800111e:	7e1b      	ldrb	r3, [r3, #24]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d150      	bne.n	80011c6 <ProcessSPI_GPIO+0xee>
            spi_receiver.current_word <<= 1;
 8001124:	4b2f      	ldr	r3, [pc, #188]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 8001126:	8a9b      	ldrh	r3, [r3, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b2d      	ldr	r3, [pc, #180]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 800112e:	829a      	strh	r2, [r3, #20]
            spi_receiver.current_word |= current_miso;
 8001130:	4b2c      	ldr	r3, [pc, #176]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 8001132:	8a9a      	ldrh	r2, [r3, #20]
 8001134:	797b      	ldrb	r3, [r7, #5]
 8001136:	b29b      	uxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 800113e:	829a      	strh	r2, [r3, #20]
            spi_receiver.bit_counter++;
 8001140:	4b28      	ldr	r3, [pc, #160]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 8001142:	7d9b      	ldrb	r3, [r3, #22]
 8001144:	3301      	adds	r3, #1
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 800114a:	759a      	strb	r2, [r3, #22]

            if (spi_receiver.bit_counter >= SPI_DATA_BITS) {
 800114c:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 800114e:	7d9b      	ldrb	r3, [r3, #22]
 8001150:	2b0b      	cmp	r3, #11
 8001152:	d938      	bls.n	80011c6 <ProcessSPI_GPIO+0xee>
                spi_receiver.data[spi_receiver.word_counter++] = spi_receiver.current_word & 0xFFF; // Сохраняем только 12 бит
 8001154:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 8001156:	8a9a      	ldrh	r2, [r3, #20]
 8001158:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 800115a:	7ddb      	ldrb	r3, [r3, #23]
 800115c:	1c59      	adds	r1, r3, #1
 800115e:	b2c8      	uxtb	r0, r1
 8001160:	4920      	ldr	r1, [pc, #128]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 8001162:	75c8      	strb	r0, [r1, #23]
 8001164:	4619      	mov	r1, r3
 8001166:	f3c2 030b 	ubfx	r3, r2, #0, #12
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 800116e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
                spi_receiver.current_word = 0;
 8001172:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 8001174:	2200      	movs	r2, #0
 8001176:	829a      	strh	r2, [r3, #20]
                spi_receiver.bit_counter = 0;
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 800117a:	2200      	movs	r2, #0
 800117c:	759a      	strb	r2, [r3, #22]

                if (spi_receiver.word_counter >= NUM_EXPECTED_WORDS) {
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 8001180:	7ddb      	ldrb	r3, [r3, #23]
 8001182:	2b09      	cmp	r3, #9
 8001184:	d91f      	bls.n	80011c6 <ProcessSPI_GPIO+0xee>
                    spi_state = SPI_STATE_COMPLETE;
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <ProcessSPI_GPIO+0x108>)
 8001188:	2202      	movs	r2, #2
 800118a:	701a      	strb	r2, [r3, #0]
        if (current_sclk && !spi_receiver.last_sclk_state) { // Rising edge
 800118c:	e01b      	b.n	80011c6 <ProcessSPI_GPIO+0xee>
                }
            }
        }
    }
    else if (current_cs) {
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <ProcessSPI_GPIO+0xc4>
        spi_state = SPI_STATE_IDLE;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <ProcessSPI_GPIO+0x108>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	e015      	b.n	80011c8 <ProcessSPI_GPIO+0xf0>
    }
    else if (!current_cs && spi_state == SPI_STATE_IDLE) {
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d112      	bne.n	80011c8 <ProcessSPI_GPIO+0xf0>
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <ProcessSPI_GPIO+0x108>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10d      	bne.n	80011c8 <ProcessSPI_GPIO+0xf0>
        spi_state = SPI_STATE_CS_LOW;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <ProcessSPI_GPIO+0x108>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
        spi_receiver.bit_counter = 0;
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	759a      	strb	r2, [r3, #22]
        spi_receiver.current_word = 0;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	829a      	strh	r2, [r3, #20]
        spi_receiver.word_counter = 0;
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	75da      	strb	r2, [r3, #23]
 80011c4:	e000      	b.n	80011c8 <ProcessSPI_GPIO+0xf0>
        if (current_sclk && !spi_receiver.last_sclk_state) { // Rising edge
 80011c6:	bf00      	nop
    }

    spi_receiver.last_sclk_state = current_sclk;
 80011c8:	4a06      	ldr	r2, [pc, #24]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 80011ca:	79bb      	ldrb	r3, [r7, #6]
 80011cc:	7613      	strb	r3, [r2, #24]
    spi_receiver.last_cs_state = current_cs;
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <ProcessSPI_GPIO+0x10c>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	7653      	strb	r3, [r2, #25]
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	2000039e 	.word	0x2000039e
 80011e4:	20000384 	.word	0x20000384

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ec:	f000 fc16 	bl	8001a1c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f0:	f000 f82c 	bl	800124c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f4:	f000 f934 	bl	8001460 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011f8:	f000 f908 	bl	800140c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80011fc:	f007 fe76 	bl	8008eec <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 8001200:	f000 f88c 	bl	800131c <MX_DAC_Init>
  MX_TIM3_Init();
 8001204:	f000 f8b4 	bl	8001370 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001208:	480d      	ldr	r0, [pc, #52]	@ (8001240 <main+0x58>)
 800120a:	f002 ffdd 	bl	80041c8 <HAL_TIM_Base_Start>
  ResetSPIReceiver();
 800120e:	f7ff ff07 	bl	8001020 <ResetSPIReceiver>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // LED off
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001218:	480a      	ldr	r0, [pc, #40]	@ (8001244 <main+0x5c>)
 800121a:	f001 f867 	bl	80022ec <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    ProcessSPI_GPIO();
 800121e:	f7ff ff5b 	bl	80010d8 <ProcessSPI_GPIO>

    if (spi_state == SPI_STATE_COMPLETE) {
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <main+0x60>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d1f8      	bne.n	800121e <main+0x36>
      PrintSPIData();
 800122c:	f7ff ff0c 	bl	8001048 <PrintSPIData>
      ResetSPIReceiver();
 8001230:	f7ff fef6 	bl	8001020 <ResetSPIReceiver>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Toggle LED on complete
 8001234:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001238:	4802      	ldr	r0, [pc, #8]	@ (8001244 <main+0x5c>)
 800123a:	f001 f870 	bl	800231e <HAL_GPIO_TogglePin>
    ProcessSPI_GPIO();
 800123e:	e7ee      	b.n	800121e <main+0x36>
 8001240:	200002f4 	.word	0x200002f4
 8001244:	40020800 	.word	0x40020800
 8001248:	2000039e 	.word	0x2000039e

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b094      	sub	sp, #80	@ 0x50
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	2230      	movs	r2, #48	@ 0x30
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f009 fb21 	bl	800a8a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	4b27      	ldr	r3, [pc, #156]	@ (8001314 <SystemClock_Config+0xc8>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001278:	4a26      	ldr	r2, [pc, #152]	@ (8001314 <SystemClock_Config+0xc8>)
 800127a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800127e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001280:	4b24      	ldr	r3, [pc, #144]	@ (8001314 <SystemClock_Config+0xc8>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <SystemClock_Config+0xcc>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a20      	ldr	r2, [pc, #128]	@ (8001318 <SystemClock_Config+0xcc>)
 8001296:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <SystemClock_Config+0xcc>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a8:	2301      	movs	r3, #1
 80012aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b2:	2302      	movs	r3, #2
 80012b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012bc:	2304      	movs	r3, #4
 80012be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012c0:	2348      	movs	r3, #72	@ 0x48
 80012c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012c8:	2303      	movs	r3, #3
 80012ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 fa91 	bl	80037f8 <HAL_RCC_OscConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012dc:	f000 f966 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e0:	230f      	movs	r3, #15
 80012e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e4:	2302      	movs	r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	2102      	movs	r1, #2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 fcf3 	bl	8003ce8 <HAL_RCC_ClockConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001308:	f000 f950 	bl	80015ac <Error_Handler>
  }
}
 800130c:	bf00      	nop
 800130e:	3750      	adds	r7, #80	@ 0x50
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40007000 	.word	0x40007000

0800131c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_DAC_Init+0x4c>)
 800132c:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <MX_DAC_Init+0x50>)
 800132e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001330:	480d      	ldr	r0, [pc, #52]	@ (8001368 <MX_DAC_Init+0x4c>)
 8001332:	f000 fd1a 	bl	8001d6a <HAL_DAC_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800133c:	f000 f936 	bl	80015ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001340:	2300      	movs	r3, #0
 8001342:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	2200      	movs	r2, #0
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	@ (8001368 <MX_DAC_Init+0x4c>)
 8001350:	f000 fd2d 	bl	8001dae <HAL_DAC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800135a:	f000 f927 	bl	80015ac <Error_Handler>
  }
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200002e0 	.word	0x200002e0
 800136c:	40007400 	.word	0x40007400

08001370 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001384:	463b      	mov	r3, r7
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800138c:	4b1d      	ldr	r3, [pc, #116]	@ (8001404 <MX_TIM3_Init+0x94>)
 800138e:	4a1e      	ldr	r2, [pc, #120]	@ (8001408 <MX_TIM3_Init+0x98>)
 8001390:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8001392:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <MX_TIM3_Init+0x94>)
 8001394:	22a7      	movs	r2, #167	@ 0xa7
 8001396:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001398:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <MX_TIM3_Init+0x94>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFFFFFF;
 800139e:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <MX_TIM3_Init+0x94>)
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a6:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <MX_TIM3_Init+0x94>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ac:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <MX_TIM3_Init+0x94>)
 80013ae:	2280      	movs	r2, #128	@ 0x80
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013b2:	4814      	ldr	r0, [pc, #80]	@ (8001404 <MX_TIM3_Init+0x94>)
 80013b4:	f002 feb8 	bl	8004128 <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80013be:	f000 f8f5 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4619      	mov	r1, r3
 80013ce:	480d      	ldr	r0, [pc, #52]	@ (8001404 <MX_TIM3_Init+0x94>)
 80013d0:	f003 f852 	bl	8004478 <HAL_TIM_ConfigClockSource>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80013da:	f000 f8e7 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	@ (8001404 <MX_TIM3_Init+0x94>)
 80013ec:	f003 fa7e 	bl	80048ec <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80013f6:	f000 f8d9 	bl	80015ac <Error_Handler>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200002f4 	.word	0x200002f4
 8001408:	40000400 	.word	0x40000400

0800140c <MX_USART1_UART_Init>:
  * @brief USART1 UART Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001412:	4a12      	ldr	r2, [pc, #72]	@ (800145c <MX_USART1_UART_Init+0x50>)
 8001414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001418:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800141c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_USART1_UART_Init+0x4c>)
 8001444:	f003 fae2 	bl	8004a0c <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800144e:	f000 f8ad 	bl	80015ac <Error_Handler>
  }
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000033c 	.word	0x2000033c
 800145c:	40011000 	.word	0x40011000

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b48      	ldr	r3, [pc, #288]	@ (800159c <MX_GPIO_Init+0x13c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a47      	ldr	r2, [pc, #284]	@ (800159c <MX_GPIO_Init+0x13c>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b45      	ldr	r3, [pc, #276]	@ (800159c <MX_GPIO_Init+0x13c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b41      	ldr	r3, [pc, #260]	@ (800159c <MX_GPIO_Init+0x13c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a40      	ldr	r2, [pc, #256]	@ (800159c <MX_GPIO_Init+0x13c>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b3e      	ldr	r3, [pc, #248]	@ (800159c <MX_GPIO_Init+0x13c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b3a      	ldr	r3, [pc, #232]	@ (800159c <MX_GPIO_Init+0x13c>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a39      	ldr	r2, [pc, #228]	@ (800159c <MX_GPIO_Init+0x13c>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b37      	ldr	r3, [pc, #220]	@ (800159c <MX_GPIO_Init+0x13c>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b33      	ldr	r3, [pc, #204]	@ (800159c <MX_GPIO_Init+0x13c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a32      	ldr	r2, [pc, #200]	@ (800159c <MX_GPIO_Init+0x13c>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b30      	ldr	r3, [pc, #192]	@ (800159c <MX_GPIO_Init+0x13c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4b2c      	ldr	r3, [pc, #176]	@ (800159c <MX_GPIO_Init+0x13c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a2b      	ldr	r2, [pc, #172]	@ (800159c <MX_GPIO_Init+0x13c>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b29      	ldr	r3, [pc, #164]	@ (800159c <MX_GPIO_Init+0x13c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|TH_CS_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 8001508:	4825      	ldr	r0, [pc, #148]	@ (80015a0 <MX_GPIO_Init+0x140>)
 800150a:	f000 feef 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2120      	movs	r1, #32
 8001512:	4824      	ldr	r0, [pc, #144]	@ (80015a4 <MX_GPIO_Init+0x144>)
 8001514:	f000 feea 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2102      	movs	r1, #2
 800151c:	4822      	ldr	r0, [pc, #136]	@ (80015a8 <MX_GPIO_Init+0x148>)
 800151e:	f000 fee5 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 TH_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|TH_CS_Pin;
 8001522:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4819      	ldr	r0, [pc, #100]	@ (80015a0 <MX_GPIO_Init+0x140>)
 800153c:	f000 fd22 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001540:	2320      	movs	r3, #32
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4813      	ldr	r0, [pc, #76]	@ (80015a4 <MX_GPIO_Init+0x144>)
 8001558:	f000 fd14 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin MISO_Pin SCLK_Pin */
  GPIO_InitStruct.Pin = CS_Pin|MISO_Pin|SCLK_Pin;
 800155c:	f24c 0301 	movw	r3, #49153	@ 0xc001
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <MX_GPIO_Init+0x148>)
 8001572:	f000 fd07 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 8001576:	2302      	movs	r3, #2
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <MX_GPIO_Init+0x148>)
 800158e:	f000 fcf9 	bl	8001f84 <HAL_GPIO_Init>
}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	@ 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020c00 	.word	0x40020c00

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <Error_Handler+0x4>

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_MspInit+0x4c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001600 <HAL_MspInit+0x4c>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <HAL_MspInit+0x4c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <HAL_MspInit+0x4c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	4a08      	ldr	r2, [pc, #32]	@ (8001600 <HAL_MspInit+0x4c>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <HAL_DAC_MspInit+0x7c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d127      	bne.n	8001676 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <HAL_DAC_MspInit+0x80>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	4a15      	ldr	r2, [pc, #84]	@ (8001684 <HAL_DAC_MspInit+0x80>)
 8001630:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001634:	6413      	str	r3, [r2, #64]	@ 0x40
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <HAL_DAC_MspInit+0x80>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <HAL_DAC_MspInit+0x80>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a0e      	ldr	r2, [pc, #56]	@ (8001684 <HAL_DAC_MspInit+0x80>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <HAL_DAC_MspInit+0x80>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800165e:	2310      	movs	r3, #16
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001662:	2303      	movs	r3, #3
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <HAL_DAC_MspInit+0x84>)
 8001672:	f000 fc87 	bl	8001f84 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001676:	bf00      	nop
 8001678:	3728      	adds	r7, #40	@ 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40007400 	.word	0x40007400
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000

0800168c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0e      	ldr	r2, [pc, #56]	@ (80016d4 <HAL_TIM_Base_MspInit+0x48>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d115      	bne.n	80016ca <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <HAL_TIM_Base_MspInit+0x4c>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	4a0c      	ldr	r2, [pc, #48]	@ (80016d8 <HAL_TIM_Base_MspInit+0x4c>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ae:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <HAL_TIM_Base_MspInit+0x4c>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	201d      	movs	r0, #29
 80016c0:	f000 fb1d 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016c4:	201d      	movs	r0, #29
 80016c6:	f000 fb36 	bl	8001d36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40000400 	.word	0x40000400
 80016d8:	40023800 	.word	0x40023800

080016dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001770 <HAL_UART_MspInit+0x94>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d133      	bne.n	8001766 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <HAL_UART_MspInit+0x98>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	4a1b      	ldr	r2, [pc, #108]	@ (8001774 <HAL_UART_MspInit+0x98>)
 8001708:	f043 0310 	orr.w	r3, r3, #16
 800170c:	6453      	str	r3, [r2, #68]	@ 0x44
 800170e:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <HAL_UART_MspInit+0x98>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <HAL_UART_MspInit+0x98>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a14      	ldr	r2, [pc, #80]	@ (8001774 <HAL_UART_MspInit+0x98>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_UART_MspInit+0x98>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001736:	23c0      	movs	r3, #192	@ 0xc0
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001746:	2307      	movs	r3, #7
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4809      	ldr	r0, [pc, #36]	@ (8001778 <HAL_UART_MspInit+0x9c>)
 8001752:	f000 fc17 	bl	8001f84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	2025      	movs	r0, #37	@ 0x25
 800175c:	f000 facf 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001760:	2025      	movs	r0, #37	@ 0x25
 8001762:	f000 fae8 	bl	8001d36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	@ 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40011000 	.word	0x40011000
 8001774:	40023800 	.word	0x40023800
 8001778:	40020400 	.word	0x40020400

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <NMI_Handler+0x4>

08001784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <MemManage_Handler+0x4>

08001794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d2:	f000 f975 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <TIM3_IRQHandler+0x10>)
 80017e2:	f002 fd59 	bl	8004298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200002f4 	.word	0x200002f4

080017f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <USART1_IRQHandler+0x10>)
 80017f6:	f003 f959 	bl	8004aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000033c 	.word	0x2000033c

08001804 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <OTG_FS_IRQHandler+0x10>)
 800180a:	f000 fee6 	bl	80025da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20001908 	.word	0x20001908

08001818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return 1;
 800181c:	2301      	movs	r3, #1
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <_kill>:

int _kill(int pid, int sig)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001832:	f009 f89b 	bl	800a96c <__errno>
 8001836:	4603      	mov	r3, r0
 8001838:	2216      	movs	r2, #22
 800183a:	601a      	str	r2, [r3, #0]
  return -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <_exit>:

void _exit (int status)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001850:	f04f 31ff 	mov.w	r1, #4294967295
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ffe7 	bl	8001828 <_kill>
  while (1) {}    /* Make sure we hang here */
 800185a:	bf00      	nop
 800185c:	e7fd      	b.n	800185a <_exit+0x12>

0800185e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e00a      	b.n	8001886 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001870:	f3af 8000 	nop.w
 8001874:	4601      	mov	r1, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	60ba      	str	r2, [r7, #8]
 800187c:	b2ca      	uxtb	r2, r1
 800187e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	dbf0      	blt.n	8001870 <_read+0x12>
  }

  return len;
 800188e:	687b      	ldr	r3, [r7, #4]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e009      	b.n	80018be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	60ba      	str	r2, [r7, #8]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dbf1      	blt.n	80018aa <_write+0x12>
  }
  return len;
 80018c6:	687b      	ldr	r3, [r7, #4]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_close>:

int _close(int file)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018f8:	605a      	str	r2, [r3, #4]
  return 0;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_isatty>:

int _isatty(int file)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001910:	2301      	movs	r3, #1
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001940:	4a14      	ldr	r2, [pc, #80]	@ (8001994 <_sbrk+0x5c>)
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <_sbrk+0x60>)
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800194c:	4b13      	ldr	r3, [pc, #76]	@ (800199c <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001954:	4b11      	ldr	r3, [pc, #68]	@ (800199c <_sbrk+0x64>)
 8001956:	4a12      	ldr	r2, [pc, #72]	@ (80019a0 <_sbrk+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	429a      	cmp	r2, r3
 8001966:	d207      	bcs.n	8001978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001968:	f009 f800 	bl	800a96c <__errno>
 800196c:	4603      	mov	r3, r0
 800196e:	220c      	movs	r2, #12
 8001970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	e009      	b.n	800198c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197e:	4b07      	ldr	r3, [pc, #28]	@ (800199c <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	4a05      	ldr	r2, [pc, #20]	@ (800199c <_sbrk+0x64>)
 8001988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198a:	68fb      	ldr	r3, [r7, #12]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20020000 	.word	0x20020000
 8001998:	00000400 	.word	0x00000400
 800199c:	20000420 	.word	0x20000420
 80019a0:	20002158 	.word	0x20002158

080019a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <SystemInit+0x20>)
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ae:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <SystemInit+0x20>)
 80019b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019cc:	f7ff ffea 	bl	80019a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d0:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d2:	490d      	ldr	r1, [pc, #52]	@ (8001a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80019f6:	f008 ffbf 	bl	800a978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fa:	f7ff fbf5 	bl	80011e8 <main>
  bx  lr    
 80019fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001a0c:	0800e554 	.word	0x0800e554
  ldr r2, =_sbss
 8001a10:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001a14:	20002158 	.word	0x20002158

08001a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a20:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <HAL_Init+0x40>)
 8001a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <HAL_Init+0x40>)
 8001a32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a38:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <HAL_Init+0x40>)
 8001a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a44:	2003      	movs	r0, #3
 8001a46:	f000 f94f 	bl	8001ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4a:	200f      	movs	r0, #15
 8001a4c:	f000 f808 	bl	8001a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a50:	f7ff fdb0 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00

08001a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a68:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <HAL_InitTick+0x54>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_InitTick+0x58>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f967 	bl	8001d52 <HAL_SYSTICK_Config>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00e      	b.n	8001aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d80a      	bhi.n	8001aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a94:	2200      	movs	r2, #0
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f000 f92f 	bl	8001cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa0:	4a06      	ldr	r2, [pc, #24]	@ (8001abc <HAL_InitTick+0x5c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_IncTick+0x20>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_IncTick+0x24>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <HAL_IncTick+0x24>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000424 	.word	0x20000424

08001ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b03      	ldr	r3, [pc, #12]	@ (8001afc <HAL_GetTick+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000424 	.word	0x20000424

08001b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff ffee 	bl	8001ae8 <HAL_GetTick>
 8001b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d005      	beq.n	8001b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <HAL_Delay+0x44>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b26:	bf00      	nop
 8001b28:	f7ff ffde 	bl	8001ae8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d8f7      	bhi.n	8001b28 <HAL_Delay+0x28>
  {
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000008 	.word	0x20000008

08001b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db0b      	blt.n	8001bd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	f003 021f 	and.w	r2, r3, #31
 8001bc4:	4907      	ldr	r1, [pc, #28]	@ (8001be4 <__NVIC_EnableIRQ+0x38>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2001      	movs	r0, #1
 8001bce:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	@ (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	@ 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf28      	it	cs
 8001c5a:	2304      	movcs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b03      	subs	r3, #3
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	@ 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb4:	d301      	bcc.n	8001cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00f      	b.n	8001cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f7ff ff8e 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd2:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	e000e010 	.word	0xe000e010

08001ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff29 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d10:	f7ff ff3e 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	6978      	ldr	r0, [r7, #20]
 8001d1c:	f7ff ff8e 	bl	8001c3c <NVIC_EncodePriority>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff5d 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff31 	bl	8001bac <__NVIC_EnableIRQ>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffa2 	bl	8001ca4 <SysTick_Config>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e014      	b.n	8001da6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	791b      	ldrb	r3, [r3, #4]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d105      	bne.n	8001d92 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff fc39 	bl	8001604 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b089      	sub	sp, #36	@ 0x24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <HAL_DAC_ConfigChannel+0x1c>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e042      	b.n	8001e54 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	795b      	ldrb	r3, [r3, #5]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_DAC_ConfigChannel+0x2c>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e03c      	b.n	8001e54 <HAL_DAC_ConfigChannel+0xa6>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2202      	movs	r2, #2
 8001de4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	22c0      	movs	r2, #192	@ 0xc0
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	400a      	ands	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001e52:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3724      	adds	r7, #36	@ 0x24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e6e:	f7ff fe3b 	bl	8001ae8 <HAL_GetTick>
 8001e72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d008      	beq.n	8001e92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2280      	movs	r2, #128	@ 0x80
 8001e84:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e052      	b.n	8001f38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0216 	bic.w	r2, r2, #22
 8001ea0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001eb0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d103      	bne.n	8001ec2 <HAL_DMA_Abort+0x62>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0208 	bic.w	r2, r2, #8
 8001ed0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0201 	bic.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee2:	e013      	b.n	8001f0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ee4:	f7ff fe00 	bl	8001ae8 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d90c      	bls.n	8001f0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2203      	movs	r2, #3
 8001efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e015      	b.n	8001f38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1e4      	bne.n	8001ee4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1e:	223f      	movs	r2, #63	@ 0x3f
 8001f20:	409a      	lsls	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d004      	beq.n	8001f5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2280      	movs	r2, #128	@ 0x80
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00c      	b.n	8001f78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2205      	movs	r2, #5
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0201 	bic.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	@ 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e16b      	b.n	8002278 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f040 815a 	bne.w	8002272 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d005      	beq.n	8001fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d130      	bne.n	8002038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800200c:	2201      	movs	r2, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 0201 	and.w	r2, r3, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b03      	cmp	r3, #3
 8002042:	d017      	beq.n	8002074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d123      	bne.n	80020c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	08da      	lsrs	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	08da      	lsrs	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3208      	adds	r2, #8
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	2203      	movs	r2, #3
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0203 	and.w	r2, r3, #3
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80b4 	beq.w	8002272 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b60      	ldr	r3, [pc, #384]	@ (8002290 <HAL_GPIO_Init+0x30c>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	4a5f      	ldr	r2, [pc, #380]	@ (8002290 <HAL_GPIO_Init+0x30c>)
 8002114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002118:	6453      	str	r3, [r2, #68]	@ 0x44
 800211a:	4b5d      	ldr	r3, [pc, #372]	@ (8002290 <HAL_GPIO_Init+0x30c>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002126:	4a5b      	ldr	r2, [pc, #364]	@ (8002294 <HAL_GPIO_Init+0x310>)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	220f      	movs	r2, #15
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a52      	ldr	r2, [pc, #328]	@ (8002298 <HAL_GPIO_Init+0x314>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d02b      	beq.n	80021aa <HAL_GPIO_Init+0x226>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a51      	ldr	r2, [pc, #324]	@ (800229c <HAL_GPIO_Init+0x318>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d025      	beq.n	80021a6 <HAL_GPIO_Init+0x222>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a50      	ldr	r2, [pc, #320]	@ (80022a0 <HAL_GPIO_Init+0x31c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01f      	beq.n	80021a2 <HAL_GPIO_Init+0x21e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4f      	ldr	r2, [pc, #316]	@ (80022a4 <HAL_GPIO_Init+0x320>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d019      	beq.n	800219e <HAL_GPIO_Init+0x21a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4e      	ldr	r2, [pc, #312]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d013      	beq.n	800219a <HAL_GPIO_Init+0x216>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4d      	ldr	r2, [pc, #308]	@ (80022ac <HAL_GPIO_Init+0x328>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00d      	beq.n	8002196 <HAL_GPIO_Init+0x212>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4c      	ldr	r2, [pc, #304]	@ (80022b0 <HAL_GPIO_Init+0x32c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d007      	beq.n	8002192 <HAL_GPIO_Init+0x20e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4b      	ldr	r2, [pc, #300]	@ (80022b4 <HAL_GPIO_Init+0x330>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <HAL_GPIO_Init+0x20a>
 800218a:	2307      	movs	r3, #7
 800218c:	e00e      	b.n	80021ac <HAL_GPIO_Init+0x228>
 800218e:	2308      	movs	r3, #8
 8002190:	e00c      	b.n	80021ac <HAL_GPIO_Init+0x228>
 8002192:	2306      	movs	r3, #6
 8002194:	e00a      	b.n	80021ac <HAL_GPIO_Init+0x228>
 8002196:	2305      	movs	r3, #5
 8002198:	e008      	b.n	80021ac <HAL_GPIO_Init+0x228>
 800219a:	2304      	movs	r3, #4
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x228>
 800219e:	2303      	movs	r3, #3
 80021a0:	e004      	b.n	80021ac <HAL_GPIO_Init+0x228>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_Init+0x228>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_GPIO_Init+0x228>
 80021aa:	2300      	movs	r3, #0
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	f002 0203 	and.w	r2, r2, #3
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	4093      	lsls	r3, r2
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021bc:	4935      	ldr	r1, [pc, #212]	@ (8002294 <HAL_GPIO_Init+0x310>)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ca:	4b3b      	ldr	r3, [pc, #236]	@ (80022b8 <HAL_GPIO_Init+0x334>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ee:	4a32      	ldr	r2, [pc, #200]	@ (80022b8 <HAL_GPIO_Init+0x334>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f4:	4b30      	ldr	r3, [pc, #192]	@ (80022b8 <HAL_GPIO_Init+0x334>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002218:	4a27      	ldr	r2, [pc, #156]	@ (80022b8 <HAL_GPIO_Init+0x334>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800221e:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <HAL_GPIO_Init+0x334>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002242:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <HAL_GPIO_Init+0x334>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002248:	4b1b      	ldr	r3, [pc, #108]	@ (80022b8 <HAL_GPIO_Init+0x334>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800226c:	4a12      	ldr	r2, [pc, #72]	@ (80022b8 <HAL_GPIO_Init+0x334>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	2b0f      	cmp	r3, #15
 800227c:	f67f ae90 	bls.w	8001fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3724      	adds	r7, #36	@ 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	40013800 	.word	0x40013800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020400 	.word	0x40020400
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020c00 	.word	0x40020c00
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40021400 	.word	0x40021400
 80022b0:	40021800 	.word	0x40021800
 80022b4:	40021c00 	.word	0x40021c00
 80022b8:	40013c00 	.word	0x40013c00

080022bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	887b      	ldrh	r3, [r7, #2]
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e001      	b.n	80022de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002308:	e003      	b.n	8002312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002330:	887a      	ldrh	r2, [r7, #2]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	041a      	lsls	r2, r3, #16
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43d9      	mvns	r1, r3
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	400b      	ands	r3, r1
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af02      	add	r7, sp, #8
 8002358:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e101      	b.n	8002568 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f006 ffba 	bl	80092f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2203      	movs	r2, #3
 8002388:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002392:	d102      	bne.n	800239a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 fb7d 	bl	8005a9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7c1a      	ldrb	r2, [r3, #16]
 80023ac:	f88d 2000 	strb.w	r2, [sp]
 80023b0:	3304      	adds	r3, #4
 80023b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b4:	f003 fa5c 	bl	8005870 <USB_CoreInit>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0ce      	b.n	8002568 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fb75 	bl	8005ac0 <USB_SetCurrentMode>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0bf      	b.n	8002568 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	e04a      	b.n	8002484 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	3315      	adds	r3, #21
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	3314      	adds	r3, #20
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	b298      	uxth	r0, r3
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	332e      	adds	r3, #46	@ 0x2e
 800242a:	4602      	mov	r2, r0
 800242c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	3318      	adds	r3, #24
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	331c      	adds	r3, #28
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	3320      	adds	r3, #32
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	3324      	adds	r3, #36	@ 0x24
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	3301      	adds	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	791b      	ldrb	r3, [r3, #4]
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	429a      	cmp	r2, r3
 800248c:	d3af      	bcc.n	80023ee <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	e044      	b.n	800251e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024c0:	7bfa      	ldrb	r2, [r7, #15]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	3301      	adds	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	791b      	ldrb	r3, [r3, #4]
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	429a      	cmp	r2, r3
 8002526:	d3b5      	bcc.n	8002494 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7c1a      	ldrb	r2, [r3, #16]
 8002530:	f88d 2000 	strb.w	r2, [sp]
 8002534:	3304      	adds	r3, #4
 8002536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002538:	f003 fb0e 	bl	8005b58 <USB_DevInit>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2202      	movs	r2, #2
 8002546:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00c      	b.n	8002568 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f004 fb58 	bl	8006c16 <USB_DevDisconnect>

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_PCD_Start+0x1c>
 8002588:	2302      	movs	r3, #2
 800258a:	e022      	b.n	80025d2 <HAL_PCD_Start+0x62>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 fa5f 	bl	8005a7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 fb06 	bl	8006bd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025da:	b590      	push	{r4, r7, lr}
 80025dc:	b08d      	sub	sp, #52	@ 0x34
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f004 fbc4 	bl	8006d7e <USB_GetMode>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f040 848c 	bne.w	8002f16 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f004 fb28 	bl	8006c58 <USB_ReadInterrupts>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8482 	beq.w	8002f14 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f004 fb15 	bl	8006c58 <USB_ReadInterrupts>
 800262e:	4603      	mov	r3, r0
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b02      	cmp	r3, #2
 8002636:	d107      	bne.n	8002648 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f002 0202 	and.w	r2, r2, #2
 8002646:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f004 fb03 	bl	8006c58 <USB_ReadInterrupts>
 8002652:	4603      	mov	r3, r0
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b10      	cmp	r3, #16
 800265a:	d161      	bne.n	8002720 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0210 	bic.w	r2, r2, #16
 800266a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f003 020f 	and.w	r2, r3, #15
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	3304      	adds	r3, #4
 800268a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002692:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002696:	d124      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d035      	beq.n	8002710 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	6a38      	ldr	r0, [r7, #32]
 80026b8:	f004 f93a 	bl	8006930 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c8:	441a      	add	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026da:	441a      	add	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	615a      	str	r2, [r3, #20]
 80026e0:	e016      	b.n	8002710 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80026e8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026ec:	d110      	bne.n	8002710 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026f4:	2208      	movs	r2, #8
 80026f6:	4619      	mov	r1, r3
 80026f8:	6a38      	ldr	r0, [r7, #32]
 80026fa:	f004 f919 	bl	8006930 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800270a:	441a      	add	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0210 	orr.w	r2, r2, #16
 800271e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f004 fa97 	bl	8006c58 <USB_ReadInterrupts>
 800272a:	4603      	mov	r3, r0
 800272c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002730:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002734:	f040 80a7 	bne.w	8002886 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f004 fa9c 	bl	8006c7e <USB_ReadDevAllOutEpInterrupt>
 8002746:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002748:	e099      	b.n	800287e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800274a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 808e 	beq.w	8002872 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f004 fac0 	bl	8006ce6 <USB_ReadDevOutEPInterrupt>
 8002766:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00c      	beq.n	800278c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	4413      	add	r3, r2
 800277a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800277e:	461a      	mov	r2, r3
 8002780:	2301      	movs	r3, #1
 8002782:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002784:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fea4 	bl	80034d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00c      	beq.n	80027b0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027a2:	461a      	mov	r2, r3
 80027a4:	2308      	movs	r3, #8
 80027a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 ff7a 	bl	80036a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c6:	461a      	mov	r2, r3
 80027c8:	2310      	movs	r3, #16
 80027ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d030      	beq.n	8002838 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027de:	2b80      	cmp	r3, #128	@ 0x80
 80027e0:	d109      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027f4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	3304      	adds	r3, #4
 800280a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	78db      	ldrb	r3, [r3, #3]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d108      	bne.n	8002826 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2200      	movs	r2, #0
 8002818:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	b2db      	uxtb	r3, r3
 800281e:	4619      	mov	r1, r3
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f006 fe6f 	bl	8009504 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002832:	461a      	mov	r2, r3
 8002834:	2302      	movs	r3, #2
 8002836:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800284e:	461a      	mov	r2, r3
 8002850:	2320      	movs	r3, #32
 8002852:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d009      	beq.n	8002872 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800286a:	461a      	mov	r2, r3
 800286c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002870:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	3301      	adds	r3, #1
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800287e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002880:	2b00      	cmp	r3, #0
 8002882:	f47f af62 	bne.w	800274a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f004 f9e4 	bl	8006c58 <USB_ReadInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002896:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800289a:	f040 80db 	bne.w	8002a54 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f004 fa05 	bl	8006cb2 <USB_ReadDevAllInEpInterrupt>
 80028a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80028ae:	e0cd      	b.n	8002a4c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80c2 	beq.w	8002a40 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 fa2b 	bl	8006d22 <USB_ReadDevInEPInterrupt>
 80028cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d057      	beq.n	8002988 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	2201      	movs	r2, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69f9      	ldr	r1, [r7, #28]
 80028f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028f8:	4013      	ands	r3, r2
 80028fa:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	4413      	add	r3, r2
 8002904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002908:	461a      	mov	r2, r3
 800290a:	2301      	movs	r3, #1
 800290c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	799b      	ldrb	r3, [r3, #6]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d132      	bne.n	800297c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	3320      	adds	r3, #32
 8002926:	6819      	ldr	r1, [r3, #0]
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4403      	add	r3, r0
 8002936:	331c      	adds	r3, #28
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4419      	add	r1, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4403      	add	r3, r0
 800294a:	3320      	adds	r3, #32
 800294c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	2b00      	cmp	r3, #0
 8002952:	d113      	bne.n	800297c <HAL_PCD_IRQHandler+0x3a2>
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3324      	adds	r3, #36	@ 0x24
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d108      	bne.n	800297c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002974:	461a      	mov	r2, r3
 8002976:	2101      	movs	r1, #1
 8002978:	f004 fa32 	bl	8006de0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	b2db      	uxtb	r3, r3
 8002980:	4619      	mov	r1, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f006 fd39 	bl	80093fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	4413      	add	r3, r2
 800299a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800299e:	461a      	mov	r2, r3
 80029a0:	2308      	movs	r3, #8
 80029a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029ba:	461a      	mov	r2, r3
 80029bc:	2310      	movs	r3, #16
 80029be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029d6:	461a      	mov	r2, r3
 80029d8:	2340      	movs	r3, #64	@ 0x40
 80029da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d023      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029e8:	6a38      	ldr	r0, [r7, #32]
 80029ea:	f003 fa19 	bl	8005e20 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	3310      	adds	r3, #16
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	3304      	adds	r3, #4
 8002a00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	78db      	ldrb	r3, [r3, #3]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d108      	bne.n	8002a1c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f006 fd86 	bl	8009528 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fcbd 	bl	80033ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	3301      	adds	r3, #1
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f47f af2e 	bne.w	80028b0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f004 f8fd 	bl	8006c58 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a68:	d122      	bne.n	8002ab0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d108      	bne.n	8002a9a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a90:	2100      	movs	r1, #0
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fea4 	bl	80037e0 <HAL_PCDEx_LPM_Callback>
 8002a98:	e002      	b.n	8002aa0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f006 fd24 	bl	80094e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f004 f8cf 	bl	8006c58 <USB_ReadInterrupts>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ac4:	d112      	bne.n	8002aec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d102      	bne.n	8002adc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f006 fce0 	bl	800949c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002aea:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f004 f8b1 	bl	8006c58 <USB_ReadInterrupts>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b00:	f040 80b7 	bne.w	8002c72 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2110      	movs	r1, #16
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 f97e 	bl	8005e20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b28:	e046      	b.n	8002bb8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b36:	461a      	mov	r2, r3
 8002b38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b4e:	0151      	lsls	r1, r2, #5
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	440a      	add	r2, r1
 8002b54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b82:	0151      	lsls	r1, r2, #5
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	440a      	add	r2, r1
 8002b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ba2:	0151      	lsls	r1, r2, #5
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	440a      	add	r2, r1
 8002ba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002bb0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	791b      	ldrb	r3, [r3, #4]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d3b2      	bcc.n	8002b2a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bd2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002bd6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7bdb      	ldrb	r3, [r3, #15]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d016      	beq.n	8002c0e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bf0:	f043 030b 	orr.w	r3, r3, #11
 8002bf4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c06:	f043 030b 	orr.w	r3, r3, #11
 8002c0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c0c:	e015      	b.n	8002c3a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c20:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002c24:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c34:	f043 030b 	orr.w	r3, r3, #11
 8002c38:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c48:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c4c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f004 f8bf 	bl	8006de0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 ffee 	bl	8006c58 <USB_ReadInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c86:	d123      	bne.n	8002cd0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f004 f884 	bl	8006d9a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f003 f93b 	bl	8005f12 <USB_GetDevSpeed>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681c      	ldr	r4, [r3, #0]
 8002ca8:	f001 fa0a 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 8002cac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f002 fe3f 	bl	8005938 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f006 fbc5 	bl	800944a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 ffbf 	bl	8006c58 <USB_ReadInterrupts>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d10a      	bne.n	8002cfa <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f006 fba2 	bl	800942e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f002 0208 	and.w	r2, r2, #8
 8002cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 ffaa 	bl	8006c58 <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	2b80      	cmp	r3, #128	@ 0x80
 8002d0c:	d123      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1e:	e014      	b.n	8002d4a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d105      	bne.n	8002d44 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fb0a 	bl	8003358 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	3301      	adds	r3, #1
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	791b      	ldrb	r3, [r3, #4]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d3e4      	bcc.n	8002d20 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 ff7c 	bl	8006c58 <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d6a:	d13c      	bne.n	8002de6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d70:	e02b      	b.n	8002dca <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3318      	adds	r3, #24
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d115      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	da12      	bge.n	8002dc4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3317      	adds	r3, #23
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 faca 	bl	8003358 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	791b      	ldrb	r3, [r3, #4]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d3cd      	bcc.n	8002d72 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 ff34 	bl	8006c58 <USB_ReadInterrupts>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002df6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dfa:	d156      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e00:	e045      	b.n	8002e8e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d12e      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e2a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	da2b      	bge.n	8002e88 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	0c1a      	lsrs	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002e3a:	4053      	eors	r3, r2
 8002e3c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d121      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e84:	6053      	str	r3, [r2, #4]
            break;
 8002e86:	e008      	b.n	8002e9a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	791b      	ldrb	r3, [r3, #4]
 8002e92:	461a      	mov	r2, r3
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d3b3      	bcc.n	8002e02 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 fed2 	bl	8006c58 <USB_ReadInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f006 fb43 	bl	800954c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 febc 	bl	8006c58 <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d115      	bne.n	8002f16 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f006 fb33 	bl	8009568 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	e000      	b.n	8002f16 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002f14:	bf00      	nop
    }
  }
}
 8002f16:	3734      	adds	r7, #52	@ 0x34
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd90      	pop	{r4, r7, pc}

08002f1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_PCD_SetAddress+0x1a>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e012      	b.n	8002f5c <HAL_PCD_SetAddress+0x40>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 fe1b 	bl	8006b88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	4608      	mov	r0, r1
 8002f6e:	4611      	mov	r1, r2
 8002f70:	461a      	mov	r2, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	70fb      	strb	r3, [r7, #3]
 8002f76:	460b      	mov	r3, r1
 8002f78:	803b      	strh	r3, [r7, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	da0f      	bge.n	8002faa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	f003 020f 	and.w	r2, r3, #15
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	3310      	adds	r3, #16
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	705a      	strb	r2, [r3, #1]
 8002fa8:	e00f      	b.n	8002fca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	f003 020f 	and.w	r2, r3, #15
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002fd6:	883b      	ldrh	r3, [r7, #0]
 8002fd8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	78ba      	ldrb	r2, [r7, #2]
 8002fe4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	785b      	ldrb	r3, [r3, #1]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d004      	beq.n	8002ff8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ff8:	78bb      	ldrb	r3, [r7, #2]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d102      	bne.n	8003004 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_PCD_EP_Open+0xae>
 800300e:	2302      	movs	r3, #2
 8003010:	e00e      	b.n	8003030 <HAL_PCD_EP_Open+0xcc>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68f9      	ldr	r1, [r7, #12]
 8003020:	4618      	mov	r0, r3
 8003022:	f002 ff9b 	bl	8005f5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800302e:	7afb      	ldrb	r3, [r7, #11]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003048:	2b00      	cmp	r3, #0
 800304a:	da0f      	bge.n	800306c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	f003 020f 	and.w	r2, r3, #15
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	3310      	adds	r3, #16
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	3304      	adds	r3, #4
 8003062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	705a      	strb	r2, [r3, #1]
 800306a:	e00f      	b.n	800308c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	f003 020f 	and.w	r2, r3, #15
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	3304      	adds	r3, #4
 8003084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	b2da      	uxtb	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_PCD_EP_Close+0x6e>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e00e      	b.n	80030c4 <HAL_PCD_EP_Close+0x8c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f002 ffd9 	bl	800606c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	460b      	mov	r3, r1
 80030da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030dc:	7afb      	ldrb	r3, [r7, #11]
 80030de:	f003 020f 	and.w	r2, r3, #15
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	3304      	adds	r3, #4
 80030f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2200      	movs	r2, #0
 800310c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800310e:	7afb      	ldrb	r3, [r7, #11]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	b2da      	uxtb	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	799b      	ldrb	r3, [r3, #6]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d102      	bne.n	8003128 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	799b      	ldrb	r3, [r3, #6]
 8003130:	461a      	mov	r2, r3
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	f003 f876 	bl	8006224 <USB_EPStartXfer>

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	f003 020f 	and.w	r2, r3, #15
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003164:	681b      	ldr	r3, [r3, #0]
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	460b      	mov	r3, r1
 8003180:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003182:	7afb      	ldrb	r3, [r7, #11]
 8003184:	f003 020f 	and.w	r2, r3, #15
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	3310      	adds	r3, #16
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	3304      	adds	r3, #4
 8003198:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2200      	movs	r2, #0
 80031aa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2201      	movs	r2, #1
 80031b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b2:	7afb      	ldrb	r3, [r7, #11]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	799b      	ldrb	r3, [r3, #6]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d102      	bne.n	80031cc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	799b      	ldrb	r3, [r3, #6]
 80031d4:	461a      	mov	r2, r3
 80031d6:	6979      	ldr	r1, [r7, #20]
 80031d8:	f003 f824 	bl	8006224 <USB_EPStartXfer>

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	460b      	mov	r3, r1
 80031f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	7912      	ldrb	r2, [r2, #4]
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e04f      	b.n	80032a4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003208:	2b00      	cmp	r3, #0
 800320a:	da0f      	bge.n	800322c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	f003 020f 	and.w	r2, r3, #15
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	3310      	adds	r3, #16
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	3304      	adds	r3, #4
 8003222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	705a      	strb	r2, [r3, #1]
 800322a:	e00d      	b.n	8003248 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	3304      	adds	r3, #4
 8003240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_PCD_EP_SetStall+0x82>
 8003264:	2302      	movs	r3, #2
 8003266:	e01d      	b.n	80032a4 <HAL_PCD_EP_SetStall+0xbe>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	4618      	mov	r0, r3
 8003278:	f003 fbb2 	bl	80069e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	7999      	ldrb	r1, [r3, #6]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003294:	461a      	mov	r2, r3
 8003296:	f003 fda3 	bl	8006de0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	7912      	ldrb	r2, [r2, #4]
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e042      	b.n	8003350 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	da0f      	bge.n	80032f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	f003 020f 	and.w	r2, r3, #15
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	3310      	adds	r3, #16
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	3304      	adds	r3, #4
 80032e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	705a      	strb	r2, [r3, #1]
 80032f0:	e00f      	b.n	8003312 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	f003 020f 	and.w	r2, r3, #15
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	3304      	adds	r3, #4
 800330a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_PCD_EP_ClrStall+0x86>
 800332e:	2302      	movs	r3, #2
 8003330:	e00e      	b.n	8003350 <HAL_PCD_EP_ClrStall+0xa4>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	4618      	mov	r0, r3
 8003342:	f003 fbbb 	bl	8006abc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003368:	2b00      	cmp	r3, #0
 800336a:	da0c      	bge.n	8003386 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	f003 020f 	and.w	r2, r3, #15
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	3310      	adds	r3, #16
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	3304      	adds	r3, #4
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e00c      	b.n	80033a0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 020f 	and.w	r2, r3, #15
 800338c:	4613      	mov	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	3304      	adds	r3, #4
 800339e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68f9      	ldr	r1, [r7, #12]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f003 f9da 	bl	8006760 <USB_EPStopXfer>
 80033ac:	4603      	mov	r3, r0
 80033ae:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033b0:	7afb      	ldrb	r3, [r7, #11]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b08a      	sub	sp, #40	@ 0x28
 80033be:	af02      	add	r7, sp, #8
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	4613      	mov	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	3310      	adds	r3, #16
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	3304      	adds	r3, #4
 80033e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d901      	bls.n	80033f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e06b      	b.n	80034ca <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	429a      	cmp	r2, r3
 8003406:	d902      	bls.n	800340e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3303      	adds	r3, #3
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003416:	e02a      	b.n	800346e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	429a      	cmp	r2, r3
 800342c:	d902      	bls.n	8003434 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	3303      	adds	r3, #3
 8003438:	089b      	lsrs	r3, r3, #2
 800343a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	68d9      	ldr	r1, [r3, #12]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	4603      	mov	r3, r0
 8003450:	6978      	ldr	r0, [r7, #20]
 8003452:	f003 fa2f 	bl	80068b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	441a      	add	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	695a      	ldr	r2, [r3, #20]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	441a      	add	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4413      	add	r3, r2
 8003476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	429a      	cmp	r2, r3
 8003482:	d809      	bhi.n	8003498 <PCD_WriteEmptyTxFifo+0xde>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800348c:	429a      	cmp	r2, r3
 800348e:	d203      	bcs.n	8003498 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1bf      	bne.n	8003418 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d811      	bhi.n	80034c8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	2201      	movs	r2, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	43db      	mvns	r3, r3
 80034be:	6939      	ldr	r1, [r7, #16]
 80034c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034c4:	4013      	ands	r3, r2
 80034c6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	333c      	adds	r3, #60	@ 0x3c
 80034ec:	3304      	adds	r3, #4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	799b      	ldrb	r3, [r3, #6]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d17b      	bne.n	8003602 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d015      	beq.n	8003540 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	4a61      	ldr	r2, [pc, #388]	@ (800369c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	f240 80b9 	bls.w	8003690 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80b3 	beq.w	8003690 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003536:	461a      	mov	r2, r3
 8003538:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800353c:	6093      	str	r3, [r2, #8]
 800353e:	e0a7      	b.n	8003690 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003556:	461a      	mov	r2, r3
 8003558:	2320      	movs	r3, #32
 800355a:	6093      	str	r3, [r2, #8]
 800355c:	e098      	b.n	8003690 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	f040 8093 	bne.w	8003690 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	4a4b      	ldr	r2, [pc, #300]	@ (800369c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d90f      	bls.n	8003592 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003588:	461a      	mov	r2, r3
 800358a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800358e:	6093      	str	r3, [r2, #8]
 8003590:	e07e      	b.n	8003690 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	3304      	adds	r3, #4
 80035a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1a      	ldr	r2, [r3, #32]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	0159      	lsls	r1, r3, #5
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	440b      	add	r3, r1
 80035b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035be:	1ad2      	subs	r2, r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d114      	bne.n	80035f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035dc:	461a      	mov	r2, r3
 80035de:	2101      	movs	r1, #1
 80035e0:	f003 fbfe 	bl	8006de0 <USB_EP0_OutStart>
 80035e4:	e006      	b.n	80035f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	441a      	add	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	4619      	mov	r1, r3
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f005 fee2 	bl	80093c4 <HAL_PCD_DataOutStageCallback>
 8003600:	e046      	b.n	8003690 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	4a26      	ldr	r2, [pc, #152]	@ (80036a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d124      	bne.n	8003654 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003620:	461a      	mov	r2, r3
 8003622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003626:	6093      	str	r3, [r2, #8]
 8003628:	e032      	b.n	8003690 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003640:	461a      	mov	r2, r3
 8003642:	2320      	movs	r3, #32
 8003644:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	4619      	mov	r1, r3
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f005 feb9 	bl	80093c4 <HAL_PCD_DataOutStageCallback>
 8003652:	e01d      	b.n	8003690 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d114      	bne.n	8003684 <PCD_EP_OutXfrComplete_int+0x1b0>
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d108      	bne.n	8003684 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800367c:	461a      	mov	r2, r3
 800367e:	2100      	movs	r1, #0
 8003680:	f003 fbae 	bl	8006de0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	4619      	mov	r1, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f005 fe9a 	bl	80093c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3720      	adds	r7, #32
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	4f54300a 	.word	0x4f54300a
 80036a0:	4f54310a 	.word	0x4f54310a

080036a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	333c      	adds	r3, #60	@ 0x3c
 80036bc:	3304      	adds	r3, #4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4a15      	ldr	r2, [pc, #84]	@ (800372c <PCD_EP_OutSetupPacket_int+0x88>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d90e      	bls.n	80036f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036f0:	461a      	mov	r2, r3
 80036f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f005 fe51 	bl	80093a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4a0a      	ldr	r2, [pc, #40]	@ (800372c <PCD_EP_OutSetupPacket_int+0x88>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d90c      	bls.n	8003720 <PCD_EP_OutSetupPacket_int+0x7c>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	799b      	ldrb	r3, [r3, #6]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d108      	bne.n	8003720 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003718:	461a      	mov	r2, r3
 800371a:	2101      	movs	r1, #1
 800371c:	f003 fb60 	bl	8006de0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	4f54300a 	.word	0x4f54300a

08003730 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	70fb      	strb	r3, [r7, #3]
 800373c:	4613      	mov	r3, r2
 800373e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d107      	bne.n	800375e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800374e:	883b      	ldrh	r3, [r7, #0]
 8003750:	0419      	lsls	r1, r3, #16
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	430a      	orrs	r2, r1
 800375a:	629a      	str	r2, [r3, #40]	@ 0x28
 800375c:	e028      	b.n	80037b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	4413      	add	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]
 8003770:	e00d      	b.n	800378e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	3340      	adds	r3, #64	@ 0x40
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4413      	add	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	3301      	adds	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	7bfa      	ldrb	r2, [r7, #15]
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	3b01      	subs	r3, #1
 8003794:	429a      	cmp	r2, r3
 8003796:	d3ec      	bcc.n	8003772 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003798:	883b      	ldrh	r3, [r7, #0]
 800379a:	0418      	lsls	r0, r3, #16
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6819      	ldr	r1, [r3, #0]
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	4302      	orrs	r2, r0
 80037a8:	3340      	adds	r3, #64	@ 0x40
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e267      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d075      	beq.n	8003902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003816:	4b88      	ldr	r3, [pc, #544]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b04      	cmp	r3, #4
 8003820:	d00c      	beq.n	800383c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003822:	4b85      	ldr	r3, [pc, #532]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800382a:	2b08      	cmp	r3, #8
 800382c:	d112      	bne.n	8003854 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382e:	4b82      	ldr	r3, [pc, #520]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003836:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800383a:	d10b      	bne.n	8003854 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d05b      	beq.n	8003900 <HAL_RCC_OscConfig+0x108>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d157      	bne.n	8003900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e242      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800385c:	d106      	bne.n	800386c <HAL_RCC_OscConfig+0x74>
 800385e:	4b76      	ldr	r3, [pc, #472]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a75      	ldr	r2, [pc, #468]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e01d      	b.n	80038a8 <HAL_RCC_OscConfig+0xb0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0x98>
 8003876:	4b70      	ldr	r3, [pc, #448]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a6f      	ldr	r2, [pc, #444]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 800387c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b6d      	ldr	r3, [pc, #436]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a6c      	ldr	r2, [pc, #432]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e00b      	b.n	80038a8 <HAL_RCC_OscConfig+0xb0>
 8003890:	4b69      	ldr	r3, [pc, #420]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a68      	ldr	r2, [pc, #416]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b66      	ldr	r3, [pc, #408]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a65      	ldr	r2, [pc, #404]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe f91a 	bl	8001ae8 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b8:	f7fe f916 	bl	8001ae8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	@ 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e207      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0xc0>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7fe f906 	bl	8001ae8 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fe f902 	bl	8001ae8 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	@ 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e1f3      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f2:	4b51      	ldr	r3, [pc, #324]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0xe8>
 80038fe:	e000      	b.n	8003902 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d063      	beq.n	80039d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800390e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391a:	4b47      	ldr	r3, [pc, #284]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003922:	2b08      	cmp	r3, #8
 8003924:	d11c      	bne.n	8003960 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003926:	4b44      	ldr	r3, [pc, #272]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d116      	bne.n	8003960 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003932:	4b41      	ldr	r3, [pc, #260]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_RCC_OscConfig+0x152>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d001      	beq.n	800394a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e1c7      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4937      	ldr	r1, [pc, #220]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395e:	e03a      	b.n	80039d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d020      	beq.n	80039aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003968:	4b34      	ldr	r3, [pc, #208]	@ (8003a3c <HAL_RCC_OscConfig+0x244>)
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fe f8bb 	bl	8001ae8 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003976:	f7fe f8b7 	bl	8001ae8 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e1a8      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003988:	4b2b      	ldr	r3, [pc, #172]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003994:	4b28      	ldr	r3, [pc, #160]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4925      	ldr	r1, [pc, #148]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]
 80039a8:	e015      	b.n	80039d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039aa:	4b24      	ldr	r3, [pc, #144]	@ (8003a3c <HAL_RCC_OscConfig+0x244>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe f89a 	bl	8001ae8 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b8:	f7fe f896 	bl	8001ae8 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e187      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d036      	beq.n	8003a50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ea:	4b15      	ldr	r3, [pc, #84]	@ (8003a40 <HAL_RCC_OscConfig+0x248>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f0:	f7fe f87a 	bl	8001ae8 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f8:	f7fe f876 	bl	8001ae8 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e167      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x200>
 8003a16:	e01b      	b.n	8003a50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a18:	4b09      	ldr	r3, [pc, #36]	@ (8003a40 <HAL_RCC_OscConfig+0x248>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1e:	f7fe f863 	bl	8001ae8 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a24:	e00e      	b.n	8003a44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a26:	f7fe f85f 	bl	8001ae8 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d907      	bls.n	8003a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e150      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	42470000 	.word	0x42470000
 8003a40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a44:	4b88      	ldr	r3, [pc, #544]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ea      	bne.n	8003a26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8097 	beq.w	8003b8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a62:	4b81      	ldr	r3, [pc, #516]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	4b7d      	ldr	r3, [pc, #500]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	4a7c      	ldr	r2, [pc, #496]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a7e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8e:	4b77      	ldr	r3, [pc, #476]	@ (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d118      	bne.n	8003acc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a9a:	4b74      	ldr	r3, [pc, #464]	@ (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a73      	ldr	r2, [pc, #460]	@ (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa6:	f7fe f81f 	bl	8001ae8 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aae:	f7fe f81b 	bl	8001ae8 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e10c      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d106      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x2ea>
 8003ad4:	4b64      	ldr	r3, [pc, #400]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad8:	4a63      	ldr	r2, [pc, #396]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae0:	e01c      	b.n	8003b1c <HAL_RCC_OscConfig+0x324>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b05      	cmp	r3, #5
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x30c>
 8003aea:	4b5f      	ldr	r3, [pc, #380]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aee:	4a5e      	ldr	r2, [pc, #376]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003af0:	f043 0304 	orr.w	r3, r3, #4
 8003af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afa:	4a5b      	ldr	r2, [pc, #364]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b02:	e00b      	b.n	8003b1c <HAL_RCC_OscConfig+0x324>
 8003b04:	4b58      	ldr	r3, [pc, #352]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b08:	4a57      	ldr	r2, [pc, #348]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b10:	4b55      	ldr	r3, [pc, #340]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b14:	4a54      	ldr	r2, [pc, #336]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b16:	f023 0304 	bic.w	r3, r3, #4
 8003b1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d015      	beq.n	8003b50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fd ffe0 	bl	8001ae8 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2c:	f7fd ffdc 	bl	8001ae8 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e0cb      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b42:	4b49      	ldr	r3, [pc, #292]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0ee      	beq.n	8003b2c <HAL_RCC_OscConfig+0x334>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b50:	f7fd ffca 	bl	8001ae8 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b58:	f7fd ffc6 	bl	8001ae8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e0b5      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1ee      	bne.n	8003b58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b80:	4b39      	ldr	r3, [pc, #228]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	4a38      	ldr	r2, [pc, #224]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80a1 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b96:	4b34      	ldr	r3, [pc, #208]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d05c      	beq.n	8003c5c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d141      	bne.n	8003c2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003baa:	4b31      	ldr	r3, [pc, #196]	@ (8003c70 <HAL_RCC_OscConfig+0x478>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7fd ff9a 	bl	8001ae8 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fd ff96 	bl	8001ae8 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e087      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	4b27      	ldr	r3, [pc, #156]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be4:	019b      	lsls	r3, r3, #6
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf8:	061b      	lsls	r3, r3, #24
 8003bfa:	491b      	ldr	r1, [pc, #108]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c00:	4b1b      	ldr	r3, [pc, #108]	@ (8003c70 <HAL_RCC_OscConfig+0x478>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fd ff6f 	bl	8001ae8 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fd ff6b 	bl	8001ae8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e05c      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c20:	4b11      	ldr	r3, [pc, #68]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x416>
 8003c2c:	e054      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2e:	4b10      	ldr	r3, [pc, #64]	@ (8003c70 <HAL_RCC_OscConfig+0x478>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fd ff58 	bl	8001ae8 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fd ff54 	bl	8001ae8 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e045      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x444>
 8003c5a:	e03d      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e038      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40007000 	.word	0x40007000
 8003c70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce4 <HAL_RCC_OscConfig+0x4ec>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d028      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d121      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d11a      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003caa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d111      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0cc      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cfc:	4b68      	ldr	r3, [pc, #416]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d90c      	bls.n	8003d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0a:	4b65      	ldr	r3, [pc, #404]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d12:	4b63      	ldr	r3, [pc, #396]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0b8      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d020      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d3c:	4b59      	ldr	r3, [pc, #356]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a58      	ldr	r2, [pc, #352]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d54:	4b53      	ldr	r3, [pc, #332]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4a52      	ldr	r2, [pc, #328]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d60:	4b50      	ldr	r3, [pc, #320]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	494d      	ldr	r1, [pc, #308]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d044      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	4b47      	ldr	r3, [pc, #284]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d119      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e07f      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d107      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e06f      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e067      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dc6:	4b37      	ldr	r3, [pc, #220]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f023 0203 	bic.w	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4934      	ldr	r1, [pc, #208]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dd8:	f7fd fe86 	bl	8001ae8 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de0:	f7fd fe82 	bl	8001ae8 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e04f      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df6:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 020c 	and.w	r2, r3, #12
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d1eb      	bne.n	8003de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e08:	4b25      	ldr	r3, [pc, #148]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d20c      	bcs.n	8003e30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b22      	ldr	r3, [pc, #136]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e032      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4916      	ldr	r1, [pc, #88]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d009      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e5a:	4b12      	ldr	r3, [pc, #72]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	490e      	ldr	r1, [pc, #56]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e6e:	f000 f821 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 8003e72:	4602      	mov	r2, r0
 8003e74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	490a      	ldr	r1, [pc, #40]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e80:	5ccb      	ldrb	r3, [r1, r3]
 8003e82:	fa22 f303 	lsr.w	r3, r2, r3
 8003e86:	4a09      	ldr	r2, [pc, #36]	@ (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e8a:	4b09      	ldr	r3, [pc, #36]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fd fde6 	bl	8001a60 <HAL_InitTick>

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023c00 	.word	0x40023c00
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	0800e100 	.word	0x0800e100
 8003eac:	20000000 	.word	0x20000000
 8003eb0:	20000004 	.word	0x20000004

08003eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb8:	b094      	sub	sp, #80	@ 0x50
 8003eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ecc:	4b79      	ldr	r3, [pc, #484]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d00d      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	f200 80e1 	bhi.w	80040a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d003      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x3a>
 8003ee6:	e0db      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4b73      	ldr	r3, [pc, #460]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eec:	e0db      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eee:	4b73      	ldr	r3, [pc, #460]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x208>)
 8003ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ef2:	e0d8      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef4:	4b6f      	ldr	r3, [pc, #444]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003efc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efe:	4b6d      	ldr	r3, [pc, #436]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d063      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0a:	4b6a      	ldr	r3, [pc, #424]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	099b      	lsrs	r3, r3, #6
 8003f10:	2200      	movs	r2, #0
 8003f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f1e:	2300      	movs	r3, #0
 8003f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f26:	4622      	mov	r2, r4
 8003f28:	462b      	mov	r3, r5
 8003f2a:	f04f 0000 	mov.w	r0, #0
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	0159      	lsls	r1, r3, #5
 8003f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f38:	0150      	lsls	r0, r2, #5
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4621      	mov	r1, r4
 8003f40:	1a51      	subs	r1, r2, r1
 8003f42:	6139      	str	r1, [r7, #16]
 8003f44:	4629      	mov	r1, r5
 8003f46:	eb63 0301 	sbc.w	r3, r3, r1
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f58:	4659      	mov	r1, fp
 8003f5a:	018b      	lsls	r3, r1, #6
 8003f5c:	4651      	mov	r1, sl
 8003f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f62:	4651      	mov	r1, sl
 8003f64:	018a      	lsls	r2, r1, #6
 8003f66:	4651      	mov	r1, sl
 8003f68:	ebb2 0801 	subs.w	r8, r2, r1
 8003f6c:	4659      	mov	r1, fp
 8003f6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f86:	4690      	mov	r8, r2
 8003f88:	4699      	mov	r9, r3
 8003f8a:	4623      	mov	r3, r4
 8003f8c:	eb18 0303 	adds.w	r3, r8, r3
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	462b      	mov	r3, r5
 8003f94:	eb49 0303 	adc.w	r3, r9, r3
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	024b      	lsls	r3, r1, #9
 8003faa:	4621      	mov	r1, r4
 8003fac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	024a      	lsls	r2, r1, #9
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fba:	2200      	movs	r2, #0
 8003fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fc4:	f7fc fe60 	bl	8000c88 <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4613      	mov	r3, r2
 8003fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fd0:	e058      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd2:	4b38      	ldr	r3, [pc, #224]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	099b      	lsrs	r3, r3, #6
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	4611      	mov	r1, r2
 8003fde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fe2:	623b      	str	r3, [r7, #32]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fec:	4642      	mov	r2, r8
 8003fee:	464b      	mov	r3, r9
 8003ff0:	f04f 0000 	mov.w	r0, #0
 8003ff4:	f04f 0100 	mov.w	r1, #0
 8003ff8:	0159      	lsls	r1, r3, #5
 8003ffa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ffe:	0150      	lsls	r0, r2, #5
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4641      	mov	r1, r8
 8004006:	ebb2 0a01 	subs.w	sl, r2, r1
 800400a:	4649      	mov	r1, r9
 800400c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800401c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004020:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004024:	ebb2 040a 	subs.w	r4, r2, sl
 8004028:	eb63 050b 	sbc.w	r5, r3, fp
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	00eb      	lsls	r3, r5, #3
 8004036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800403a:	00e2      	lsls	r2, r4, #3
 800403c:	4614      	mov	r4, r2
 800403e:	461d      	mov	r5, r3
 8004040:	4643      	mov	r3, r8
 8004042:	18e3      	adds	r3, r4, r3
 8004044:	603b      	str	r3, [r7, #0]
 8004046:	464b      	mov	r3, r9
 8004048:	eb45 0303 	adc.w	r3, r5, r3
 800404c:	607b      	str	r3, [r7, #4]
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	e9d7 4500 	ldrd	r4, r5, [r7]
 800405a:	4629      	mov	r1, r5
 800405c:	028b      	lsls	r3, r1, #10
 800405e:	4621      	mov	r1, r4
 8004060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004064:	4621      	mov	r1, r4
 8004066:	028a      	lsls	r2, r1, #10
 8004068:	4610      	mov	r0, r2
 800406a:	4619      	mov	r1, r3
 800406c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800406e:	2200      	movs	r2, #0
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	61fa      	str	r2, [r7, #28]
 8004074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004078:	f7fc fe06 	bl	8000c88 <__aeabi_uldivmod>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4613      	mov	r3, r2
 8004082:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004084:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	3301      	adds	r3, #1
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004094:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800409e:	e002      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80040a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3750      	adds	r7, #80	@ 0x50
 80040ac:	46bd      	mov	sp, r7
 80040ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800
 80040b8:	00f42400 	.word	0x00f42400
 80040bc:	007a1200 	.word	0x007a1200

080040c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c4:	4b03      	ldr	r3, [pc, #12]	@ (80040d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	20000000 	.word	0x20000000

080040d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040dc:	f7ff fff0 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	0a9b      	lsrs	r3, r3, #10
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	4903      	ldr	r1, [pc, #12]	@ (80040fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40023800 	.word	0x40023800
 80040fc:	0800e110 	.word	0x0800e110

08004100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004104:	f7ff ffdc 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	0b5b      	lsrs	r3, r3, #13
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4903      	ldr	r1, [pc, #12]	@ (8004124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40023800 	.word	0x40023800
 8004124:	0800e110 	.word	0x0800e110

08004128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e041      	b.n	80041be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fd fa9c 	bl	800168c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	4619      	mov	r1, r3
 8004166:	4610      	mov	r0, r2
 8004168:	f000 fa80 	bl	800466c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d001      	beq.n	80041e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e046      	b.n	800426e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a23      	ldr	r2, [pc, #140]	@ (800427c <HAL_TIM_Base_Start+0xb4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d022      	beq.n	8004238 <HAL_TIM_Base_Start+0x70>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041fa:	d01d      	beq.n	8004238 <HAL_TIM_Base_Start+0x70>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1f      	ldr	r2, [pc, #124]	@ (8004280 <HAL_TIM_Base_Start+0xb8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d018      	beq.n	8004238 <HAL_TIM_Base_Start+0x70>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1e      	ldr	r2, [pc, #120]	@ (8004284 <HAL_TIM_Base_Start+0xbc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d013      	beq.n	8004238 <HAL_TIM_Base_Start+0x70>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1c      	ldr	r2, [pc, #112]	@ (8004288 <HAL_TIM_Base_Start+0xc0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00e      	beq.n	8004238 <HAL_TIM_Base_Start+0x70>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1b      	ldr	r2, [pc, #108]	@ (800428c <HAL_TIM_Base_Start+0xc4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d009      	beq.n	8004238 <HAL_TIM_Base_Start+0x70>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a19      	ldr	r2, [pc, #100]	@ (8004290 <HAL_TIM_Base_Start+0xc8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d004      	beq.n	8004238 <HAL_TIM_Base_Start+0x70>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a18      	ldr	r2, [pc, #96]	@ (8004294 <HAL_TIM_Base_Start+0xcc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d111      	bne.n	800425c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b06      	cmp	r3, #6
 8004248:	d010      	beq.n	800426c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425a:	e007      	b.n	800426c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40010000 	.word	0x40010000
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40010400 	.word	0x40010400
 8004290:	40014000 	.word	0x40014000
 8004294:	40001800 	.word	0x40001800

08004298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d020      	beq.n	80042fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01b      	beq.n	80042fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0202 	mvn.w	r2, #2
 80042cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f9a3 	bl	800462e <HAL_TIM_IC_CaptureCallback>
 80042e8:	e005      	b.n	80042f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f995 	bl	800461a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f9a6 	bl	8004642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d020      	beq.n	8004348 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01b      	beq.n	8004348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0204 	mvn.w	r2, #4
 8004318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f97d 	bl	800462e <HAL_TIM_IC_CaptureCallback>
 8004334:	e005      	b.n	8004342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f96f 	bl	800461a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f980 	bl	8004642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d020      	beq.n	8004394 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01b      	beq.n	8004394 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0208 	mvn.w	r2, #8
 8004364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2204      	movs	r2, #4
 800436a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f957 	bl	800462e <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f949 	bl	800461a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f95a 	bl	8004642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b00      	cmp	r3, #0
 800439c:	d020      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01b      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0210 	mvn.w	r2, #16
 80043b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2208      	movs	r2, #8
 80043b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f931 	bl	800462e <HAL_TIM_IC_CaptureCallback>
 80043cc:	e005      	b.n	80043da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f923 	bl	800461a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f934 	bl	8004642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00c      	beq.n	8004404 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d007      	beq.n	8004404 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0201 	mvn.w	r2, #1
 80043fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f901 	bl	8004606 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00c      	beq.n	8004428 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fae8 	bl	80049f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00c      	beq.n	800444c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f905 	bl	8004656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00c      	beq.n	8004470 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d007      	beq.n	8004470 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0220 	mvn.w	r2, #32
 8004468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 faba 	bl	80049e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_TIM_ConfigClockSource+0x1c>
 8004490:	2302      	movs	r3, #2
 8004492:	e0b4      	b.n	80045fe <HAL_TIM_ConfigClockSource+0x186>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044cc:	d03e      	beq.n	800454c <HAL_TIM_ConfigClockSource+0xd4>
 80044ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044d2:	f200 8087 	bhi.w	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044da:	f000 8086 	beq.w	80045ea <HAL_TIM_ConfigClockSource+0x172>
 80044de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044e2:	d87f      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 80044e4:	2b70      	cmp	r3, #112	@ 0x70
 80044e6:	d01a      	beq.n	800451e <HAL_TIM_ConfigClockSource+0xa6>
 80044e8:	2b70      	cmp	r3, #112	@ 0x70
 80044ea:	d87b      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 80044ec:	2b60      	cmp	r3, #96	@ 0x60
 80044ee:	d050      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x11a>
 80044f0:	2b60      	cmp	r3, #96	@ 0x60
 80044f2:	d877      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 80044f4:	2b50      	cmp	r3, #80	@ 0x50
 80044f6:	d03c      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0xfa>
 80044f8:	2b50      	cmp	r3, #80	@ 0x50
 80044fa:	d873      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 80044fc:	2b40      	cmp	r3, #64	@ 0x40
 80044fe:	d058      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004500:	2b40      	cmp	r3, #64	@ 0x40
 8004502:	d86f      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004504:	2b30      	cmp	r3, #48	@ 0x30
 8004506:	d064      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004508:	2b30      	cmp	r3, #48	@ 0x30
 800450a:	d86b      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 800450c:	2b20      	cmp	r3, #32
 800450e:	d060      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004510:	2b20      	cmp	r3, #32
 8004512:	d867      	bhi.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d05c      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004518:	2b10      	cmp	r3, #16
 800451a:	d05a      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x15a>
 800451c:	e062      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800452e:	f000 f9bd 	bl	80048ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004540:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	609a      	str	r2, [r3, #8]
      break;
 800454a:	e04f      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800455c:	f000 f9a6 	bl	80048ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800456e:	609a      	str	r2, [r3, #8]
      break;
 8004570:	e03c      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800457e:	461a      	mov	r2, r3
 8004580:	f000 f91a 	bl	80047b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2150      	movs	r1, #80	@ 0x50
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f973 	bl	8004876 <TIM_ITRx_SetConfig>
      break;
 8004590:	e02c      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800459e:	461a      	mov	r2, r3
 80045a0:	f000 f939 	bl	8004816 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2160      	movs	r1, #96	@ 0x60
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f963 	bl	8004876 <TIM_ITRx_SetConfig>
      break;
 80045b0:	e01c      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045be:	461a      	mov	r2, r3
 80045c0:	f000 f8fa 	bl	80047b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2140      	movs	r1, #64	@ 0x40
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 f953 	bl	8004876 <TIM_ITRx_SetConfig>
      break;
 80045d0:	e00c      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4619      	mov	r1, r3
 80045dc:	4610      	mov	r0, r2
 80045de:	f000 f94a 	bl	8004876 <TIM_ITRx_SetConfig>
      break;
 80045e2:	e003      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
      break;
 80045e8:	e000      	b.n	80045ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a43      	ldr	r2, [pc, #268]	@ (800478c <TIM_Base_SetConfig+0x120>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d013      	beq.n	80046ac <TIM_Base_SetConfig+0x40>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800468a:	d00f      	beq.n	80046ac <TIM_Base_SetConfig+0x40>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a40      	ldr	r2, [pc, #256]	@ (8004790 <TIM_Base_SetConfig+0x124>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00b      	beq.n	80046ac <TIM_Base_SetConfig+0x40>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a3f      	ldr	r2, [pc, #252]	@ (8004794 <TIM_Base_SetConfig+0x128>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d007      	beq.n	80046ac <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a3e      	ldr	r2, [pc, #248]	@ (8004798 <TIM_Base_SetConfig+0x12c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a3d      	ldr	r2, [pc, #244]	@ (800479c <TIM_Base_SetConfig+0x130>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d108      	bne.n	80046be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a32      	ldr	r2, [pc, #200]	@ (800478c <TIM_Base_SetConfig+0x120>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d02b      	beq.n	800471e <TIM_Base_SetConfig+0xb2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046cc:	d027      	beq.n	800471e <TIM_Base_SetConfig+0xb2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004790 <TIM_Base_SetConfig+0x124>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d023      	beq.n	800471e <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004794 <TIM_Base_SetConfig+0x128>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d01f      	beq.n	800471e <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004798 <TIM_Base_SetConfig+0x12c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01b      	beq.n	800471e <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2c      	ldr	r2, [pc, #176]	@ (800479c <TIM_Base_SetConfig+0x130>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d017      	beq.n	800471e <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a2b      	ldr	r2, [pc, #172]	@ (80047a0 <TIM_Base_SetConfig+0x134>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a2a      	ldr	r2, [pc, #168]	@ (80047a4 <TIM_Base_SetConfig+0x138>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00f      	beq.n	800471e <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a29      	ldr	r2, [pc, #164]	@ (80047a8 <TIM_Base_SetConfig+0x13c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00b      	beq.n	800471e <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a28      	ldr	r2, [pc, #160]	@ (80047ac <TIM_Base_SetConfig+0x140>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d007      	beq.n	800471e <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a27      	ldr	r2, [pc, #156]	@ (80047b0 <TIM_Base_SetConfig+0x144>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d003      	beq.n	800471e <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a26      	ldr	r2, [pc, #152]	@ (80047b4 <TIM_Base_SetConfig+0x148>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d108      	bne.n	8004730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a0e      	ldr	r2, [pc, #56]	@ (800478c <TIM_Base_SetConfig+0x120>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <TIM_Base_SetConfig+0xf2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a10      	ldr	r2, [pc, #64]	@ (800479c <TIM_Base_SetConfig+0x130>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d103      	bne.n	8004766 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f043 0204 	orr.w	r2, r3, #4
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	601a      	str	r2, [r3, #0]
}
 800477e:	bf00      	nop
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40010000 	.word	0x40010000
 8004790:	40000400 	.word	0x40000400
 8004794:	40000800 	.word	0x40000800
 8004798:	40000c00 	.word	0x40000c00
 800479c:	40010400 	.word	0x40010400
 80047a0:	40014000 	.word	0x40014000
 80047a4:	40014400 	.word	0x40014400
 80047a8:	40014800 	.word	0x40014800
 80047ac:	40001800 	.word	0x40001800
 80047b0:	40001c00 	.word	0x40001c00
 80047b4:	40002000 	.word	0x40002000

080047b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f023 0201 	bic.w	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f023 030a 	bic.w	r3, r3, #10
 80047f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004816:	b480      	push	{r7}
 8004818:	b087      	sub	sp, #28
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f023 0210 	bic.w	r2, r3, #16
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004840:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	031b      	lsls	r3, r3, #12
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004852:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	621a      	str	r2, [r3, #32]
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800488c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	f043 0307 	orr.w	r3, r3, #7
 8004898:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	609a      	str	r2, [r3, #8]
}
 80048a0:	bf00      	nop
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	021a      	lsls	r2, r3, #8
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	609a      	str	r2, [r3, #8]
}
 80048e0:	bf00      	nop
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004900:	2302      	movs	r3, #2
 8004902:	e05a      	b.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800492a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a21      	ldr	r2, [pc, #132]	@ (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d022      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004950:	d01d      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1d      	ldr	r2, [pc, #116]	@ (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d018      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1b      	ldr	r2, [pc, #108]	@ (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1a      	ldr	r2, [pc, #104]	@ (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00e      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a18      	ldr	r2, [pc, #96]	@ (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d009      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a17      	ldr	r2, [pc, #92]	@ (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a15      	ldr	r2, [pc, #84]	@ (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d10c      	bne.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	4313      	orrs	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40010000 	.word	0x40010000
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800
 80049d4:	40000c00 	.word	0x40000c00
 80049d8:	40010400 	.word	0x40010400
 80049dc:	40014000 	.word	0x40014000
 80049e0:	40001800 	.word	0x40001800

080049e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e042      	b.n	8004aa4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc fe52 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2224      	movs	r2, #36	@ 0x24
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fc99 	bl	8005388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695a      	ldr	r2, [r3, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b0ba      	sub	sp, #232	@ 0xe8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004aea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10f      	bne.n	8004b12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <HAL_UART_IRQHandler+0x66>
 8004afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fb7e 	bl	800520c <UART_Receive_IT>
      return;
 8004b10:	e273      	b.n	8004ffa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 80de 	beq.w	8004cd8 <HAL_UART_IRQHandler+0x22c>
 8004b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d106      	bne.n	8004b36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80d1 	beq.w	8004cd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_UART_IRQHandler+0xae>
 8004b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d005      	beq.n	8004b5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	f043 0201 	orr.w	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <HAL_UART_IRQHandler+0xd2>
 8004b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b76:	f043 0202 	orr.w	r2, r3, #2
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_UART_IRQHandler+0xf6>
 8004b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9a:	f043 0204 	orr.w	r2, r3, #4
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d011      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x126>
 8004bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bca:	f043 0208 	orr.w	r2, r3, #8
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 820a 	beq.w	8004ff0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_UART_IRQHandler+0x14e>
 8004be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fb09 	bl	800520c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c04:	2b40      	cmp	r3, #64	@ 0x40
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d103      	bne.n	8004c26 <HAL_UART_IRQHandler+0x17a>
 8004c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d04f      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fa14 	bl	8005054 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c36:	2b40      	cmp	r3, #64	@ 0x40
 8004c38:	d141      	bne.n	8004cbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3314      	adds	r3, #20
 8004c40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3314      	adds	r3, #20
 8004c62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1d9      	bne.n	8004c3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d013      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c92:	4a8a      	ldr	r2, [pc, #552]	@ (8004ebc <HAL_UART_IRQHandler+0x410>)
 8004c94:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fd f950 	bl	8001f40 <HAL_DMA_Abort_IT>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d016      	beq.n	8004cd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb4:	e00e      	b.n	8004cd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f9b6 	bl	8005028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbc:	e00a      	b.n	8004cd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f9b2 	bl	8005028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc4:	e006      	b.n	8004cd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9ae 	bl	8005028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004cd2:	e18d      	b.n	8004ff0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd4:	bf00      	nop
    return;
 8004cd6:	e18b      	b.n	8004ff0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	f040 8167 	bne.w	8004fb0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 8160 	beq.w	8004fb0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8159 	beq.w	8004fb0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d1e:	2b40      	cmp	r3, #64	@ 0x40
 8004d20:	f040 80ce 	bne.w	8004ec0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80a9 	beq.w	8004e8c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d42:	429a      	cmp	r2, r3
 8004d44:	f080 80a2 	bcs.w	8004e8c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d5a:	f000 8088 	beq.w	8004e6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1d9      	bne.n	8004d5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3314      	adds	r3, #20
 8004db0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004dba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3314      	adds	r3, #20
 8004dca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004dd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004dd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004de0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e1      	bne.n	8004daa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3314      	adds	r3, #20
 8004dec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004df6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3314      	adds	r3, #20
 8004e06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e3      	bne.n	8004de6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e3e:	f023 0310 	bic.w	r3, r3, #16
 8004e42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e50:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e52:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e58:	e841 2300 	strex	r3, r2, [r1]
 8004e5c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e3      	bne.n	8004e2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fc fff9 	bl	8001e60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2202      	movs	r2, #2
 8004e72:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	4619      	mov	r1, r3
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f8d9 	bl	800503c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004e8a:	e0b3      	b.n	8004ff4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e94:	429a      	cmp	r2, r3
 8004e96:	f040 80ad 	bne.w	8004ff4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ea4:	f040 80a6 	bne.w	8004ff4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f8c1 	bl	800503c <HAL_UARTEx_RxEventCallback>
      return;
 8004eba:	e09b      	b.n	8004ff4 <HAL_UART_IRQHandler+0x548>
 8004ebc:	0800511b 	.word	0x0800511b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 808e 	beq.w	8004ff8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8089 	beq.w	8004ff8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004efc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004f0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e3      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3314      	adds	r3, #20
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f42:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e3      	bne.n	8004f1e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0310 	bic.w	r3, r3, #16
 8004f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	330c      	adds	r3, #12
 8004f84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f88:	61fa      	str	r2, [r7, #28]
 8004f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	69b9      	ldr	r1, [r7, #24]
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	617b      	str	r3, [r7, #20]
   return(result);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e3      	bne.n	8004f64 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f847 	bl	800503c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fae:	e023      	b.n	8004ff8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x524>
 8004fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f8b7 	bl	800513c <UART_Transmit_IT>
    return;
 8004fce:	e014      	b.n	8004ffa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00e      	beq.n	8004ffa <HAL_UART_IRQHandler+0x54e>
 8004fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f8f7 	bl	80051dc <UART_EndTransmit_IT>
    return;
 8004fee:	e004      	b.n	8004ffa <HAL_UART_IRQHandler+0x54e>
    return;
 8004ff0:	bf00      	nop
 8004ff2:	e002      	b.n	8004ffa <HAL_UART_IRQHandler+0x54e>
      return;
 8004ff4:	bf00      	nop
 8004ff6:	e000      	b.n	8004ffa <HAL_UART_IRQHandler+0x54e>
      return;
 8004ff8:	bf00      	nop
  }
}
 8004ffa:	37e8      	adds	r7, #232	@ 0xe8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005054:	b480      	push	{r7}
 8005056:	b095      	sub	sp, #84	@ 0x54
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	330c      	adds	r3, #12
 8005062:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800506c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800507c:	643a      	str	r2, [r7, #64]	@ 0x40
 800507e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005082:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800508a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e5      	bne.n	800505c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3314      	adds	r3, #20
 8005096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	61fb      	str	r3, [r7, #28]
   return(result);
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3314      	adds	r3, #20
 80050ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e5      	bne.n	8005090 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d119      	bne.n	8005100 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	60bb      	str	r3, [r7, #8]
   return(result);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f023 0310 	bic.w	r3, r3, #16
 80050e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050ec:	61ba      	str	r2, [r7, #24]
 80050ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6979      	ldr	r1, [r7, #20]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	613b      	str	r3, [r7, #16]
   return(result);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800510e:	bf00      	nop
 8005110:	3754      	adds	r7, #84	@ 0x54
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005126:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff ff7a 	bl	8005028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b21      	cmp	r3, #33	@ 0x21
 800514e:	d13e      	bne.n	80051ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005158:	d114      	bne.n	8005184 <UART_Transmit_IT+0x48>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d110      	bne.n	8005184 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005176:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	1c9a      	adds	r2, r3, #2
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	621a      	str	r2, [r3, #32]
 8005182:	e008      	b.n	8005196 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	1c59      	adds	r1, r3, #1
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6211      	str	r1, [r2, #32]
 800518e:	781a      	ldrb	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29b      	uxth	r3, r3
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	4619      	mov	r1, r3
 80051a4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10f      	bne.n	80051ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e000      	b.n	80051d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
  }
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff feff 	bl	8005000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08c      	sub	sp, #48	@ 0x30
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005214:	2300      	movs	r3, #0
 8005216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b22      	cmp	r3, #34	@ 0x22
 8005226:	f040 80aa 	bne.w	800537e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005232:	d115      	bne.n	8005260 <UART_Receive_IT+0x54>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d111      	bne.n	8005260 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005240:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	b29b      	uxth	r3, r3
 800524a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524e:	b29a      	uxth	r2, r3
 8005250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005252:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	1c9a      	adds	r2, r3, #2
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	629a      	str	r2, [r3, #40]	@ 0x28
 800525e:	e024      	b.n	80052aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005264:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800526e:	d007      	beq.n	8005280 <UART_Receive_IT+0x74>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <UART_Receive_IT+0x82>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e008      	b.n	80052a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800529a:	b2da      	uxtb	r2, r3
 800529c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4619      	mov	r1, r3
 80052b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d15d      	bne.n	800537a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0220 	bic.w	r2, r2, #32
 80052cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005300:	2b01      	cmp	r3, #1
 8005302:	d135      	bne.n	8005370 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	613b      	str	r3, [r7, #16]
   return(result);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f023 0310 	bic.w	r3, r3, #16
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	330c      	adds	r3, #12
 8005328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800532a:	623a      	str	r2, [r7, #32]
 800532c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	69f9      	ldr	r1, [r7, #28]
 8005330:	6a3a      	ldr	r2, [r7, #32]
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	61bb      	str	r3, [r7, #24]
   return(result);
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e5      	bne.n	800530a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b10      	cmp	r3, #16
 800534a:	d10a      	bne.n	8005362 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fe67 	bl	800503c <HAL_UARTEx_RxEventCallback>
 800536e:	e002      	b.n	8005376 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff fe4f 	bl	8005014 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e002      	b.n	8005380 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e000      	b.n	8005380 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	3730      	adds	r7, #48	@ 0x30
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800538c:	b0c0      	sub	sp, #256	@ 0x100
 800538e:	af00      	add	r7, sp, #0
 8005390:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a4:	68d9      	ldr	r1, [r3, #12]
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	ea40 0301 	orr.w	r3, r0, r1
 80053b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	431a      	orrs	r2, r3
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053e0:	f021 010c 	bic.w	r1, r1, #12
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053ee:	430b      	orrs	r3, r1
 80053f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005402:	6999      	ldr	r1, [r3, #24]
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	ea40 0301 	orr.w	r3, r0, r1
 800540e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b8f      	ldr	r3, [pc, #572]	@ (8005654 <UART_SetConfig+0x2cc>)
 8005418:	429a      	cmp	r2, r3
 800541a:	d005      	beq.n	8005428 <UART_SetConfig+0xa0>
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b8d      	ldr	r3, [pc, #564]	@ (8005658 <UART_SetConfig+0x2d0>)
 8005424:	429a      	cmp	r2, r3
 8005426:	d104      	bne.n	8005432 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005428:	f7fe fe6a 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 800542c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005430:	e003      	b.n	800543a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005432:	f7fe fe51 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 8005436:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800543a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005444:	f040 810c 	bne.w	8005660 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800544c:	2200      	movs	r2, #0
 800544e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005452:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005456:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800545a:	4622      	mov	r2, r4
 800545c:	462b      	mov	r3, r5
 800545e:	1891      	adds	r1, r2, r2
 8005460:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005462:	415b      	adcs	r3, r3
 8005464:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005466:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800546a:	4621      	mov	r1, r4
 800546c:	eb12 0801 	adds.w	r8, r2, r1
 8005470:	4629      	mov	r1, r5
 8005472:	eb43 0901 	adc.w	r9, r3, r1
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800548a:	4690      	mov	r8, r2
 800548c:	4699      	mov	r9, r3
 800548e:	4623      	mov	r3, r4
 8005490:	eb18 0303 	adds.w	r3, r8, r3
 8005494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005498:	462b      	mov	r3, r5
 800549a:	eb49 0303 	adc.w	r3, r9, r3
 800549e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80054a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80054b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054b6:	460b      	mov	r3, r1
 80054b8:	18db      	adds	r3, r3, r3
 80054ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80054bc:	4613      	mov	r3, r2
 80054be:	eb42 0303 	adc.w	r3, r2, r3
 80054c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80054c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054cc:	f7fb fbdc 	bl	8000c88 <__aeabi_uldivmod>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4b61      	ldr	r3, [pc, #388]	@ (800565c <UART_SetConfig+0x2d4>)
 80054d6:	fba3 2302 	umull	r2, r3, r3, r2
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	011c      	lsls	r4, r3, #4
 80054de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054f0:	4642      	mov	r2, r8
 80054f2:	464b      	mov	r3, r9
 80054f4:	1891      	adds	r1, r2, r2
 80054f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054f8:	415b      	adcs	r3, r3
 80054fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005500:	4641      	mov	r1, r8
 8005502:	eb12 0a01 	adds.w	sl, r2, r1
 8005506:	4649      	mov	r1, r9
 8005508:	eb43 0b01 	adc.w	fp, r3, r1
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005518:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800551c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005520:	4692      	mov	sl, r2
 8005522:	469b      	mov	fp, r3
 8005524:	4643      	mov	r3, r8
 8005526:	eb1a 0303 	adds.w	r3, sl, r3
 800552a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800552e:	464b      	mov	r3, r9
 8005530:	eb4b 0303 	adc.w	r3, fp, r3
 8005534:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005544:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005548:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800554c:	460b      	mov	r3, r1
 800554e:	18db      	adds	r3, r3, r3
 8005550:	643b      	str	r3, [r7, #64]	@ 0x40
 8005552:	4613      	mov	r3, r2
 8005554:	eb42 0303 	adc.w	r3, r2, r3
 8005558:	647b      	str	r3, [r7, #68]	@ 0x44
 800555a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800555e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005562:	f7fb fb91 	bl	8000c88 <__aeabi_uldivmod>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4611      	mov	r1, r2
 800556c:	4b3b      	ldr	r3, [pc, #236]	@ (800565c <UART_SetConfig+0x2d4>)
 800556e:	fba3 2301 	umull	r2, r3, r3, r1
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	2264      	movs	r2, #100	@ 0x64
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	1acb      	subs	r3, r1, r3
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005582:	4b36      	ldr	r3, [pc, #216]	@ (800565c <UART_SetConfig+0x2d4>)
 8005584:	fba3 2302 	umull	r2, r3, r3, r2
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005590:	441c      	add	r4, r3
 8005592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005596:	2200      	movs	r2, #0
 8005598:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800559c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80055a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80055a4:	4642      	mov	r2, r8
 80055a6:	464b      	mov	r3, r9
 80055a8:	1891      	adds	r1, r2, r2
 80055aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055ac:	415b      	adcs	r3, r3
 80055ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80055b4:	4641      	mov	r1, r8
 80055b6:	1851      	adds	r1, r2, r1
 80055b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80055ba:	4649      	mov	r1, r9
 80055bc:	414b      	adcs	r3, r1
 80055be:	637b      	str	r3, [r7, #52]	@ 0x34
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055cc:	4659      	mov	r1, fp
 80055ce:	00cb      	lsls	r3, r1, #3
 80055d0:	4651      	mov	r1, sl
 80055d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d6:	4651      	mov	r1, sl
 80055d8:	00ca      	lsls	r2, r1, #3
 80055da:	4610      	mov	r0, r2
 80055dc:	4619      	mov	r1, r3
 80055de:	4603      	mov	r3, r0
 80055e0:	4642      	mov	r2, r8
 80055e2:	189b      	adds	r3, r3, r2
 80055e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055e8:	464b      	mov	r3, r9
 80055ea:	460a      	mov	r2, r1
 80055ec:	eb42 0303 	adc.w	r3, r2, r3
 80055f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005600:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005604:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005608:	460b      	mov	r3, r1
 800560a:	18db      	adds	r3, r3, r3
 800560c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800560e:	4613      	mov	r3, r2
 8005610:	eb42 0303 	adc.w	r3, r2, r3
 8005614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005616:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800561a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800561e:	f7fb fb33 	bl	8000c88 <__aeabi_uldivmod>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4b0d      	ldr	r3, [pc, #52]	@ (800565c <UART_SetConfig+0x2d4>)
 8005628:	fba3 1302 	umull	r1, r3, r3, r2
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	2164      	movs	r1, #100	@ 0x64
 8005630:	fb01 f303 	mul.w	r3, r1, r3
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	3332      	adds	r3, #50	@ 0x32
 800563a:	4a08      	ldr	r2, [pc, #32]	@ (800565c <UART_SetConfig+0x2d4>)
 800563c:	fba2 2303 	umull	r2, r3, r2, r3
 8005640:	095b      	lsrs	r3, r3, #5
 8005642:	f003 0207 	and.w	r2, r3, #7
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4422      	add	r2, r4
 800564e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005650:	e106      	b.n	8005860 <UART_SetConfig+0x4d8>
 8005652:	bf00      	nop
 8005654:	40011000 	.word	0x40011000
 8005658:	40011400 	.word	0x40011400
 800565c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005664:	2200      	movs	r2, #0
 8005666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800566a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800566e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005672:	4642      	mov	r2, r8
 8005674:	464b      	mov	r3, r9
 8005676:	1891      	adds	r1, r2, r2
 8005678:	6239      	str	r1, [r7, #32]
 800567a:	415b      	adcs	r3, r3
 800567c:	627b      	str	r3, [r7, #36]	@ 0x24
 800567e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005682:	4641      	mov	r1, r8
 8005684:	1854      	adds	r4, r2, r1
 8005686:	4649      	mov	r1, r9
 8005688:	eb43 0501 	adc.w	r5, r3, r1
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	00eb      	lsls	r3, r5, #3
 8005696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800569a:	00e2      	lsls	r2, r4, #3
 800569c:	4614      	mov	r4, r2
 800569e:	461d      	mov	r5, r3
 80056a0:	4643      	mov	r3, r8
 80056a2:	18e3      	adds	r3, r4, r3
 80056a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056a8:	464b      	mov	r3, r9
 80056aa:	eb45 0303 	adc.w	r3, r5, r3
 80056ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056ce:	4629      	mov	r1, r5
 80056d0:	008b      	lsls	r3, r1, #2
 80056d2:	4621      	mov	r1, r4
 80056d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056d8:	4621      	mov	r1, r4
 80056da:	008a      	lsls	r2, r1, #2
 80056dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056e0:	f7fb fad2 	bl	8000c88 <__aeabi_uldivmod>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4b60      	ldr	r3, [pc, #384]	@ (800586c <UART_SetConfig+0x4e4>)
 80056ea:	fba3 2302 	umull	r2, r3, r3, r2
 80056ee:	095b      	lsrs	r3, r3, #5
 80056f0:	011c      	lsls	r4, r3, #4
 80056f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005700:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005704:	4642      	mov	r2, r8
 8005706:	464b      	mov	r3, r9
 8005708:	1891      	adds	r1, r2, r2
 800570a:	61b9      	str	r1, [r7, #24]
 800570c:	415b      	adcs	r3, r3
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005714:	4641      	mov	r1, r8
 8005716:	1851      	adds	r1, r2, r1
 8005718:	6139      	str	r1, [r7, #16]
 800571a:	4649      	mov	r1, r9
 800571c:	414b      	adcs	r3, r1
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800572c:	4659      	mov	r1, fp
 800572e:	00cb      	lsls	r3, r1, #3
 8005730:	4651      	mov	r1, sl
 8005732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005736:	4651      	mov	r1, sl
 8005738:	00ca      	lsls	r2, r1, #3
 800573a:	4610      	mov	r0, r2
 800573c:	4619      	mov	r1, r3
 800573e:	4603      	mov	r3, r0
 8005740:	4642      	mov	r2, r8
 8005742:	189b      	adds	r3, r3, r2
 8005744:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005748:	464b      	mov	r3, r9
 800574a:	460a      	mov	r2, r1
 800574c:	eb42 0303 	adc.w	r3, r2, r3
 8005750:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800575e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800576c:	4649      	mov	r1, r9
 800576e:	008b      	lsls	r3, r1, #2
 8005770:	4641      	mov	r1, r8
 8005772:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005776:	4641      	mov	r1, r8
 8005778:	008a      	lsls	r2, r1, #2
 800577a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800577e:	f7fb fa83 	bl	8000c88 <__aeabi_uldivmod>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4611      	mov	r1, r2
 8005788:	4b38      	ldr	r3, [pc, #224]	@ (800586c <UART_SetConfig+0x4e4>)
 800578a:	fba3 2301 	umull	r2, r3, r3, r1
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	2264      	movs	r2, #100	@ 0x64
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	1acb      	subs	r3, r1, r3
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	3332      	adds	r3, #50	@ 0x32
 800579c:	4a33      	ldr	r2, [pc, #204]	@ (800586c <UART_SetConfig+0x4e4>)
 800579e:	fba2 2303 	umull	r2, r3, r2, r3
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057a8:	441c      	add	r4, r3
 80057aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ae:	2200      	movs	r2, #0
 80057b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80057b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80057b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	1891      	adds	r1, r2, r2
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	415b      	adcs	r3, r3
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057c8:	4641      	mov	r1, r8
 80057ca:	1851      	adds	r1, r2, r1
 80057cc:	6039      	str	r1, [r7, #0]
 80057ce:	4649      	mov	r1, r9
 80057d0:	414b      	adcs	r3, r1
 80057d2:	607b      	str	r3, [r7, #4]
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057e0:	4659      	mov	r1, fp
 80057e2:	00cb      	lsls	r3, r1, #3
 80057e4:	4651      	mov	r1, sl
 80057e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ea:	4651      	mov	r1, sl
 80057ec:	00ca      	lsls	r2, r1, #3
 80057ee:	4610      	mov	r0, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	4642      	mov	r2, r8
 80057f6:	189b      	adds	r3, r3, r2
 80057f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057fa:	464b      	mov	r3, r9
 80057fc:	460a      	mov	r2, r1
 80057fe:	eb42 0303 	adc.w	r3, r2, r3
 8005802:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	663b      	str	r3, [r7, #96]	@ 0x60
 800580e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800581c:	4649      	mov	r1, r9
 800581e:	008b      	lsls	r3, r1, #2
 8005820:	4641      	mov	r1, r8
 8005822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005826:	4641      	mov	r1, r8
 8005828:	008a      	lsls	r2, r1, #2
 800582a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800582e:	f7fb fa2b 	bl	8000c88 <__aeabi_uldivmod>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4b0d      	ldr	r3, [pc, #52]	@ (800586c <UART_SetConfig+0x4e4>)
 8005838:	fba3 1302 	umull	r1, r3, r3, r2
 800583c:	095b      	lsrs	r3, r3, #5
 800583e:	2164      	movs	r1, #100	@ 0x64
 8005840:	fb01 f303 	mul.w	r3, r1, r3
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	3332      	adds	r3, #50	@ 0x32
 800584a:	4a08      	ldr	r2, [pc, #32]	@ (800586c <UART_SetConfig+0x4e4>)
 800584c:	fba2 2303 	umull	r2, r3, r2, r3
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	f003 020f 	and.w	r2, r3, #15
 8005856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4422      	add	r2, r4
 800585e:	609a      	str	r2, [r3, #8]
}
 8005860:	bf00      	nop
 8005862:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005866:	46bd      	mov	sp, r7
 8005868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800586c:	51eb851f 	.word	0x51eb851f

08005870 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005870:	b084      	sub	sp, #16
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	f107 001c 	add.w	r0, r7, #28
 800587e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005882:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005886:	2b01      	cmp	r3, #1
 8005888:	d123      	bne.n	80058d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800589e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d105      	bne.n	80058c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 fae8 	bl	8006e9c <USB_CoreReset>
 80058cc:	4603      	mov	r3, r0
 80058ce:	73fb      	strb	r3, [r7, #15]
 80058d0:	e01b      	b.n	800590a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 fadc 	bl	8006e9c <USB_CoreReset>
 80058e4:	4603      	mov	r3, r0
 80058e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80058fc:	e005      	b.n	800590a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005902:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800590a:	7fbb      	ldrb	r3, [r7, #30]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d10b      	bne.n	8005928 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f043 0206 	orr.w	r2, r3, #6
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005928:	7bfb      	ldrb	r3, [r7, #15]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005934:	b004      	add	sp, #16
 8005936:	4770      	bx	lr

08005938 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	4613      	mov	r3, r2
 8005944:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d165      	bne.n	8005a18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4a41      	ldr	r2, [pc, #260]	@ (8005a54 <USB_SetTurnaroundTime+0x11c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d906      	bls.n	8005962 <USB_SetTurnaroundTime+0x2a>
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4a40      	ldr	r2, [pc, #256]	@ (8005a58 <USB_SetTurnaroundTime+0x120>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d202      	bcs.n	8005962 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800595c:	230f      	movs	r3, #15
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	e062      	b.n	8005a28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	4a3c      	ldr	r2, [pc, #240]	@ (8005a58 <USB_SetTurnaroundTime+0x120>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d306      	bcc.n	8005978 <USB_SetTurnaroundTime+0x40>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4a3b      	ldr	r2, [pc, #236]	@ (8005a5c <USB_SetTurnaroundTime+0x124>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d202      	bcs.n	8005978 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005972:	230e      	movs	r3, #14
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	e057      	b.n	8005a28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4a38      	ldr	r2, [pc, #224]	@ (8005a5c <USB_SetTurnaroundTime+0x124>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d306      	bcc.n	800598e <USB_SetTurnaroundTime+0x56>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4a37      	ldr	r2, [pc, #220]	@ (8005a60 <USB_SetTurnaroundTime+0x128>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d202      	bcs.n	800598e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005988:	230d      	movs	r3, #13
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	e04c      	b.n	8005a28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4a33      	ldr	r2, [pc, #204]	@ (8005a60 <USB_SetTurnaroundTime+0x128>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d306      	bcc.n	80059a4 <USB_SetTurnaroundTime+0x6c>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	4a32      	ldr	r2, [pc, #200]	@ (8005a64 <USB_SetTurnaroundTime+0x12c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d802      	bhi.n	80059a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800599e:	230c      	movs	r3, #12
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	e041      	b.n	8005a28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4a2f      	ldr	r2, [pc, #188]	@ (8005a64 <USB_SetTurnaroundTime+0x12c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d906      	bls.n	80059ba <USB_SetTurnaroundTime+0x82>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005a68 <USB_SetTurnaroundTime+0x130>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d802      	bhi.n	80059ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80059b4:	230b      	movs	r3, #11
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	e036      	b.n	8005a28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005a68 <USB_SetTurnaroundTime+0x130>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d906      	bls.n	80059d0 <USB_SetTurnaroundTime+0x98>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	4a29      	ldr	r2, [pc, #164]	@ (8005a6c <USB_SetTurnaroundTime+0x134>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d802      	bhi.n	80059d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80059ca:	230a      	movs	r3, #10
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	e02b      	b.n	8005a28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4a26      	ldr	r2, [pc, #152]	@ (8005a6c <USB_SetTurnaroundTime+0x134>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d906      	bls.n	80059e6 <USB_SetTurnaroundTime+0xae>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4a25      	ldr	r2, [pc, #148]	@ (8005a70 <USB_SetTurnaroundTime+0x138>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d202      	bcs.n	80059e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80059e0:	2309      	movs	r3, #9
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	e020      	b.n	8005a28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4a21      	ldr	r2, [pc, #132]	@ (8005a70 <USB_SetTurnaroundTime+0x138>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d306      	bcc.n	80059fc <USB_SetTurnaroundTime+0xc4>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4a20      	ldr	r2, [pc, #128]	@ (8005a74 <USB_SetTurnaroundTime+0x13c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d802      	bhi.n	80059fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80059f6:	2308      	movs	r3, #8
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	e015      	b.n	8005a28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005a74 <USB_SetTurnaroundTime+0x13c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d906      	bls.n	8005a12 <USB_SetTurnaroundTime+0xda>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4a1c      	ldr	r2, [pc, #112]	@ (8005a78 <USB_SetTurnaroundTime+0x140>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d202      	bcs.n	8005a12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a0c:	2307      	movs	r3, #7
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	e00a      	b.n	8005a28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a12:	2306      	movs	r3, #6
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	e007      	b.n	8005a28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d102      	bne.n	8005a24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a1e:	2309      	movs	r3, #9
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e001      	b.n	8005a28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005a24:	2309      	movs	r3, #9
 8005a26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	029b      	lsls	r3, r3, #10
 8005a3c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005a40:	431a      	orrs	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	371c      	adds	r7, #28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	00d8acbf 	.word	0x00d8acbf
 8005a58:	00e4e1c0 	.word	0x00e4e1c0
 8005a5c:	00f42400 	.word	0x00f42400
 8005a60:	01067380 	.word	0x01067380
 8005a64:	011a499f 	.word	0x011a499f
 8005a68:	01312cff 	.word	0x01312cff
 8005a6c:	014ca43f 	.word	0x014ca43f
 8005a70:	016e3600 	.word	0x016e3600
 8005a74:	01a6ab1f 	.word	0x01a6ab1f
 8005a78:	01e84800 	.word	0x01e84800

08005a7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f043 0201 	orr.w	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f023 0201 	bic.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d115      	bne.n	8005b0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005aee:	200a      	movs	r0, #10
 8005af0:	f7fc f806 	bl	8001b00 <HAL_Delay>
      ms += 10U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	330a      	adds	r3, #10
 8005af8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f001 f93f 	bl	8006d7e <USB_GetMode>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d01e      	beq.n	8005b44 <USB_SetCurrentMode+0x84>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b0a:	d9f0      	bls.n	8005aee <USB_SetCurrentMode+0x2e>
 8005b0c:	e01a      	b.n	8005b44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d115      	bne.n	8005b40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b20:	200a      	movs	r0, #10
 8005b22:	f7fb ffed 	bl	8001b00 <HAL_Delay>
      ms += 10U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	330a      	adds	r3, #10
 8005b2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 f926 	bl	8006d7e <USB_GetMode>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d005      	beq.n	8005b44 <USB_SetCurrentMode+0x84>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b3c:	d9f0      	bls.n	8005b20 <USB_SetCurrentMode+0x60>
 8005b3e:	e001      	b.n	8005b44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e005      	b.n	8005b50 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2bc8      	cmp	r3, #200	@ 0xc8
 8005b48:	d101      	bne.n	8005b4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b58:	b084      	sub	sp, #16
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b086      	sub	sp, #24
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b72:	2300      	movs	r3, #0
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	e009      	b.n	8005b8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	3340      	adds	r3, #64	@ 0x40
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	2200      	movs	r2, #0
 8005b84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	2b0e      	cmp	r3, #14
 8005b90:	d9f2      	bls.n	8005b78 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d11c      	bne.n	8005bd4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ba8:	f043 0302 	orr.w	r3, r3, #2
 8005bac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8005bd2:	e00b      	b.n	8005bec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bf8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d10d      	bne.n	8005c1c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c08:	2100      	movs	r1, #0
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f968 	bl	8005ee0 <USB_SetDevSpeed>
 8005c10:	e008      	b.n	8005c24 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c12:	2101      	movs	r1, #1
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f963 	bl	8005ee0 <USB_SetDevSpeed>
 8005c1a:	e003      	b.n	8005c24 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c1c:	2103      	movs	r1, #3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f95e 	bl	8005ee0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c24:	2110      	movs	r1, #16
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f8fa 	bl	8005e20 <USB_FlushTxFifo>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f924 	bl	8005e84 <USB_FlushRxFifo>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c58:	461a      	mov	r2, r3
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c64:	461a      	mov	r2, r3
 8005c66:	2300      	movs	r3, #0
 8005c68:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	e043      	b.n	8005cf8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c86:	d118      	bne.n	8005cba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e013      	b.n	8005ccc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	e008      	b.n	8005ccc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2300      	movs	r3, #0
 8005cdc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cea:	461a      	mov	r2, r3
 8005cec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d3b5      	bcc.n	8005c70 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d04:	2300      	movs	r3, #0
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	e043      	b.n	8005d92 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d20:	d118      	bne.n	8005d54 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d34:	461a      	mov	r2, r3
 8005d36:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	e013      	b.n	8005d66 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	e008      	b.n	8005d66 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d60:	461a      	mov	r2, r3
 8005d62:	2300      	movs	r3, #0
 8005d64:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d72:	461a      	mov	r2, r3
 8005d74:	2300      	movs	r3, #0
 8005d76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d84:	461a      	mov	r2, r3
 8005d86:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	613b      	str	r3, [r7, #16]
 8005d92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d96:	461a      	mov	r2, r3
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d3b5      	bcc.n	8005d0a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005db0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005dbe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005dc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d105      	bne.n	8005dd4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	f043 0210 	orr.w	r2, r3, #16
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699a      	ldr	r2, [r3, #24]
 8005dd8:	4b10      	ldr	r3, [pc, #64]	@ (8005e1c <USB_DevInit+0x2c4>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005de0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d005      	beq.n	8005df4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	f043 0208 	orr.w	r2, r3, #8
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005df4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d107      	bne.n	8005e0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e04:	f043 0304 	orr.w	r3, r3, #4
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e18:	b004      	add	sp, #16
 8005e1a:	4770      	bx	lr
 8005e1c:	803c3800 	.word	0x803c3800

08005e20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3301      	adds	r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e3a:	d901      	bls.n	8005e40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e01b      	b.n	8005e78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	daf2      	bge.n	8005e2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	019b      	lsls	r3, r3, #6
 8005e50:	f043 0220 	orr.w	r2, r3, #32
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e64:	d901      	bls.n	8005e6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e006      	b.n	8005e78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d0f0      	beq.n	8005e58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e9c:	d901      	bls.n	8005ea2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e018      	b.n	8005ed4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	daf2      	bge.n	8005e90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2210      	movs	r2, #16
 8005eb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ec0:	d901      	bls.n	8005ec6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e006      	b.n	8005ed4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0310 	and.w	r3, r3, #16
 8005ece:	2b10      	cmp	r3, #16
 8005ed0:	d0f0      	beq.n	8005eb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f00:	4313      	orrs	r3, r2
 8005f02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b087      	sub	sp, #28
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 0306 	and.w	r3, r3, #6
 8005f2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d102      	bne.n	8005f38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005f32:	2300      	movs	r3, #0
 8005f34:	75fb      	strb	r3, [r7, #23]
 8005f36:	e00a      	b.n	8005f4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d002      	beq.n	8005f44 <USB_GetDevSpeed+0x32>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b06      	cmp	r3, #6
 8005f42:	d102      	bne.n	8005f4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f44:	2302      	movs	r3, #2
 8005f46:	75fb      	strb	r3, [r7, #23]
 8005f48:	e001      	b.n	8005f4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f4a:	230f      	movs	r3, #15
 8005f4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d13a      	bne.n	8005fee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	2101      	movs	r1, #1
 8005f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	68f9      	ldr	r1, [r7, #12]
 8005f92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f96:	4313      	orrs	r3, r2
 8005f98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d155      	bne.n	800605c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	791b      	ldrb	r3, [r3, #4]
 8005fca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fcc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	059b      	lsls	r3, r3, #22
 8005fd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	e036      	b.n	800605c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ff4:	69da      	ldr	r2, [r3, #28]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	2101      	movs	r1, #1
 8006000:	fa01 f303 	lsl.w	r3, r1, r3
 8006004:	041b      	lsls	r3, r3, #16
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800600c:	4313      	orrs	r3, r2
 800600e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d11a      	bne.n	800605c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	791b      	ldrb	r3, [r3, #4]
 8006040:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006042:	430b      	orrs	r3, r1
 8006044:	4313      	orrs	r3, r2
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800605a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	785b      	ldrb	r3, [r3, #1]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d161      	bne.n	800614c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800609a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800609e:	d11f      	bne.n	80060e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	2101      	movs	r1, #1
 80060f2:	fa01 f303 	lsl.w	r3, r1, r3
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	43db      	mvns	r3, r3
 80060fa:	68f9      	ldr	r1, [r7, #12]
 80060fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006100:	4013      	ands	r3, r2
 8006102:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800610a:	69da      	ldr	r2, [r3, #28]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	2101      	movs	r1, #1
 8006116:	fa01 f303 	lsl.w	r3, r1, r3
 800611a:	b29b      	uxth	r3, r3
 800611c:	43db      	mvns	r3, r3
 800611e:	68f9      	ldr	r1, [r7, #12]
 8006120:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006124:	4013      	ands	r3, r2
 8006126:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	0159      	lsls	r1, r3, #5
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	440b      	add	r3, r1
 800613e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006142:	4619      	mov	r1, r3
 8006144:	4b35      	ldr	r3, [pc, #212]	@ (800621c <USB_DeactivateEndpoint+0x1b0>)
 8006146:	4013      	ands	r3, r2
 8006148:	600b      	str	r3, [r1, #0]
 800614a:	e060      	b.n	800620e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800615e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006162:	d11f      	bne.n	80061a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	0151      	lsls	r1, r2, #5
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	440a      	add	r2, r1
 800617a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800617e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006182:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	0151      	lsls	r1, r2, #5
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	440a      	add	r2, r1
 800619a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800619e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	f003 030f 	and.w	r3, r3, #15
 80061b4:	2101      	movs	r1, #1
 80061b6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ba:	041b      	lsls	r3, r3, #16
 80061bc:	43db      	mvns	r3, r3
 80061be:	68f9      	ldr	r1, [r7, #12]
 80061c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061c4:	4013      	ands	r3, r2
 80061c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ce:	69da      	ldr	r2, [r3, #28]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	2101      	movs	r1, #1
 80061da:	fa01 f303 	lsl.w	r3, r1, r3
 80061de:	041b      	lsls	r3, r3, #16
 80061e0:	43db      	mvns	r3, r3
 80061e2:	68f9      	ldr	r1, [r7, #12]
 80061e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061e8:	4013      	ands	r3, r2
 80061ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	0159      	lsls	r1, r3, #5
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	440b      	add	r3, r1
 8006202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006206:	4619      	mov	r1, r3
 8006208:	4b05      	ldr	r3, [pc, #20]	@ (8006220 <USB_DeactivateEndpoint+0x1b4>)
 800620a:	4013      	ands	r3, r2
 800620c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	ec337800 	.word	0xec337800
 8006220:	eff37800 	.word	0xeff37800

08006224 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08a      	sub	sp, #40	@ 0x28
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	4613      	mov	r3, r2
 8006230:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	785b      	ldrb	r3, [r3, #1]
 8006240:	2b01      	cmp	r3, #1
 8006242:	f040 817f 	bne.w	8006544 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d132      	bne.n	80062b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006268:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800626c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006270:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800628c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006290:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	0151      	lsls	r1, r2, #5
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	440a      	add	r2, r1
 80062a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ac:	0cdb      	lsrs	r3, r3, #19
 80062ae:	04db      	lsls	r3, r3, #19
 80062b0:	6113      	str	r3, [r2, #16]
 80062b2:	e097      	b.n	80063e4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	0151      	lsls	r1, r2, #5
 80062c6:	69fa      	ldr	r2, [r7, #28]
 80062c8:	440a      	add	r2, r1
 80062ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ce:	0cdb      	lsrs	r3, r3, #19
 80062d0:	04db      	lsls	r3, r3, #19
 80062d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	0151      	lsls	r1, r2, #5
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	440a      	add	r2, r1
 80062ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80062f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80062f6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d11a      	bne.n	8006334 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	429a      	cmp	r2, r3
 8006308:	d903      	bls.n	8006312 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800632c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006330:	6113      	str	r3, [r2, #16]
 8006332:	e044      	b.n	80063be <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	4413      	add	r3, r2
 800633e:	1e5a      	subs	r2, r3, #1
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	fbb2 f3f3 	udiv	r3, r2, r3
 8006348:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	8afb      	ldrh	r3, [r7, #22]
 800635a:	04d9      	lsls	r1, r3, #19
 800635c:	4ba4      	ldr	r3, [pc, #656]	@ (80065f0 <USB_EPStartXfer+0x3cc>)
 800635e:	400b      	ands	r3, r1
 8006360:	69b9      	ldr	r1, [r7, #24]
 8006362:	0148      	lsls	r0, r1, #5
 8006364:	69f9      	ldr	r1, [r7, #28]
 8006366:	4401      	add	r1, r0
 8006368:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800636c:	4313      	orrs	r3, r2
 800636e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	791b      	ldrb	r3, [r3, #4]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d122      	bne.n	80063be <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006392:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006396:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	8afb      	ldrh	r3, [r7, #22]
 80063a8:	075b      	lsls	r3, r3, #29
 80063aa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80063ae:	69b9      	ldr	r1, [r7, #24]
 80063b0:	0148      	lsls	r0, r1, #5
 80063b2:	69f9      	ldr	r1, [r7, #28]
 80063b4:	4401      	add	r1, r0
 80063b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063ba:	4313      	orrs	r3, r2
 80063bc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063d4:	69b9      	ldr	r1, [r7, #24]
 80063d6:	0148      	lsls	r0, r1, #5
 80063d8:	69f9      	ldr	r1, [r7, #28]
 80063da:	4401      	add	r1, r0
 80063dc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063e0:	4313      	orrs	r3, r2
 80063e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d14b      	bne.n	8006482 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fe:	461a      	mov	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	791b      	ldrb	r3, [r3, #4]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d128      	bne.n	8006460 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641a:	2b00      	cmp	r3, #0
 800641c:	d110      	bne.n	8006440 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	440a      	add	r2, r1
 8006434:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006438:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	e00f      	b.n	8006460 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	440a      	add	r2, r1
 8006456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800645a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800645e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	440a      	add	r2, r1
 8006476:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800647a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	e166      	b.n	8006750 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	69fa      	ldr	r2, [r7, #28]
 8006496:	440a      	add	r2, r1
 8006498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800649c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80064a0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	791b      	ldrb	r3, [r3, #4]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d015      	beq.n	80064d6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 814e 	beq.w	8006750 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	2101      	movs	r1, #1
 80064c6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ca:	69f9      	ldr	r1, [r7, #28]
 80064cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064d0:	4313      	orrs	r3, r2
 80064d2:	634b      	str	r3, [r1, #52]	@ 0x34
 80064d4:	e13c      	b.n	8006750 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d110      	bne.n	8006508 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006500:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	e00f      	b.n	8006528 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	440a      	add	r2, r1
 800651e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006526:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	68d9      	ldr	r1, [r3, #12]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	781a      	ldrb	r2, [r3, #0]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	b298      	uxth	r0, r3
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	4603      	mov	r3, r0
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f9b9 	bl	80068b4 <USB_WritePacket>
 8006542:	e105      	b.n	8006750 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	69fa      	ldr	r2, [r7, #28]
 8006558:	440a      	add	r2, r1
 800655a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800655e:	0cdb      	lsrs	r3, r3, #19
 8006560:	04db      	lsls	r3, r3, #19
 8006562:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	440a      	add	r2, r1
 800657a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800657e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006582:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006586:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d132      	bne.n	80065f4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065bc:	69b9      	ldr	r1, [r7, #24]
 80065be:	0148      	lsls	r0, r1, #5
 80065c0:	69f9      	ldr	r1, [r7, #28]
 80065c2:	4401      	add	r1, r0
 80065c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065c8:	4313      	orrs	r3, r2
 80065ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	0151      	lsls	r1, r2, #5
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	440a      	add	r2, r1
 80065e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065ea:	6113      	str	r3, [r2, #16]
 80065ec:	e062      	b.n	80066b4 <USB_EPStartXfer+0x490>
 80065ee:	bf00      	nop
 80065f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d123      	bne.n	8006644 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006612:	69b9      	ldr	r1, [r7, #24]
 8006614:	0148      	lsls	r0, r1, #5
 8006616:	69f9      	ldr	r1, [r7, #28]
 8006618:	4401      	add	r1, r0
 800661a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800661e:	4313      	orrs	r3, r2
 8006620:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800663c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006640:	6113      	str	r3, [r2, #16]
 8006642:	e037      	b.n	80066b4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	691a      	ldr	r2, [r3, #16]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	4413      	add	r3, r2
 800664e:	1e5a      	subs	r2, r3, #1
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	fbb2 f3f3 	udiv	r3, r2, r3
 8006658:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	8afa      	ldrh	r2, [r7, #22]
 8006660:	fb03 f202 	mul.w	r2, r3, r2
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	8afb      	ldrh	r3, [r7, #22]
 8006678:	04d9      	lsls	r1, r3, #19
 800667a:	4b38      	ldr	r3, [pc, #224]	@ (800675c <USB_EPStartXfer+0x538>)
 800667c:	400b      	ands	r3, r1
 800667e:	69b9      	ldr	r1, [r7, #24]
 8006680:	0148      	lsls	r0, r1, #5
 8006682:	69f9      	ldr	r1, [r7, #28]
 8006684:	4401      	add	r1, r0
 8006686:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800668a:	4313      	orrs	r3, r2
 800668c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a4:	69b9      	ldr	r1, [r7, #24]
 80066a6:	0148      	lsls	r0, r1, #5
 80066a8:	69f9      	ldr	r1, [r7, #28]
 80066aa:	4401      	add	r1, r0
 80066ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80066b0:	4313      	orrs	r3, r2
 80066b2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d10d      	bne.n	80066d6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d009      	beq.n	80066d6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	68d9      	ldr	r1, [r3, #12]
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d2:	460a      	mov	r2, r1
 80066d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	791b      	ldrb	r3, [r3, #4]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d128      	bne.n	8006730 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d110      	bne.n	8006710 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	0151      	lsls	r1, r2, #5
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	440a      	add	r2, r1
 8006704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006708:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	e00f      	b.n	8006730 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	440a      	add	r2, r1
 8006726:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800672a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800672e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	0151      	lsls	r1, r2, #5
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	440a      	add	r2, r1
 8006746:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800674a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800674e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	1ff80000 	.word	0x1ff80000

08006760 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	785b      	ldrb	r3, [r3, #1]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d14a      	bne.n	8006814 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006792:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006796:	f040 8086 	bne.w	80068a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	7812      	ldrb	r2, [r2, #0]
 80067ae:	0151      	lsls	r1, r2, #5
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	440a      	add	r2, r1
 80067b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	7812      	ldrb	r2, [r2, #0]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3301      	adds	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d902      	bls.n	80067f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	75fb      	strb	r3, [r7, #23]
          break;
 80067f6:	e056      	b.n	80068a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	4413      	add	r3, r2
 8006802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800680c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006810:	d0e7      	beq.n	80067e2 <USB_EPStopXfer+0x82>
 8006812:	e048      	b.n	80068a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006828:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800682c:	d13b      	bne.n	80068a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	7812      	ldrb	r2, [r2, #0]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	440a      	add	r2, r1
 8006848:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800684c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006850:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	7812      	ldrb	r2, [r2, #0]
 8006866:	0151      	lsls	r1, r2, #5
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	440a      	add	r2, r1
 800686c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006870:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006874:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3301      	adds	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006882:	4293      	cmp	r3, r2
 8006884:	d902      	bls.n	800688c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	75fb      	strb	r3, [r7, #23]
          break;
 800688a:	e00c      	b.n	80068a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068a4:	d0e7      	beq.n	8006876 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b089      	sub	sp, #36	@ 0x24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	4611      	mov	r1, r2
 80068c0:	461a      	mov	r2, r3
 80068c2:	460b      	mov	r3, r1
 80068c4:	71fb      	strb	r3, [r7, #7]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80068d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d123      	bne.n	8006922 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80068da:	88bb      	ldrh	r3, [r7, #4]
 80068dc:	3303      	adds	r3, #3
 80068de:	089b      	lsrs	r3, r3, #2
 80068e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80068e2:	2300      	movs	r3, #0
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	e018      	b.n	800691a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	031a      	lsls	r2, r3, #12
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f4:	461a      	mov	r2, r3
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	3301      	adds	r3, #1
 8006900:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3301      	adds	r3, #1
 8006906:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	3301      	adds	r3, #1
 800690c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	3301      	adds	r3, #1
 8006912:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	3301      	adds	r3, #1
 8006918:	61bb      	str	r3, [r7, #24]
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	429a      	cmp	r2, r3
 8006920:	d3e2      	bcc.n	80068e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3724      	adds	r7, #36	@ 0x24
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006930:	b480      	push	{r7}
 8006932:	b08b      	sub	sp, #44	@ 0x2c
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	4613      	mov	r3, r2
 800693c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006946:	88fb      	ldrh	r3, [r7, #6]
 8006948:	089b      	lsrs	r3, r3, #2
 800694a:	b29b      	uxth	r3, r3
 800694c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800694e:	88fb      	ldrh	r3, [r7, #6]
 8006950:	f003 0303 	and.w	r3, r3, #3
 8006954:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006956:	2300      	movs	r3, #0
 8006958:	623b      	str	r3, [r7, #32]
 800695a:	e014      	b.n	8006986 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	601a      	str	r2, [r3, #0]
    pDest++;
 8006968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696a:	3301      	adds	r3, #1
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	3301      	adds	r3, #1
 8006972:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006976:	3301      	adds	r3, #1
 8006978:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800697a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697c:	3301      	adds	r3, #1
 800697e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	3301      	adds	r3, #1
 8006984:	623b      	str	r3, [r7, #32]
 8006986:	6a3a      	ldr	r2, [r7, #32]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	429a      	cmp	r2, r3
 800698c:	d3e6      	bcc.n	800695c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800698e:	8bfb      	ldrh	r3, [r7, #30]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01e      	beq.n	80069d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800699e:	461a      	mov	r2, r3
 80069a0:	f107 0310 	add.w	r3, r7, #16
 80069a4:	6812      	ldr	r2, [r2, #0]
 80069a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	fa22 f303 	lsr.w	r3, r2, r3
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	701a      	strb	r2, [r3, #0]
      i++;
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	3301      	adds	r3, #1
 80069be:	623b      	str	r3, [r7, #32]
      pDest++;
 80069c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c2:	3301      	adds	r3, #1
 80069c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80069c6:	8bfb      	ldrh	r3, [r7, #30]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80069cc:	8bfb      	ldrh	r3, [r7, #30]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1ea      	bne.n	80069a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	372c      	adds	r7, #44	@ 0x2c
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d12c      	bne.n	8006a56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	db12      	blt.n	8006a34 <USB_EPSetStall+0x54>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00f      	beq.n	8006a34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	0151      	lsls	r1, r2, #5
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	440a      	add	r2, r1
 8006a4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	e02b      	b.n	8006aae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	db12      	blt.n	8006a8e <USB_EPSetStall+0xae>
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00f      	beq.n	8006a8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aa8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006aac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d128      	bne.n	8006b2a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	0151      	lsls	r1, r2, #5
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	440a      	add	r2, r1
 8006aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006af2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006af6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	791b      	ldrb	r3, [r3, #4]
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d003      	beq.n	8006b08 <USB_EPClearStall+0x4c>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	791b      	ldrb	r3, [r3, #4]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d138      	bne.n	8006b7a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	e027      	b.n	8006b7a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	0151      	lsls	r1, r2, #5
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	440a      	add	r2, r1
 8006b40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b44:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	791b      	ldrb	r3, [r3, #4]
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d003      	beq.n	8006b5a <USB_EPClearStall+0x9e>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	791b      	ldrb	r3, [r3, #4]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d10f      	bne.n	8006b7a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	0151      	lsls	r1, r2, #5
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	440a      	add	r2, r1
 8006b70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b78:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ba6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006baa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006bbc:	68f9      	ldr	r1, [r7, #12]
 8006bbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c02:	f023 0302 	bic.w	r3, r3, #2
 8006c06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b085      	sub	sp, #20
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006c30:	f023 0303 	bic.w	r3, r3, #3
 8006c34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c44:	f043 0302 	orr.w	r3, r3, #2
 8006c48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c70:	68fb      	ldr	r3, [r7, #12]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b085      	sub	sp, #20
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	0c1b      	lsrs	r3, r3, #16
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	b29b      	uxth	r3, r3
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006cf6:	78fb      	ldrb	r3, [r7, #3]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	4013      	ands	r3, r2
 8006d12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d14:	68bb      	ldr	r3, [r7, #8]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b087      	sub	sp, #28
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d46:	78fb      	ldrb	r3, [r7, #3]
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d52:	01db      	lsls	r3, r3, #7
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d70:	68bb      	ldr	r3, [r7, #8]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006db4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006db8:	f023 0307 	bic.w	r3, r3, #7
 8006dbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	460b      	mov	r3, r1
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	333c      	adds	r3, #60	@ 0x3c
 8006df6:	3304      	adds	r3, #4
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	4a26      	ldr	r2, [pc, #152]	@ (8006e98 <USB_EP0_OutStart+0xb8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d90a      	bls.n	8006e1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e14:	d101      	bne.n	8006e1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e037      	b.n	8006e8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e20:	461a      	mov	r2, r3
 8006e22:	2300      	movs	r3, #0
 8006e24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e48:	f043 0318 	orr.w	r3, r3, #24
 8006e4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e5c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006e60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e62:	7afb      	ldrb	r3, [r7, #11]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d10f      	bne.n	8006e88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6e:	461a      	mov	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e82:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006e86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	4f54300a 	.word	0x4f54300a

08006e9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eb4:	d901      	bls.n	8006eba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e022      	b.n	8006f00 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	daf2      	bge.n	8006ea8 <USB_CoreReset+0xc>

  count = 10U;
 8006ec2:	230a      	movs	r3, #10
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006ec6:	e002      	b.n	8006ece <USB_CoreReset+0x32>
  {
    count--;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1f9      	bne.n	8006ec8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	f043 0201 	orr.w	r2, r3, #1
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eec:	d901      	bls.n	8006ef2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e006      	b.n	8006f00 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d0f0      	beq.n	8006ee0 <USB_CoreReset+0x44>

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f18:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006f1c:	f002 fcbc 	bl	8009898 <USBD_static_malloc>
 8006f20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d109      	bne.n	8006f3c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	32b0      	adds	r2, #176	@ 0xb0
 8006f32:	2100      	movs	r1, #0
 8006f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e0d4      	b.n	80070e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006f3c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006f40:	2100      	movs	r1, #0
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f003 fcad 	bl	800a8a2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	32b0      	adds	r2, #176	@ 0xb0
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	32b0      	adds	r2, #176	@ 0xb0
 8006f62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	7c1b      	ldrb	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d138      	bne.n	8006fe6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f74:	4b5e      	ldr	r3, [pc, #376]	@ (80070f0 <USBD_CDC_Init+0x1e4>)
 8006f76:	7819      	ldrb	r1, [r3, #0]
 8006f78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f002 fb67 	bl	8009652 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f84:	4b5a      	ldr	r3, [pc, #360]	@ (80070f0 <USBD_CDC_Init+0x1e4>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	f003 020f 	and.w	r2, r3, #15
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	440b      	add	r3, r1
 8006f98:	3323      	adds	r3, #35	@ 0x23
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f9e:	4b55      	ldr	r3, [pc, #340]	@ (80070f4 <USBD_CDC_Init+0x1e8>)
 8006fa0:	7819      	ldrb	r1, [r3, #0]
 8006fa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f002 fb52 	bl	8009652 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006fae:	4b51      	ldr	r3, [pc, #324]	@ (80070f4 <USBD_CDC_Init+0x1e8>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	f003 020f 	and.w	r2, r3, #15
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006fca:	4b4b      	ldr	r3, [pc, #300]	@ (80070f8 <USBD_CDC_Init+0x1ec>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	f003 020f 	and.w	r2, r3, #15
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	440b      	add	r3, r1
 8006fde:	331c      	adds	r3, #28
 8006fe0:	2210      	movs	r2, #16
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	e035      	b.n	8007052 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fe6:	4b42      	ldr	r3, [pc, #264]	@ (80070f0 <USBD_CDC_Init+0x1e4>)
 8006fe8:	7819      	ldrb	r1, [r3, #0]
 8006fea:	2340      	movs	r3, #64	@ 0x40
 8006fec:	2202      	movs	r2, #2
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f002 fb2f 	bl	8009652 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80070f0 <USBD_CDC_Init+0x1e4>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	f003 020f 	and.w	r2, r3, #15
 8006ffc:	6879      	ldr	r1, [r7, #4]
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	440b      	add	r3, r1
 8007008:	3323      	adds	r3, #35	@ 0x23
 800700a:	2201      	movs	r2, #1
 800700c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800700e:	4b39      	ldr	r3, [pc, #228]	@ (80070f4 <USBD_CDC_Init+0x1e8>)
 8007010:	7819      	ldrb	r1, [r3, #0]
 8007012:	2340      	movs	r3, #64	@ 0x40
 8007014:	2202      	movs	r2, #2
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f002 fb1b 	bl	8009652 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800701c:	4b35      	ldr	r3, [pc, #212]	@ (80070f4 <USBD_CDC_Init+0x1e8>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	f003 020f 	and.w	r2, r3, #15
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007034:	2201      	movs	r2, #1
 8007036:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007038:	4b2f      	ldr	r3, [pc, #188]	@ (80070f8 <USBD_CDC_Init+0x1ec>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	f003 020f 	and.w	r2, r3, #15
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	331c      	adds	r3, #28
 800704e:	2210      	movs	r2, #16
 8007050:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007052:	4b29      	ldr	r3, [pc, #164]	@ (80070f8 <USBD_CDC_Init+0x1ec>)
 8007054:	7819      	ldrb	r1, [r3, #0]
 8007056:	2308      	movs	r3, #8
 8007058:	2203      	movs	r2, #3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f002 faf9 	bl	8009652 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007060:	4b25      	ldr	r3, [pc, #148]	@ (80070f8 <USBD_CDC_Init+0x1ec>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	f003 020f 	and.w	r2, r3, #15
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	440b      	add	r3, r1
 8007074:	3323      	adds	r3, #35	@ 0x23
 8007076:	2201      	movs	r2, #1
 8007078:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	33b0      	adds	r3, #176	@ 0xb0
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80070b0:	2302      	movs	r3, #2
 80070b2:	e018      	b.n	80070e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	7c1b      	ldrb	r3, [r3, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070bc:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <USBD_CDC_Init+0x1e8>)
 80070be:	7819      	ldrb	r1, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f002 fbb0 	bl	8009830 <USBD_LL_PrepareReceive>
 80070d0:	e008      	b.n	80070e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070d2:	4b08      	ldr	r3, [pc, #32]	@ (80070f4 <USBD_CDC_Init+0x1e8>)
 80070d4:	7819      	ldrb	r1, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070dc:	2340      	movs	r3, #64	@ 0x40
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f002 fba6 	bl	8009830 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20000093 	.word	0x20000093
 80070f4:	20000094 	.word	0x20000094
 80070f8:	20000095 	.word	0x20000095

080070fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007108:	4b3a      	ldr	r3, [pc, #232]	@ (80071f4 <USBD_CDC_DeInit+0xf8>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f002 fac5 	bl	800969e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007114:	4b37      	ldr	r3, [pc, #220]	@ (80071f4 <USBD_CDC_DeInit+0xf8>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	f003 020f 	and.w	r2, r3, #15
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	440b      	add	r3, r1
 8007128:	3323      	adds	r3, #35	@ 0x23
 800712a:	2200      	movs	r2, #0
 800712c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800712e:	4b32      	ldr	r3, [pc, #200]	@ (80071f8 <USBD_CDC_DeInit+0xfc>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f002 fab2 	bl	800969e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800713a:	4b2f      	ldr	r3, [pc, #188]	@ (80071f8 <USBD_CDC_DeInit+0xfc>)
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	f003 020f 	and.w	r2, r3, #15
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	4613      	mov	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	440b      	add	r3, r1
 800714e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007156:	4b29      	ldr	r3, [pc, #164]	@ (80071fc <USBD_CDC_DeInit+0x100>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f002 fa9e 	bl	800969e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007162:	4b26      	ldr	r3, [pc, #152]	@ (80071fc <USBD_CDC_DeInit+0x100>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	f003 020f 	and.w	r2, r3, #15
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	4613      	mov	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	440b      	add	r3, r1
 8007176:	3323      	adds	r3, #35	@ 0x23
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800717c:	4b1f      	ldr	r3, [pc, #124]	@ (80071fc <USBD_CDC_DeInit+0x100>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	f003 020f 	and.w	r2, r3, #15
 8007184:	6879      	ldr	r1, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	331c      	adds	r3, #28
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	32b0      	adds	r2, #176	@ 0xb0
 80071a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01f      	beq.n	80071e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	33b0      	adds	r3, #176	@ 0xb0
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	32b0      	adds	r2, #176	@ 0xb0
 80071c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f002 fb72 	bl	80098b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	32b0      	adds	r2, #176	@ 0xb0
 80071da:	2100      	movs	r1, #0
 80071dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000093 	.word	0x20000093
 80071f8:	20000094 	.word	0x20000094
 80071fc:	20000095 	.word	0x20000095

08007200 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	32b0      	adds	r2, #176	@ 0xb0
 8007214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007218:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800722c:	2303      	movs	r3, #3
 800722e:	e0bf      	b.n	80073b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007238:	2b00      	cmp	r3, #0
 800723a:	d050      	beq.n	80072de <USBD_CDC_Setup+0xde>
 800723c:	2b20      	cmp	r3, #32
 800723e:	f040 80af 	bne.w	80073a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	88db      	ldrh	r3, [r3, #6]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d03a      	beq.n	80072c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	b25b      	sxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	da1b      	bge.n	800728c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	33b0      	adds	r3, #176	@ 0xb0
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800726a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	88d2      	ldrh	r2, [r2, #6]
 8007270:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	88db      	ldrh	r3, [r3, #6]
 8007276:	2b07      	cmp	r3, #7
 8007278:	bf28      	it	cs
 800727a:	2307      	movcs	r3, #7
 800727c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	89fa      	ldrh	r2, [r7, #14]
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 fda9 	bl	8008ddc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800728a:	e090      	b.n	80073ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	785a      	ldrb	r2, [r3, #1]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	88db      	ldrh	r3, [r3, #6]
 800729a:	2b3f      	cmp	r3, #63	@ 0x3f
 800729c:	d803      	bhi.n	80072a6 <USBD_CDC_Setup+0xa6>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	88db      	ldrh	r3, [r3, #6]
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	e000      	b.n	80072a8 <USBD_CDC_Setup+0xa8>
 80072a6:	2240      	movs	r2, #64	@ 0x40
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80072ae:	6939      	ldr	r1, [r7, #16]
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80072b6:	461a      	mov	r2, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 fdbe 	bl	8008e3a <USBD_CtlPrepareRx>
      break;
 80072be:	e076      	b.n	80073ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	33b0      	adds	r3, #176	@ 0xb0
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	7850      	ldrb	r0, [r2, #1]
 80072d6:	2200      	movs	r2, #0
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	4798      	blx	r3
      break;
 80072dc:	e067      	b.n	80073ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	785b      	ldrb	r3, [r3, #1]
 80072e2:	2b0b      	cmp	r3, #11
 80072e4:	d851      	bhi.n	800738a <USBD_CDC_Setup+0x18a>
 80072e6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ec <USBD_CDC_Setup+0xec>)
 80072e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ec:	0800731d 	.word	0x0800731d
 80072f0:	08007399 	.word	0x08007399
 80072f4:	0800738b 	.word	0x0800738b
 80072f8:	0800738b 	.word	0x0800738b
 80072fc:	0800738b 	.word	0x0800738b
 8007300:	0800738b 	.word	0x0800738b
 8007304:	0800738b 	.word	0x0800738b
 8007308:	0800738b 	.word	0x0800738b
 800730c:	0800738b 	.word	0x0800738b
 8007310:	0800738b 	.word	0x0800738b
 8007314:	08007347 	.word	0x08007347
 8007318:	08007371 	.word	0x08007371
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b03      	cmp	r3, #3
 8007326:	d107      	bne.n	8007338 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007328:	f107 030a 	add.w	r3, r7, #10
 800732c:	2202      	movs	r2, #2
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 fd53 	bl	8008ddc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007336:	e032      	b.n	800739e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 fcd1 	bl	8008ce2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007340:	2303      	movs	r3, #3
 8007342:	75fb      	strb	r3, [r7, #23]
          break;
 8007344:	e02b      	b.n	800739e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b03      	cmp	r3, #3
 8007350:	d107      	bne.n	8007362 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007352:	f107 030d 	add.w	r3, r7, #13
 8007356:	2201      	movs	r2, #1
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 fd3e 	bl	8008ddc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007360:	e01d      	b.n	800739e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 fcbc 	bl	8008ce2 <USBD_CtlError>
            ret = USBD_FAIL;
 800736a:	2303      	movs	r3, #3
 800736c:	75fb      	strb	r3, [r7, #23]
          break;
 800736e:	e016      	b.n	800739e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b03      	cmp	r3, #3
 800737a:	d00f      	beq.n	800739c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 fcaf 	bl	8008ce2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007384:	2303      	movs	r3, #3
 8007386:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007388:	e008      	b.n	800739c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 fca8 	bl	8008ce2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007392:	2303      	movs	r3, #3
 8007394:	75fb      	strb	r3, [r7, #23]
          break;
 8007396:	e002      	b.n	800739e <USBD_CDC_Setup+0x19e>
          break;
 8007398:	bf00      	nop
 800739a:	e008      	b.n	80073ae <USBD_CDC_Setup+0x1ae>
          break;
 800739c:	bf00      	nop
      }
      break;
 800739e:	e006      	b.n	80073ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 fc9d 	bl	8008ce2 <USBD_CtlError>
      ret = USBD_FAIL;
 80073a8:	2303      	movs	r3, #3
 80073aa:	75fb      	strb	r3, [r7, #23]
      break;
 80073ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	32b0      	adds	r2, #176	@ 0xb0
 80073d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80073de:	2303      	movs	r3, #3
 80073e0:	e065      	b.n	80074ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	32b0      	adds	r2, #176	@ 0xb0
 80073ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	f003 020f 	and.w	r2, r3, #15
 80073f8:	6879      	ldr	r1, [r7, #4]
 80073fa:	4613      	mov	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	440b      	add	r3, r1
 8007404:	3314      	adds	r3, #20
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d02f      	beq.n	800746c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	f003 020f 	and.w	r2, r3, #15
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	3314      	adds	r3, #20
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	78fb      	ldrb	r3, [r7, #3]
 8007424:	f003 010f 	and.w	r1, r3, #15
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	460b      	mov	r3, r1
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	440b      	add	r3, r1
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4403      	add	r3, r0
 8007434:	331c      	adds	r3, #28
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	fbb2 f1f3 	udiv	r1, r2, r3
 800743c:	fb01 f303 	mul.w	r3, r1, r3
 8007440:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007442:	2b00      	cmp	r3, #0
 8007444:	d112      	bne.n	800746c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007446:	78fb      	ldrb	r3, [r7, #3]
 8007448:	f003 020f 	and.w	r2, r3, #15
 800744c:	6879      	ldr	r1, [r7, #4]
 800744e:	4613      	mov	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	440b      	add	r3, r1
 8007458:	3314      	adds	r3, #20
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800745e:	78f9      	ldrb	r1, [r7, #3]
 8007460:	2300      	movs	r3, #0
 8007462:	2200      	movs	r2, #0
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f002 f9c2 	bl	80097ee <USBD_LL_Transmit>
 800746a:	e01f      	b.n	80074ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	33b0      	adds	r3, #176	@ 0xb0
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d010      	beq.n	80074ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	33b0      	adds	r3, #176	@ 0xb0
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	460b      	mov	r3, r1
 80074c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	32b0      	adds	r2, #176	@ 0xb0
 80074cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	32b0      	adds	r2, #176	@ 0xb0
 80074dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e01a      	b.n	800751e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f002 f9c0 	bl	8009872 <USBD_LL_GetRxDataSize>
 80074f2:	4602      	mov	r2, r0
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	33b0      	adds	r3, #176	@ 0xb0
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007518:	4611      	mov	r1, r2
 800751a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	32b0      	adds	r2, #176	@ 0xb0
 8007538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007544:	2303      	movs	r3, #3
 8007546:	e024      	b.n	8007592 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	33b0      	adds	r3, #176	@ 0xb0
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d019      	beq.n	8007590 <USBD_CDC_EP0_RxReady+0x6a>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007562:	2bff      	cmp	r3, #255	@ 0xff
 8007564:	d014      	beq.n	8007590 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	33b0      	adds	r3, #176	@ 0xb0
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800757e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007586:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	22ff      	movs	r2, #255	@ 0xff
 800758c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
	...

0800759c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075a4:	2182      	movs	r1, #130	@ 0x82
 80075a6:	4818      	ldr	r0, [pc, #96]	@ (8007608 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075a8:	f000 fd62 	bl	8008070 <USBD_GetEpDesc>
 80075ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075ae:	2101      	movs	r1, #1
 80075b0:	4815      	ldr	r0, [pc, #84]	@ (8007608 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075b2:	f000 fd5d 	bl	8008070 <USBD_GetEpDesc>
 80075b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075b8:	2181      	movs	r1, #129	@ 0x81
 80075ba:	4813      	ldr	r0, [pc, #76]	@ (8007608 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075bc:	f000 fd58 	bl	8008070 <USBD_GetEpDesc>
 80075c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2210      	movs	r2, #16
 80075cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d006      	beq.n	80075e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075dc:	711a      	strb	r2, [r3, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d006      	beq.n	80075f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075f0:	711a      	strb	r2, [r3, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2243      	movs	r2, #67	@ 0x43
 80075fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075fc:	4b02      	ldr	r3, [pc, #8]	@ (8007608 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000050 	.word	0x20000050

0800760c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007614:	2182      	movs	r1, #130	@ 0x82
 8007616:	4818      	ldr	r0, [pc, #96]	@ (8007678 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007618:	f000 fd2a 	bl	8008070 <USBD_GetEpDesc>
 800761c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800761e:	2101      	movs	r1, #1
 8007620:	4815      	ldr	r0, [pc, #84]	@ (8007678 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007622:	f000 fd25 	bl	8008070 <USBD_GetEpDesc>
 8007626:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007628:	2181      	movs	r1, #129	@ 0x81
 800762a:	4813      	ldr	r0, [pc, #76]	@ (8007678 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800762c:	f000 fd20 	bl	8008070 <USBD_GetEpDesc>
 8007630:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2210      	movs	r2, #16
 800763c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d006      	beq.n	8007652 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	2200      	movs	r2, #0
 8007648:	711a      	strb	r2, [r3, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f042 0202 	orr.w	r2, r2, #2
 8007650:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d006      	beq.n	8007666 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	711a      	strb	r2, [r3, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f042 0202 	orr.w	r2, r2, #2
 8007664:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2243      	movs	r2, #67	@ 0x43
 800766a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800766c:	4b02      	ldr	r3, [pc, #8]	@ (8007678 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800766e:	4618      	mov	r0, r3
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000050 	.word	0x20000050

0800767c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007684:	2182      	movs	r1, #130	@ 0x82
 8007686:	4818      	ldr	r0, [pc, #96]	@ (80076e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007688:	f000 fcf2 	bl	8008070 <USBD_GetEpDesc>
 800768c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800768e:	2101      	movs	r1, #1
 8007690:	4815      	ldr	r0, [pc, #84]	@ (80076e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007692:	f000 fced 	bl	8008070 <USBD_GetEpDesc>
 8007696:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007698:	2181      	movs	r1, #129	@ 0x81
 800769a:	4813      	ldr	r0, [pc, #76]	@ (80076e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800769c:	f000 fce8 	bl	8008070 <USBD_GetEpDesc>
 80076a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	2210      	movs	r2, #16
 80076ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d006      	beq.n	80076c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076bc:	711a      	strb	r2, [r3, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d006      	beq.n	80076d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076d0:	711a      	strb	r2, [r3, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2243      	movs	r2, #67	@ 0x43
 80076da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80076dc:	4b02      	ldr	r3, [pc, #8]	@ (80076e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20000050 	.word	0x20000050

080076ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	220a      	movs	r2, #10
 80076f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80076fa:	4b03      	ldr	r3, [pc, #12]	@ (8007708 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	2000000c 	.word	0x2000000c

0800770c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800771c:	2303      	movs	r3, #3
 800771e:	e009      	b.n	8007734 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	33b0      	adds	r3, #176	@ 0xb0
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	32b0      	adds	r2, #176	@ 0xb0
 8007756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007762:	2303      	movs	r3, #3
 8007764:	e008      	b.n	8007778 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	371c      	adds	r7, #28
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	32b0      	adds	r2, #176	@ 0xb0
 8007798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e004      	b.n	80077b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
	...

080077c0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	32b0      	adds	r2, #176	@ 0xb0
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e025      	b.n	8007832 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d11f      	bne.n	8007830 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80077f8:	4b10      	ldr	r3, [pc, #64]	@ (800783c <USBD_CDC_TransmitPacket+0x7c>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	f003 020f 	and.w	r2, r3, #15
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4613      	mov	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4403      	add	r3, r0
 8007812:	3314      	adds	r3, #20
 8007814:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007816:	4b09      	ldr	r3, [pc, #36]	@ (800783c <USBD_CDC_TransmitPacket+0x7c>)
 8007818:	7819      	ldrb	r1, [r3, #0]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 ffe1 	bl	80097ee <USBD_LL_Transmit>

    ret = USBD_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000093 	.word	0x20000093

08007840 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	32b0      	adds	r2, #176	@ 0xb0
 8007852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007856:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	32b0      	adds	r2, #176	@ 0xb0
 8007862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800786a:	2303      	movs	r3, #3
 800786c:	e018      	b.n	80078a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	7c1b      	ldrb	r3, [r3, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10a      	bne.n	800788c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007876:	4b0c      	ldr	r3, [pc, #48]	@ (80078a8 <USBD_CDC_ReceivePacket+0x68>)
 8007878:	7819      	ldrb	r1, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007880:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 ffd3 	bl	8009830 <USBD_LL_PrepareReceive>
 800788a:	e008      	b.n	800789e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800788c:	4b06      	ldr	r3, [pc, #24]	@ (80078a8 <USBD_CDC_ReceivePacket+0x68>)
 800788e:	7819      	ldrb	r1, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007896:	2340      	movs	r3, #64	@ 0x40
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f001 ffc9 	bl	8009830 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20000094 	.word	0x20000094

080078ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e01f      	b.n	8007904 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	79fa      	ldrb	r2, [r7, #7]
 80078f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f001 fe43 	bl	8009584 <USBD_LL_Init>
 80078fe:	4603      	mov	r3, r0
 8007900:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007902:	7dfb      	ldrb	r3, [r7, #23]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007920:	2303      	movs	r3, #3
 8007922:	e025      	b.n	8007970 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	32ae      	adds	r2, #174	@ 0xae
 8007936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00f      	beq.n	8007960 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	32ae      	adds	r2, #174	@ 0xae
 800794a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007950:	f107 020e 	add.w	r2, r7, #14
 8007954:	4610      	mov	r0, r2
 8007956:	4798      	blx	r3
 8007958:	4602      	mov	r2, r0
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 fe4b 	bl	800961c <USBD_LL_Start>
 8007986:	4603      	mov	r3, r0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007998:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800799a:	4618      	mov	r0, r3
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d009      	beq.n	80079d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	78fa      	ldrb	r2, [r7, #3]
 80079ca:	4611      	mov	r1, r2
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
 80079d0:	4603      	mov	r3, r0
 80079d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	460b      	mov	r3, r1
 80079e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	78fa      	ldrb	r2, [r7, #3]
 80079f8:	4611      	mov	r1, r2
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	4798      	blx	r3
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007a04:	2303      	movs	r3, #3
 8007a06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f001 f922 	bl	8008c6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007a38:	461a      	mov	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a46:	f003 031f 	and.w	r3, r3, #31
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d01a      	beq.n	8007a84 <USBD_LL_SetupStage+0x72>
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d822      	bhi.n	8007a98 <USBD_LL_SetupStage+0x86>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <USBD_LL_SetupStage+0x4a>
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d00a      	beq.n	8007a70 <USBD_LL_SetupStage+0x5e>
 8007a5a:	e01d      	b.n	8007a98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fb77 	bl	8008158 <USBD_StdDevReq>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6e:	e020      	b.n	8007ab2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fbdf 	bl	800823c <USBD_StdItfReq>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	73fb      	strb	r3, [r7, #15]
      break;
 8007a82:	e016      	b.n	8007ab2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fc41 	bl	8008314 <USBD_StdEPReq>
 8007a92:	4603      	mov	r3, r0
 8007a94:	73fb      	strb	r3, [r7, #15]
      break;
 8007a96:	e00c      	b.n	8007ab2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 fe18 	bl	80096dc <USBD_LL_StallEP>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab0:	bf00      	nop
  }

  return ret;
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	607a      	str	r2, [r7, #4]
 8007ac8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007ace:	7afb      	ldrb	r3, [r7, #11]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d177      	bne.n	8007bc4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007ada:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	f040 80a1 	bne.w	8007c2a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	8992      	ldrh	r2, [r2, #12]
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d91c      	bls.n	8007b2e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	8992      	ldrh	r2, [r2, #12]
 8007afc:	1a9a      	subs	r2, r3, r2
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	8992      	ldrh	r2, [r2, #12]
 8007b0a:	441a      	add	r2, r3
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	6919      	ldr	r1, [r3, #16]
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	899b      	ldrh	r3, [r3, #12]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	bf38      	it	cc
 8007b22:	4613      	movcc	r3, r2
 8007b24:	461a      	mov	r2, r3
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f001 f9a8 	bl	8008e7c <USBD_CtlContinueRx>
 8007b2c:	e07d      	b.n	8007c2a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b34:	f003 031f 	and.w	r3, r3, #31
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d014      	beq.n	8007b66 <USBD_LL_DataOutStage+0xaa>
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d81d      	bhi.n	8007b7c <USBD_LL_DataOutStage+0xc0>
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <USBD_LL_DataOutStage+0x8e>
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d003      	beq.n	8007b50 <USBD_LL_DataOutStage+0x94>
 8007b48:	e018      	b.n	8007b7c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	75bb      	strb	r3, [r7, #22]
            break;
 8007b4e:	e018      	b.n	8007b82 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	4619      	mov	r1, r3
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f000 fa6e 	bl	800803c <USBD_CoreFindIF>
 8007b60:	4603      	mov	r3, r0
 8007b62:	75bb      	strb	r3, [r7, #22]
            break;
 8007b64:	e00d      	b.n	8007b82 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	4619      	mov	r1, r3
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 fa70 	bl	8008056 <USBD_CoreFindEP>
 8007b76:	4603      	mov	r3, r0
 8007b78:	75bb      	strb	r3, [r7, #22]
            break;
 8007b7a:	e002      	b.n	8007b82 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	75bb      	strb	r3, [r7, #22]
            break;
 8007b80:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007b82:	7dbb      	ldrb	r3, [r7, #22]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d119      	bne.n	8007bbc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d113      	bne.n	8007bbc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007b94:	7dba      	ldrb	r2, [r7, #22]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	32ae      	adds	r2, #174	@ 0xae
 8007b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00b      	beq.n	8007bbc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007ba4:	7dba      	ldrb	r2, [r7, #22]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007bac:	7dba      	ldrb	r2, [r7, #22]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	32ae      	adds	r2, #174	@ 0xae
 8007bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f001 f96e 	bl	8008e9e <USBD_CtlSendStatus>
 8007bc2:	e032      	b.n	8007c2a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
 8007bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	4619      	mov	r1, r3
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fa41 	bl	8008056 <USBD_CoreFindEP>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bd8:	7dbb      	ldrb	r3, [r7, #22]
 8007bda:	2bff      	cmp	r3, #255	@ 0xff
 8007bdc:	d025      	beq.n	8007c2a <USBD_LL_DataOutStage+0x16e>
 8007bde:	7dbb      	ldrb	r3, [r7, #22]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d122      	bne.n	8007c2a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d117      	bne.n	8007c20 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007bf0:	7dba      	ldrb	r2, [r7, #22]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	32ae      	adds	r2, #174	@ 0xae
 8007bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00f      	beq.n	8007c20 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007c00:	7dba      	ldrb	r2, [r7, #22]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007c08:	7dba      	ldrb	r2, [r7, #22]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	32ae      	adds	r2, #174	@ 0xae
 8007c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	7afa      	ldrb	r2, [r7, #11]
 8007c16:	4611      	mov	r1, r2
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	4798      	blx	r3
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007c20:	7dfb      	ldrb	r3, [r7, #23]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	e000      	b.n	8007c2c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007c42:	7afb      	ldrb	r3, [r7, #11]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d178      	bne.n	8007d3a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3314      	adds	r3, #20
 8007c4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d163      	bne.n	8007d20 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	8992      	ldrh	r2, [r2, #12]
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d91c      	bls.n	8007c9e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	8992      	ldrh	r2, [r2, #12]
 8007c6c:	1a9a      	subs	r2, r3, r2
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	8992      	ldrh	r2, [r2, #12]
 8007c7a:	441a      	add	r2, r3
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	6919      	ldr	r1, [r3, #16]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f001 f8c4 	bl	8008e18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c90:	2300      	movs	r3, #0
 8007c92:	2200      	movs	r2, #0
 8007c94:	2100      	movs	r1, #0
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f001 fdca 	bl	8009830 <USBD_LL_PrepareReceive>
 8007c9c:	e040      	b.n	8007d20 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	899b      	ldrh	r3, [r3, #12]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d11c      	bne.n	8007ce6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d316      	bcc.n	8007ce6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d20f      	bcs.n	8007ce6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2100      	movs	r1, #0
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f001 f8a4 	bl	8008e18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cd8:	2300      	movs	r3, #0
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2100      	movs	r1, #0
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f001 fda6 	bl	8009830 <USBD_LL_PrepareReceive>
 8007ce4:	e01c      	b.n	8007d20 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d10f      	bne.n	8007d12 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d12:	2180      	movs	r1, #128	@ 0x80
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f001 fce1 	bl	80096dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f001 f8d2 	bl	8008ec4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d03a      	beq.n	8007da0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f7ff fe30 	bl	8007990 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007d38:	e032      	b.n	8007da0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007d3a:	7afb      	ldrb	r3, [r7, #11]
 8007d3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	4619      	mov	r1, r3
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 f986 	bl	8008056 <USBD_CoreFindEP>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	2bff      	cmp	r3, #255	@ 0xff
 8007d52:	d025      	beq.n	8007da0 <USBD_LL_DataInStage+0x16c>
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d122      	bne.n	8007da0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d11c      	bne.n	8007da0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007d66:	7dfa      	ldrb	r2, [r7, #23]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	32ae      	adds	r2, #174	@ 0xae
 8007d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d014      	beq.n	8007da0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007d76:	7dfa      	ldrb	r2, [r7, #23]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007d7e:	7dfa      	ldrb	r2, [r7, #23]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	32ae      	adds	r2, #174	@ 0xae
 8007d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	7afa      	ldrb	r2, [r7, #11]
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	4798      	blx	r3
 8007d92:	4603      	mov	r3, r0
 8007d94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007d96:	7dbb      	ldrb	r3, [r7, #22]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007d9c:	7dbb      	ldrb	r3, [r7, #22]
 8007d9e:	e000      	b.n	8007da2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d014      	beq.n	8007e10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00e      	beq.n	8007e10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	6852      	ldr	r2, [r2, #4]
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	4611      	mov	r1, r2
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e10:	2340      	movs	r3, #64	@ 0x40
 8007e12:	2200      	movs	r2, #0
 8007e14:	2100      	movs	r1, #0
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 fc1b 	bl	8009652 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2240      	movs	r2, #64	@ 0x40
 8007e28:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e2c:	2340      	movs	r3, #64	@ 0x40
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2180      	movs	r1, #128	@ 0x80
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 fc0d 	bl	8009652 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2240      	movs	r2, #64	@ 0x40
 8007e44:	841a      	strh	r2, [r3, #32]

  return ret;
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	78fa      	ldrb	r2, [r7, #3]
 8007e60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d006      	beq.n	8007e92 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2204      	movs	r2, #4
 8007e96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d106      	bne.n	8007eca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d110      	bne.n	8007f0e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00b      	beq.n	8007f0e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d005      	beq.n	8007f0e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	32ae      	adds	r2, #174	@ 0xae
 8007f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e01c      	b.n	8007f74 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d115      	bne.n	8007f72 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	32ae      	adds	r2, #174	@ 0xae
 8007f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00b      	beq.n	8007f72 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	32ae      	adds	r2, #174	@ 0xae
 8007f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	78fa      	ldrb	r2, [r7, #3]
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	32ae      	adds	r2, #174	@ 0xae
 8007f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e01c      	b.n	8007fd8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d115      	bne.n	8007fd6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	32ae      	adds	r2, #174	@ 0xae
 8007fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	32ae      	adds	r2, #174	@ 0xae
 8007fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00e      	beq.n	8008032 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6852      	ldr	r2, [r2, #4]
 8008020:	b2d2      	uxtb	r2, r2
 8008022:	4611      	mov	r1, r2
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	4798      	blx	r3
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800802e:	2303      	movs	r3, #3
 8008030:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008048:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800804a:	4618      	mov	r0, r3
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	460b      	mov	r3, r1
 8008060:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008062:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008084:	2300      	movs	r3, #0
 8008086:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	885b      	ldrh	r3, [r3, #2]
 800808c:	b29b      	uxth	r3, r3
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	7812      	ldrb	r2, [r2, #0]
 8008092:	4293      	cmp	r3, r2
 8008094:	d91f      	bls.n	80080d6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800809c:	e013      	b.n	80080c6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800809e:	f107 030a 	add.w	r3, r7, #10
 80080a2:	4619      	mov	r1, r3
 80080a4:	6978      	ldr	r0, [r7, #20]
 80080a6:	f000 f81b 	bl	80080e0 <USBD_GetNextDesc>
 80080aa:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	785b      	ldrb	r3, [r3, #1]
 80080b0:	2b05      	cmp	r3, #5
 80080b2:	d108      	bne.n	80080c6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	789b      	ldrb	r3, [r3, #2]
 80080bc:	78fa      	ldrb	r2, [r7, #3]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d008      	beq.n	80080d4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	885b      	ldrh	r3, [r3, #2]
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	897b      	ldrh	r3, [r7, #10]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d8e5      	bhi.n	800809e <USBD_GetEpDesc+0x2e>
 80080d2:	e000      	b.n	80080d6 <USBD_GetEpDesc+0x66>
          break;
 80080d4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80080d6:	693b      	ldr	r3, [r7, #16]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	7812      	ldrb	r2, [r2, #0]
 80080f6:	4413      	add	r3, r2
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4413      	add	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800810a:	68fb      	ldr	r3, [r7, #12]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	3301      	adds	r3, #1
 800812e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008136:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800813a:	021b      	lsls	r3, r3, #8
 800813c:	b21a      	sxth	r2, r3
 800813e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008142:	4313      	orrs	r3, r2
 8008144:	b21b      	sxth	r3, r3
 8008146:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008148:	89fb      	ldrh	r3, [r7, #14]
}
 800814a:	4618      	mov	r0, r3
 800814c:	371c      	adds	r7, #28
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
	...

08008158 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800816e:	2b40      	cmp	r3, #64	@ 0x40
 8008170:	d005      	beq.n	800817e <USBD_StdDevReq+0x26>
 8008172:	2b40      	cmp	r3, #64	@ 0x40
 8008174:	d857      	bhi.n	8008226 <USBD_StdDevReq+0xce>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00f      	beq.n	800819a <USBD_StdDevReq+0x42>
 800817a:	2b20      	cmp	r3, #32
 800817c:	d153      	bne.n	8008226 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	32ae      	adds	r2, #174	@ 0xae
 8008188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	4798      	blx	r3
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]
      break;
 8008198:	e04a      	b.n	8008230 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	2b09      	cmp	r3, #9
 80081a0:	d83b      	bhi.n	800821a <USBD_StdDevReq+0xc2>
 80081a2:	a201      	add	r2, pc, #4	@ (adr r2, 80081a8 <USBD_StdDevReq+0x50>)
 80081a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a8:	080081fd 	.word	0x080081fd
 80081ac:	08008211 	.word	0x08008211
 80081b0:	0800821b 	.word	0x0800821b
 80081b4:	08008207 	.word	0x08008207
 80081b8:	0800821b 	.word	0x0800821b
 80081bc:	080081db 	.word	0x080081db
 80081c0:	080081d1 	.word	0x080081d1
 80081c4:	0800821b 	.word	0x0800821b
 80081c8:	080081f3 	.word	0x080081f3
 80081cc:	080081e5 	.word	0x080081e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa3e 	bl	8008654 <USBD_GetDescriptor>
          break;
 80081d8:	e024      	b.n	8008224 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fba3 	bl	8008928 <USBD_SetAddress>
          break;
 80081e2:	e01f      	b.n	8008224 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fbe2 	bl	80089b0 <USBD_SetConfig>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]
          break;
 80081f0:	e018      	b.n	8008224 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fc85 	bl	8008b04 <USBD_GetConfig>
          break;
 80081fa:	e013      	b.n	8008224 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fcb6 	bl	8008b70 <USBD_GetStatus>
          break;
 8008204:	e00e      	b.n	8008224 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fce5 	bl	8008bd8 <USBD_SetFeature>
          break;
 800820e:	e009      	b.n	8008224 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fd09 	bl	8008c2a <USBD_ClrFeature>
          break;
 8008218:	e004      	b.n	8008224 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fd60 	bl	8008ce2 <USBD_CtlError>
          break;
 8008222:	bf00      	nop
      }
      break;
 8008224:	e004      	b.n	8008230 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fd5a 	bl	8008ce2 <USBD_CtlError>
      break;
 800822e:	bf00      	nop
  }

  return ret;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop

0800823c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008252:	2b40      	cmp	r3, #64	@ 0x40
 8008254:	d005      	beq.n	8008262 <USBD_StdItfReq+0x26>
 8008256:	2b40      	cmp	r3, #64	@ 0x40
 8008258:	d852      	bhi.n	8008300 <USBD_StdItfReq+0xc4>
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <USBD_StdItfReq+0x26>
 800825e:	2b20      	cmp	r3, #32
 8008260:	d14e      	bne.n	8008300 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008268:	b2db      	uxtb	r3, r3
 800826a:	3b01      	subs	r3, #1
 800826c:	2b02      	cmp	r3, #2
 800826e:	d840      	bhi.n	80082f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	889b      	ldrh	r3, [r3, #4]
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b01      	cmp	r3, #1
 8008278:	d836      	bhi.n	80082e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	889b      	ldrh	r3, [r3, #4]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff feda 	bl	800803c <USBD_CoreFindIF>
 8008288:	4603      	mov	r3, r0
 800828a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	2bff      	cmp	r3, #255	@ 0xff
 8008290:	d01d      	beq.n	80082ce <USBD_StdItfReq+0x92>
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d11a      	bne.n	80082ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008298:	7bba      	ldrb	r2, [r7, #14]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	32ae      	adds	r2, #174	@ 0xae
 800829e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00f      	beq.n	80082c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80082a8:	7bba      	ldrb	r2, [r7, #14]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082b0:	7bba      	ldrb	r2, [r7, #14]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	32ae      	adds	r2, #174	@ 0xae
 80082b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80082c6:	e004      	b.n	80082d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80082c8:	2303      	movs	r3, #3
 80082ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80082cc:	e001      	b.n	80082d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80082ce:	2303      	movs	r3, #3
 80082d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	88db      	ldrh	r3, [r3, #6]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d110      	bne.n	80082fc <USBD_StdItfReq+0xc0>
 80082da:	7bfb      	ldrb	r3, [r7, #15]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10d      	bne.n	80082fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fddc 	bl	8008e9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082e6:	e009      	b.n	80082fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fcf9 	bl	8008ce2 <USBD_CtlError>
          break;
 80082f0:	e004      	b.n	80082fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fcf4 	bl	8008ce2 <USBD_CtlError>
          break;
 80082fa:	e000      	b.n	80082fe <USBD_StdItfReq+0xc2>
          break;
 80082fc:	bf00      	nop
      }
      break;
 80082fe:	e004      	b.n	800830a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fced 	bl	8008ce2 <USBD_CtlError>
      break;
 8008308:	bf00      	nop
  }

  return ret;
 800830a:	7bfb      	ldrb	r3, [r7, #15]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	889b      	ldrh	r3, [r3, #4]
 8008326:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008330:	2b40      	cmp	r3, #64	@ 0x40
 8008332:	d007      	beq.n	8008344 <USBD_StdEPReq+0x30>
 8008334:	2b40      	cmp	r3, #64	@ 0x40
 8008336:	f200 8181 	bhi.w	800863c <USBD_StdEPReq+0x328>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d02a      	beq.n	8008394 <USBD_StdEPReq+0x80>
 800833e:	2b20      	cmp	r3, #32
 8008340:	f040 817c 	bne.w	800863c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff fe84 	bl	8008056 <USBD_CoreFindEP>
 800834e:	4603      	mov	r3, r0
 8008350:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008352:	7b7b      	ldrb	r3, [r7, #13]
 8008354:	2bff      	cmp	r3, #255	@ 0xff
 8008356:	f000 8176 	beq.w	8008646 <USBD_StdEPReq+0x332>
 800835a:	7b7b      	ldrb	r3, [r7, #13]
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 8172 	bne.w	8008646 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008362:	7b7a      	ldrb	r2, [r7, #13]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800836a:	7b7a      	ldrb	r2, [r7, #13]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	32ae      	adds	r2, #174	@ 0xae
 8008370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	f000 8165 	beq.w	8008646 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800837c:	7b7a      	ldrb	r2, [r7, #13]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	32ae      	adds	r2, #174	@ 0xae
 8008382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	4798      	blx	r3
 800838e:	4603      	mov	r3, r0
 8008390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008392:	e158      	b.n	8008646 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	785b      	ldrb	r3, [r3, #1]
 8008398:	2b03      	cmp	r3, #3
 800839a:	d008      	beq.n	80083ae <USBD_StdEPReq+0x9a>
 800839c:	2b03      	cmp	r3, #3
 800839e:	f300 8147 	bgt.w	8008630 <USBD_StdEPReq+0x31c>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 809b 	beq.w	80084de <USBD_StdEPReq+0x1ca>
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d03c      	beq.n	8008426 <USBD_StdEPReq+0x112>
 80083ac:	e140      	b.n	8008630 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d002      	beq.n	80083c0 <USBD_StdEPReq+0xac>
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d016      	beq.n	80083ec <USBD_StdEPReq+0xd8>
 80083be:	e02c      	b.n	800841a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00d      	beq.n	80083e2 <USBD_StdEPReq+0xce>
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	2b80      	cmp	r3, #128	@ 0x80
 80083ca:	d00a      	beq.n	80083e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 f983 	bl	80096dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083d6:	2180      	movs	r1, #128	@ 0x80
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 f97f 	bl	80096dc <USBD_LL_StallEP>
 80083de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083e0:	e020      	b.n	8008424 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fc7c 	bl	8008ce2 <USBD_CtlError>
              break;
 80083ea:	e01b      	b.n	8008424 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	885b      	ldrh	r3, [r3, #2]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10e      	bne.n	8008412 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00b      	beq.n	8008412 <USBD_StdEPReq+0xfe>
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	2b80      	cmp	r3, #128	@ 0x80
 80083fe:	d008      	beq.n	8008412 <USBD_StdEPReq+0xfe>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	88db      	ldrh	r3, [r3, #6]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 f965 	bl	80096dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fd43 	bl	8008e9e <USBD_CtlSendStatus>

              break;
 8008418:	e004      	b.n	8008424 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fc60 	bl	8008ce2 <USBD_CtlError>
              break;
 8008422:	bf00      	nop
          }
          break;
 8008424:	e109      	b.n	800863a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d002      	beq.n	8008438 <USBD_StdEPReq+0x124>
 8008432:	2b03      	cmp	r3, #3
 8008434:	d016      	beq.n	8008464 <USBD_StdEPReq+0x150>
 8008436:	e04b      	b.n	80084d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00d      	beq.n	800845a <USBD_StdEPReq+0x146>
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b80      	cmp	r3, #128	@ 0x80
 8008442:	d00a      	beq.n	800845a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 f947 	bl	80096dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800844e:	2180      	movs	r1, #128	@ 0x80
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 f943 	bl	80096dc <USBD_LL_StallEP>
 8008456:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008458:	e040      	b.n	80084dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fc40 	bl	8008ce2 <USBD_CtlError>
              break;
 8008462:	e03b      	b.n	80084dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	885b      	ldrh	r3, [r3, #2]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d136      	bne.n	80084da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008472:	2b00      	cmp	r3, #0
 8008474:	d004      	beq.n	8008480 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 f94d 	bl	800971a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fd0c 	bl	8008e9e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff fde3 	bl	8008056 <USBD_CoreFindEP>
 8008490:	4603      	mov	r3, r0
 8008492:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008494:	7b7b      	ldrb	r3, [r7, #13]
 8008496:	2bff      	cmp	r3, #255	@ 0xff
 8008498:	d01f      	beq.n	80084da <USBD_StdEPReq+0x1c6>
 800849a:	7b7b      	ldrb	r3, [r7, #13]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d11c      	bne.n	80084da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80084a0:	7b7a      	ldrb	r2, [r7, #13]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80084a8:	7b7a      	ldrb	r2, [r7, #13]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	32ae      	adds	r2, #174	@ 0xae
 80084ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d010      	beq.n	80084da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084b8:	7b7a      	ldrb	r2, [r7, #13]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	32ae      	adds	r2, #174	@ 0xae
 80084be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	4798      	blx	r3
 80084ca:	4603      	mov	r3, r0
 80084cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80084ce:	e004      	b.n	80084da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fc05 	bl	8008ce2 <USBD_CtlError>
              break;
 80084d8:	e000      	b.n	80084dc <USBD_StdEPReq+0x1c8>
              break;
 80084da:	bf00      	nop
          }
          break;
 80084dc:	e0ad      	b.n	800863a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d002      	beq.n	80084f0 <USBD_StdEPReq+0x1dc>
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d033      	beq.n	8008556 <USBD_StdEPReq+0x242>
 80084ee:	e099      	b.n	8008624 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d007      	beq.n	8008506 <USBD_StdEPReq+0x1f2>
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b80      	cmp	r3, #128	@ 0x80
 80084fa:	d004      	beq.n	8008506 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fbef 	bl	8008ce2 <USBD_CtlError>
                break;
 8008504:	e093      	b.n	800862e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008506:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800850a:	2b00      	cmp	r3, #0
 800850c:	da0b      	bge.n	8008526 <USBD_StdEPReq+0x212>
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	3310      	adds	r3, #16
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	4413      	add	r3, r2
 8008522:	3304      	adds	r3, #4
 8008524:	e00b      	b.n	800853e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008526:	7bbb      	ldrb	r3, [r7, #14]
 8008528:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	4413      	add	r3, r2
 800853c:	3304      	adds	r3, #4
 800853e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2200      	movs	r2, #0
 8008544:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	330e      	adds	r3, #14
 800854a:	2202      	movs	r2, #2
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fc44 	bl	8008ddc <USBD_CtlSendData>
              break;
 8008554:	e06b      	b.n	800862e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008556:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800855a:	2b00      	cmp	r3, #0
 800855c:	da11      	bge.n	8008582 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800855e:	7bbb      	ldrb	r3, [r7, #14]
 8008560:	f003 020f 	and.w	r2, r3, #15
 8008564:	6879      	ldr	r1, [r7, #4]
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	440b      	add	r3, r1
 8008570:	3323      	adds	r3, #35	@ 0x23
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d117      	bne.n	80085a8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fbb1 	bl	8008ce2 <USBD_CtlError>
                  break;
 8008580:	e055      	b.n	800862e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008582:	7bbb      	ldrb	r3, [r7, #14]
 8008584:	f003 020f 	and.w	r2, r3, #15
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d104      	bne.n	80085a8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fb9e 	bl	8008ce2 <USBD_CtlError>
                  break;
 80085a6:	e042      	b.n	800862e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	da0b      	bge.n	80085c8 <USBD_StdEPReq+0x2b4>
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	3310      	adds	r3, #16
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	4413      	add	r3, r2
 80085c4:	3304      	adds	r3, #4
 80085c6:	e00b      	b.n	80085e0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
 80085ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085ce:	4613      	mov	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	4413      	add	r3, r2
 80085de:	3304      	adds	r3, #4
 80085e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <USBD_StdEPReq+0x2da>
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
 80085ea:	2b80      	cmp	r3, #128	@ 0x80
 80085ec:	d103      	bne.n	80085f6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2200      	movs	r2, #0
 80085f2:	739a      	strb	r2, [r3, #14]
 80085f4:	e00e      	b.n	8008614 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 f8ac 	bl	8009758 <USBD_LL_IsStallEP>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2201      	movs	r2, #1
 800860a:	739a      	strb	r2, [r3, #14]
 800860c:	e002      	b.n	8008614 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2200      	movs	r2, #0
 8008612:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	330e      	adds	r3, #14
 8008618:	2202      	movs	r2, #2
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fbdd 	bl	8008ddc <USBD_CtlSendData>
              break;
 8008622:	e004      	b.n	800862e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fb5b 	bl	8008ce2 <USBD_CtlError>
              break;
 800862c:	bf00      	nop
          }
          break;
 800862e:	e004      	b.n	800863a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fb55 	bl	8008ce2 <USBD_CtlError>
          break;
 8008638:	bf00      	nop
      }
      break;
 800863a:	e005      	b.n	8008648 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fb4f 	bl	8008ce2 <USBD_CtlError>
      break;
 8008644:	e000      	b.n	8008648 <USBD_StdEPReq+0x334>
      break;
 8008646:	bf00      	nop
  }

  return ret;
 8008648:	7bfb      	ldrb	r3, [r7, #15]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008662:	2300      	movs	r3, #0
 8008664:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008666:	2300      	movs	r3, #0
 8008668:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	885b      	ldrh	r3, [r3, #2]
 800866e:	0a1b      	lsrs	r3, r3, #8
 8008670:	b29b      	uxth	r3, r3
 8008672:	3b01      	subs	r3, #1
 8008674:	2b06      	cmp	r3, #6
 8008676:	f200 8128 	bhi.w	80088ca <USBD_GetDescriptor+0x276>
 800867a:	a201      	add	r2, pc, #4	@ (adr r2, 8008680 <USBD_GetDescriptor+0x2c>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	0800869d 	.word	0x0800869d
 8008684:	080086b5 	.word	0x080086b5
 8008688:	080086f5 	.word	0x080086f5
 800868c:	080088cb 	.word	0x080088cb
 8008690:	080088cb 	.word	0x080088cb
 8008694:	0800886b 	.word	0x0800886b
 8008698:	08008897 	.word	0x08008897
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	7c12      	ldrb	r2, [r2, #16]
 80086a8:	f107 0108 	add.w	r1, r7, #8
 80086ac:	4610      	mov	r0, r2
 80086ae:	4798      	blx	r3
 80086b0:	60f8      	str	r0, [r7, #12]
      break;
 80086b2:	e112      	b.n	80088da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	7c1b      	ldrb	r3, [r3, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10d      	bne.n	80086d8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c4:	f107 0208 	add.w	r2, r7, #8
 80086c8:	4610      	mov	r0, r2
 80086ca:	4798      	blx	r3
 80086cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3301      	adds	r3, #1
 80086d2:	2202      	movs	r2, #2
 80086d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086d6:	e100      	b.n	80088da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e0:	f107 0208 	add.w	r2, r7, #8
 80086e4:	4610      	mov	r0, r2
 80086e6:	4798      	blx	r3
 80086e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3301      	adds	r3, #1
 80086ee:	2202      	movs	r2, #2
 80086f0:	701a      	strb	r2, [r3, #0]
      break;
 80086f2:	e0f2      	b.n	80088da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	885b      	ldrh	r3, [r3, #2]
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b05      	cmp	r3, #5
 80086fc:	f200 80ac 	bhi.w	8008858 <USBD_GetDescriptor+0x204>
 8008700:	a201      	add	r2, pc, #4	@ (adr r2, 8008708 <USBD_GetDescriptor+0xb4>)
 8008702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008706:	bf00      	nop
 8008708:	08008721 	.word	0x08008721
 800870c:	08008755 	.word	0x08008755
 8008710:	08008789 	.word	0x08008789
 8008714:	080087bd 	.word	0x080087bd
 8008718:	080087f1 	.word	0x080087f1
 800871c:	08008825 	.word	0x08008825
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00b      	beq.n	8008744 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	7c12      	ldrb	r2, [r2, #16]
 8008738:	f107 0108 	add.w	r1, r7, #8
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
 8008740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008742:	e091      	b.n	8008868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 facb 	bl	8008ce2 <USBD_CtlError>
            err++;
 800874c:	7afb      	ldrb	r3, [r7, #11]
 800874e:	3301      	adds	r3, #1
 8008750:	72fb      	strb	r3, [r7, #11]
          break;
 8008752:	e089      	b.n	8008868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00b      	beq.n	8008778 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	7c12      	ldrb	r2, [r2, #16]
 800876c:	f107 0108 	add.w	r1, r7, #8
 8008770:	4610      	mov	r0, r2
 8008772:	4798      	blx	r3
 8008774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008776:	e077      	b.n	8008868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fab1 	bl	8008ce2 <USBD_CtlError>
            err++;
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	3301      	adds	r3, #1
 8008784:	72fb      	strb	r3, [r7, #11]
          break;
 8008786:	e06f      	b.n	8008868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00b      	beq.n	80087ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	7c12      	ldrb	r2, [r2, #16]
 80087a0:	f107 0108 	add.w	r1, r7, #8
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
 80087a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087aa:	e05d      	b.n	8008868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa97 	bl	8008ce2 <USBD_CtlError>
            err++;
 80087b4:	7afb      	ldrb	r3, [r7, #11]
 80087b6:	3301      	adds	r3, #1
 80087b8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ba:	e055      	b.n	8008868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	7c12      	ldrb	r2, [r2, #16]
 80087d4:	f107 0108 	add.w	r1, r7, #8
 80087d8:	4610      	mov	r0, r2
 80087da:	4798      	blx	r3
 80087dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087de:	e043      	b.n	8008868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa7d 	bl	8008ce2 <USBD_CtlError>
            err++;
 80087e8:	7afb      	ldrb	r3, [r7, #11]
 80087ea:	3301      	adds	r3, #1
 80087ec:	72fb      	strb	r3, [r7, #11]
          break;
 80087ee:	e03b      	b.n	8008868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00b      	beq.n	8008814 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	7c12      	ldrb	r2, [r2, #16]
 8008808:	f107 0108 	add.w	r1, r7, #8
 800880c:	4610      	mov	r0, r2
 800880e:	4798      	blx	r3
 8008810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008812:	e029      	b.n	8008868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa63 	bl	8008ce2 <USBD_CtlError>
            err++;
 800881c:	7afb      	ldrb	r3, [r7, #11]
 800881e:	3301      	adds	r3, #1
 8008820:	72fb      	strb	r3, [r7, #11]
          break;
 8008822:	e021      	b.n	8008868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00b      	beq.n	8008848 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	7c12      	ldrb	r2, [r2, #16]
 800883c:	f107 0108 	add.w	r1, r7, #8
 8008840:	4610      	mov	r0, r2
 8008842:	4798      	blx	r3
 8008844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008846:	e00f      	b.n	8008868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fa49 	bl	8008ce2 <USBD_CtlError>
            err++;
 8008850:	7afb      	ldrb	r3, [r7, #11]
 8008852:	3301      	adds	r3, #1
 8008854:	72fb      	strb	r3, [r7, #11]
          break;
 8008856:	e007      	b.n	8008868 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fa41 	bl	8008ce2 <USBD_CtlError>
          err++;
 8008860:	7afb      	ldrb	r3, [r7, #11]
 8008862:	3301      	adds	r3, #1
 8008864:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008866:	bf00      	nop
      }
      break;
 8008868:	e037      	b.n	80088da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	7c1b      	ldrb	r3, [r3, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d109      	bne.n	8008886 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800887a:	f107 0208 	add.w	r2, r7, #8
 800887e:	4610      	mov	r0, r2
 8008880:	4798      	blx	r3
 8008882:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008884:	e029      	b.n	80088da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fa2a 	bl	8008ce2 <USBD_CtlError>
        err++;
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	3301      	adds	r3, #1
 8008892:	72fb      	strb	r3, [r7, #11]
      break;
 8008894:	e021      	b.n	80088da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	7c1b      	ldrb	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10d      	bne.n	80088ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a6:	f107 0208 	add.w	r2, r7, #8
 80088aa:	4610      	mov	r0, r2
 80088ac:	4798      	blx	r3
 80088ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3301      	adds	r3, #1
 80088b4:	2207      	movs	r2, #7
 80088b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088b8:	e00f      	b.n	80088da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fa10 	bl	8008ce2 <USBD_CtlError>
        err++;
 80088c2:	7afb      	ldrb	r3, [r7, #11]
 80088c4:	3301      	adds	r3, #1
 80088c6:	72fb      	strb	r3, [r7, #11]
      break;
 80088c8:	e007      	b.n	80088da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fa08 	bl	8008ce2 <USBD_CtlError>
      err++;
 80088d2:	7afb      	ldrb	r3, [r7, #11]
 80088d4:	3301      	adds	r3, #1
 80088d6:	72fb      	strb	r3, [r7, #11]
      break;
 80088d8:	bf00      	nop
  }

  if (err != 0U)
 80088da:	7afb      	ldrb	r3, [r7, #11]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d11e      	bne.n	800891e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	88db      	ldrh	r3, [r3, #6]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d016      	beq.n	8008916 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80088e8:	893b      	ldrh	r3, [r7, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00e      	beq.n	800890c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	88da      	ldrh	r2, [r3, #6]
 80088f2:	893b      	ldrh	r3, [r7, #8]
 80088f4:	4293      	cmp	r3, r2
 80088f6:	bf28      	it	cs
 80088f8:	4613      	movcs	r3, r2
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088fe:	893b      	ldrh	r3, [r7, #8]
 8008900:	461a      	mov	r2, r3
 8008902:	68f9      	ldr	r1, [r7, #12]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fa69 	bl	8008ddc <USBD_CtlSendData>
 800890a:	e009      	b.n	8008920 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f9e7 	bl	8008ce2 <USBD_CtlError>
 8008914:	e004      	b.n	8008920 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fac1 	bl	8008e9e <USBD_CtlSendStatus>
 800891c:	e000      	b.n	8008920 <USBD_GetDescriptor+0x2cc>
    return;
 800891e:	bf00      	nop
  }
}
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop

08008928 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	889b      	ldrh	r3, [r3, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d131      	bne.n	800899e <USBD_SetAddress+0x76>
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	88db      	ldrh	r3, [r3, #6]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d12d      	bne.n	800899e <USBD_SetAddress+0x76>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	885b      	ldrh	r3, [r3, #2]
 8008946:	2b7f      	cmp	r3, #127	@ 0x7f
 8008948:	d829      	bhi.n	800899e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	885b      	ldrh	r3, [r3, #2]
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008954:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b03      	cmp	r3, #3
 8008960:	d104      	bne.n	800896c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f9bc 	bl	8008ce2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800896a:	e01d      	b.n	80089a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	7bfa      	ldrb	r2, [r7, #15]
 8008970:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 ff19 	bl	80097b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa8d 	bl	8008e9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d004      	beq.n	8008994 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2202      	movs	r2, #2
 800898e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008992:	e009      	b.n	80089a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899c:	e004      	b.n	80089a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f99e 	bl	8008ce2 <USBD_CtlError>
  }
}
 80089a6:	bf00      	nop
 80089a8:	bf00      	nop
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	885b      	ldrh	r3, [r3, #2]
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	4b4e      	ldr	r3, [pc, #312]	@ (8008b00 <USBD_SetConfig+0x150>)
 80089c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80089c8:	4b4d      	ldr	r3, [pc, #308]	@ (8008b00 <USBD_SetConfig+0x150>)
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d905      	bls.n	80089dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f985 	bl	8008ce2 <USBD_CtlError>
    return USBD_FAIL;
 80089d8:	2303      	movs	r3, #3
 80089da:	e08c      	b.n	8008af6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d002      	beq.n	80089ee <USBD_SetConfig+0x3e>
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d029      	beq.n	8008a40 <USBD_SetConfig+0x90>
 80089ec:	e075      	b.n	8008ada <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80089ee:	4b44      	ldr	r3, [pc, #272]	@ (8008b00 <USBD_SetConfig+0x150>)
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d020      	beq.n	8008a38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80089f6:	4b42      	ldr	r3, [pc, #264]	@ (8008b00 <USBD_SetConfig+0x150>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a00:	4b3f      	ldr	r3, [pc, #252]	@ (8008b00 <USBD_SetConfig+0x150>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7fe ffcd 	bl	80079a6 <USBD_SetClassConfig>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d008      	beq.n	8008a28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f962 	bl	8008ce2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2202      	movs	r2, #2
 8008a22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a26:	e065      	b.n	8008af4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fa38 	bl	8008e9e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2203      	movs	r2, #3
 8008a32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a36:	e05d      	b.n	8008af4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fa30 	bl	8008e9e <USBD_CtlSendStatus>
      break;
 8008a3e:	e059      	b.n	8008af4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a40:	4b2f      	ldr	r3, [pc, #188]	@ (8008b00 <USBD_SetConfig+0x150>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d112      	bne.n	8008a6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008a50:	4b2b      	ldr	r3, [pc, #172]	@ (8008b00 <USBD_SetConfig+0x150>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	461a      	mov	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a5a:	4b29      	ldr	r3, [pc, #164]	@ (8008b00 <USBD_SetConfig+0x150>)
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7fe ffbc 	bl	80079de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fa19 	bl	8008e9e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a6c:	e042      	b.n	8008af4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008a6e:	4b24      	ldr	r3, [pc, #144]	@ (8008b00 <USBD_SetConfig+0x150>)
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d02a      	beq.n	8008ad2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7fe ffaa 	bl	80079de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8008b00 <USBD_SetConfig+0x150>)
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a94:	4b1a      	ldr	r3, [pc, #104]	@ (8008b00 <USBD_SetConfig+0x150>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7fe ff83 	bl	80079a6 <USBD_SetClassConfig>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00f      	beq.n	8008aca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f918 	bl	8008ce2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7fe ff8f 	bl	80079de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008ac8:	e014      	b.n	8008af4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f9e7 	bl	8008e9e <USBD_CtlSendStatus>
      break;
 8008ad0:	e010      	b.n	8008af4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f9e3 	bl	8008e9e <USBD_CtlSendStatus>
      break;
 8008ad8:	e00c      	b.n	8008af4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f900 	bl	8008ce2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ae2:	4b07      	ldr	r3, [pc, #28]	@ (8008b00 <USBD_SetConfig+0x150>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7fe ff78 	bl	80079de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008aee:	2303      	movs	r3, #3
 8008af0:	73fb      	strb	r3, [r7, #15]
      break;
 8008af2:	bf00      	nop
  }

  return ret;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	20000428 	.word	0x20000428

08008b04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	88db      	ldrh	r3, [r3, #6]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d004      	beq.n	8008b20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f8e2 	bl	8008ce2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b1e:	e023      	b.n	8008b68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	dc02      	bgt.n	8008b32 <USBD_GetConfig+0x2e>
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	dc03      	bgt.n	8008b38 <USBD_GetConfig+0x34>
 8008b30:	e015      	b.n	8008b5e <USBD_GetConfig+0x5a>
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d00b      	beq.n	8008b4e <USBD_GetConfig+0x4a>
 8008b36:	e012      	b.n	8008b5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3308      	adds	r3, #8
 8008b42:	2201      	movs	r2, #1
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f948 	bl	8008ddc <USBD_CtlSendData>
        break;
 8008b4c:	e00c      	b.n	8008b68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	3304      	adds	r3, #4
 8008b52:	2201      	movs	r2, #1
 8008b54:	4619      	mov	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f940 	bl	8008ddc <USBD_CtlSendData>
        break;
 8008b5c:	e004      	b.n	8008b68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f8be 	bl	8008ce2 <USBD_CtlError>
        break;
 8008b66:	bf00      	nop
}
 8008b68:	bf00      	nop
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	3b01      	subs	r3, #1
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d81e      	bhi.n	8008bc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	88db      	ldrh	r3, [r3, #6]
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d004      	beq.n	8008b9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f8a5 	bl	8008ce2 <USBD_CtlError>
        break;
 8008b98:	e01a      	b.n	8008bd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d005      	beq.n	8008bb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f043 0202 	orr.w	r2, r3, #2
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	330c      	adds	r3, #12
 8008bba:	2202      	movs	r2, #2
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f90c 	bl	8008ddc <USBD_CtlSendData>
      break;
 8008bc4:	e004      	b.n	8008bd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f88a 	bl	8008ce2 <USBD_CtlError>
      break;
 8008bce:	bf00      	nop
  }
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	885b      	ldrh	r3, [r3, #2]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d107      	bne.n	8008bfa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f953 	bl	8008e9e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008bf8:	e013      	b.n	8008c22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	885b      	ldrh	r3, [r3, #2]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d10b      	bne.n	8008c1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	889b      	ldrh	r3, [r3, #4]
 8008c06:	0a1b      	lsrs	r3, r3, #8
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f943 	bl	8008e9e <USBD_CtlSendStatus>
}
 8008c18:	e003      	b.n	8008c22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f860 	bl	8008ce2 <USBD_CtlError>
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b082      	sub	sp, #8
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d80b      	bhi.n	8008c5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	885b      	ldrh	r3, [r3, #2]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d10c      	bne.n	8008c64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f923 	bl	8008e9e <USBD_CtlSendStatus>
      }
      break;
 8008c58:	e004      	b.n	8008c64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f840 	bl	8008ce2 <USBD_CtlError>
      break;
 8008c62:	e000      	b.n	8008c66 <USBD_ClrFeature+0x3c>
      break;
 8008c64:	bf00      	nop
  }
}
 8008c66:	bf00      	nop
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	781a      	ldrb	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	3301      	adds	r3, #1
 8008c88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	781a      	ldrb	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3301      	adds	r3, #1
 8008c96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7ff fa3d 	bl	8008118 <SWAPBYTE>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f7ff fa30 	bl	8008118 <SWAPBYTE>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	461a      	mov	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f7ff fa23 	bl	8008118 <SWAPBYTE>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	80da      	strh	r2, [r3, #6]
}
 8008cda:	bf00      	nop
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b082      	sub	sp, #8
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cec:	2180      	movs	r1, #128	@ 0x80
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fcf4 	bl	80096dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fcf0 	bl	80096dc <USBD_LL_StallEP>
}
 8008cfc:	bf00      	nop
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d10:	2300      	movs	r3, #0
 8008d12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d042      	beq.n	8008da0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008d1e:	6938      	ldr	r0, [r7, #16]
 8008d20:	f000 f842 	bl	8008da8 <USBD_GetLen>
 8008d24:	4603      	mov	r3, r0
 8008d26:	3301      	adds	r3, #1
 8008d28:	005b      	lsls	r3, r3, #1
 8008d2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d2e:	d808      	bhi.n	8008d42 <USBD_GetString+0x3e>
 8008d30:	6938      	ldr	r0, [r7, #16]
 8008d32:	f000 f839 	bl	8008da8 <USBD_GetLen>
 8008d36:	4603      	mov	r3, r0
 8008d38:	3301      	adds	r3, #1
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	005b      	lsls	r3, r3, #1
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	e001      	b.n	8008d46 <USBD_GetString+0x42>
 8008d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	4413      	add	r3, r2
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	7812      	ldrb	r2, [r2, #0]
 8008d54:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	4413      	add	r3, r2
 8008d62:	2203      	movs	r2, #3
 8008d64:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d6c:	e013      	b.n	8008d96 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	4413      	add	r3, r2
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	7812      	ldrb	r2, [r2, #0]
 8008d78:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	613b      	str	r3, [r7, #16]
    idx++;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	3301      	adds	r3, #1
 8008d84:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	3301      	adds	r3, #1
 8008d94:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e7      	bne.n	8008d6e <USBD_GetString+0x6a>
 8008d9e:	e000      	b.n	8008da2 <USBD_GetString+0x9e>
    return;
 8008da0:	bf00      	nop
  }
}
 8008da2:	3718      	adds	r7, #24
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008db8:	e005      	b.n	8008dc6 <USBD_GetLen+0x1e>
  {
    len++;
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1f5      	bne.n	8008dba <USBD_GetLen+0x12>
  }

  return len;
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	2100      	movs	r1, #0
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 fcf0 	bl	80097ee <USBD_LL_Transmit>

  return USBD_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	2100      	movs	r1, #0
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 fcdf 	bl	80097ee <USBD_LL_Transmit>

  return USBD_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	60b9      	str	r1, [r7, #8]
 8008e44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2203      	movs	r2, #3
 8008e4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f000 fcdf 	bl	8009830 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 fcce 	bl	8009830 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2204      	movs	r2, #4
 8008eaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008eae:	2300      	movs	r3, #0
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fc9a 	bl	80097ee <USBD_LL_Transmit>

  return USBD_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2205      	movs	r2, #5
 8008ed0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2100      	movs	r1, #0
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fca8 	bl	8009830 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4912      	ldr	r1, [pc, #72]	@ (8008f3c <MX_USB_DEVICE_Init+0x50>)
 8008ef4:	4812      	ldr	r0, [pc, #72]	@ (8008f40 <MX_USB_DEVICE_Init+0x54>)
 8008ef6:	f7fe fcd9 	bl	80078ac <USBD_Init>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f00:	f7f8 fb54 	bl	80015ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f04:	490f      	ldr	r1, [pc, #60]	@ (8008f44 <MX_USB_DEVICE_Init+0x58>)
 8008f06:	480e      	ldr	r0, [pc, #56]	@ (8008f40 <MX_USB_DEVICE_Init+0x54>)
 8008f08:	f7fe fd00 	bl	800790c <USBD_RegisterClass>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f12:	f7f8 fb4b 	bl	80015ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f16:	490c      	ldr	r1, [pc, #48]	@ (8008f48 <MX_USB_DEVICE_Init+0x5c>)
 8008f18:	4809      	ldr	r0, [pc, #36]	@ (8008f40 <MX_USB_DEVICE_Init+0x54>)
 8008f1a:	f7fe fbf7 	bl	800770c <USBD_CDC_RegisterInterface>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f24:	f7f8 fb42 	bl	80015ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f28:	4805      	ldr	r0, [pc, #20]	@ (8008f40 <MX_USB_DEVICE_Init+0x54>)
 8008f2a:	f7fe fd25 	bl	8007978 <USBD_Start>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f34:	f7f8 fb3a 	bl	80015ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f38:	bf00      	nop
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	200000ac 	.word	0x200000ac
 8008f40:	2000042c 	.word	0x2000042c
 8008f44:	20000018 	.word	0x20000018
 8008f48:	20000098 	.word	0x20000098

08008f4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f50:	2200      	movs	r2, #0
 8008f52:	4905      	ldr	r1, [pc, #20]	@ (8008f68 <CDC_Init_FS+0x1c>)
 8008f54:	4805      	ldr	r0, [pc, #20]	@ (8008f6c <CDC_Init_FS+0x20>)
 8008f56:	f7fe fbf3 	bl	8007740 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f5a:	4905      	ldr	r1, [pc, #20]	@ (8008f70 <CDC_Init_FS+0x24>)
 8008f5c:	4803      	ldr	r0, [pc, #12]	@ (8008f6c <CDC_Init_FS+0x20>)
 8008f5e:	f7fe fc11 	bl	8007784 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	20000f08 	.word	0x20000f08
 8008f6c:	2000042c 	.word	0x2000042c
 8008f70:	20000708 	.word	0x20000708

08008f74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f74:	b480      	push	{r7}
 8008f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	6039      	str	r1, [r7, #0]
 8008f8e:	71fb      	strb	r3, [r7, #7]
 8008f90:	4613      	mov	r3, r2
 8008f92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	2b23      	cmp	r3, #35	@ 0x23
 8008f98:	d84a      	bhi.n	8009030 <CDC_Control_FS+0xac>
 8008f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa0 <CDC_Control_FS+0x1c>)
 8008f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa0:	08009031 	.word	0x08009031
 8008fa4:	08009031 	.word	0x08009031
 8008fa8:	08009031 	.word	0x08009031
 8008fac:	08009031 	.word	0x08009031
 8008fb0:	08009031 	.word	0x08009031
 8008fb4:	08009031 	.word	0x08009031
 8008fb8:	08009031 	.word	0x08009031
 8008fbc:	08009031 	.word	0x08009031
 8008fc0:	08009031 	.word	0x08009031
 8008fc4:	08009031 	.word	0x08009031
 8008fc8:	08009031 	.word	0x08009031
 8008fcc:	08009031 	.word	0x08009031
 8008fd0:	08009031 	.word	0x08009031
 8008fd4:	08009031 	.word	0x08009031
 8008fd8:	08009031 	.word	0x08009031
 8008fdc:	08009031 	.word	0x08009031
 8008fe0:	08009031 	.word	0x08009031
 8008fe4:	08009031 	.word	0x08009031
 8008fe8:	08009031 	.word	0x08009031
 8008fec:	08009031 	.word	0x08009031
 8008ff0:	08009031 	.word	0x08009031
 8008ff4:	08009031 	.word	0x08009031
 8008ff8:	08009031 	.word	0x08009031
 8008ffc:	08009031 	.word	0x08009031
 8009000:	08009031 	.word	0x08009031
 8009004:	08009031 	.word	0x08009031
 8009008:	08009031 	.word	0x08009031
 800900c:	08009031 	.word	0x08009031
 8009010:	08009031 	.word	0x08009031
 8009014:	08009031 	.word	0x08009031
 8009018:	08009031 	.word	0x08009031
 800901c:	08009031 	.word	0x08009031
 8009020:	08009031 	.word	0x08009031
 8009024:	08009031 	.word	0x08009031
 8009028:	08009031 	.word	0x08009031
 800902c:	08009031 	.word	0x08009031
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009030:	bf00      	nop
  }

  return (USBD_OK);
 8009032:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800904a:	6879      	ldr	r1, [r7, #4]
 800904c:	4805      	ldr	r0, [pc, #20]	@ (8009064 <CDC_Receive_FS+0x24>)
 800904e:	f7fe fb99 	bl	8007784 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009052:	4804      	ldr	r0, [pc, #16]	@ (8009064 <CDC_Receive_FS+0x24>)
 8009054:	f7fe fbf4 	bl	8007840 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009058:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	2000042c 	.word	0x2000042c

08009068 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009078:	4b0d      	ldr	r3, [pc, #52]	@ (80090b0 <CDC_Transmit_FS+0x48>)
 800907a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800907e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800908a:	2301      	movs	r3, #1
 800908c:	e00b      	b.n	80090a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800908e:	887b      	ldrh	r3, [r7, #2]
 8009090:	461a      	mov	r2, r3
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	4806      	ldr	r0, [pc, #24]	@ (80090b0 <CDC_Transmit_FS+0x48>)
 8009096:	f7fe fb53 	bl	8007740 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800909a:	4805      	ldr	r0, [pc, #20]	@ (80090b0 <CDC_Transmit_FS+0x48>)
 800909c:	f7fe fb90 	bl	80077c0 <USBD_CDC_TransmitPacket>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	2000042c 	.word	0x2000042c

080090b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	4613      	mov	r3, r2
 80090c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80090c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	371c      	adds	r7, #28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
	...

080090d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	4603      	mov	r3, r0
 80090e0:	6039      	str	r1, [r7, #0]
 80090e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2212      	movs	r2, #18
 80090e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80090ea:	4b03      	ldr	r3, [pc, #12]	@ (80090f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	200000c8 	.word	0x200000c8

080090fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	6039      	str	r1, [r7, #0]
 8009106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	2204      	movs	r2, #4
 800910c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800910e:	4b03      	ldr	r3, [pc, #12]	@ (800911c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009110:	4618      	mov	r0, r3
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	200000dc 	.word	0x200000dc

08009120 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	6039      	str	r1, [r7, #0]
 800912a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800912c:	79fb      	ldrb	r3, [r7, #7]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d105      	bne.n	800913e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	4907      	ldr	r1, [pc, #28]	@ (8009154 <USBD_FS_ProductStrDescriptor+0x34>)
 8009136:	4808      	ldr	r0, [pc, #32]	@ (8009158 <USBD_FS_ProductStrDescriptor+0x38>)
 8009138:	f7ff fde4 	bl	8008d04 <USBD_GetString>
 800913c:	e004      	b.n	8009148 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	4904      	ldr	r1, [pc, #16]	@ (8009154 <USBD_FS_ProductStrDescriptor+0x34>)
 8009142:	4805      	ldr	r0, [pc, #20]	@ (8009158 <USBD_FS_ProductStrDescriptor+0x38>)
 8009144:	f7ff fdde 	bl	8008d04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009148:	4b02      	ldr	r3, [pc, #8]	@ (8009154 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20001708 	.word	0x20001708
 8009158:	0800e0b8 	.word	0x0800e0b8

0800915c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	4603      	mov	r3, r0
 8009164:	6039      	str	r1, [r7, #0]
 8009166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	4904      	ldr	r1, [pc, #16]	@ (800917c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800916c:	4804      	ldr	r0, [pc, #16]	@ (8009180 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800916e:	f7ff fdc9 	bl	8008d04 <USBD_GetString>
  return USBD_StrDesc;
 8009172:	4b02      	ldr	r3, [pc, #8]	@ (800917c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009174:	4618      	mov	r0, r3
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	20001708 	.word	0x20001708
 8009180:	0800e0d0 	.word	0x0800e0d0

08009184 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	6039      	str	r1, [r7, #0]
 800918e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	221a      	movs	r2, #26
 8009194:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009196:	f000 f843 	bl	8009220 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800919a:	4b02      	ldr	r3, [pc, #8]	@ (80091a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	200000e0 	.word	0x200000e0

080091a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	4603      	mov	r3, r0
 80091b0:	6039      	str	r1, [r7, #0]
 80091b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091b4:	79fb      	ldrb	r3, [r7, #7]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d105      	bne.n	80091c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	4907      	ldr	r1, [pc, #28]	@ (80091dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80091be:	4808      	ldr	r0, [pc, #32]	@ (80091e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091c0:	f7ff fda0 	bl	8008d04 <USBD_GetString>
 80091c4:	e004      	b.n	80091d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	4904      	ldr	r1, [pc, #16]	@ (80091dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80091ca:	4805      	ldr	r0, [pc, #20]	@ (80091e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091cc:	f7ff fd9a 	bl	8008d04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091d0:	4b02      	ldr	r3, [pc, #8]	@ (80091dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	20001708 	.word	0x20001708
 80091e0:	0800e0e4 	.word	0x0800e0e4

080091e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	4603      	mov	r3, r0
 80091ec:	6039      	str	r1, [r7, #0]
 80091ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d105      	bne.n	8009202 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	4907      	ldr	r1, [pc, #28]	@ (8009218 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091fa:	4808      	ldr	r0, [pc, #32]	@ (800921c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091fc:	f7ff fd82 	bl	8008d04 <USBD_GetString>
 8009200:	e004      	b.n	800920c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	4904      	ldr	r1, [pc, #16]	@ (8009218 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009206:	4805      	ldr	r0, [pc, #20]	@ (800921c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009208:	f7ff fd7c 	bl	8008d04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800920c:	4b02      	ldr	r3, [pc, #8]	@ (8009218 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20001708 	.word	0x20001708
 800921c:	0800e0f0 	.word	0x0800e0f0

08009220 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009226:	4b0f      	ldr	r3, [pc, #60]	@ (8009264 <Get_SerialNum+0x44>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800922c:	4b0e      	ldr	r3, [pc, #56]	@ (8009268 <Get_SerialNum+0x48>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009232:	4b0e      	ldr	r3, [pc, #56]	@ (800926c <Get_SerialNum+0x4c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4413      	add	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d009      	beq.n	800925a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009246:	2208      	movs	r2, #8
 8009248:	4909      	ldr	r1, [pc, #36]	@ (8009270 <Get_SerialNum+0x50>)
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f000 f814 	bl	8009278 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009250:	2204      	movs	r2, #4
 8009252:	4908      	ldr	r1, [pc, #32]	@ (8009274 <Get_SerialNum+0x54>)
 8009254:	68b8      	ldr	r0, [r7, #8]
 8009256:	f000 f80f 	bl	8009278 <IntToUnicode>
  }
}
 800925a:	bf00      	nop
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	1fff7a10 	.word	0x1fff7a10
 8009268:	1fff7a14 	.word	0x1fff7a14
 800926c:	1fff7a18 	.word	0x1fff7a18
 8009270:	200000e2 	.word	0x200000e2
 8009274:	200000f2 	.word	0x200000f2

08009278 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009278:	b480      	push	{r7}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	4613      	mov	r3, r2
 8009284:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009286:	2300      	movs	r3, #0
 8009288:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800928a:	2300      	movs	r3, #0
 800928c:	75fb      	strb	r3, [r7, #23]
 800928e:	e027      	b.n	80092e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	0f1b      	lsrs	r3, r3, #28
 8009294:	2b09      	cmp	r3, #9
 8009296:	d80b      	bhi.n	80092b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	0f1b      	lsrs	r3, r3, #28
 800929c:	b2da      	uxtb	r2, r3
 800929e:	7dfb      	ldrb	r3, [r7, #23]
 80092a0:	005b      	lsls	r3, r3, #1
 80092a2:	4619      	mov	r1, r3
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	440b      	add	r3, r1
 80092a8:	3230      	adds	r2, #48	@ 0x30
 80092aa:	b2d2      	uxtb	r2, r2
 80092ac:	701a      	strb	r2, [r3, #0]
 80092ae:	e00a      	b.n	80092c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	0f1b      	lsrs	r3, r3, #28
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	7dfb      	ldrb	r3, [r7, #23]
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	4619      	mov	r1, r3
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	440b      	add	r3, r1
 80092c0:	3237      	adds	r2, #55	@ 0x37
 80092c2:	b2d2      	uxtb	r2, r2
 80092c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	011b      	lsls	r3, r3, #4
 80092ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092cc:	7dfb      	ldrb	r3, [r7, #23]
 80092ce:	005b      	lsls	r3, r3, #1
 80092d0:	3301      	adds	r3, #1
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	4413      	add	r3, r2
 80092d6:	2200      	movs	r2, #0
 80092d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092da:	7dfb      	ldrb	r3, [r7, #23]
 80092dc:	3301      	adds	r3, #1
 80092de:	75fb      	strb	r3, [r7, #23]
 80092e0:	7dfa      	ldrb	r2, [r7, #23]
 80092e2:	79fb      	ldrb	r3, [r7, #7]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d3d3      	bcc.n	8009290 <IntToUnicode+0x18>
  }
}
 80092e8:	bf00      	nop
 80092ea:	bf00      	nop
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
	...

080092f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08a      	sub	sp, #40	@ 0x28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009300:	f107 0314 	add.w	r3, r7, #20
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]
 8009308:	605a      	str	r2, [r3, #4]
 800930a:	609a      	str	r2, [r3, #8]
 800930c:	60da      	str	r2, [r3, #12]
 800930e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009318:	d13a      	bne.n	8009390 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800931a:	2300      	movs	r3, #0
 800931c:	613b      	str	r3, [r7, #16]
 800931e:	4b1e      	ldr	r3, [pc, #120]	@ (8009398 <HAL_PCD_MspInit+0xa0>)
 8009320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009322:	4a1d      	ldr	r2, [pc, #116]	@ (8009398 <HAL_PCD_MspInit+0xa0>)
 8009324:	f043 0301 	orr.w	r3, r3, #1
 8009328:	6313      	str	r3, [r2, #48]	@ 0x30
 800932a:	4b1b      	ldr	r3, [pc, #108]	@ (8009398 <HAL_PCD_MspInit+0xa0>)
 800932c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	613b      	str	r3, [r7, #16]
 8009334:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009336:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800933a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800933c:	2302      	movs	r3, #2
 800933e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009340:	2300      	movs	r3, #0
 8009342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009344:	2303      	movs	r3, #3
 8009346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009348:	230a      	movs	r3, #10
 800934a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800934c:	f107 0314 	add.w	r3, r7, #20
 8009350:	4619      	mov	r1, r3
 8009352:	4812      	ldr	r0, [pc, #72]	@ (800939c <HAL_PCD_MspInit+0xa4>)
 8009354:	f7f8 fe16 	bl	8001f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009358:	4b0f      	ldr	r3, [pc, #60]	@ (8009398 <HAL_PCD_MspInit+0xa0>)
 800935a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800935c:	4a0e      	ldr	r2, [pc, #56]	@ (8009398 <HAL_PCD_MspInit+0xa0>)
 800935e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009362:	6353      	str	r3, [r2, #52]	@ 0x34
 8009364:	2300      	movs	r3, #0
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	4b0b      	ldr	r3, [pc, #44]	@ (8009398 <HAL_PCD_MspInit+0xa0>)
 800936a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800936c:	4a0a      	ldr	r2, [pc, #40]	@ (8009398 <HAL_PCD_MspInit+0xa0>)
 800936e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009372:	6453      	str	r3, [r2, #68]	@ 0x44
 8009374:	4b08      	ldr	r3, [pc, #32]	@ (8009398 <HAL_PCD_MspInit+0xa0>)
 8009376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009378:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009380:	2200      	movs	r2, #0
 8009382:	2100      	movs	r1, #0
 8009384:	2043      	movs	r0, #67	@ 0x43
 8009386:	f7f8 fcba 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800938a:	2043      	movs	r0, #67	@ 0x43
 800938c:	f7f8 fcd3 	bl	8001d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009390:	bf00      	nop
 8009392:	3728      	adds	r7, #40	@ 0x28
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	40023800 	.word	0x40023800
 800939c:	40020000 	.word	0x40020000

080093a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80093b4:	4619      	mov	r1, r3
 80093b6:	4610      	mov	r0, r2
 80093b8:	f7fe fb2b 	bl	8007a12 <USBD_LL_SetupStage>
}
 80093bc:	bf00      	nop
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	460b      	mov	r3, r1
 80093ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80093d6:	78fa      	ldrb	r2, [r7, #3]
 80093d8:	6879      	ldr	r1, [r7, #4]
 80093da:	4613      	mov	r3, r2
 80093dc:	00db      	lsls	r3, r3, #3
 80093de:	4413      	add	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	440b      	add	r3, r1
 80093e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	4619      	mov	r1, r3
 80093ee:	f7fe fb65 	bl	8007abc <USBD_LL_DataOutStage>
}
 80093f2:	bf00      	nop
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	460b      	mov	r3, r1
 8009404:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800940c:	78fa      	ldrb	r2, [r7, #3]
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	4613      	mov	r3, r2
 8009412:	00db      	lsls	r3, r3, #3
 8009414:	4413      	add	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	440b      	add	r3, r1
 800941a:	3320      	adds	r3, #32
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	78fb      	ldrb	r3, [r7, #3]
 8009420:	4619      	mov	r1, r3
 8009422:	f7fe fc07 	bl	8007c34 <USBD_LL_DataInStage>
}
 8009426:	bf00      	nop
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b082      	sub	sp, #8
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800943c:	4618      	mov	r0, r3
 800943e:	f7fe fd4b 	bl	8007ed8 <USBD_LL_SOF>
}
 8009442:	bf00      	nop
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009452:	2301      	movs	r3, #1
 8009454:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	79db      	ldrb	r3, [r3, #7]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d102      	bne.n	8009464 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800945e:	2300      	movs	r3, #0
 8009460:	73fb      	strb	r3, [r7, #15]
 8009462:	e008      	b.n	8009476 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	79db      	ldrb	r3, [r3, #7]
 8009468:	2b02      	cmp	r3, #2
 800946a:	d102      	bne.n	8009472 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800946c:	2301      	movs	r3, #1
 800946e:	73fb      	strb	r3, [r7, #15]
 8009470:	e001      	b.n	8009476 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009472:	f7f8 f89b 	bl	80015ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800947c:	7bfa      	ldrb	r2, [r7, #15]
 800947e:	4611      	mov	r1, r2
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fce5 	bl	8007e50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800948c:	4618      	mov	r0, r3
 800948e:	f7fe fc8c 	bl	8007daa <USBD_LL_Reset>
}
 8009492:	bf00      	nop
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
	...

0800949c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe fce0 	bl	8007e70 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	6812      	ldr	r2, [r2, #0]
 80094be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80094c2:	f043 0301 	orr.w	r3, r3, #1
 80094c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	7adb      	ldrb	r3, [r3, #11]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d005      	beq.n	80094dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094d0:	4b04      	ldr	r3, [pc, #16]	@ (80094e4 <HAL_PCD_SuspendCallback+0x48>)
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	4a03      	ldr	r2, [pc, #12]	@ (80094e4 <HAL_PCD_SuspendCallback+0x48>)
 80094d6:	f043 0306 	orr.w	r3, r3, #6
 80094da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80094dc:	bf00      	nop
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	e000ed00 	.word	0xe000ed00

080094e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fcd6 	bl	8007ea8 <USBD_LL_Resume>
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009516:	78fa      	ldrb	r2, [r7, #3]
 8009518:	4611      	mov	r1, r2
 800951a:	4618      	mov	r0, r3
 800951c:	f7fe fd2e 	bl	8007f7c <USBD_LL_IsoOUTIncomplete>
}
 8009520:	bf00      	nop
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800953a:	78fa      	ldrb	r2, [r7, #3]
 800953c:	4611      	mov	r1, r2
 800953e:	4618      	mov	r0, r3
 8009540:	f7fe fcea 	bl	8007f18 <USBD_LL_IsoINIncomplete>
}
 8009544:	bf00      	nop
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fd40 	bl	8007fe0 <USBD_LL_DevConnected>
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe fd3d 	bl	8007ff6 <USBD_LL_DevDisconnected>
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d13c      	bne.n	800960e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009594:	4a20      	ldr	r2, [pc, #128]	@ (8009618 <USBD_LL_Init+0x94>)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a1e      	ldr	r2, [pc, #120]	@ (8009618 <USBD_LL_Init+0x94>)
 80095a0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009618 <USBD_LL_Init+0x94>)
 80095a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80095aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80095ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009618 <USBD_LL_Init+0x94>)
 80095ae:	2204      	movs	r2, #4
 80095b0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80095b2:	4b19      	ldr	r3, [pc, #100]	@ (8009618 <USBD_LL_Init+0x94>)
 80095b4:	2202      	movs	r2, #2
 80095b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095b8:	4b17      	ldr	r3, [pc, #92]	@ (8009618 <USBD_LL_Init+0x94>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095be:	4b16      	ldr	r3, [pc, #88]	@ (8009618 <USBD_LL_Init+0x94>)
 80095c0:	2202      	movs	r2, #2
 80095c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095c4:	4b14      	ldr	r3, [pc, #80]	@ (8009618 <USBD_LL_Init+0x94>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80095ca:	4b13      	ldr	r3, [pc, #76]	@ (8009618 <USBD_LL_Init+0x94>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80095d0:	4b11      	ldr	r3, [pc, #68]	@ (8009618 <USBD_LL_Init+0x94>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80095d6:	4b10      	ldr	r3, [pc, #64]	@ (8009618 <USBD_LL_Init+0x94>)
 80095d8:	2200      	movs	r2, #0
 80095da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80095dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009618 <USBD_LL_Init+0x94>)
 80095de:	2200      	movs	r2, #0
 80095e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80095e2:	480d      	ldr	r0, [pc, #52]	@ (8009618 <USBD_LL_Init+0x94>)
 80095e4:	f7f8 feb5 	bl	8002352 <HAL_PCD_Init>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80095ee:	f7f7 ffdd 	bl	80015ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80095f2:	2180      	movs	r1, #128	@ 0x80
 80095f4:	4808      	ldr	r0, [pc, #32]	@ (8009618 <USBD_LL_Init+0x94>)
 80095f6:	f7fa f8e2 	bl	80037be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80095fa:	2240      	movs	r2, #64	@ 0x40
 80095fc:	2100      	movs	r1, #0
 80095fe:	4806      	ldr	r0, [pc, #24]	@ (8009618 <USBD_LL_Init+0x94>)
 8009600:	f7fa f896 	bl	8003730 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009604:	2280      	movs	r2, #128	@ 0x80
 8009606:	2101      	movs	r1, #1
 8009608:	4803      	ldr	r0, [pc, #12]	@ (8009618 <USBD_LL_Init+0x94>)
 800960a:	f7fa f891 	bl	8003730 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	20001908 	.word	0x20001908

0800961c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009632:	4618      	mov	r0, r3
 8009634:	f7f8 ff9c 	bl	8002570 <HAL_PCD_Start>
 8009638:	4603      	mov	r3, r0
 800963a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	4618      	mov	r0, r3
 8009640:	f000 f942 	bl	80098c8 <USBD_Get_USB_Status>
 8009644:	4603      	mov	r3, r0
 8009646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009648:	7bbb      	ldrb	r3, [r7, #14]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	4608      	mov	r0, r1
 800965c:	4611      	mov	r1, r2
 800965e:	461a      	mov	r2, r3
 8009660:	4603      	mov	r3, r0
 8009662:	70fb      	strb	r3, [r7, #3]
 8009664:	460b      	mov	r3, r1
 8009666:	70bb      	strb	r3, [r7, #2]
 8009668:	4613      	mov	r3, r2
 800966a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800967a:	78bb      	ldrb	r3, [r7, #2]
 800967c:	883a      	ldrh	r2, [r7, #0]
 800967e:	78f9      	ldrb	r1, [r7, #3]
 8009680:	f7f9 fc70 	bl	8002f64 <HAL_PCD_EP_Open>
 8009684:	4603      	mov	r3, r0
 8009686:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	4618      	mov	r0, r3
 800968c:	f000 f91c 	bl	80098c8 <USBD_Get_USB_Status>
 8009690:	4603      	mov	r3, r0
 8009692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009694:	7bbb      	ldrb	r3, [r7, #14]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	460b      	mov	r3, r1
 80096a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096b8:	78fa      	ldrb	r2, [r7, #3]
 80096ba:	4611      	mov	r1, r2
 80096bc:	4618      	mov	r0, r3
 80096be:	f7f9 fcbb 	bl	8003038 <HAL_PCD_EP_Close>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 f8fd 	bl	80098c8 <USBD_Get_USB_Status>
 80096ce:	4603      	mov	r3, r0
 80096d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096f6:	78fa      	ldrb	r2, [r7, #3]
 80096f8:	4611      	mov	r1, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7f9 fd73 	bl	80031e6 <HAL_PCD_EP_SetStall>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	4618      	mov	r0, r3
 8009708:	f000 f8de 	bl	80098c8 <USBD_Get_USB_Status>
 800970c:	4603      	mov	r3, r0
 800970e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009710:	7bbb      	ldrb	r3, [r7, #14]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009734:	78fa      	ldrb	r2, [r7, #3]
 8009736:	4611      	mov	r1, r2
 8009738:	4618      	mov	r0, r3
 800973a:	f7f9 fdb7 	bl	80032ac <HAL_PCD_EP_ClrStall>
 800973e:	4603      	mov	r3, r0
 8009740:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	4618      	mov	r0, r3
 8009746:	f000 f8bf 	bl	80098c8 <USBD_Get_USB_Status>
 800974a:	4603      	mov	r3, r0
 800974c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800974e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800976a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800976c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009770:	2b00      	cmp	r3, #0
 8009772:	da0b      	bge.n	800978c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800977a:	68f9      	ldr	r1, [r7, #12]
 800977c:	4613      	mov	r3, r2
 800977e:	00db      	lsls	r3, r3, #3
 8009780:	4413      	add	r3, r2
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	440b      	add	r3, r1
 8009786:	3316      	adds	r3, #22
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	e00b      	b.n	80097a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800978c:	78fb      	ldrb	r3, [r7, #3]
 800978e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009792:	68f9      	ldr	r1, [r7, #12]
 8009794:	4613      	mov	r3, r2
 8009796:	00db      	lsls	r3, r3, #3
 8009798:	4413      	add	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	440b      	add	r3, r1
 800979e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80097a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097ca:	78fa      	ldrb	r2, [r7, #3]
 80097cc:	4611      	mov	r1, r2
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7f9 fba4 	bl	8002f1c <HAL_PCD_SetAddress>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f874 	bl	80098c8 <USBD_Get_USB_Status>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b086      	sub	sp, #24
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	607a      	str	r2, [r7, #4]
 80097f8:	603b      	str	r3, [r7, #0]
 80097fa:	460b      	mov	r3, r1
 80097fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800980c:	7af9      	ldrb	r1, [r7, #11]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	f7f9 fcae 	bl	8003172 <HAL_PCD_EP_Transmit>
 8009816:	4603      	mov	r3, r0
 8009818:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800981a:	7dfb      	ldrb	r3, [r7, #23]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 f853 	bl	80098c8 <USBD_Get_USB_Status>
 8009822:	4603      	mov	r3, r0
 8009824:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009826:	7dbb      	ldrb	r3, [r7, #22]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	607a      	str	r2, [r7, #4]
 800983a:	603b      	str	r3, [r7, #0]
 800983c:	460b      	mov	r3, r1
 800983e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800984e:	7af9      	ldrb	r1, [r7, #11]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	f7f9 fc3a 	bl	80030cc <HAL_PCD_EP_Receive>
 8009858:	4603      	mov	r3, r0
 800985a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	4618      	mov	r0, r3
 8009860:	f000 f832 	bl	80098c8 <USBD_Get_USB_Status>
 8009864:	4603      	mov	r3, r0
 8009866:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009868:	7dbb      	ldrb	r3, [r7, #22]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	460b      	mov	r3, r1
 800987c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009884:	78fa      	ldrb	r2, [r7, #3]
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f7f9 fc5a 	bl	8003142 <HAL_PCD_EP_GetRxCount>
 800988e:	4603      	mov	r3, r0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098a0:	4b03      	ldr	r3, [pc, #12]	@ (80098b0 <USBD_static_malloc+0x18>)
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	20001dec 	.word	0x20001dec

080098b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]

}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098d6:	79fb      	ldrb	r3, [r7, #7]
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d817      	bhi.n	800990c <USBD_Get_USB_Status+0x44>
 80098dc:	a201      	add	r2, pc, #4	@ (adr r2, 80098e4 <USBD_Get_USB_Status+0x1c>)
 80098de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e2:	bf00      	nop
 80098e4:	080098f5 	.word	0x080098f5
 80098e8:	080098fb 	.word	0x080098fb
 80098ec:	08009901 	.word	0x08009901
 80098f0:	08009907 	.word	0x08009907
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
    break;
 80098f8:	e00b      	b.n	8009912 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098fa:	2303      	movs	r3, #3
 80098fc:	73fb      	strb	r3, [r7, #15]
    break;
 80098fe:	e008      	b.n	8009912 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009900:	2301      	movs	r3, #1
 8009902:	73fb      	strb	r3, [r7, #15]
    break;
 8009904:	e005      	b.n	8009912 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009906:	2303      	movs	r3, #3
 8009908:	73fb      	strb	r3, [r7, #15]
    break;
 800990a:	e002      	b.n	8009912 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800990c:	2303      	movs	r3, #3
 800990e:	73fb      	strb	r3, [r7, #15]
    break;
 8009910:	bf00      	nop
  }
  return usb_status;
 8009912:	7bfb      	ldrb	r3, [r7, #15]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <__cvt>:
 8009920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009924:	ec57 6b10 	vmov	r6, r7, d0
 8009928:	2f00      	cmp	r7, #0
 800992a:	460c      	mov	r4, r1
 800992c:	4619      	mov	r1, r3
 800992e:	463b      	mov	r3, r7
 8009930:	bfbb      	ittet	lt
 8009932:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009936:	461f      	movlt	r7, r3
 8009938:	2300      	movge	r3, #0
 800993a:	232d      	movlt	r3, #45	@ 0x2d
 800993c:	700b      	strb	r3, [r1, #0]
 800993e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009940:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009944:	4691      	mov	r9, r2
 8009946:	f023 0820 	bic.w	r8, r3, #32
 800994a:	bfbc      	itt	lt
 800994c:	4632      	movlt	r2, r6
 800994e:	4616      	movlt	r6, r2
 8009950:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009954:	d005      	beq.n	8009962 <__cvt+0x42>
 8009956:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800995a:	d100      	bne.n	800995e <__cvt+0x3e>
 800995c:	3401      	adds	r4, #1
 800995e:	2102      	movs	r1, #2
 8009960:	e000      	b.n	8009964 <__cvt+0x44>
 8009962:	2103      	movs	r1, #3
 8009964:	ab03      	add	r3, sp, #12
 8009966:	9301      	str	r3, [sp, #4]
 8009968:	ab02      	add	r3, sp, #8
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	ec47 6b10 	vmov	d0, r6, r7
 8009970:	4653      	mov	r3, sl
 8009972:	4622      	mov	r2, r4
 8009974:	f001 f8b8 	bl	800aae8 <_dtoa_r>
 8009978:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800997c:	4605      	mov	r5, r0
 800997e:	d119      	bne.n	80099b4 <__cvt+0x94>
 8009980:	f019 0f01 	tst.w	r9, #1
 8009984:	d00e      	beq.n	80099a4 <__cvt+0x84>
 8009986:	eb00 0904 	add.w	r9, r0, r4
 800998a:	2200      	movs	r2, #0
 800998c:	2300      	movs	r3, #0
 800998e:	4630      	mov	r0, r6
 8009990:	4639      	mov	r1, r7
 8009992:	f7f7 f899 	bl	8000ac8 <__aeabi_dcmpeq>
 8009996:	b108      	cbz	r0, 800999c <__cvt+0x7c>
 8009998:	f8cd 900c 	str.w	r9, [sp, #12]
 800999c:	2230      	movs	r2, #48	@ 0x30
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	454b      	cmp	r3, r9
 80099a2:	d31e      	bcc.n	80099e2 <__cvt+0xc2>
 80099a4:	9b03      	ldr	r3, [sp, #12]
 80099a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099a8:	1b5b      	subs	r3, r3, r5
 80099aa:	4628      	mov	r0, r5
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	b004      	add	sp, #16
 80099b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099b8:	eb00 0904 	add.w	r9, r0, r4
 80099bc:	d1e5      	bne.n	800998a <__cvt+0x6a>
 80099be:	7803      	ldrb	r3, [r0, #0]
 80099c0:	2b30      	cmp	r3, #48	@ 0x30
 80099c2:	d10a      	bne.n	80099da <__cvt+0xba>
 80099c4:	2200      	movs	r2, #0
 80099c6:	2300      	movs	r3, #0
 80099c8:	4630      	mov	r0, r6
 80099ca:	4639      	mov	r1, r7
 80099cc:	f7f7 f87c 	bl	8000ac8 <__aeabi_dcmpeq>
 80099d0:	b918      	cbnz	r0, 80099da <__cvt+0xba>
 80099d2:	f1c4 0401 	rsb	r4, r4, #1
 80099d6:	f8ca 4000 	str.w	r4, [sl]
 80099da:	f8da 3000 	ldr.w	r3, [sl]
 80099de:	4499      	add	r9, r3
 80099e0:	e7d3      	b.n	800998a <__cvt+0x6a>
 80099e2:	1c59      	adds	r1, r3, #1
 80099e4:	9103      	str	r1, [sp, #12]
 80099e6:	701a      	strb	r2, [r3, #0]
 80099e8:	e7d9      	b.n	800999e <__cvt+0x7e>

080099ea <__exponent>:
 80099ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099ec:	2900      	cmp	r1, #0
 80099ee:	bfba      	itte	lt
 80099f0:	4249      	neglt	r1, r1
 80099f2:	232d      	movlt	r3, #45	@ 0x2d
 80099f4:	232b      	movge	r3, #43	@ 0x2b
 80099f6:	2909      	cmp	r1, #9
 80099f8:	7002      	strb	r2, [r0, #0]
 80099fa:	7043      	strb	r3, [r0, #1]
 80099fc:	dd29      	ble.n	8009a52 <__exponent+0x68>
 80099fe:	f10d 0307 	add.w	r3, sp, #7
 8009a02:	461d      	mov	r5, r3
 8009a04:	270a      	movs	r7, #10
 8009a06:	461a      	mov	r2, r3
 8009a08:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a0c:	fb07 1416 	mls	r4, r7, r6, r1
 8009a10:	3430      	adds	r4, #48	@ 0x30
 8009a12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a16:	460c      	mov	r4, r1
 8009a18:	2c63      	cmp	r4, #99	@ 0x63
 8009a1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a1e:	4631      	mov	r1, r6
 8009a20:	dcf1      	bgt.n	8009a06 <__exponent+0x1c>
 8009a22:	3130      	adds	r1, #48	@ 0x30
 8009a24:	1e94      	subs	r4, r2, #2
 8009a26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a2a:	1c41      	adds	r1, r0, #1
 8009a2c:	4623      	mov	r3, r4
 8009a2e:	42ab      	cmp	r3, r5
 8009a30:	d30a      	bcc.n	8009a48 <__exponent+0x5e>
 8009a32:	f10d 0309 	add.w	r3, sp, #9
 8009a36:	1a9b      	subs	r3, r3, r2
 8009a38:	42ac      	cmp	r4, r5
 8009a3a:	bf88      	it	hi
 8009a3c:	2300      	movhi	r3, #0
 8009a3e:	3302      	adds	r3, #2
 8009a40:	4403      	add	r3, r0
 8009a42:	1a18      	subs	r0, r3, r0
 8009a44:	b003      	add	sp, #12
 8009a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009a4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009a50:	e7ed      	b.n	8009a2e <__exponent+0x44>
 8009a52:	2330      	movs	r3, #48	@ 0x30
 8009a54:	3130      	adds	r1, #48	@ 0x30
 8009a56:	7083      	strb	r3, [r0, #2]
 8009a58:	70c1      	strb	r1, [r0, #3]
 8009a5a:	1d03      	adds	r3, r0, #4
 8009a5c:	e7f1      	b.n	8009a42 <__exponent+0x58>
	...

08009a60 <_printf_float>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	b08d      	sub	sp, #52	@ 0x34
 8009a66:	460c      	mov	r4, r1
 8009a68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009a6c:	4616      	mov	r6, r2
 8009a6e:	461f      	mov	r7, r3
 8009a70:	4605      	mov	r5, r0
 8009a72:	f000 ff31 	bl	800a8d8 <_localeconv_r>
 8009a76:	6803      	ldr	r3, [r0, #0]
 8009a78:	9304      	str	r3, [sp, #16]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7f6 fbf8 	bl	8000270 <strlen>
 8009a80:	2300      	movs	r3, #0
 8009a82:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a84:	f8d8 3000 	ldr.w	r3, [r8]
 8009a88:	9005      	str	r0, [sp, #20]
 8009a8a:	3307      	adds	r3, #7
 8009a8c:	f023 0307 	bic.w	r3, r3, #7
 8009a90:	f103 0208 	add.w	r2, r3, #8
 8009a94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a98:	f8d4 b000 	ldr.w	fp, [r4]
 8009a9c:	f8c8 2000 	str.w	r2, [r8]
 8009aa0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009aa4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009aa8:	9307      	str	r3, [sp, #28]
 8009aaa:	f8cd 8018 	str.w	r8, [sp, #24]
 8009aae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009ab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ab6:	4b9c      	ldr	r3, [pc, #624]	@ (8009d28 <_printf_float+0x2c8>)
 8009ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8009abc:	f7f7 f836 	bl	8000b2c <__aeabi_dcmpun>
 8009ac0:	bb70      	cbnz	r0, 8009b20 <_printf_float+0xc0>
 8009ac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ac6:	4b98      	ldr	r3, [pc, #608]	@ (8009d28 <_printf_float+0x2c8>)
 8009ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8009acc:	f7f7 f810 	bl	8000af0 <__aeabi_dcmple>
 8009ad0:	bb30      	cbnz	r0, 8009b20 <_printf_float+0xc0>
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	4640      	mov	r0, r8
 8009ad8:	4649      	mov	r1, r9
 8009ada:	f7f6 ffff 	bl	8000adc <__aeabi_dcmplt>
 8009ade:	b110      	cbz	r0, 8009ae6 <_printf_float+0x86>
 8009ae0:	232d      	movs	r3, #45	@ 0x2d
 8009ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ae6:	4a91      	ldr	r2, [pc, #580]	@ (8009d2c <_printf_float+0x2cc>)
 8009ae8:	4b91      	ldr	r3, [pc, #580]	@ (8009d30 <_printf_float+0x2d0>)
 8009aea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009aee:	bf8c      	ite	hi
 8009af0:	4690      	movhi	r8, r2
 8009af2:	4698      	movls	r8, r3
 8009af4:	2303      	movs	r3, #3
 8009af6:	6123      	str	r3, [r4, #16]
 8009af8:	f02b 0304 	bic.w	r3, fp, #4
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	f04f 0900 	mov.w	r9, #0
 8009b02:	9700      	str	r7, [sp, #0]
 8009b04:	4633      	mov	r3, r6
 8009b06:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b08:	4621      	mov	r1, r4
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	f000 f9d2 	bl	8009eb4 <_printf_common>
 8009b10:	3001      	adds	r0, #1
 8009b12:	f040 808d 	bne.w	8009c30 <_printf_float+0x1d0>
 8009b16:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1a:	b00d      	add	sp, #52	@ 0x34
 8009b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b20:	4642      	mov	r2, r8
 8009b22:	464b      	mov	r3, r9
 8009b24:	4640      	mov	r0, r8
 8009b26:	4649      	mov	r1, r9
 8009b28:	f7f7 f800 	bl	8000b2c <__aeabi_dcmpun>
 8009b2c:	b140      	cbz	r0, 8009b40 <_printf_float+0xe0>
 8009b2e:	464b      	mov	r3, r9
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	bfbc      	itt	lt
 8009b34:	232d      	movlt	r3, #45	@ 0x2d
 8009b36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8009d34 <_printf_float+0x2d4>)
 8009b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8009d38 <_printf_float+0x2d8>)
 8009b3e:	e7d4      	b.n	8009aea <_printf_float+0x8a>
 8009b40:	6863      	ldr	r3, [r4, #4]
 8009b42:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009b46:	9206      	str	r2, [sp, #24]
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	d13b      	bne.n	8009bc4 <_printf_float+0x164>
 8009b4c:	2306      	movs	r3, #6
 8009b4e:	6063      	str	r3, [r4, #4]
 8009b50:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009b54:	2300      	movs	r3, #0
 8009b56:	6022      	str	r2, [r4, #0]
 8009b58:	9303      	str	r3, [sp, #12]
 8009b5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b5c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009b60:	ab09      	add	r3, sp, #36	@ 0x24
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	6861      	ldr	r1, [r4, #4]
 8009b66:	ec49 8b10 	vmov	d0, r8, r9
 8009b6a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f7ff fed6 	bl	8009920 <__cvt>
 8009b74:	9b06      	ldr	r3, [sp, #24]
 8009b76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b78:	2b47      	cmp	r3, #71	@ 0x47
 8009b7a:	4680      	mov	r8, r0
 8009b7c:	d129      	bne.n	8009bd2 <_printf_float+0x172>
 8009b7e:	1cc8      	adds	r0, r1, #3
 8009b80:	db02      	blt.n	8009b88 <_printf_float+0x128>
 8009b82:	6863      	ldr	r3, [r4, #4]
 8009b84:	4299      	cmp	r1, r3
 8009b86:	dd41      	ble.n	8009c0c <_printf_float+0x1ac>
 8009b88:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b8c:	fa5f fa8a 	uxtb.w	sl, sl
 8009b90:	3901      	subs	r1, #1
 8009b92:	4652      	mov	r2, sl
 8009b94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009b98:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b9a:	f7ff ff26 	bl	80099ea <__exponent>
 8009b9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ba0:	1813      	adds	r3, r2, r0
 8009ba2:	2a01      	cmp	r2, #1
 8009ba4:	4681      	mov	r9, r0
 8009ba6:	6123      	str	r3, [r4, #16]
 8009ba8:	dc02      	bgt.n	8009bb0 <_printf_float+0x150>
 8009baa:	6822      	ldr	r2, [r4, #0]
 8009bac:	07d2      	lsls	r2, r2, #31
 8009bae:	d501      	bpl.n	8009bb4 <_printf_float+0x154>
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	6123      	str	r3, [r4, #16]
 8009bb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d0a2      	beq.n	8009b02 <_printf_float+0xa2>
 8009bbc:	232d      	movs	r3, #45	@ 0x2d
 8009bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bc2:	e79e      	b.n	8009b02 <_printf_float+0xa2>
 8009bc4:	9a06      	ldr	r2, [sp, #24]
 8009bc6:	2a47      	cmp	r2, #71	@ 0x47
 8009bc8:	d1c2      	bne.n	8009b50 <_printf_float+0xf0>
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1c0      	bne.n	8009b50 <_printf_float+0xf0>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e7bd      	b.n	8009b4e <_printf_float+0xee>
 8009bd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bd6:	d9db      	bls.n	8009b90 <_printf_float+0x130>
 8009bd8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009bdc:	d118      	bne.n	8009c10 <_printf_float+0x1b0>
 8009bde:	2900      	cmp	r1, #0
 8009be0:	6863      	ldr	r3, [r4, #4]
 8009be2:	dd0b      	ble.n	8009bfc <_printf_float+0x19c>
 8009be4:	6121      	str	r1, [r4, #16]
 8009be6:	b913      	cbnz	r3, 8009bee <_printf_float+0x18e>
 8009be8:	6822      	ldr	r2, [r4, #0]
 8009bea:	07d0      	lsls	r0, r2, #31
 8009bec:	d502      	bpl.n	8009bf4 <_printf_float+0x194>
 8009bee:	3301      	adds	r3, #1
 8009bf0:	440b      	add	r3, r1
 8009bf2:	6123      	str	r3, [r4, #16]
 8009bf4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009bf6:	f04f 0900 	mov.w	r9, #0
 8009bfa:	e7db      	b.n	8009bb4 <_printf_float+0x154>
 8009bfc:	b913      	cbnz	r3, 8009c04 <_printf_float+0x1a4>
 8009bfe:	6822      	ldr	r2, [r4, #0]
 8009c00:	07d2      	lsls	r2, r2, #31
 8009c02:	d501      	bpl.n	8009c08 <_printf_float+0x1a8>
 8009c04:	3302      	adds	r3, #2
 8009c06:	e7f4      	b.n	8009bf2 <_printf_float+0x192>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e7f2      	b.n	8009bf2 <_printf_float+0x192>
 8009c0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c12:	4299      	cmp	r1, r3
 8009c14:	db05      	blt.n	8009c22 <_printf_float+0x1c2>
 8009c16:	6823      	ldr	r3, [r4, #0]
 8009c18:	6121      	str	r1, [r4, #16]
 8009c1a:	07d8      	lsls	r0, r3, #31
 8009c1c:	d5ea      	bpl.n	8009bf4 <_printf_float+0x194>
 8009c1e:	1c4b      	adds	r3, r1, #1
 8009c20:	e7e7      	b.n	8009bf2 <_printf_float+0x192>
 8009c22:	2900      	cmp	r1, #0
 8009c24:	bfd4      	ite	le
 8009c26:	f1c1 0202 	rsble	r2, r1, #2
 8009c2a:	2201      	movgt	r2, #1
 8009c2c:	4413      	add	r3, r2
 8009c2e:	e7e0      	b.n	8009bf2 <_printf_float+0x192>
 8009c30:	6823      	ldr	r3, [r4, #0]
 8009c32:	055a      	lsls	r2, r3, #21
 8009c34:	d407      	bmi.n	8009c46 <_printf_float+0x1e6>
 8009c36:	6923      	ldr	r3, [r4, #16]
 8009c38:	4642      	mov	r2, r8
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	47b8      	blx	r7
 8009c40:	3001      	adds	r0, #1
 8009c42:	d12b      	bne.n	8009c9c <_printf_float+0x23c>
 8009c44:	e767      	b.n	8009b16 <_printf_float+0xb6>
 8009c46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c4a:	f240 80dd 	bls.w	8009e08 <_printf_float+0x3a8>
 8009c4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c52:	2200      	movs	r2, #0
 8009c54:	2300      	movs	r3, #0
 8009c56:	f7f6 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d033      	beq.n	8009cc6 <_printf_float+0x266>
 8009c5e:	4a37      	ldr	r2, [pc, #220]	@ (8009d3c <_printf_float+0x2dc>)
 8009c60:	2301      	movs	r3, #1
 8009c62:	4631      	mov	r1, r6
 8009c64:	4628      	mov	r0, r5
 8009c66:	47b8      	blx	r7
 8009c68:	3001      	adds	r0, #1
 8009c6a:	f43f af54 	beq.w	8009b16 <_printf_float+0xb6>
 8009c6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009c72:	4543      	cmp	r3, r8
 8009c74:	db02      	blt.n	8009c7c <_printf_float+0x21c>
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	07d8      	lsls	r0, r3, #31
 8009c7a:	d50f      	bpl.n	8009c9c <_printf_float+0x23c>
 8009c7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c80:	4631      	mov	r1, r6
 8009c82:	4628      	mov	r0, r5
 8009c84:	47b8      	blx	r7
 8009c86:	3001      	adds	r0, #1
 8009c88:	f43f af45 	beq.w	8009b16 <_printf_float+0xb6>
 8009c8c:	f04f 0900 	mov.w	r9, #0
 8009c90:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c94:	f104 0a1a 	add.w	sl, r4, #26
 8009c98:	45c8      	cmp	r8, r9
 8009c9a:	dc09      	bgt.n	8009cb0 <_printf_float+0x250>
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	079b      	lsls	r3, r3, #30
 8009ca0:	f100 8103 	bmi.w	8009eaa <_printf_float+0x44a>
 8009ca4:	68e0      	ldr	r0, [r4, #12]
 8009ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ca8:	4298      	cmp	r0, r3
 8009caa:	bfb8      	it	lt
 8009cac:	4618      	movlt	r0, r3
 8009cae:	e734      	b.n	8009b1a <_printf_float+0xba>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	4652      	mov	r2, sl
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	47b8      	blx	r7
 8009cba:	3001      	adds	r0, #1
 8009cbc:	f43f af2b 	beq.w	8009b16 <_printf_float+0xb6>
 8009cc0:	f109 0901 	add.w	r9, r9, #1
 8009cc4:	e7e8      	b.n	8009c98 <_printf_float+0x238>
 8009cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	dc39      	bgt.n	8009d40 <_printf_float+0x2e0>
 8009ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8009d3c <_printf_float+0x2dc>)
 8009cce:	2301      	movs	r3, #1
 8009cd0:	4631      	mov	r1, r6
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	47b8      	blx	r7
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	f43f af1d 	beq.w	8009b16 <_printf_float+0xb6>
 8009cdc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009ce0:	ea59 0303 	orrs.w	r3, r9, r3
 8009ce4:	d102      	bne.n	8009cec <_printf_float+0x28c>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	07d9      	lsls	r1, r3, #31
 8009cea:	d5d7      	bpl.n	8009c9c <_printf_float+0x23c>
 8009cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	47b8      	blx	r7
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	f43f af0d 	beq.w	8009b16 <_printf_float+0xb6>
 8009cfc:	f04f 0a00 	mov.w	sl, #0
 8009d00:	f104 0b1a 	add.w	fp, r4, #26
 8009d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d06:	425b      	negs	r3, r3
 8009d08:	4553      	cmp	r3, sl
 8009d0a:	dc01      	bgt.n	8009d10 <_printf_float+0x2b0>
 8009d0c:	464b      	mov	r3, r9
 8009d0e:	e793      	b.n	8009c38 <_printf_float+0x1d8>
 8009d10:	2301      	movs	r3, #1
 8009d12:	465a      	mov	r2, fp
 8009d14:	4631      	mov	r1, r6
 8009d16:	4628      	mov	r0, r5
 8009d18:	47b8      	blx	r7
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	f43f aefb 	beq.w	8009b16 <_printf_float+0xb6>
 8009d20:	f10a 0a01 	add.w	sl, sl, #1
 8009d24:	e7ee      	b.n	8009d04 <_printf_float+0x2a4>
 8009d26:	bf00      	nop
 8009d28:	7fefffff 	.word	0x7fefffff
 8009d2c:	0800e11c 	.word	0x0800e11c
 8009d30:	0800e118 	.word	0x0800e118
 8009d34:	0800e124 	.word	0x0800e124
 8009d38:	0800e120 	.word	0x0800e120
 8009d3c:	0800e128 	.word	0x0800e128
 8009d40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d46:	4553      	cmp	r3, sl
 8009d48:	bfa8      	it	ge
 8009d4a:	4653      	movge	r3, sl
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	4699      	mov	r9, r3
 8009d50:	dc36      	bgt.n	8009dc0 <_printf_float+0x360>
 8009d52:	f04f 0b00 	mov.w	fp, #0
 8009d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d5a:	f104 021a 	add.w	r2, r4, #26
 8009d5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d60:	9306      	str	r3, [sp, #24]
 8009d62:	eba3 0309 	sub.w	r3, r3, r9
 8009d66:	455b      	cmp	r3, fp
 8009d68:	dc31      	bgt.n	8009dce <_printf_float+0x36e>
 8009d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d6c:	459a      	cmp	sl, r3
 8009d6e:	dc3a      	bgt.n	8009de6 <_printf_float+0x386>
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	07da      	lsls	r2, r3, #31
 8009d74:	d437      	bmi.n	8009de6 <_printf_float+0x386>
 8009d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d78:	ebaa 0903 	sub.w	r9, sl, r3
 8009d7c:	9b06      	ldr	r3, [sp, #24]
 8009d7e:	ebaa 0303 	sub.w	r3, sl, r3
 8009d82:	4599      	cmp	r9, r3
 8009d84:	bfa8      	it	ge
 8009d86:	4699      	movge	r9, r3
 8009d88:	f1b9 0f00 	cmp.w	r9, #0
 8009d8c:	dc33      	bgt.n	8009df6 <_printf_float+0x396>
 8009d8e:	f04f 0800 	mov.w	r8, #0
 8009d92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d96:	f104 0b1a 	add.w	fp, r4, #26
 8009d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9c:	ebaa 0303 	sub.w	r3, sl, r3
 8009da0:	eba3 0309 	sub.w	r3, r3, r9
 8009da4:	4543      	cmp	r3, r8
 8009da6:	f77f af79 	ble.w	8009c9c <_printf_float+0x23c>
 8009daa:	2301      	movs	r3, #1
 8009dac:	465a      	mov	r2, fp
 8009dae:	4631      	mov	r1, r6
 8009db0:	4628      	mov	r0, r5
 8009db2:	47b8      	blx	r7
 8009db4:	3001      	adds	r0, #1
 8009db6:	f43f aeae 	beq.w	8009b16 <_printf_float+0xb6>
 8009dba:	f108 0801 	add.w	r8, r8, #1
 8009dbe:	e7ec      	b.n	8009d9a <_printf_float+0x33a>
 8009dc0:	4642      	mov	r2, r8
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	47b8      	blx	r7
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d1c2      	bne.n	8009d52 <_printf_float+0x2f2>
 8009dcc:	e6a3      	b.n	8009b16 <_printf_float+0xb6>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	4631      	mov	r1, r6
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	9206      	str	r2, [sp, #24]
 8009dd6:	47b8      	blx	r7
 8009dd8:	3001      	adds	r0, #1
 8009dda:	f43f ae9c 	beq.w	8009b16 <_printf_float+0xb6>
 8009dde:	9a06      	ldr	r2, [sp, #24]
 8009de0:	f10b 0b01 	add.w	fp, fp, #1
 8009de4:	e7bb      	b.n	8009d5e <_printf_float+0x2fe>
 8009de6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dea:	4631      	mov	r1, r6
 8009dec:	4628      	mov	r0, r5
 8009dee:	47b8      	blx	r7
 8009df0:	3001      	adds	r0, #1
 8009df2:	d1c0      	bne.n	8009d76 <_printf_float+0x316>
 8009df4:	e68f      	b.n	8009b16 <_printf_float+0xb6>
 8009df6:	9a06      	ldr	r2, [sp, #24]
 8009df8:	464b      	mov	r3, r9
 8009dfa:	4442      	add	r2, r8
 8009dfc:	4631      	mov	r1, r6
 8009dfe:	4628      	mov	r0, r5
 8009e00:	47b8      	blx	r7
 8009e02:	3001      	adds	r0, #1
 8009e04:	d1c3      	bne.n	8009d8e <_printf_float+0x32e>
 8009e06:	e686      	b.n	8009b16 <_printf_float+0xb6>
 8009e08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e0c:	f1ba 0f01 	cmp.w	sl, #1
 8009e10:	dc01      	bgt.n	8009e16 <_printf_float+0x3b6>
 8009e12:	07db      	lsls	r3, r3, #31
 8009e14:	d536      	bpl.n	8009e84 <_printf_float+0x424>
 8009e16:	2301      	movs	r3, #1
 8009e18:	4642      	mov	r2, r8
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	47b8      	blx	r7
 8009e20:	3001      	adds	r0, #1
 8009e22:	f43f ae78 	beq.w	8009b16 <_printf_float+0xb6>
 8009e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	47b8      	blx	r7
 8009e30:	3001      	adds	r0, #1
 8009e32:	f43f ae70 	beq.w	8009b16 <_printf_float+0xb6>
 8009e36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e42:	f7f6 fe41 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e46:	b9c0      	cbnz	r0, 8009e7a <_printf_float+0x41a>
 8009e48:	4653      	mov	r3, sl
 8009e4a:	f108 0201 	add.w	r2, r8, #1
 8009e4e:	4631      	mov	r1, r6
 8009e50:	4628      	mov	r0, r5
 8009e52:	47b8      	blx	r7
 8009e54:	3001      	adds	r0, #1
 8009e56:	d10c      	bne.n	8009e72 <_printf_float+0x412>
 8009e58:	e65d      	b.n	8009b16 <_printf_float+0xb6>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	465a      	mov	r2, fp
 8009e5e:	4631      	mov	r1, r6
 8009e60:	4628      	mov	r0, r5
 8009e62:	47b8      	blx	r7
 8009e64:	3001      	adds	r0, #1
 8009e66:	f43f ae56 	beq.w	8009b16 <_printf_float+0xb6>
 8009e6a:	f108 0801 	add.w	r8, r8, #1
 8009e6e:	45d0      	cmp	r8, sl
 8009e70:	dbf3      	blt.n	8009e5a <_printf_float+0x3fa>
 8009e72:	464b      	mov	r3, r9
 8009e74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009e78:	e6df      	b.n	8009c3a <_printf_float+0x1da>
 8009e7a:	f04f 0800 	mov.w	r8, #0
 8009e7e:	f104 0b1a 	add.w	fp, r4, #26
 8009e82:	e7f4      	b.n	8009e6e <_printf_float+0x40e>
 8009e84:	2301      	movs	r3, #1
 8009e86:	4642      	mov	r2, r8
 8009e88:	e7e1      	b.n	8009e4e <_printf_float+0x3ee>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	464a      	mov	r2, r9
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4628      	mov	r0, r5
 8009e92:	47b8      	blx	r7
 8009e94:	3001      	adds	r0, #1
 8009e96:	f43f ae3e 	beq.w	8009b16 <_printf_float+0xb6>
 8009e9a:	f108 0801 	add.w	r8, r8, #1
 8009e9e:	68e3      	ldr	r3, [r4, #12]
 8009ea0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ea2:	1a5b      	subs	r3, r3, r1
 8009ea4:	4543      	cmp	r3, r8
 8009ea6:	dcf0      	bgt.n	8009e8a <_printf_float+0x42a>
 8009ea8:	e6fc      	b.n	8009ca4 <_printf_float+0x244>
 8009eaa:	f04f 0800 	mov.w	r8, #0
 8009eae:	f104 0919 	add.w	r9, r4, #25
 8009eb2:	e7f4      	b.n	8009e9e <_printf_float+0x43e>

08009eb4 <_printf_common>:
 8009eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb8:	4616      	mov	r6, r2
 8009eba:	4698      	mov	r8, r3
 8009ebc:	688a      	ldr	r2, [r1, #8]
 8009ebe:	690b      	ldr	r3, [r1, #16]
 8009ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	bfb8      	it	lt
 8009ec8:	4613      	movlt	r3, r2
 8009eca:	6033      	str	r3, [r6, #0]
 8009ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ed0:	4607      	mov	r7, r0
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	b10a      	cbz	r2, 8009eda <_printf_common+0x26>
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	6033      	str	r3, [r6, #0]
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	0699      	lsls	r1, r3, #26
 8009ede:	bf42      	ittt	mi
 8009ee0:	6833      	ldrmi	r3, [r6, #0]
 8009ee2:	3302      	addmi	r3, #2
 8009ee4:	6033      	strmi	r3, [r6, #0]
 8009ee6:	6825      	ldr	r5, [r4, #0]
 8009ee8:	f015 0506 	ands.w	r5, r5, #6
 8009eec:	d106      	bne.n	8009efc <_printf_common+0x48>
 8009eee:	f104 0a19 	add.w	sl, r4, #25
 8009ef2:	68e3      	ldr	r3, [r4, #12]
 8009ef4:	6832      	ldr	r2, [r6, #0]
 8009ef6:	1a9b      	subs	r3, r3, r2
 8009ef8:	42ab      	cmp	r3, r5
 8009efa:	dc26      	bgt.n	8009f4a <_printf_common+0x96>
 8009efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f00:	6822      	ldr	r2, [r4, #0]
 8009f02:	3b00      	subs	r3, #0
 8009f04:	bf18      	it	ne
 8009f06:	2301      	movne	r3, #1
 8009f08:	0692      	lsls	r2, r2, #26
 8009f0a:	d42b      	bmi.n	8009f64 <_printf_common+0xb0>
 8009f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f10:	4641      	mov	r1, r8
 8009f12:	4638      	mov	r0, r7
 8009f14:	47c8      	blx	r9
 8009f16:	3001      	adds	r0, #1
 8009f18:	d01e      	beq.n	8009f58 <_printf_common+0xa4>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	6922      	ldr	r2, [r4, #16]
 8009f1e:	f003 0306 	and.w	r3, r3, #6
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	bf02      	ittt	eq
 8009f26:	68e5      	ldreq	r5, [r4, #12]
 8009f28:	6833      	ldreq	r3, [r6, #0]
 8009f2a:	1aed      	subeq	r5, r5, r3
 8009f2c:	68a3      	ldr	r3, [r4, #8]
 8009f2e:	bf0c      	ite	eq
 8009f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f34:	2500      	movne	r5, #0
 8009f36:	4293      	cmp	r3, r2
 8009f38:	bfc4      	itt	gt
 8009f3a:	1a9b      	subgt	r3, r3, r2
 8009f3c:	18ed      	addgt	r5, r5, r3
 8009f3e:	2600      	movs	r6, #0
 8009f40:	341a      	adds	r4, #26
 8009f42:	42b5      	cmp	r5, r6
 8009f44:	d11a      	bne.n	8009f7c <_printf_common+0xc8>
 8009f46:	2000      	movs	r0, #0
 8009f48:	e008      	b.n	8009f5c <_printf_common+0xa8>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	4652      	mov	r2, sl
 8009f4e:	4641      	mov	r1, r8
 8009f50:	4638      	mov	r0, r7
 8009f52:	47c8      	blx	r9
 8009f54:	3001      	adds	r0, #1
 8009f56:	d103      	bne.n	8009f60 <_printf_common+0xac>
 8009f58:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f60:	3501      	adds	r5, #1
 8009f62:	e7c6      	b.n	8009ef2 <_printf_common+0x3e>
 8009f64:	18e1      	adds	r1, r4, r3
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	2030      	movs	r0, #48	@ 0x30
 8009f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f6e:	4422      	add	r2, r4
 8009f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f78:	3302      	adds	r3, #2
 8009f7a:	e7c7      	b.n	8009f0c <_printf_common+0x58>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	4622      	mov	r2, r4
 8009f80:	4641      	mov	r1, r8
 8009f82:	4638      	mov	r0, r7
 8009f84:	47c8      	blx	r9
 8009f86:	3001      	adds	r0, #1
 8009f88:	d0e6      	beq.n	8009f58 <_printf_common+0xa4>
 8009f8a:	3601      	adds	r6, #1
 8009f8c:	e7d9      	b.n	8009f42 <_printf_common+0x8e>
	...

08009f90 <_printf_i>:
 8009f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f94:	7e0f      	ldrb	r7, [r1, #24]
 8009f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f98:	2f78      	cmp	r7, #120	@ 0x78
 8009f9a:	4691      	mov	r9, r2
 8009f9c:	4680      	mov	r8, r0
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	469a      	mov	sl, r3
 8009fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fa6:	d807      	bhi.n	8009fb8 <_printf_i+0x28>
 8009fa8:	2f62      	cmp	r7, #98	@ 0x62
 8009faa:	d80a      	bhi.n	8009fc2 <_printf_i+0x32>
 8009fac:	2f00      	cmp	r7, #0
 8009fae:	f000 80d1 	beq.w	800a154 <_printf_i+0x1c4>
 8009fb2:	2f58      	cmp	r7, #88	@ 0x58
 8009fb4:	f000 80b8 	beq.w	800a128 <_printf_i+0x198>
 8009fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fc0:	e03a      	b.n	800a038 <_printf_i+0xa8>
 8009fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fc6:	2b15      	cmp	r3, #21
 8009fc8:	d8f6      	bhi.n	8009fb8 <_printf_i+0x28>
 8009fca:	a101      	add	r1, pc, #4	@ (adr r1, 8009fd0 <_printf_i+0x40>)
 8009fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fd0:	0800a029 	.word	0x0800a029
 8009fd4:	0800a03d 	.word	0x0800a03d
 8009fd8:	08009fb9 	.word	0x08009fb9
 8009fdc:	08009fb9 	.word	0x08009fb9
 8009fe0:	08009fb9 	.word	0x08009fb9
 8009fe4:	08009fb9 	.word	0x08009fb9
 8009fe8:	0800a03d 	.word	0x0800a03d
 8009fec:	08009fb9 	.word	0x08009fb9
 8009ff0:	08009fb9 	.word	0x08009fb9
 8009ff4:	08009fb9 	.word	0x08009fb9
 8009ff8:	08009fb9 	.word	0x08009fb9
 8009ffc:	0800a13b 	.word	0x0800a13b
 800a000:	0800a067 	.word	0x0800a067
 800a004:	0800a0f5 	.word	0x0800a0f5
 800a008:	08009fb9 	.word	0x08009fb9
 800a00c:	08009fb9 	.word	0x08009fb9
 800a010:	0800a15d 	.word	0x0800a15d
 800a014:	08009fb9 	.word	0x08009fb9
 800a018:	0800a067 	.word	0x0800a067
 800a01c:	08009fb9 	.word	0x08009fb9
 800a020:	08009fb9 	.word	0x08009fb9
 800a024:	0800a0fd 	.word	0x0800a0fd
 800a028:	6833      	ldr	r3, [r6, #0]
 800a02a:	1d1a      	adds	r2, r3, #4
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6032      	str	r2, [r6, #0]
 800a030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a038:	2301      	movs	r3, #1
 800a03a:	e09c      	b.n	800a176 <_printf_i+0x1e6>
 800a03c:	6833      	ldr	r3, [r6, #0]
 800a03e:	6820      	ldr	r0, [r4, #0]
 800a040:	1d19      	adds	r1, r3, #4
 800a042:	6031      	str	r1, [r6, #0]
 800a044:	0606      	lsls	r6, r0, #24
 800a046:	d501      	bpl.n	800a04c <_printf_i+0xbc>
 800a048:	681d      	ldr	r5, [r3, #0]
 800a04a:	e003      	b.n	800a054 <_printf_i+0xc4>
 800a04c:	0645      	lsls	r5, r0, #25
 800a04e:	d5fb      	bpl.n	800a048 <_printf_i+0xb8>
 800a050:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a054:	2d00      	cmp	r5, #0
 800a056:	da03      	bge.n	800a060 <_printf_i+0xd0>
 800a058:	232d      	movs	r3, #45	@ 0x2d
 800a05a:	426d      	negs	r5, r5
 800a05c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a060:	4858      	ldr	r0, [pc, #352]	@ (800a1c4 <_printf_i+0x234>)
 800a062:	230a      	movs	r3, #10
 800a064:	e011      	b.n	800a08a <_printf_i+0xfa>
 800a066:	6821      	ldr	r1, [r4, #0]
 800a068:	6833      	ldr	r3, [r6, #0]
 800a06a:	0608      	lsls	r0, r1, #24
 800a06c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a070:	d402      	bmi.n	800a078 <_printf_i+0xe8>
 800a072:	0649      	lsls	r1, r1, #25
 800a074:	bf48      	it	mi
 800a076:	b2ad      	uxthmi	r5, r5
 800a078:	2f6f      	cmp	r7, #111	@ 0x6f
 800a07a:	4852      	ldr	r0, [pc, #328]	@ (800a1c4 <_printf_i+0x234>)
 800a07c:	6033      	str	r3, [r6, #0]
 800a07e:	bf14      	ite	ne
 800a080:	230a      	movne	r3, #10
 800a082:	2308      	moveq	r3, #8
 800a084:	2100      	movs	r1, #0
 800a086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a08a:	6866      	ldr	r6, [r4, #4]
 800a08c:	60a6      	str	r6, [r4, #8]
 800a08e:	2e00      	cmp	r6, #0
 800a090:	db05      	blt.n	800a09e <_printf_i+0x10e>
 800a092:	6821      	ldr	r1, [r4, #0]
 800a094:	432e      	orrs	r6, r5
 800a096:	f021 0104 	bic.w	r1, r1, #4
 800a09a:	6021      	str	r1, [r4, #0]
 800a09c:	d04b      	beq.n	800a136 <_printf_i+0x1a6>
 800a09e:	4616      	mov	r6, r2
 800a0a0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0a4:	fb03 5711 	mls	r7, r3, r1, r5
 800a0a8:	5dc7      	ldrb	r7, [r0, r7]
 800a0aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0ae:	462f      	mov	r7, r5
 800a0b0:	42bb      	cmp	r3, r7
 800a0b2:	460d      	mov	r5, r1
 800a0b4:	d9f4      	bls.n	800a0a0 <_printf_i+0x110>
 800a0b6:	2b08      	cmp	r3, #8
 800a0b8:	d10b      	bne.n	800a0d2 <_printf_i+0x142>
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	07df      	lsls	r7, r3, #31
 800a0be:	d508      	bpl.n	800a0d2 <_printf_i+0x142>
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	6861      	ldr	r1, [r4, #4]
 800a0c4:	4299      	cmp	r1, r3
 800a0c6:	bfde      	ittt	le
 800a0c8:	2330      	movle	r3, #48	@ 0x30
 800a0ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0d2:	1b92      	subs	r2, r2, r6
 800a0d4:	6122      	str	r2, [r4, #16]
 800a0d6:	f8cd a000 	str.w	sl, [sp]
 800a0da:	464b      	mov	r3, r9
 800a0dc:	aa03      	add	r2, sp, #12
 800a0de:	4621      	mov	r1, r4
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	f7ff fee7 	bl	8009eb4 <_printf_common>
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	d14a      	bne.n	800a180 <_printf_i+0x1f0>
 800a0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ee:	b004      	add	sp, #16
 800a0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	f043 0320 	orr.w	r3, r3, #32
 800a0fa:	6023      	str	r3, [r4, #0]
 800a0fc:	4832      	ldr	r0, [pc, #200]	@ (800a1c8 <_printf_i+0x238>)
 800a0fe:	2778      	movs	r7, #120	@ 0x78
 800a100:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a104:	6823      	ldr	r3, [r4, #0]
 800a106:	6831      	ldr	r1, [r6, #0]
 800a108:	061f      	lsls	r7, r3, #24
 800a10a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a10e:	d402      	bmi.n	800a116 <_printf_i+0x186>
 800a110:	065f      	lsls	r7, r3, #25
 800a112:	bf48      	it	mi
 800a114:	b2ad      	uxthmi	r5, r5
 800a116:	6031      	str	r1, [r6, #0]
 800a118:	07d9      	lsls	r1, r3, #31
 800a11a:	bf44      	itt	mi
 800a11c:	f043 0320 	orrmi.w	r3, r3, #32
 800a120:	6023      	strmi	r3, [r4, #0]
 800a122:	b11d      	cbz	r5, 800a12c <_printf_i+0x19c>
 800a124:	2310      	movs	r3, #16
 800a126:	e7ad      	b.n	800a084 <_printf_i+0xf4>
 800a128:	4826      	ldr	r0, [pc, #152]	@ (800a1c4 <_printf_i+0x234>)
 800a12a:	e7e9      	b.n	800a100 <_printf_i+0x170>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	f023 0320 	bic.w	r3, r3, #32
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	e7f6      	b.n	800a124 <_printf_i+0x194>
 800a136:	4616      	mov	r6, r2
 800a138:	e7bd      	b.n	800a0b6 <_printf_i+0x126>
 800a13a:	6833      	ldr	r3, [r6, #0]
 800a13c:	6825      	ldr	r5, [r4, #0]
 800a13e:	6961      	ldr	r1, [r4, #20]
 800a140:	1d18      	adds	r0, r3, #4
 800a142:	6030      	str	r0, [r6, #0]
 800a144:	062e      	lsls	r6, r5, #24
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	d501      	bpl.n	800a14e <_printf_i+0x1be>
 800a14a:	6019      	str	r1, [r3, #0]
 800a14c:	e002      	b.n	800a154 <_printf_i+0x1c4>
 800a14e:	0668      	lsls	r0, r5, #25
 800a150:	d5fb      	bpl.n	800a14a <_printf_i+0x1ba>
 800a152:	8019      	strh	r1, [r3, #0]
 800a154:	2300      	movs	r3, #0
 800a156:	6123      	str	r3, [r4, #16]
 800a158:	4616      	mov	r6, r2
 800a15a:	e7bc      	b.n	800a0d6 <_printf_i+0x146>
 800a15c:	6833      	ldr	r3, [r6, #0]
 800a15e:	1d1a      	adds	r2, r3, #4
 800a160:	6032      	str	r2, [r6, #0]
 800a162:	681e      	ldr	r6, [r3, #0]
 800a164:	6862      	ldr	r2, [r4, #4]
 800a166:	2100      	movs	r1, #0
 800a168:	4630      	mov	r0, r6
 800a16a:	f7f6 f831 	bl	80001d0 <memchr>
 800a16e:	b108      	cbz	r0, 800a174 <_printf_i+0x1e4>
 800a170:	1b80      	subs	r0, r0, r6
 800a172:	6060      	str	r0, [r4, #4]
 800a174:	6863      	ldr	r3, [r4, #4]
 800a176:	6123      	str	r3, [r4, #16]
 800a178:	2300      	movs	r3, #0
 800a17a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a17e:	e7aa      	b.n	800a0d6 <_printf_i+0x146>
 800a180:	6923      	ldr	r3, [r4, #16]
 800a182:	4632      	mov	r2, r6
 800a184:	4649      	mov	r1, r9
 800a186:	4640      	mov	r0, r8
 800a188:	47d0      	blx	sl
 800a18a:	3001      	adds	r0, #1
 800a18c:	d0ad      	beq.n	800a0ea <_printf_i+0x15a>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	079b      	lsls	r3, r3, #30
 800a192:	d413      	bmi.n	800a1bc <_printf_i+0x22c>
 800a194:	68e0      	ldr	r0, [r4, #12]
 800a196:	9b03      	ldr	r3, [sp, #12]
 800a198:	4298      	cmp	r0, r3
 800a19a:	bfb8      	it	lt
 800a19c:	4618      	movlt	r0, r3
 800a19e:	e7a6      	b.n	800a0ee <_printf_i+0x15e>
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	4632      	mov	r2, r6
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	47d0      	blx	sl
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d09d      	beq.n	800a0ea <_printf_i+0x15a>
 800a1ae:	3501      	adds	r5, #1
 800a1b0:	68e3      	ldr	r3, [r4, #12]
 800a1b2:	9903      	ldr	r1, [sp, #12]
 800a1b4:	1a5b      	subs	r3, r3, r1
 800a1b6:	42ab      	cmp	r3, r5
 800a1b8:	dcf2      	bgt.n	800a1a0 <_printf_i+0x210>
 800a1ba:	e7eb      	b.n	800a194 <_printf_i+0x204>
 800a1bc:	2500      	movs	r5, #0
 800a1be:	f104 0619 	add.w	r6, r4, #25
 800a1c2:	e7f5      	b.n	800a1b0 <_printf_i+0x220>
 800a1c4:	0800e12a 	.word	0x0800e12a
 800a1c8:	0800e13b 	.word	0x0800e13b

0800a1cc <_scanf_float>:
 800a1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d0:	b087      	sub	sp, #28
 800a1d2:	4691      	mov	r9, r2
 800a1d4:	9303      	str	r3, [sp, #12]
 800a1d6:	688b      	ldr	r3, [r1, #8]
 800a1d8:	1e5a      	subs	r2, r3, #1
 800a1da:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a1de:	bf81      	itttt	hi
 800a1e0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a1e4:	eb03 0b05 	addhi.w	fp, r3, r5
 800a1e8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a1ec:	608b      	strhi	r3, [r1, #8]
 800a1ee:	680b      	ldr	r3, [r1, #0]
 800a1f0:	460a      	mov	r2, r1
 800a1f2:	f04f 0500 	mov.w	r5, #0
 800a1f6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a1fa:	f842 3b1c 	str.w	r3, [r2], #28
 800a1fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a202:	4680      	mov	r8, r0
 800a204:	460c      	mov	r4, r1
 800a206:	bf98      	it	ls
 800a208:	f04f 0b00 	movls.w	fp, #0
 800a20c:	9201      	str	r2, [sp, #4]
 800a20e:	4616      	mov	r6, r2
 800a210:	46aa      	mov	sl, r5
 800a212:	462f      	mov	r7, r5
 800a214:	9502      	str	r5, [sp, #8]
 800a216:	68a2      	ldr	r2, [r4, #8]
 800a218:	b15a      	cbz	r2, 800a232 <_scanf_float+0x66>
 800a21a:	f8d9 3000 	ldr.w	r3, [r9]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b4e      	cmp	r3, #78	@ 0x4e
 800a222:	d863      	bhi.n	800a2ec <_scanf_float+0x120>
 800a224:	2b40      	cmp	r3, #64	@ 0x40
 800a226:	d83b      	bhi.n	800a2a0 <_scanf_float+0xd4>
 800a228:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a22c:	b2c8      	uxtb	r0, r1
 800a22e:	280e      	cmp	r0, #14
 800a230:	d939      	bls.n	800a2a6 <_scanf_float+0xda>
 800a232:	b11f      	cbz	r7, 800a23c <_scanf_float+0x70>
 800a234:	6823      	ldr	r3, [r4, #0]
 800a236:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a23a:	6023      	str	r3, [r4, #0]
 800a23c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a240:	f1ba 0f01 	cmp.w	sl, #1
 800a244:	f200 8114 	bhi.w	800a470 <_scanf_float+0x2a4>
 800a248:	9b01      	ldr	r3, [sp, #4]
 800a24a:	429e      	cmp	r6, r3
 800a24c:	f200 8105 	bhi.w	800a45a <_scanf_float+0x28e>
 800a250:	2001      	movs	r0, #1
 800a252:	b007      	add	sp, #28
 800a254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a258:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a25c:	2a0d      	cmp	r2, #13
 800a25e:	d8e8      	bhi.n	800a232 <_scanf_float+0x66>
 800a260:	a101      	add	r1, pc, #4	@ (adr r1, 800a268 <_scanf_float+0x9c>)
 800a262:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a266:	bf00      	nop
 800a268:	0800a3b1 	.word	0x0800a3b1
 800a26c:	0800a233 	.word	0x0800a233
 800a270:	0800a233 	.word	0x0800a233
 800a274:	0800a233 	.word	0x0800a233
 800a278:	0800a40d 	.word	0x0800a40d
 800a27c:	0800a3e7 	.word	0x0800a3e7
 800a280:	0800a233 	.word	0x0800a233
 800a284:	0800a233 	.word	0x0800a233
 800a288:	0800a3bf 	.word	0x0800a3bf
 800a28c:	0800a233 	.word	0x0800a233
 800a290:	0800a233 	.word	0x0800a233
 800a294:	0800a233 	.word	0x0800a233
 800a298:	0800a233 	.word	0x0800a233
 800a29c:	0800a37b 	.word	0x0800a37b
 800a2a0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a2a4:	e7da      	b.n	800a25c <_scanf_float+0x90>
 800a2a6:	290e      	cmp	r1, #14
 800a2a8:	d8c3      	bhi.n	800a232 <_scanf_float+0x66>
 800a2aa:	a001      	add	r0, pc, #4	@ (adr r0, 800a2b0 <_scanf_float+0xe4>)
 800a2ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a2b0:	0800a36b 	.word	0x0800a36b
 800a2b4:	0800a233 	.word	0x0800a233
 800a2b8:	0800a36b 	.word	0x0800a36b
 800a2bc:	0800a3fb 	.word	0x0800a3fb
 800a2c0:	0800a233 	.word	0x0800a233
 800a2c4:	0800a30d 	.word	0x0800a30d
 800a2c8:	0800a351 	.word	0x0800a351
 800a2cc:	0800a351 	.word	0x0800a351
 800a2d0:	0800a351 	.word	0x0800a351
 800a2d4:	0800a351 	.word	0x0800a351
 800a2d8:	0800a351 	.word	0x0800a351
 800a2dc:	0800a351 	.word	0x0800a351
 800a2e0:	0800a351 	.word	0x0800a351
 800a2e4:	0800a351 	.word	0x0800a351
 800a2e8:	0800a351 	.word	0x0800a351
 800a2ec:	2b6e      	cmp	r3, #110	@ 0x6e
 800a2ee:	d809      	bhi.n	800a304 <_scanf_float+0x138>
 800a2f0:	2b60      	cmp	r3, #96	@ 0x60
 800a2f2:	d8b1      	bhi.n	800a258 <_scanf_float+0x8c>
 800a2f4:	2b54      	cmp	r3, #84	@ 0x54
 800a2f6:	d07b      	beq.n	800a3f0 <_scanf_float+0x224>
 800a2f8:	2b59      	cmp	r3, #89	@ 0x59
 800a2fa:	d19a      	bne.n	800a232 <_scanf_float+0x66>
 800a2fc:	2d07      	cmp	r5, #7
 800a2fe:	d198      	bne.n	800a232 <_scanf_float+0x66>
 800a300:	2508      	movs	r5, #8
 800a302:	e02f      	b.n	800a364 <_scanf_float+0x198>
 800a304:	2b74      	cmp	r3, #116	@ 0x74
 800a306:	d073      	beq.n	800a3f0 <_scanf_float+0x224>
 800a308:	2b79      	cmp	r3, #121	@ 0x79
 800a30a:	e7f6      	b.n	800a2fa <_scanf_float+0x12e>
 800a30c:	6821      	ldr	r1, [r4, #0]
 800a30e:	05c8      	lsls	r0, r1, #23
 800a310:	d51e      	bpl.n	800a350 <_scanf_float+0x184>
 800a312:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a316:	6021      	str	r1, [r4, #0]
 800a318:	3701      	adds	r7, #1
 800a31a:	f1bb 0f00 	cmp.w	fp, #0
 800a31e:	d003      	beq.n	800a328 <_scanf_float+0x15c>
 800a320:	3201      	adds	r2, #1
 800a322:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a326:	60a2      	str	r2, [r4, #8]
 800a328:	68a3      	ldr	r3, [r4, #8]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	60a3      	str	r3, [r4, #8]
 800a32e:	6923      	ldr	r3, [r4, #16]
 800a330:	3301      	adds	r3, #1
 800a332:	6123      	str	r3, [r4, #16]
 800a334:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a338:	3b01      	subs	r3, #1
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f8c9 3004 	str.w	r3, [r9, #4]
 800a340:	f340 8082 	ble.w	800a448 <_scanf_float+0x27c>
 800a344:	f8d9 3000 	ldr.w	r3, [r9]
 800a348:	3301      	adds	r3, #1
 800a34a:	f8c9 3000 	str.w	r3, [r9]
 800a34e:	e762      	b.n	800a216 <_scanf_float+0x4a>
 800a350:	eb1a 0105 	adds.w	r1, sl, r5
 800a354:	f47f af6d 	bne.w	800a232 <_scanf_float+0x66>
 800a358:	6822      	ldr	r2, [r4, #0]
 800a35a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a35e:	6022      	str	r2, [r4, #0]
 800a360:	460d      	mov	r5, r1
 800a362:	468a      	mov	sl, r1
 800a364:	f806 3b01 	strb.w	r3, [r6], #1
 800a368:	e7de      	b.n	800a328 <_scanf_float+0x15c>
 800a36a:	6822      	ldr	r2, [r4, #0]
 800a36c:	0610      	lsls	r0, r2, #24
 800a36e:	f57f af60 	bpl.w	800a232 <_scanf_float+0x66>
 800a372:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a376:	6022      	str	r2, [r4, #0]
 800a378:	e7f4      	b.n	800a364 <_scanf_float+0x198>
 800a37a:	f1ba 0f00 	cmp.w	sl, #0
 800a37e:	d10c      	bne.n	800a39a <_scanf_float+0x1ce>
 800a380:	b977      	cbnz	r7, 800a3a0 <_scanf_float+0x1d4>
 800a382:	6822      	ldr	r2, [r4, #0]
 800a384:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a388:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a38c:	d108      	bne.n	800a3a0 <_scanf_float+0x1d4>
 800a38e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a392:	6022      	str	r2, [r4, #0]
 800a394:	f04f 0a01 	mov.w	sl, #1
 800a398:	e7e4      	b.n	800a364 <_scanf_float+0x198>
 800a39a:	f1ba 0f02 	cmp.w	sl, #2
 800a39e:	d050      	beq.n	800a442 <_scanf_float+0x276>
 800a3a0:	2d01      	cmp	r5, #1
 800a3a2:	d002      	beq.n	800a3aa <_scanf_float+0x1de>
 800a3a4:	2d04      	cmp	r5, #4
 800a3a6:	f47f af44 	bne.w	800a232 <_scanf_float+0x66>
 800a3aa:	3501      	adds	r5, #1
 800a3ac:	b2ed      	uxtb	r5, r5
 800a3ae:	e7d9      	b.n	800a364 <_scanf_float+0x198>
 800a3b0:	f1ba 0f01 	cmp.w	sl, #1
 800a3b4:	f47f af3d 	bne.w	800a232 <_scanf_float+0x66>
 800a3b8:	f04f 0a02 	mov.w	sl, #2
 800a3bc:	e7d2      	b.n	800a364 <_scanf_float+0x198>
 800a3be:	b975      	cbnz	r5, 800a3de <_scanf_float+0x212>
 800a3c0:	2f00      	cmp	r7, #0
 800a3c2:	f47f af37 	bne.w	800a234 <_scanf_float+0x68>
 800a3c6:	6822      	ldr	r2, [r4, #0]
 800a3c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a3cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a3d0:	f040 8103 	bne.w	800a5da <_scanf_float+0x40e>
 800a3d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a3d8:	6022      	str	r2, [r4, #0]
 800a3da:	2501      	movs	r5, #1
 800a3dc:	e7c2      	b.n	800a364 <_scanf_float+0x198>
 800a3de:	2d03      	cmp	r5, #3
 800a3e0:	d0e3      	beq.n	800a3aa <_scanf_float+0x1de>
 800a3e2:	2d05      	cmp	r5, #5
 800a3e4:	e7df      	b.n	800a3a6 <_scanf_float+0x1da>
 800a3e6:	2d02      	cmp	r5, #2
 800a3e8:	f47f af23 	bne.w	800a232 <_scanf_float+0x66>
 800a3ec:	2503      	movs	r5, #3
 800a3ee:	e7b9      	b.n	800a364 <_scanf_float+0x198>
 800a3f0:	2d06      	cmp	r5, #6
 800a3f2:	f47f af1e 	bne.w	800a232 <_scanf_float+0x66>
 800a3f6:	2507      	movs	r5, #7
 800a3f8:	e7b4      	b.n	800a364 <_scanf_float+0x198>
 800a3fa:	6822      	ldr	r2, [r4, #0]
 800a3fc:	0591      	lsls	r1, r2, #22
 800a3fe:	f57f af18 	bpl.w	800a232 <_scanf_float+0x66>
 800a402:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a406:	6022      	str	r2, [r4, #0]
 800a408:	9702      	str	r7, [sp, #8]
 800a40a:	e7ab      	b.n	800a364 <_scanf_float+0x198>
 800a40c:	6822      	ldr	r2, [r4, #0]
 800a40e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a412:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a416:	d005      	beq.n	800a424 <_scanf_float+0x258>
 800a418:	0550      	lsls	r0, r2, #21
 800a41a:	f57f af0a 	bpl.w	800a232 <_scanf_float+0x66>
 800a41e:	2f00      	cmp	r7, #0
 800a420:	f000 80db 	beq.w	800a5da <_scanf_float+0x40e>
 800a424:	0591      	lsls	r1, r2, #22
 800a426:	bf58      	it	pl
 800a428:	9902      	ldrpl	r1, [sp, #8]
 800a42a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a42e:	bf58      	it	pl
 800a430:	1a79      	subpl	r1, r7, r1
 800a432:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a436:	bf58      	it	pl
 800a438:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a43c:	6022      	str	r2, [r4, #0]
 800a43e:	2700      	movs	r7, #0
 800a440:	e790      	b.n	800a364 <_scanf_float+0x198>
 800a442:	f04f 0a03 	mov.w	sl, #3
 800a446:	e78d      	b.n	800a364 <_scanf_float+0x198>
 800a448:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a44c:	4649      	mov	r1, r9
 800a44e:	4640      	mov	r0, r8
 800a450:	4798      	blx	r3
 800a452:	2800      	cmp	r0, #0
 800a454:	f43f aedf 	beq.w	800a216 <_scanf_float+0x4a>
 800a458:	e6eb      	b.n	800a232 <_scanf_float+0x66>
 800a45a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a45e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a462:	464a      	mov	r2, r9
 800a464:	4640      	mov	r0, r8
 800a466:	4798      	blx	r3
 800a468:	6923      	ldr	r3, [r4, #16]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	6123      	str	r3, [r4, #16]
 800a46e:	e6eb      	b.n	800a248 <_scanf_float+0x7c>
 800a470:	1e6b      	subs	r3, r5, #1
 800a472:	2b06      	cmp	r3, #6
 800a474:	d824      	bhi.n	800a4c0 <_scanf_float+0x2f4>
 800a476:	2d02      	cmp	r5, #2
 800a478:	d836      	bhi.n	800a4e8 <_scanf_float+0x31c>
 800a47a:	9b01      	ldr	r3, [sp, #4]
 800a47c:	429e      	cmp	r6, r3
 800a47e:	f67f aee7 	bls.w	800a250 <_scanf_float+0x84>
 800a482:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a486:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a48a:	464a      	mov	r2, r9
 800a48c:	4640      	mov	r0, r8
 800a48e:	4798      	blx	r3
 800a490:	6923      	ldr	r3, [r4, #16]
 800a492:	3b01      	subs	r3, #1
 800a494:	6123      	str	r3, [r4, #16]
 800a496:	e7f0      	b.n	800a47a <_scanf_float+0x2ae>
 800a498:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a49c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a4a0:	464a      	mov	r2, r9
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	4798      	blx	r3
 800a4a6:	6923      	ldr	r3, [r4, #16]
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	6123      	str	r3, [r4, #16]
 800a4ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4b0:	fa5f fa8a 	uxtb.w	sl, sl
 800a4b4:	f1ba 0f02 	cmp.w	sl, #2
 800a4b8:	d1ee      	bne.n	800a498 <_scanf_float+0x2cc>
 800a4ba:	3d03      	subs	r5, #3
 800a4bc:	b2ed      	uxtb	r5, r5
 800a4be:	1b76      	subs	r6, r6, r5
 800a4c0:	6823      	ldr	r3, [r4, #0]
 800a4c2:	05da      	lsls	r2, r3, #23
 800a4c4:	d530      	bpl.n	800a528 <_scanf_float+0x35c>
 800a4c6:	055b      	lsls	r3, r3, #21
 800a4c8:	d511      	bpl.n	800a4ee <_scanf_float+0x322>
 800a4ca:	9b01      	ldr	r3, [sp, #4]
 800a4cc:	429e      	cmp	r6, r3
 800a4ce:	f67f aebf 	bls.w	800a250 <_scanf_float+0x84>
 800a4d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4da:	464a      	mov	r2, r9
 800a4dc:	4640      	mov	r0, r8
 800a4de:	4798      	blx	r3
 800a4e0:	6923      	ldr	r3, [r4, #16]
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	6123      	str	r3, [r4, #16]
 800a4e6:	e7f0      	b.n	800a4ca <_scanf_float+0x2fe>
 800a4e8:	46aa      	mov	sl, r5
 800a4ea:	46b3      	mov	fp, r6
 800a4ec:	e7de      	b.n	800a4ac <_scanf_float+0x2e0>
 800a4ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a4f2:	6923      	ldr	r3, [r4, #16]
 800a4f4:	2965      	cmp	r1, #101	@ 0x65
 800a4f6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a4fa:	f106 35ff 	add.w	r5, r6, #4294967295
 800a4fe:	6123      	str	r3, [r4, #16]
 800a500:	d00c      	beq.n	800a51c <_scanf_float+0x350>
 800a502:	2945      	cmp	r1, #69	@ 0x45
 800a504:	d00a      	beq.n	800a51c <_scanf_float+0x350>
 800a506:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a50a:	464a      	mov	r2, r9
 800a50c:	4640      	mov	r0, r8
 800a50e:	4798      	blx	r3
 800a510:	6923      	ldr	r3, [r4, #16]
 800a512:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a516:	3b01      	subs	r3, #1
 800a518:	1eb5      	subs	r5, r6, #2
 800a51a:	6123      	str	r3, [r4, #16]
 800a51c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a520:	464a      	mov	r2, r9
 800a522:	4640      	mov	r0, r8
 800a524:	4798      	blx	r3
 800a526:	462e      	mov	r6, r5
 800a528:	6822      	ldr	r2, [r4, #0]
 800a52a:	f012 0210 	ands.w	r2, r2, #16
 800a52e:	d001      	beq.n	800a534 <_scanf_float+0x368>
 800a530:	2000      	movs	r0, #0
 800a532:	e68e      	b.n	800a252 <_scanf_float+0x86>
 800a534:	7032      	strb	r2, [r6, #0]
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a53c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a540:	d125      	bne.n	800a58e <_scanf_float+0x3c2>
 800a542:	9b02      	ldr	r3, [sp, #8]
 800a544:	429f      	cmp	r7, r3
 800a546:	d00a      	beq.n	800a55e <_scanf_float+0x392>
 800a548:	1bda      	subs	r2, r3, r7
 800a54a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a54e:	429e      	cmp	r6, r3
 800a550:	bf28      	it	cs
 800a552:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a556:	4922      	ldr	r1, [pc, #136]	@ (800a5e0 <_scanf_float+0x414>)
 800a558:	4630      	mov	r0, r6
 800a55a:	f000 f93d 	bl	800a7d8 <siprintf>
 800a55e:	9901      	ldr	r1, [sp, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	4640      	mov	r0, r8
 800a564:	f002 fc3c 	bl	800cde0 <_strtod_r>
 800a568:	9b03      	ldr	r3, [sp, #12]
 800a56a:	6821      	ldr	r1, [r4, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f011 0f02 	tst.w	r1, #2
 800a572:	ec57 6b10 	vmov	r6, r7, d0
 800a576:	f103 0204 	add.w	r2, r3, #4
 800a57a:	d015      	beq.n	800a5a8 <_scanf_float+0x3dc>
 800a57c:	9903      	ldr	r1, [sp, #12]
 800a57e:	600a      	str	r2, [r1, #0]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	e9c3 6700 	strd	r6, r7, [r3]
 800a586:	68e3      	ldr	r3, [r4, #12]
 800a588:	3301      	adds	r3, #1
 800a58a:	60e3      	str	r3, [r4, #12]
 800a58c:	e7d0      	b.n	800a530 <_scanf_float+0x364>
 800a58e:	9b04      	ldr	r3, [sp, #16]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d0e4      	beq.n	800a55e <_scanf_float+0x392>
 800a594:	9905      	ldr	r1, [sp, #20]
 800a596:	230a      	movs	r3, #10
 800a598:	3101      	adds	r1, #1
 800a59a:	4640      	mov	r0, r8
 800a59c:	f002 fca0 	bl	800cee0 <_strtol_r>
 800a5a0:	9b04      	ldr	r3, [sp, #16]
 800a5a2:	9e05      	ldr	r6, [sp, #20]
 800a5a4:	1ac2      	subs	r2, r0, r3
 800a5a6:	e7d0      	b.n	800a54a <_scanf_float+0x37e>
 800a5a8:	f011 0f04 	tst.w	r1, #4
 800a5ac:	9903      	ldr	r1, [sp, #12]
 800a5ae:	600a      	str	r2, [r1, #0]
 800a5b0:	d1e6      	bne.n	800a580 <_scanf_float+0x3b4>
 800a5b2:	681d      	ldr	r5, [r3, #0]
 800a5b4:	4632      	mov	r2, r6
 800a5b6:	463b      	mov	r3, r7
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	f7f6 fab6 	bl	8000b2c <__aeabi_dcmpun>
 800a5c0:	b128      	cbz	r0, 800a5ce <_scanf_float+0x402>
 800a5c2:	4808      	ldr	r0, [pc, #32]	@ (800a5e4 <_scanf_float+0x418>)
 800a5c4:	f000 fa00 	bl	800a9c8 <nanf>
 800a5c8:	ed85 0a00 	vstr	s0, [r5]
 800a5cc:	e7db      	b.n	800a586 <_scanf_float+0x3ba>
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	f7f6 fb09 	bl	8000be8 <__aeabi_d2f>
 800a5d6:	6028      	str	r0, [r5, #0]
 800a5d8:	e7d5      	b.n	800a586 <_scanf_float+0x3ba>
 800a5da:	2700      	movs	r7, #0
 800a5dc:	e62e      	b.n	800a23c <_scanf_float+0x70>
 800a5de:	bf00      	nop
 800a5e0:	0800e14c 	.word	0x0800e14c
 800a5e4:	0800e28d 	.word	0x0800e28d

0800a5e8 <std>:
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	b510      	push	{r4, lr}
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	e9c0 3300 	strd	r3, r3, [r0]
 800a5f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5f6:	6083      	str	r3, [r0, #8]
 800a5f8:	8181      	strh	r1, [r0, #12]
 800a5fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800a5fc:	81c2      	strh	r2, [r0, #14]
 800a5fe:	6183      	str	r3, [r0, #24]
 800a600:	4619      	mov	r1, r3
 800a602:	2208      	movs	r2, #8
 800a604:	305c      	adds	r0, #92	@ 0x5c
 800a606:	f000 f94c 	bl	800a8a2 <memset>
 800a60a:	4b0d      	ldr	r3, [pc, #52]	@ (800a640 <std+0x58>)
 800a60c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a60e:	4b0d      	ldr	r3, [pc, #52]	@ (800a644 <std+0x5c>)
 800a610:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a612:	4b0d      	ldr	r3, [pc, #52]	@ (800a648 <std+0x60>)
 800a614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a616:	4b0d      	ldr	r3, [pc, #52]	@ (800a64c <std+0x64>)
 800a618:	6323      	str	r3, [r4, #48]	@ 0x30
 800a61a:	4b0d      	ldr	r3, [pc, #52]	@ (800a650 <std+0x68>)
 800a61c:	6224      	str	r4, [r4, #32]
 800a61e:	429c      	cmp	r4, r3
 800a620:	d006      	beq.n	800a630 <std+0x48>
 800a622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a626:	4294      	cmp	r4, r2
 800a628:	d002      	beq.n	800a630 <std+0x48>
 800a62a:	33d0      	adds	r3, #208	@ 0xd0
 800a62c:	429c      	cmp	r4, r3
 800a62e:	d105      	bne.n	800a63c <std+0x54>
 800a630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a638:	f000 b9c2 	b.w	800a9c0 <__retarget_lock_init_recursive>
 800a63c:	bd10      	pop	{r4, pc}
 800a63e:	bf00      	nop
 800a640:	0800a81d 	.word	0x0800a81d
 800a644:	0800a83f 	.word	0x0800a83f
 800a648:	0800a877 	.word	0x0800a877
 800a64c:	0800a89b 	.word	0x0800a89b
 800a650:	2000200c 	.word	0x2000200c

0800a654 <stdio_exit_handler>:
 800a654:	4a02      	ldr	r2, [pc, #8]	@ (800a660 <stdio_exit_handler+0xc>)
 800a656:	4903      	ldr	r1, [pc, #12]	@ (800a664 <stdio_exit_handler+0x10>)
 800a658:	4803      	ldr	r0, [pc, #12]	@ (800a668 <stdio_exit_handler+0x14>)
 800a65a:	f000 b869 	b.w	800a730 <_fwalk_sglue>
 800a65e:	bf00      	nop
 800a660:	200000fc 	.word	0x200000fc
 800a664:	0800d29d 	.word	0x0800d29d
 800a668:	2000010c 	.word	0x2000010c

0800a66c <cleanup_stdio>:
 800a66c:	6841      	ldr	r1, [r0, #4]
 800a66e:	4b0c      	ldr	r3, [pc, #48]	@ (800a6a0 <cleanup_stdio+0x34>)
 800a670:	4299      	cmp	r1, r3
 800a672:	b510      	push	{r4, lr}
 800a674:	4604      	mov	r4, r0
 800a676:	d001      	beq.n	800a67c <cleanup_stdio+0x10>
 800a678:	f002 fe10 	bl	800d29c <_fflush_r>
 800a67c:	68a1      	ldr	r1, [r4, #8]
 800a67e:	4b09      	ldr	r3, [pc, #36]	@ (800a6a4 <cleanup_stdio+0x38>)
 800a680:	4299      	cmp	r1, r3
 800a682:	d002      	beq.n	800a68a <cleanup_stdio+0x1e>
 800a684:	4620      	mov	r0, r4
 800a686:	f002 fe09 	bl	800d29c <_fflush_r>
 800a68a:	68e1      	ldr	r1, [r4, #12]
 800a68c:	4b06      	ldr	r3, [pc, #24]	@ (800a6a8 <cleanup_stdio+0x3c>)
 800a68e:	4299      	cmp	r1, r3
 800a690:	d004      	beq.n	800a69c <cleanup_stdio+0x30>
 800a692:	4620      	mov	r0, r4
 800a694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a698:	f002 be00 	b.w	800d29c <_fflush_r>
 800a69c:	bd10      	pop	{r4, pc}
 800a69e:	bf00      	nop
 800a6a0:	2000200c 	.word	0x2000200c
 800a6a4:	20002074 	.word	0x20002074
 800a6a8:	200020dc 	.word	0x200020dc

0800a6ac <global_stdio_init.part.0>:
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a6dc <global_stdio_init.part.0+0x30>)
 800a6b0:	4c0b      	ldr	r4, [pc, #44]	@ (800a6e0 <global_stdio_init.part.0+0x34>)
 800a6b2:	4a0c      	ldr	r2, [pc, #48]	@ (800a6e4 <global_stdio_init.part.0+0x38>)
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	2104      	movs	r1, #4
 800a6bc:	f7ff ff94 	bl	800a5e8 <std>
 800a6c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	2109      	movs	r1, #9
 800a6c8:	f7ff ff8e 	bl	800a5e8 <std>
 800a6cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6d6:	2112      	movs	r1, #18
 800a6d8:	f7ff bf86 	b.w	800a5e8 <std>
 800a6dc:	20002144 	.word	0x20002144
 800a6e0:	2000200c 	.word	0x2000200c
 800a6e4:	0800a655 	.word	0x0800a655

0800a6e8 <__sfp_lock_acquire>:
 800a6e8:	4801      	ldr	r0, [pc, #4]	@ (800a6f0 <__sfp_lock_acquire+0x8>)
 800a6ea:	f000 b96a 	b.w	800a9c2 <__retarget_lock_acquire_recursive>
 800a6ee:	bf00      	nop
 800a6f0:	2000214d 	.word	0x2000214d

0800a6f4 <__sfp_lock_release>:
 800a6f4:	4801      	ldr	r0, [pc, #4]	@ (800a6fc <__sfp_lock_release+0x8>)
 800a6f6:	f000 b965 	b.w	800a9c4 <__retarget_lock_release_recursive>
 800a6fa:	bf00      	nop
 800a6fc:	2000214d 	.word	0x2000214d

0800a700 <__sinit>:
 800a700:	b510      	push	{r4, lr}
 800a702:	4604      	mov	r4, r0
 800a704:	f7ff fff0 	bl	800a6e8 <__sfp_lock_acquire>
 800a708:	6a23      	ldr	r3, [r4, #32]
 800a70a:	b11b      	cbz	r3, 800a714 <__sinit+0x14>
 800a70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a710:	f7ff bff0 	b.w	800a6f4 <__sfp_lock_release>
 800a714:	4b04      	ldr	r3, [pc, #16]	@ (800a728 <__sinit+0x28>)
 800a716:	6223      	str	r3, [r4, #32]
 800a718:	4b04      	ldr	r3, [pc, #16]	@ (800a72c <__sinit+0x2c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1f5      	bne.n	800a70c <__sinit+0xc>
 800a720:	f7ff ffc4 	bl	800a6ac <global_stdio_init.part.0>
 800a724:	e7f2      	b.n	800a70c <__sinit+0xc>
 800a726:	bf00      	nop
 800a728:	0800a66d 	.word	0x0800a66d
 800a72c:	20002144 	.word	0x20002144

0800a730 <_fwalk_sglue>:
 800a730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a734:	4607      	mov	r7, r0
 800a736:	4688      	mov	r8, r1
 800a738:	4614      	mov	r4, r2
 800a73a:	2600      	movs	r6, #0
 800a73c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a740:	f1b9 0901 	subs.w	r9, r9, #1
 800a744:	d505      	bpl.n	800a752 <_fwalk_sglue+0x22>
 800a746:	6824      	ldr	r4, [r4, #0]
 800a748:	2c00      	cmp	r4, #0
 800a74a:	d1f7      	bne.n	800a73c <_fwalk_sglue+0xc>
 800a74c:	4630      	mov	r0, r6
 800a74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a752:	89ab      	ldrh	r3, [r5, #12]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d907      	bls.n	800a768 <_fwalk_sglue+0x38>
 800a758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a75c:	3301      	adds	r3, #1
 800a75e:	d003      	beq.n	800a768 <_fwalk_sglue+0x38>
 800a760:	4629      	mov	r1, r5
 800a762:	4638      	mov	r0, r7
 800a764:	47c0      	blx	r8
 800a766:	4306      	orrs	r6, r0
 800a768:	3568      	adds	r5, #104	@ 0x68
 800a76a:	e7e9      	b.n	800a740 <_fwalk_sglue+0x10>

0800a76c <sniprintf>:
 800a76c:	b40c      	push	{r2, r3}
 800a76e:	b530      	push	{r4, r5, lr}
 800a770:	4b18      	ldr	r3, [pc, #96]	@ (800a7d4 <sniprintf+0x68>)
 800a772:	1e0c      	subs	r4, r1, #0
 800a774:	681d      	ldr	r5, [r3, #0]
 800a776:	b09d      	sub	sp, #116	@ 0x74
 800a778:	da08      	bge.n	800a78c <sniprintf+0x20>
 800a77a:	238b      	movs	r3, #139	@ 0x8b
 800a77c:	602b      	str	r3, [r5, #0]
 800a77e:	f04f 30ff 	mov.w	r0, #4294967295
 800a782:	b01d      	add	sp, #116	@ 0x74
 800a784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a788:	b002      	add	sp, #8
 800a78a:	4770      	bx	lr
 800a78c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a790:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a794:	f04f 0300 	mov.w	r3, #0
 800a798:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a79a:	bf14      	ite	ne
 800a79c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a7a0:	4623      	moveq	r3, r4
 800a7a2:	9304      	str	r3, [sp, #16]
 800a7a4:	9307      	str	r3, [sp, #28]
 800a7a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a7aa:	9002      	str	r0, [sp, #8]
 800a7ac:	9006      	str	r0, [sp, #24]
 800a7ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a7b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a7b4:	ab21      	add	r3, sp, #132	@ 0x84
 800a7b6:	a902      	add	r1, sp, #8
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	9301      	str	r3, [sp, #4]
 800a7bc:	f002 fbee 	bl	800cf9c <_svfiprintf_r>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	bfbc      	itt	lt
 800a7c4:	238b      	movlt	r3, #139	@ 0x8b
 800a7c6:	602b      	strlt	r3, [r5, #0]
 800a7c8:	2c00      	cmp	r4, #0
 800a7ca:	d0da      	beq.n	800a782 <sniprintf+0x16>
 800a7cc:	9b02      	ldr	r3, [sp, #8]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	701a      	strb	r2, [r3, #0]
 800a7d2:	e7d6      	b.n	800a782 <sniprintf+0x16>
 800a7d4:	20000108 	.word	0x20000108

0800a7d8 <siprintf>:
 800a7d8:	b40e      	push	{r1, r2, r3}
 800a7da:	b510      	push	{r4, lr}
 800a7dc:	b09d      	sub	sp, #116	@ 0x74
 800a7de:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a7e0:	9002      	str	r0, [sp, #8]
 800a7e2:	9006      	str	r0, [sp, #24]
 800a7e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a7e8:	480a      	ldr	r0, [pc, #40]	@ (800a814 <siprintf+0x3c>)
 800a7ea:	9107      	str	r1, [sp, #28]
 800a7ec:	9104      	str	r1, [sp, #16]
 800a7ee:	490a      	ldr	r1, [pc, #40]	@ (800a818 <siprintf+0x40>)
 800a7f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7f4:	9105      	str	r1, [sp, #20]
 800a7f6:	2400      	movs	r4, #0
 800a7f8:	a902      	add	r1, sp, #8
 800a7fa:	6800      	ldr	r0, [r0, #0]
 800a7fc:	9301      	str	r3, [sp, #4]
 800a7fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a800:	f002 fbcc 	bl	800cf9c <_svfiprintf_r>
 800a804:	9b02      	ldr	r3, [sp, #8]
 800a806:	701c      	strb	r4, [r3, #0]
 800a808:	b01d      	add	sp, #116	@ 0x74
 800a80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a80e:	b003      	add	sp, #12
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	20000108 	.word	0x20000108
 800a818:	ffff0208 	.word	0xffff0208

0800a81c <__sread>:
 800a81c:	b510      	push	{r4, lr}
 800a81e:	460c      	mov	r4, r1
 800a820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a824:	f000 f87e 	bl	800a924 <_read_r>
 800a828:	2800      	cmp	r0, #0
 800a82a:	bfab      	itete	ge
 800a82c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a82e:	89a3      	ldrhlt	r3, [r4, #12]
 800a830:	181b      	addge	r3, r3, r0
 800a832:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a836:	bfac      	ite	ge
 800a838:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a83a:	81a3      	strhlt	r3, [r4, #12]
 800a83c:	bd10      	pop	{r4, pc}

0800a83e <__swrite>:
 800a83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a842:	461f      	mov	r7, r3
 800a844:	898b      	ldrh	r3, [r1, #12]
 800a846:	05db      	lsls	r3, r3, #23
 800a848:	4605      	mov	r5, r0
 800a84a:	460c      	mov	r4, r1
 800a84c:	4616      	mov	r6, r2
 800a84e:	d505      	bpl.n	800a85c <__swrite+0x1e>
 800a850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a854:	2302      	movs	r3, #2
 800a856:	2200      	movs	r2, #0
 800a858:	f000 f852 	bl	800a900 <_lseek_r>
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a862:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a866:	81a3      	strh	r3, [r4, #12]
 800a868:	4632      	mov	r2, r6
 800a86a:	463b      	mov	r3, r7
 800a86c:	4628      	mov	r0, r5
 800a86e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a872:	f000 b869 	b.w	800a948 <_write_r>

0800a876 <__sseek>:
 800a876:	b510      	push	{r4, lr}
 800a878:	460c      	mov	r4, r1
 800a87a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a87e:	f000 f83f 	bl	800a900 <_lseek_r>
 800a882:	1c43      	adds	r3, r0, #1
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	bf15      	itete	ne
 800a888:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a88a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a88e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a892:	81a3      	strheq	r3, [r4, #12]
 800a894:	bf18      	it	ne
 800a896:	81a3      	strhne	r3, [r4, #12]
 800a898:	bd10      	pop	{r4, pc}

0800a89a <__sclose>:
 800a89a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a89e:	f000 b81f 	b.w	800a8e0 <_close_r>

0800a8a2 <memset>:
 800a8a2:	4402      	add	r2, r0
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d100      	bne.n	800a8ac <memset+0xa>
 800a8aa:	4770      	bx	lr
 800a8ac:	f803 1b01 	strb.w	r1, [r3], #1
 800a8b0:	e7f9      	b.n	800a8a6 <memset+0x4>

0800a8b2 <strncat>:
 800a8b2:	b530      	push	{r4, r5, lr}
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	7825      	ldrb	r5, [r4, #0]
 800a8b8:	4623      	mov	r3, r4
 800a8ba:	3401      	adds	r4, #1
 800a8bc:	2d00      	cmp	r5, #0
 800a8be:	d1fa      	bne.n	800a8b6 <strncat+0x4>
 800a8c0:	3a01      	subs	r2, #1
 800a8c2:	d304      	bcc.n	800a8ce <strncat+0x1c>
 800a8c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8c8:	f803 4b01 	strb.w	r4, [r3], #1
 800a8cc:	b904      	cbnz	r4, 800a8d0 <strncat+0x1e>
 800a8ce:	bd30      	pop	{r4, r5, pc}
 800a8d0:	2a00      	cmp	r2, #0
 800a8d2:	d1f5      	bne.n	800a8c0 <strncat+0xe>
 800a8d4:	701a      	strb	r2, [r3, #0]
 800a8d6:	e7f3      	b.n	800a8c0 <strncat+0xe>

0800a8d8 <_localeconv_r>:
 800a8d8:	4800      	ldr	r0, [pc, #0]	@ (800a8dc <_localeconv_r+0x4>)
 800a8da:	4770      	bx	lr
 800a8dc:	20000248 	.word	0x20000248

0800a8e0 <_close_r>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	4d06      	ldr	r5, [pc, #24]	@ (800a8fc <_close_r+0x1c>)
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	4608      	mov	r0, r1
 800a8ea:	602b      	str	r3, [r5, #0]
 800a8ec:	f7f6 fff0 	bl	80018d0 <_close>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d102      	bne.n	800a8fa <_close_r+0x1a>
 800a8f4:	682b      	ldr	r3, [r5, #0]
 800a8f6:	b103      	cbz	r3, 800a8fa <_close_r+0x1a>
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	20002148 	.word	0x20002148

0800a900 <_lseek_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d07      	ldr	r5, [pc, #28]	@ (800a920 <_lseek_r+0x20>)
 800a904:	4604      	mov	r4, r0
 800a906:	4608      	mov	r0, r1
 800a908:	4611      	mov	r1, r2
 800a90a:	2200      	movs	r2, #0
 800a90c:	602a      	str	r2, [r5, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	f7f7 f805 	bl	800191e <_lseek>
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d102      	bne.n	800a91e <_lseek_r+0x1e>
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	b103      	cbz	r3, 800a91e <_lseek_r+0x1e>
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	20002148 	.word	0x20002148

0800a924 <_read_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4d07      	ldr	r5, [pc, #28]	@ (800a944 <_read_r+0x20>)
 800a928:	4604      	mov	r4, r0
 800a92a:	4608      	mov	r0, r1
 800a92c:	4611      	mov	r1, r2
 800a92e:	2200      	movs	r2, #0
 800a930:	602a      	str	r2, [r5, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	f7f6 ff93 	bl	800185e <_read>
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	d102      	bne.n	800a942 <_read_r+0x1e>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	b103      	cbz	r3, 800a942 <_read_r+0x1e>
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	bd38      	pop	{r3, r4, r5, pc}
 800a944:	20002148 	.word	0x20002148

0800a948 <_write_r>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	4d07      	ldr	r5, [pc, #28]	@ (800a968 <_write_r+0x20>)
 800a94c:	4604      	mov	r4, r0
 800a94e:	4608      	mov	r0, r1
 800a950:	4611      	mov	r1, r2
 800a952:	2200      	movs	r2, #0
 800a954:	602a      	str	r2, [r5, #0]
 800a956:	461a      	mov	r2, r3
 800a958:	f7f6 ff9e 	bl	8001898 <_write>
 800a95c:	1c43      	adds	r3, r0, #1
 800a95e:	d102      	bne.n	800a966 <_write_r+0x1e>
 800a960:	682b      	ldr	r3, [r5, #0]
 800a962:	b103      	cbz	r3, 800a966 <_write_r+0x1e>
 800a964:	6023      	str	r3, [r4, #0]
 800a966:	bd38      	pop	{r3, r4, r5, pc}
 800a968:	20002148 	.word	0x20002148

0800a96c <__errno>:
 800a96c:	4b01      	ldr	r3, [pc, #4]	@ (800a974 <__errno+0x8>)
 800a96e:	6818      	ldr	r0, [r3, #0]
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	20000108 	.word	0x20000108

0800a978 <__libc_init_array>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	4d0d      	ldr	r5, [pc, #52]	@ (800a9b0 <__libc_init_array+0x38>)
 800a97c:	4c0d      	ldr	r4, [pc, #52]	@ (800a9b4 <__libc_init_array+0x3c>)
 800a97e:	1b64      	subs	r4, r4, r5
 800a980:	10a4      	asrs	r4, r4, #2
 800a982:	2600      	movs	r6, #0
 800a984:	42a6      	cmp	r6, r4
 800a986:	d109      	bne.n	800a99c <__libc_init_array+0x24>
 800a988:	4d0b      	ldr	r5, [pc, #44]	@ (800a9b8 <__libc_init_array+0x40>)
 800a98a:	4c0c      	ldr	r4, [pc, #48]	@ (800a9bc <__libc_init_array+0x44>)
 800a98c:	f003 fb76 	bl	800e07c <_init>
 800a990:	1b64      	subs	r4, r4, r5
 800a992:	10a4      	asrs	r4, r4, #2
 800a994:	2600      	movs	r6, #0
 800a996:	42a6      	cmp	r6, r4
 800a998:	d105      	bne.n	800a9a6 <__libc_init_array+0x2e>
 800a99a:	bd70      	pop	{r4, r5, r6, pc}
 800a99c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a0:	4798      	blx	r3
 800a9a2:	3601      	adds	r6, #1
 800a9a4:	e7ee      	b.n	800a984 <__libc_init_array+0xc>
 800a9a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9aa:	4798      	blx	r3
 800a9ac:	3601      	adds	r6, #1
 800a9ae:	e7f2      	b.n	800a996 <__libc_init_array+0x1e>
 800a9b0:	0800e54c 	.word	0x0800e54c
 800a9b4:	0800e54c 	.word	0x0800e54c
 800a9b8:	0800e54c 	.word	0x0800e54c
 800a9bc:	0800e550 	.word	0x0800e550

0800a9c0 <__retarget_lock_init_recursive>:
 800a9c0:	4770      	bx	lr

0800a9c2 <__retarget_lock_acquire_recursive>:
 800a9c2:	4770      	bx	lr

0800a9c4 <__retarget_lock_release_recursive>:
 800a9c4:	4770      	bx	lr
	...

0800a9c8 <nanf>:
 800a9c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a9d0 <nanf+0x8>
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	7fc00000 	.word	0x7fc00000

0800a9d4 <quorem>:
 800a9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	6903      	ldr	r3, [r0, #16]
 800a9da:	690c      	ldr	r4, [r1, #16]
 800a9dc:	42a3      	cmp	r3, r4
 800a9de:	4607      	mov	r7, r0
 800a9e0:	db7e      	blt.n	800aae0 <quorem+0x10c>
 800a9e2:	3c01      	subs	r4, #1
 800a9e4:	f101 0814 	add.w	r8, r1, #20
 800a9e8:	00a3      	lsls	r3, r4, #2
 800a9ea:	f100 0514 	add.w	r5, r0, #20
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9f4:	9301      	str	r3, [sp, #4]
 800a9f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a9fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	429a      	cmp	r2, r3
 800aa02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa06:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa0a:	d32e      	bcc.n	800aa6a <quorem+0x96>
 800aa0c:	f04f 0a00 	mov.w	sl, #0
 800aa10:	46c4      	mov	ip, r8
 800aa12:	46ae      	mov	lr, r5
 800aa14:	46d3      	mov	fp, sl
 800aa16:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa1a:	b298      	uxth	r0, r3
 800aa1c:	fb06 a000 	mla	r0, r6, r0, sl
 800aa20:	0c02      	lsrs	r2, r0, #16
 800aa22:	0c1b      	lsrs	r3, r3, #16
 800aa24:	fb06 2303 	mla	r3, r6, r3, r2
 800aa28:	f8de 2000 	ldr.w	r2, [lr]
 800aa2c:	b280      	uxth	r0, r0
 800aa2e:	b292      	uxth	r2, r2
 800aa30:	1a12      	subs	r2, r2, r0
 800aa32:	445a      	add	r2, fp
 800aa34:	f8de 0000 	ldr.w	r0, [lr]
 800aa38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa42:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa46:	b292      	uxth	r2, r2
 800aa48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa4c:	45e1      	cmp	r9, ip
 800aa4e:	f84e 2b04 	str.w	r2, [lr], #4
 800aa52:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aa56:	d2de      	bcs.n	800aa16 <quorem+0x42>
 800aa58:	9b00      	ldr	r3, [sp, #0]
 800aa5a:	58eb      	ldr	r3, [r5, r3]
 800aa5c:	b92b      	cbnz	r3, 800aa6a <quorem+0x96>
 800aa5e:	9b01      	ldr	r3, [sp, #4]
 800aa60:	3b04      	subs	r3, #4
 800aa62:	429d      	cmp	r5, r3
 800aa64:	461a      	mov	r2, r3
 800aa66:	d32f      	bcc.n	800aac8 <quorem+0xf4>
 800aa68:	613c      	str	r4, [r7, #16]
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	f001 f9c8 	bl	800be00 <__mcmp>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	db25      	blt.n	800aac0 <quorem+0xec>
 800aa74:	4629      	mov	r1, r5
 800aa76:	2000      	movs	r0, #0
 800aa78:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa7c:	f8d1 c000 	ldr.w	ip, [r1]
 800aa80:	fa1f fe82 	uxth.w	lr, r2
 800aa84:	fa1f f38c 	uxth.w	r3, ip
 800aa88:	eba3 030e 	sub.w	r3, r3, lr
 800aa8c:	4403      	add	r3, r0
 800aa8e:	0c12      	lsrs	r2, r2, #16
 800aa90:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aa94:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa9e:	45c1      	cmp	r9, r8
 800aaa0:	f841 3b04 	str.w	r3, [r1], #4
 800aaa4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aaa8:	d2e6      	bcs.n	800aa78 <quorem+0xa4>
 800aaaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aab2:	b922      	cbnz	r2, 800aabe <quorem+0xea>
 800aab4:	3b04      	subs	r3, #4
 800aab6:	429d      	cmp	r5, r3
 800aab8:	461a      	mov	r2, r3
 800aaba:	d30b      	bcc.n	800aad4 <quorem+0x100>
 800aabc:	613c      	str	r4, [r7, #16]
 800aabe:	3601      	adds	r6, #1
 800aac0:	4630      	mov	r0, r6
 800aac2:	b003      	add	sp, #12
 800aac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac8:	6812      	ldr	r2, [r2, #0]
 800aaca:	3b04      	subs	r3, #4
 800aacc:	2a00      	cmp	r2, #0
 800aace:	d1cb      	bne.n	800aa68 <quorem+0x94>
 800aad0:	3c01      	subs	r4, #1
 800aad2:	e7c6      	b.n	800aa62 <quorem+0x8e>
 800aad4:	6812      	ldr	r2, [r2, #0]
 800aad6:	3b04      	subs	r3, #4
 800aad8:	2a00      	cmp	r2, #0
 800aada:	d1ef      	bne.n	800aabc <quorem+0xe8>
 800aadc:	3c01      	subs	r4, #1
 800aade:	e7ea      	b.n	800aab6 <quorem+0xe2>
 800aae0:	2000      	movs	r0, #0
 800aae2:	e7ee      	b.n	800aac2 <quorem+0xee>
 800aae4:	0000      	movs	r0, r0
	...

0800aae8 <_dtoa_r>:
 800aae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaec:	69c7      	ldr	r7, [r0, #28]
 800aaee:	b097      	sub	sp, #92	@ 0x5c
 800aaf0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800aaf4:	ec55 4b10 	vmov	r4, r5, d0
 800aaf8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800aafa:	9107      	str	r1, [sp, #28]
 800aafc:	4681      	mov	r9, r0
 800aafe:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab00:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab02:	b97f      	cbnz	r7, 800ab24 <_dtoa_r+0x3c>
 800ab04:	2010      	movs	r0, #16
 800ab06:	f000 fe09 	bl	800b71c <malloc>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ab10:	b920      	cbnz	r0, 800ab1c <_dtoa_r+0x34>
 800ab12:	4ba9      	ldr	r3, [pc, #676]	@ (800adb8 <_dtoa_r+0x2d0>)
 800ab14:	21ef      	movs	r1, #239	@ 0xef
 800ab16:	48a9      	ldr	r0, [pc, #676]	@ (800adbc <_dtoa_r+0x2d4>)
 800ab18:	f002 fc3a 	bl	800d390 <__assert_func>
 800ab1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ab20:	6007      	str	r7, [r0, #0]
 800ab22:	60c7      	str	r7, [r0, #12]
 800ab24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab28:	6819      	ldr	r1, [r3, #0]
 800ab2a:	b159      	cbz	r1, 800ab44 <_dtoa_r+0x5c>
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	604a      	str	r2, [r1, #4]
 800ab30:	2301      	movs	r3, #1
 800ab32:	4093      	lsls	r3, r2
 800ab34:	608b      	str	r3, [r1, #8]
 800ab36:	4648      	mov	r0, r9
 800ab38:	f000 fee6 	bl	800b908 <_Bfree>
 800ab3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab40:	2200      	movs	r2, #0
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	1e2b      	subs	r3, r5, #0
 800ab46:	bfb9      	ittee	lt
 800ab48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab4c:	9305      	strlt	r3, [sp, #20]
 800ab4e:	2300      	movge	r3, #0
 800ab50:	6033      	strge	r3, [r6, #0]
 800ab52:	9f05      	ldr	r7, [sp, #20]
 800ab54:	4b9a      	ldr	r3, [pc, #616]	@ (800adc0 <_dtoa_r+0x2d8>)
 800ab56:	bfbc      	itt	lt
 800ab58:	2201      	movlt	r2, #1
 800ab5a:	6032      	strlt	r2, [r6, #0]
 800ab5c:	43bb      	bics	r3, r7
 800ab5e:	d112      	bne.n	800ab86 <_dtoa_r+0x9e>
 800ab60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab62:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab66:	6013      	str	r3, [r2, #0]
 800ab68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab6c:	4323      	orrs	r3, r4
 800ab6e:	f000 855a 	beq.w	800b626 <_dtoa_r+0xb3e>
 800ab72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab74:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800add4 <_dtoa_r+0x2ec>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f000 855c 	beq.w	800b636 <_dtoa_r+0xb4e>
 800ab7e:	f10a 0303 	add.w	r3, sl, #3
 800ab82:	f000 bd56 	b.w	800b632 <_dtoa_r+0xb4a>
 800ab86:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	ec51 0b17 	vmov	r0, r1, d7
 800ab90:	2300      	movs	r3, #0
 800ab92:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ab96:	f7f5 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab9a:	4680      	mov	r8, r0
 800ab9c:	b158      	cbz	r0, 800abb6 <_dtoa_r+0xce>
 800ab9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aba0:	2301      	movs	r3, #1
 800aba2:	6013      	str	r3, [r2, #0]
 800aba4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aba6:	b113      	cbz	r3, 800abae <_dtoa_r+0xc6>
 800aba8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800abaa:	4b86      	ldr	r3, [pc, #536]	@ (800adc4 <_dtoa_r+0x2dc>)
 800abac:	6013      	str	r3, [r2, #0]
 800abae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800add8 <_dtoa_r+0x2f0>
 800abb2:	f000 bd40 	b.w	800b636 <_dtoa_r+0xb4e>
 800abb6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800abba:	aa14      	add	r2, sp, #80	@ 0x50
 800abbc:	a915      	add	r1, sp, #84	@ 0x54
 800abbe:	4648      	mov	r0, r9
 800abc0:	f001 fa3e 	bl	800c040 <__d2b>
 800abc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800abc8:	9002      	str	r0, [sp, #8]
 800abca:	2e00      	cmp	r6, #0
 800abcc:	d078      	beq.n	800acc0 <_dtoa_r+0x1d8>
 800abce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abd0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800abd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abdc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800abe0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800abe4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800abe8:	4619      	mov	r1, r3
 800abea:	2200      	movs	r2, #0
 800abec:	4b76      	ldr	r3, [pc, #472]	@ (800adc8 <_dtoa_r+0x2e0>)
 800abee:	f7f5 fb4b 	bl	8000288 <__aeabi_dsub>
 800abf2:	a36b      	add	r3, pc, #428	@ (adr r3, 800ada0 <_dtoa_r+0x2b8>)
 800abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf8:	f7f5 fcfe 	bl	80005f8 <__aeabi_dmul>
 800abfc:	a36a      	add	r3, pc, #424	@ (adr r3, 800ada8 <_dtoa_r+0x2c0>)
 800abfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac02:	f7f5 fb43 	bl	800028c <__adddf3>
 800ac06:	4604      	mov	r4, r0
 800ac08:	4630      	mov	r0, r6
 800ac0a:	460d      	mov	r5, r1
 800ac0c:	f7f5 fc8a 	bl	8000524 <__aeabi_i2d>
 800ac10:	a367      	add	r3, pc, #412	@ (adr r3, 800adb0 <_dtoa_r+0x2c8>)
 800ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac16:	f7f5 fcef 	bl	80005f8 <__aeabi_dmul>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4620      	mov	r0, r4
 800ac20:	4629      	mov	r1, r5
 800ac22:	f7f5 fb33 	bl	800028c <__adddf3>
 800ac26:	4604      	mov	r4, r0
 800ac28:	460d      	mov	r5, r1
 800ac2a:	f7f5 ff95 	bl	8000b58 <__aeabi_d2iz>
 800ac2e:	2200      	movs	r2, #0
 800ac30:	4607      	mov	r7, r0
 800ac32:	2300      	movs	r3, #0
 800ac34:	4620      	mov	r0, r4
 800ac36:	4629      	mov	r1, r5
 800ac38:	f7f5 ff50 	bl	8000adc <__aeabi_dcmplt>
 800ac3c:	b140      	cbz	r0, 800ac50 <_dtoa_r+0x168>
 800ac3e:	4638      	mov	r0, r7
 800ac40:	f7f5 fc70 	bl	8000524 <__aeabi_i2d>
 800ac44:	4622      	mov	r2, r4
 800ac46:	462b      	mov	r3, r5
 800ac48:	f7f5 ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac4c:	b900      	cbnz	r0, 800ac50 <_dtoa_r+0x168>
 800ac4e:	3f01      	subs	r7, #1
 800ac50:	2f16      	cmp	r7, #22
 800ac52:	d852      	bhi.n	800acfa <_dtoa_r+0x212>
 800ac54:	4b5d      	ldr	r3, [pc, #372]	@ (800adcc <_dtoa_r+0x2e4>)
 800ac56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ac62:	f7f5 ff3b 	bl	8000adc <__aeabi_dcmplt>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d049      	beq.n	800acfe <_dtoa_r+0x216>
 800ac6a:	3f01      	subs	r7, #1
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac72:	1b9b      	subs	r3, r3, r6
 800ac74:	1e5a      	subs	r2, r3, #1
 800ac76:	bf45      	ittet	mi
 800ac78:	f1c3 0301 	rsbmi	r3, r3, #1
 800ac7c:	9300      	strmi	r3, [sp, #0]
 800ac7e:	2300      	movpl	r3, #0
 800ac80:	2300      	movmi	r3, #0
 800ac82:	9206      	str	r2, [sp, #24]
 800ac84:	bf54      	ite	pl
 800ac86:	9300      	strpl	r3, [sp, #0]
 800ac88:	9306      	strmi	r3, [sp, #24]
 800ac8a:	2f00      	cmp	r7, #0
 800ac8c:	db39      	blt.n	800ad02 <_dtoa_r+0x21a>
 800ac8e:	9b06      	ldr	r3, [sp, #24]
 800ac90:	970d      	str	r7, [sp, #52]	@ 0x34
 800ac92:	443b      	add	r3, r7
 800ac94:	9306      	str	r3, [sp, #24]
 800ac96:	2300      	movs	r3, #0
 800ac98:	9308      	str	r3, [sp, #32]
 800ac9a:	9b07      	ldr	r3, [sp, #28]
 800ac9c:	2b09      	cmp	r3, #9
 800ac9e:	d863      	bhi.n	800ad68 <_dtoa_r+0x280>
 800aca0:	2b05      	cmp	r3, #5
 800aca2:	bfc4      	itt	gt
 800aca4:	3b04      	subgt	r3, #4
 800aca6:	9307      	strgt	r3, [sp, #28]
 800aca8:	9b07      	ldr	r3, [sp, #28]
 800acaa:	f1a3 0302 	sub.w	r3, r3, #2
 800acae:	bfcc      	ite	gt
 800acb0:	2400      	movgt	r4, #0
 800acb2:	2401      	movle	r4, #1
 800acb4:	2b03      	cmp	r3, #3
 800acb6:	d863      	bhi.n	800ad80 <_dtoa_r+0x298>
 800acb8:	e8df f003 	tbb	[pc, r3]
 800acbc:	2b375452 	.word	0x2b375452
 800acc0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800acc4:	441e      	add	r6, r3
 800acc6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800acca:	2b20      	cmp	r3, #32
 800accc:	bfc1      	itttt	gt
 800acce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800acd2:	409f      	lslgt	r7, r3
 800acd4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800acd8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800acdc:	bfd6      	itet	le
 800acde:	f1c3 0320 	rsble	r3, r3, #32
 800ace2:	ea47 0003 	orrgt.w	r0, r7, r3
 800ace6:	fa04 f003 	lslle.w	r0, r4, r3
 800acea:	f7f5 fc0b 	bl	8000504 <__aeabi_ui2d>
 800acee:	2201      	movs	r2, #1
 800acf0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800acf4:	3e01      	subs	r6, #1
 800acf6:	9212      	str	r2, [sp, #72]	@ 0x48
 800acf8:	e776      	b.n	800abe8 <_dtoa_r+0x100>
 800acfa:	2301      	movs	r3, #1
 800acfc:	e7b7      	b.n	800ac6e <_dtoa_r+0x186>
 800acfe:	9010      	str	r0, [sp, #64]	@ 0x40
 800ad00:	e7b6      	b.n	800ac70 <_dtoa_r+0x188>
 800ad02:	9b00      	ldr	r3, [sp, #0]
 800ad04:	1bdb      	subs	r3, r3, r7
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	427b      	negs	r3, r7
 800ad0a:	9308      	str	r3, [sp, #32]
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad10:	e7c3      	b.n	800ac9a <_dtoa_r+0x1b2>
 800ad12:	2301      	movs	r3, #1
 800ad14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad18:	eb07 0b03 	add.w	fp, r7, r3
 800ad1c:	f10b 0301 	add.w	r3, fp, #1
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	9303      	str	r3, [sp, #12]
 800ad24:	bfb8      	it	lt
 800ad26:	2301      	movlt	r3, #1
 800ad28:	e006      	b.n	800ad38 <_dtoa_r+0x250>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	dd28      	ble.n	800ad86 <_dtoa_r+0x29e>
 800ad34:	469b      	mov	fp, r3
 800ad36:	9303      	str	r3, [sp, #12]
 800ad38:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	2204      	movs	r2, #4
 800ad40:	f102 0514 	add.w	r5, r2, #20
 800ad44:	429d      	cmp	r5, r3
 800ad46:	d926      	bls.n	800ad96 <_dtoa_r+0x2ae>
 800ad48:	6041      	str	r1, [r0, #4]
 800ad4a:	4648      	mov	r0, r9
 800ad4c:	f000 fd9c 	bl	800b888 <_Balloc>
 800ad50:	4682      	mov	sl, r0
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d142      	bne.n	800addc <_dtoa_r+0x2f4>
 800ad56:	4b1e      	ldr	r3, [pc, #120]	@ (800add0 <_dtoa_r+0x2e8>)
 800ad58:	4602      	mov	r2, r0
 800ad5a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ad5e:	e6da      	b.n	800ab16 <_dtoa_r+0x2e>
 800ad60:	2300      	movs	r3, #0
 800ad62:	e7e3      	b.n	800ad2c <_dtoa_r+0x244>
 800ad64:	2300      	movs	r3, #0
 800ad66:	e7d5      	b.n	800ad14 <_dtoa_r+0x22c>
 800ad68:	2401      	movs	r4, #1
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	9307      	str	r3, [sp, #28]
 800ad6e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ad70:	f04f 3bff 	mov.w	fp, #4294967295
 800ad74:	2200      	movs	r2, #0
 800ad76:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad7a:	2312      	movs	r3, #18
 800ad7c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad7e:	e7db      	b.n	800ad38 <_dtoa_r+0x250>
 800ad80:	2301      	movs	r3, #1
 800ad82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad84:	e7f4      	b.n	800ad70 <_dtoa_r+0x288>
 800ad86:	f04f 0b01 	mov.w	fp, #1
 800ad8a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad8e:	465b      	mov	r3, fp
 800ad90:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ad94:	e7d0      	b.n	800ad38 <_dtoa_r+0x250>
 800ad96:	3101      	adds	r1, #1
 800ad98:	0052      	lsls	r2, r2, #1
 800ad9a:	e7d1      	b.n	800ad40 <_dtoa_r+0x258>
 800ad9c:	f3af 8000 	nop.w
 800ada0:	636f4361 	.word	0x636f4361
 800ada4:	3fd287a7 	.word	0x3fd287a7
 800ada8:	8b60c8b3 	.word	0x8b60c8b3
 800adac:	3fc68a28 	.word	0x3fc68a28
 800adb0:	509f79fb 	.word	0x509f79fb
 800adb4:	3fd34413 	.word	0x3fd34413
 800adb8:	0800e15e 	.word	0x0800e15e
 800adbc:	0800e175 	.word	0x0800e175
 800adc0:	7ff00000 	.word	0x7ff00000
 800adc4:	0800e129 	.word	0x0800e129
 800adc8:	3ff80000 	.word	0x3ff80000
 800adcc:	0800e328 	.word	0x0800e328
 800add0:	0800e1cd 	.word	0x0800e1cd
 800add4:	0800e15a 	.word	0x0800e15a
 800add8:	0800e128 	.word	0x0800e128
 800addc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ade0:	6018      	str	r0, [r3, #0]
 800ade2:	9b03      	ldr	r3, [sp, #12]
 800ade4:	2b0e      	cmp	r3, #14
 800ade6:	f200 80a1 	bhi.w	800af2c <_dtoa_r+0x444>
 800adea:	2c00      	cmp	r4, #0
 800adec:	f000 809e 	beq.w	800af2c <_dtoa_r+0x444>
 800adf0:	2f00      	cmp	r7, #0
 800adf2:	dd33      	ble.n	800ae5c <_dtoa_r+0x374>
 800adf4:	4b9c      	ldr	r3, [pc, #624]	@ (800b068 <_dtoa_r+0x580>)
 800adf6:	f007 020f 	and.w	r2, r7, #15
 800adfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adfe:	ed93 7b00 	vldr	d7, [r3]
 800ae02:	05f8      	lsls	r0, r7, #23
 800ae04:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ae08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ae0c:	d516      	bpl.n	800ae3c <_dtoa_r+0x354>
 800ae0e:	4b97      	ldr	r3, [pc, #604]	@ (800b06c <_dtoa_r+0x584>)
 800ae10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae18:	f7f5 fd18 	bl	800084c <__aeabi_ddiv>
 800ae1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae20:	f004 040f 	and.w	r4, r4, #15
 800ae24:	2603      	movs	r6, #3
 800ae26:	4d91      	ldr	r5, [pc, #580]	@ (800b06c <_dtoa_r+0x584>)
 800ae28:	b954      	cbnz	r4, 800ae40 <_dtoa_r+0x358>
 800ae2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae32:	f7f5 fd0b 	bl	800084c <__aeabi_ddiv>
 800ae36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae3a:	e028      	b.n	800ae8e <_dtoa_r+0x3a6>
 800ae3c:	2602      	movs	r6, #2
 800ae3e:	e7f2      	b.n	800ae26 <_dtoa_r+0x33e>
 800ae40:	07e1      	lsls	r1, r4, #31
 800ae42:	d508      	bpl.n	800ae56 <_dtoa_r+0x36e>
 800ae44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ae48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae4c:	f7f5 fbd4 	bl	80005f8 <__aeabi_dmul>
 800ae50:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ae54:	3601      	adds	r6, #1
 800ae56:	1064      	asrs	r4, r4, #1
 800ae58:	3508      	adds	r5, #8
 800ae5a:	e7e5      	b.n	800ae28 <_dtoa_r+0x340>
 800ae5c:	f000 80af 	beq.w	800afbe <_dtoa_r+0x4d6>
 800ae60:	427c      	negs	r4, r7
 800ae62:	4b81      	ldr	r3, [pc, #516]	@ (800b068 <_dtoa_r+0x580>)
 800ae64:	4d81      	ldr	r5, [pc, #516]	@ (800b06c <_dtoa_r+0x584>)
 800ae66:	f004 020f 	and.w	r2, r4, #15
 800ae6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae76:	f7f5 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ae7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae7e:	1124      	asrs	r4, r4, #4
 800ae80:	2300      	movs	r3, #0
 800ae82:	2602      	movs	r6, #2
 800ae84:	2c00      	cmp	r4, #0
 800ae86:	f040 808f 	bne.w	800afa8 <_dtoa_r+0x4c0>
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1d3      	bne.n	800ae36 <_dtoa_r+0x34e>
 800ae8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ae90:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 8094 	beq.w	800afc2 <_dtoa_r+0x4da>
 800ae9a:	4b75      	ldr	r3, [pc, #468]	@ (800b070 <_dtoa_r+0x588>)
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	4620      	mov	r0, r4
 800aea0:	4629      	mov	r1, r5
 800aea2:	f7f5 fe1b 	bl	8000adc <__aeabi_dcmplt>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	f000 808b 	beq.w	800afc2 <_dtoa_r+0x4da>
 800aeac:	9b03      	ldr	r3, [sp, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 8087 	beq.w	800afc2 <_dtoa_r+0x4da>
 800aeb4:	f1bb 0f00 	cmp.w	fp, #0
 800aeb8:	dd34      	ble.n	800af24 <_dtoa_r+0x43c>
 800aeba:	4620      	mov	r0, r4
 800aebc:	4b6d      	ldr	r3, [pc, #436]	@ (800b074 <_dtoa_r+0x58c>)
 800aebe:	2200      	movs	r2, #0
 800aec0:	4629      	mov	r1, r5
 800aec2:	f7f5 fb99 	bl	80005f8 <__aeabi_dmul>
 800aec6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aeca:	f107 38ff 	add.w	r8, r7, #4294967295
 800aece:	3601      	adds	r6, #1
 800aed0:	465c      	mov	r4, fp
 800aed2:	4630      	mov	r0, r6
 800aed4:	f7f5 fb26 	bl	8000524 <__aeabi_i2d>
 800aed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aedc:	f7f5 fb8c 	bl	80005f8 <__aeabi_dmul>
 800aee0:	4b65      	ldr	r3, [pc, #404]	@ (800b078 <_dtoa_r+0x590>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	f7f5 f9d2 	bl	800028c <__adddf3>
 800aee8:	4605      	mov	r5, r0
 800aeea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aeee:	2c00      	cmp	r4, #0
 800aef0:	d16a      	bne.n	800afc8 <_dtoa_r+0x4e0>
 800aef2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aef6:	4b61      	ldr	r3, [pc, #388]	@ (800b07c <_dtoa_r+0x594>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	f7f5 f9c5 	bl	8000288 <__aeabi_dsub>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af06:	462a      	mov	r2, r5
 800af08:	4633      	mov	r3, r6
 800af0a:	f7f5 fe05 	bl	8000b18 <__aeabi_dcmpgt>
 800af0e:	2800      	cmp	r0, #0
 800af10:	f040 8298 	bne.w	800b444 <_dtoa_r+0x95c>
 800af14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af18:	462a      	mov	r2, r5
 800af1a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800af1e:	f7f5 fddd 	bl	8000adc <__aeabi_dcmplt>
 800af22:	bb38      	cbnz	r0, 800af74 <_dtoa_r+0x48c>
 800af24:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800af28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f2c0 8157 	blt.w	800b1e2 <_dtoa_r+0x6fa>
 800af34:	2f0e      	cmp	r7, #14
 800af36:	f300 8154 	bgt.w	800b1e2 <_dtoa_r+0x6fa>
 800af3a:	4b4b      	ldr	r3, [pc, #300]	@ (800b068 <_dtoa_r+0x580>)
 800af3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af40:	ed93 7b00 	vldr	d7, [r3]
 800af44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af46:	2b00      	cmp	r3, #0
 800af48:	ed8d 7b00 	vstr	d7, [sp]
 800af4c:	f280 80e5 	bge.w	800b11a <_dtoa_r+0x632>
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	2b00      	cmp	r3, #0
 800af54:	f300 80e1 	bgt.w	800b11a <_dtoa_r+0x632>
 800af58:	d10c      	bne.n	800af74 <_dtoa_r+0x48c>
 800af5a:	4b48      	ldr	r3, [pc, #288]	@ (800b07c <_dtoa_r+0x594>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	ec51 0b17 	vmov	r0, r1, d7
 800af62:	f7f5 fb49 	bl	80005f8 <__aeabi_dmul>
 800af66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af6a:	f7f5 fdcb 	bl	8000b04 <__aeabi_dcmpge>
 800af6e:	2800      	cmp	r0, #0
 800af70:	f000 8266 	beq.w	800b440 <_dtoa_r+0x958>
 800af74:	2400      	movs	r4, #0
 800af76:	4625      	mov	r5, r4
 800af78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af7a:	4656      	mov	r6, sl
 800af7c:	ea6f 0803 	mvn.w	r8, r3
 800af80:	2700      	movs	r7, #0
 800af82:	4621      	mov	r1, r4
 800af84:	4648      	mov	r0, r9
 800af86:	f000 fcbf 	bl	800b908 <_Bfree>
 800af8a:	2d00      	cmp	r5, #0
 800af8c:	f000 80bd 	beq.w	800b10a <_dtoa_r+0x622>
 800af90:	b12f      	cbz	r7, 800af9e <_dtoa_r+0x4b6>
 800af92:	42af      	cmp	r7, r5
 800af94:	d003      	beq.n	800af9e <_dtoa_r+0x4b6>
 800af96:	4639      	mov	r1, r7
 800af98:	4648      	mov	r0, r9
 800af9a:	f000 fcb5 	bl	800b908 <_Bfree>
 800af9e:	4629      	mov	r1, r5
 800afa0:	4648      	mov	r0, r9
 800afa2:	f000 fcb1 	bl	800b908 <_Bfree>
 800afa6:	e0b0      	b.n	800b10a <_dtoa_r+0x622>
 800afa8:	07e2      	lsls	r2, r4, #31
 800afaa:	d505      	bpl.n	800afb8 <_dtoa_r+0x4d0>
 800afac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afb0:	f7f5 fb22 	bl	80005f8 <__aeabi_dmul>
 800afb4:	3601      	adds	r6, #1
 800afb6:	2301      	movs	r3, #1
 800afb8:	1064      	asrs	r4, r4, #1
 800afba:	3508      	adds	r5, #8
 800afbc:	e762      	b.n	800ae84 <_dtoa_r+0x39c>
 800afbe:	2602      	movs	r6, #2
 800afc0:	e765      	b.n	800ae8e <_dtoa_r+0x3a6>
 800afc2:	9c03      	ldr	r4, [sp, #12]
 800afc4:	46b8      	mov	r8, r7
 800afc6:	e784      	b.n	800aed2 <_dtoa_r+0x3ea>
 800afc8:	4b27      	ldr	r3, [pc, #156]	@ (800b068 <_dtoa_r+0x580>)
 800afca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800afd4:	4454      	add	r4, sl
 800afd6:	2900      	cmp	r1, #0
 800afd8:	d054      	beq.n	800b084 <_dtoa_r+0x59c>
 800afda:	4929      	ldr	r1, [pc, #164]	@ (800b080 <_dtoa_r+0x598>)
 800afdc:	2000      	movs	r0, #0
 800afde:	f7f5 fc35 	bl	800084c <__aeabi_ddiv>
 800afe2:	4633      	mov	r3, r6
 800afe4:	462a      	mov	r2, r5
 800afe6:	f7f5 f94f 	bl	8000288 <__aeabi_dsub>
 800afea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800afee:	4656      	mov	r6, sl
 800aff0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aff4:	f7f5 fdb0 	bl	8000b58 <__aeabi_d2iz>
 800aff8:	4605      	mov	r5, r0
 800affa:	f7f5 fa93 	bl	8000524 <__aeabi_i2d>
 800affe:	4602      	mov	r2, r0
 800b000:	460b      	mov	r3, r1
 800b002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b006:	f7f5 f93f 	bl	8000288 <__aeabi_dsub>
 800b00a:	3530      	adds	r5, #48	@ 0x30
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b014:	f806 5b01 	strb.w	r5, [r6], #1
 800b018:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b01c:	f7f5 fd5e 	bl	8000adc <__aeabi_dcmplt>
 800b020:	2800      	cmp	r0, #0
 800b022:	d172      	bne.n	800b10a <_dtoa_r+0x622>
 800b024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b028:	4911      	ldr	r1, [pc, #68]	@ (800b070 <_dtoa_r+0x588>)
 800b02a:	2000      	movs	r0, #0
 800b02c:	f7f5 f92c 	bl	8000288 <__aeabi_dsub>
 800b030:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b034:	f7f5 fd52 	bl	8000adc <__aeabi_dcmplt>
 800b038:	2800      	cmp	r0, #0
 800b03a:	f040 80b4 	bne.w	800b1a6 <_dtoa_r+0x6be>
 800b03e:	42a6      	cmp	r6, r4
 800b040:	f43f af70 	beq.w	800af24 <_dtoa_r+0x43c>
 800b044:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b048:	4b0a      	ldr	r3, [pc, #40]	@ (800b074 <_dtoa_r+0x58c>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	f7f5 fad4 	bl	80005f8 <__aeabi_dmul>
 800b050:	4b08      	ldr	r3, [pc, #32]	@ (800b074 <_dtoa_r+0x58c>)
 800b052:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b056:	2200      	movs	r2, #0
 800b058:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b05c:	f7f5 facc 	bl	80005f8 <__aeabi_dmul>
 800b060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b064:	e7c4      	b.n	800aff0 <_dtoa_r+0x508>
 800b066:	bf00      	nop
 800b068:	0800e328 	.word	0x0800e328
 800b06c:	0800e300 	.word	0x0800e300
 800b070:	3ff00000 	.word	0x3ff00000
 800b074:	40240000 	.word	0x40240000
 800b078:	401c0000 	.word	0x401c0000
 800b07c:	40140000 	.word	0x40140000
 800b080:	3fe00000 	.word	0x3fe00000
 800b084:	4631      	mov	r1, r6
 800b086:	4628      	mov	r0, r5
 800b088:	f7f5 fab6 	bl	80005f8 <__aeabi_dmul>
 800b08c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b090:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b092:	4656      	mov	r6, sl
 800b094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b098:	f7f5 fd5e 	bl	8000b58 <__aeabi_d2iz>
 800b09c:	4605      	mov	r5, r0
 800b09e:	f7f5 fa41 	bl	8000524 <__aeabi_i2d>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0aa:	f7f5 f8ed 	bl	8000288 <__aeabi_dsub>
 800b0ae:	3530      	adds	r5, #48	@ 0x30
 800b0b0:	f806 5b01 	strb.w	r5, [r6], #1
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	42a6      	cmp	r6, r4
 800b0ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0be:	f04f 0200 	mov.w	r2, #0
 800b0c2:	d124      	bne.n	800b10e <_dtoa_r+0x626>
 800b0c4:	4baf      	ldr	r3, [pc, #700]	@ (800b384 <_dtoa_r+0x89c>)
 800b0c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b0ca:	f7f5 f8df 	bl	800028c <__adddf3>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0d6:	f7f5 fd1f 	bl	8000b18 <__aeabi_dcmpgt>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d163      	bne.n	800b1a6 <_dtoa_r+0x6be>
 800b0de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b0e2:	49a8      	ldr	r1, [pc, #672]	@ (800b384 <_dtoa_r+0x89c>)
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	f7f5 f8cf 	bl	8000288 <__aeabi_dsub>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0f2:	f7f5 fcf3 	bl	8000adc <__aeabi_dcmplt>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	f43f af14 	beq.w	800af24 <_dtoa_r+0x43c>
 800b0fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b0fe:	1e73      	subs	r3, r6, #1
 800b100:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b102:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b106:	2b30      	cmp	r3, #48	@ 0x30
 800b108:	d0f8      	beq.n	800b0fc <_dtoa_r+0x614>
 800b10a:	4647      	mov	r7, r8
 800b10c:	e03b      	b.n	800b186 <_dtoa_r+0x69e>
 800b10e:	4b9e      	ldr	r3, [pc, #632]	@ (800b388 <_dtoa_r+0x8a0>)
 800b110:	f7f5 fa72 	bl	80005f8 <__aeabi_dmul>
 800b114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b118:	e7bc      	b.n	800b094 <_dtoa_r+0x5ac>
 800b11a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b11e:	4656      	mov	r6, sl
 800b120:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b124:	4620      	mov	r0, r4
 800b126:	4629      	mov	r1, r5
 800b128:	f7f5 fb90 	bl	800084c <__aeabi_ddiv>
 800b12c:	f7f5 fd14 	bl	8000b58 <__aeabi_d2iz>
 800b130:	4680      	mov	r8, r0
 800b132:	f7f5 f9f7 	bl	8000524 <__aeabi_i2d>
 800b136:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b13a:	f7f5 fa5d 	bl	80005f8 <__aeabi_dmul>
 800b13e:	4602      	mov	r2, r0
 800b140:	460b      	mov	r3, r1
 800b142:	4620      	mov	r0, r4
 800b144:	4629      	mov	r1, r5
 800b146:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b14a:	f7f5 f89d 	bl	8000288 <__aeabi_dsub>
 800b14e:	f806 4b01 	strb.w	r4, [r6], #1
 800b152:	9d03      	ldr	r5, [sp, #12]
 800b154:	eba6 040a 	sub.w	r4, r6, sl
 800b158:	42a5      	cmp	r5, r4
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	d133      	bne.n	800b1c8 <_dtoa_r+0x6e0>
 800b160:	f7f5 f894 	bl	800028c <__adddf3>
 800b164:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b168:	4604      	mov	r4, r0
 800b16a:	460d      	mov	r5, r1
 800b16c:	f7f5 fcd4 	bl	8000b18 <__aeabi_dcmpgt>
 800b170:	b9c0      	cbnz	r0, 800b1a4 <_dtoa_r+0x6bc>
 800b172:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b176:	4620      	mov	r0, r4
 800b178:	4629      	mov	r1, r5
 800b17a:	f7f5 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b17e:	b110      	cbz	r0, 800b186 <_dtoa_r+0x69e>
 800b180:	f018 0f01 	tst.w	r8, #1
 800b184:	d10e      	bne.n	800b1a4 <_dtoa_r+0x6bc>
 800b186:	9902      	ldr	r1, [sp, #8]
 800b188:	4648      	mov	r0, r9
 800b18a:	f000 fbbd 	bl	800b908 <_Bfree>
 800b18e:	2300      	movs	r3, #0
 800b190:	7033      	strb	r3, [r6, #0]
 800b192:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b194:	3701      	adds	r7, #1
 800b196:	601f      	str	r7, [r3, #0]
 800b198:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f000 824b 	beq.w	800b636 <_dtoa_r+0xb4e>
 800b1a0:	601e      	str	r6, [r3, #0]
 800b1a2:	e248      	b.n	800b636 <_dtoa_r+0xb4e>
 800b1a4:	46b8      	mov	r8, r7
 800b1a6:	4633      	mov	r3, r6
 800b1a8:	461e      	mov	r6, r3
 800b1aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1ae:	2a39      	cmp	r2, #57	@ 0x39
 800b1b0:	d106      	bne.n	800b1c0 <_dtoa_r+0x6d8>
 800b1b2:	459a      	cmp	sl, r3
 800b1b4:	d1f8      	bne.n	800b1a8 <_dtoa_r+0x6c0>
 800b1b6:	2230      	movs	r2, #48	@ 0x30
 800b1b8:	f108 0801 	add.w	r8, r8, #1
 800b1bc:	f88a 2000 	strb.w	r2, [sl]
 800b1c0:	781a      	ldrb	r2, [r3, #0]
 800b1c2:	3201      	adds	r2, #1
 800b1c4:	701a      	strb	r2, [r3, #0]
 800b1c6:	e7a0      	b.n	800b10a <_dtoa_r+0x622>
 800b1c8:	4b6f      	ldr	r3, [pc, #444]	@ (800b388 <_dtoa_r+0x8a0>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f7f5 fa14 	bl	80005f8 <__aeabi_dmul>
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	460d      	mov	r5, r1
 800b1d8:	f7f5 fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	d09f      	beq.n	800b120 <_dtoa_r+0x638>
 800b1e0:	e7d1      	b.n	800b186 <_dtoa_r+0x69e>
 800b1e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1e4:	2a00      	cmp	r2, #0
 800b1e6:	f000 80ea 	beq.w	800b3be <_dtoa_r+0x8d6>
 800b1ea:	9a07      	ldr	r2, [sp, #28]
 800b1ec:	2a01      	cmp	r2, #1
 800b1ee:	f300 80cd 	bgt.w	800b38c <_dtoa_r+0x8a4>
 800b1f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b1f4:	2a00      	cmp	r2, #0
 800b1f6:	f000 80c1 	beq.w	800b37c <_dtoa_r+0x894>
 800b1fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b1fe:	9c08      	ldr	r4, [sp, #32]
 800b200:	9e00      	ldr	r6, [sp, #0]
 800b202:	9a00      	ldr	r2, [sp, #0]
 800b204:	441a      	add	r2, r3
 800b206:	9200      	str	r2, [sp, #0]
 800b208:	9a06      	ldr	r2, [sp, #24]
 800b20a:	2101      	movs	r1, #1
 800b20c:	441a      	add	r2, r3
 800b20e:	4648      	mov	r0, r9
 800b210:	9206      	str	r2, [sp, #24]
 800b212:	f000 fc77 	bl	800bb04 <__i2b>
 800b216:	4605      	mov	r5, r0
 800b218:	b166      	cbz	r6, 800b234 <_dtoa_r+0x74c>
 800b21a:	9b06      	ldr	r3, [sp, #24]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	dd09      	ble.n	800b234 <_dtoa_r+0x74c>
 800b220:	42b3      	cmp	r3, r6
 800b222:	9a00      	ldr	r2, [sp, #0]
 800b224:	bfa8      	it	ge
 800b226:	4633      	movge	r3, r6
 800b228:	1ad2      	subs	r2, r2, r3
 800b22a:	9200      	str	r2, [sp, #0]
 800b22c:	9a06      	ldr	r2, [sp, #24]
 800b22e:	1af6      	subs	r6, r6, r3
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	9306      	str	r3, [sp, #24]
 800b234:	9b08      	ldr	r3, [sp, #32]
 800b236:	b30b      	cbz	r3, 800b27c <_dtoa_r+0x794>
 800b238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	f000 80c6 	beq.w	800b3cc <_dtoa_r+0x8e4>
 800b240:	2c00      	cmp	r4, #0
 800b242:	f000 80c0 	beq.w	800b3c6 <_dtoa_r+0x8de>
 800b246:	4629      	mov	r1, r5
 800b248:	4622      	mov	r2, r4
 800b24a:	4648      	mov	r0, r9
 800b24c:	f000 fd12 	bl	800bc74 <__pow5mult>
 800b250:	9a02      	ldr	r2, [sp, #8]
 800b252:	4601      	mov	r1, r0
 800b254:	4605      	mov	r5, r0
 800b256:	4648      	mov	r0, r9
 800b258:	f000 fc6a 	bl	800bb30 <__multiply>
 800b25c:	9902      	ldr	r1, [sp, #8]
 800b25e:	4680      	mov	r8, r0
 800b260:	4648      	mov	r0, r9
 800b262:	f000 fb51 	bl	800b908 <_Bfree>
 800b266:	9b08      	ldr	r3, [sp, #32]
 800b268:	1b1b      	subs	r3, r3, r4
 800b26a:	9308      	str	r3, [sp, #32]
 800b26c:	f000 80b1 	beq.w	800b3d2 <_dtoa_r+0x8ea>
 800b270:	9a08      	ldr	r2, [sp, #32]
 800b272:	4641      	mov	r1, r8
 800b274:	4648      	mov	r0, r9
 800b276:	f000 fcfd 	bl	800bc74 <__pow5mult>
 800b27a:	9002      	str	r0, [sp, #8]
 800b27c:	2101      	movs	r1, #1
 800b27e:	4648      	mov	r0, r9
 800b280:	f000 fc40 	bl	800bb04 <__i2b>
 800b284:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b286:	4604      	mov	r4, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 81d8 	beq.w	800b63e <_dtoa_r+0xb56>
 800b28e:	461a      	mov	r2, r3
 800b290:	4601      	mov	r1, r0
 800b292:	4648      	mov	r0, r9
 800b294:	f000 fcee 	bl	800bc74 <__pow5mult>
 800b298:	9b07      	ldr	r3, [sp, #28]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	4604      	mov	r4, r0
 800b29e:	f300 809f 	bgt.w	800b3e0 <_dtoa_r+0x8f8>
 800b2a2:	9b04      	ldr	r3, [sp, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f040 8097 	bne.w	800b3d8 <_dtoa_r+0x8f0>
 800b2aa:	9b05      	ldr	r3, [sp, #20]
 800b2ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f040 8093 	bne.w	800b3dc <_dtoa_r+0x8f4>
 800b2b6:	9b05      	ldr	r3, [sp, #20]
 800b2b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2bc:	0d1b      	lsrs	r3, r3, #20
 800b2be:	051b      	lsls	r3, r3, #20
 800b2c0:	b133      	cbz	r3, 800b2d0 <_dtoa_r+0x7e8>
 800b2c2:	9b00      	ldr	r3, [sp, #0]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	9300      	str	r3, [sp, #0]
 800b2c8:	9b06      	ldr	r3, [sp, #24]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	9306      	str	r3, [sp, #24]
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	9308      	str	r3, [sp, #32]
 800b2d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f000 81b8 	beq.w	800b64a <_dtoa_r+0xb62>
 800b2da:	6923      	ldr	r3, [r4, #16]
 800b2dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2e0:	6918      	ldr	r0, [r3, #16]
 800b2e2:	f000 fbc3 	bl	800ba6c <__hi0bits>
 800b2e6:	f1c0 0020 	rsb	r0, r0, #32
 800b2ea:	9b06      	ldr	r3, [sp, #24]
 800b2ec:	4418      	add	r0, r3
 800b2ee:	f010 001f 	ands.w	r0, r0, #31
 800b2f2:	f000 8082 	beq.w	800b3fa <_dtoa_r+0x912>
 800b2f6:	f1c0 0320 	rsb	r3, r0, #32
 800b2fa:	2b04      	cmp	r3, #4
 800b2fc:	dd73      	ble.n	800b3e6 <_dtoa_r+0x8fe>
 800b2fe:	9b00      	ldr	r3, [sp, #0]
 800b300:	f1c0 001c 	rsb	r0, r0, #28
 800b304:	4403      	add	r3, r0
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	9b06      	ldr	r3, [sp, #24]
 800b30a:	4403      	add	r3, r0
 800b30c:	4406      	add	r6, r0
 800b30e:	9306      	str	r3, [sp, #24]
 800b310:	9b00      	ldr	r3, [sp, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	dd05      	ble.n	800b322 <_dtoa_r+0x83a>
 800b316:	9902      	ldr	r1, [sp, #8]
 800b318:	461a      	mov	r2, r3
 800b31a:	4648      	mov	r0, r9
 800b31c:	f000 fd04 	bl	800bd28 <__lshift>
 800b320:	9002      	str	r0, [sp, #8]
 800b322:	9b06      	ldr	r3, [sp, #24]
 800b324:	2b00      	cmp	r3, #0
 800b326:	dd05      	ble.n	800b334 <_dtoa_r+0x84c>
 800b328:	4621      	mov	r1, r4
 800b32a:	461a      	mov	r2, r3
 800b32c:	4648      	mov	r0, r9
 800b32e:	f000 fcfb 	bl	800bd28 <__lshift>
 800b332:	4604      	mov	r4, r0
 800b334:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b336:	2b00      	cmp	r3, #0
 800b338:	d061      	beq.n	800b3fe <_dtoa_r+0x916>
 800b33a:	9802      	ldr	r0, [sp, #8]
 800b33c:	4621      	mov	r1, r4
 800b33e:	f000 fd5f 	bl	800be00 <__mcmp>
 800b342:	2800      	cmp	r0, #0
 800b344:	da5b      	bge.n	800b3fe <_dtoa_r+0x916>
 800b346:	2300      	movs	r3, #0
 800b348:	9902      	ldr	r1, [sp, #8]
 800b34a:	220a      	movs	r2, #10
 800b34c:	4648      	mov	r0, r9
 800b34e:	f000 fafd 	bl	800b94c <__multadd>
 800b352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b354:	9002      	str	r0, [sp, #8]
 800b356:	f107 38ff 	add.w	r8, r7, #4294967295
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f000 8177 	beq.w	800b64e <_dtoa_r+0xb66>
 800b360:	4629      	mov	r1, r5
 800b362:	2300      	movs	r3, #0
 800b364:	220a      	movs	r2, #10
 800b366:	4648      	mov	r0, r9
 800b368:	f000 faf0 	bl	800b94c <__multadd>
 800b36c:	f1bb 0f00 	cmp.w	fp, #0
 800b370:	4605      	mov	r5, r0
 800b372:	dc6f      	bgt.n	800b454 <_dtoa_r+0x96c>
 800b374:	9b07      	ldr	r3, [sp, #28]
 800b376:	2b02      	cmp	r3, #2
 800b378:	dc49      	bgt.n	800b40e <_dtoa_r+0x926>
 800b37a:	e06b      	b.n	800b454 <_dtoa_r+0x96c>
 800b37c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b37e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b382:	e73c      	b.n	800b1fe <_dtoa_r+0x716>
 800b384:	3fe00000 	.word	0x3fe00000
 800b388:	40240000 	.word	0x40240000
 800b38c:	9b03      	ldr	r3, [sp, #12]
 800b38e:	1e5c      	subs	r4, r3, #1
 800b390:	9b08      	ldr	r3, [sp, #32]
 800b392:	42a3      	cmp	r3, r4
 800b394:	db09      	blt.n	800b3aa <_dtoa_r+0x8c2>
 800b396:	1b1c      	subs	r4, r3, r4
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f6bf af30 	bge.w	800b200 <_dtoa_r+0x718>
 800b3a0:	9b00      	ldr	r3, [sp, #0]
 800b3a2:	9a03      	ldr	r2, [sp, #12]
 800b3a4:	1a9e      	subs	r6, r3, r2
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	e72b      	b.n	800b202 <_dtoa_r+0x71a>
 800b3aa:	9b08      	ldr	r3, [sp, #32]
 800b3ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b3ae:	9408      	str	r4, [sp, #32]
 800b3b0:	1ae3      	subs	r3, r4, r3
 800b3b2:	441a      	add	r2, r3
 800b3b4:	9e00      	ldr	r6, [sp, #0]
 800b3b6:	9b03      	ldr	r3, [sp, #12]
 800b3b8:	920d      	str	r2, [sp, #52]	@ 0x34
 800b3ba:	2400      	movs	r4, #0
 800b3bc:	e721      	b.n	800b202 <_dtoa_r+0x71a>
 800b3be:	9c08      	ldr	r4, [sp, #32]
 800b3c0:	9e00      	ldr	r6, [sp, #0]
 800b3c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b3c4:	e728      	b.n	800b218 <_dtoa_r+0x730>
 800b3c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b3ca:	e751      	b.n	800b270 <_dtoa_r+0x788>
 800b3cc:	9a08      	ldr	r2, [sp, #32]
 800b3ce:	9902      	ldr	r1, [sp, #8]
 800b3d0:	e750      	b.n	800b274 <_dtoa_r+0x78c>
 800b3d2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b3d6:	e751      	b.n	800b27c <_dtoa_r+0x794>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	e779      	b.n	800b2d0 <_dtoa_r+0x7e8>
 800b3dc:	9b04      	ldr	r3, [sp, #16]
 800b3de:	e777      	b.n	800b2d0 <_dtoa_r+0x7e8>
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	9308      	str	r3, [sp, #32]
 800b3e4:	e779      	b.n	800b2da <_dtoa_r+0x7f2>
 800b3e6:	d093      	beq.n	800b310 <_dtoa_r+0x828>
 800b3e8:	9a00      	ldr	r2, [sp, #0]
 800b3ea:	331c      	adds	r3, #28
 800b3ec:	441a      	add	r2, r3
 800b3ee:	9200      	str	r2, [sp, #0]
 800b3f0:	9a06      	ldr	r2, [sp, #24]
 800b3f2:	441a      	add	r2, r3
 800b3f4:	441e      	add	r6, r3
 800b3f6:	9206      	str	r2, [sp, #24]
 800b3f8:	e78a      	b.n	800b310 <_dtoa_r+0x828>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	e7f4      	b.n	800b3e8 <_dtoa_r+0x900>
 800b3fe:	9b03      	ldr	r3, [sp, #12]
 800b400:	2b00      	cmp	r3, #0
 800b402:	46b8      	mov	r8, r7
 800b404:	dc20      	bgt.n	800b448 <_dtoa_r+0x960>
 800b406:	469b      	mov	fp, r3
 800b408:	9b07      	ldr	r3, [sp, #28]
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	dd1e      	ble.n	800b44c <_dtoa_r+0x964>
 800b40e:	f1bb 0f00 	cmp.w	fp, #0
 800b412:	f47f adb1 	bne.w	800af78 <_dtoa_r+0x490>
 800b416:	4621      	mov	r1, r4
 800b418:	465b      	mov	r3, fp
 800b41a:	2205      	movs	r2, #5
 800b41c:	4648      	mov	r0, r9
 800b41e:	f000 fa95 	bl	800b94c <__multadd>
 800b422:	4601      	mov	r1, r0
 800b424:	4604      	mov	r4, r0
 800b426:	9802      	ldr	r0, [sp, #8]
 800b428:	f000 fcea 	bl	800be00 <__mcmp>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	f77f ada3 	ble.w	800af78 <_dtoa_r+0x490>
 800b432:	4656      	mov	r6, sl
 800b434:	2331      	movs	r3, #49	@ 0x31
 800b436:	f806 3b01 	strb.w	r3, [r6], #1
 800b43a:	f108 0801 	add.w	r8, r8, #1
 800b43e:	e59f      	b.n	800af80 <_dtoa_r+0x498>
 800b440:	9c03      	ldr	r4, [sp, #12]
 800b442:	46b8      	mov	r8, r7
 800b444:	4625      	mov	r5, r4
 800b446:	e7f4      	b.n	800b432 <_dtoa_r+0x94a>
 800b448:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b44e:	2b00      	cmp	r3, #0
 800b450:	f000 8101 	beq.w	800b656 <_dtoa_r+0xb6e>
 800b454:	2e00      	cmp	r6, #0
 800b456:	dd05      	ble.n	800b464 <_dtoa_r+0x97c>
 800b458:	4629      	mov	r1, r5
 800b45a:	4632      	mov	r2, r6
 800b45c:	4648      	mov	r0, r9
 800b45e:	f000 fc63 	bl	800bd28 <__lshift>
 800b462:	4605      	mov	r5, r0
 800b464:	9b08      	ldr	r3, [sp, #32]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d05c      	beq.n	800b524 <_dtoa_r+0xa3c>
 800b46a:	6869      	ldr	r1, [r5, #4]
 800b46c:	4648      	mov	r0, r9
 800b46e:	f000 fa0b 	bl	800b888 <_Balloc>
 800b472:	4606      	mov	r6, r0
 800b474:	b928      	cbnz	r0, 800b482 <_dtoa_r+0x99a>
 800b476:	4b82      	ldr	r3, [pc, #520]	@ (800b680 <_dtoa_r+0xb98>)
 800b478:	4602      	mov	r2, r0
 800b47a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b47e:	f7ff bb4a 	b.w	800ab16 <_dtoa_r+0x2e>
 800b482:	692a      	ldr	r2, [r5, #16]
 800b484:	3202      	adds	r2, #2
 800b486:	0092      	lsls	r2, r2, #2
 800b488:	f105 010c 	add.w	r1, r5, #12
 800b48c:	300c      	adds	r0, #12
 800b48e:	f001 ff69 	bl	800d364 <memcpy>
 800b492:	2201      	movs	r2, #1
 800b494:	4631      	mov	r1, r6
 800b496:	4648      	mov	r0, r9
 800b498:	f000 fc46 	bl	800bd28 <__lshift>
 800b49c:	f10a 0301 	add.w	r3, sl, #1
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	eb0a 030b 	add.w	r3, sl, fp
 800b4a6:	9308      	str	r3, [sp, #32]
 800b4a8:	9b04      	ldr	r3, [sp, #16]
 800b4aa:	f003 0301 	and.w	r3, r3, #1
 800b4ae:	462f      	mov	r7, r5
 800b4b0:	9306      	str	r3, [sp, #24]
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	9b00      	ldr	r3, [sp, #0]
 800b4b6:	9802      	ldr	r0, [sp, #8]
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	f103 3bff 	add.w	fp, r3, #4294967295
 800b4be:	f7ff fa89 	bl	800a9d4 <quorem>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	3330      	adds	r3, #48	@ 0x30
 800b4c6:	9003      	str	r0, [sp, #12]
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	9802      	ldr	r0, [sp, #8]
 800b4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4ce:	f000 fc97 	bl	800be00 <__mcmp>
 800b4d2:	462a      	mov	r2, r5
 800b4d4:	9004      	str	r0, [sp, #16]
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	4648      	mov	r0, r9
 800b4da:	f000 fcad 	bl	800be38 <__mdiff>
 800b4de:	68c2      	ldr	r2, [r0, #12]
 800b4e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	bb02      	cbnz	r2, 800b528 <_dtoa_r+0xa40>
 800b4e6:	4601      	mov	r1, r0
 800b4e8:	9802      	ldr	r0, [sp, #8]
 800b4ea:	f000 fc89 	bl	800be00 <__mcmp>
 800b4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4648      	mov	r0, r9
 800b4f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b4f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4fa:	f000 fa05 	bl	800b908 <_Bfree>
 800b4fe:	9b07      	ldr	r3, [sp, #28]
 800b500:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b502:	9e00      	ldr	r6, [sp, #0]
 800b504:	ea42 0103 	orr.w	r1, r2, r3
 800b508:	9b06      	ldr	r3, [sp, #24]
 800b50a:	4319      	orrs	r1, r3
 800b50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b50e:	d10d      	bne.n	800b52c <_dtoa_r+0xa44>
 800b510:	2b39      	cmp	r3, #57	@ 0x39
 800b512:	d027      	beq.n	800b564 <_dtoa_r+0xa7c>
 800b514:	9a04      	ldr	r2, [sp, #16]
 800b516:	2a00      	cmp	r2, #0
 800b518:	dd01      	ble.n	800b51e <_dtoa_r+0xa36>
 800b51a:	9b03      	ldr	r3, [sp, #12]
 800b51c:	3331      	adds	r3, #49	@ 0x31
 800b51e:	f88b 3000 	strb.w	r3, [fp]
 800b522:	e52e      	b.n	800af82 <_dtoa_r+0x49a>
 800b524:	4628      	mov	r0, r5
 800b526:	e7b9      	b.n	800b49c <_dtoa_r+0x9b4>
 800b528:	2201      	movs	r2, #1
 800b52a:	e7e2      	b.n	800b4f2 <_dtoa_r+0xa0a>
 800b52c:	9904      	ldr	r1, [sp, #16]
 800b52e:	2900      	cmp	r1, #0
 800b530:	db04      	blt.n	800b53c <_dtoa_r+0xa54>
 800b532:	9807      	ldr	r0, [sp, #28]
 800b534:	4301      	orrs	r1, r0
 800b536:	9806      	ldr	r0, [sp, #24]
 800b538:	4301      	orrs	r1, r0
 800b53a:	d120      	bne.n	800b57e <_dtoa_r+0xa96>
 800b53c:	2a00      	cmp	r2, #0
 800b53e:	ddee      	ble.n	800b51e <_dtoa_r+0xa36>
 800b540:	9902      	ldr	r1, [sp, #8]
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	2201      	movs	r2, #1
 800b546:	4648      	mov	r0, r9
 800b548:	f000 fbee 	bl	800bd28 <__lshift>
 800b54c:	4621      	mov	r1, r4
 800b54e:	9002      	str	r0, [sp, #8]
 800b550:	f000 fc56 	bl	800be00 <__mcmp>
 800b554:	2800      	cmp	r0, #0
 800b556:	9b00      	ldr	r3, [sp, #0]
 800b558:	dc02      	bgt.n	800b560 <_dtoa_r+0xa78>
 800b55a:	d1e0      	bne.n	800b51e <_dtoa_r+0xa36>
 800b55c:	07da      	lsls	r2, r3, #31
 800b55e:	d5de      	bpl.n	800b51e <_dtoa_r+0xa36>
 800b560:	2b39      	cmp	r3, #57	@ 0x39
 800b562:	d1da      	bne.n	800b51a <_dtoa_r+0xa32>
 800b564:	2339      	movs	r3, #57	@ 0x39
 800b566:	f88b 3000 	strb.w	r3, [fp]
 800b56a:	4633      	mov	r3, r6
 800b56c:	461e      	mov	r6, r3
 800b56e:	3b01      	subs	r3, #1
 800b570:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b574:	2a39      	cmp	r2, #57	@ 0x39
 800b576:	d04e      	beq.n	800b616 <_dtoa_r+0xb2e>
 800b578:	3201      	adds	r2, #1
 800b57a:	701a      	strb	r2, [r3, #0]
 800b57c:	e501      	b.n	800af82 <_dtoa_r+0x49a>
 800b57e:	2a00      	cmp	r2, #0
 800b580:	dd03      	ble.n	800b58a <_dtoa_r+0xaa2>
 800b582:	2b39      	cmp	r3, #57	@ 0x39
 800b584:	d0ee      	beq.n	800b564 <_dtoa_r+0xa7c>
 800b586:	3301      	adds	r3, #1
 800b588:	e7c9      	b.n	800b51e <_dtoa_r+0xa36>
 800b58a:	9a00      	ldr	r2, [sp, #0]
 800b58c:	9908      	ldr	r1, [sp, #32]
 800b58e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b592:	428a      	cmp	r2, r1
 800b594:	d028      	beq.n	800b5e8 <_dtoa_r+0xb00>
 800b596:	9902      	ldr	r1, [sp, #8]
 800b598:	2300      	movs	r3, #0
 800b59a:	220a      	movs	r2, #10
 800b59c:	4648      	mov	r0, r9
 800b59e:	f000 f9d5 	bl	800b94c <__multadd>
 800b5a2:	42af      	cmp	r7, r5
 800b5a4:	9002      	str	r0, [sp, #8]
 800b5a6:	f04f 0300 	mov.w	r3, #0
 800b5aa:	f04f 020a 	mov.w	r2, #10
 800b5ae:	4639      	mov	r1, r7
 800b5b0:	4648      	mov	r0, r9
 800b5b2:	d107      	bne.n	800b5c4 <_dtoa_r+0xadc>
 800b5b4:	f000 f9ca 	bl	800b94c <__multadd>
 800b5b8:	4607      	mov	r7, r0
 800b5ba:	4605      	mov	r5, r0
 800b5bc:	9b00      	ldr	r3, [sp, #0]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	e777      	b.n	800b4b4 <_dtoa_r+0x9cc>
 800b5c4:	f000 f9c2 	bl	800b94c <__multadd>
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4607      	mov	r7, r0
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	220a      	movs	r2, #10
 800b5d0:	4648      	mov	r0, r9
 800b5d2:	f000 f9bb 	bl	800b94c <__multadd>
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	e7f0      	b.n	800b5bc <_dtoa_r+0xad4>
 800b5da:	f1bb 0f00 	cmp.w	fp, #0
 800b5de:	bfcc      	ite	gt
 800b5e0:	465e      	movgt	r6, fp
 800b5e2:	2601      	movle	r6, #1
 800b5e4:	4456      	add	r6, sl
 800b5e6:	2700      	movs	r7, #0
 800b5e8:	9902      	ldr	r1, [sp, #8]
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	4648      	mov	r0, r9
 800b5f0:	f000 fb9a 	bl	800bd28 <__lshift>
 800b5f4:	4621      	mov	r1, r4
 800b5f6:	9002      	str	r0, [sp, #8]
 800b5f8:	f000 fc02 	bl	800be00 <__mcmp>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	dcb4      	bgt.n	800b56a <_dtoa_r+0xa82>
 800b600:	d102      	bne.n	800b608 <_dtoa_r+0xb20>
 800b602:	9b00      	ldr	r3, [sp, #0]
 800b604:	07db      	lsls	r3, r3, #31
 800b606:	d4b0      	bmi.n	800b56a <_dtoa_r+0xa82>
 800b608:	4633      	mov	r3, r6
 800b60a:	461e      	mov	r6, r3
 800b60c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b610:	2a30      	cmp	r2, #48	@ 0x30
 800b612:	d0fa      	beq.n	800b60a <_dtoa_r+0xb22>
 800b614:	e4b5      	b.n	800af82 <_dtoa_r+0x49a>
 800b616:	459a      	cmp	sl, r3
 800b618:	d1a8      	bne.n	800b56c <_dtoa_r+0xa84>
 800b61a:	2331      	movs	r3, #49	@ 0x31
 800b61c:	f108 0801 	add.w	r8, r8, #1
 800b620:	f88a 3000 	strb.w	r3, [sl]
 800b624:	e4ad      	b.n	800af82 <_dtoa_r+0x49a>
 800b626:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b628:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b684 <_dtoa_r+0xb9c>
 800b62c:	b11b      	cbz	r3, 800b636 <_dtoa_r+0xb4e>
 800b62e:	f10a 0308 	add.w	r3, sl, #8
 800b632:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b634:	6013      	str	r3, [r2, #0]
 800b636:	4650      	mov	r0, sl
 800b638:	b017      	add	sp, #92	@ 0x5c
 800b63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63e:	9b07      	ldr	r3, [sp, #28]
 800b640:	2b01      	cmp	r3, #1
 800b642:	f77f ae2e 	ble.w	800b2a2 <_dtoa_r+0x7ba>
 800b646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b648:	9308      	str	r3, [sp, #32]
 800b64a:	2001      	movs	r0, #1
 800b64c:	e64d      	b.n	800b2ea <_dtoa_r+0x802>
 800b64e:	f1bb 0f00 	cmp.w	fp, #0
 800b652:	f77f aed9 	ble.w	800b408 <_dtoa_r+0x920>
 800b656:	4656      	mov	r6, sl
 800b658:	9802      	ldr	r0, [sp, #8]
 800b65a:	4621      	mov	r1, r4
 800b65c:	f7ff f9ba 	bl	800a9d4 <quorem>
 800b660:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b664:	f806 3b01 	strb.w	r3, [r6], #1
 800b668:	eba6 020a 	sub.w	r2, r6, sl
 800b66c:	4593      	cmp	fp, r2
 800b66e:	ddb4      	ble.n	800b5da <_dtoa_r+0xaf2>
 800b670:	9902      	ldr	r1, [sp, #8]
 800b672:	2300      	movs	r3, #0
 800b674:	220a      	movs	r2, #10
 800b676:	4648      	mov	r0, r9
 800b678:	f000 f968 	bl	800b94c <__multadd>
 800b67c:	9002      	str	r0, [sp, #8]
 800b67e:	e7eb      	b.n	800b658 <_dtoa_r+0xb70>
 800b680:	0800e1cd 	.word	0x0800e1cd
 800b684:	0800e151 	.word	0x0800e151

0800b688 <_free_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	4605      	mov	r5, r0
 800b68c:	2900      	cmp	r1, #0
 800b68e:	d041      	beq.n	800b714 <_free_r+0x8c>
 800b690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b694:	1f0c      	subs	r4, r1, #4
 800b696:	2b00      	cmp	r3, #0
 800b698:	bfb8      	it	lt
 800b69a:	18e4      	addlt	r4, r4, r3
 800b69c:	f000 f8e8 	bl	800b870 <__malloc_lock>
 800b6a0:	4a1d      	ldr	r2, [pc, #116]	@ (800b718 <_free_r+0x90>)
 800b6a2:	6813      	ldr	r3, [r2, #0]
 800b6a4:	b933      	cbnz	r3, 800b6b4 <_free_r+0x2c>
 800b6a6:	6063      	str	r3, [r4, #4]
 800b6a8:	6014      	str	r4, [r2, #0]
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6b0:	f000 b8e4 	b.w	800b87c <__malloc_unlock>
 800b6b4:	42a3      	cmp	r3, r4
 800b6b6:	d908      	bls.n	800b6ca <_free_r+0x42>
 800b6b8:	6820      	ldr	r0, [r4, #0]
 800b6ba:	1821      	adds	r1, r4, r0
 800b6bc:	428b      	cmp	r3, r1
 800b6be:	bf01      	itttt	eq
 800b6c0:	6819      	ldreq	r1, [r3, #0]
 800b6c2:	685b      	ldreq	r3, [r3, #4]
 800b6c4:	1809      	addeq	r1, r1, r0
 800b6c6:	6021      	streq	r1, [r4, #0]
 800b6c8:	e7ed      	b.n	800b6a6 <_free_r+0x1e>
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	b10b      	cbz	r3, 800b6d4 <_free_r+0x4c>
 800b6d0:	42a3      	cmp	r3, r4
 800b6d2:	d9fa      	bls.n	800b6ca <_free_r+0x42>
 800b6d4:	6811      	ldr	r1, [r2, #0]
 800b6d6:	1850      	adds	r0, r2, r1
 800b6d8:	42a0      	cmp	r0, r4
 800b6da:	d10b      	bne.n	800b6f4 <_free_r+0x6c>
 800b6dc:	6820      	ldr	r0, [r4, #0]
 800b6de:	4401      	add	r1, r0
 800b6e0:	1850      	adds	r0, r2, r1
 800b6e2:	4283      	cmp	r3, r0
 800b6e4:	6011      	str	r1, [r2, #0]
 800b6e6:	d1e0      	bne.n	800b6aa <_free_r+0x22>
 800b6e8:	6818      	ldr	r0, [r3, #0]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	6053      	str	r3, [r2, #4]
 800b6ee:	4408      	add	r0, r1
 800b6f0:	6010      	str	r0, [r2, #0]
 800b6f2:	e7da      	b.n	800b6aa <_free_r+0x22>
 800b6f4:	d902      	bls.n	800b6fc <_free_r+0x74>
 800b6f6:	230c      	movs	r3, #12
 800b6f8:	602b      	str	r3, [r5, #0]
 800b6fa:	e7d6      	b.n	800b6aa <_free_r+0x22>
 800b6fc:	6820      	ldr	r0, [r4, #0]
 800b6fe:	1821      	adds	r1, r4, r0
 800b700:	428b      	cmp	r3, r1
 800b702:	bf04      	itt	eq
 800b704:	6819      	ldreq	r1, [r3, #0]
 800b706:	685b      	ldreq	r3, [r3, #4]
 800b708:	6063      	str	r3, [r4, #4]
 800b70a:	bf04      	itt	eq
 800b70c:	1809      	addeq	r1, r1, r0
 800b70e:	6021      	streq	r1, [r4, #0]
 800b710:	6054      	str	r4, [r2, #4]
 800b712:	e7ca      	b.n	800b6aa <_free_r+0x22>
 800b714:	bd38      	pop	{r3, r4, r5, pc}
 800b716:	bf00      	nop
 800b718:	20002154 	.word	0x20002154

0800b71c <malloc>:
 800b71c:	4b02      	ldr	r3, [pc, #8]	@ (800b728 <malloc+0xc>)
 800b71e:	4601      	mov	r1, r0
 800b720:	6818      	ldr	r0, [r3, #0]
 800b722:	f000 b825 	b.w	800b770 <_malloc_r>
 800b726:	bf00      	nop
 800b728:	20000108 	.word	0x20000108

0800b72c <sbrk_aligned>:
 800b72c:	b570      	push	{r4, r5, r6, lr}
 800b72e:	4e0f      	ldr	r6, [pc, #60]	@ (800b76c <sbrk_aligned+0x40>)
 800b730:	460c      	mov	r4, r1
 800b732:	6831      	ldr	r1, [r6, #0]
 800b734:	4605      	mov	r5, r0
 800b736:	b911      	cbnz	r1, 800b73e <sbrk_aligned+0x12>
 800b738:	f001 fe04 	bl	800d344 <_sbrk_r>
 800b73c:	6030      	str	r0, [r6, #0]
 800b73e:	4621      	mov	r1, r4
 800b740:	4628      	mov	r0, r5
 800b742:	f001 fdff 	bl	800d344 <_sbrk_r>
 800b746:	1c43      	adds	r3, r0, #1
 800b748:	d103      	bne.n	800b752 <sbrk_aligned+0x26>
 800b74a:	f04f 34ff 	mov.w	r4, #4294967295
 800b74e:	4620      	mov	r0, r4
 800b750:	bd70      	pop	{r4, r5, r6, pc}
 800b752:	1cc4      	adds	r4, r0, #3
 800b754:	f024 0403 	bic.w	r4, r4, #3
 800b758:	42a0      	cmp	r0, r4
 800b75a:	d0f8      	beq.n	800b74e <sbrk_aligned+0x22>
 800b75c:	1a21      	subs	r1, r4, r0
 800b75e:	4628      	mov	r0, r5
 800b760:	f001 fdf0 	bl	800d344 <_sbrk_r>
 800b764:	3001      	adds	r0, #1
 800b766:	d1f2      	bne.n	800b74e <sbrk_aligned+0x22>
 800b768:	e7ef      	b.n	800b74a <sbrk_aligned+0x1e>
 800b76a:	bf00      	nop
 800b76c:	20002150 	.word	0x20002150

0800b770 <_malloc_r>:
 800b770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b774:	1ccd      	adds	r5, r1, #3
 800b776:	f025 0503 	bic.w	r5, r5, #3
 800b77a:	3508      	adds	r5, #8
 800b77c:	2d0c      	cmp	r5, #12
 800b77e:	bf38      	it	cc
 800b780:	250c      	movcc	r5, #12
 800b782:	2d00      	cmp	r5, #0
 800b784:	4606      	mov	r6, r0
 800b786:	db01      	blt.n	800b78c <_malloc_r+0x1c>
 800b788:	42a9      	cmp	r1, r5
 800b78a:	d904      	bls.n	800b796 <_malloc_r+0x26>
 800b78c:	230c      	movs	r3, #12
 800b78e:	6033      	str	r3, [r6, #0]
 800b790:	2000      	movs	r0, #0
 800b792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b796:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b86c <_malloc_r+0xfc>
 800b79a:	f000 f869 	bl	800b870 <__malloc_lock>
 800b79e:	f8d8 3000 	ldr.w	r3, [r8]
 800b7a2:	461c      	mov	r4, r3
 800b7a4:	bb44      	cbnz	r4, 800b7f8 <_malloc_r+0x88>
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	f7ff ffbf 	bl	800b72c <sbrk_aligned>
 800b7ae:	1c43      	adds	r3, r0, #1
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	d158      	bne.n	800b866 <_malloc_r+0xf6>
 800b7b4:	f8d8 4000 	ldr.w	r4, [r8]
 800b7b8:	4627      	mov	r7, r4
 800b7ba:	2f00      	cmp	r7, #0
 800b7bc:	d143      	bne.n	800b846 <_malloc_r+0xd6>
 800b7be:	2c00      	cmp	r4, #0
 800b7c0:	d04b      	beq.n	800b85a <_malloc_r+0xea>
 800b7c2:	6823      	ldr	r3, [r4, #0]
 800b7c4:	4639      	mov	r1, r7
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	eb04 0903 	add.w	r9, r4, r3
 800b7cc:	f001 fdba 	bl	800d344 <_sbrk_r>
 800b7d0:	4581      	cmp	r9, r0
 800b7d2:	d142      	bne.n	800b85a <_malloc_r+0xea>
 800b7d4:	6821      	ldr	r1, [r4, #0]
 800b7d6:	1a6d      	subs	r5, r5, r1
 800b7d8:	4629      	mov	r1, r5
 800b7da:	4630      	mov	r0, r6
 800b7dc:	f7ff ffa6 	bl	800b72c <sbrk_aligned>
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	d03a      	beq.n	800b85a <_malloc_r+0xea>
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	442b      	add	r3, r5
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ee:	685a      	ldr	r2, [r3, #4]
 800b7f0:	bb62      	cbnz	r2, 800b84c <_malloc_r+0xdc>
 800b7f2:	f8c8 7000 	str.w	r7, [r8]
 800b7f6:	e00f      	b.n	800b818 <_malloc_r+0xa8>
 800b7f8:	6822      	ldr	r2, [r4, #0]
 800b7fa:	1b52      	subs	r2, r2, r5
 800b7fc:	d420      	bmi.n	800b840 <_malloc_r+0xd0>
 800b7fe:	2a0b      	cmp	r2, #11
 800b800:	d917      	bls.n	800b832 <_malloc_r+0xc2>
 800b802:	1961      	adds	r1, r4, r5
 800b804:	42a3      	cmp	r3, r4
 800b806:	6025      	str	r5, [r4, #0]
 800b808:	bf18      	it	ne
 800b80a:	6059      	strne	r1, [r3, #4]
 800b80c:	6863      	ldr	r3, [r4, #4]
 800b80e:	bf08      	it	eq
 800b810:	f8c8 1000 	streq.w	r1, [r8]
 800b814:	5162      	str	r2, [r4, r5]
 800b816:	604b      	str	r3, [r1, #4]
 800b818:	4630      	mov	r0, r6
 800b81a:	f000 f82f 	bl	800b87c <__malloc_unlock>
 800b81e:	f104 000b 	add.w	r0, r4, #11
 800b822:	1d23      	adds	r3, r4, #4
 800b824:	f020 0007 	bic.w	r0, r0, #7
 800b828:	1ac2      	subs	r2, r0, r3
 800b82a:	bf1c      	itt	ne
 800b82c:	1a1b      	subne	r3, r3, r0
 800b82e:	50a3      	strne	r3, [r4, r2]
 800b830:	e7af      	b.n	800b792 <_malloc_r+0x22>
 800b832:	6862      	ldr	r2, [r4, #4]
 800b834:	42a3      	cmp	r3, r4
 800b836:	bf0c      	ite	eq
 800b838:	f8c8 2000 	streq.w	r2, [r8]
 800b83c:	605a      	strne	r2, [r3, #4]
 800b83e:	e7eb      	b.n	800b818 <_malloc_r+0xa8>
 800b840:	4623      	mov	r3, r4
 800b842:	6864      	ldr	r4, [r4, #4]
 800b844:	e7ae      	b.n	800b7a4 <_malloc_r+0x34>
 800b846:	463c      	mov	r4, r7
 800b848:	687f      	ldr	r7, [r7, #4]
 800b84a:	e7b6      	b.n	800b7ba <_malloc_r+0x4a>
 800b84c:	461a      	mov	r2, r3
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	42a3      	cmp	r3, r4
 800b852:	d1fb      	bne.n	800b84c <_malloc_r+0xdc>
 800b854:	2300      	movs	r3, #0
 800b856:	6053      	str	r3, [r2, #4]
 800b858:	e7de      	b.n	800b818 <_malloc_r+0xa8>
 800b85a:	230c      	movs	r3, #12
 800b85c:	6033      	str	r3, [r6, #0]
 800b85e:	4630      	mov	r0, r6
 800b860:	f000 f80c 	bl	800b87c <__malloc_unlock>
 800b864:	e794      	b.n	800b790 <_malloc_r+0x20>
 800b866:	6005      	str	r5, [r0, #0]
 800b868:	e7d6      	b.n	800b818 <_malloc_r+0xa8>
 800b86a:	bf00      	nop
 800b86c:	20002154 	.word	0x20002154

0800b870 <__malloc_lock>:
 800b870:	4801      	ldr	r0, [pc, #4]	@ (800b878 <__malloc_lock+0x8>)
 800b872:	f7ff b8a6 	b.w	800a9c2 <__retarget_lock_acquire_recursive>
 800b876:	bf00      	nop
 800b878:	2000214c 	.word	0x2000214c

0800b87c <__malloc_unlock>:
 800b87c:	4801      	ldr	r0, [pc, #4]	@ (800b884 <__malloc_unlock+0x8>)
 800b87e:	f7ff b8a1 	b.w	800a9c4 <__retarget_lock_release_recursive>
 800b882:	bf00      	nop
 800b884:	2000214c 	.word	0x2000214c

0800b888 <_Balloc>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	69c6      	ldr	r6, [r0, #28]
 800b88c:	4604      	mov	r4, r0
 800b88e:	460d      	mov	r5, r1
 800b890:	b976      	cbnz	r6, 800b8b0 <_Balloc+0x28>
 800b892:	2010      	movs	r0, #16
 800b894:	f7ff ff42 	bl	800b71c <malloc>
 800b898:	4602      	mov	r2, r0
 800b89a:	61e0      	str	r0, [r4, #28]
 800b89c:	b920      	cbnz	r0, 800b8a8 <_Balloc+0x20>
 800b89e:	4b18      	ldr	r3, [pc, #96]	@ (800b900 <_Balloc+0x78>)
 800b8a0:	4818      	ldr	r0, [pc, #96]	@ (800b904 <_Balloc+0x7c>)
 800b8a2:	216b      	movs	r1, #107	@ 0x6b
 800b8a4:	f001 fd74 	bl	800d390 <__assert_func>
 800b8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8ac:	6006      	str	r6, [r0, #0]
 800b8ae:	60c6      	str	r6, [r0, #12]
 800b8b0:	69e6      	ldr	r6, [r4, #28]
 800b8b2:	68f3      	ldr	r3, [r6, #12]
 800b8b4:	b183      	cbz	r3, 800b8d8 <_Balloc+0x50>
 800b8b6:	69e3      	ldr	r3, [r4, #28]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8be:	b9b8      	cbnz	r0, 800b8f0 <_Balloc+0x68>
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b8c6:	1d72      	adds	r2, r6, #5
 800b8c8:	0092      	lsls	r2, r2, #2
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f001 fd7e 	bl	800d3cc <_calloc_r>
 800b8d0:	b160      	cbz	r0, 800b8ec <_Balloc+0x64>
 800b8d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8d6:	e00e      	b.n	800b8f6 <_Balloc+0x6e>
 800b8d8:	2221      	movs	r2, #33	@ 0x21
 800b8da:	2104      	movs	r1, #4
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f001 fd75 	bl	800d3cc <_calloc_r>
 800b8e2:	69e3      	ldr	r3, [r4, #28]
 800b8e4:	60f0      	str	r0, [r6, #12]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e4      	bne.n	800b8b6 <_Balloc+0x2e>
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	6802      	ldr	r2, [r0, #0]
 800b8f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8fc:	e7f7      	b.n	800b8ee <_Balloc+0x66>
 800b8fe:	bf00      	nop
 800b900:	0800e15e 	.word	0x0800e15e
 800b904:	0800e1de 	.word	0x0800e1de

0800b908 <_Bfree>:
 800b908:	b570      	push	{r4, r5, r6, lr}
 800b90a:	69c6      	ldr	r6, [r0, #28]
 800b90c:	4605      	mov	r5, r0
 800b90e:	460c      	mov	r4, r1
 800b910:	b976      	cbnz	r6, 800b930 <_Bfree+0x28>
 800b912:	2010      	movs	r0, #16
 800b914:	f7ff ff02 	bl	800b71c <malloc>
 800b918:	4602      	mov	r2, r0
 800b91a:	61e8      	str	r0, [r5, #28]
 800b91c:	b920      	cbnz	r0, 800b928 <_Bfree+0x20>
 800b91e:	4b09      	ldr	r3, [pc, #36]	@ (800b944 <_Bfree+0x3c>)
 800b920:	4809      	ldr	r0, [pc, #36]	@ (800b948 <_Bfree+0x40>)
 800b922:	218f      	movs	r1, #143	@ 0x8f
 800b924:	f001 fd34 	bl	800d390 <__assert_func>
 800b928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b92c:	6006      	str	r6, [r0, #0]
 800b92e:	60c6      	str	r6, [r0, #12]
 800b930:	b13c      	cbz	r4, 800b942 <_Bfree+0x3a>
 800b932:	69eb      	ldr	r3, [r5, #28]
 800b934:	6862      	ldr	r2, [r4, #4]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b93c:	6021      	str	r1, [r4, #0]
 800b93e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b942:	bd70      	pop	{r4, r5, r6, pc}
 800b944:	0800e15e 	.word	0x0800e15e
 800b948:	0800e1de 	.word	0x0800e1de

0800b94c <__multadd>:
 800b94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b950:	690d      	ldr	r5, [r1, #16]
 800b952:	4607      	mov	r7, r0
 800b954:	460c      	mov	r4, r1
 800b956:	461e      	mov	r6, r3
 800b958:	f101 0c14 	add.w	ip, r1, #20
 800b95c:	2000      	movs	r0, #0
 800b95e:	f8dc 3000 	ldr.w	r3, [ip]
 800b962:	b299      	uxth	r1, r3
 800b964:	fb02 6101 	mla	r1, r2, r1, r6
 800b968:	0c1e      	lsrs	r6, r3, #16
 800b96a:	0c0b      	lsrs	r3, r1, #16
 800b96c:	fb02 3306 	mla	r3, r2, r6, r3
 800b970:	b289      	uxth	r1, r1
 800b972:	3001      	adds	r0, #1
 800b974:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b978:	4285      	cmp	r5, r0
 800b97a:	f84c 1b04 	str.w	r1, [ip], #4
 800b97e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b982:	dcec      	bgt.n	800b95e <__multadd+0x12>
 800b984:	b30e      	cbz	r6, 800b9ca <__multadd+0x7e>
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	42ab      	cmp	r3, r5
 800b98a:	dc19      	bgt.n	800b9c0 <__multadd+0x74>
 800b98c:	6861      	ldr	r1, [r4, #4]
 800b98e:	4638      	mov	r0, r7
 800b990:	3101      	adds	r1, #1
 800b992:	f7ff ff79 	bl	800b888 <_Balloc>
 800b996:	4680      	mov	r8, r0
 800b998:	b928      	cbnz	r0, 800b9a6 <__multadd+0x5a>
 800b99a:	4602      	mov	r2, r0
 800b99c:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d0 <__multadd+0x84>)
 800b99e:	480d      	ldr	r0, [pc, #52]	@ (800b9d4 <__multadd+0x88>)
 800b9a0:	21ba      	movs	r1, #186	@ 0xba
 800b9a2:	f001 fcf5 	bl	800d390 <__assert_func>
 800b9a6:	6922      	ldr	r2, [r4, #16]
 800b9a8:	3202      	adds	r2, #2
 800b9aa:	f104 010c 	add.w	r1, r4, #12
 800b9ae:	0092      	lsls	r2, r2, #2
 800b9b0:	300c      	adds	r0, #12
 800b9b2:	f001 fcd7 	bl	800d364 <memcpy>
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f7ff ffa5 	bl	800b908 <_Bfree>
 800b9be:	4644      	mov	r4, r8
 800b9c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9c4:	3501      	adds	r5, #1
 800b9c6:	615e      	str	r6, [r3, #20]
 800b9c8:	6125      	str	r5, [r4, #16]
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d0:	0800e1cd 	.word	0x0800e1cd
 800b9d4:	0800e1de 	.word	0x0800e1de

0800b9d8 <__s2b>:
 800b9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9dc:	460c      	mov	r4, r1
 800b9de:	4615      	mov	r5, r2
 800b9e0:	461f      	mov	r7, r3
 800b9e2:	2209      	movs	r2, #9
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	db09      	blt.n	800ba08 <__s2b+0x30>
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f7ff ff47 	bl	800b888 <_Balloc>
 800b9fa:	b940      	cbnz	r0, 800ba0e <__s2b+0x36>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	4b19      	ldr	r3, [pc, #100]	@ (800ba64 <__s2b+0x8c>)
 800ba00:	4819      	ldr	r0, [pc, #100]	@ (800ba68 <__s2b+0x90>)
 800ba02:	21d3      	movs	r1, #211	@ 0xd3
 800ba04:	f001 fcc4 	bl	800d390 <__assert_func>
 800ba08:	0052      	lsls	r2, r2, #1
 800ba0a:	3101      	adds	r1, #1
 800ba0c:	e7f0      	b.n	800b9f0 <__s2b+0x18>
 800ba0e:	9b08      	ldr	r3, [sp, #32]
 800ba10:	6143      	str	r3, [r0, #20]
 800ba12:	2d09      	cmp	r5, #9
 800ba14:	f04f 0301 	mov.w	r3, #1
 800ba18:	6103      	str	r3, [r0, #16]
 800ba1a:	dd16      	ble.n	800ba4a <__s2b+0x72>
 800ba1c:	f104 0909 	add.w	r9, r4, #9
 800ba20:	46c8      	mov	r8, r9
 800ba22:	442c      	add	r4, r5
 800ba24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba28:	4601      	mov	r1, r0
 800ba2a:	3b30      	subs	r3, #48	@ 0x30
 800ba2c:	220a      	movs	r2, #10
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f7ff ff8c 	bl	800b94c <__multadd>
 800ba34:	45a0      	cmp	r8, r4
 800ba36:	d1f5      	bne.n	800ba24 <__s2b+0x4c>
 800ba38:	f1a5 0408 	sub.w	r4, r5, #8
 800ba3c:	444c      	add	r4, r9
 800ba3e:	1b2d      	subs	r5, r5, r4
 800ba40:	1963      	adds	r3, r4, r5
 800ba42:	42bb      	cmp	r3, r7
 800ba44:	db04      	blt.n	800ba50 <__s2b+0x78>
 800ba46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba4a:	340a      	adds	r4, #10
 800ba4c:	2509      	movs	r5, #9
 800ba4e:	e7f6      	b.n	800ba3e <__s2b+0x66>
 800ba50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba54:	4601      	mov	r1, r0
 800ba56:	3b30      	subs	r3, #48	@ 0x30
 800ba58:	220a      	movs	r2, #10
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f7ff ff76 	bl	800b94c <__multadd>
 800ba60:	e7ee      	b.n	800ba40 <__s2b+0x68>
 800ba62:	bf00      	nop
 800ba64:	0800e1cd 	.word	0x0800e1cd
 800ba68:	0800e1de 	.word	0x0800e1de

0800ba6c <__hi0bits>:
 800ba6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ba70:	4603      	mov	r3, r0
 800ba72:	bf36      	itet	cc
 800ba74:	0403      	lslcc	r3, r0, #16
 800ba76:	2000      	movcs	r0, #0
 800ba78:	2010      	movcc	r0, #16
 800ba7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba7e:	bf3c      	itt	cc
 800ba80:	021b      	lslcc	r3, r3, #8
 800ba82:	3008      	addcc	r0, #8
 800ba84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba88:	bf3c      	itt	cc
 800ba8a:	011b      	lslcc	r3, r3, #4
 800ba8c:	3004      	addcc	r0, #4
 800ba8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba92:	bf3c      	itt	cc
 800ba94:	009b      	lslcc	r3, r3, #2
 800ba96:	3002      	addcc	r0, #2
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	db05      	blt.n	800baa8 <__hi0bits+0x3c>
 800ba9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800baa0:	f100 0001 	add.w	r0, r0, #1
 800baa4:	bf08      	it	eq
 800baa6:	2020      	moveq	r0, #32
 800baa8:	4770      	bx	lr

0800baaa <__lo0bits>:
 800baaa:	6803      	ldr	r3, [r0, #0]
 800baac:	4602      	mov	r2, r0
 800baae:	f013 0007 	ands.w	r0, r3, #7
 800bab2:	d00b      	beq.n	800bacc <__lo0bits+0x22>
 800bab4:	07d9      	lsls	r1, r3, #31
 800bab6:	d421      	bmi.n	800bafc <__lo0bits+0x52>
 800bab8:	0798      	lsls	r0, r3, #30
 800baba:	bf49      	itett	mi
 800babc:	085b      	lsrmi	r3, r3, #1
 800babe:	089b      	lsrpl	r3, r3, #2
 800bac0:	2001      	movmi	r0, #1
 800bac2:	6013      	strmi	r3, [r2, #0]
 800bac4:	bf5c      	itt	pl
 800bac6:	6013      	strpl	r3, [r2, #0]
 800bac8:	2002      	movpl	r0, #2
 800baca:	4770      	bx	lr
 800bacc:	b299      	uxth	r1, r3
 800bace:	b909      	cbnz	r1, 800bad4 <__lo0bits+0x2a>
 800bad0:	0c1b      	lsrs	r3, r3, #16
 800bad2:	2010      	movs	r0, #16
 800bad4:	b2d9      	uxtb	r1, r3
 800bad6:	b909      	cbnz	r1, 800badc <__lo0bits+0x32>
 800bad8:	3008      	adds	r0, #8
 800bada:	0a1b      	lsrs	r3, r3, #8
 800badc:	0719      	lsls	r1, r3, #28
 800bade:	bf04      	itt	eq
 800bae0:	091b      	lsreq	r3, r3, #4
 800bae2:	3004      	addeq	r0, #4
 800bae4:	0799      	lsls	r1, r3, #30
 800bae6:	bf04      	itt	eq
 800bae8:	089b      	lsreq	r3, r3, #2
 800baea:	3002      	addeq	r0, #2
 800baec:	07d9      	lsls	r1, r3, #31
 800baee:	d403      	bmi.n	800baf8 <__lo0bits+0x4e>
 800baf0:	085b      	lsrs	r3, r3, #1
 800baf2:	f100 0001 	add.w	r0, r0, #1
 800baf6:	d003      	beq.n	800bb00 <__lo0bits+0x56>
 800baf8:	6013      	str	r3, [r2, #0]
 800bafa:	4770      	bx	lr
 800bafc:	2000      	movs	r0, #0
 800bafe:	4770      	bx	lr
 800bb00:	2020      	movs	r0, #32
 800bb02:	4770      	bx	lr

0800bb04 <__i2b>:
 800bb04:	b510      	push	{r4, lr}
 800bb06:	460c      	mov	r4, r1
 800bb08:	2101      	movs	r1, #1
 800bb0a:	f7ff febd 	bl	800b888 <_Balloc>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	b928      	cbnz	r0, 800bb1e <__i2b+0x1a>
 800bb12:	4b05      	ldr	r3, [pc, #20]	@ (800bb28 <__i2b+0x24>)
 800bb14:	4805      	ldr	r0, [pc, #20]	@ (800bb2c <__i2b+0x28>)
 800bb16:	f240 1145 	movw	r1, #325	@ 0x145
 800bb1a:	f001 fc39 	bl	800d390 <__assert_func>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	6144      	str	r4, [r0, #20]
 800bb22:	6103      	str	r3, [r0, #16]
 800bb24:	bd10      	pop	{r4, pc}
 800bb26:	bf00      	nop
 800bb28:	0800e1cd 	.word	0x0800e1cd
 800bb2c:	0800e1de 	.word	0x0800e1de

0800bb30 <__multiply>:
 800bb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb34:	4617      	mov	r7, r2
 800bb36:	690a      	ldr	r2, [r1, #16]
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	bfa8      	it	ge
 800bb3e:	463b      	movge	r3, r7
 800bb40:	4689      	mov	r9, r1
 800bb42:	bfa4      	itt	ge
 800bb44:	460f      	movge	r7, r1
 800bb46:	4699      	movge	r9, r3
 800bb48:	693d      	ldr	r5, [r7, #16]
 800bb4a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	6879      	ldr	r1, [r7, #4]
 800bb52:	eb05 060a 	add.w	r6, r5, sl
 800bb56:	42b3      	cmp	r3, r6
 800bb58:	b085      	sub	sp, #20
 800bb5a:	bfb8      	it	lt
 800bb5c:	3101      	addlt	r1, #1
 800bb5e:	f7ff fe93 	bl	800b888 <_Balloc>
 800bb62:	b930      	cbnz	r0, 800bb72 <__multiply+0x42>
 800bb64:	4602      	mov	r2, r0
 800bb66:	4b41      	ldr	r3, [pc, #260]	@ (800bc6c <__multiply+0x13c>)
 800bb68:	4841      	ldr	r0, [pc, #260]	@ (800bc70 <__multiply+0x140>)
 800bb6a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bb6e:	f001 fc0f 	bl	800d390 <__assert_func>
 800bb72:	f100 0414 	add.w	r4, r0, #20
 800bb76:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bb7a:	4623      	mov	r3, r4
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	4573      	cmp	r3, lr
 800bb80:	d320      	bcc.n	800bbc4 <__multiply+0x94>
 800bb82:	f107 0814 	add.w	r8, r7, #20
 800bb86:	f109 0114 	add.w	r1, r9, #20
 800bb8a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bb8e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bb92:	9302      	str	r3, [sp, #8]
 800bb94:	1beb      	subs	r3, r5, r7
 800bb96:	3b15      	subs	r3, #21
 800bb98:	f023 0303 	bic.w	r3, r3, #3
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	3715      	adds	r7, #21
 800bba0:	42bd      	cmp	r5, r7
 800bba2:	bf38      	it	cc
 800bba4:	2304      	movcc	r3, #4
 800bba6:	9301      	str	r3, [sp, #4]
 800bba8:	9b02      	ldr	r3, [sp, #8]
 800bbaa:	9103      	str	r1, [sp, #12]
 800bbac:	428b      	cmp	r3, r1
 800bbae:	d80c      	bhi.n	800bbca <__multiply+0x9a>
 800bbb0:	2e00      	cmp	r6, #0
 800bbb2:	dd03      	ble.n	800bbbc <__multiply+0x8c>
 800bbb4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d055      	beq.n	800bc68 <__multiply+0x138>
 800bbbc:	6106      	str	r6, [r0, #16]
 800bbbe:	b005      	add	sp, #20
 800bbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc4:	f843 2b04 	str.w	r2, [r3], #4
 800bbc8:	e7d9      	b.n	800bb7e <__multiply+0x4e>
 800bbca:	f8b1 a000 	ldrh.w	sl, [r1]
 800bbce:	f1ba 0f00 	cmp.w	sl, #0
 800bbd2:	d01f      	beq.n	800bc14 <__multiply+0xe4>
 800bbd4:	46c4      	mov	ip, r8
 800bbd6:	46a1      	mov	r9, r4
 800bbd8:	2700      	movs	r7, #0
 800bbda:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bbde:	f8d9 3000 	ldr.w	r3, [r9]
 800bbe2:	fa1f fb82 	uxth.w	fp, r2
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	fb0a 330b 	mla	r3, sl, fp, r3
 800bbec:	443b      	add	r3, r7
 800bbee:	f8d9 7000 	ldr.w	r7, [r9]
 800bbf2:	0c12      	lsrs	r2, r2, #16
 800bbf4:	0c3f      	lsrs	r7, r7, #16
 800bbf6:	fb0a 7202 	mla	r2, sl, r2, r7
 800bbfa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc04:	4565      	cmp	r5, ip
 800bc06:	f849 3b04 	str.w	r3, [r9], #4
 800bc0a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bc0e:	d8e4      	bhi.n	800bbda <__multiply+0xaa>
 800bc10:	9b01      	ldr	r3, [sp, #4]
 800bc12:	50e7      	str	r7, [r4, r3]
 800bc14:	9b03      	ldr	r3, [sp, #12]
 800bc16:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bc1a:	3104      	adds	r1, #4
 800bc1c:	f1b9 0f00 	cmp.w	r9, #0
 800bc20:	d020      	beq.n	800bc64 <__multiply+0x134>
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	4647      	mov	r7, r8
 800bc26:	46a4      	mov	ip, r4
 800bc28:	f04f 0a00 	mov.w	sl, #0
 800bc2c:	f8b7 b000 	ldrh.w	fp, [r7]
 800bc30:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bc34:	fb09 220b 	mla	r2, r9, fp, r2
 800bc38:	4452      	add	r2, sl
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc40:	f84c 3b04 	str.w	r3, [ip], #4
 800bc44:	f857 3b04 	ldr.w	r3, [r7], #4
 800bc48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc4c:	f8bc 3000 	ldrh.w	r3, [ip]
 800bc50:	fb09 330a 	mla	r3, r9, sl, r3
 800bc54:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bc58:	42bd      	cmp	r5, r7
 800bc5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc5e:	d8e5      	bhi.n	800bc2c <__multiply+0xfc>
 800bc60:	9a01      	ldr	r2, [sp, #4]
 800bc62:	50a3      	str	r3, [r4, r2]
 800bc64:	3404      	adds	r4, #4
 800bc66:	e79f      	b.n	800bba8 <__multiply+0x78>
 800bc68:	3e01      	subs	r6, #1
 800bc6a:	e7a1      	b.n	800bbb0 <__multiply+0x80>
 800bc6c:	0800e1cd 	.word	0x0800e1cd
 800bc70:	0800e1de 	.word	0x0800e1de

0800bc74 <__pow5mult>:
 800bc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc78:	4615      	mov	r5, r2
 800bc7a:	f012 0203 	ands.w	r2, r2, #3
 800bc7e:	4607      	mov	r7, r0
 800bc80:	460e      	mov	r6, r1
 800bc82:	d007      	beq.n	800bc94 <__pow5mult+0x20>
 800bc84:	4c25      	ldr	r4, [pc, #148]	@ (800bd1c <__pow5mult+0xa8>)
 800bc86:	3a01      	subs	r2, #1
 800bc88:	2300      	movs	r3, #0
 800bc8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc8e:	f7ff fe5d 	bl	800b94c <__multadd>
 800bc92:	4606      	mov	r6, r0
 800bc94:	10ad      	asrs	r5, r5, #2
 800bc96:	d03d      	beq.n	800bd14 <__pow5mult+0xa0>
 800bc98:	69fc      	ldr	r4, [r7, #28]
 800bc9a:	b97c      	cbnz	r4, 800bcbc <__pow5mult+0x48>
 800bc9c:	2010      	movs	r0, #16
 800bc9e:	f7ff fd3d 	bl	800b71c <malloc>
 800bca2:	4602      	mov	r2, r0
 800bca4:	61f8      	str	r0, [r7, #28]
 800bca6:	b928      	cbnz	r0, 800bcb4 <__pow5mult+0x40>
 800bca8:	4b1d      	ldr	r3, [pc, #116]	@ (800bd20 <__pow5mult+0xac>)
 800bcaa:	481e      	ldr	r0, [pc, #120]	@ (800bd24 <__pow5mult+0xb0>)
 800bcac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bcb0:	f001 fb6e 	bl	800d390 <__assert_func>
 800bcb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcb8:	6004      	str	r4, [r0, #0]
 800bcba:	60c4      	str	r4, [r0, #12]
 800bcbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bcc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcc4:	b94c      	cbnz	r4, 800bcda <__pow5mult+0x66>
 800bcc6:	f240 2171 	movw	r1, #625	@ 0x271
 800bcca:	4638      	mov	r0, r7
 800bccc:	f7ff ff1a 	bl	800bb04 <__i2b>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	6003      	str	r3, [r0, #0]
 800bcda:	f04f 0900 	mov.w	r9, #0
 800bcde:	07eb      	lsls	r3, r5, #31
 800bce0:	d50a      	bpl.n	800bcf8 <__pow5mult+0x84>
 800bce2:	4631      	mov	r1, r6
 800bce4:	4622      	mov	r2, r4
 800bce6:	4638      	mov	r0, r7
 800bce8:	f7ff ff22 	bl	800bb30 <__multiply>
 800bcec:	4631      	mov	r1, r6
 800bcee:	4680      	mov	r8, r0
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	f7ff fe09 	bl	800b908 <_Bfree>
 800bcf6:	4646      	mov	r6, r8
 800bcf8:	106d      	asrs	r5, r5, #1
 800bcfa:	d00b      	beq.n	800bd14 <__pow5mult+0xa0>
 800bcfc:	6820      	ldr	r0, [r4, #0]
 800bcfe:	b938      	cbnz	r0, 800bd10 <__pow5mult+0x9c>
 800bd00:	4622      	mov	r2, r4
 800bd02:	4621      	mov	r1, r4
 800bd04:	4638      	mov	r0, r7
 800bd06:	f7ff ff13 	bl	800bb30 <__multiply>
 800bd0a:	6020      	str	r0, [r4, #0]
 800bd0c:	f8c0 9000 	str.w	r9, [r0]
 800bd10:	4604      	mov	r4, r0
 800bd12:	e7e4      	b.n	800bcde <__pow5mult+0x6a>
 800bd14:	4630      	mov	r0, r6
 800bd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd1a:	bf00      	nop
 800bd1c:	0800e2f0 	.word	0x0800e2f0
 800bd20:	0800e15e 	.word	0x0800e15e
 800bd24:	0800e1de 	.word	0x0800e1de

0800bd28 <__lshift>:
 800bd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	6849      	ldr	r1, [r1, #4]
 800bd30:	6923      	ldr	r3, [r4, #16]
 800bd32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd36:	68a3      	ldr	r3, [r4, #8]
 800bd38:	4607      	mov	r7, r0
 800bd3a:	4691      	mov	r9, r2
 800bd3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd40:	f108 0601 	add.w	r6, r8, #1
 800bd44:	42b3      	cmp	r3, r6
 800bd46:	db0b      	blt.n	800bd60 <__lshift+0x38>
 800bd48:	4638      	mov	r0, r7
 800bd4a:	f7ff fd9d 	bl	800b888 <_Balloc>
 800bd4e:	4605      	mov	r5, r0
 800bd50:	b948      	cbnz	r0, 800bd66 <__lshift+0x3e>
 800bd52:	4602      	mov	r2, r0
 800bd54:	4b28      	ldr	r3, [pc, #160]	@ (800bdf8 <__lshift+0xd0>)
 800bd56:	4829      	ldr	r0, [pc, #164]	@ (800bdfc <__lshift+0xd4>)
 800bd58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bd5c:	f001 fb18 	bl	800d390 <__assert_func>
 800bd60:	3101      	adds	r1, #1
 800bd62:	005b      	lsls	r3, r3, #1
 800bd64:	e7ee      	b.n	800bd44 <__lshift+0x1c>
 800bd66:	2300      	movs	r3, #0
 800bd68:	f100 0114 	add.w	r1, r0, #20
 800bd6c:	f100 0210 	add.w	r2, r0, #16
 800bd70:	4618      	mov	r0, r3
 800bd72:	4553      	cmp	r3, sl
 800bd74:	db33      	blt.n	800bdde <__lshift+0xb6>
 800bd76:	6920      	ldr	r0, [r4, #16]
 800bd78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd7c:	f104 0314 	add.w	r3, r4, #20
 800bd80:	f019 091f 	ands.w	r9, r9, #31
 800bd84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd8c:	d02b      	beq.n	800bde6 <__lshift+0xbe>
 800bd8e:	f1c9 0e20 	rsb	lr, r9, #32
 800bd92:	468a      	mov	sl, r1
 800bd94:	2200      	movs	r2, #0
 800bd96:	6818      	ldr	r0, [r3, #0]
 800bd98:	fa00 f009 	lsl.w	r0, r0, r9
 800bd9c:	4310      	orrs	r0, r2
 800bd9e:	f84a 0b04 	str.w	r0, [sl], #4
 800bda2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bda6:	459c      	cmp	ip, r3
 800bda8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdac:	d8f3      	bhi.n	800bd96 <__lshift+0x6e>
 800bdae:	ebac 0304 	sub.w	r3, ip, r4
 800bdb2:	3b15      	subs	r3, #21
 800bdb4:	f023 0303 	bic.w	r3, r3, #3
 800bdb8:	3304      	adds	r3, #4
 800bdba:	f104 0015 	add.w	r0, r4, #21
 800bdbe:	4560      	cmp	r0, ip
 800bdc0:	bf88      	it	hi
 800bdc2:	2304      	movhi	r3, #4
 800bdc4:	50ca      	str	r2, [r1, r3]
 800bdc6:	b10a      	cbz	r2, 800bdcc <__lshift+0xa4>
 800bdc8:	f108 0602 	add.w	r6, r8, #2
 800bdcc:	3e01      	subs	r6, #1
 800bdce:	4638      	mov	r0, r7
 800bdd0:	612e      	str	r6, [r5, #16]
 800bdd2:	4621      	mov	r1, r4
 800bdd4:	f7ff fd98 	bl	800b908 <_Bfree>
 800bdd8:	4628      	mov	r0, r5
 800bdda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdde:	f842 0f04 	str.w	r0, [r2, #4]!
 800bde2:	3301      	adds	r3, #1
 800bde4:	e7c5      	b.n	800bd72 <__lshift+0x4a>
 800bde6:	3904      	subs	r1, #4
 800bde8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdec:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdf0:	459c      	cmp	ip, r3
 800bdf2:	d8f9      	bhi.n	800bde8 <__lshift+0xc0>
 800bdf4:	e7ea      	b.n	800bdcc <__lshift+0xa4>
 800bdf6:	bf00      	nop
 800bdf8:	0800e1cd 	.word	0x0800e1cd
 800bdfc:	0800e1de 	.word	0x0800e1de

0800be00 <__mcmp>:
 800be00:	690a      	ldr	r2, [r1, #16]
 800be02:	4603      	mov	r3, r0
 800be04:	6900      	ldr	r0, [r0, #16]
 800be06:	1a80      	subs	r0, r0, r2
 800be08:	b530      	push	{r4, r5, lr}
 800be0a:	d10e      	bne.n	800be2a <__mcmp+0x2a>
 800be0c:	3314      	adds	r3, #20
 800be0e:	3114      	adds	r1, #20
 800be10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be20:	4295      	cmp	r5, r2
 800be22:	d003      	beq.n	800be2c <__mcmp+0x2c>
 800be24:	d205      	bcs.n	800be32 <__mcmp+0x32>
 800be26:	f04f 30ff 	mov.w	r0, #4294967295
 800be2a:	bd30      	pop	{r4, r5, pc}
 800be2c:	42a3      	cmp	r3, r4
 800be2e:	d3f3      	bcc.n	800be18 <__mcmp+0x18>
 800be30:	e7fb      	b.n	800be2a <__mcmp+0x2a>
 800be32:	2001      	movs	r0, #1
 800be34:	e7f9      	b.n	800be2a <__mcmp+0x2a>
	...

0800be38 <__mdiff>:
 800be38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	4689      	mov	r9, r1
 800be3e:	4606      	mov	r6, r0
 800be40:	4611      	mov	r1, r2
 800be42:	4648      	mov	r0, r9
 800be44:	4614      	mov	r4, r2
 800be46:	f7ff ffdb 	bl	800be00 <__mcmp>
 800be4a:	1e05      	subs	r5, r0, #0
 800be4c:	d112      	bne.n	800be74 <__mdiff+0x3c>
 800be4e:	4629      	mov	r1, r5
 800be50:	4630      	mov	r0, r6
 800be52:	f7ff fd19 	bl	800b888 <_Balloc>
 800be56:	4602      	mov	r2, r0
 800be58:	b928      	cbnz	r0, 800be66 <__mdiff+0x2e>
 800be5a:	4b3f      	ldr	r3, [pc, #252]	@ (800bf58 <__mdiff+0x120>)
 800be5c:	f240 2137 	movw	r1, #567	@ 0x237
 800be60:	483e      	ldr	r0, [pc, #248]	@ (800bf5c <__mdiff+0x124>)
 800be62:	f001 fa95 	bl	800d390 <__assert_func>
 800be66:	2301      	movs	r3, #1
 800be68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be6c:	4610      	mov	r0, r2
 800be6e:	b003      	add	sp, #12
 800be70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be74:	bfbc      	itt	lt
 800be76:	464b      	movlt	r3, r9
 800be78:	46a1      	movlt	r9, r4
 800be7a:	4630      	mov	r0, r6
 800be7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be80:	bfba      	itte	lt
 800be82:	461c      	movlt	r4, r3
 800be84:	2501      	movlt	r5, #1
 800be86:	2500      	movge	r5, #0
 800be88:	f7ff fcfe 	bl	800b888 <_Balloc>
 800be8c:	4602      	mov	r2, r0
 800be8e:	b918      	cbnz	r0, 800be98 <__mdiff+0x60>
 800be90:	4b31      	ldr	r3, [pc, #196]	@ (800bf58 <__mdiff+0x120>)
 800be92:	f240 2145 	movw	r1, #581	@ 0x245
 800be96:	e7e3      	b.n	800be60 <__mdiff+0x28>
 800be98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be9c:	6926      	ldr	r6, [r4, #16]
 800be9e:	60c5      	str	r5, [r0, #12]
 800bea0:	f109 0310 	add.w	r3, r9, #16
 800bea4:	f109 0514 	add.w	r5, r9, #20
 800bea8:	f104 0e14 	add.w	lr, r4, #20
 800beac:	f100 0b14 	add.w	fp, r0, #20
 800beb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800beb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800beb8:	9301      	str	r3, [sp, #4]
 800beba:	46d9      	mov	r9, fp
 800bebc:	f04f 0c00 	mov.w	ip, #0
 800bec0:	9b01      	ldr	r3, [sp, #4]
 800bec2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bec6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800beca:	9301      	str	r3, [sp, #4]
 800becc:	fa1f f38a 	uxth.w	r3, sl
 800bed0:	4619      	mov	r1, r3
 800bed2:	b283      	uxth	r3, r0
 800bed4:	1acb      	subs	r3, r1, r3
 800bed6:	0c00      	lsrs	r0, r0, #16
 800bed8:	4463      	add	r3, ip
 800beda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bede:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bee8:	4576      	cmp	r6, lr
 800beea:	f849 3b04 	str.w	r3, [r9], #4
 800beee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bef2:	d8e5      	bhi.n	800bec0 <__mdiff+0x88>
 800bef4:	1b33      	subs	r3, r6, r4
 800bef6:	3b15      	subs	r3, #21
 800bef8:	f023 0303 	bic.w	r3, r3, #3
 800befc:	3415      	adds	r4, #21
 800befe:	3304      	adds	r3, #4
 800bf00:	42a6      	cmp	r6, r4
 800bf02:	bf38      	it	cc
 800bf04:	2304      	movcc	r3, #4
 800bf06:	441d      	add	r5, r3
 800bf08:	445b      	add	r3, fp
 800bf0a:	461e      	mov	r6, r3
 800bf0c:	462c      	mov	r4, r5
 800bf0e:	4544      	cmp	r4, r8
 800bf10:	d30e      	bcc.n	800bf30 <__mdiff+0xf8>
 800bf12:	f108 0103 	add.w	r1, r8, #3
 800bf16:	1b49      	subs	r1, r1, r5
 800bf18:	f021 0103 	bic.w	r1, r1, #3
 800bf1c:	3d03      	subs	r5, #3
 800bf1e:	45a8      	cmp	r8, r5
 800bf20:	bf38      	it	cc
 800bf22:	2100      	movcc	r1, #0
 800bf24:	440b      	add	r3, r1
 800bf26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf2a:	b191      	cbz	r1, 800bf52 <__mdiff+0x11a>
 800bf2c:	6117      	str	r7, [r2, #16]
 800bf2e:	e79d      	b.n	800be6c <__mdiff+0x34>
 800bf30:	f854 1b04 	ldr.w	r1, [r4], #4
 800bf34:	46e6      	mov	lr, ip
 800bf36:	0c08      	lsrs	r0, r1, #16
 800bf38:	fa1c fc81 	uxtah	ip, ip, r1
 800bf3c:	4471      	add	r1, lr
 800bf3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bf42:	b289      	uxth	r1, r1
 800bf44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf48:	f846 1b04 	str.w	r1, [r6], #4
 800bf4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf50:	e7dd      	b.n	800bf0e <__mdiff+0xd6>
 800bf52:	3f01      	subs	r7, #1
 800bf54:	e7e7      	b.n	800bf26 <__mdiff+0xee>
 800bf56:	bf00      	nop
 800bf58:	0800e1cd 	.word	0x0800e1cd
 800bf5c:	0800e1de 	.word	0x0800e1de

0800bf60 <__ulp>:
 800bf60:	b082      	sub	sp, #8
 800bf62:	ed8d 0b00 	vstr	d0, [sp]
 800bf66:	9a01      	ldr	r2, [sp, #4]
 800bf68:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa8 <__ulp+0x48>)
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	dc08      	bgt.n	800bf86 <__ulp+0x26>
 800bf74:	425b      	negs	r3, r3
 800bf76:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bf7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf7e:	da04      	bge.n	800bf8a <__ulp+0x2a>
 800bf80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bf84:	4113      	asrs	r3, r2
 800bf86:	2200      	movs	r2, #0
 800bf88:	e008      	b.n	800bf9c <__ulp+0x3c>
 800bf8a:	f1a2 0314 	sub.w	r3, r2, #20
 800bf8e:	2b1e      	cmp	r3, #30
 800bf90:	bfda      	itte	le
 800bf92:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bf96:	40da      	lsrle	r2, r3
 800bf98:	2201      	movgt	r2, #1
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	ec41 0b10 	vmov	d0, r0, r1
 800bfa4:	b002      	add	sp, #8
 800bfa6:	4770      	bx	lr
 800bfa8:	7ff00000 	.word	0x7ff00000

0800bfac <__b2d>:
 800bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb0:	6906      	ldr	r6, [r0, #16]
 800bfb2:	f100 0814 	add.w	r8, r0, #20
 800bfb6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bfba:	1f37      	subs	r7, r6, #4
 800bfbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	f7ff fd53 	bl	800ba6c <__hi0bits>
 800bfc6:	f1c0 0320 	rsb	r3, r0, #32
 800bfca:	280a      	cmp	r0, #10
 800bfcc:	600b      	str	r3, [r1, #0]
 800bfce:	491b      	ldr	r1, [pc, #108]	@ (800c03c <__b2d+0x90>)
 800bfd0:	dc15      	bgt.n	800bffe <__b2d+0x52>
 800bfd2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bfd6:	fa22 f30c 	lsr.w	r3, r2, ip
 800bfda:	45b8      	cmp	r8, r7
 800bfdc:	ea43 0501 	orr.w	r5, r3, r1
 800bfe0:	bf34      	ite	cc
 800bfe2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bfe6:	2300      	movcs	r3, #0
 800bfe8:	3015      	adds	r0, #21
 800bfea:	fa02 f000 	lsl.w	r0, r2, r0
 800bfee:	fa23 f30c 	lsr.w	r3, r3, ip
 800bff2:	4303      	orrs	r3, r0
 800bff4:	461c      	mov	r4, r3
 800bff6:	ec45 4b10 	vmov	d0, r4, r5
 800bffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bffe:	45b8      	cmp	r8, r7
 800c000:	bf3a      	itte	cc
 800c002:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c006:	f1a6 0708 	subcc.w	r7, r6, #8
 800c00a:	2300      	movcs	r3, #0
 800c00c:	380b      	subs	r0, #11
 800c00e:	d012      	beq.n	800c036 <__b2d+0x8a>
 800c010:	f1c0 0120 	rsb	r1, r0, #32
 800c014:	fa23 f401 	lsr.w	r4, r3, r1
 800c018:	4082      	lsls	r2, r0
 800c01a:	4322      	orrs	r2, r4
 800c01c:	4547      	cmp	r7, r8
 800c01e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c022:	bf8c      	ite	hi
 800c024:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c028:	2200      	movls	r2, #0
 800c02a:	4083      	lsls	r3, r0
 800c02c:	40ca      	lsrs	r2, r1
 800c02e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c032:	4313      	orrs	r3, r2
 800c034:	e7de      	b.n	800bff4 <__b2d+0x48>
 800c036:	ea42 0501 	orr.w	r5, r2, r1
 800c03a:	e7db      	b.n	800bff4 <__b2d+0x48>
 800c03c:	3ff00000 	.word	0x3ff00000

0800c040 <__d2b>:
 800c040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c044:	460f      	mov	r7, r1
 800c046:	2101      	movs	r1, #1
 800c048:	ec59 8b10 	vmov	r8, r9, d0
 800c04c:	4616      	mov	r6, r2
 800c04e:	f7ff fc1b 	bl	800b888 <_Balloc>
 800c052:	4604      	mov	r4, r0
 800c054:	b930      	cbnz	r0, 800c064 <__d2b+0x24>
 800c056:	4602      	mov	r2, r0
 800c058:	4b23      	ldr	r3, [pc, #140]	@ (800c0e8 <__d2b+0xa8>)
 800c05a:	4824      	ldr	r0, [pc, #144]	@ (800c0ec <__d2b+0xac>)
 800c05c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c060:	f001 f996 	bl	800d390 <__assert_func>
 800c064:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c06c:	b10d      	cbz	r5, 800c072 <__d2b+0x32>
 800c06e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c072:	9301      	str	r3, [sp, #4]
 800c074:	f1b8 0300 	subs.w	r3, r8, #0
 800c078:	d023      	beq.n	800c0c2 <__d2b+0x82>
 800c07a:	4668      	mov	r0, sp
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	f7ff fd14 	bl	800baaa <__lo0bits>
 800c082:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c086:	b1d0      	cbz	r0, 800c0be <__d2b+0x7e>
 800c088:	f1c0 0320 	rsb	r3, r0, #32
 800c08c:	fa02 f303 	lsl.w	r3, r2, r3
 800c090:	430b      	orrs	r3, r1
 800c092:	40c2      	lsrs	r2, r0
 800c094:	6163      	str	r3, [r4, #20]
 800c096:	9201      	str	r2, [sp, #4]
 800c098:	9b01      	ldr	r3, [sp, #4]
 800c09a:	61a3      	str	r3, [r4, #24]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	bf0c      	ite	eq
 800c0a0:	2201      	moveq	r2, #1
 800c0a2:	2202      	movne	r2, #2
 800c0a4:	6122      	str	r2, [r4, #16]
 800c0a6:	b1a5      	cbz	r5, 800c0d2 <__d2b+0x92>
 800c0a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c0ac:	4405      	add	r5, r0
 800c0ae:	603d      	str	r5, [r7, #0]
 800c0b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c0b4:	6030      	str	r0, [r6, #0]
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	b003      	add	sp, #12
 800c0ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0be:	6161      	str	r1, [r4, #20]
 800c0c0:	e7ea      	b.n	800c098 <__d2b+0x58>
 800c0c2:	a801      	add	r0, sp, #4
 800c0c4:	f7ff fcf1 	bl	800baaa <__lo0bits>
 800c0c8:	9b01      	ldr	r3, [sp, #4]
 800c0ca:	6163      	str	r3, [r4, #20]
 800c0cc:	3020      	adds	r0, #32
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	e7e8      	b.n	800c0a4 <__d2b+0x64>
 800c0d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c0da:	6038      	str	r0, [r7, #0]
 800c0dc:	6918      	ldr	r0, [r3, #16]
 800c0de:	f7ff fcc5 	bl	800ba6c <__hi0bits>
 800c0e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0e6:	e7e5      	b.n	800c0b4 <__d2b+0x74>
 800c0e8:	0800e1cd 	.word	0x0800e1cd
 800c0ec:	0800e1de 	.word	0x0800e1de

0800c0f0 <__ratio>:
 800c0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	b085      	sub	sp, #20
 800c0f6:	e9cd 1000 	strd	r1, r0, [sp]
 800c0fa:	a902      	add	r1, sp, #8
 800c0fc:	f7ff ff56 	bl	800bfac <__b2d>
 800c100:	9800      	ldr	r0, [sp, #0]
 800c102:	a903      	add	r1, sp, #12
 800c104:	ec55 4b10 	vmov	r4, r5, d0
 800c108:	f7ff ff50 	bl	800bfac <__b2d>
 800c10c:	9b01      	ldr	r3, [sp, #4]
 800c10e:	6919      	ldr	r1, [r3, #16]
 800c110:	9b00      	ldr	r3, [sp, #0]
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	1ac9      	subs	r1, r1, r3
 800c116:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c11a:	1a9b      	subs	r3, r3, r2
 800c11c:	ec5b ab10 	vmov	sl, fp, d0
 800c120:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c124:	2b00      	cmp	r3, #0
 800c126:	bfce      	itee	gt
 800c128:	462a      	movgt	r2, r5
 800c12a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c12e:	465a      	movle	r2, fp
 800c130:	462f      	mov	r7, r5
 800c132:	46d9      	mov	r9, fp
 800c134:	bfcc      	ite	gt
 800c136:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c13a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c13e:	464b      	mov	r3, r9
 800c140:	4652      	mov	r2, sl
 800c142:	4620      	mov	r0, r4
 800c144:	4639      	mov	r1, r7
 800c146:	f7f4 fb81 	bl	800084c <__aeabi_ddiv>
 800c14a:	ec41 0b10 	vmov	d0, r0, r1
 800c14e:	b005      	add	sp, #20
 800c150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c154 <__copybits>:
 800c154:	3901      	subs	r1, #1
 800c156:	b570      	push	{r4, r5, r6, lr}
 800c158:	1149      	asrs	r1, r1, #5
 800c15a:	6914      	ldr	r4, [r2, #16]
 800c15c:	3101      	adds	r1, #1
 800c15e:	f102 0314 	add.w	r3, r2, #20
 800c162:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c166:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c16a:	1f05      	subs	r5, r0, #4
 800c16c:	42a3      	cmp	r3, r4
 800c16e:	d30c      	bcc.n	800c18a <__copybits+0x36>
 800c170:	1aa3      	subs	r3, r4, r2
 800c172:	3b11      	subs	r3, #17
 800c174:	f023 0303 	bic.w	r3, r3, #3
 800c178:	3211      	adds	r2, #17
 800c17a:	42a2      	cmp	r2, r4
 800c17c:	bf88      	it	hi
 800c17e:	2300      	movhi	r3, #0
 800c180:	4418      	add	r0, r3
 800c182:	2300      	movs	r3, #0
 800c184:	4288      	cmp	r0, r1
 800c186:	d305      	bcc.n	800c194 <__copybits+0x40>
 800c188:	bd70      	pop	{r4, r5, r6, pc}
 800c18a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c18e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c192:	e7eb      	b.n	800c16c <__copybits+0x18>
 800c194:	f840 3b04 	str.w	r3, [r0], #4
 800c198:	e7f4      	b.n	800c184 <__copybits+0x30>

0800c19a <__any_on>:
 800c19a:	f100 0214 	add.w	r2, r0, #20
 800c19e:	6900      	ldr	r0, [r0, #16]
 800c1a0:	114b      	asrs	r3, r1, #5
 800c1a2:	4298      	cmp	r0, r3
 800c1a4:	b510      	push	{r4, lr}
 800c1a6:	db11      	blt.n	800c1cc <__any_on+0x32>
 800c1a8:	dd0a      	ble.n	800c1c0 <__any_on+0x26>
 800c1aa:	f011 011f 	ands.w	r1, r1, #31
 800c1ae:	d007      	beq.n	800c1c0 <__any_on+0x26>
 800c1b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1b4:	fa24 f001 	lsr.w	r0, r4, r1
 800c1b8:	fa00 f101 	lsl.w	r1, r0, r1
 800c1bc:	428c      	cmp	r4, r1
 800c1be:	d10b      	bne.n	800c1d8 <__any_on+0x3e>
 800c1c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d803      	bhi.n	800c1d0 <__any_on+0x36>
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	bd10      	pop	{r4, pc}
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	e7f7      	b.n	800c1c0 <__any_on+0x26>
 800c1d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1d4:	2900      	cmp	r1, #0
 800c1d6:	d0f5      	beq.n	800c1c4 <__any_on+0x2a>
 800c1d8:	2001      	movs	r0, #1
 800c1da:	e7f6      	b.n	800c1ca <__any_on+0x30>

0800c1dc <sulp>:
 800c1dc:	b570      	push	{r4, r5, r6, lr}
 800c1de:	4604      	mov	r4, r0
 800c1e0:	460d      	mov	r5, r1
 800c1e2:	ec45 4b10 	vmov	d0, r4, r5
 800c1e6:	4616      	mov	r6, r2
 800c1e8:	f7ff feba 	bl	800bf60 <__ulp>
 800c1ec:	ec51 0b10 	vmov	r0, r1, d0
 800c1f0:	b17e      	cbz	r6, 800c212 <sulp+0x36>
 800c1f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c1f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	dd09      	ble.n	800c212 <sulp+0x36>
 800c1fe:	051b      	lsls	r3, r3, #20
 800c200:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c204:	2400      	movs	r4, #0
 800c206:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c20a:	4622      	mov	r2, r4
 800c20c:	462b      	mov	r3, r5
 800c20e:	f7f4 f9f3 	bl	80005f8 <__aeabi_dmul>
 800c212:	ec41 0b10 	vmov	d0, r0, r1
 800c216:	bd70      	pop	{r4, r5, r6, pc}

0800c218 <_strtod_l>:
 800c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21c:	b09f      	sub	sp, #124	@ 0x7c
 800c21e:	460c      	mov	r4, r1
 800c220:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c222:	2200      	movs	r2, #0
 800c224:	921a      	str	r2, [sp, #104]	@ 0x68
 800c226:	9005      	str	r0, [sp, #20]
 800c228:	f04f 0a00 	mov.w	sl, #0
 800c22c:	f04f 0b00 	mov.w	fp, #0
 800c230:	460a      	mov	r2, r1
 800c232:	9219      	str	r2, [sp, #100]	@ 0x64
 800c234:	7811      	ldrb	r1, [r2, #0]
 800c236:	292b      	cmp	r1, #43	@ 0x2b
 800c238:	d04a      	beq.n	800c2d0 <_strtod_l+0xb8>
 800c23a:	d838      	bhi.n	800c2ae <_strtod_l+0x96>
 800c23c:	290d      	cmp	r1, #13
 800c23e:	d832      	bhi.n	800c2a6 <_strtod_l+0x8e>
 800c240:	2908      	cmp	r1, #8
 800c242:	d832      	bhi.n	800c2aa <_strtod_l+0x92>
 800c244:	2900      	cmp	r1, #0
 800c246:	d03b      	beq.n	800c2c0 <_strtod_l+0xa8>
 800c248:	2200      	movs	r2, #0
 800c24a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c24c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c24e:	782a      	ldrb	r2, [r5, #0]
 800c250:	2a30      	cmp	r2, #48	@ 0x30
 800c252:	f040 80b2 	bne.w	800c3ba <_strtod_l+0x1a2>
 800c256:	786a      	ldrb	r2, [r5, #1]
 800c258:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c25c:	2a58      	cmp	r2, #88	@ 0x58
 800c25e:	d16e      	bne.n	800c33e <_strtod_l+0x126>
 800c260:	9302      	str	r3, [sp, #8]
 800c262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c264:	9301      	str	r3, [sp, #4]
 800c266:	ab1a      	add	r3, sp, #104	@ 0x68
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	4a8f      	ldr	r2, [pc, #572]	@ (800c4a8 <_strtod_l+0x290>)
 800c26c:	9805      	ldr	r0, [sp, #20]
 800c26e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c270:	a919      	add	r1, sp, #100	@ 0x64
 800c272:	f001 f927 	bl	800d4c4 <__gethex>
 800c276:	f010 060f 	ands.w	r6, r0, #15
 800c27a:	4604      	mov	r4, r0
 800c27c:	d005      	beq.n	800c28a <_strtod_l+0x72>
 800c27e:	2e06      	cmp	r6, #6
 800c280:	d128      	bne.n	800c2d4 <_strtod_l+0xbc>
 800c282:	3501      	adds	r5, #1
 800c284:	2300      	movs	r3, #0
 800c286:	9519      	str	r5, [sp, #100]	@ 0x64
 800c288:	930e      	str	r3, [sp, #56]	@ 0x38
 800c28a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	f040 858e 	bne.w	800cdae <_strtod_l+0xb96>
 800c292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c294:	b1cb      	cbz	r3, 800c2ca <_strtod_l+0xb2>
 800c296:	4652      	mov	r2, sl
 800c298:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c29c:	ec43 2b10 	vmov	d0, r2, r3
 800c2a0:	b01f      	add	sp, #124	@ 0x7c
 800c2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a6:	2920      	cmp	r1, #32
 800c2a8:	d1ce      	bne.n	800c248 <_strtod_l+0x30>
 800c2aa:	3201      	adds	r2, #1
 800c2ac:	e7c1      	b.n	800c232 <_strtod_l+0x1a>
 800c2ae:	292d      	cmp	r1, #45	@ 0x2d
 800c2b0:	d1ca      	bne.n	800c248 <_strtod_l+0x30>
 800c2b2:	2101      	movs	r1, #1
 800c2b4:	910e      	str	r1, [sp, #56]	@ 0x38
 800c2b6:	1c51      	adds	r1, r2, #1
 800c2b8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c2ba:	7852      	ldrb	r2, [r2, #1]
 800c2bc:	2a00      	cmp	r2, #0
 800c2be:	d1c5      	bne.n	800c24c <_strtod_l+0x34>
 800c2c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c2c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f040 8570 	bne.w	800cdaa <_strtod_l+0xb92>
 800c2ca:	4652      	mov	r2, sl
 800c2cc:	465b      	mov	r3, fp
 800c2ce:	e7e5      	b.n	800c29c <_strtod_l+0x84>
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	e7ef      	b.n	800c2b4 <_strtod_l+0x9c>
 800c2d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c2d6:	b13a      	cbz	r2, 800c2e8 <_strtod_l+0xd0>
 800c2d8:	2135      	movs	r1, #53	@ 0x35
 800c2da:	a81c      	add	r0, sp, #112	@ 0x70
 800c2dc:	f7ff ff3a 	bl	800c154 <__copybits>
 800c2e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2e2:	9805      	ldr	r0, [sp, #20]
 800c2e4:	f7ff fb10 	bl	800b908 <_Bfree>
 800c2e8:	3e01      	subs	r6, #1
 800c2ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c2ec:	2e04      	cmp	r6, #4
 800c2ee:	d806      	bhi.n	800c2fe <_strtod_l+0xe6>
 800c2f0:	e8df f006 	tbb	[pc, r6]
 800c2f4:	201d0314 	.word	0x201d0314
 800c2f8:	14          	.byte	0x14
 800c2f9:	00          	.byte	0x00
 800c2fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c2fe:	05e1      	lsls	r1, r4, #23
 800c300:	bf48      	it	mi
 800c302:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c306:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c30a:	0d1b      	lsrs	r3, r3, #20
 800c30c:	051b      	lsls	r3, r3, #20
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1bb      	bne.n	800c28a <_strtod_l+0x72>
 800c312:	f7fe fb2b 	bl	800a96c <__errno>
 800c316:	2322      	movs	r3, #34	@ 0x22
 800c318:	6003      	str	r3, [r0, #0]
 800c31a:	e7b6      	b.n	800c28a <_strtod_l+0x72>
 800c31c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c320:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c324:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c328:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c32c:	e7e7      	b.n	800c2fe <_strtod_l+0xe6>
 800c32e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c4b0 <_strtod_l+0x298>
 800c332:	e7e4      	b.n	800c2fe <_strtod_l+0xe6>
 800c334:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c338:	f04f 3aff 	mov.w	sl, #4294967295
 800c33c:	e7df      	b.n	800c2fe <_strtod_l+0xe6>
 800c33e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c340:	1c5a      	adds	r2, r3, #1
 800c342:	9219      	str	r2, [sp, #100]	@ 0x64
 800c344:	785b      	ldrb	r3, [r3, #1]
 800c346:	2b30      	cmp	r3, #48	@ 0x30
 800c348:	d0f9      	beq.n	800c33e <_strtod_l+0x126>
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d09d      	beq.n	800c28a <_strtod_l+0x72>
 800c34e:	2301      	movs	r3, #1
 800c350:	2700      	movs	r7, #0
 800c352:	9308      	str	r3, [sp, #32]
 800c354:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c356:	930c      	str	r3, [sp, #48]	@ 0x30
 800c358:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c35a:	46b9      	mov	r9, r7
 800c35c:	220a      	movs	r2, #10
 800c35e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c360:	7805      	ldrb	r5, [r0, #0]
 800c362:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c366:	b2d9      	uxtb	r1, r3
 800c368:	2909      	cmp	r1, #9
 800c36a:	d928      	bls.n	800c3be <_strtod_l+0x1a6>
 800c36c:	494f      	ldr	r1, [pc, #316]	@ (800c4ac <_strtod_l+0x294>)
 800c36e:	2201      	movs	r2, #1
 800c370:	f000 ffd6 	bl	800d320 <strncmp>
 800c374:	2800      	cmp	r0, #0
 800c376:	d032      	beq.n	800c3de <_strtod_l+0x1c6>
 800c378:	2000      	movs	r0, #0
 800c37a:	462a      	mov	r2, r5
 800c37c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c37e:	464d      	mov	r5, r9
 800c380:	4603      	mov	r3, r0
 800c382:	2a65      	cmp	r2, #101	@ 0x65
 800c384:	d001      	beq.n	800c38a <_strtod_l+0x172>
 800c386:	2a45      	cmp	r2, #69	@ 0x45
 800c388:	d114      	bne.n	800c3b4 <_strtod_l+0x19c>
 800c38a:	b91d      	cbnz	r5, 800c394 <_strtod_l+0x17c>
 800c38c:	9a08      	ldr	r2, [sp, #32]
 800c38e:	4302      	orrs	r2, r0
 800c390:	d096      	beq.n	800c2c0 <_strtod_l+0xa8>
 800c392:	2500      	movs	r5, #0
 800c394:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c396:	1c62      	adds	r2, r4, #1
 800c398:	9219      	str	r2, [sp, #100]	@ 0x64
 800c39a:	7862      	ldrb	r2, [r4, #1]
 800c39c:	2a2b      	cmp	r2, #43	@ 0x2b
 800c39e:	d07a      	beq.n	800c496 <_strtod_l+0x27e>
 800c3a0:	2a2d      	cmp	r2, #45	@ 0x2d
 800c3a2:	d07e      	beq.n	800c4a2 <_strtod_l+0x28a>
 800c3a4:	f04f 0c00 	mov.w	ip, #0
 800c3a8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c3ac:	2909      	cmp	r1, #9
 800c3ae:	f240 8085 	bls.w	800c4bc <_strtod_l+0x2a4>
 800c3b2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c3b4:	f04f 0800 	mov.w	r8, #0
 800c3b8:	e0a5      	b.n	800c506 <_strtod_l+0x2ee>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	e7c8      	b.n	800c350 <_strtod_l+0x138>
 800c3be:	f1b9 0f08 	cmp.w	r9, #8
 800c3c2:	bfd8      	it	le
 800c3c4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c3c6:	f100 0001 	add.w	r0, r0, #1
 800c3ca:	bfda      	itte	le
 800c3cc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c3d0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c3d2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c3d6:	f109 0901 	add.w	r9, r9, #1
 800c3da:	9019      	str	r0, [sp, #100]	@ 0x64
 800c3dc:	e7bf      	b.n	800c35e <_strtod_l+0x146>
 800c3de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3e0:	1c5a      	adds	r2, r3, #1
 800c3e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3e4:	785a      	ldrb	r2, [r3, #1]
 800c3e6:	f1b9 0f00 	cmp.w	r9, #0
 800c3ea:	d03b      	beq.n	800c464 <_strtod_l+0x24c>
 800c3ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800c3ee:	464d      	mov	r5, r9
 800c3f0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c3f4:	2b09      	cmp	r3, #9
 800c3f6:	d912      	bls.n	800c41e <_strtod_l+0x206>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e7c2      	b.n	800c382 <_strtod_l+0x16a>
 800c3fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	9219      	str	r2, [sp, #100]	@ 0x64
 800c402:	785a      	ldrb	r2, [r3, #1]
 800c404:	3001      	adds	r0, #1
 800c406:	2a30      	cmp	r2, #48	@ 0x30
 800c408:	d0f8      	beq.n	800c3fc <_strtod_l+0x1e4>
 800c40a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c40e:	2b08      	cmp	r3, #8
 800c410:	f200 84d2 	bhi.w	800cdb8 <_strtod_l+0xba0>
 800c414:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c416:	900a      	str	r0, [sp, #40]	@ 0x28
 800c418:	2000      	movs	r0, #0
 800c41a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c41c:	4605      	mov	r5, r0
 800c41e:	3a30      	subs	r2, #48	@ 0x30
 800c420:	f100 0301 	add.w	r3, r0, #1
 800c424:	d018      	beq.n	800c458 <_strtod_l+0x240>
 800c426:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c428:	4419      	add	r1, r3
 800c42a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c42c:	462e      	mov	r6, r5
 800c42e:	f04f 0e0a 	mov.w	lr, #10
 800c432:	1c71      	adds	r1, r6, #1
 800c434:	eba1 0c05 	sub.w	ip, r1, r5
 800c438:	4563      	cmp	r3, ip
 800c43a:	dc15      	bgt.n	800c468 <_strtod_l+0x250>
 800c43c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c440:	182b      	adds	r3, r5, r0
 800c442:	2b08      	cmp	r3, #8
 800c444:	f105 0501 	add.w	r5, r5, #1
 800c448:	4405      	add	r5, r0
 800c44a:	dc1a      	bgt.n	800c482 <_strtod_l+0x26a>
 800c44c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c44e:	230a      	movs	r3, #10
 800c450:	fb03 2301 	mla	r3, r3, r1, r2
 800c454:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c456:	2300      	movs	r3, #0
 800c458:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c45a:	1c51      	adds	r1, r2, #1
 800c45c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c45e:	7852      	ldrb	r2, [r2, #1]
 800c460:	4618      	mov	r0, r3
 800c462:	e7c5      	b.n	800c3f0 <_strtod_l+0x1d8>
 800c464:	4648      	mov	r0, r9
 800c466:	e7ce      	b.n	800c406 <_strtod_l+0x1ee>
 800c468:	2e08      	cmp	r6, #8
 800c46a:	dc05      	bgt.n	800c478 <_strtod_l+0x260>
 800c46c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c46e:	fb0e f606 	mul.w	r6, lr, r6
 800c472:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c474:	460e      	mov	r6, r1
 800c476:	e7dc      	b.n	800c432 <_strtod_l+0x21a>
 800c478:	2910      	cmp	r1, #16
 800c47a:	bfd8      	it	le
 800c47c:	fb0e f707 	mulle.w	r7, lr, r7
 800c480:	e7f8      	b.n	800c474 <_strtod_l+0x25c>
 800c482:	2b0f      	cmp	r3, #15
 800c484:	bfdc      	itt	le
 800c486:	230a      	movle	r3, #10
 800c488:	fb03 2707 	mlale	r7, r3, r7, r2
 800c48c:	e7e3      	b.n	800c456 <_strtod_l+0x23e>
 800c48e:	2300      	movs	r3, #0
 800c490:	930a      	str	r3, [sp, #40]	@ 0x28
 800c492:	2301      	movs	r3, #1
 800c494:	e77a      	b.n	800c38c <_strtod_l+0x174>
 800c496:	f04f 0c00 	mov.w	ip, #0
 800c49a:	1ca2      	adds	r2, r4, #2
 800c49c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c49e:	78a2      	ldrb	r2, [r4, #2]
 800c4a0:	e782      	b.n	800c3a8 <_strtod_l+0x190>
 800c4a2:	f04f 0c01 	mov.w	ip, #1
 800c4a6:	e7f8      	b.n	800c49a <_strtod_l+0x282>
 800c4a8:	0800e404 	.word	0x0800e404
 800c4ac:	0800e237 	.word	0x0800e237
 800c4b0:	7ff00000 	.word	0x7ff00000
 800c4b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4b6:	1c51      	adds	r1, r2, #1
 800c4b8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c4ba:	7852      	ldrb	r2, [r2, #1]
 800c4bc:	2a30      	cmp	r2, #48	@ 0x30
 800c4be:	d0f9      	beq.n	800c4b4 <_strtod_l+0x29c>
 800c4c0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c4c4:	2908      	cmp	r1, #8
 800c4c6:	f63f af75 	bhi.w	800c3b4 <_strtod_l+0x19c>
 800c4ca:	3a30      	subs	r2, #48	@ 0x30
 800c4cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4ce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4d0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c4d2:	f04f 080a 	mov.w	r8, #10
 800c4d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4d8:	1c56      	adds	r6, r2, #1
 800c4da:	9619      	str	r6, [sp, #100]	@ 0x64
 800c4dc:	7852      	ldrb	r2, [r2, #1]
 800c4de:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c4e2:	f1be 0f09 	cmp.w	lr, #9
 800c4e6:	d939      	bls.n	800c55c <_strtod_l+0x344>
 800c4e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c4ea:	1a76      	subs	r6, r6, r1
 800c4ec:	2e08      	cmp	r6, #8
 800c4ee:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c4f2:	dc03      	bgt.n	800c4fc <_strtod_l+0x2e4>
 800c4f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4f6:	4588      	cmp	r8, r1
 800c4f8:	bfa8      	it	ge
 800c4fa:	4688      	movge	r8, r1
 800c4fc:	f1bc 0f00 	cmp.w	ip, #0
 800c500:	d001      	beq.n	800c506 <_strtod_l+0x2ee>
 800c502:	f1c8 0800 	rsb	r8, r8, #0
 800c506:	2d00      	cmp	r5, #0
 800c508:	d14e      	bne.n	800c5a8 <_strtod_l+0x390>
 800c50a:	9908      	ldr	r1, [sp, #32]
 800c50c:	4308      	orrs	r0, r1
 800c50e:	f47f aebc 	bne.w	800c28a <_strtod_l+0x72>
 800c512:	2b00      	cmp	r3, #0
 800c514:	f47f aed4 	bne.w	800c2c0 <_strtod_l+0xa8>
 800c518:	2a69      	cmp	r2, #105	@ 0x69
 800c51a:	d028      	beq.n	800c56e <_strtod_l+0x356>
 800c51c:	dc25      	bgt.n	800c56a <_strtod_l+0x352>
 800c51e:	2a49      	cmp	r2, #73	@ 0x49
 800c520:	d025      	beq.n	800c56e <_strtod_l+0x356>
 800c522:	2a4e      	cmp	r2, #78	@ 0x4e
 800c524:	f47f aecc 	bne.w	800c2c0 <_strtod_l+0xa8>
 800c528:	499a      	ldr	r1, [pc, #616]	@ (800c794 <_strtod_l+0x57c>)
 800c52a:	a819      	add	r0, sp, #100	@ 0x64
 800c52c:	f001 f9ec 	bl	800d908 <__match>
 800c530:	2800      	cmp	r0, #0
 800c532:	f43f aec5 	beq.w	800c2c0 <_strtod_l+0xa8>
 800c536:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2b28      	cmp	r3, #40	@ 0x28
 800c53c:	d12e      	bne.n	800c59c <_strtod_l+0x384>
 800c53e:	4996      	ldr	r1, [pc, #600]	@ (800c798 <_strtod_l+0x580>)
 800c540:	aa1c      	add	r2, sp, #112	@ 0x70
 800c542:	a819      	add	r0, sp, #100	@ 0x64
 800c544:	f001 f9f4 	bl	800d930 <__hexnan>
 800c548:	2805      	cmp	r0, #5
 800c54a:	d127      	bne.n	800c59c <_strtod_l+0x384>
 800c54c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c54e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c552:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c556:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c55a:	e696      	b.n	800c28a <_strtod_l+0x72>
 800c55c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c55e:	fb08 2101 	mla	r1, r8, r1, r2
 800c562:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c566:	9209      	str	r2, [sp, #36]	@ 0x24
 800c568:	e7b5      	b.n	800c4d6 <_strtod_l+0x2be>
 800c56a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c56c:	e7da      	b.n	800c524 <_strtod_l+0x30c>
 800c56e:	498b      	ldr	r1, [pc, #556]	@ (800c79c <_strtod_l+0x584>)
 800c570:	a819      	add	r0, sp, #100	@ 0x64
 800c572:	f001 f9c9 	bl	800d908 <__match>
 800c576:	2800      	cmp	r0, #0
 800c578:	f43f aea2 	beq.w	800c2c0 <_strtod_l+0xa8>
 800c57c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c57e:	4988      	ldr	r1, [pc, #544]	@ (800c7a0 <_strtod_l+0x588>)
 800c580:	3b01      	subs	r3, #1
 800c582:	a819      	add	r0, sp, #100	@ 0x64
 800c584:	9319      	str	r3, [sp, #100]	@ 0x64
 800c586:	f001 f9bf 	bl	800d908 <__match>
 800c58a:	b910      	cbnz	r0, 800c592 <_strtod_l+0x37a>
 800c58c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c58e:	3301      	adds	r3, #1
 800c590:	9319      	str	r3, [sp, #100]	@ 0x64
 800c592:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c7b0 <_strtod_l+0x598>
 800c596:	f04f 0a00 	mov.w	sl, #0
 800c59a:	e676      	b.n	800c28a <_strtod_l+0x72>
 800c59c:	4881      	ldr	r0, [pc, #516]	@ (800c7a4 <_strtod_l+0x58c>)
 800c59e:	f000 feef 	bl	800d380 <nan>
 800c5a2:	ec5b ab10 	vmov	sl, fp, d0
 800c5a6:	e670      	b.n	800c28a <_strtod_l+0x72>
 800c5a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c5ac:	eba8 0303 	sub.w	r3, r8, r3
 800c5b0:	f1b9 0f00 	cmp.w	r9, #0
 800c5b4:	bf08      	it	eq
 800c5b6:	46a9      	moveq	r9, r5
 800c5b8:	2d10      	cmp	r5, #16
 800c5ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5bc:	462c      	mov	r4, r5
 800c5be:	bfa8      	it	ge
 800c5c0:	2410      	movge	r4, #16
 800c5c2:	f7f3 ff9f 	bl	8000504 <__aeabi_ui2d>
 800c5c6:	2d09      	cmp	r5, #9
 800c5c8:	4682      	mov	sl, r0
 800c5ca:	468b      	mov	fp, r1
 800c5cc:	dc13      	bgt.n	800c5f6 <_strtod_l+0x3de>
 800c5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f43f ae5a 	beq.w	800c28a <_strtod_l+0x72>
 800c5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5d8:	dd78      	ble.n	800c6cc <_strtod_l+0x4b4>
 800c5da:	2b16      	cmp	r3, #22
 800c5dc:	dc5f      	bgt.n	800c69e <_strtod_l+0x486>
 800c5de:	4972      	ldr	r1, [pc, #456]	@ (800c7a8 <_strtod_l+0x590>)
 800c5e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c5e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5e8:	4652      	mov	r2, sl
 800c5ea:	465b      	mov	r3, fp
 800c5ec:	f7f4 f804 	bl	80005f8 <__aeabi_dmul>
 800c5f0:	4682      	mov	sl, r0
 800c5f2:	468b      	mov	fp, r1
 800c5f4:	e649      	b.n	800c28a <_strtod_l+0x72>
 800c5f6:	4b6c      	ldr	r3, [pc, #432]	@ (800c7a8 <_strtod_l+0x590>)
 800c5f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c600:	f7f3 fffa 	bl	80005f8 <__aeabi_dmul>
 800c604:	4682      	mov	sl, r0
 800c606:	4638      	mov	r0, r7
 800c608:	468b      	mov	fp, r1
 800c60a:	f7f3 ff7b 	bl	8000504 <__aeabi_ui2d>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4650      	mov	r0, sl
 800c614:	4659      	mov	r1, fp
 800c616:	f7f3 fe39 	bl	800028c <__adddf3>
 800c61a:	2d0f      	cmp	r5, #15
 800c61c:	4682      	mov	sl, r0
 800c61e:	468b      	mov	fp, r1
 800c620:	ddd5      	ble.n	800c5ce <_strtod_l+0x3b6>
 800c622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c624:	1b2c      	subs	r4, r5, r4
 800c626:	441c      	add	r4, r3
 800c628:	2c00      	cmp	r4, #0
 800c62a:	f340 8093 	ble.w	800c754 <_strtod_l+0x53c>
 800c62e:	f014 030f 	ands.w	r3, r4, #15
 800c632:	d00a      	beq.n	800c64a <_strtod_l+0x432>
 800c634:	495c      	ldr	r1, [pc, #368]	@ (800c7a8 <_strtod_l+0x590>)
 800c636:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c63a:	4652      	mov	r2, sl
 800c63c:	465b      	mov	r3, fp
 800c63e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c642:	f7f3 ffd9 	bl	80005f8 <__aeabi_dmul>
 800c646:	4682      	mov	sl, r0
 800c648:	468b      	mov	fp, r1
 800c64a:	f034 040f 	bics.w	r4, r4, #15
 800c64e:	d073      	beq.n	800c738 <_strtod_l+0x520>
 800c650:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c654:	dd49      	ble.n	800c6ea <_strtod_l+0x4d2>
 800c656:	2400      	movs	r4, #0
 800c658:	46a0      	mov	r8, r4
 800c65a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c65c:	46a1      	mov	r9, r4
 800c65e:	9a05      	ldr	r2, [sp, #20]
 800c660:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c7b0 <_strtod_l+0x598>
 800c664:	2322      	movs	r3, #34	@ 0x22
 800c666:	6013      	str	r3, [r2, #0]
 800c668:	f04f 0a00 	mov.w	sl, #0
 800c66c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f43f ae0b 	beq.w	800c28a <_strtod_l+0x72>
 800c674:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c676:	9805      	ldr	r0, [sp, #20]
 800c678:	f7ff f946 	bl	800b908 <_Bfree>
 800c67c:	9805      	ldr	r0, [sp, #20]
 800c67e:	4649      	mov	r1, r9
 800c680:	f7ff f942 	bl	800b908 <_Bfree>
 800c684:	9805      	ldr	r0, [sp, #20]
 800c686:	4641      	mov	r1, r8
 800c688:	f7ff f93e 	bl	800b908 <_Bfree>
 800c68c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c68e:	9805      	ldr	r0, [sp, #20]
 800c690:	f7ff f93a 	bl	800b908 <_Bfree>
 800c694:	9805      	ldr	r0, [sp, #20]
 800c696:	4621      	mov	r1, r4
 800c698:	f7ff f936 	bl	800b908 <_Bfree>
 800c69c:	e5f5      	b.n	800c28a <_strtod_l+0x72>
 800c69e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	dbbc      	blt.n	800c622 <_strtod_l+0x40a>
 800c6a8:	4c3f      	ldr	r4, [pc, #252]	@ (800c7a8 <_strtod_l+0x590>)
 800c6aa:	f1c5 050f 	rsb	r5, r5, #15
 800c6ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c6b2:	4652      	mov	r2, sl
 800c6b4:	465b      	mov	r3, fp
 800c6b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ba:	f7f3 ff9d 	bl	80005f8 <__aeabi_dmul>
 800c6be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6c0:	1b5d      	subs	r5, r3, r5
 800c6c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c6c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c6ca:	e78f      	b.n	800c5ec <_strtod_l+0x3d4>
 800c6cc:	3316      	adds	r3, #22
 800c6ce:	dba8      	blt.n	800c622 <_strtod_l+0x40a>
 800c6d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6d2:	eba3 0808 	sub.w	r8, r3, r8
 800c6d6:	4b34      	ldr	r3, [pc, #208]	@ (800c7a8 <_strtod_l+0x590>)
 800c6d8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c6dc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c6e0:	4650      	mov	r0, sl
 800c6e2:	4659      	mov	r1, fp
 800c6e4:	f7f4 f8b2 	bl	800084c <__aeabi_ddiv>
 800c6e8:	e782      	b.n	800c5f0 <_strtod_l+0x3d8>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	4f2f      	ldr	r7, [pc, #188]	@ (800c7ac <_strtod_l+0x594>)
 800c6ee:	1124      	asrs	r4, r4, #4
 800c6f0:	4650      	mov	r0, sl
 800c6f2:	4659      	mov	r1, fp
 800c6f4:	461e      	mov	r6, r3
 800c6f6:	2c01      	cmp	r4, #1
 800c6f8:	dc21      	bgt.n	800c73e <_strtod_l+0x526>
 800c6fa:	b10b      	cbz	r3, 800c700 <_strtod_l+0x4e8>
 800c6fc:	4682      	mov	sl, r0
 800c6fe:	468b      	mov	fp, r1
 800c700:	492a      	ldr	r1, [pc, #168]	@ (800c7ac <_strtod_l+0x594>)
 800c702:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c706:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c70a:	4652      	mov	r2, sl
 800c70c:	465b      	mov	r3, fp
 800c70e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c712:	f7f3 ff71 	bl	80005f8 <__aeabi_dmul>
 800c716:	4b26      	ldr	r3, [pc, #152]	@ (800c7b0 <_strtod_l+0x598>)
 800c718:	460a      	mov	r2, r1
 800c71a:	400b      	ands	r3, r1
 800c71c:	4925      	ldr	r1, [pc, #148]	@ (800c7b4 <_strtod_l+0x59c>)
 800c71e:	428b      	cmp	r3, r1
 800c720:	4682      	mov	sl, r0
 800c722:	d898      	bhi.n	800c656 <_strtod_l+0x43e>
 800c724:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c728:	428b      	cmp	r3, r1
 800c72a:	bf86      	itte	hi
 800c72c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c7b8 <_strtod_l+0x5a0>
 800c730:	f04f 3aff 	movhi.w	sl, #4294967295
 800c734:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c738:	2300      	movs	r3, #0
 800c73a:	9308      	str	r3, [sp, #32]
 800c73c:	e076      	b.n	800c82c <_strtod_l+0x614>
 800c73e:	07e2      	lsls	r2, r4, #31
 800c740:	d504      	bpl.n	800c74c <_strtod_l+0x534>
 800c742:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c746:	f7f3 ff57 	bl	80005f8 <__aeabi_dmul>
 800c74a:	2301      	movs	r3, #1
 800c74c:	3601      	adds	r6, #1
 800c74e:	1064      	asrs	r4, r4, #1
 800c750:	3708      	adds	r7, #8
 800c752:	e7d0      	b.n	800c6f6 <_strtod_l+0x4de>
 800c754:	d0f0      	beq.n	800c738 <_strtod_l+0x520>
 800c756:	4264      	negs	r4, r4
 800c758:	f014 020f 	ands.w	r2, r4, #15
 800c75c:	d00a      	beq.n	800c774 <_strtod_l+0x55c>
 800c75e:	4b12      	ldr	r3, [pc, #72]	@ (800c7a8 <_strtod_l+0x590>)
 800c760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c764:	4650      	mov	r0, sl
 800c766:	4659      	mov	r1, fp
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f7f4 f86e 	bl	800084c <__aeabi_ddiv>
 800c770:	4682      	mov	sl, r0
 800c772:	468b      	mov	fp, r1
 800c774:	1124      	asrs	r4, r4, #4
 800c776:	d0df      	beq.n	800c738 <_strtod_l+0x520>
 800c778:	2c1f      	cmp	r4, #31
 800c77a:	dd1f      	ble.n	800c7bc <_strtod_l+0x5a4>
 800c77c:	2400      	movs	r4, #0
 800c77e:	46a0      	mov	r8, r4
 800c780:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c782:	46a1      	mov	r9, r4
 800c784:	9a05      	ldr	r2, [sp, #20]
 800c786:	2322      	movs	r3, #34	@ 0x22
 800c788:	f04f 0a00 	mov.w	sl, #0
 800c78c:	f04f 0b00 	mov.w	fp, #0
 800c790:	6013      	str	r3, [r2, #0]
 800c792:	e76b      	b.n	800c66c <_strtod_l+0x454>
 800c794:	0800e125 	.word	0x0800e125
 800c798:	0800e3f0 	.word	0x0800e3f0
 800c79c:	0800e11d 	.word	0x0800e11d
 800c7a0:	0800e154 	.word	0x0800e154
 800c7a4:	0800e28d 	.word	0x0800e28d
 800c7a8:	0800e328 	.word	0x0800e328
 800c7ac:	0800e300 	.word	0x0800e300
 800c7b0:	7ff00000 	.word	0x7ff00000
 800c7b4:	7ca00000 	.word	0x7ca00000
 800c7b8:	7fefffff 	.word	0x7fefffff
 800c7bc:	f014 0310 	ands.w	r3, r4, #16
 800c7c0:	bf18      	it	ne
 800c7c2:	236a      	movne	r3, #106	@ 0x6a
 800c7c4:	4ea9      	ldr	r6, [pc, #676]	@ (800ca6c <_strtod_l+0x854>)
 800c7c6:	9308      	str	r3, [sp, #32]
 800c7c8:	4650      	mov	r0, sl
 800c7ca:	4659      	mov	r1, fp
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	07e7      	lsls	r7, r4, #31
 800c7d0:	d504      	bpl.n	800c7dc <_strtod_l+0x5c4>
 800c7d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7d6:	f7f3 ff0f 	bl	80005f8 <__aeabi_dmul>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	1064      	asrs	r4, r4, #1
 800c7de:	f106 0608 	add.w	r6, r6, #8
 800c7e2:	d1f4      	bne.n	800c7ce <_strtod_l+0x5b6>
 800c7e4:	b10b      	cbz	r3, 800c7ea <_strtod_l+0x5d2>
 800c7e6:	4682      	mov	sl, r0
 800c7e8:	468b      	mov	fp, r1
 800c7ea:	9b08      	ldr	r3, [sp, #32]
 800c7ec:	b1b3      	cbz	r3, 800c81c <_strtod_l+0x604>
 800c7ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c7f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	4659      	mov	r1, fp
 800c7fa:	dd0f      	ble.n	800c81c <_strtod_l+0x604>
 800c7fc:	2b1f      	cmp	r3, #31
 800c7fe:	dd56      	ble.n	800c8ae <_strtod_l+0x696>
 800c800:	2b34      	cmp	r3, #52	@ 0x34
 800c802:	bfde      	ittt	le
 800c804:	f04f 33ff 	movle.w	r3, #4294967295
 800c808:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c80c:	4093      	lslle	r3, r2
 800c80e:	f04f 0a00 	mov.w	sl, #0
 800c812:	bfcc      	ite	gt
 800c814:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c818:	ea03 0b01 	andle.w	fp, r3, r1
 800c81c:	2200      	movs	r2, #0
 800c81e:	2300      	movs	r3, #0
 800c820:	4650      	mov	r0, sl
 800c822:	4659      	mov	r1, fp
 800c824:	f7f4 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d1a7      	bne.n	800c77c <_strtod_l+0x564>
 800c82c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c832:	9805      	ldr	r0, [sp, #20]
 800c834:	462b      	mov	r3, r5
 800c836:	464a      	mov	r2, r9
 800c838:	f7ff f8ce 	bl	800b9d8 <__s2b>
 800c83c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c83e:	2800      	cmp	r0, #0
 800c840:	f43f af09 	beq.w	800c656 <_strtod_l+0x43e>
 800c844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c846:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c848:	2a00      	cmp	r2, #0
 800c84a:	eba3 0308 	sub.w	r3, r3, r8
 800c84e:	bfa8      	it	ge
 800c850:	2300      	movge	r3, #0
 800c852:	9312      	str	r3, [sp, #72]	@ 0x48
 800c854:	2400      	movs	r4, #0
 800c856:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c85a:	9316      	str	r3, [sp, #88]	@ 0x58
 800c85c:	46a0      	mov	r8, r4
 800c85e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c860:	9805      	ldr	r0, [sp, #20]
 800c862:	6859      	ldr	r1, [r3, #4]
 800c864:	f7ff f810 	bl	800b888 <_Balloc>
 800c868:	4681      	mov	r9, r0
 800c86a:	2800      	cmp	r0, #0
 800c86c:	f43f aef7 	beq.w	800c65e <_strtod_l+0x446>
 800c870:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c872:	691a      	ldr	r2, [r3, #16]
 800c874:	3202      	adds	r2, #2
 800c876:	f103 010c 	add.w	r1, r3, #12
 800c87a:	0092      	lsls	r2, r2, #2
 800c87c:	300c      	adds	r0, #12
 800c87e:	f000 fd71 	bl	800d364 <memcpy>
 800c882:	ec4b ab10 	vmov	d0, sl, fp
 800c886:	9805      	ldr	r0, [sp, #20]
 800c888:	aa1c      	add	r2, sp, #112	@ 0x70
 800c88a:	a91b      	add	r1, sp, #108	@ 0x6c
 800c88c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c890:	f7ff fbd6 	bl	800c040 <__d2b>
 800c894:	901a      	str	r0, [sp, #104]	@ 0x68
 800c896:	2800      	cmp	r0, #0
 800c898:	f43f aee1 	beq.w	800c65e <_strtod_l+0x446>
 800c89c:	9805      	ldr	r0, [sp, #20]
 800c89e:	2101      	movs	r1, #1
 800c8a0:	f7ff f930 	bl	800bb04 <__i2b>
 800c8a4:	4680      	mov	r8, r0
 800c8a6:	b948      	cbnz	r0, 800c8bc <_strtod_l+0x6a4>
 800c8a8:	f04f 0800 	mov.w	r8, #0
 800c8ac:	e6d7      	b.n	800c65e <_strtod_l+0x446>
 800c8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c8b6:	ea03 0a0a 	and.w	sl, r3, sl
 800c8ba:	e7af      	b.n	800c81c <_strtod_l+0x604>
 800c8bc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c8be:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c8c0:	2d00      	cmp	r5, #0
 800c8c2:	bfab      	itete	ge
 800c8c4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c8c6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c8c8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c8ca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c8cc:	bfac      	ite	ge
 800c8ce:	18ef      	addge	r7, r5, r3
 800c8d0:	1b5e      	sublt	r6, r3, r5
 800c8d2:	9b08      	ldr	r3, [sp, #32]
 800c8d4:	1aed      	subs	r5, r5, r3
 800c8d6:	4415      	add	r5, r2
 800c8d8:	4b65      	ldr	r3, [pc, #404]	@ (800ca70 <_strtod_l+0x858>)
 800c8da:	3d01      	subs	r5, #1
 800c8dc:	429d      	cmp	r5, r3
 800c8de:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c8e2:	da50      	bge.n	800c986 <_strtod_l+0x76e>
 800c8e4:	1b5b      	subs	r3, r3, r5
 800c8e6:	2b1f      	cmp	r3, #31
 800c8e8:	eba2 0203 	sub.w	r2, r2, r3
 800c8ec:	f04f 0101 	mov.w	r1, #1
 800c8f0:	dc3d      	bgt.n	800c96e <_strtod_l+0x756>
 800c8f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c8f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	9310      	str	r3, [sp, #64]	@ 0x40
 800c8fc:	18bd      	adds	r5, r7, r2
 800c8fe:	9b08      	ldr	r3, [sp, #32]
 800c900:	42af      	cmp	r7, r5
 800c902:	4416      	add	r6, r2
 800c904:	441e      	add	r6, r3
 800c906:	463b      	mov	r3, r7
 800c908:	bfa8      	it	ge
 800c90a:	462b      	movge	r3, r5
 800c90c:	42b3      	cmp	r3, r6
 800c90e:	bfa8      	it	ge
 800c910:	4633      	movge	r3, r6
 800c912:	2b00      	cmp	r3, #0
 800c914:	bfc2      	ittt	gt
 800c916:	1aed      	subgt	r5, r5, r3
 800c918:	1af6      	subgt	r6, r6, r3
 800c91a:	1aff      	subgt	r7, r7, r3
 800c91c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c91e:	2b00      	cmp	r3, #0
 800c920:	dd16      	ble.n	800c950 <_strtod_l+0x738>
 800c922:	4641      	mov	r1, r8
 800c924:	9805      	ldr	r0, [sp, #20]
 800c926:	461a      	mov	r2, r3
 800c928:	f7ff f9a4 	bl	800bc74 <__pow5mult>
 800c92c:	4680      	mov	r8, r0
 800c92e:	2800      	cmp	r0, #0
 800c930:	d0ba      	beq.n	800c8a8 <_strtod_l+0x690>
 800c932:	4601      	mov	r1, r0
 800c934:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c936:	9805      	ldr	r0, [sp, #20]
 800c938:	f7ff f8fa 	bl	800bb30 <__multiply>
 800c93c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c93e:	2800      	cmp	r0, #0
 800c940:	f43f ae8d 	beq.w	800c65e <_strtod_l+0x446>
 800c944:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c946:	9805      	ldr	r0, [sp, #20]
 800c948:	f7fe ffde 	bl	800b908 <_Bfree>
 800c94c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c94e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c950:	2d00      	cmp	r5, #0
 800c952:	dc1d      	bgt.n	800c990 <_strtod_l+0x778>
 800c954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c956:	2b00      	cmp	r3, #0
 800c958:	dd23      	ble.n	800c9a2 <_strtod_l+0x78a>
 800c95a:	4649      	mov	r1, r9
 800c95c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c95e:	9805      	ldr	r0, [sp, #20]
 800c960:	f7ff f988 	bl	800bc74 <__pow5mult>
 800c964:	4681      	mov	r9, r0
 800c966:	b9e0      	cbnz	r0, 800c9a2 <_strtod_l+0x78a>
 800c968:	f04f 0900 	mov.w	r9, #0
 800c96c:	e677      	b.n	800c65e <_strtod_l+0x446>
 800c96e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c972:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c976:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c97a:	35e2      	adds	r5, #226	@ 0xe2
 800c97c:	fa01 f305 	lsl.w	r3, r1, r5
 800c980:	9310      	str	r3, [sp, #64]	@ 0x40
 800c982:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c984:	e7ba      	b.n	800c8fc <_strtod_l+0x6e4>
 800c986:	2300      	movs	r3, #0
 800c988:	9310      	str	r3, [sp, #64]	@ 0x40
 800c98a:	2301      	movs	r3, #1
 800c98c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c98e:	e7b5      	b.n	800c8fc <_strtod_l+0x6e4>
 800c990:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c992:	9805      	ldr	r0, [sp, #20]
 800c994:	462a      	mov	r2, r5
 800c996:	f7ff f9c7 	bl	800bd28 <__lshift>
 800c99a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d1d9      	bne.n	800c954 <_strtod_l+0x73c>
 800c9a0:	e65d      	b.n	800c65e <_strtod_l+0x446>
 800c9a2:	2e00      	cmp	r6, #0
 800c9a4:	dd07      	ble.n	800c9b6 <_strtod_l+0x79e>
 800c9a6:	4649      	mov	r1, r9
 800c9a8:	9805      	ldr	r0, [sp, #20]
 800c9aa:	4632      	mov	r2, r6
 800c9ac:	f7ff f9bc 	bl	800bd28 <__lshift>
 800c9b0:	4681      	mov	r9, r0
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	d0d8      	beq.n	800c968 <_strtod_l+0x750>
 800c9b6:	2f00      	cmp	r7, #0
 800c9b8:	dd08      	ble.n	800c9cc <_strtod_l+0x7b4>
 800c9ba:	4641      	mov	r1, r8
 800c9bc:	9805      	ldr	r0, [sp, #20]
 800c9be:	463a      	mov	r2, r7
 800c9c0:	f7ff f9b2 	bl	800bd28 <__lshift>
 800c9c4:	4680      	mov	r8, r0
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	f43f ae49 	beq.w	800c65e <_strtod_l+0x446>
 800c9cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9ce:	9805      	ldr	r0, [sp, #20]
 800c9d0:	464a      	mov	r2, r9
 800c9d2:	f7ff fa31 	bl	800be38 <__mdiff>
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	f43f ae40 	beq.w	800c65e <_strtod_l+0x446>
 800c9de:	68c3      	ldr	r3, [r0, #12]
 800c9e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	60c3      	str	r3, [r0, #12]
 800c9e6:	4641      	mov	r1, r8
 800c9e8:	f7ff fa0a 	bl	800be00 <__mcmp>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	da45      	bge.n	800ca7c <_strtod_l+0x864>
 800c9f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9f2:	ea53 030a 	orrs.w	r3, r3, sl
 800c9f6:	d16b      	bne.n	800cad0 <_strtod_l+0x8b8>
 800c9f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d167      	bne.n	800cad0 <_strtod_l+0x8b8>
 800ca00:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca04:	0d1b      	lsrs	r3, r3, #20
 800ca06:	051b      	lsls	r3, r3, #20
 800ca08:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca0c:	d960      	bls.n	800cad0 <_strtod_l+0x8b8>
 800ca0e:	6963      	ldr	r3, [r4, #20]
 800ca10:	b913      	cbnz	r3, 800ca18 <_strtod_l+0x800>
 800ca12:	6923      	ldr	r3, [r4, #16]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	dd5b      	ble.n	800cad0 <_strtod_l+0x8b8>
 800ca18:	4621      	mov	r1, r4
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	9805      	ldr	r0, [sp, #20]
 800ca1e:	f7ff f983 	bl	800bd28 <__lshift>
 800ca22:	4641      	mov	r1, r8
 800ca24:	4604      	mov	r4, r0
 800ca26:	f7ff f9eb 	bl	800be00 <__mcmp>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	dd50      	ble.n	800cad0 <_strtod_l+0x8b8>
 800ca2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca32:	9a08      	ldr	r2, [sp, #32]
 800ca34:	0d1b      	lsrs	r3, r3, #20
 800ca36:	051b      	lsls	r3, r3, #20
 800ca38:	2a00      	cmp	r2, #0
 800ca3a:	d06a      	beq.n	800cb12 <_strtod_l+0x8fa>
 800ca3c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca40:	d867      	bhi.n	800cb12 <_strtod_l+0x8fa>
 800ca42:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ca46:	f67f ae9d 	bls.w	800c784 <_strtod_l+0x56c>
 800ca4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ca74 <_strtod_l+0x85c>)
 800ca4c:	4650      	mov	r0, sl
 800ca4e:	4659      	mov	r1, fp
 800ca50:	2200      	movs	r2, #0
 800ca52:	f7f3 fdd1 	bl	80005f8 <__aeabi_dmul>
 800ca56:	4b08      	ldr	r3, [pc, #32]	@ (800ca78 <_strtod_l+0x860>)
 800ca58:	400b      	ands	r3, r1
 800ca5a:	4682      	mov	sl, r0
 800ca5c:	468b      	mov	fp, r1
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	f47f ae08 	bne.w	800c674 <_strtod_l+0x45c>
 800ca64:	9a05      	ldr	r2, [sp, #20]
 800ca66:	2322      	movs	r3, #34	@ 0x22
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	e603      	b.n	800c674 <_strtod_l+0x45c>
 800ca6c:	0800e418 	.word	0x0800e418
 800ca70:	fffffc02 	.word	0xfffffc02
 800ca74:	39500000 	.word	0x39500000
 800ca78:	7ff00000 	.word	0x7ff00000
 800ca7c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ca80:	d165      	bne.n	800cb4e <_strtod_l+0x936>
 800ca82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca88:	b35a      	cbz	r2, 800cae2 <_strtod_l+0x8ca>
 800ca8a:	4a9f      	ldr	r2, [pc, #636]	@ (800cd08 <_strtod_l+0xaf0>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d12b      	bne.n	800cae8 <_strtod_l+0x8d0>
 800ca90:	9b08      	ldr	r3, [sp, #32]
 800ca92:	4651      	mov	r1, sl
 800ca94:	b303      	cbz	r3, 800cad8 <_strtod_l+0x8c0>
 800ca96:	4b9d      	ldr	r3, [pc, #628]	@ (800cd0c <_strtod_l+0xaf4>)
 800ca98:	465a      	mov	r2, fp
 800ca9a:	4013      	ands	r3, r2
 800ca9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800caa0:	f04f 32ff 	mov.w	r2, #4294967295
 800caa4:	d81b      	bhi.n	800cade <_strtod_l+0x8c6>
 800caa6:	0d1b      	lsrs	r3, r3, #20
 800caa8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800caac:	fa02 f303 	lsl.w	r3, r2, r3
 800cab0:	4299      	cmp	r1, r3
 800cab2:	d119      	bne.n	800cae8 <_strtod_l+0x8d0>
 800cab4:	4b96      	ldr	r3, [pc, #600]	@ (800cd10 <_strtod_l+0xaf8>)
 800cab6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cab8:	429a      	cmp	r2, r3
 800caba:	d102      	bne.n	800cac2 <_strtod_l+0x8aa>
 800cabc:	3101      	adds	r1, #1
 800cabe:	f43f adce 	beq.w	800c65e <_strtod_l+0x446>
 800cac2:	4b92      	ldr	r3, [pc, #584]	@ (800cd0c <_strtod_l+0xaf4>)
 800cac4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cac6:	401a      	ands	r2, r3
 800cac8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cacc:	f04f 0a00 	mov.w	sl, #0
 800cad0:	9b08      	ldr	r3, [sp, #32]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d1b9      	bne.n	800ca4a <_strtod_l+0x832>
 800cad6:	e5cd      	b.n	800c674 <_strtod_l+0x45c>
 800cad8:	f04f 33ff 	mov.w	r3, #4294967295
 800cadc:	e7e8      	b.n	800cab0 <_strtod_l+0x898>
 800cade:	4613      	mov	r3, r2
 800cae0:	e7e6      	b.n	800cab0 <_strtod_l+0x898>
 800cae2:	ea53 030a 	orrs.w	r3, r3, sl
 800cae6:	d0a2      	beq.n	800ca2e <_strtod_l+0x816>
 800cae8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800caea:	b1db      	cbz	r3, 800cb24 <_strtod_l+0x90c>
 800caec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800caee:	4213      	tst	r3, r2
 800caf0:	d0ee      	beq.n	800cad0 <_strtod_l+0x8b8>
 800caf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800caf4:	9a08      	ldr	r2, [sp, #32]
 800caf6:	4650      	mov	r0, sl
 800caf8:	4659      	mov	r1, fp
 800cafa:	b1bb      	cbz	r3, 800cb2c <_strtod_l+0x914>
 800cafc:	f7ff fb6e 	bl	800c1dc <sulp>
 800cb00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb04:	ec53 2b10 	vmov	r2, r3, d0
 800cb08:	f7f3 fbc0 	bl	800028c <__adddf3>
 800cb0c:	4682      	mov	sl, r0
 800cb0e:	468b      	mov	fp, r1
 800cb10:	e7de      	b.n	800cad0 <_strtod_l+0x8b8>
 800cb12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cb16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cb1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cb1e:	f04f 3aff 	mov.w	sl, #4294967295
 800cb22:	e7d5      	b.n	800cad0 <_strtod_l+0x8b8>
 800cb24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cb26:	ea13 0f0a 	tst.w	r3, sl
 800cb2a:	e7e1      	b.n	800caf0 <_strtod_l+0x8d8>
 800cb2c:	f7ff fb56 	bl	800c1dc <sulp>
 800cb30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb34:	ec53 2b10 	vmov	r2, r3, d0
 800cb38:	f7f3 fba6 	bl	8000288 <__aeabi_dsub>
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	2300      	movs	r3, #0
 800cb40:	4682      	mov	sl, r0
 800cb42:	468b      	mov	fp, r1
 800cb44:	f7f3 ffc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d0c1      	beq.n	800cad0 <_strtod_l+0x8b8>
 800cb4c:	e61a      	b.n	800c784 <_strtod_l+0x56c>
 800cb4e:	4641      	mov	r1, r8
 800cb50:	4620      	mov	r0, r4
 800cb52:	f7ff facd 	bl	800c0f0 <__ratio>
 800cb56:	ec57 6b10 	vmov	r6, r7, d0
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cb60:	4630      	mov	r0, r6
 800cb62:	4639      	mov	r1, r7
 800cb64:	f7f3 ffc4 	bl	8000af0 <__aeabi_dcmple>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d06f      	beq.n	800cc4c <_strtod_l+0xa34>
 800cb6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d17a      	bne.n	800cc68 <_strtod_l+0xa50>
 800cb72:	f1ba 0f00 	cmp.w	sl, #0
 800cb76:	d158      	bne.n	800cc2a <_strtod_l+0xa12>
 800cb78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d15a      	bne.n	800cc38 <_strtod_l+0xa20>
 800cb82:	4b64      	ldr	r3, [pc, #400]	@ (800cd14 <_strtod_l+0xafc>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	4630      	mov	r0, r6
 800cb88:	4639      	mov	r1, r7
 800cb8a:	f7f3 ffa7 	bl	8000adc <__aeabi_dcmplt>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d159      	bne.n	800cc46 <_strtod_l+0xa2e>
 800cb92:	4630      	mov	r0, r6
 800cb94:	4639      	mov	r1, r7
 800cb96:	4b60      	ldr	r3, [pc, #384]	@ (800cd18 <_strtod_l+0xb00>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f7f3 fd2d 	bl	80005f8 <__aeabi_dmul>
 800cb9e:	4606      	mov	r6, r0
 800cba0:	460f      	mov	r7, r1
 800cba2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cba6:	9606      	str	r6, [sp, #24]
 800cba8:	9307      	str	r3, [sp, #28]
 800cbaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbae:	4d57      	ldr	r5, [pc, #348]	@ (800cd0c <_strtod_l+0xaf4>)
 800cbb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cbb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbb6:	401d      	ands	r5, r3
 800cbb8:	4b58      	ldr	r3, [pc, #352]	@ (800cd1c <_strtod_l+0xb04>)
 800cbba:	429d      	cmp	r5, r3
 800cbbc:	f040 80b2 	bne.w	800cd24 <_strtod_l+0xb0c>
 800cbc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbc2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cbc6:	ec4b ab10 	vmov	d0, sl, fp
 800cbca:	f7ff f9c9 	bl	800bf60 <__ulp>
 800cbce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbd2:	ec51 0b10 	vmov	r0, r1, d0
 800cbd6:	f7f3 fd0f 	bl	80005f8 <__aeabi_dmul>
 800cbda:	4652      	mov	r2, sl
 800cbdc:	465b      	mov	r3, fp
 800cbde:	f7f3 fb55 	bl	800028c <__adddf3>
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4949      	ldr	r1, [pc, #292]	@ (800cd0c <_strtod_l+0xaf4>)
 800cbe6:	4a4e      	ldr	r2, [pc, #312]	@ (800cd20 <_strtod_l+0xb08>)
 800cbe8:	4019      	ands	r1, r3
 800cbea:	4291      	cmp	r1, r2
 800cbec:	4682      	mov	sl, r0
 800cbee:	d942      	bls.n	800cc76 <_strtod_l+0xa5e>
 800cbf0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cbf2:	4b47      	ldr	r3, [pc, #284]	@ (800cd10 <_strtod_l+0xaf8>)
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d103      	bne.n	800cc00 <_strtod_l+0x9e8>
 800cbf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	f43f ad2f 	beq.w	800c65e <_strtod_l+0x446>
 800cc00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cd10 <_strtod_l+0xaf8>
 800cc04:	f04f 3aff 	mov.w	sl, #4294967295
 800cc08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc0a:	9805      	ldr	r0, [sp, #20]
 800cc0c:	f7fe fe7c 	bl	800b908 <_Bfree>
 800cc10:	9805      	ldr	r0, [sp, #20]
 800cc12:	4649      	mov	r1, r9
 800cc14:	f7fe fe78 	bl	800b908 <_Bfree>
 800cc18:	9805      	ldr	r0, [sp, #20]
 800cc1a:	4641      	mov	r1, r8
 800cc1c:	f7fe fe74 	bl	800b908 <_Bfree>
 800cc20:	9805      	ldr	r0, [sp, #20]
 800cc22:	4621      	mov	r1, r4
 800cc24:	f7fe fe70 	bl	800b908 <_Bfree>
 800cc28:	e619      	b.n	800c85e <_strtod_l+0x646>
 800cc2a:	f1ba 0f01 	cmp.w	sl, #1
 800cc2e:	d103      	bne.n	800cc38 <_strtod_l+0xa20>
 800cc30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f43f ada6 	beq.w	800c784 <_strtod_l+0x56c>
 800cc38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cce8 <_strtod_l+0xad0>
 800cc3c:	4f35      	ldr	r7, [pc, #212]	@ (800cd14 <_strtod_l+0xafc>)
 800cc3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc42:	2600      	movs	r6, #0
 800cc44:	e7b1      	b.n	800cbaa <_strtod_l+0x992>
 800cc46:	4f34      	ldr	r7, [pc, #208]	@ (800cd18 <_strtod_l+0xb00>)
 800cc48:	2600      	movs	r6, #0
 800cc4a:	e7aa      	b.n	800cba2 <_strtod_l+0x98a>
 800cc4c:	4b32      	ldr	r3, [pc, #200]	@ (800cd18 <_strtod_l+0xb00>)
 800cc4e:	4630      	mov	r0, r6
 800cc50:	4639      	mov	r1, r7
 800cc52:	2200      	movs	r2, #0
 800cc54:	f7f3 fcd0 	bl	80005f8 <__aeabi_dmul>
 800cc58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc5a:	4606      	mov	r6, r0
 800cc5c:	460f      	mov	r7, r1
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d09f      	beq.n	800cba2 <_strtod_l+0x98a>
 800cc62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cc66:	e7a0      	b.n	800cbaa <_strtod_l+0x992>
 800cc68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ccf0 <_strtod_l+0xad8>
 800cc6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc70:	ec57 6b17 	vmov	r6, r7, d7
 800cc74:	e799      	b.n	800cbaa <_strtod_l+0x992>
 800cc76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cc7a:	9b08      	ldr	r3, [sp, #32]
 800cc7c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1c1      	bne.n	800cc08 <_strtod_l+0x9f0>
 800cc84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc88:	0d1b      	lsrs	r3, r3, #20
 800cc8a:	051b      	lsls	r3, r3, #20
 800cc8c:	429d      	cmp	r5, r3
 800cc8e:	d1bb      	bne.n	800cc08 <_strtod_l+0x9f0>
 800cc90:	4630      	mov	r0, r6
 800cc92:	4639      	mov	r1, r7
 800cc94:	f7f4 f810 	bl	8000cb8 <__aeabi_d2lz>
 800cc98:	f7f3 fc80 	bl	800059c <__aeabi_l2d>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4630      	mov	r0, r6
 800cca2:	4639      	mov	r1, r7
 800cca4:	f7f3 faf0 	bl	8000288 <__aeabi_dsub>
 800cca8:	460b      	mov	r3, r1
 800ccaa:	4602      	mov	r2, r0
 800ccac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ccb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ccb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccb6:	ea46 060a 	orr.w	r6, r6, sl
 800ccba:	431e      	orrs	r6, r3
 800ccbc:	d06f      	beq.n	800cd9e <_strtod_l+0xb86>
 800ccbe:	a30e      	add	r3, pc, #56	@ (adr r3, 800ccf8 <_strtod_l+0xae0>)
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	f7f3 ff0a 	bl	8000adc <__aeabi_dcmplt>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	f47f acd3 	bne.w	800c674 <_strtod_l+0x45c>
 800ccce:	a30c      	add	r3, pc, #48	@ (adr r3, 800cd00 <_strtod_l+0xae8>)
 800ccd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccd8:	f7f3 ff1e 	bl	8000b18 <__aeabi_dcmpgt>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d093      	beq.n	800cc08 <_strtod_l+0x9f0>
 800cce0:	e4c8      	b.n	800c674 <_strtod_l+0x45c>
 800cce2:	bf00      	nop
 800cce4:	f3af 8000 	nop.w
 800cce8:	00000000 	.word	0x00000000
 800ccec:	bff00000 	.word	0xbff00000
 800ccf0:	00000000 	.word	0x00000000
 800ccf4:	3ff00000 	.word	0x3ff00000
 800ccf8:	94a03595 	.word	0x94a03595
 800ccfc:	3fdfffff 	.word	0x3fdfffff
 800cd00:	35afe535 	.word	0x35afe535
 800cd04:	3fe00000 	.word	0x3fe00000
 800cd08:	000fffff 	.word	0x000fffff
 800cd0c:	7ff00000 	.word	0x7ff00000
 800cd10:	7fefffff 	.word	0x7fefffff
 800cd14:	3ff00000 	.word	0x3ff00000
 800cd18:	3fe00000 	.word	0x3fe00000
 800cd1c:	7fe00000 	.word	0x7fe00000
 800cd20:	7c9fffff 	.word	0x7c9fffff
 800cd24:	9b08      	ldr	r3, [sp, #32]
 800cd26:	b323      	cbz	r3, 800cd72 <_strtod_l+0xb5a>
 800cd28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cd2c:	d821      	bhi.n	800cd72 <_strtod_l+0xb5a>
 800cd2e:	a328      	add	r3, pc, #160	@ (adr r3, 800cdd0 <_strtod_l+0xbb8>)
 800cd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd34:	4630      	mov	r0, r6
 800cd36:	4639      	mov	r1, r7
 800cd38:	f7f3 feda 	bl	8000af0 <__aeabi_dcmple>
 800cd3c:	b1a0      	cbz	r0, 800cd68 <_strtod_l+0xb50>
 800cd3e:	4639      	mov	r1, r7
 800cd40:	4630      	mov	r0, r6
 800cd42:	f7f3 ff31 	bl	8000ba8 <__aeabi_d2uiz>
 800cd46:	2801      	cmp	r0, #1
 800cd48:	bf38      	it	cc
 800cd4a:	2001      	movcc	r0, #1
 800cd4c:	f7f3 fbda 	bl	8000504 <__aeabi_ui2d>
 800cd50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd52:	4606      	mov	r6, r0
 800cd54:	460f      	mov	r7, r1
 800cd56:	b9fb      	cbnz	r3, 800cd98 <_strtod_l+0xb80>
 800cd58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd5c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cd5e:	9315      	str	r3, [sp, #84]	@ 0x54
 800cd60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cd64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cd68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cd6e:	1b5b      	subs	r3, r3, r5
 800cd70:	9311      	str	r3, [sp, #68]	@ 0x44
 800cd72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cd76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cd7a:	f7ff f8f1 	bl	800bf60 <__ulp>
 800cd7e:	4650      	mov	r0, sl
 800cd80:	ec53 2b10 	vmov	r2, r3, d0
 800cd84:	4659      	mov	r1, fp
 800cd86:	f7f3 fc37 	bl	80005f8 <__aeabi_dmul>
 800cd8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cd8e:	f7f3 fa7d 	bl	800028c <__adddf3>
 800cd92:	4682      	mov	sl, r0
 800cd94:	468b      	mov	fp, r1
 800cd96:	e770      	b.n	800cc7a <_strtod_l+0xa62>
 800cd98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cd9c:	e7e0      	b.n	800cd60 <_strtod_l+0xb48>
 800cd9e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cdd8 <_strtod_l+0xbc0>)
 800cda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda4:	f7f3 fe9a 	bl	8000adc <__aeabi_dcmplt>
 800cda8:	e798      	b.n	800ccdc <_strtod_l+0xac4>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	930e      	str	r3, [sp, #56]	@ 0x38
 800cdae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cdb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdb2:	6013      	str	r3, [r2, #0]
 800cdb4:	f7ff ba6d 	b.w	800c292 <_strtod_l+0x7a>
 800cdb8:	2a65      	cmp	r2, #101	@ 0x65
 800cdba:	f43f ab68 	beq.w	800c48e <_strtod_l+0x276>
 800cdbe:	2a45      	cmp	r2, #69	@ 0x45
 800cdc0:	f43f ab65 	beq.w	800c48e <_strtod_l+0x276>
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	f7ff bba0 	b.w	800c50a <_strtod_l+0x2f2>
 800cdca:	bf00      	nop
 800cdcc:	f3af 8000 	nop.w
 800cdd0:	ffc00000 	.word	0xffc00000
 800cdd4:	41dfffff 	.word	0x41dfffff
 800cdd8:	94a03595 	.word	0x94a03595
 800cddc:	3fcfffff 	.word	0x3fcfffff

0800cde0 <_strtod_r>:
 800cde0:	4b01      	ldr	r3, [pc, #4]	@ (800cde8 <_strtod_r+0x8>)
 800cde2:	f7ff ba19 	b.w	800c218 <_strtod_l>
 800cde6:	bf00      	nop
 800cde8:	20000158 	.word	0x20000158

0800cdec <_strtol_l.isra.0>:
 800cdec:	2b24      	cmp	r3, #36	@ 0x24
 800cdee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf2:	4686      	mov	lr, r0
 800cdf4:	4690      	mov	r8, r2
 800cdf6:	d801      	bhi.n	800cdfc <_strtol_l.isra.0+0x10>
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d106      	bne.n	800ce0a <_strtol_l.isra.0+0x1e>
 800cdfc:	f7fd fdb6 	bl	800a96c <__errno>
 800ce00:	2316      	movs	r3, #22
 800ce02:	6003      	str	r3, [r0, #0]
 800ce04:	2000      	movs	r0, #0
 800ce06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce0a:	4834      	ldr	r0, [pc, #208]	@ (800cedc <_strtol_l.isra.0+0xf0>)
 800ce0c:	460d      	mov	r5, r1
 800ce0e:	462a      	mov	r2, r5
 800ce10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce14:	5d06      	ldrb	r6, [r0, r4]
 800ce16:	f016 0608 	ands.w	r6, r6, #8
 800ce1a:	d1f8      	bne.n	800ce0e <_strtol_l.isra.0+0x22>
 800ce1c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ce1e:	d110      	bne.n	800ce42 <_strtol_l.isra.0+0x56>
 800ce20:	782c      	ldrb	r4, [r5, #0]
 800ce22:	2601      	movs	r6, #1
 800ce24:	1c95      	adds	r5, r2, #2
 800ce26:	f033 0210 	bics.w	r2, r3, #16
 800ce2a:	d115      	bne.n	800ce58 <_strtol_l.isra.0+0x6c>
 800ce2c:	2c30      	cmp	r4, #48	@ 0x30
 800ce2e:	d10d      	bne.n	800ce4c <_strtol_l.isra.0+0x60>
 800ce30:	782a      	ldrb	r2, [r5, #0]
 800ce32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ce36:	2a58      	cmp	r2, #88	@ 0x58
 800ce38:	d108      	bne.n	800ce4c <_strtol_l.isra.0+0x60>
 800ce3a:	786c      	ldrb	r4, [r5, #1]
 800ce3c:	3502      	adds	r5, #2
 800ce3e:	2310      	movs	r3, #16
 800ce40:	e00a      	b.n	800ce58 <_strtol_l.isra.0+0x6c>
 800ce42:	2c2b      	cmp	r4, #43	@ 0x2b
 800ce44:	bf04      	itt	eq
 800ce46:	782c      	ldrbeq	r4, [r5, #0]
 800ce48:	1c95      	addeq	r5, r2, #2
 800ce4a:	e7ec      	b.n	800ce26 <_strtol_l.isra.0+0x3a>
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1f6      	bne.n	800ce3e <_strtol_l.isra.0+0x52>
 800ce50:	2c30      	cmp	r4, #48	@ 0x30
 800ce52:	bf14      	ite	ne
 800ce54:	230a      	movne	r3, #10
 800ce56:	2308      	moveq	r3, #8
 800ce58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ce5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ce60:	2200      	movs	r2, #0
 800ce62:	fbbc f9f3 	udiv	r9, ip, r3
 800ce66:	4610      	mov	r0, r2
 800ce68:	fb03 ca19 	mls	sl, r3, r9, ip
 800ce6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ce70:	2f09      	cmp	r7, #9
 800ce72:	d80f      	bhi.n	800ce94 <_strtol_l.isra.0+0xa8>
 800ce74:	463c      	mov	r4, r7
 800ce76:	42a3      	cmp	r3, r4
 800ce78:	dd1b      	ble.n	800ceb2 <_strtol_l.isra.0+0xc6>
 800ce7a:	1c57      	adds	r7, r2, #1
 800ce7c:	d007      	beq.n	800ce8e <_strtol_l.isra.0+0xa2>
 800ce7e:	4581      	cmp	r9, r0
 800ce80:	d314      	bcc.n	800ceac <_strtol_l.isra.0+0xc0>
 800ce82:	d101      	bne.n	800ce88 <_strtol_l.isra.0+0x9c>
 800ce84:	45a2      	cmp	sl, r4
 800ce86:	db11      	blt.n	800ceac <_strtol_l.isra.0+0xc0>
 800ce88:	fb00 4003 	mla	r0, r0, r3, r4
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce92:	e7eb      	b.n	800ce6c <_strtol_l.isra.0+0x80>
 800ce94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ce98:	2f19      	cmp	r7, #25
 800ce9a:	d801      	bhi.n	800cea0 <_strtol_l.isra.0+0xb4>
 800ce9c:	3c37      	subs	r4, #55	@ 0x37
 800ce9e:	e7ea      	b.n	800ce76 <_strtol_l.isra.0+0x8a>
 800cea0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cea4:	2f19      	cmp	r7, #25
 800cea6:	d804      	bhi.n	800ceb2 <_strtol_l.isra.0+0xc6>
 800cea8:	3c57      	subs	r4, #87	@ 0x57
 800ceaa:	e7e4      	b.n	800ce76 <_strtol_l.isra.0+0x8a>
 800ceac:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb0:	e7ed      	b.n	800ce8e <_strtol_l.isra.0+0xa2>
 800ceb2:	1c53      	adds	r3, r2, #1
 800ceb4:	d108      	bne.n	800cec8 <_strtol_l.isra.0+0xdc>
 800ceb6:	2322      	movs	r3, #34	@ 0x22
 800ceb8:	f8ce 3000 	str.w	r3, [lr]
 800cebc:	4660      	mov	r0, ip
 800cebe:	f1b8 0f00 	cmp.w	r8, #0
 800cec2:	d0a0      	beq.n	800ce06 <_strtol_l.isra.0+0x1a>
 800cec4:	1e69      	subs	r1, r5, #1
 800cec6:	e006      	b.n	800ced6 <_strtol_l.isra.0+0xea>
 800cec8:	b106      	cbz	r6, 800cecc <_strtol_l.isra.0+0xe0>
 800ceca:	4240      	negs	r0, r0
 800cecc:	f1b8 0f00 	cmp.w	r8, #0
 800ced0:	d099      	beq.n	800ce06 <_strtol_l.isra.0+0x1a>
 800ced2:	2a00      	cmp	r2, #0
 800ced4:	d1f6      	bne.n	800cec4 <_strtol_l.isra.0+0xd8>
 800ced6:	f8c8 1000 	str.w	r1, [r8]
 800ceda:	e794      	b.n	800ce06 <_strtol_l.isra.0+0x1a>
 800cedc:	0800e441 	.word	0x0800e441

0800cee0 <_strtol_r>:
 800cee0:	f7ff bf84 	b.w	800cdec <_strtol_l.isra.0>

0800cee4 <__ssputs_r>:
 800cee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee8:	688e      	ldr	r6, [r1, #8]
 800ceea:	461f      	mov	r7, r3
 800ceec:	42be      	cmp	r6, r7
 800ceee:	680b      	ldr	r3, [r1, #0]
 800cef0:	4682      	mov	sl, r0
 800cef2:	460c      	mov	r4, r1
 800cef4:	4690      	mov	r8, r2
 800cef6:	d82d      	bhi.n	800cf54 <__ssputs_r+0x70>
 800cef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cefc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf00:	d026      	beq.n	800cf50 <__ssputs_r+0x6c>
 800cf02:	6965      	ldr	r5, [r4, #20]
 800cf04:	6909      	ldr	r1, [r1, #16]
 800cf06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf0a:	eba3 0901 	sub.w	r9, r3, r1
 800cf0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf12:	1c7b      	adds	r3, r7, #1
 800cf14:	444b      	add	r3, r9
 800cf16:	106d      	asrs	r5, r5, #1
 800cf18:	429d      	cmp	r5, r3
 800cf1a:	bf38      	it	cc
 800cf1c:	461d      	movcc	r5, r3
 800cf1e:	0553      	lsls	r3, r2, #21
 800cf20:	d527      	bpl.n	800cf72 <__ssputs_r+0x8e>
 800cf22:	4629      	mov	r1, r5
 800cf24:	f7fe fc24 	bl	800b770 <_malloc_r>
 800cf28:	4606      	mov	r6, r0
 800cf2a:	b360      	cbz	r0, 800cf86 <__ssputs_r+0xa2>
 800cf2c:	6921      	ldr	r1, [r4, #16]
 800cf2e:	464a      	mov	r2, r9
 800cf30:	f000 fa18 	bl	800d364 <memcpy>
 800cf34:	89a3      	ldrh	r3, [r4, #12]
 800cf36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf3e:	81a3      	strh	r3, [r4, #12]
 800cf40:	6126      	str	r6, [r4, #16]
 800cf42:	6165      	str	r5, [r4, #20]
 800cf44:	444e      	add	r6, r9
 800cf46:	eba5 0509 	sub.w	r5, r5, r9
 800cf4a:	6026      	str	r6, [r4, #0]
 800cf4c:	60a5      	str	r5, [r4, #8]
 800cf4e:	463e      	mov	r6, r7
 800cf50:	42be      	cmp	r6, r7
 800cf52:	d900      	bls.n	800cf56 <__ssputs_r+0x72>
 800cf54:	463e      	mov	r6, r7
 800cf56:	6820      	ldr	r0, [r4, #0]
 800cf58:	4632      	mov	r2, r6
 800cf5a:	4641      	mov	r1, r8
 800cf5c:	f000 f9c6 	bl	800d2ec <memmove>
 800cf60:	68a3      	ldr	r3, [r4, #8]
 800cf62:	1b9b      	subs	r3, r3, r6
 800cf64:	60a3      	str	r3, [r4, #8]
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	4433      	add	r3, r6
 800cf6a:	6023      	str	r3, [r4, #0]
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf72:	462a      	mov	r2, r5
 800cf74:	f000 fd89 	bl	800da8a <_realloc_r>
 800cf78:	4606      	mov	r6, r0
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d1e0      	bne.n	800cf40 <__ssputs_r+0x5c>
 800cf7e:	6921      	ldr	r1, [r4, #16]
 800cf80:	4650      	mov	r0, sl
 800cf82:	f7fe fb81 	bl	800b688 <_free_r>
 800cf86:	230c      	movs	r3, #12
 800cf88:	f8ca 3000 	str.w	r3, [sl]
 800cf8c:	89a3      	ldrh	r3, [r4, #12]
 800cf8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf92:	81a3      	strh	r3, [r4, #12]
 800cf94:	f04f 30ff 	mov.w	r0, #4294967295
 800cf98:	e7e9      	b.n	800cf6e <__ssputs_r+0x8a>
	...

0800cf9c <_svfiprintf_r>:
 800cf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa0:	4698      	mov	r8, r3
 800cfa2:	898b      	ldrh	r3, [r1, #12]
 800cfa4:	061b      	lsls	r3, r3, #24
 800cfa6:	b09d      	sub	sp, #116	@ 0x74
 800cfa8:	4607      	mov	r7, r0
 800cfaa:	460d      	mov	r5, r1
 800cfac:	4614      	mov	r4, r2
 800cfae:	d510      	bpl.n	800cfd2 <_svfiprintf_r+0x36>
 800cfb0:	690b      	ldr	r3, [r1, #16]
 800cfb2:	b973      	cbnz	r3, 800cfd2 <_svfiprintf_r+0x36>
 800cfb4:	2140      	movs	r1, #64	@ 0x40
 800cfb6:	f7fe fbdb 	bl	800b770 <_malloc_r>
 800cfba:	6028      	str	r0, [r5, #0]
 800cfbc:	6128      	str	r0, [r5, #16]
 800cfbe:	b930      	cbnz	r0, 800cfce <_svfiprintf_r+0x32>
 800cfc0:	230c      	movs	r3, #12
 800cfc2:	603b      	str	r3, [r7, #0]
 800cfc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc8:	b01d      	add	sp, #116	@ 0x74
 800cfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfce:	2340      	movs	r3, #64	@ 0x40
 800cfd0:	616b      	str	r3, [r5, #20]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfd6:	2320      	movs	r3, #32
 800cfd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfe0:	2330      	movs	r3, #48	@ 0x30
 800cfe2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d180 <_svfiprintf_r+0x1e4>
 800cfe6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfea:	f04f 0901 	mov.w	r9, #1
 800cfee:	4623      	mov	r3, r4
 800cff0:	469a      	mov	sl, r3
 800cff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cff6:	b10a      	cbz	r2, 800cffc <_svfiprintf_r+0x60>
 800cff8:	2a25      	cmp	r2, #37	@ 0x25
 800cffa:	d1f9      	bne.n	800cff0 <_svfiprintf_r+0x54>
 800cffc:	ebba 0b04 	subs.w	fp, sl, r4
 800d000:	d00b      	beq.n	800d01a <_svfiprintf_r+0x7e>
 800d002:	465b      	mov	r3, fp
 800d004:	4622      	mov	r2, r4
 800d006:	4629      	mov	r1, r5
 800d008:	4638      	mov	r0, r7
 800d00a:	f7ff ff6b 	bl	800cee4 <__ssputs_r>
 800d00e:	3001      	adds	r0, #1
 800d010:	f000 80a7 	beq.w	800d162 <_svfiprintf_r+0x1c6>
 800d014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d016:	445a      	add	r2, fp
 800d018:	9209      	str	r2, [sp, #36]	@ 0x24
 800d01a:	f89a 3000 	ldrb.w	r3, [sl]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f000 809f 	beq.w	800d162 <_svfiprintf_r+0x1c6>
 800d024:	2300      	movs	r3, #0
 800d026:	f04f 32ff 	mov.w	r2, #4294967295
 800d02a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d02e:	f10a 0a01 	add.w	sl, sl, #1
 800d032:	9304      	str	r3, [sp, #16]
 800d034:	9307      	str	r3, [sp, #28]
 800d036:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d03a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d03c:	4654      	mov	r4, sl
 800d03e:	2205      	movs	r2, #5
 800d040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d044:	484e      	ldr	r0, [pc, #312]	@ (800d180 <_svfiprintf_r+0x1e4>)
 800d046:	f7f3 f8c3 	bl	80001d0 <memchr>
 800d04a:	9a04      	ldr	r2, [sp, #16]
 800d04c:	b9d8      	cbnz	r0, 800d086 <_svfiprintf_r+0xea>
 800d04e:	06d0      	lsls	r0, r2, #27
 800d050:	bf44      	itt	mi
 800d052:	2320      	movmi	r3, #32
 800d054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d058:	0711      	lsls	r1, r2, #28
 800d05a:	bf44      	itt	mi
 800d05c:	232b      	movmi	r3, #43	@ 0x2b
 800d05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d062:	f89a 3000 	ldrb.w	r3, [sl]
 800d066:	2b2a      	cmp	r3, #42	@ 0x2a
 800d068:	d015      	beq.n	800d096 <_svfiprintf_r+0xfa>
 800d06a:	9a07      	ldr	r2, [sp, #28]
 800d06c:	4654      	mov	r4, sl
 800d06e:	2000      	movs	r0, #0
 800d070:	f04f 0c0a 	mov.w	ip, #10
 800d074:	4621      	mov	r1, r4
 800d076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d07a:	3b30      	subs	r3, #48	@ 0x30
 800d07c:	2b09      	cmp	r3, #9
 800d07e:	d94b      	bls.n	800d118 <_svfiprintf_r+0x17c>
 800d080:	b1b0      	cbz	r0, 800d0b0 <_svfiprintf_r+0x114>
 800d082:	9207      	str	r2, [sp, #28]
 800d084:	e014      	b.n	800d0b0 <_svfiprintf_r+0x114>
 800d086:	eba0 0308 	sub.w	r3, r0, r8
 800d08a:	fa09 f303 	lsl.w	r3, r9, r3
 800d08e:	4313      	orrs	r3, r2
 800d090:	9304      	str	r3, [sp, #16]
 800d092:	46a2      	mov	sl, r4
 800d094:	e7d2      	b.n	800d03c <_svfiprintf_r+0xa0>
 800d096:	9b03      	ldr	r3, [sp, #12]
 800d098:	1d19      	adds	r1, r3, #4
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	9103      	str	r1, [sp, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bfbb      	ittet	lt
 800d0a2:	425b      	neglt	r3, r3
 800d0a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d0a8:	9307      	strge	r3, [sp, #28]
 800d0aa:	9307      	strlt	r3, [sp, #28]
 800d0ac:	bfb8      	it	lt
 800d0ae:	9204      	strlt	r2, [sp, #16]
 800d0b0:	7823      	ldrb	r3, [r4, #0]
 800d0b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0b4:	d10a      	bne.n	800d0cc <_svfiprintf_r+0x130>
 800d0b6:	7863      	ldrb	r3, [r4, #1]
 800d0b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0ba:	d132      	bne.n	800d122 <_svfiprintf_r+0x186>
 800d0bc:	9b03      	ldr	r3, [sp, #12]
 800d0be:	1d1a      	adds	r2, r3, #4
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	9203      	str	r2, [sp, #12]
 800d0c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0c8:	3402      	adds	r4, #2
 800d0ca:	9305      	str	r3, [sp, #20]
 800d0cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d190 <_svfiprintf_r+0x1f4>
 800d0d0:	7821      	ldrb	r1, [r4, #0]
 800d0d2:	2203      	movs	r2, #3
 800d0d4:	4650      	mov	r0, sl
 800d0d6:	f7f3 f87b 	bl	80001d0 <memchr>
 800d0da:	b138      	cbz	r0, 800d0ec <_svfiprintf_r+0x150>
 800d0dc:	9b04      	ldr	r3, [sp, #16]
 800d0de:	eba0 000a 	sub.w	r0, r0, sl
 800d0e2:	2240      	movs	r2, #64	@ 0x40
 800d0e4:	4082      	lsls	r2, r0
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	3401      	adds	r4, #1
 800d0ea:	9304      	str	r3, [sp, #16]
 800d0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f0:	4824      	ldr	r0, [pc, #144]	@ (800d184 <_svfiprintf_r+0x1e8>)
 800d0f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0f6:	2206      	movs	r2, #6
 800d0f8:	f7f3 f86a 	bl	80001d0 <memchr>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d036      	beq.n	800d16e <_svfiprintf_r+0x1d2>
 800d100:	4b21      	ldr	r3, [pc, #132]	@ (800d188 <_svfiprintf_r+0x1ec>)
 800d102:	bb1b      	cbnz	r3, 800d14c <_svfiprintf_r+0x1b0>
 800d104:	9b03      	ldr	r3, [sp, #12]
 800d106:	3307      	adds	r3, #7
 800d108:	f023 0307 	bic.w	r3, r3, #7
 800d10c:	3308      	adds	r3, #8
 800d10e:	9303      	str	r3, [sp, #12]
 800d110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d112:	4433      	add	r3, r6
 800d114:	9309      	str	r3, [sp, #36]	@ 0x24
 800d116:	e76a      	b.n	800cfee <_svfiprintf_r+0x52>
 800d118:	fb0c 3202 	mla	r2, ip, r2, r3
 800d11c:	460c      	mov	r4, r1
 800d11e:	2001      	movs	r0, #1
 800d120:	e7a8      	b.n	800d074 <_svfiprintf_r+0xd8>
 800d122:	2300      	movs	r3, #0
 800d124:	3401      	adds	r4, #1
 800d126:	9305      	str	r3, [sp, #20]
 800d128:	4619      	mov	r1, r3
 800d12a:	f04f 0c0a 	mov.w	ip, #10
 800d12e:	4620      	mov	r0, r4
 800d130:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d134:	3a30      	subs	r2, #48	@ 0x30
 800d136:	2a09      	cmp	r2, #9
 800d138:	d903      	bls.n	800d142 <_svfiprintf_r+0x1a6>
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d0c6      	beq.n	800d0cc <_svfiprintf_r+0x130>
 800d13e:	9105      	str	r1, [sp, #20]
 800d140:	e7c4      	b.n	800d0cc <_svfiprintf_r+0x130>
 800d142:	fb0c 2101 	mla	r1, ip, r1, r2
 800d146:	4604      	mov	r4, r0
 800d148:	2301      	movs	r3, #1
 800d14a:	e7f0      	b.n	800d12e <_svfiprintf_r+0x192>
 800d14c:	ab03      	add	r3, sp, #12
 800d14e:	9300      	str	r3, [sp, #0]
 800d150:	462a      	mov	r2, r5
 800d152:	4b0e      	ldr	r3, [pc, #56]	@ (800d18c <_svfiprintf_r+0x1f0>)
 800d154:	a904      	add	r1, sp, #16
 800d156:	4638      	mov	r0, r7
 800d158:	f7fc fc82 	bl	8009a60 <_printf_float>
 800d15c:	1c42      	adds	r2, r0, #1
 800d15e:	4606      	mov	r6, r0
 800d160:	d1d6      	bne.n	800d110 <_svfiprintf_r+0x174>
 800d162:	89ab      	ldrh	r3, [r5, #12]
 800d164:	065b      	lsls	r3, r3, #25
 800d166:	f53f af2d 	bmi.w	800cfc4 <_svfiprintf_r+0x28>
 800d16a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d16c:	e72c      	b.n	800cfc8 <_svfiprintf_r+0x2c>
 800d16e:	ab03      	add	r3, sp, #12
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	462a      	mov	r2, r5
 800d174:	4b05      	ldr	r3, [pc, #20]	@ (800d18c <_svfiprintf_r+0x1f0>)
 800d176:	a904      	add	r1, sp, #16
 800d178:	4638      	mov	r0, r7
 800d17a:	f7fc ff09 	bl	8009f90 <_printf_i>
 800d17e:	e7ed      	b.n	800d15c <_svfiprintf_r+0x1c0>
 800d180:	0800e239 	.word	0x0800e239
 800d184:	0800e243 	.word	0x0800e243
 800d188:	08009a61 	.word	0x08009a61
 800d18c:	0800cee5 	.word	0x0800cee5
 800d190:	0800e23f 	.word	0x0800e23f

0800d194 <__sflush_r>:
 800d194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d19c:	0716      	lsls	r6, r2, #28
 800d19e:	4605      	mov	r5, r0
 800d1a0:	460c      	mov	r4, r1
 800d1a2:	d454      	bmi.n	800d24e <__sflush_r+0xba>
 800d1a4:	684b      	ldr	r3, [r1, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	dc02      	bgt.n	800d1b0 <__sflush_r+0x1c>
 800d1aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	dd48      	ble.n	800d242 <__sflush_r+0xae>
 800d1b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1b2:	2e00      	cmp	r6, #0
 800d1b4:	d045      	beq.n	800d242 <__sflush_r+0xae>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d1bc:	682f      	ldr	r7, [r5, #0]
 800d1be:	6a21      	ldr	r1, [r4, #32]
 800d1c0:	602b      	str	r3, [r5, #0]
 800d1c2:	d030      	beq.n	800d226 <__sflush_r+0x92>
 800d1c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1c6:	89a3      	ldrh	r3, [r4, #12]
 800d1c8:	0759      	lsls	r1, r3, #29
 800d1ca:	d505      	bpl.n	800d1d8 <__sflush_r+0x44>
 800d1cc:	6863      	ldr	r3, [r4, #4]
 800d1ce:	1ad2      	subs	r2, r2, r3
 800d1d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d1d2:	b10b      	cbz	r3, 800d1d8 <__sflush_r+0x44>
 800d1d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d1d6:	1ad2      	subs	r2, r2, r3
 800d1d8:	2300      	movs	r3, #0
 800d1da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1dc:	6a21      	ldr	r1, [r4, #32]
 800d1de:	4628      	mov	r0, r5
 800d1e0:	47b0      	blx	r6
 800d1e2:	1c43      	adds	r3, r0, #1
 800d1e4:	89a3      	ldrh	r3, [r4, #12]
 800d1e6:	d106      	bne.n	800d1f6 <__sflush_r+0x62>
 800d1e8:	6829      	ldr	r1, [r5, #0]
 800d1ea:	291d      	cmp	r1, #29
 800d1ec:	d82b      	bhi.n	800d246 <__sflush_r+0xb2>
 800d1ee:	4a2a      	ldr	r2, [pc, #168]	@ (800d298 <__sflush_r+0x104>)
 800d1f0:	40ca      	lsrs	r2, r1
 800d1f2:	07d6      	lsls	r6, r2, #31
 800d1f4:	d527      	bpl.n	800d246 <__sflush_r+0xb2>
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	6062      	str	r2, [r4, #4]
 800d1fa:	04d9      	lsls	r1, r3, #19
 800d1fc:	6922      	ldr	r2, [r4, #16]
 800d1fe:	6022      	str	r2, [r4, #0]
 800d200:	d504      	bpl.n	800d20c <__sflush_r+0x78>
 800d202:	1c42      	adds	r2, r0, #1
 800d204:	d101      	bne.n	800d20a <__sflush_r+0x76>
 800d206:	682b      	ldr	r3, [r5, #0]
 800d208:	b903      	cbnz	r3, 800d20c <__sflush_r+0x78>
 800d20a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d20c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d20e:	602f      	str	r7, [r5, #0]
 800d210:	b1b9      	cbz	r1, 800d242 <__sflush_r+0xae>
 800d212:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d216:	4299      	cmp	r1, r3
 800d218:	d002      	beq.n	800d220 <__sflush_r+0x8c>
 800d21a:	4628      	mov	r0, r5
 800d21c:	f7fe fa34 	bl	800b688 <_free_r>
 800d220:	2300      	movs	r3, #0
 800d222:	6363      	str	r3, [r4, #52]	@ 0x34
 800d224:	e00d      	b.n	800d242 <__sflush_r+0xae>
 800d226:	2301      	movs	r3, #1
 800d228:	4628      	mov	r0, r5
 800d22a:	47b0      	blx	r6
 800d22c:	4602      	mov	r2, r0
 800d22e:	1c50      	adds	r0, r2, #1
 800d230:	d1c9      	bne.n	800d1c6 <__sflush_r+0x32>
 800d232:	682b      	ldr	r3, [r5, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d0c6      	beq.n	800d1c6 <__sflush_r+0x32>
 800d238:	2b1d      	cmp	r3, #29
 800d23a:	d001      	beq.n	800d240 <__sflush_r+0xac>
 800d23c:	2b16      	cmp	r3, #22
 800d23e:	d11e      	bne.n	800d27e <__sflush_r+0xea>
 800d240:	602f      	str	r7, [r5, #0]
 800d242:	2000      	movs	r0, #0
 800d244:	e022      	b.n	800d28c <__sflush_r+0xf8>
 800d246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d24a:	b21b      	sxth	r3, r3
 800d24c:	e01b      	b.n	800d286 <__sflush_r+0xf2>
 800d24e:	690f      	ldr	r7, [r1, #16]
 800d250:	2f00      	cmp	r7, #0
 800d252:	d0f6      	beq.n	800d242 <__sflush_r+0xae>
 800d254:	0793      	lsls	r3, r2, #30
 800d256:	680e      	ldr	r6, [r1, #0]
 800d258:	bf08      	it	eq
 800d25a:	694b      	ldreq	r3, [r1, #20]
 800d25c:	600f      	str	r7, [r1, #0]
 800d25e:	bf18      	it	ne
 800d260:	2300      	movne	r3, #0
 800d262:	eba6 0807 	sub.w	r8, r6, r7
 800d266:	608b      	str	r3, [r1, #8]
 800d268:	f1b8 0f00 	cmp.w	r8, #0
 800d26c:	dde9      	ble.n	800d242 <__sflush_r+0xae>
 800d26e:	6a21      	ldr	r1, [r4, #32]
 800d270:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d272:	4643      	mov	r3, r8
 800d274:	463a      	mov	r2, r7
 800d276:	4628      	mov	r0, r5
 800d278:	47b0      	blx	r6
 800d27a:	2800      	cmp	r0, #0
 800d27c:	dc08      	bgt.n	800d290 <__sflush_r+0xfc>
 800d27e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d286:	81a3      	strh	r3, [r4, #12]
 800d288:	f04f 30ff 	mov.w	r0, #4294967295
 800d28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d290:	4407      	add	r7, r0
 800d292:	eba8 0800 	sub.w	r8, r8, r0
 800d296:	e7e7      	b.n	800d268 <__sflush_r+0xd4>
 800d298:	20400001 	.word	0x20400001

0800d29c <_fflush_r>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	690b      	ldr	r3, [r1, #16]
 800d2a0:	4605      	mov	r5, r0
 800d2a2:	460c      	mov	r4, r1
 800d2a4:	b913      	cbnz	r3, 800d2ac <_fflush_r+0x10>
 800d2a6:	2500      	movs	r5, #0
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	bd38      	pop	{r3, r4, r5, pc}
 800d2ac:	b118      	cbz	r0, 800d2b6 <_fflush_r+0x1a>
 800d2ae:	6a03      	ldr	r3, [r0, #32]
 800d2b0:	b90b      	cbnz	r3, 800d2b6 <_fflush_r+0x1a>
 800d2b2:	f7fd fa25 	bl	800a700 <__sinit>
 800d2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d0f3      	beq.n	800d2a6 <_fflush_r+0xa>
 800d2be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d2c0:	07d0      	lsls	r0, r2, #31
 800d2c2:	d404      	bmi.n	800d2ce <_fflush_r+0x32>
 800d2c4:	0599      	lsls	r1, r3, #22
 800d2c6:	d402      	bmi.n	800d2ce <_fflush_r+0x32>
 800d2c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2ca:	f7fd fb7a 	bl	800a9c2 <__retarget_lock_acquire_recursive>
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	4621      	mov	r1, r4
 800d2d2:	f7ff ff5f 	bl	800d194 <__sflush_r>
 800d2d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2d8:	07da      	lsls	r2, r3, #31
 800d2da:	4605      	mov	r5, r0
 800d2dc:	d4e4      	bmi.n	800d2a8 <_fflush_r+0xc>
 800d2de:	89a3      	ldrh	r3, [r4, #12]
 800d2e0:	059b      	lsls	r3, r3, #22
 800d2e2:	d4e1      	bmi.n	800d2a8 <_fflush_r+0xc>
 800d2e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2e6:	f7fd fb6d 	bl	800a9c4 <__retarget_lock_release_recursive>
 800d2ea:	e7dd      	b.n	800d2a8 <_fflush_r+0xc>

0800d2ec <memmove>:
 800d2ec:	4288      	cmp	r0, r1
 800d2ee:	b510      	push	{r4, lr}
 800d2f0:	eb01 0402 	add.w	r4, r1, r2
 800d2f4:	d902      	bls.n	800d2fc <memmove+0x10>
 800d2f6:	4284      	cmp	r4, r0
 800d2f8:	4623      	mov	r3, r4
 800d2fa:	d807      	bhi.n	800d30c <memmove+0x20>
 800d2fc:	1e43      	subs	r3, r0, #1
 800d2fe:	42a1      	cmp	r1, r4
 800d300:	d008      	beq.n	800d314 <memmove+0x28>
 800d302:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d30a:	e7f8      	b.n	800d2fe <memmove+0x12>
 800d30c:	4402      	add	r2, r0
 800d30e:	4601      	mov	r1, r0
 800d310:	428a      	cmp	r2, r1
 800d312:	d100      	bne.n	800d316 <memmove+0x2a>
 800d314:	bd10      	pop	{r4, pc}
 800d316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d31a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d31e:	e7f7      	b.n	800d310 <memmove+0x24>

0800d320 <strncmp>:
 800d320:	b510      	push	{r4, lr}
 800d322:	b16a      	cbz	r2, 800d340 <strncmp+0x20>
 800d324:	3901      	subs	r1, #1
 800d326:	1884      	adds	r4, r0, r2
 800d328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d32c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d330:	429a      	cmp	r2, r3
 800d332:	d103      	bne.n	800d33c <strncmp+0x1c>
 800d334:	42a0      	cmp	r0, r4
 800d336:	d001      	beq.n	800d33c <strncmp+0x1c>
 800d338:	2a00      	cmp	r2, #0
 800d33a:	d1f5      	bne.n	800d328 <strncmp+0x8>
 800d33c:	1ad0      	subs	r0, r2, r3
 800d33e:	bd10      	pop	{r4, pc}
 800d340:	4610      	mov	r0, r2
 800d342:	e7fc      	b.n	800d33e <strncmp+0x1e>

0800d344 <_sbrk_r>:
 800d344:	b538      	push	{r3, r4, r5, lr}
 800d346:	4d06      	ldr	r5, [pc, #24]	@ (800d360 <_sbrk_r+0x1c>)
 800d348:	2300      	movs	r3, #0
 800d34a:	4604      	mov	r4, r0
 800d34c:	4608      	mov	r0, r1
 800d34e:	602b      	str	r3, [r5, #0]
 800d350:	f7f4 faf2 	bl	8001938 <_sbrk>
 800d354:	1c43      	adds	r3, r0, #1
 800d356:	d102      	bne.n	800d35e <_sbrk_r+0x1a>
 800d358:	682b      	ldr	r3, [r5, #0]
 800d35a:	b103      	cbz	r3, 800d35e <_sbrk_r+0x1a>
 800d35c:	6023      	str	r3, [r4, #0]
 800d35e:	bd38      	pop	{r3, r4, r5, pc}
 800d360:	20002148 	.word	0x20002148

0800d364 <memcpy>:
 800d364:	440a      	add	r2, r1
 800d366:	4291      	cmp	r1, r2
 800d368:	f100 33ff 	add.w	r3, r0, #4294967295
 800d36c:	d100      	bne.n	800d370 <memcpy+0xc>
 800d36e:	4770      	bx	lr
 800d370:	b510      	push	{r4, lr}
 800d372:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d37a:	4291      	cmp	r1, r2
 800d37c:	d1f9      	bne.n	800d372 <memcpy+0xe>
 800d37e:	bd10      	pop	{r4, pc}

0800d380 <nan>:
 800d380:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d388 <nan+0x8>
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	00000000 	.word	0x00000000
 800d38c:	7ff80000 	.word	0x7ff80000

0800d390 <__assert_func>:
 800d390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d392:	4614      	mov	r4, r2
 800d394:	461a      	mov	r2, r3
 800d396:	4b09      	ldr	r3, [pc, #36]	@ (800d3bc <__assert_func+0x2c>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4605      	mov	r5, r0
 800d39c:	68d8      	ldr	r0, [r3, #12]
 800d39e:	b14c      	cbz	r4, 800d3b4 <__assert_func+0x24>
 800d3a0:	4b07      	ldr	r3, [pc, #28]	@ (800d3c0 <__assert_func+0x30>)
 800d3a2:	9100      	str	r1, [sp, #0]
 800d3a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3a8:	4906      	ldr	r1, [pc, #24]	@ (800d3c4 <__assert_func+0x34>)
 800d3aa:	462b      	mov	r3, r5
 800d3ac:	f000 fba8 	bl	800db00 <fiprintf>
 800d3b0:	f000 fbb8 	bl	800db24 <abort>
 800d3b4:	4b04      	ldr	r3, [pc, #16]	@ (800d3c8 <__assert_func+0x38>)
 800d3b6:	461c      	mov	r4, r3
 800d3b8:	e7f3      	b.n	800d3a2 <__assert_func+0x12>
 800d3ba:	bf00      	nop
 800d3bc:	20000108 	.word	0x20000108
 800d3c0:	0800e252 	.word	0x0800e252
 800d3c4:	0800e25f 	.word	0x0800e25f
 800d3c8:	0800e28d 	.word	0x0800e28d

0800d3cc <_calloc_r>:
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	fba1 5402 	umull	r5, r4, r1, r2
 800d3d2:	b934      	cbnz	r4, 800d3e2 <_calloc_r+0x16>
 800d3d4:	4629      	mov	r1, r5
 800d3d6:	f7fe f9cb 	bl	800b770 <_malloc_r>
 800d3da:	4606      	mov	r6, r0
 800d3dc:	b928      	cbnz	r0, 800d3ea <_calloc_r+0x1e>
 800d3de:	4630      	mov	r0, r6
 800d3e0:	bd70      	pop	{r4, r5, r6, pc}
 800d3e2:	220c      	movs	r2, #12
 800d3e4:	6002      	str	r2, [r0, #0]
 800d3e6:	2600      	movs	r6, #0
 800d3e8:	e7f9      	b.n	800d3de <_calloc_r+0x12>
 800d3ea:	462a      	mov	r2, r5
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	f7fd fa58 	bl	800a8a2 <memset>
 800d3f2:	e7f4      	b.n	800d3de <_calloc_r+0x12>

0800d3f4 <rshift>:
 800d3f4:	6903      	ldr	r3, [r0, #16]
 800d3f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d3fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d402:	f100 0414 	add.w	r4, r0, #20
 800d406:	dd45      	ble.n	800d494 <rshift+0xa0>
 800d408:	f011 011f 	ands.w	r1, r1, #31
 800d40c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d410:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d414:	d10c      	bne.n	800d430 <rshift+0x3c>
 800d416:	f100 0710 	add.w	r7, r0, #16
 800d41a:	4629      	mov	r1, r5
 800d41c:	42b1      	cmp	r1, r6
 800d41e:	d334      	bcc.n	800d48a <rshift+0x96>
 800d420:	1a9b      	subs	r3, r3, r2
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	1eea      	subs	r2, r5, #3
 800d426:	4296      	cmp	r6, r2
 800d428:	bf38      	it	cc
 800d42a:	2300      	movcc	r3, #0
 800d42c:	4423      	add	r3, r4
 800d42e:	e015      	b.n	800d45c <rshift+0x68>
 800d430:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d434:	f1c1 0820 	rsb	r8, r1, #32
 800d438:	40cf      	lsrs	r7, r1
 800d43a:	f105 0e04 	add.w	lr, r5, #4
 800d43e:	46a1      	mov	r9, r4
 800d440:	4576      	cmp	r6, lr
 800d442:	46f4      	mov	ip, lr
 800d444:	d815      	bhi.n	800d472 <rshift+0x7e>
 800d446:	1a9a      	subs	r2, r3, r2
 800d448:	0092      	lsls	r2, r2, #2
 800d44a:	3a04      	subs	r2, #4
 800d44c:	3501      	adds	r5, #1
 800d44e:	42ae      	cmp	r6, r5
 800d450:	bf38      	it	cc
 800d452:	2200      	movcc	r2, #0
 800d454:	18a3      	adds	r3, r4, r2
 800d456:	50a7      	str	r7, [r4, r2]
 800d458:	b107      	cbz	r7, 800d45c <rshift+0x68>
 800d45a:	3304      	adds	r3, #4
 800d45c:	1b1a      	subs	r2, r3, r4
 800d45e:	42a3      	cmp	r3, r4
 800d460:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d464:	bf08      	it	eq
 800d466:	2300      	moveq	r3, #0
 800d468:	6102      	str	r2, [r0, #16]
 800d46a:	bf08      	it	eq
 800d46c:	6143      	streq	r3, [r0, #20]
 800d46e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d472:	f8dc c000 	ldr.w	ip, [ip]
 800d476:	fa0c fc08 	lsl.w	ip, ip, r8
 800d47a:	ea4c 0707 	orr.w	r7, ip, r7
 800d47e:	f849 7b04 	str.w	r7, [r9], #4
 800d482:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d486:	40cf      	lsrs	r7, r1
 800d488:	e7da      	b.n	800d440 <rshift+0x4c>
 800d48a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d48e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d492:	e7c3      	b.n	800d41c <rshift+0x28>
 800d494:	4623      	mov	r3, r4
 800d496:	e7e1      	b.n	800d45c <rshift+0x68>

0800d498 <__hexdig_fun>:
 800d498:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d49c:	2b09      	cmp	r3, #9
 800d49e:	d802      	bhi.n	800d4a6 <__hexdig_fun+0xe>
 800d4a0:	3820      	subs	r0, #32
 800d4a2:	b2c0      	uxtb	r0, r0
 800d4a4:	4770      	bx	lr
 800d4a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d4aa:	2b05      	cmp	r3, #5
 800d4ac:	d801      	bhi.n	800d4b2 <__hexdig_fun+0x1a>
 800d4ae:	3847      	subs	r0, #71	@ 0x47
 800d4b0:	e7f7      	b.n	800d4a2 <__hexdig_fun+0xa>
 800d4b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d4b6:	2b05      	cmp	r3, #5
 800d4b8:	d801      	bhi.n	800d4be <__hexdig_fun+0x26>
 800d4ba:	3827      	subs	r0, #39	@ 0x27
 800d4bc:	e7f1      	b.n	800d4a2 <__hexdig_fun+0xa>
 800d4be:	2000      	movs	r0, #0
 800d4c0:	4770      	bx	lr
	...

0800d4c4 <__gethex>:
 800d4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c8:	b085      	sub	sp, #20
 800d4ca:	468a      	mov	sl, r1
 800d4cc:	9302      	str	r3, [sp, #8]
 800d4ce:	680b      	ldr	r3, [r1, #0]
 800d4d0:	9001      	str	r0, [sp, #4]
 800d4d2:	4690      	mov	r8, r2
 800d4d4:	1c9c      	adds	r4, r3, #2
 800d4d6:	46a1      	mov	r9, r4
 800d4d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d4dc:	2830      	cmp	r0, #48	@ 0x30
 800d4de:	d0fa      	beq.n	800d4d6 <__gethex+0x12>
 800d4e0:	eba9 0303 	sub.w	r3, r9, r3
 800d4e4:	f1a3 0b02 	sub.w	fp, r3, #2
 800d4e8:	f7ff ffd6 	bl	800d498 <__hexdig_fun>
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	d168      	bne.n	800d5c4 <__gethex+0x100>
 800d4f2:	49a0      	ldr	r1, [pc, #640]	@ (800d774 <__gethex+0x2b0>)
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	4648      	mov	r0, r9
 800d4f8:	f7ff ff12 	bl	800d320 <strncmp>
 800d4fc:	4607      	mov	r7, r0
 800d4fe:	2800      	cmp	r0, #0
 800d500:	d167      	bne.n	800d5d2 <__gethex+0x10e>
 800d502:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d506:	4626      	mov	r6, r4
 800d508:	f7ff ffc6 	bl	800d498 <__hexdig_fun>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d062      	beq.n	800d5d6 <__gethex+0x112>
 800d510:	4623      	mov	r3, r4
 800d512:	7818      	ldrb	r0, [r3, #0]
 800d514:	2830      	cmp	r0, #48	@ 0x30
 800d516:	4699      	mov	r9, r3
 800d518:	f103 0301 	add.w	r3, r3, #1
 800d51c:	d0f9      	beq.n	800d512 <__gethex+0x4e>
 800d51e:	f7ff ffbb 	bl	800d498 <__hexdig_fun>
 800d522:	fab0 f580 	clz	r5, r0
 800d526:	096d      	lsrs	r5, r5, #5
 800d528:	f04f 0b01 	mov.w	fp, #1
 800d52c:	464a      	mov	r2, r9
 800d52e:	4616      	mov	r6, r2
 800d530:	3201      	adds	r2, #1
 800d532:	7830      	ldrb	r0, [r6, #0]
 800d534:	f7ff ffb0 	bl	800d498 <__hexdig_fun>
 800d538:	2800      	cmp	r0, #0
 800d53a:	d1f8      	bne.n	800d52e <__gethex+0x6a>
 800d53c:	498d      	ldr	r1, [pc, #564]	@ (800d774 <__gethex+0x2b0>)
 800d53e:	2201      	movs	r2, #1
 800d540:	4630      	mov	r0, r6
 800d542:	f7ff feed 	bl	800d320 <strncmp>
 800d546:	2800      	cmp	r0, #0
 800d548:	d13f      	bne.n	800d5ca <__gethex+0x106>
 800d54a:	b944      	cbnz	r4, 800d55e <__gethex+0x9a>
 800d54c:	1c74      	adds	r4, r6, #1
 800d54e:	4622      	mov	r2, r4
 800d550:	4616      	mov	r6, r2
 800d552:	3201      	adds	r2, #1
 800d554:	7830      	ldrb	r0, [r6, #0]
 800d556:	f7ff ff9f 	bl	800d498 <__hexdig_fun>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	d1f8      	bne.n	800d550 <__gethex+0x8c>
 800d55e:	1ba4      	subs	r4, r4, r6
 800d560:	00a7      	lsls	r7, r4, #2
 800d562:	7833      	ldrb	r3, [r6, #0]
 800d564:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d568:	2b50      	cmp	r3, #80	@ 0x50
 800d56a:	d13e      	bne.n	800d5ea <__gethex+0x126>
 800d56c:	7873      	ldrb	r3, [r6, #1]
 800d56e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d570:	d033      	beq.n	800d5da <__gethex+0x116>
 800d572:	2b2d      	cmp	r3, #45	@ 0x2d
 800d574:	d034      	beq.n	800d5e0 <__gethex+0x11c>
 800d576:	1c71      	adds	r1, r6, #1
 800d578:	2400      	movs	r4, #0
 800d57a:	7808      	ldrb	r0, [r1, #0]
 800d57c:	f7ff ff8c 	bl	800d498 <__hexdig_fun>
 800d580:	1e43      	subs	r3, r0, #1
 800d582:	b2db      	uxtb	r3, r3
 800d584:	2b18      	cmp	r3, #24
 800d586:	d830      	bhi.n	800d5ea <__gethex+0x126>
 800d588:	f1a0 0210 	sub.w	r2, r0, #16
 800d58c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d590:	f7ff ff82 	bl	800d498 <__hexdig_fun>
 800d594:	f100 3cff 	add.w	ip, r0, #4294967295
 800d598:	fa5f fc8c 	uxtb.w	ip, ip
 800d59c:	f1bc 0f18 	cmp.w	ip, #24
 800d5a0:	f04f 030a 	mov.w	r3, #10
 800d5a4:	d91e      	bls.n	800d5e4 <__gethex+0x120>
 800d5a6:	b104      	cbz	r4, 800d5aa <__gethex+0xe6>
 800d5a8:	4252      	negs	r2, r2
 800d5aa:	4417      	add	r7, r2
 800d5ac:	f8ca 1000 	str.w	r1, [sl]
 800d5b0:	b1ed      	cbz	r5, 800d5ee <__gethex+0x12a>
 800d5b2:	f1bb 0f00 	cmp.w	fp, #0
 800d5b6:	bf0c      	ite	eq
 800d5b8:	2506      	moveq	r5, #6
 800d5ba:	2500      	movne	r5, #0
 800d5bc:	4628      	mov	r0, r5
 800d5be:	b005      	add	sp, #20
 800d5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c4:	2500      	movs	r5, #0
 800d5c6:	462c      	mov	r4, r5
 800d5c8:	e7b0      	b.n	800d52c <__gethex+0x68>
 800d5ca:	2c00      	cmp	r4, #0
 800d5cc:	d1c7      	bne.n	800d55e <__gethex+0x9a>
 800d5ce:	4627      	mov	r7, r4
 800d5d0:	e7c7      	b.n	800d562 <__gethex+0x9e>
 800d5d2:	464e      	mov	r6, r9
 800d5d4:	462f      	mov	r7, r5
 800d5d6:	2501      	movs	r5, #1
 800d5d8:	e7c3      	b.n	800d562 <__gethex+0x9e>
 800d5da:	2400      	movs	r4, #0
 800d5dc:	1cb1      	adds	r1, r6, #2
 800d5de:	e7cc      	b.n	800d57a <__gethex+0xb6>
 800d5e0:	2401      	movs	r4, #1
 800d5e2:	e7fb      	b.n	800d5dc <__gethex+0x118>
 800d5e4:	fb03 0002 	mla	r0, r3, r2, r0
 800d5e8:	e7ce      	b.n	800d588 <__gethex+0xc4>
 800d5ea:	4631      	mov	r1, r6
 800d5ec:	e7de      	b.n	800d5ac <__gethex+0xe8>
 800d5ee:	eba6 0309 	sub.w	r3, r6, r9
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	4629      	mov	r1, r5
 800d5f6:	2b07      	cmp	r3, #7
 800d5f8:	dc0a      	bgt.n	800d610 <__gethex+0x14c>
 800d5fa:	9801      	ldr	r0, [sp, #4]
 800d5fc:	f7fe f944 	bl	800b888 <_Balloc>
 800d600:	4604      	mov	r4, r0
 800d602:	b940      	cbnz	r0, 800d616 <__gethex+0x152>
 800d604:	4b5c      	ldr	r3, [pc, #368]	@ (800d778 <__gethex+0x2b4>)
 800d606:	4602      	mov	r2, r0
 800d608:	21e4      	movs	r1, #228	@ 0xe4
 800d60a:	485c      	ldr	r0, [pc, #368]	@ (800d77c <__gethex+0x2b8>)
 800d60c:	f7ff fec0 	bl	800d390 <__assert_func>
 800d610:	3101      	adds	r1, #1
 800d612:	105b      	asrs	r3, r3, #1
 800d614:	e7ef      	b.n	800d5f6 <__gethex+0x132>
 800d616:	f100 0a14 	add.w	sl, r0, #20
 800d61a:	2300      	movs	r3, #0
 800d61c:	4655      	mov	r5, sl
 800d61e:	469b      	mov	fp, r3
 800d620:	45b1      	cmp	r9, r6
 800d622:	d337      	bcc.n	800d694 <__gethex+0x1d0>
 800d624:	f845 bb04 	str.w	fp, [r5], #4
 800d628:	eba5 050a 	sub.w	r5, r5, sl
 800d62c:	10ad      	asrs	r5, r5, #2
 800d62e:	6125      	str	r5, [r4, #16]
 800d630:	4658      	mov	r0, fp
 800d632:	f7fe fa1b 	bl	800ba6c <__hi0bits>
 800d636:	016d      	lsls	r5, r5, #5
 800d638:	f8d8 6000 	ldr.w	r6, [r8]
 800d63c:	1a2d      	subs	r5, r5, r0
 800d63e:	42b5      	cmp	r5, r6
 800d640:	dd54      	ble.n	800d6ec <__gethex+0x228>
 800d642:	1bad      	subs	r5, r5, r6
 800d644:	4629      	mov	r1, r5
 800d646:	4620      	mov	r0, r4
 800d648:	f7fe fda7 	bl	800c19a <__any_on>
 800d64c:	4681      	mov	r9, r0
 800d64e:	b178      	cbz	r0, 800d670 <__gethex+0x1ac>
 800d650:	1e6b      	subs	r3, r5, #1
 800d652:	1159      	asrs	r1, r3, #5
 800d654:	f003 021f 	and.w	r2, r3, #31
 800d658:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d65c:	f04f 0901 	mov.w	r9, #1
 800d660:	fa09 f202 	lsl.w	r2, r9, r2
 800d664:	420a      	tst	r2, r1
 800d666:	d003      	beq.n	800d670 <__gethex+0x1ac>
 800d668:	454b      	cmp	r3, r9
 800d66a:	dc36      	bgt.n	800d6da <__gethex+0x216>
 800d66c:	f04f 0902 	mov.w	r9, #2
 800d670:	4629      	mov	r1, r5
 800d672:	4620      	mov	r0, r4
 800d674:	f7ff febe 	bl	800d3f4 <rshift>
 800d678:	442f      	add	r7, r5
 800d67a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d67e:	42bb      	cmp	r3, r7
 800d680:	da42      	bge.n	800d708 <__gethex+0x244>
 800d682:	9801      	ldr	r0, [sp, #4]
 800d684:	4621      	mov	r1, r4
 800d686:	f7fe f93f 	bl	800b908 <_Bfree>
 800d68a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d68c:	2300      	movs	r3, #0
 800d68e:	6013      	str	r3, [r2, #0]
 800d690:	25a3      	movs	r5, #163	@ 0xa3
 800d692:	e793      	b.n	800d5bc <__gethex+0xf8>
 800d694:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d698:	2a2e      	cmp	r2, #46	@ 0x2e
 800d69a:	d012      	beq.n	800d6c2 <__gethex+0x1fe>
 800d69c:	2b20      	cmp	r3, #32
 800d69e:	d104      	bne.n	800d6aa <__gethex+0x1e6>
 800d6a0:	f845 bb04 	str.w	fp, [r5], #4
 800d6a4:	f04f 0b00 	mov.w	fp, #0
 800d6a8:	465b      	mov	r3, fp
 800d6aa:	7830      	ldrb	r0, [r6, #0]
 800d6ac:	9303      	str	r3, [sp, #12]
 800d6ae:	f7ff fef3 	bl	800d498 <__hexdig_fun>
 800d6b2:	9b03      	ldr	r3, [sp, #12]
 800d6b4:	f000 000f 	and.w	r0, r0, #15
 800d6b8:	4098      	lsls	r0, r3
 800d6ba:	ea4b 0b00 	orr.w	fp, fp, r0
 800d6be:	3304      	adds	r3, #4
 800d6c0:	e7ae      	b.n	800d620 <__gethex+0x15c>
 800d6c2:	45b1      	cmp	r9, r6
 800d6c4:	d8ea      	bhi.n	800d69c <__gethex+0x1d8>
 800d6c6:	492b      	ldr	r1, [pc, #172]	@ (800d774 <__gethex+0x2b0>)
 800d6c8:	9303      	str	r3, [sp, #12]
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	f7ff fe27 	bl	800d320 <strncmp>
 800d6d2:	9b03      	ldr	r3, [sp, #12]
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	d1e1      	bne.n	800d69c <__gethex+0x1d8>
 800d6d8:	e7a2      	b.n	800d620 <__gethex+0x15c>
 800d6da:	1ea9      	subs	r1, r5, #2
 800d6dc:	4620      	mov	r0, r4
 800d6de:	f7fe fd5c 	bl	800c19a <__any_on>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d0c2      	beq.n	800d66c <__gethex+0x1a8>
 800d6e6:	f04f 0903 	mov.w	r9, #3
 800d6ea:	e7c1      	b.n	800d670 <__gethex+0x1ac>
 800d6ec:	da09      	bge.n	800d702 <__gethex+0x23e>
 800d6ee:	1b75      	subs	r5, r6, r5
 800d6f0:	4621      	mov	r1, r4
 800d6f2:	9801      	ldr	r0, [sp, #4]
 800d6f4:	462a      	mov	r2, r5
 800d6f6:	f7fe fb17 	bl	800bd28 <__lshift>
 800d6fa:	1b7f      	subs	r7, r7, r5
 800d6fc:	4604      	mov	r4, r0
 800d6fe:	f100 0a14 	add.w	sl, r0, #20
 800d702:	f04f 0900 	mov.w	r9, #0
 800d706:	e7b8      	b.n	800d67a <__gethex+0x1b6>
 800d708:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d70c:	42bd      	cmp	r5, r7
 800d70e:	dd6f      	ble.n	800d7f0 <__gethex+0x32c>
 800d710:	1bed      	subs	r5, r5, r7
 800d712:	42ae      	cmp	r6, r5
 800d714:	dc34      	bgt.n	800d780 <__gethex+0x2bc>
 800d716:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d71a:	2b02      	cmp	r3, #2
 800d71c:	d022      	beq.n	800d764 <__gethex+0x2a0>
 800d71e:	2b03      	cmp	r3, #3
 800d720:	d024      	beq.n	800d76c <__gethex+0x2a8>
 800d722:	2b01      	cmp	r3, #1
 800d724:	d115      	bne.n	800d752 <__gethex+0x28e>
 800d726:	42ae      	cmp	r6, r5
 800d728:	d113      	bne.n	800d752 <__gethex+0x28e>
 800d72a:	2e01      	cmp	r6, #1
 800d72c:	d10b      	bne.n	800d746 <__gethex+0x282>
 800d72e:	9a02      	ldr	r2, [sp, #8]
 800d730:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d734:	6013      	str	r3, [r2, #0]
 800d736:	2301      	movs	r3, #1
 800d738:	6123      	str	r3, [r4, #16]
 800d73a:	f8ca 3000 	str.w	r3, [sl]
 800d73e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d740:	2562      	movs	r5, #98	@ 0x62
 800d742:	601c      	str	r4, [r3, #0]
 800d744:	e73a      	b.n	800d5bc <__gethex+0xf8>
 800d746:	1e71      	subs	r1, r6, #1
 800d748:	4620      	mov	r0, r4
 800d74a:	f7fe fd26 	bl	800c19a <__any_on>
 800d74e:	2800      	cmp	r0, #0
 800d750:	d1ed      	bne.n	800d72e <__gethex+0x26a>
 800d752:	9801      	ldr	r0, [sp, #4]
 800d754:	4621      	mov	r1, r4
 800d756:	f7fe f8d7 	bl	800b908 <_Bfree>
 800d75a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d75c:	2300      	movs	r3, #0
 800d75e:	6013      	str	r3, [r2, #0]
 800d760:	2550      	movs	r5, #80	@ 0x50
 800d762:	e72b      	b.n	800d5bc <__gethex+0xf8>
 800d764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d766:	2b00      	cmp	r3, #0
 800d768:	d1f3      	bne.n	800d752 <__gethex+0x28e>
 800d76a:	e7e0      	b.n	800d72e <__gethex+0x26a>
 800d76c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1dd      	bne.n	800d72e <__gethex+0x26a>
 800d772:	e7ee      	b.n	800d752 <__gethex+0x28e>
 800d774:	0800e237 	.word	0x0800e237
 800d778:	0800e1cd 	.word	0x0800e1cd
 800d77c:	0800e28e 	.word	0x0800e28e
 800d780:	1e6f      	subs	r7, r5, #1
 800d782:	f1b9 0f00 	cmp.w	r9, #0
 800d786:	d130      	bne.n	800d7ea <__gethex+0x326>
 800d788:	b127      	cbz	r7, 800d794 <__gethex+0x2d0>
 800d78a:	4639      	mov	r1, r7
 800d78c:	4620      	mov	r0, r4
 800d78e:	f7fe fd04 	bl	800c19a <__any_on>
 800d792:	4681      	mov	r9, r0
 800d794:	117a      	asrs	r2, r7, #5
 800d796:	2301      	movs	r3, #1
 800d798:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d79c:	f007 071f 	and.w	r7, r7, #31
 800d7a0:	40bb      	lsls	r3, r7
 800d7a2:	4213      	tst	r3, r2
 800d7a4:	4629      	mov	r1, r5
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	bf18      	it	ne
 800d7aa:	f049 0902 	orrne.w	r9, r9, #2
 800d7ae:	f7ff fe21 	bl	800d3f4 <rshift>
 800d7b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d7b6:	1b76      	subs	r6, r6, r5
 800d7b8:	2502      	movs	r5, #2
 800d7ba:	f1b9 0f00 	cmp.w	r9, #0
 800d7be:	d047      	beq.n	800d850 <__gethex+0x38c>
 800d7c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d015      	beq.n	800d7f4 <__gethex+0x330>
 800d7c8:	2b03      	cmp	r3, #3
 800d7ca:	d017      	beq.n	800d7fc <__gethex+0x338>
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d109      	bne.n	800d7e4 <__gethex+0x320>
 800d7d0:	f019 0f02 	tst.w	r9, #2
 800d7d4:	d006      	beq.n	800d7e4 <__gethex+0x320>
 800d7d6:	f8da 3000 	ldr.w	r3, [sl]
 800d7da:	ea49 0903 	orr.w	r9, r9, r3
 800d7de:	f019 0f01 	tst.w	r9, #1
 800d7e2:	d10e      	bne.n	800d802 <__gethex+0x33e>
 800d7e4:	f045 0510 	orr.w	r5, r5, #16
 800d7e8:	e032      	b.n	800d850 <__gethex+0x38c>
 800d7ea:	f04f 0901 	mov.w	r9, #1
 800d7ee:	e7d1      	b.n	800d794 <__gethex+0x2d0>
 800d7f0:	2501      	movs	r5, #1
 800d7f2:	e7e2      	b.n	800d7ba <__gethex+0x2f6>
 800d7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7f6:	f1c3 0301 	rsb	r3, r3, #1
 800d7fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d0f0      	beq.n	800d7e4 <__gethex+0x320>
 800d802:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d806:	f104 0314 	add.w	r3, r4, #20
 800d80a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d80e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d812:	f04f 0c00 	mov.w	ip, #0
 800d816:	4618      	mov	r0, r3
 800d818:	f853 2b04 	ldr.w	r2, [r3], #4
 800d81c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d820:	d01b      	beq.n	800d85a <__gethex+0x396>
 800d822:	3201      	adds	r2, #1
 800d824:	6002      	str	r2, [r0, #0]
 800d826:	2d02      	cmp	r5, #2
 800d828:	f104 0314 	add.w	r3, r4, #20
 800d82c:	d13c      	bne.n	800d8a8 <__gethex+0x3e4>
 800d82e:	f8d8 2000 	ldr.w	r2, [r8]
 800d832:	3a01      	subs	r2, #1
 800d834:	42b2      	cmp	r2, r6
 800d836:	d109      	bne.n	800d84c <__gethex+0x388>
 800d838:	1171      	asrs	r1, r6, #5
 800d83a:	2201      	movs	r2, #1
 800d83c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d840:	f006 061f 	and.w	r6, r6, #31
 800d844:	fa02 f606 	lsl.w	r6, r2, r6
 800d848:	421e      	tst	r6, r3
 800d84a:	d13a      	bne.n	800d8c2 <__gethex+0x3fe>
 800d84c:	f045 0520 	orr.w	r5, r5, #32
 800d850:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d852:	601c      	str	r4, [r3, #0]
 800d854:	9b02      	ldr	r3, [sp, #8]
 800d856:	601f      	str	r7, [r3, #0]
 800d858:	e6b0      	b.n	800d5bc <__gethex+0xf8>
 800d85a:	4299      	cmp	r1, r3
 800d85c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d860:	d8d9      	bhi.n	800d816 <__gethex+0x352>
 800d862:	68a3      	ldr	r3, [r4, #8]
 800d864:	459b      	cmp	fp, r3
 800d866:	db17      	blt.n	800d898 <__gethex+0x3d4>
 800d868:	6861      	ldr	r1, [r4, #4]
 800d86a:	9801      	ldr	r0, [sp, #4]
 800d86c:	3101      	adds	r1, #1
 800d86e:	f7fe f80b 	bl	800b888 <_Balloc>
 800d872:	4681      	mov	r9, r0
 800d874:	b918      	cbnz	r0, 800d87e <__gethex+0x3ba>
 800d876:	4b1a      	ldr	r3, [pc, #104]	@ (800d8e0 <__gethex+0x41c>)
 800d878:	4602      	mov	r2, r0
 800d87a:	2184      	movs	r1, #132	@ 0x84
 800d87c:	e6c5      	b.n	800d60a <__gethex+0x146>
 800d87e:	6922      	ldr	r2, [r4, #16]
 800d880:	3202      	adds	r2, #2
 800d882:	f104 010c 	add.w	r1, r4, #12
 800d886:	0092      	lsls	r2, r2, #2
 800d888:	300c      	adds	r0, #12
 800d88a:	f7ff fd6b 	bl	800d364 <memcpy>
 800d88e:	4621      	mov	r1, r4
 800d890:	9801      	ldr	r0, [sp, #4]
 800d892:	f7fe f839 	bl	800b908 <_Bfree>
 800d896:	464c      	mov	r4, r9
 800d898:	6923      	ldr	r3, [r4, #16]
 800d89a:	1c5a      	adds	r2, r3, #1
 800d89c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d8a0:	6122      	str	r2, [r4, #16]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	615a      	str	r2, [r3, #20]
 800d8a6:	e7be      	b.n	800d826 <__gethex+0x362>
 800d8a8:	6922      	ldr	r2, [r4, #16]
 800d8aa:	455a      	cmp	r2, fp
 800d8ac:	dd0b      	ble.n	800d8c6 <__gethex+0x402>
 800d8ae:	2101      	movs	r1, #1
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f7ff fd9f 	bl	800d3f4 <rshift>
 800d8b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8ba:	3701      	adds	r7, #1
 800d8bc:	42bb      	cmp	r3, r7
 800d8be:	f6ff aee0 	blt.w	800d682 <__gethex+0x1be>
 800d8c2:	2501      	movs	r5, #1
 800d8c4:	e7c2      	b.n	800d84c <__gethex+0x388>
 800d8c6:	f016 061f 	ands.w	r6, r6, #31
 800d8ca:	d0fa      	beq.n	800d8c2 <__gethex+0x3fe>
 800d8cc:	4453      	add	r3, sl
 800d8ce:	f1c6 0620 	rsb	r6, r6, #32
 800d8d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d8d6:	f7fe f8c9 	bl	800ba6c <__hi0bits>
 800d8da:	42b0      	cmp	r0, r6
 800d8dc:	dbe7      	blt.n	800d8ae <__gethex+0x3ea>
 800d8de:	e7f0      	b.n	800d8c2 <__gethex+0x3fe>
 800d8e0:	0800e1cd 	.word	0x0800e1cd

0800d8e4 <L_shift>:
 800d8e4:	f1c2 0208 	rsb	r2, r2, #8
 800d8e8:	0092      	lsls	r2, r2, #2
 800d8ea:	b570      	push	{r4, r5, r6, lr}
 800d8ec:	f1c2 0620 	rsb	r6, r2, #32
 800d8f0:	6843      	ldr	r3, [r0, #4]
 800d8f2:	6804      	ldr	r4, [r0, #0]
 800d8f4:	fa03 f506 	lsl.w	r5, r3, r6
 800d8f8:	432c      	orrs	r4, r5
 800d8fa:	40d3      	lsrs	r3, r2
 800d8fc:	6004      	str	r4, [r0, #0]
 800d8fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800d902:	4288      	cmp	r0, r1
 800d904:	d3f4      	bcc.n	800d8f0 <L_shift+0xc>
 800d906:	bd70      	pop	{r4, r5, r6, pc}

0800d908 <__match>:
 800d908:	b530      	push	{r4, r5, lr}
 800d90a:	6803      	ldr	r3, [r0, #0]
 800d90c:	3301      	adds	r3, #1
 800d90e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d912:	b914      	cbnz	r4, 800d91a <__match+0x12>
 800d914:	6003      	str	r3, [r0, #0]
 800d916:	2001      	movs	r0, #1
 800d918:	bd30      	pop	{r4, r5, pc}
 800d91a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d91e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d922:	2d19      	cmp	r5, #25
 800d924:	bf98      	it	ls
 800d926:	3220      	addls	r2, #32
 800d928:	42a2      	cmp	r2, r4
 800d92a:	d0f0      	beq.n	800d90e <__match+0x6>
 800d92c:	2000      	movs	r0, #0
 800d92e:	e7f3      	b.n	800d918 <__match+0x10>

0800d930 <__hexnan>:
 800d930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d934:	680b      	ldr	r3, [r1, #0]
 800d936:	6801      	ldr	r1, [r0, #0]
 800d938:	115e      	asrs	r6, r3, #5
 800d93a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d93e:	f013 031f 	ands.w	r3, r3, #31
 800d942:	b087      	sub	sp, #28
 800d944:	bf18      	it	ne
 800d946:	3604      	addne	r6, #4
 800d948:	2500      	movs	r5, #0
 800d94a:	1f37      	subs	r7, r6, #4
 800d94c:	4682      	mov	sl, r0
 800d94e:	4690      	mov	r8, r2
 800d950:	9301      	str	r3, [sp, #4]
 800d952:	f846 5c04 	str.w	r5, [r6, #-4]
 800d956:	46b9      	mov	r9, r7
 800d958:	463c      	mov	r4, r7
 800d95a:	9502      	str	r5, [sp, #8]
 800d95c:	46ab      	mov	fp, r5
 800d95e:	784a      	ldrb	r2, [r1, #1]
 800d960:	1c4b      	adds	r3, r1, #1
 800d962:	9303      	str	r3, [sp, #12]
 800d964:	b342      	cbz	r2, 800d9b8 <__hexnan+0x88>
 800d966:	4610      	mov	r0, r2
 800d968:	9105      	str	r1, [sp, #20]
 800d96a:	9204      	str	r2, [sp, #16]
 800d96c:	f7ff fd94 	bl	800d498 <__hexdig_fun>
 800d970:	2800      	cmp	r0, #0
 800d972:	d151      	bne.n	800da18 <__hexnan+0xe8>
 800d974:	9a04      	ldr	r2, [sp, #16]
 800d976:	9905      	ldr	r1, [sp, #20]
 800d978:	2a20      	cmp	r2, #32
 800d97a:	d818      	bhi.n	800d9ae <__hexnan+0x7e>
 800d97c:	9b02      	ldr	r3, [sp, #8]
 800d97e:	459b      	cmp	fp, r3
 800d980:	dd13      	ble.n	800d9aa <__hexnan+0x7a>
 800d982:	454c      	cmp	r4, r9
 800d984:	d206      	bcs.n	800d994 <__hexnan+0x64>
 800d986:	2d07      	cmp	r5, #7
 800d988:	dc04      	bgt.n	800d994 <__hexnan+0x64>
 800d98a:	462a      	mov	r2, r5
 800d98c:	4649      	mov	r1, r9
 800d98e:	4620      	mov	r0, r4
 800d990:	f7ff ffa8 	bl	800d8e4 <L_shift>
 800d994:	4544      	cmp	r4, r8
 800d996:	d952      	bls.n	800da3e <__hexnan+0x10e>
 800d998:	2300      	movs	r3, #0
 800d99a:	f1a4 0904 	sub.w	r9, r4, #4
 800d99e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d9a2:	f8cd b008 	str.w	fp, [sp, #8]
 800d9a6:	464c      	mov	r4, r9
 800d9a8:	461d      	mov	r5, r3
 800d9aa:	9903      	ldr	r1, [sp, #12]
 800d9ac:	e7d7      	b.n	800d95e <__hexnan+0x2e>
 800d9ae:	2a29      	cmp	r2, #41	@ 0x29
 800d9b0:	d157      	bne.n	800da62 <__hexnan+0x132>
 800d9b2:	3102      	adds	r1, #2
 800d9b4:	f8ca 1000 	str.w	r1, [sl]
 800d9b8:	f1bb 0f00 	cmp.w	fp, #0
 800d9bc:	d051      	beq.n	800da62 <__hexnan+0x132>
 800d9be:	454c      	cmp	r4, r9
 800d9c0:	d206      	bcs.n	800d9d0 <__hexnan+0xa0>
 800d9c2:	2d07      	cmp	r5, #7
 800d9c4:	dc04      	bgt.n	800d9d0 <__hexnan+0xa0>
 800d9c6:	462a      	mov	r2, r5
 800d9c8:	4649      	mov	r1, r9
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	f7ff ff8a 	bl	800d8e4 <L_shift>
 800d9d0:	4544      	cmp	r4, r8
 800d9d2:	d936      	bls.n	800da42 <__hexnan+0x112>
 800d9d4:	f1a8 0204 	sub.w	r2, r8, #4
 800d9d8:	4623      	mov	r3, r4
 800d9da:	f853 1b04 	ldr.w	r1, [r3], #4
 800d9de:	f842 1f04 	str.w	r1, [r2, #4]!
 800d9e2:	429f      	cmp	r7, r3
 800d9e4:	d2f9      	bcs.n	800d9da <__hexnan+0xaa>
 800d9e6:	1b3b      	subs	r3, r7, r4
 800d9e8:	f023 0303 	bic.w	r3, r3, #3
 800d9ec:	3304      	adds	r3, #4
 800d9ee:	3401      	adds	r4, #1
 800d9f0:	3e03      	subs	r6, #3
 800d9f2:	42b4      	cmp	r4, r6
 800d9f4:	bf88      	it	hi
 800d9f6:	2304      	movhi	r3, #4
 800d9f8:	4443      	add	r3, r8
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f843 2b04 	str.w	r2, [r3], #4
 800da00:	429f      	cmp	r7, r3
 800da02:	d2fb      	bcs.n	800d9fc <__hexnan+0xcc>
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	b91b      	cbnz	r3, 800da10 <__hexnan+0xe0>
 800da08:	4547      	cmp	r7, r8
 800da0a:	d128      	bne.n	800da5e <__hexnan+0x12e>
 800da0c:	2301      	movs	r3, #1
 800da0e:	603b      	str	r3, [r7, #0]
 800da10:	2005      	movs	r0, #5
 800da12:	b007      	add	sp, #28
 800da14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da18:	3501      	adds	r5, #1
 800da1a:	2d08      	cmp	r5, #8
 800da1c:	f10b 0b01 	add.w	fp, fp, #1
 800da20:	dd06      	ble.n	800da30 <__hexnan+0x100>
 800da22:	4544      	cmp	r4, r8
 800da24:	d9c1      	bls.n	800d9aa <__hexnan+0x7a>
 800da26:	2300      	movs	r3, #0
 800da28:	f844 3c04 	str.w	r3, [r4, #-4]
 800da2c:	2501      	movs	r5, #1
 800da2e:	3c04      	subs	r4, #4
 800da30:	6822      	ldr	r2, [r4, #0]
 800da32:	f000 000f 	and.w	r0, r0, #15
 800da36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800da3a:	6020      	str	r0, [r4, #0]
 800da3c:	e7b5      	b.n	800d9aa <__hexnan+0x7a>
 800da3e:	2508      	movs	r5, #8
 800da40:	e7b3      	b.n	800d9aa <__hexnan+0x7a>
 800da42:	9b01      	ldr	r3, [sp, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d0dd      	beq.n	800da04 <__hexnan+0xd4>
 800da48:	f1c3 0320 	rsb	r3, r3, #32
 800da4c:	f04f 32ff 	mov.w	r2, #4294967295
 800da50:	40da      	lsrs	r2, r3
 800da52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800da56:	4013      	ands	r3, r2
 800da58:	f846 3c04 	str.w	r3, [r6, #-4]
 800da5c:	e7d2      	b.n	800da04 <__hexnan+0xd4>
 800da5e:	3f04      	subs	r7, #4
 800da60:	e7d0      	b.n	800da04 <__hexnan+0xd4>
 800da62:	2004      	movs	r0, #4
 800da64:	e7d5      	b.n	800da12 <__hexnan+0xe2>

0800da66 <__ascii_mbtowc>:
 800da66:	b082      	sub	sp, #8
 800da68:	b901      	cbnz	r1, 800da6c <__ascii_mbtowc+0x6>
 800da6a:	a901      	add	r1, sp, #4
 800da6c:	b142      	cbz	r2, 800da80 <__ascii_mbtowc+0x1a>
 800da6e:	b14b      	cbz	r3, 800da84 <__ascii_mbtowc+0x1e>
 800da70:	7813      	ldrb	r3, [r2, #0]
 800da72:	600b      	str	r3, [r1, #0]
 800da74:	7812      	ldrb	r2, [r2, #0]
 800da76:	1e10      	subs	r0, r2, #0
 800da78:	bf18      	it	ne
 800da7a:	2001      	movne	r0, #1
 800da7c:	b002      	add	sp, #8
 800da7e:	4770      	bx	lr
 800da80:	4610      	mov	r0, r2
 800da82:	e7fb      	b.n	800da7c <__ascii_mbtowc+0x16>
 800da84:	f06f 0001 	mvn.w	r0, #1
 800da88:	e7f8      	b.n	800da7c <__ascii_mbtowc+0x16>

0800da8a <_realloc_r>:
 800da8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da8e:	4607      	mov	r7, r0
 800da90:	4614      	mov	r4, r2
 800da92:	460d      	mov	r5, r1
 800da94:	b921      	cbnz	r1, 800daa0 <_realloc_r+0x16>
 800da96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da9a:	4611      	mov	r1, r2
 800da9c:	f7fd be68 	b.w	800b770 <_malloc_r>
 800daa0:	b92a      	cbnz	r2, 800daae <_realloc_r+0x24>
 800daa2:	f7fd fdf1 	bl	800b688 <_free_r>
 800daa6:	4625      	mov	r5, r4
 800daa8:	4628      	mov	r0, r5
 800daaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daae:	f000 f840 	bl	800db32 <_malloc_usable_size_r>
 800dab2:	4284      	cmp	r4, r0
 800dab4:	4606      	mov	r6, r0
 800dab6:	d802      	bhi.n	800dabe <_realloc_r+0x34>
 800dab8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dabc:	d8f4      	bhi.n	800daa8 <_realloc_r+0x1e>
 800dabe:	4621      	mov	r1, r4
 800dac0:	4638      	mov	r0, r7
 800dac2:	f7fd fe55 	bl	800b770 <_malloc_r>
 800dac6:	4680      	mov	r8, r0
 800dac8:	b908      	cbnz	r0, 800dace <_realloc_r+0x44>
 800daca:	4645      	mov	r5, r8
 800dacc:	e7ec      	b.n	800daa8 <_realloc_r+0x1e>
 800dace:	42b4      	cmp	r4, r6
 800dad0:	4622      	mov	r2, r4
 800dad2:	4629      	mov	r1, r5
 800dad4:	bf28      	it	cs
 800dad6:	4632      	movcs	r2, r6
 800dad8:	f7ff fc44 	bl	800d364 <memcpy>
 800dadc:	4629      	mov	r1, r5
 800dade:	4638      	mov	r0, r7
 800dae0:	f7fd fdd2 	bl	800b688 <_free_r>
 800dae4:	e7f1      	b.n	800daca <_realloc_r+0x40>

0800dae6 <__ascii_wctomb>:
 800dae6:	4603      	mov	r3, r0
 800dae8:	4608      	mov	r0, r1
 800daea:	b141      	cbz	r1, 800dafe <__ascii_wctomb+0x18>
 800daec:	2aff      	cmp	r2, #255	@ 0xff
 800daee:	d904      	bls.n	800dafa <__ascii_wctomb+0x14>
 800daf0:	228a      	movs	r2, #138	@ 0x8a
 800daf2:	601a      	str	r2, [r3, #0]
 800daf4:	f04f 30ff 	mov.w	r0, #4294967295
 800daf8:	4770      	bx	lr
 800dafa:	700a      	strb	r2, [r1, #0]
 800dafc:	2001      	movs	r0, #1
 800dafe:	4770      	bx	lr

0800db00 <fiprintf>:
 800db00:	b40e      	push	{r1, r2, r3}
 800db02:	b503      	push	{r0, r1, lr}
 800db04:	4601      	mov	r1, r0
 800db06:	ab03      	add	r3, sp, #12
 800db08:	4805      	ldr	r0, [pc, #20]	@ (800db20 <fiprintf+0x20>)
 800db0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db0e:	6800      	ldr	r0, [r0, #0]
 800db10:	9301      	str	r3, [sp, #4]
 800db12:	f000 f83f 	bl	800db94 <_vfiprintf_r>
 800db16:	b002      	add	sp, #8
 800db18:	f85d eb04 	ldr.w	lr, [sp], #4
 800db1c:	b003      	add	sp, #12
 800db1e:	4770      	bx	lr
 800db20:	20000108 	.word	0x20000108

0800db24 <abort>:
 800db24:	b508      	push	{r3, lr}
 800db26:	2006      	movs	r0, #6
 800db28:	f000 fa08 	bl	800df3c <raise>
 800db2c:	2001      	movs	r0, #1
 800db2e:	f7f3 fe8b 	bl	8001848 <_exit>

0800db32 <_malloc_usable_size_r>:
 800db32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db36:	1f18      	subs	r0, r3, #4
 800db38:	2b00      	cmp	r3, #0
 800db3a:	bfbc      	itt	lt
 800db3c:	580b      	ldrlt	r3, [r1, r0]
 800db3e:	18c0      	addlt	r0, r0, r3
 800db40:	4770      	bx	lr

0800db42 <__sfputc_r>:
 800db42:	6893      	ldr	r3, [r2, #8]
 800db44:	3b01      	subs	r3, #1
 800db46:	2b00      	cmp	r3, #0
 800db48:	b410      	push	{r4}
 800db4a:	6093      	str	r3, [r2, #8]
 800db4c:	da08      	bge.n	800db60 <__sfputc_r+0x1e>
 800db4e:	6994      	ldr	r4, [r2, #24]
 800db50:	42a3      	cmp	r3, r4
 800db52:	db01      	blt.n	800db58 <__sfputc_r+0x16>
 800db54:	290a      	cmp	r1, #10
 800db56:	d103      	bne.n	800db60 <__sfputc_r+0x1e>
 800db58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db5c:	f000 b932 	b.w	800ddc4 <__swbuf_r>
 800db60:	6813      	ldr	r3, [r2, #0]
 800db62:	1c58      	adds	r0, r3, #1
 800db64:	6010      	str	r0, [r2, #0]
 800db66:	7019      	strb	r1, [r3, #0]
 800db68:	4608      	mov	r0, r1
 800db6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <__sfputs_r>:
 800db70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db72:	4606      	mov	r6, r0
 800db74:	460f      	mov	r7, r1
 800db76:	4614      	mov	r4, r2
 800db78:	18d5      	adds	r5, r2, r3
 800db7a:	42ac      	cmp	r4, r5
 800db7c:	d101      	bne.n	800db82 <__sfputs_r+0x12>
 800db7e:	2000      	movs	r0, #0
 800db80:	e007      	b.n	800db92 <__sfputs_r+0x22>
 800db82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db86:	463a      	mov	r2, r7
 800db88:	4630      	mov	r0, r6
 800db8a:	f7ff ffda 	bl	800db42 <__sfputc_r>
 800db8e:	1c43      	adds	r3, r0, #1
 800db90:	d1f3      	bne.n	800db7a <__sfputs_r+0xa>
 800db92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db94 <_vfiprintf_r>:
 800db94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db98:	460d      	mov	r5, r1
 800db9a:	b09d      	sub	sp, #116	@ 0x74
 800db9c:	4614      	mov	r4, r2
 800db9e:	4698      	mov	r8, r3
 800dba0:	4606      	mov	r6, r0
 800dba2:	b118      	cbz	r0, 800dbac <_vfiprintf_r+0x18>
 800dba4:	6a03      	ldr	r3, [r0, #32]
 800dba6:	b90b      	cbnz	r3, 800dbac <_vfiprintf_r+0x18>
 800dba8:	f7fc fdaa 	bl	800a700 <__sinit>
 800dbac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbae:	07d9      	lsls	r1, r3, #31
 800dbb0:	d405      	bmi.n	800dbbe <_vfiprintf_r+0x2a>
 800dbb2:	89ab      	ldrh	r3, [r5, #12]
 800dbb4:	059a      	lsls	r2, r3, #22
 800dbb6:	d402      	bmi.n	800dbbe <_vfiprintf_r+0x2a>
 800dbb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbba:	f7fc ff02 	bl	800a9c2 <__retarget_lock_acquire_recursive>
 800dbbe:	89ab      	ldrh	r3, [r5, #12]
 800dbc0:	071b      	lsls	r3, r3, #28
 800dbc2:	d501      	bpl.n	800dbc8 <_vfiprintf_r+0x34>
 800dbc4:	692b      	ldr	r3, [r5, #16]
 800dbc6:	b99b      	cbnz	r3, 800dbf0 <_vfiprintf_r+0x5c>
 800dbc8:	4629      	mov	r1, r5
 800dbca:	4630      	mov	r0, r6
 800dbcc:	f000 f938 	bl	800de40 <__swsetup_r>
 800dbd0:	b170      	cbz	r0, 800dbf0 <_vfiprintf_r+0x5c>
 800dbd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbd4:	07dc      	lsls	r4, r3, #31
 800dbd6:	d504      	bpl.n	800dbe2 <_vfiprintf_r+0x4e>
 800dbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbdc:	b01d      	add	sp, #116	@ 0x74
 800dbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe2:	89ab      	ldrh	r3, [r5, #12]
 800dbe4:	0598      	lsls	r0, r3, #22
 800dbe6:	d4f7      	bmi.n	800dbd8 <_vfiprintf_r+0x44>
 800dbe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbea:	f7fc feeb 	bl	800a9c4 <__retarget_lock_release_recursive>
 800dbee:	e7f3      	b.n	800dbd8 <_vfiprintf_r+0x44>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbf4:	2320      	movs	r3, #32
 800dbf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dbfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbfe:	2330      	movs	r3, #48	@ 0x30
 800dc00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ddb0 <_vfiprintf_r+0x21c>
 800dc04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc08:	f04f 0901 	mov.w	r9, #1
 800dc0c:	4623      	mov	r3, r4
 800dc0e:	469a      	mov	sl, r3
 800dc10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc14:	b10a      	cbz	r2, 800dc1a <_vfiprintf_r+0x86>
 800dc16:	2a25      	cmp	r2, #37	@ 0x25
 800dc18:	d1f9      	bne.n	800dc0e <_vfiprintf_r+0x7a>
 800dc1a:	ebba 0b04 	subs.w	fp, sl, r4
 800dc1e:	d00b      	beq.n	800dc38 <_vfiprintf_r+0xa4>
 800dc20:	465b      	mov	r3, fp
 800dc22:	4622      	mov	r2, r4
 800dc24:	4629      	mov	r1, r5
 800dc26:	4630      	mov	r0, r6
 800dc28:	f7ff ffa2 	bl	800db70 <__sfputs_r>
 800dc2c:	3001      	adds	r0, #1
 800dc2e:	f000 80a7 	beq.w	800dd80 <_vfiprintf_r+0x1ec>
 800dc32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc34:	445a      	add	r2, fp
 800dc36:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc38:	f89a 3000 	ldrb.w	r3, [sl]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	f000 809f 	beq.w	800dd80 <_vfiprintf_r+0x1ec>
 800dc42:	2300      	movs	r3, #0
 800dc44:	f04f 32ff 	mov.w	r2, #4294967295
 800dc48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc4c:	f10a 0a01 	add.w	sl, sl, #1
 800dc50:	9304      	str	r3, [sp, #16]
 800dc52:	9307      	str	r3, [sp, #28]
 800dc54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc58:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc5a:	4654      	mov	r4, sl
 800dc5c:	2205      	movs	r2, #5
 800dc5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc62:	4853      	ldr	r0, [pc, #332]	@ (800ddb0 <_vfiprintf_r+0x21c>)
 800dc64:	f7f2 fab4 	bl	80001d0 <memchr>
 800dc68:	9a04      	ldr	r2, [sp, #16]
 800dc6a:	b9d8      	cbnz	r0, 800dca4 <_vfiprintf_r+0x110>
 800dc6c:	06d1      	lsls	r1, r2, #27
 800dc6e:	bf44      	itt	mi
 800dc70:	2320      	movmi	r3, #32
 800dc72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc76:	0713      	lsls	r3, r2, #28
 800dc78:	bf44      	itt	mi
 800dc7a:	232b      	movmi	r3, #43	@ 0x2b
 800dc7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc80:	f89a 3000 	ldrb.w	r3, [sl]
 800dc84:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc86:	d015      	beq.n	800dcb4 <_vfiprintf_r+0x120>
 800dc88:	9a07      	ldr	r2, [sp, #28]
 800dc8a:	4654      	mov	r4, sl
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	f04f 0c0a 	mov.w	ip, #10
 800dc92:	4621      	mov	r1, r4
 800dc94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc98:	3b30      	subs	r3, #48	@ 0x30
 800dc9a:	2b09      	cmp	r3, #9
 800dc9c:	d94b      	bls.n	800dd36 <_vfiprintf_r+0x1a2>
 800dc9e:	b1b0      	cbz	r0, 800dcce <_vfiprintf_r+0x13a>
 800dca0:	9207      	str	r2, [sp, #28]
 800dca2:	e014      	b.n	800dcce <_vfiprintf_r+0x13a>
 800dca4:	eba0 0308 	sub.w	r3, r0, r8
 800dca8:	fa09 f303 	lsl.w	r3, r9, r3
 800dcac:	4313      	orrs	r3, r2
 800dcae:	9304      	str	r3, [sp, #16]
 800dcb0:	46a2      	mov	sl, r4
 800dcb2:	e7d2      	b.n	800dc5a <_vfiprintf_r+0xc6>
 800dcb4:	9b03      	ldr	r3, [sp, #12]
 800dcb6:	1d19      	adds	r1, r3, #4
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	9103      	str	r1, [sp, #12]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	bfbb      	ittet	lt
 800dcc0:	425b      	neglt	r3, r3
 800dcc2:	f042 0202 	orrlt.w	r2, r2, #2
 800dcc6:	9307      	strge	r3, [sp, #28]
 800dcc8:	9307      	strlt	r3, [sp, #28]
 800dcca:	bfb8      	it	lt
 800dccc:	9204      	strlt	r2, [sp, #16]
 800dcce:	7823      	ldrb	r3, [r4, #0]
 800dcd0:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcd2:	d10a      	bne.n	800dcea <_vfiprintf_r+0x156>
 800dcd4:	7863      	ldrb	r3, [r4, #1]
 800dcd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcd8:	d132      	bne.n	800dd40 <_vfiprintf_r+0x1ac>
 800dcda:	9b03      	ldr	r3, [sp, #12]
 800dcdc:	1d1a      	adds	r2, r3, #4
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	9203      	str	r2, [sp, #12]
 800dce2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dce6:	3402      	adds	r4, #2
 800dce8:	9305      	str	r3, [sp, #20]
 800dcea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ddc0 <_vfiprintf_r+0x22c>
 800dcee:	7821      	ldrb	r1, [r4, #0]
 800dcf0:	2203      	movs	r2, #3
 800dcf2:	4650      	mov	r0, sl
 800dcf4:	f7f2 fa6c 	bl	80001d0 <memchr>
 800dcf8:	b138      	cbz	r0, 800dd0a <_vfiprintf_r+0x176>
 800dcfa:	9b04      	ldr	r3, [sp, #16]
 800dcfc:	eba0 000a 	sub.w	r0, r0, sl
 800dd00:	2240      	movs	r2, #64	@ 0x40
 800dd02:	4082      	lsls	r2, r0
 800dd04:	4313      	orrs	r3, r2
 800dd06:	3401      	adds	r4, #1
 800dd08:	9304      	str	r3, [sp, #16]
 800dd0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd0e:	4829      	ldr	r0, [pc, #164]	@ (800ddb4 <_vfiprintf_r+0x220>)
 800dd10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd14:	2206      	movs	r2, #6
 800dd16:	f7f2 fa5b 	bl	80001d0 <memchr>
 800dd1a:	2800      	cmp	r0, #0
 800dd1c:	d03f      	beq.n	800dd9e <_vfiprintf_r+0x20a>
 800dd1e:	4b26      	ldr	r3, [pc, #152]	@ (800ddb8 <_vfiprintf_r+0x224>)
 800dd20:	bb1b      	cbnz	r3, 800dd6a <_vfiprintf_r+0x1d6>
 800dd22:	9b03      	ldr	r3, [sp, #12]
 800dd24:	3307      	adds	r3, #7
 800dd26:	f023 0307 	bic.w	r3, r3, #7
 800dd2a:	3308      	adds	r3, #8
 800dd2c:	9303      	str	r3, [sp, #12]
 800dd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd30:	443b      	add	r3, r7
 800dd32:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd34:	e76a      	b.n	800dc0c <_vfiprintf_r+0x78>
 800dd36:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd3a:	460c      	mov	r4, r1
 800dd3c:	2001      	movs	r0, #1
 800dd3e:	e7a8      	b.n	800dc92 <_vfiprintf_r+0xfe>
 800dd40:	2300      	movs	r3, #0
 800dd42:	3401      	adds	r4, #1
 800dd44:	9305      	str	r3, [sp, #20]
 800dd46:	4619      	mov	r1, r3
 800dd48:	f04f 0c0a 	mov.w	ip, #10
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd52:	3a30      	subs	r2, #48	@ 0x30
 800dd54:	2a09      	cmp	r2, #9
 800dd56:	d903      	bls.n	800dd60 <_vfiprintf_r+0x1cc>
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d0c6      	beq.n	800dcea <_vfiprintf_r+0x156>
 800dd5c:	9105      	str	r1, [sp, #20]
 800dd5e:	e7c4      	b.n	800dcea <_vfiprintf_r+0x156>
 800dd60:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd64:	4604      	mov	r4, r0
 800dd66:	2301      	movs	r3, #1
 800dd68:	e7f0      	b.n	800dd4c <_vfiprintf_r+0x1b8>
 800dd6a:	ab03      	add	r3, sp, #12
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	462a      	mov	r2, r5
 800dd70:	4b12      	ldr	r3, [pc, #72]	@ (800ddbc <_vfiprintf_r+0x228>)
 800dd72:	a904      	add	r1, sp, #16
 800dd74:	4630      	mov	r0, r6
 800dd76:	f7fb fe73 	bl	8009a60 <_printf_float>
 800dd7a:	4607      	mov	r7, r0
 800dd7c:	1c78      	adds	r0, r7, #1
 800dd7e:	d1d6      	bne.n	800dd2e <_vfiprintf_r+0x19a>
 800dd80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd82:	07d9      	lsls	r1, r3, #31
 800dd84:	d405      	bmi.n	800dd92 <_vfiprintf_r+0x1fe>
 800dd86:	89ab      	ldrh	r3, [r5, #12]
 800dd88:	059a      	lsls	r2, r3, #22
 800dd8a:	d402      	bmi.n	800dd92 <_vfiprintf_r+0x1fe>
 800dd8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd8e:	f7fc fe19 	bl	800a9c4 <__retarget_lock_release_recursive>
 800dd92:	89ab      	ldrh	r3, [r5, #12]
 800dd94:	065b      	lsls	r3, r3, #25
 800dd96:	f53f af1f 	bmi.w	800dbd8 <_vfiprintf_r+0x44>
 800dd9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd9c:	e71e      	b.n	800dbdc <_vfiprintf_r+0x48>
 800dd9e:	ab03      	add	r3, sp, #12
 800dda0:	9300      	str	r3, [sp, #0]
 800dda2:	462a      	mov	r2, r5
 800dda4:	4b05      	ldr	r3, [pc, #20]	@ (800ddbc <_vfiprintf_r+0x228>)
 800dda6:	a904      	add	r1, sp, #16
 800dda8:	4630      	mov	r0, r6
 800ddaa:	f7fc f8f1 	bl	8009f90 <_printf_i>
 800ddae:	e7e4      	b.n	800dd7a <_vfiprintf_r+0x1e6>
 800ddb0:	0800e239 	.word	0x0800e239
 800ddb4:	0800e243 	.word	0x0800e243
 800ddb8:	08009a61 	.word	0x08009a61
 800ddbc:	0800db71 	.word	0x0800db71
 800ddc0:	0800e23f 	.word	0x0800e23f

0800ddc4 <__swbuf_r>:
 800ddc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc6:	460e      	mov	r6, r1
 800ddc8:	4614      	mov	r4, r2
 800ddca:	4605      	mov	r5, r0
 800ddcc:	b118      	cbz	r0, 800ddd6 <__swbuf_r+0x12>
 800ddce:	6a03      	ldr	r3, [r0, #32]
 800ddd0:	b90b      	cbnz	r3, 800ddd6 <__swbuf_r+0x12>
 800ddd2:	f7fc fc95 	bl	800a700 <__sinit>
 800ddd6:	69a3      	ldr	r3, [r4, #24]
 800ddd8:	60a3      	str	r3, [r4, #8]
 800ddda:	89a3      	ldrh	r3, [r4, #12]
 800dddc:	071a      	lsls	r2, r3, #28
 800ddde:	d501      	bpl.n	800dde4 <__swbuf_r+0x20>
 800dde0:	6923      	ldr	r3, [r4, #16]
 800dde2:	b943      	cbnz	r3, 800ddf6 <__swbuf_r+0x32>
 800dde4:	4621      	mov	r1, r4
 800dde6:	4628      	mov	r0, r5
 800dde8:	f000 f82a 	bl	800de40 <__swsetup_r>
 800ddec:	b118      	cbz	r0, 800ddf6 <__swbuf_r+0x32>
 800ddee:	f04f 37ff 	mov.w	r7, #4294967295
 800ddf2:	4638      	mov	r0, r7
 800ddf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddf6:	6823      	ldr	r3, [r4, #0]
 800ddf8:	6922      	ldr	r2, [r4, #16]
 800ddfa:	1a98      	subs	r0, r3, r2
 800ddfc:	6963      	ldr	r3, [r4, #20]
 800ddfe:	b2f6      	uxtb	r6, r6
 800de00:	4283      	cmp	r3, r0
 800de02:	4637      	mov	r7, r6
 800de04:	dc05      	bgt.n	800de12 <__swbuf_r+0x4e>
 800de06:	4621      	mov	r1, r4
 800de08:	4628      	mov	r0, r5
 800de0a:	f7ff fa47 	bl	800d29c <_fflush_r>
 800de0e:	2800      	cmp	r0, #0
 800de10:	d1ed      	bne.n	800ddee <__swbuf_r+0x2a>
 800de12:	68a3      	ldr	r3, [r4, #8]
 800de14:	3b01      	subs	r3, #1
 800de16:	60a3      	str	r3, [r4, #8]
 800de18:	6823      	ldr	r3, [r4, #0]
 800de1a:	1c5a      	adds	r2, r3, #1
 800de1c:	6022      	str	r2, [r4, #0]
 800de1e:	701e      	strb	r6, [r3, #0]
 800de20:	6962      	ldr	r2, [r4, #20]
 800de22:	1c43      	adds	r3, r0, #1
 800de24:	429a      	cmp	r2, r3
 800de26:	d004      	beq.n	800de32 <__swbuf_r+0x6e>
 800de28:	89a3      	ldrh	r3, [r4, #12]
 800de2a:	07db      	lsls	r3, r3, #31
 800de2c:	d5e1      	bpl.n	800ddf2 <__swbuf_r+0x2e>
 800de2e:	2e0a      	cmp	r6, #10
 800de30:	d1df      	bne.n	800ddf2 <__swbuf_r+0x2e>
 800de32:	4621      	mov	r1, r4
 800de34:	4628      	mov	r0, r5
 800de36:	f7ff fa31 	bl	800d29c <_fflush_r>
 800de3a:	2800      	cmp	r0, #0
 800de3c:	d0d9      	beq.n	800ddf2 <__swbuf_r+0x2e>
 800de3e:	e7d6      	b.n	800ddee <__swbuf_r+0x2a>

0800de40 <__swsetup_r>:
 800de40:	b538      	push	{r3, r4, r5, lr}
 800de42:	4b29      	ldr	r3, [pc, #164]	@ (800dee8 <__swsetup_r+0xa8>)
 800de44:	4605      	mov	r5, r0
 800de46:	6818      	ldr	r0, [r3, #0]
 800de48:	460c      	mov	r4, r1
 800de4a:	b118      	cbz	r0, 800de54 <__swsetup_r+0x14>
 800de4c:	6a03      	ldr	r3, [r0, #32]
 800de4e:	b90b      	cbnz	r3, 800de54 <__swsetup_r+0x14>
 800de50:	f7fc fc56 	bl	800a700 <__sinit>
 800de54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de58:	0719      	lsls	r1, r3, #28
 800de5a:	d422      	bmi.n	800dea2 <__swsetup_r+0x62>
 800de5c:	06da      	lsls	r2, r3, #27
 800de5e:	d407      	bmi.n	800de70 <__swsetup_r+0x30>
 800de60:	2209      	movs	r2, #9
 800de62:	602a      	str	r2, [r5, #0]
 800de64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de68:	81a3      	strh	r3, [r4, #12]
 800de6a:	f04f 30ff 	mov.w	r0, #4294967295
 800de6e:	e033      	b.n	800ded8 <__swsetup_r+0x98>
 800de70:	0758      	lsls	r0, r3, #29
 800de72:	d512      	bpl.n	800de9a <__swsetup_r+0x5a>
 800de74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de76:	b141      	cbz	r1, 800de8a <__swsetup_r+0x4a>
 800de78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de7c:	4299      	cmp	r1, r3
 800de7e:	d002      	beq.n	800de86 <__swsetup_r+0x46>
 800de80:	4628      	mov	r0, r5
 800de82:	f7fd fc01 	bl	800b688 <_free_r>
 800de86:	2300      	movs	r3, #0
 800de88:	6363      	str	r3, [r4, #52]	@ 0x34
 800de8a:	89a3      	ldrh	r3, [r4, #12]
 800de8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800de90:	81a3      	strh	r3, [r4, #12]
 800de92:	2300      	movs	r3, #0
 800de94:	6063      	str	r3, [r4, #4]
 800de96:	6923      	ldr	r3, [r4, #16]
 800de98:	6023      	str	r3, [r4, #0]
 800de9a:	89a3      	ldrh	r3, [r4, #12]
 800de9c:	f043 0308 	orr.w	r3, r3, #8
 800dea0:	81a3      	strh	r3, [r4, #12]
 800dea2:	6923      	ldr	r3, [r4, #16]
 800dea4:	b94b      	cbnz	r3, 800deba <__swsetup_r+0x7a>
 800dea6:	89a3      	ldrh	r3, [r4, #12]
 800dea8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800deac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800deb0:	d003      	beq.n	800deba <__swsetup_r+0x7a>
 800deb2:	4621      	mov	r1, r4
 800deb4:	4628      	mov	r0, r5
 800deb6:	f000 f883 	bl	800dfc0 <__smakebuf_r>
 800deba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800debe:	f013 0201 	ands.w	r2, r3, #1
 800dec2:	d00a      	beq.n	800deda <__swsetup_r+0x9a>
 800dec4:	2200      	movs	r2, #0
 800dec6:	60a2      	str	r2, [r4, #8]
 800dec8:	6962      	ldr	r2, [r4, #20]
 800deca:	4252      	negs	r2, r2
 800decc:	61a2      	str	r2, [r4, #24]
 800dece:	6922      	ldr	r2, [r4, #16]
 800ded0:	b942      	cbnz	r2, 800dee4 <__swsetup_r+0xa4>
 800ded2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ded6:	d1c5      	bne.n	800de64 <__swsetup_r+0x24>
 800ded8:	bd38      	pop	{r3, r4, r5, pc}
 800deda:	0799      	lsls	r1, r3, #30
 800dedc:	bf58      	it	pl
 800dede:	6962      	ldrpl	r2, [r4, #20]
 800dee0:	60a2      	str	r2, [r4, #8]
 800dee2:	e7f4      	b.n	800dece <__swsetup_r+0x8e>
 800dee4:	2000      	movs	r0, #0
 800dee6:	e7f7      	b.n	800ded8 <__swsetup_r+0x98>
 800dee8:	20000108 	.word	0x20000108

0800deec <_raise_r>:
 800deec:	291f      	cmp	r1, #31
 800deee:	b538      	push	{r3, r4, r5, lr}
 800def0:	4605      	mov	r5, r0
 800def2:	460c      	mov	r4, r1
 800def4:	d904      	bls.n	800df00 <_raise_r+0x14>
 800def6:	2316      	movs	r3, #22
 800def8:	6003      	str	r3, [r0, #0]
 800defa:	f04f 30ff 	mov.w	r0, #4294967295
 800defe:	bd38      	pop	{r3, r4, r5, pc}
 800df00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800df02:	b112      	cbz	r2, 800df0a <_raise_r+0x1e>
 800df04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df08:	b94b      	cbnz	r3, 800df1e <_raise_r+0x32>
 800df0a:	4628      	mov	r0, r5
 800df0c:	f000 f830 	bl	800df70 <_getpid_r>
 800df10:	4622      	mov	r2, r4
 800df12:	4601      	mov	r1, r0
 800df14:	4628      	mov	r0, r5
 800df16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df1a:	f000 b817 	b.w	800df4c <_kill_r>
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d00a      	beq.n	800df38 <_raise_r+0x4c>
 800df22:	1c59      	adds	r1, r3, #1
 800df24:	d103      	bne.n	800df2e <_raise_r+0x42>
 800df26:	2316      	movs	r3, #22
 800df28:	6003      	str	r3, [r0, #0]
 800df2a:	2001      	movs	r0, #1
 800df2c:	e7e7      	b.n	800defe <_raise_r+0x12>
 800df2e:	2100      	movs	r1, #0
 800df30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800df34:	4620      	mov	r0, r4
 800df36:	4798      	blx	r3
 800df38:	2000      	movs	r0, #0
 800df3a:	e7e0      	b.n	800defe <_raise_r+0x12>

0800df3c <raise>:
 800df3c:	4b02      	ldr	r3, [pc, #8]	@ (800df48 <raise+0xc>)
 800df3e:	4601      	mov	r1, r0
 800df40:	6818      	ldr	r0, [r3, #0]
 800df42:	f7ff bfd3 	b.w	800deec <_raise_r>
 800df46:	bf00      	nop
 800df48:	20000108 	.word	0x20000108

0800df4c <_kill_r>:
 800df4c:	b538      	push	{r3, r4, r5, lr}
 800df4e:	4d07      	ldr	r5, [pc, #28]	@ (800df6c <_kill_r+0x20>)
 800df50:	2300      	movs	r3, #0
 800df52:	4604      	mov	r4, r0
 800df54:	4608      	mov	r0, r1
 800df56:	4611      	mov	r1, r2
 800df58:	602b      	str	r3, [r5, #0]
 800df5a:	f7f3 fc65 	bl	8001828 <_kill>
 800df5e:	1c43      	adds	r3, r0, #1
 800df60:	d102      	bne.n	800df68 <_kill_r+0x1c>
 800df62:	682b      	ldr	r3, [r5, #0]
 800df64:	b103      	cbz	r3, 800df68 <_kill_r+0x1c>
 800df66:	6023      	str	r3, [r4, #0]
 800df68:	bd38      	pop	{r3, r4, r5, pc}
 800df6a:	bf00      	nop
 800df6c:	20002148 	.word	0x20002148

0800df70 <_getpid_r>:
 800df70:	f7f3 bc52 	b.w	8001818 <_getpid>

0800df74 <__swhatbuf_r>:
 800df74:	b570      	push	{r4, r5, r6, lr}
 800df76:	460c      	mov	r4, r1
 800df78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df7c:	2900      	cmp	r1, #0
 800df7e:	b096      	sub	sp, #88	@ 0x58
 800df80:	4615      	mov	r5, r2
 800df82:	461e      	mov	r6, r3
 800df84:	da0d      	bge.n	800dfa2 <__swhatbuf_r+0x2e>
 800df86:	89a3      	ldrh	r3, [r4, #12]
 800df88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df8c:	f04f 0100 	mov.w	r1, #0
 800df90:	bf14      	ite	ne
 800df92:	2340      	movne	r3, #64	@ 0x40
 800df94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df98:	2000      	movs	r0, #0
 800df9a:	6031      	str	r1, [r6, #0]
 800df9c:	602b      	str	r3, [r5, #0]
 800df9e:	b016      	add	sp, #88	@ 0x58
 800dfa0:	bd70      	pop	{r4, r5, r6, pc}
 800dfa2:	466a      	mov	r2, sp
 800dfa4:	f000 f848 	bl	800e038 <_fstat_r>
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	dbec      	blt.n	800df86 <__swhatbuf_r+0x12>
 800dfac:	9901      	ldr	r1, [sp, #4]
 800dfae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dfb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dfb6:	4259      	negs	r1, r3
 800dfb8:	4159      	adcs	r1, r3
 800dfba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfbe:	e7eb      	b.n	800df98 <__swhatbuf_r+0x24>

0800dfc0 <__smakebuf_r>:
 800dfc0:	898b      	ldrh	r3, [r1, #12]
 800dfc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfc4:	079d      	lsls	r5, r3, #30
 800dfc6:	4606      	mov	r6, r0
 800dfc8:	460c      	mov	r4, r1
 800dfca:	d507      	bpl.n	800dfdc <__smakebuf_r+0x1c>
 800dfcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dfd0:	6023      	str	r3, [r4, #0]
 800dfd2:	6123      	str	r3, [r4, #16]
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	6163      	str	r3, [r4, #20]
 800dfd8:	b003      	add	sp, #12
 800dfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfdc:	ab01      	add	r3, sp, #4
 800dfde:	466a      	mov	r2, sp
 800dfe0:	f7ff ffc8 	bl	800df74 <__swhatbuf_r>
 800dfe4:	9f00      	ldr	r7, [sp, #0]
 800dfe6:	4605      	mov	r5, r0
 800dfe8:	4639      	mov	r1, r7
 800dfea:	4630      	mov	r0, r6
 800dfec:	f7fd fbc0 	bl	800b770 <_malloc_r>
 800dff0:	b948      	cbnz	r0, 800e006 <__smakebuf_r+0x46>
 800dff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dff6:	059a      	lsls	r2, r3, #22
 800dff8:	d4ee      	bmi.n	800dfd8 <__smakebuf_r+0x18>
 800dffa:	f023 0303 	bic.w	r3, r3, #3
 800dffe:	f043 0302 	orr.w	r3, r3, #2
 800e002:	81a3      	strh	r3, [r4, #12]
 800e004:	e7e2      	b.n	800dfcc <__smakebuf_r+0xc>
 800e006:	89a3      	ldrh	r3, [r4, #12]
 800e008:	6020      	str	r0, [r4, #0]
 800e00a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e00e:	81a3      	strh	r3, [r4, #12]
 800e010:	9b01      	ldr	r3, [sp, #4]
 800e012:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e016:	b15b      	cbz	r3, 800e030 <__smakebuf_r+0x70>
 800e018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e01c:	4630      	mov	r0, r6
 800e01e:	f000 f81d 	bl	800e05c <_isatty_r>
 800e022:	b128      	cbz	r0, 800e030 <__smakebuf_r+0x70>
 800e024:	89a3      	ldrh	r3, [r4, #12]
 800e026:	f023 0303 	bic.w	r3, r3, #3
 800e02a:	f043 0301 	orr.w	r3, r3, #1
 800e02e:	81a3      	strh	r3, [r4, #12]
 800e030:	89a3      	ldrh	r3, [r4, #12]
 800e032:	431d      	orrs	r5, r3
 800e034:	81a5      	strh	r5, [r4, #12]
 800e036:	e7cf      	b.n	800dfd8 <__smakebuf_r+0x18>

0800e038 <_fstat_r>:
 800e038:	b538      	push	{r3, r4, r5, lr}
 800e03a:	4d07      	ldr	r5, [pc, #28]	@ (800e058 <_fstat_r+0x20>)
 800e03c:	2300      	movs	r3, #0
 800e03e:	4604      	mov	r4, r0
 800e040:	4608      	mov	r0, r1
 800e042:	4611      	mov	r1, r2
 800e044:	602b      	str	r3, [r5, #0]
 800e046:	f7f3 fc4f 	bl	80018e8 <_fstat>
 800e04a:	1c43      	adds	r3, r0, #1
 800e04c:	d102      	bne.n	800e054 <_fstat_r+0x1c>
 800e04e:	682b      	ldr	r3, [r5, #0]
 800e050:	b103      	cbz	r3, 800e054 <_fstat_r+0x1c>
 800e052:	6023      	str	r3, [r4, #0]
 800e054:	bd38      	pop	{r3, r4, r5, pc}
 800e056:	bf00      	nop
 800e058:	20002148 	.word	0x20002148

0800e05c <_isatty_r>:
 800e05c:	b538      	push	{r3, r4, r5, lr}
 800e05e:	4d06      	ldr	r5, [pc, #24]	@ (800e078 <_isatty_r+0x1c>)
 800e060:	2300      	movs	r3, #0
 800e062:	4604      	mov	r4, r0
 800e064:	4608      	mov	r0, r1
 800e066:	602b      	str	r3, [r5, #0]
 800e068:	f7f3 fc4e 	bl	8001908 <_isatty>
 800e06c:	1c43      	adds	r3, r0, #1
 800e06e:	d102      	bne.n	800e076 <_isatty_r+0x1a>
 800e070:	682b      	ldr	r3, [r5, #0]
 800e072:	b103      	cbz	r3, 800e076 <_isatty_r+0x1a>
 800e074:	6023      	str	r3, [r4, #0]
 800e076:	bd38      	pop	{r3, r4, r5, pc}
 800e078:	20002148 	.word	0x20002148

0800e07c <_init>:
 800e07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e07e:	bf00      	nop
 800e080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e082:	bc08      	pop	{r3}
 800e084:	469e      	mov	lr, r3
 800e086:	4770      	bx	lr

0800e088 <_fini>:
 800e088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e08a:	bf00      	nop
 800e08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e08e:	bc08      	pop	{r3}
 800e090:	469e      	mov	lr, r3
 800e092:	4770      	bx	lr
