
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013134  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005a748  080132c8  080132c8  000142c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806da10  0806da10  0006f2d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0806da10  0806da10  0006ea10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806da18  0806da18  0006f2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806da18  0806da18  0006ea18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0806da1c  0806da1c  0006ea1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0806da20  0006f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0006f2d0  2**0
                  CONTENTS
 10 .bss          0001a454  200002d0  200002d0  0006f2d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001a724  2001a724  0006f2d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0006f2d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000260e6  00000000  00000000  0006f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c42  00000000  00000000  000953e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e80  00000000  00000000  0009b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016da  00000000  00000000  0009cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026165  00000000  00000000  0009e582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024fe7  00000000  00000000  000c46e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3e2e  00000000  00000000  000e96ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  001bd4fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000098a0  00000000  00000000  001bd5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  001c6e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e41  00000000  00000000  001c6ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000098  00000000  00000000  001c7d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080132ac 	.word	0x080132ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	080132ac 	.word	0x080132ac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <SendUSBDebugMessage>:

/**
  * @brief Отправка отладочного сообщения через USB
  * @param message Текст сообщения
  */
void SendUSBDebugMessage(const char *message) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
    if (USB_CONNECTED()) {
 8001048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800104c:	4810      	ldr	r0, [pc, #64]	@ (8001090 <SendUSBDebugMessage+0x50>)
 800104e:	f004 f861 	bl	8005114 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d017      	beq.n	8001088 <SendUSBDebugMessage+0x48>
        snprintf(usb_msg, sizeof(usb_msg), "[%lu] %s\r\n", HAL_GetTick(), message);
 8001058:	f003 f9f4 	bl	8004444 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4613      	mov	r3, r2
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <SendUSBDebugMessage+0x54>)
 8001066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106a:	480b      	ldr	r0, [pc, #44]	@ (8001098 <SendUSBDebugMessage+0x58>)
 800106c:	f00e fe46 	bl	800fcfc <sniprintf>
        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <SendUSBDebugMessage+0x58>)
 8001072:	f7ff f90d 	bl	8000290 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29b      	uxth	r3, r3
 800107a:	4619      	mov	r1, r3
 800107c:	4806      	ldr	r0, [pc, #24]	@ (8001098 <SendUSBDebugMessage+0x58>)
 800107e:	f00c fa1d 	bl	800d4bc <CDC_Transmit_FS>
        HAL_Delay(10); // Задержка для стабильной работы USB
 8001082:	200a      	movs	r0, #10
 8001084:	f003 f9ea 	bl	800445c <HAL_Delay>
    }
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40020000 	.word	0x40020000
 8001094:	080132c8 	.word	0x080132c8
 8001098:	20000438 	.word	0x20000438

0800109c <GenerateStartPulse>:

/**
  * @brief Генерация стартового импульса для ПЛИС
  * @note Импульс длительностью 200 нс на пине PD6
  */
void GenerateStartPulse(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
    // Устанавливаем высокий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2140      	movs	r1, #64	@ 0x40
 80010a6:	480a      	ldr	r0, [pc, #40]	@ (80010d0 <GenerateStartPulse+0x34>)
 80010a8:	f004 f84c 	bl	8005144 <HAL_GPIO_WritePin>

    // Задержка для формирования импульса 200 нс
    for(volatile int i = 0; i < 34; i++);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	e002      	b.n	80010b8 <GenerateStartPulse+0x1c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b21      	cmp	r3, #33	@ 0x21
 80010bc:	ddf9      	ble.n	80010b2 <GenerateStartPulse+0x16>

    // Устанавливаем низкий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2140      	movs	r1, #64	@ 0x40
 80010c2:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <GenerateStartPulse+0x34>)
 80010c4:	f004 f83e 	bl	8005144 <HAL_GPIO_WritePin>

}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <ProcessUSBCommand>:

/**
  * @brief Обработка команд от USB - не использовать!
  * @param cmd Полученная команда
  */
void ProcessUSBCommand(uint8_t cmd) {
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
    switch(cmd) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b31      	cmp	r3, #49	@ 0x31
            break;

        default:
            // Неизвестная команда
          //  SendUSBDebugMessage("Unknown command received");
            break;
 80010e2:	bf00      	nop
    }
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <ParseALSection>:

/**
  * @brief Парсинг AL секции (start_date и period)
  */
void ParseALSection(char* al_str) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    char* token = strtok(al_str, "|");
 80010f8:	4920      	ldr	r1, [pc, #128]	@ (800117c <ParseALSection+0x8c>)
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f00e ff02 	bl	800ff04 <strtok>
 8001100:	6178      	str	r0, [r7, #20]
    while (token != NULL) {
 8001102:	e032      	b.n	800116a <ParseALSection+0x7a>
        char* equals_sign = strchr(token, '=');
 8001104:	213d      	movs	r1, #61	@ 0x3d
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f00e fec9 	bl	800fe9e <strchr>
 800110c:	6138      	str	r0, [r7, #16]
        if (equals_sign != NULL) {
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d025      	beq.n	8001160 <ParseALSection+0x70>
            *equals_sign = '\0';
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
            char* param_name = token;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	60fb      	str	r3, [r7, #12]
            char* param_value = equals_sign + 1;
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	3301      	adds	r3, #1
 8001122:	60bb      	str	r3, [r7, #8]

            if (strcmp(param_name, "start_date") == 0) {
 8001124:	4916      	ldr	r1, [pc, #88]	@ (8001180 <ParseALSection+0x90>)
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f7ff f852 	bl	80001d0 <strcmp>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d108      	bne.n	8001144 <ParseALSection+0x54>
                strncpy(start_date, param_value, sizeof(start_date) - 1);
 8001132:	2213      	movs	r2, #19
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	4813      	ldr	r0, [pc, #76]	@ (8001184 <ParseALSection+0x94>)
 8001138:	f00e fed0 	bl	800fedc <strncpy>
                start_date[sizeof(start_date) - 1] = '\0';
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <ParseALSection+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	74da      	strb	r2, [r3, #19]
 8001142:	e00d      	b.n	8001160 <ParseALSection+0x70>
            } else if (strcmp(param_name, "period") == 0) {
 8001144:	4910      	ldr	r1, [pc, #64]	@ (8001188 <ParseALSection+0x98>)
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f7ff f842 	bl	80001d0 <strcmp>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <ParseALSection+0x70>
                period = atoi(param_value);
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f00c ffdd 	bl	800e112 <atoi>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <ParseALSection+0x9c>)
 800115e:	601a      	str	r2, [r3, #0]
            }
        }
        token = strtok(NULL, "|");
 8001160:	4906      	ldr	r1, [pc, #24]	@ (800117c <ParseALSection+0x8c>)
 8001162:	2000      	movs	r0, #0
 8001164:	f00e fece 	bl	800ff04 <strtok>
 8001168:	6178      	str	r0, [r7, #20]
    while (token != NULL) {
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1c9      	bne.n	8001104 <ParseALSection+0x14>
    }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	080132d4 	.word	0x080132d4
 8001180:	080132d8 	.word	0x080132d8
 8001184:	20000838 	.word	0x20000838
 8001188:	080132e4 	.word	0x080132e4
 800118c:	2000084c 	.word	0x2000084c

08001190 <ParsePRSection>:

/**
  * @brief Парсинг PR секции для конкретного набора параметров
  */
void ParsePRSection(char* pr_str, int pr_index) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
    char* token = strtok(pr_str, "|");
 800119a:	49a3      	ldr	r1, [pc, #652]	@ (8001428 <ParsePRSection+0x298>)
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f00e feb1 	bl	800ff04 <strtok>
 80011a2:	6178      	str	r0, [r7, #20]
    while (token != NULL) {
 80011a4:	e137      	b.n	8001416 <ParsePRSection+0x286>
        char* equals_sign = strchr(token, '=');
 80011a6:	213d      	movs	r1, #61	@ 0x3d
 80011a8:	6978      	ldr	r0, [r7, #20]
 80011aa:	f00e fe78 	bl	800fe9e <strchr>
 80011ae:	6138      	str	r0, [r7, #16]
        if (equals_sign != NULL) {
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 812a 	beq.w	800140c <ParsePRSection+0x27c>
            *equals_sign = '\0';
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
            char* param_name = token;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	60fb      	str	r3, [r7, #12]
            char* param_value = equals_sign + 1;
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	3301      	adds	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]

            // Парсим параметры для текущего набора
            if (strcmp(param_name, "wave_speed") == 0) {
 80011c8:	4998      	ldr	r1, [pc, #608]	@ (800142c <ParsePRSection+0x29c>)
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff f800 	bl	80001d0 <strcmp>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d110      	bne.n	80011f8 <ParsePRSection+0x68>
                params[pr_index].wave_speed = atof(param_value);
 80011d6:	68b8      	ldr	r0, [r7, #8]
 80011d8:	f00c ff98 	bl	800e10c <atof>
 80011dc:	ec53 2b10 	vmov	r2, r3, d0
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fd10 	bl	8000c08 <__aeabi_d2f>
 80011e8:	4602      	mov	r2, r0
 80011ea:	4991      	ldr	r1, [pc, #580]	@ (8001430 <ParsePRSection+0x2a0>)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	019b      	lsls	r3, r3, #6
 80011f0:	440b      	add	r3, r1
 80011f2:	3304      	adds	r3, #4
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e109      	b.n	800140c <ParsePRSection+0x27c>
            } else if (strcmp(param_name, "threshold") == 0) {
 80011f8:	498e      	ldr	r1, [pc, #568]	@ (8001434 <ParsePRSection+0x2a4>)
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f7fe ffe8 	bl	80001d0 <strcmp>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d110      	bne.n	8001228 <ParsePRSection+0x98>
                params[pr_index].threshold = atof(param_value);
 8001206:	68b8      	ldr	r0, [r7, #8]
 8001208:	f00c ff80 	bl	800e10c <atof>
 800120c:	ec53 2b10 	vmov	r2, r3, d0
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fcf8 	bl	8000c08 <__aeabi_d2f>
 8001218:	4602      	mov	r2, r0
 800121a:	4985      	ldr	r1, [pc, #532]	@ (8001430 <ParsePRSection+0x2a0>)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	019b      	lsls	r3, r3, #6
 8001220:	440b      	add	r3, r1
 8001222:	3318      	adds	r3, #24
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e0f1      	b.n	800140c <ParsePRSection+0x27c>
            } else if (strcmp(param_name, "threshold_zero_crossing") == 0) {
 8001228:	4983      	ldr	r1, [pc, #524]	@ (8001438 <ParsePRSection+0x2a8>)
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f7fe ffd0 	bl	80001d0 <strcmp>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d110      	bne.n	8001258 <ParsePRSection+0xc8>
                params[pr_index].threshold_zero_crossing = atof(param_value);
 8001236:	68b8      	ldr	r0, [r7, #8]
 8001238:	f00c ff68 	bl	800e10c <atof>
 800123c:	ec53 2b10 	vmov	r2, r3, d0
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fce0 	bl	8000c08 <__aeabi_d2f>
 8001248:	4602      	mov	r2, r0
 800124a:	4979      	ldr	r1, [pc, #484]	@ (8001430 <ParsePRSection+0x2a0>)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	019b      	lsls	r3, r3, #6
 8001250:	440b      	add	r3, r1
 8001252:	331c      	adds	r3, #28
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	e0d9      	b.n	800140c <ParsePRSection+0x27c>
            } else if (strcmp(param_name, "start_index") == 0) {
 8001258:	4978      	ldr	r1, [pc, #480]	@ (800143c <ParsePRSection+0x2ac>)
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7fe ffb8 	bl	80001d0 <strcmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10a      	bne.n	800127c <ParsePRSection+0xec>
                params[pr_index].start_index = atoi(param_value);
 8001266:	68b8      	ldr	r0, [r7, #8]
 8001268:	f00c ff53 	bl	800e112 <atoi>
 800126c:	4603      	mov	r3, r0
 800126e:	4619      	mov	r1, r3
 8001270:	4a6f      	ldr	r2, [pc, #444]	@ (8001430 <ParsePRSection+0x2a0>)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	4413      	add	r3, r2
 8001278:	6019      	str	r1, [r3, #0]
 800127a:	e0c7      	b.n	800140c <ParsePRSection+0x27c>
            } else if (strcmp(param_name, "probe_length") == 0) {
 800127c:	4970      	ldr	r1, [pc, #448]	@ (8001440 <ParsePRSection+0x2b0>)
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7fe ffa6 	bl	80001d0 <strcmp>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10b      	bne.n	80012a2 <ParsePRSection+0x112>
                params[pr_index].probe_length = atoi(param_value);
 800128a:	68b8      	ldr	r0, [r7, #8]
 800128c:	f00c ff41 	bl	800e112 <atoi>
 8001290:	4603      	mov	r3, r0
 8001292:	4619      	mov	r1, r3
 8001294:	4a66      	ldr	r2, [pc, #408]	@ (8001430 <ParsePRSection+0x2a0>)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	019b      	lsls	r3, r3, #6
 800129a:	4413      	add	r3, r2
 800129c:	3320      	adds	r3, #32
 800129e:	6019      	str	r1, [r3, #0]
 80012a0:	e0b4      	b.n	800140c <ParsePRSection+0x27c>
            } else if (strcmp(param_name, "strobe_left1") == 0) {
 80012a2:	4968      	ldr	r1, [pc, #416]	@ (8001444 <ParsePRSection+0x2b4>)
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f7fe ff93 	bl	80001d0 <strcmp>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10b      	bne.n	80012c8 <ParsePRSection+0x138>
                params[pr_index].first_left_strobe = atoi(param_value);
 80012b0:	68b8      	ldr	r0, [r7, #8]
 80012b2:	f00c ff2e 	bl	800e112 <atoi>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4619      	mov	r1, r3
 80012ba:	4a5d      	ldr	r2, [pc, #372]	@ (8001430 <ParsePRSection+0x2a0>)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	019b      	lsls	r3, r3, #6
 80012c0:	4413      	add	r3, r2
 80012c2:	3308      	adds	r3, #8
 80012c4:	6019      	str	r1, [r3, #0]
 80012c6:	e0a1      	b.n	800140c <ParsePRSection+0x27c>
            } else if (strcmp(param_name, "strobe_right1") == 0) {
 80012c8:	495f      	ldr	r1, [pc, #380]	@ (8001448 <ParsePRSection+0x2b8>)
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f7fe ff80 	bl	80001d0 <strcmp>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10b      	bne.n	80012ee <ParsePRSection+0x15e>
                params[pr_index].first_right_strobe = atoi(param_value);
 80012d6:	68b8      	ldr	r0, [r7, #8]
 80012d8:	f00c ff1b 	bl	800e112 <atoi>
 80012dc:	4603      	mov	r3, r0
 80012de:	4619      	mov	r1, r3
 80012e0:	4a53      	ldr	r2, [pc, #332]	@ (8001430 <ParsePRSection+0x2a0>)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	019b      	lsls	r3, r3, #6
 80012e6:	4413      	add	r3, r2
 80012e8:	330c      	adds	r3, #12
 80012ea:	6019      	str	r1, [r3, #0]
 80012ec:	e08e      	b.n	800140c <ParsePRSection+0x27c>
            } else if (strcmp(param_name, "strobe_left2") == 0) {
 80012ee:	4957      	ldr	r1, [pc, #348]	@ (800144c <ParsePRSection+0x2bc>)
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f7fe ff6d 	bl	80001d0 <strcmp>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10b      	bne.n	8001314 <ParsePRSection+0x184>
                params[pr_index].second_left_strobe = atoi(param_value);
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f00c ff08 	bl	800e112 <atoi>
 8001302:	4603      	mov	r3, r0
 8001304:	4619      	mov	r1, r3
 8001306:	4a4a      	ldr	r2, [pc, #296]	@ (8001430 <ParsePRSection+0x2a0>)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	019b      	lsls	r3, r3, #6
 800130c:	4413      	add	r3, r2
 800130e:	3310      	adds	r3, #16
 8001310:	6019      	str	r1, [r3, #0]
 8001312:	e07b      	b.n	800140c <ParsePRSection+0x27c>
            } else if (strcmp(param_name, "strobe_right2") == 0) {
 8001314:	494e      	ldr	r1, [pc, #312]	@ (8001450 <ParsePRSection+0x2c0>)
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7fe ff5a 	bl	80001d0 <strcmp>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10b      	bne.n	800133a <ParsePRSection+0x1aa>
                params[pr_index].second_right_strobe = atoi(param_value);
 8001322:	68b8      	ldr	r0, [r7, #8]
 8001324:	f00c fef5 	bl	800e112 <atoi>
 8001328:	4603      	mov	r3, r0
 800132a:	4619      	mov	r1, r3
 800132c:	4a40      	ldr	r2, [pc, #256]	@ (8001430 <ParsePRSection+0x2a0>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	019b      	lsls	r3, r3, #6
 8001332:	4413      	add	r3, r2
 8001334:	3314      	adds	r3, #20
 8001336:	6019      	str	r1, [r3, #0]
 8001338:	e068      	b.n	800140c <ParsePRSection+0x27c>
            } else if (strcmp(param_name, "method") == 0) {
 800133a:	4946      	ldr	r1, [pc, #280]	@ (8001454 <ParsePRSection+0x2c4>)
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f7fe ff47 	bl	80001d0 <strcmp>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10b      	bne.n	8001360 <ParsePRSection+0x1d0>
                params[pr_index].method = atoi(param_value);
 8001348:	68b8      	ldr	r0, [r7, #8]
 800134a:	f00c fee2 	bl	800e112 <atoi>
 800134e:	4603      	mov	r3, r0
 8001350:	4619      	mov	r1, r3
 8001352:	4a37      	ldr	r2, [pc, #220]	@ (8001430 <ParsePRSection+0x2a0>)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	019b      	lsls	r3, r3, #6
 8001358:	4413      	add	r3, r2
 800135a:	3324      	adds	r3, #36	@ 0x24
 800135c:	6019      	str	r1, [r3, #0]
 800135e:	e055      	b.n	800140c <ParsePRSection+0x27c>
            } else if (strcmp(param_name, "end_index") == 0) {
 8001360:	493d      	ldr	r1, [pc, #244]	@ (8001458 <ParsePRSection+0x2c8>)
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f7fe ff34 	bl	80001d0 <strcmp>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10b      	bne.n	8001386 <ParsePRSection+0x1f6>
                params[pr_index].end_index = atoi(param_value);
 800136e:	68b8      	ldr	r0, [r7, #8]
 8001370:	f00c fecf 	bl	800e112 <atoi>
 8001374:	4603      	mov	r3, r0
 8001376:	4619      	mov	r1, r3
 8001378:	4a2d      	ldr	r2, [pc, #180]	@ (8001430 <ParsePRSection+0x2a0>)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	019b      	lsls	r3, r3, #6
 800137e:	4413      	add	r3, r2
 8001380:	3328      	adds	r3, #40	@ 0x28
 8001382:	6019      	str	r1, [r3, #0]
 8001384:	e042      	b.n	800140c <ParsePRSection+0x27c>
            } else if (strcmp(param_name, "cycle_number") == 0) {
 8001386:	4935      	ldr	r1, [pc, #212]	@ (800145c <ParsePRSection+0x2cc>)
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f7fe ff21 	bl	80001d0 <strcmp>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10b      	bne.n	80013ac <ParsePRSection+0x21c>
                params[pr_index].cycle_number = atoi(param_value);
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f00c febc 	bl	800e112 <atoi>
 800139a:	4603      	mov	r3, r0
 800139c:	4619      	mov	r1, r3
 800139e:	4a24      	ldr	r2, [pc, #144]	@ (8001430 <ParsePRSection+0x2a0>)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	019b      	lsls	r3, r3, #6
 80013a4:	4413      	add	r3, r2
 80013a6:	332c      	adds	r3, #44	@ 0x2c
 80013a8:	6019      	str	r1, [r3, #0]
 80013aa:	e02f      	b.n	800140c <ParsePRSection+0x27c>
            } else if (strcmp(param_name, "sensor_number") == 0) {
 80013ac:	492c      	ldr	r1, [pc, #176]	@ (8001460 <ParsePRSection+0x2d0>)
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f7fe ff0e 	bl	80001d0 <strcmp>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d111      	bne.n	80013de <ParsePRSection+0x24e>
                strncpy(params[pr_index].sensor_number, param_value,
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	019b      	lsls	r3, r3, #6
 80013be:	3330      	adds	r3, #48	@ 0x30
 80013c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001430 <ParsePRSection+0x2a0>)
 80013c2:	4413      	add	r3, r2
 80013c4:	2204      	movs	r2, #4
 80013c6:	68b9      	ldr	r1, [r7, #8]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00e fd87 	bl	800fedc <strncpy>
                       sizeof(params[pr_index].sensor_number) - 1);
                params[pr_index].sensor_number[sizeof(params[pr_index].sensor_number) - 1] = '\0';
 80013ce:	4a18      	ldr	r2, [pc, #96]	@ (8001430 <ParsePRSection+0x2a0>)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	019b      	lsls	r3, r3, #6
 80013d4:	4413      	add	r3, r2
 80013d6:	3334      	adds	r3, #52	@ 0x34
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
 80013dc:	e016      	b.n	800140c <ParsePRSection+0x27c>
            } else if (strcmp(param_name, "gain") == 0) {
 80013de:	4921      	ldr	r1, [pc, #132]	@ (8001464 <ParsePRSection+0x2d4>)
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7fe fef5 	bl	80001d0 <strcmp>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10f      	bne.n	800140c <ParsePRSection+0x27c>
                params[pr_index].gain = atof(param_value);
 80013ec:	68b8      	ldr	r0, [r7, #8]
 80013ee:	f00c fe8d 	bl	800e10c <atof>
 80013f2:	ec53 2b10 	vmov	r2, r3, d0
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fc05 	bl	8000c08 <__aeabi_d2f>
 80013fe:	4602      	mov	r2, r0
 8001400:	490b      	ldr	r1, [pc, #44]	@ (8001430 <ParsePRSection+0x2a0>)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	019b      	lsls	r3, r3, #6
 8001406:	440b      	add	r3, r1
 8001408:	3338      	adds	r3, #56	@ 0x38
 800140a:	601a      	str	r2, [r3, #0]
            }
        }
        token = strtok(NULL, "|");
 800140c:	4906      	ldr	r1, [pc, #24]	@ (8001428 <ParsePRSection+0x298>)
 800140e:	2000      	movs	r0, #0
 8001410:	f00e fd78 	bl	800ff04 <strtok>
 8001414:	6178      	str	r0, [r7, #20]
    while (token != NULL) {
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f47f aec4 	bne.w	80011a6 <ParsePRSection+0x16>
    }
}
 800141e:	bf00      	nop
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	080132d4 	.word	0x080132d4
 800142c:	080132ec 	.word	0x080132ec
 8001430:	2000a694 	.word	0x2000a694
 8001434:	080132f8 	.word	0x080132f8
 8001438:	08013304 	.word	0x08013304
 800143c:	0801331c 	.word	0x0801331c
 8001440:	08013328 	.word	0x08013328
 8001444:	08013338 	.word	0x08013338
 8001448:	08013348 	.word	0x08013348
 800144c:	08013358 	.word	0x08013358
 8001450:	08013368 	.word	0x08013368
 8001454:	08013378 	.word	0x08013378
 8001458:	08013380 	.word	0x08013380
 800145c:	0801338c 	.word	0x0801338c
 8001460:	0801339c 	.word	0x0801339c
 8001464:	080133ac 	.word	0x080133ac

08001468 <ParseParameters>:

/**
  * @brief Парсинг параметров из строки
  * @param params_str Строка с параметрами
  */
void ParseParameters(const char* params_str) {
 8001468:	b580      	push	{r7, lr}
 800146a:	f5ad 6d97 	sub.w	sp, sp, #1208	@ 0x4b8
 800146e:	af00      	add	r7, sp, #0
 8001470:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001474:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 8001478:	6018      	str	r0, [r3, #0]
    char buffer[USB_RX_BUFFER_SIZE];
    strncpy(buffer, params_str, sizeof(buffer) - 1);
 800147a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800147e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 8001482:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001486:	f240 424b 	movw	r2, #1099	@ 0x44b
 800148a:	6819      	ldr	r1, [r3, #0]
 800148c:	f00e fd26 	bl	800fedc <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 8001490:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001494:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8001498:	2200      	movs	r2, #0
 800149a:	f883 244b 	strb.w	r2, [r3, #1099]	@ 0x44b

    // Загружаем текущие параметры (если еще не инициализированы)
    for (int i = 0; i < 4; i++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 80014a4:	e011      	b.n	80014ca <ParseParameters+0x62>
        if (!parameters_initialized[i]) {
 80014a6:	4a83      	ldr	r2, [pc, #524]	@ (80016b4 <ParseParameters+0x24c>)
 80014a8:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	f083 0301 	eor.w	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <ParseParameters+0x58>
            LoadParametersFromFlash();
 80014ba:	f002 fa7b 	bl	80039b4 <LoadParametersFromFlash>
            break;
 80014be:	e008      	b.n	80014d2 <ParseParameters+0x6a>
    for (int i = 0; i < 4; i++) {
 80014c0:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 80014c4:	3301      	adds	r3, #1
 80014c6:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 80014ca:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	dde9      	ble.n	80014a6 <ParseParameters+0x3e>
        }
    }

    // Сохраняем старый gain ДО парсинга для всех наборов
    for (int i = 0; i < 4; i++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
 80014d8:	e011      	b.n	80014fe <ParseParameters+0x96>
        old_gain[i] = params[i].gain;
 80014da:	4a77      	ldr	r2, [pc, #476]	@ (80016b8 <ParseParameters+0x250>)
 80014dc:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	@ 0x4b0
 80014e0:	019b      	lsls	r3, r3, #6
 80014e2:	4413      	add	r3, r2
 80014e4:	3338      	adds	r3, #56	@ 0x38
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4974      	ldr	r1, [pc, #464]	@ (80016bc <ParseParameters+0x254>)
 80014ea:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	@ 0x4b0
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80014f4:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	@ 0x4b0
 80014f8:	3301      	adds	r3, #1
 80014fa:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
 80014fe:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	@ 0x4b0
 8001502:	2b03      	cmp	r3, #3
 8001504:	dde9      	ble.n	80014da <ParseParameters+0x72>
    }

    // Разбиваем всю строку на секции по '/'
    char* sections[20]; // Максимум 20 секций
    int section_count = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac

    char* token = strtok(buffer, "/");
 800150c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001510:	496b      	ldr	r1, [pc, #428]	@ (80016c0 <ParseParameters+0x258>)
 8001512:	4618      	mov	r0, r3
 8001514:	f00e fcf6 	bl	800ff04 <strtok>
 8001518:	f8c7 04a8 	str.w	r0, [r7, #1192]	@ 0x4a8
    while (token != NULL && section_count < 20) {
 800151c:	e012      	b.n	8001544 <ParseParameters+0xdc>
        sections[section_count++] = token;
 800151e:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	@ 0x4ac
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	f8c7 24ac 	str.w	r2, [r7, #1196]	@ 0x4ac
 8001528:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 800152c:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 8001530:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	@ 0x4a8
 8001534:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        token = strtok(NULL, "/");
 8001538:	4961      	ldr	r1, [pc, #388]	@ (80016c0 <ParseParameters+0x258>)
 800153a:	2000      	movs	r0, #0
 800153c:	f00e fce2 	bl	800ff04 <strtok>
 8001540:	f8c7 04a8 	str.w	r0, [r7, #1192]	@ 0x4a8
    while (token != NULL && section_count < 20) {
 8001544:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	@ 0x4a8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <ParseParameters+0xec>
 800154c:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	@ 0x4ac
 8001550:	2b13      	cmp	r3, #19
 8001552:	dde4      	ble.n	800151e <ParseParameters+0xb6>
    }

    // Обрабатываем каждую секцию
    for (int i = 0; i < section_count; i++) {
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 800155a:	e098      	b.n	800168e <ParseParameters+0x226>
        if (strncmp(sections[i], "AL=", 3) == 0) {
 800155c:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001560:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001564:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	@ 0x4a4
 8001568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156c:	2203      	movs	r2, #3
 800156e:	4955      	ldr	r1, [pc, #340]	@ (80016c4 <ParseParameters+0x25c>)
 8001570:	4618      	mov	r0, r3
 8001572:	f00e fca1 	bl	800feb8 <strncmp>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10c      	bne.n	8001596 <ParseParameters+0x12e>
            // Обрабатываем AL= секцию
            ParseALSection(sections[i] + 3); // +3 чтобы пропустить "AL="
 800157c:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001580:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001584:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	@ 0x4a4
 8001588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158c:	3303      	adds	r3, #3
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fdae 	bl	80010f0 <ParseALSection>
 8001594:	e076      	b.n	8001684 <ParseParameters+0x21c>
        }
        else if (strncmp(sections[i], "PR1=", 4) == 0) {
 8001596:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800159a:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 800159e:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	@ 0x4a4
 80015a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a6:	2204      	movs	r2, #4
 80015a8:	4947      	ldr	r1, [pc, #284]	@ (80016c8 <ParseParameters+0x260>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f00e fc84 	bl	800feb8 <strncmp>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10d      	bne.n	80015d2 <ParseParameters+0x16a>
            // Обрабатываем PR1= секцию
            ParsePRSection(sections[i] + 4, 0); // +4 чтобы пропустить "PR1=", индекс 0
 80015b6:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80015ba:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80015be:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	@ 0x4a4
 80015c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c6:	3304      	adds	r3, #4
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fde0 	bl	8001190 <ParsePRSection>
 80015d0:	e058      	b.n	8001684 <ParseParameters+0x21c>
        }
        else if (strncmp(sections[i], "PR2=", 4) == 0) {
 80015d2:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80015d6:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80015da:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	@ 0x4a4
 80015de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e2:	2204      	movs	r2, #4
 80015e4:	4939      	ldr	r1, [pc, #228]	@ (80016cc <ParseParameters+0x264>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f00e fc66 	bl	800feb8 <strncmp>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10d      	bne.n	800160e <ParseParameters+0x1a6>
            // Обрабатываем PR2= секцию
            ParsePRSection(sections[i] + 4, 1); // +4 чтобы пропустить "PR2=", индекс 1
 80015f2:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 80015f6:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80015fa:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	@ 0x4a4
 80015fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001602:	3304      	adds	r3, #4
 8001604:	2101      	movs	r1, #1
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fdc2 	bl	8001190 <ParsePRSection>
 800160c:	e03a      	b.n	8001684 <ParseParameters+0x21c>
        }
        else if (strncmp(sections[i], "PR3=", 4) == 0) {
 800160e:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001612:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001616:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	@ 0x4a4
 800161a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161e:	2204      	movs	r2, #4
 8001620:	492b      	ldr	r1, [pc, #172]	@ (80016d0 <ParseParameters+0x268>)
 8001622:	4618      	mov	r0, r3
 8001624:	f00e fc48 	bl	800feb8 <strncmp>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10d      	bne.n	800164a <ParseParameters+0x1e2>
            // Обрабатываем PR3= секцию
            ParsePRSection(sections[i] + 4, 2); // +4 чтобы пропустить "PR3=", индекс 2
 800162e:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001632:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001636:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	@ 0x4a4
 800163a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163e:	3304      	adds	r3, #4
 8001640:	2102      	movs	r1, #2
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fda4 	bl	8001190 <ParsePRSection>
 8001648:	e01c      	b.n	8001684 <ParseParameters+0x21c>
        }
        else if (strncmp(sections[i], "PR4=", 4) == 0) {
 800164a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800164e:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001652:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	@ 0x4a4
 8001656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165a:	2204      	movs	r2, #4
 800165c:	491d      	ldr	r1, [pc, #116]	@ (80016d4 <ParseParameters+0x26c>)
 800165e:	4618      	mov	r0, r3
 8001660:	f00e fc2a 	bl	800feb8 <strncmp>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10c      	bne.n	8001684 <ParseParameters+0x21c>
            // Обрабатываем PR4= секцию
            ParsePRSection(sections[i] + 4, 3); // +4 чтобы пропустить "PR4=", индекс 3
 800166a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800166e:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001672:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	@ 0x4a4
 8001676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167a:	3304      	adds	r3, #4
 800167c:	2103      	movs	r1, #3
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fd86 	bl	8001190 <ParsePRSection>
    for (int i = 0; i < section_count; i++) {
 8001684:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8001688:	3301      	adds	r3, #1
 800168a:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 800168e:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	@ 0x4a4
 8001692:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	@ 0x4ac
 8001696:	429a      	cmp	r2, r3
 8001698:	f6ff af60 	blt.w	800155c <ParseParameters+0xf4>
        }
    }

    // Сохраняем обновленные параметры в Flash (без start_date и period)
    SaveParametersToFlash();
 800169c:	f002 f9cc 	bl	8003a38 <SaveParametersToFlash>

    // ОТПРАВЛЯЕМ ДАННЫЕ НА ДЕЖУРНЫЙ МК ПО UART
    SendDateTimeToBackupMCU();
 80016a0:	f000 f8f8 	bl	8001894 <SendDateTimeToBackupMCU>

    // Устанавливаем флаг для запуска расчета
    calculate_thickness_requested = true;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <ParseParameters+0x270>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
}
 80016aa:	bf00      	nop
 80016ac:	f507 6797 	add.w	r7, r7, #1208	@ 0x4b8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000a794 	.word	0x2000a794
 80016b8:	2000a694 	.word	0x2000a694
 80016bc:	20000850 	.word	0x20000850
 80016c0:	080133b4 	.word	0x080133b4
 80016c4:	080133b8 	.word	0x080133b8
 80016c8:	080133bc 	.word	0x080133bc
 80016cc:	080133c4 	.word	0x080133c4
 80016d0:	080133cc 	.word	0x080133cc
 80016d4:	080133d4 	.word	0x080133d4
 80016d8:	2000a798 	.word	0x2000a798

080016dc <SendParametersResponse>:

/**
  * @brief Отправка текущих параметров обратно в приложение
  */
void SendParametersResponse(void) {
 80016dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e0:	b0a5      	sub	sp, #148	@ 0x94
 80016e2:	af18      	add	r7, sp, #96	@ 0x60
    // Отправляем параметры для всех 4 наборов
    for (int i = 0; i < 4; i++) {
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016e8:	e0bb      	b.n	8001862 <SendParametersResponse+0x186>
        if (!parameters_initialized[i]) {
 80016ea:	4a63      	ldr	r2, [pc, #396]	@ (8001878 <SendParametersResponse+0x19c>)
 80016ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ee:	4413      	add	r3, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	f083 0301 	eor.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f040 80ae 	bne.w	800185a <SendParametersResponse+0x17e>
            continue;
        }

        uint8_t usb_status = USB_CONNECTED();
 80016fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001702:	485e      	ldr	r0, [pc, #376]	@ (800187c <SendParametersResponse+0x1a0>)
 8001704:	f003 fd06 	bl	8005114 <HAL_GPIO_ReadPin>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        snprintf(usb_msg, sizeof(usb_msg),
 800170e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001710:	3301      	adds	r3, #1
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
 8001714:	4a5a      	ldr	r2, [pc, #360]	@ (8001880 <SendParametersResponse+0x1a4>)
 8001716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001718:	019b      	lsls	r3, r3, #6
 800171a:	4413      	add	r3, r2
 800171c:	3324      	adds	r3, #36	@ 0x24
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	623a      	str	r2, [r7, #32]
            "PR%d:method=%lu|wave_speed=%.1f|threshold=%.1f|threshold_zero_crossing=%.1f|"
            "start_index=%lu|probe_length=%lu|strobe_left1=%lu|strobe_right1=%lu|"
            "strobe_left2=%lu|strobe_right2=%lu|end_index=%lu|cycle_number=%lu|"
            "sensor_number=%s|gain=%.1f|start_date=%s|period=%lu;USB:%u\r\n",
            i+1, params[i].method, params[i].wave_speed, params[i].threshold, params[i].threshold_zero_crossing,
 8001722:	4a57      	ldr	r2, [pc, #348]	@ (8001880 <SendParametersResponse+0x1a4>)
 8001724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001726:	019b      	lsls	r3, r3, #6
 8001728:	4413      	add	r3, r2
 800172a:	3304      	adds	r3, #4
 800172c:	681b      	ldr	r3, [r3, #0]
        snprintf(usb_msg, sizeof(usb_msg),
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ff1a 	bl	8000568 <__aeabi_f2d>
 8001734:	4680      	mov	r8, r0
 8001736:	4689      	mov	r9, r1
            i+1, params[i].method, params[i].wave_speed, params[i].threshold, params[i].threshold_zero_crossing,
 8001738:	4a51      	ldr	r2, [pc, #324]	@ (8001880 <SendParametersResponse+0x1a4>)
 800173a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173c:	019b      	lsls	r3, r3, #6
 800173e:	4413      	add	r3, r2
 8001740:	3318      	adds	r3, #24
 8001742:	681b      	ldr	r3, [r3, #0]
        snprintf(usb_msg, sizeof(usb_msg),
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ff0f 	bl	8000568 <__aeabi_f2d>
 800174a:	4682      	mov	sl, r0
 800174c:	468b      	mov	fp, r1
            i+1, params[i].method, params[i].wave_speed, params[i].threshold, params[i].threshold_zero_crossing,
 800174e:	4a4c      	ldr	r2, [pc, #304]	@ (8001880 <SendParametersResponse+0x1a4>)
 8001750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001752:	019b      	lsls	r3, r3, #6
 8001754:	4413      	add	r3, r2
 8001756:	331c      	adds	r3, #28
 8001758:	681b      	ldr	r3, [r3, #0]
        snprintf(usb_msg, sizeof(usb_msg),
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe ff04 	bl	8000568 <__aeabi_f2d>
 8001760:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001764:	4a46      	ldr	r2, [pc, #280]	@ (8001880 <SendParametersResponse+0x1a4>)
 8001766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001768:	019b      	lsls	r3, r3, #6
 800176a:	4413      	add	r3, r2
 800176c:	6819      	ldr	r1, [r3, #0]
 800176e:	6179      	str	r1, [r7, #20]
 8001770:	4a43      	ldr	r2, [pc, #268]	@ (8001880 <SendParametersResponse+0x1a4>)
 8001772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001774:	019b      	lsls	r3, r3, #6
 8001776:	4413      	add	r3, r2
 8001778:	3320      	adds	r3, #32
 800177a:	681c      	ldr	r4, [r3, #0]
 800177c:	613c      	str	r4, [r7, #16]
 800177e:	4a40      	ldr	r2, [pc, #256]	@ (8001880 <SendParametersResponse+0x1a4>)
 8001780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001782:	019b      	lsls	r3, r3, #6
 8001784:	4413      	add	r3, r2
 8001786:	3308      	adds	r3, #8
 8001788:	681d      	ldr	r5, [r3, #0]
 800178a:	60fd      	str	r5, [r7, #12]
 800178c:	4a3c      	ldr	r2, [pc, #240]	@ (8001880 <SendParametersResponse+0x1a4>)
 800178e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001790:	019b      	lsls	r3, r3, #6
 8001792:	4413      	add	r3, r2
 8001794:	330c      	adds	r3, #12
 8001796:	681e      	ldr	r6, [r3, #0]
 8001798:	60be      	str	r6, [r7, #8]
 800179a:	4a39      	ldr	r2, [pc, #228]	@ (8001880 <SendParametersResponse+0x1a4>)
 800179c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800179e:	019b      	lsls	r3, r3, #6
 80017a0:	4413      	add	r3, r2
 80017a2:	3310      	adds	r3, #16
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	4a35      	ldr	r2, [pc, #212]	@ (8001880 <SendParametersResponse+0x1a4>)
 80017aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ac:	019b      	lsls	r3, r3, #6
 80017ae:	4413      	add	r3, r2
 80017b0:	3314      	adds	r3, #20
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4a32      	ldr	r2, [pc, #200]	@ (8001880 <SendParametersResponse+0x1a4>)
 80017b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ba:	019b      	lsls	r3, r3, #6
 80017bc:	4413      	add	r3, r2
 80017be:	3328      	adds	r3, #40	@ 0x28
 80017c0:	681e      	ldr	r6, [r3, #0]
 80017c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001880 <SendParametersResponse+0x1a4>)
 80017c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c6:	019b      	lsls	r3, r3, #6
 80017c8:	4413      	add	r3, r2
 80017ca:	332c      	adds	r3, #44	@ 0x2c
 80017cc:	681d      	ldr	r5, [r3, #0]
            params[i].start_index, params[i].probe_length, params[i].first_left_strobe, params[i].first_right_strobe,
            params[i].second_left_strobe, params[i].second_right_strobe, params[i].end_index, params[i].cycle_number,
            params[i].sensor_number, params[i].gain, start_date, period, usb_status);
 80017ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d0:	019b      	lsls	r3, r3, #6
 80017d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80017d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001880 <SendParametersResponse+0x1a4>)
 80017d8:	18d4      	adds	r4, r2, r3
 80017da:	4a29      	ldr	r2, [pc, #164]	@ (8001880 <SendParametersResponse+0x1a4>)
 80017dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017de:	019b      	lsls	r3, r3, #6
 80017e0:	4413      	add	r3, r2
 80017e2:	3338      	adds	r3, #56	@ 0x38
 80017e4:	681b      	ldr	r3, [r3, #0]
        snprintf(usb_msg, sizeof(usb_msg),
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe febe 	bl	8000568 <__aeabi_f2d>
 80017ec:	4b25      	ldr	r3, [pc, #148]	@ (8001884 <SendParametersResponse+0x1a8>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80017f4:	9316      	str	r3, [sp, #88]	@ 0x58
 80017f6:	9215      	str	r2, [sp, #84]	@ 0x54
 80017f8:	4b23      	ldr	r3, [pc, #140]	@ (8001888 <SendParametersResponse+0x1ac>)
 80017fa:	9314      	str	r3, [sp, #80]	@ 0x50
 80017fc:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8001800:	9410      	str	r4, [sp, #64]	@ 0x40
 8001802:	950f      	str	r5, [sp, #60]	@ 0x3c
 8001804:	960e      	str	r6, [sp, #56]	@ 0x38
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	930d      	str	r3, [sp, #52]	@ 0x34
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	900c      	str	r0, [sp, #48]	@ 0x30
 800180e:	68be      	ldr	r6, [r7, #8]
 8001810:	960b      	str	r6, [sp, #44]	@ 0x2c
 8001812:	68fd      	ldr	r5, [r7, #12]
 8001814:	950a      	str	r5, [sp, #40]	@ 0x28
 8001816:	693c      	ldr	r4, [r7, #16]
 8001818:	9409      	str	r4, [sp, #36]	@ 0x24
 800181a:	6979      	ldr	r1, [r7, #20]
 800181c:	9108      	str	r1, [sp, #32]
 800181e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001822:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001826:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800182a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800182e:	6a3a      	ldr	r2, [r7, #32]
 8001830:	9200      	str	r2, [sp, #0]
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	4a15      	ldr	r2, [pc, #84]	@ (800188c <SendParametersResponse+0x1b0>)
 8001836:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800183a:	4815      	ldr	r0, [pc, #84]	@ (8001890 <SendParametersResponse+0x1b4>)
 800183c:	f00e fa5e 	bl	800fcfc <sniprintf>

        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001840:	4813      	ldr	r0, [pc, #76]	@ (8001890 <SendParametersResponse+0x1b4>)
 8001842:	f7fe fd25 	bl	8000290 <strlen>
 8001846:	4603      	mov	r3, r0
 8001848:	b29b      	uxth	r3, r3
 800184a:	4619      	mov	r1, r3
 800184c:	4810      	ldr	r0, [pc, #64]	@ (8001890 <SendParametersResponse+0x1b4>)
 800184e:	f00b fe35 	bl	800d4bc <CDC_Transmit_FS>
        HAL_Delay(10);
 8001852:	200a      	movs	r0, #10
 8001854:	f002 fe02 	bl	800445c <HAL_Delay>
 8001858:	e000      	b.n	800185c <SendParametersResponse+0x180>
            continue;
 800185a:	bf00      	nop
    for (int i = 0; i < 4; i++) {
 800185c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185e:	3301      	adds	r3, #1
 8001860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001864:	2b03      	cmp	r3, #3
 8001866:	f77f af40 	ble.w	80016ea <SendParametersResponse+0xe>
    }
}
 800186a:	bf00      	nop
 800186c:	bf00      	nop
 800186e:	3734      	adds	r7, #52	@ 0x34
 8001870:	46bd      	mov	sp, r7
 8001872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001876:	bf00      	nop
 8001878:	2000a794 	.word	0x2000a794
 800187c:	40020000 	.word	0x40020000
 8001880:	2000a694 	.word	0x2000a694
 8001884:	2000084c 	.word	0x2000084c
 8001888:	20000838 	.word	0x20000838
 800188c:	080133dc 	.word	0x080133dc
 8001890:	20000438 	.word	0x20000438

08001894 <SendDateTimeToBackupMCU>:
/**
  * @brief Отправка даты/времени и периода на дежурный МК по UART
  */
// Функция отправки данных
void SendDateTimeToBackupMCU(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af04      	add	r7, sp, #16
    // Проверяем что данные не пустые
    if (strlen(start_date) > 0 && period > 0) {
 800189a:	4b18      	ldr	r3, [pc, #96]	@ (80018fc <SendDateTimeToBackupMCU+0x68>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d028      	beq.n	80018f4 <SendDateTimeToBackupMCU+0x60>
 80018a2:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <SendDateTimeToBackupMCU+0x6c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d024      	beq.n	80018f4 <SendDateTimeToBackupMCU+0x60>
        // Получаем статус USB подключения
        uint8_t usb_status = USB_CONNECTED();
 80018aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ae:	4815      	ldr	r0, [pc, #84]	@ (8001904 <SendDateTimeToBackupMCU+0x70>)
 80018b0:	f003 fc30 	bl	8005114 <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	71fb      	strb	r3, [r7, #7]

        // Формируем сообщение в формате: "DATE:YYYY-MM-DD;TIME:HH:MM:SS;PERIOD:XXXXX;USB:X"
        snprintf(uart_tx_buf, UART_TX_BUF_SIZE,
 80018b8:	4913      	ldr	r1, [pc, #76]	@ (8001908 <SendDateTimeToBackupMCU+0x74>)
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <SendDateTimeToBackupMCU+0x6c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	79fa      	ldrb	r2, [r7, #7]
 80018c0:	9202      	str	r2, [sp, #8]
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	9100      	str	r1, [sp, #0]
 80018c6:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <SendDateTimeToBackupMCU+0x68>)
 80018c8:	4a10      	ldr	r2, [pc, #64]	@ (800190c <SendDateTimeToBackupMCU+0x78>)
 80018ca:	2180      	movs	r1, #128	@ 0x80
 80018cc:	4810      	ldr	r0, [pc, #64]	@ (8001910 <SendDateTimeToBackupMCU+0x7c>)
 80018ce:	f00e fa15 	bl	800fcfc <sniprintf>
                 "DATE:%.10s;TIME:%.8s;PERIOD:%lu;USB:%u\r\n",
                 start_date, start_date + 11, period, usb_status);

        // Отправляем по UART
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx_buf, strlen(uart_tx_buf), 100);
 80018d2:	480f      	ldr	r0, [pc, #60]	@ (8001910 <SendDateTimeToBackupMCU+0x7c>)
 80018d4:	f7fe fcdc 	bl	8000290 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	2364      	movs	r3, #100	@ 0x64
 80018de:	490c      	ldr	r1, [pc, #48]	@ (8001910 <SendDateTimeToBackupMCU+0x7c>)
 80018e0:	480c      	ldr	r0, [pc, #48]	@ (8001914 <SendDateTimeToBackupMCU+0x80>)
 80018e2:	f006 fc8f 	bl	8008204 <HAL_UART_Transmit>

        // Отладочное сообщение по USB
        snprintf(usb_msg, sizeof(usb_msg), "Sent to backup MCU: %s", uart_tx_buf);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <SendDateTimeToBackupMCU+0x7c>)
 80018e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001918 <SendDateTimeToBackupMCU+0x84>)
 80018ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018ee:	480b      	ldr	r0, [pc, #44]	@ (800191c <SendDateTimeToBackupMCU+0x88>)
 80018f0:	f00e fa04 	bl	800fcfc <sniprintf>
       // SendUSBDebugMessage(usb_msg);
    } else {
       // SendUSBDebugMessage("No date/time data to send to backup MCU");
    }
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000838 	.word	0x20000838
 8001900:	2000084c 	.word	0x2000084c
 8001904:	40020000 	.word	0x40020000
 8001908:	20000843 	.word	0x20000843
 800190c:	080134ec 	.word	0x080134ec
 8001910:	20000860 	.word	0x20000860
 8001914:	200003a0 	.word	0x200003a0
 8001918:	08013518 	.word	0x08013518
 800191c:	20000438 	.word	0x20000438

08001920 <ProcessUARTCommand>:
/**
  * @brief Обработка команды от дежурного МК через UART
  * @param data Данные для обработки
  * @param len Длина данных
  */
void ProcessUARTCommand(uint8_t* data, uint8_t len) {
 8001920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001924:	b0c3      	sub	sp, #268	@ 0x10c
 8001926:	af1e      	add	r7, sp, #120	@ 0x78
 8001928:	6578      	str	r0, [r7, #84]	@ 0x54
 800192a:	460b      	mov	r3, r1
 800192c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    HAL_Delay(150);
 8001930:	2096      	movs	r0, #150	@ 0x96
 8001932:	f002 fd93 	bl	800445c <HAL_Delay>

    // Загружаем конфигурацию ПЛИС
    FPGA_LoadConfig();
 8001936:	f000 ff0b 	bl	8002750 <FPGA_LoadConfig>

    // Уменьшаем дополнительную паузу
    HAL_Delay(10);
 800193a:	200a      	movs	r0, #10
 800193c:	f002 fd8e 	bl	800445c <HAL_Delay>

    // Поиск всех параметров в данных
        char* date_ptr = strstr((char*)data, "DATE:");
 8001940:	4977      	ldr	r1, [pc, #476]	@ (8001b20 <ProcessUARTCommand+0x200>)
 8001942:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001944:	f00e fb3a 	bl	800ffbc <strstr>
 8001948:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        char* time_ptr = strstr((char*)data, ";TIME:");
 800194c:	4975      	ldr	r1, [pc, #468]	@ (8001b24 <ProcessUARTCommand+0x204>)
 800194e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001950:	f00e fb34 	bl	800ffbc <strstr>
 8001954:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
        char* period_ptr = strstr((char*)data, ";PERIOD:");
 8001958:	4973      	ldr	r1, [pc, #460]	@ (8001b28 <ProcessUARTCommand+0x208>)
 800195a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800195c:	f00e fb2e 	bl	800ffbc <strstr>
 8001960:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        char* voltage_ptr = strstr((char*)data, ";VOLTAGE:");
 8001964:	4971      	ldr	r1, [pc, #452]	@ (8001b2c <ProcessUARTCommand+0x20c>)
 8001966:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001968:	f00e fb28 	bl	800ffbc <strstr>
 800196c:	67f8      	str	r0, [r7, #124]	@ 0x7c
        char* temp_ptr = strstr((char*)data, ";TEMP:");
 800196e:	4970      	ldr	r1, [pc, #448]	@ (8001b30 <ProcessUARTCommand+0x210>)
 8001970:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001972:	f00e fb23 	bl	800ffbc <strstr>
 8001976:	67b8      	str	r0, [r7, #120]	@ 0x78

        // Инициализация значений по умолчанию
        int year = 0, month = 0, day = 0, hour = 0, min = 0, sec = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	673b      	str	r3, [r7, #112]	@ 0x70
 800197c:	2300      	movs	r3, #0
 800197e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001980:	2300      	movs	r3, #0
 8001982:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001984:	2300      	movs	r3, #0
 8001986:	667b      	str	r3, [r7, #100]	@ 0x64
 8001988:	2300      	movs	r3, #0
 800198a:	663b      	str	r3, [r7, #96]	@ 0x60
 800198c:	2300      	movs	r3, #0
 800198e:	65fb      	str	r3, [r7, #92]	@ 0x5c
        uint32_t received_period = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	65bb      	str	r3, [r7, #88]	@ 0x58
        received_voltage = 0.0f;
 8001994:	4b67      	ldr	r3, [pc, #412]	@ (8001b34 <ProcessUARTCommand+0x214>)
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
        received_temp = 0.0f;
 800199c:	4b66      	ldr	r3, [pc, #408]	@ (8001b38 <ProcessUARTCommand+0x218>)
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        // Парсинг доступных параметров
        if(date_ptr) sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day);
 80019a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00c      	beq.n	80019c6 <ProcessUARTCommand+0xa6>
 80019ac:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80019b0:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80019b4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	460b      	mov	r3, r1
 80019bc:	495f      	ldr	r1, [pc, #380]	@ (8001b3c <ProcessUARTCommand+0x21c>)
 80019be:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80019c2:	f00e f9f3 	bl	800fdac <siscanf>
        if(time_ptr) sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec);
 80019c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00c      	beq.n	80019e8 <ProcessUARTCommand+0xc8>
 80019ce:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80019d2:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80019d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	460b      	mov	r3, r1
 80019de:	4958      	ldr	r1, [pc, #352]	@ (8001b40 <ProcessUARTCommand+0x220>)
 80019e0:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80019e4:	f00e f9e2 	bl	800fdac <siscanf>
        if(period_ptr) sscanf(period_ptr, ";PERIOD:%lu", &received_period);
 80019e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d007      	beq.n	8001a00 <ProcessUARTCommand+0xe0>
 80019f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80019f4:	461a      	mov	r2, r3
 80019f6:	4953      	ldr	r1, [pc, #332]	@ (8001b44 <ProcessUARTCommand+0x224>)
 80019f8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80019fc:	f00e f9d6 	bl	800fdac <siscanf>
        if(voltage_ptr) sscanf(voltage_ptr, ";VOLTAGE:%f", &received_voltage);
 8001a00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d004      	beq.n	8001a10 <ProcessUARTCommand+0xf0>
 8001a06:	4a4b      	ldr	r2, [pc, #300]	@ (8001b34 <ProcessUARTCommand+0x214>)
 8001a08:	494f      	ldr	r1, [pc, #316]	@ (8001b48 <ProcessUARTCommand+0x228>)
 8001a0a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001a0c:	f00e f9ce 	bl	800fdac <siscanf>
        if(temp_ptr) sscanf(temp_ptr, ";TEMP:%f", &received_temp);
 8001a10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <ProcessUARTCommand+0x100>
 8001a16:	4a48      	ldr	r2, [pc, #288]	@ (8001b38 <ProcessUARTCommand+0x218>)
 8001a18:	494c      	ldr	r1, [pc, #304]	@ (8001b4c <ProcessUARTCommand+0x22c>)
 8001a1a:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001a1c:	f00e f9c6 	bl	800fdac <siscanf>

        // Формируем строку даты
        snprintf(start_date, sizeof(start_date), "%04d-%02d-%02d %02d:%02d:%02d",
 8001a20:	6f3d      	ldr	r5, [r7, #112]	@ 0x70
 8001a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001a26:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001a28:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001a2a:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8001a2c:	9404      	str	r4, [sp, #16]
 8001a2e:	9003      	str	r0, [sp, #12]
 8001a30:	9102      	str	r1, [sp, #8]
 8001a32:	9201      	str	r2, [sp, #4]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	462b      	mov	r3, r5
 8001a38:	4a45      	ldr	r2, [pc, #276]	@ (8001b50 <ProcessUARTCommand+0x230>)
 8001a3a:	2114      	movs	r1, #20
 8001a3c:	4845      	ldr	r0, [pc, #276]	@ (8001b54 <ProcessUARTCommand+0x234>)
 8001a3e:	f00e f95d 	bl	800fcfc <sniprintf>
                year, month, day, hour, min, sec);
        period = received_period;
 8001a42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a44:	4a44      	ldr	r2, [pc, #272]	@ (8001b58 <ProcessUARTCommand+0x238>)
 8001a46:	6013      	str	r3, [r2, #0]

        // ИЗМЕРЯЕМ ТЕМПЕРАТУРУ ТЕРМОПАРЫ
        thermocouple_temperature = Get_Thermocouple_Temperature();
 8001a48:	f001 ff4e 	bl	80038e8 <Get_Thermocouple_Temperature>
 8001a4c:	eef0 7a40 	vmov.f32	s15, s0
 8001a50:	4b42      	ldr	r3, [pc, #264]	@ (8001b5c <ProcessUARTCommand+0x23c>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]

        // ОТПРАВЛЯЕМ РАСШИРЕННЫЕ ДАННЫЕ ПО USB ДЛЯ ВСЕХ НАБОРОВ

    // ВЫПОЛНЯЕМ ОПЕРАЦИИ ДЛЯ ВСЕХ 4 НАБОРОВ ПАРАМЕТРОВ
    for (int i = 0; i < 4; i++) {
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001a5c:	e2ca      	b.n	8001ff4 <ProcessUARTCommand+0x6d4>
        // Пропускаем набор если параметры не инициализированы
        if (!parameters_initialized[i]) {
 8001a5e:	4a40      	ldr	r2, [pc, #256]	@ (8001b60 <ProcessUARTCommand+0x240>)
 8001a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a64:	4413      	add	r3, r2
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	f083 0301 	eor.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 82ba 	bne.w	8001fe8 <ProcessUARTCommand+0x6c8>
            continue;
        }

        switch(i) {
 8001a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d823      	bhi.n	8001ac4 <ProcessUARTCommand+0x1a4>
 8001a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a84 <ProcessUARTCommand+0x164>)
 8001a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a82:	bf00      	nop
 8001a84:	08001a95 	.word	0x08001a95
 8001a88:	08001aa1 	.word	0x08001aa1
 8001a8c:	08001aad 	.word	0x08001aad
 8001a90:	08001ab9 	.word	0x08001ab9
            case 0: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET); break;
 8001a94:	2201      	movs	r2, #1
 8001a96:	2120      	movs	r1, #32
 8001a98:	4832      	ldr	r0, [pc, #200]	@ (8001b64 <ProcessUARTCommand+0x244>)
 8001a9a:	f003 fb53 	bl	8005144 <HAL_GPIO_WritePin>
 8001a9e:	e011      	b.n	8001ac4 <ProcessUARTCommand+0x1a4>
            case 1: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET); break;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2140      	movs	r1, #64	@ 0x40
 8001aa4:	482f      	ldr	r0, [pc, #188]	@ (8001b64 <ProcessUARTCommand+0x244>)
 8001aa6:	f003 fb4d 	bl	8005144 <HAL_GPIO_WritePin>
 8001aaa:	e00b      	b.n	8001ac4 <ProcessUARTCommand+0x1a4>
            case 2: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); break;
 8001aac:	2201      	movs	r2, #1
 8001aae:	2108      	movs	r1, #8
 8001ab0:	482c      	ldr	r0, [pc, #176]	@ (8001b64 <ProcessUARTCommand+0x244>)
 8001ab2:	f003 fb47 	bl	8005144 <HAL_GPIO_WritePin>
 8001ab6:	e005      	b.n	8001ac4 <ProcessUARTCommand+0x1a4>
            case 3: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); break;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2110      	movs	r1, #16
 8001abc:	4829      	ldr	r0, [pc, #164]	@ (8001b64 <ProcessUARTCommand+0x244>)
 8001abe:	f003 fb41 	bl	8005144 <HAL_GPIO_WritePin>
 8001ac2:	bf00      	nop
        }

        // Устанавливаем DAC напряжение для текущего набора параметров
        Set_DAC_Voltage(params[i].gain);
 8001ac4:	4a28      	ldr	r2, [pc, #160]	@ (8001b68 <ProcessUARTCommand+0x248>)
 8001ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001aca:	019b      	lsls	r3, r3, #6
 8001acc:	4413      	add	r3, r2
 8001ace:	3338      	adds	r3, #56	@ 0x38
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fd48 	bl	8000568 <__aeabi_f2d>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	ec43 2b10 	vmov	d0, r2, r3
 8001ae0:	f001 f81e 	bl	8002b20 <Set_DAC_Voltage>

        // Читаем данные ПЛИС с текущими параметрами
        ReadFPGAData(i);
 8001ae4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001ae8:	f000 ff14 	bl	8002914 <ReadFPGAData>

        if (fpga_data.data_ready) {
 8001aec:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <ProcessUARTCommand+0x24c>)
 8001aee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001af2:	f893 3710 	ldrb.w	r3, [r3, #1808]	@ 0x710
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d069      	beq.n	8001bce <ProcessUARTCommand+0x2ae>
            // СРАЗУ ВЫЧИСЛЯЕМ ТОЛЩИНУ ПО УСРЕДНЕННОМУ МАССИВУ
            if (parameters_initialized[i] && averaging_complete) {
 8001afa:	4a19      	ldr	r2, [pc, #100]	@ (8001b60 <ProcessUARTCommand+0x240>)
 8001afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b00:	4413      	add	r3, r2
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d05c      	beq.n	8001bc2 <ProcessUARTCommand+0x2a2>
 8001b08:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <ProcessUARTCommand+0x250>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d058      	beq.n	8001bc2 <ProcessUARTCommand+0x2a2>
                calculate_thickness_requested = true;
 8001b10:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <ProcessUARTCommand+0x254>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]

                uint32_t start_time = HAL_GetTick();
 8001b16:	f002 fc95 	bl	8004444 <HAL_GetTick>
 8001b1a:	6778      	str	r0, [r7, #116]	@ 0x74
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8001b1c:	e044      	b.n	8001ba8 <ProcessUARTCommand+0x288>
 8001b1e:	bf00      	nop
 8001b20:	08013530 	.word	0x08013530
 8001b24:	08013538 	.word	0x08013538
 8001b28:	08013540 	.word	0x08013540
 8001b2c:	0801354c 	.word	0x0801354c
 8001b30:	08013558 	.word	0x08013558
 8001b34:	20000a1c 	.word	0x20000a1c
 8001b38:	20000a20 	.word	0x20000a20
 8001b3c:	08013560 	.word	0x08013560
 8001b40:	08013570 	.word	0x08013570
 8001b44:	08013580 	.word	0x08013580
 8001b48:	0801358c 	.word	0x0801358c
 8001b4c:	08013598 	.word	0x08013598
 8001b50:	080135a4 	.word	0x080135a4
 8001b54:	20000838 	.word	0x20000838
 8001b58:	2000084c 	.word	0x2000084c
 8001b5c:	2000a68c 	.word	0x2000a68c
 8001b60:	2000a794 	.word	0x2000a794
 8001b64:	40021000 	.word	0x40021000
 8001b68:	2000a694 	.word	0x2000a694
 8001b6c:	20000a28 	.word	0x20000a28
 8001b70:	2000a670 	.word	0x2000a670
 8001b74:	2000a798 	.word	0x2000a798
                    if (calculate_thickness_requested) {
 8001b78:	4b80      	ldr	r3, [pc, #512]	@ (8001d7c <ProcessUARTCommand+0x45c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d010      	beq.n	8001ba2 <ProcessUARTCommand+0x282>
                        calculate_thickness_requested = false;
 8001b80:	4b7e      	ldr	r3, [pc, #504]	@ (8001d7c <ProcessUARTCommand+0x45c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
                        ProcessDataByMethod(i); // Используем текущий набор параметров
 8001b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f002 fb41 	bl	8004214 <ProcessDataByMethod>
                        thickness_values[i] = thickness_value; // Сохраняем результат
 8001b92:	4b7b      	ldr	r3, [pc, #492]	@ (8001d80 <ProcessUARTCommand+0x460>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	497b      	ldr	r1, [pc, #492]	@ (8001d84 <ProcessUARTCommand+0x464>)
 8001b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	601a      	str	r2, [r3, #0]
                    }
                    HAL_Delay(10);
 8001ba2:	200a      	movs	r0, #10
 8001ba4:	f002 fc5a 	bl	800445c <HAL_Delay>
                while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8001ba8:	4b74      	ldr	r3, [pc, #464]	@ (8001d7c <ProcessUARTCommand+0x45c>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <ProcessUARTCommand+0x2a2>
 8001bb0:	f002 fc48 	bl	8004444 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d9da      	bls.n	8001b78 <ProcessUARTCommand+0x258>
                }
            }
           // PrintDataToUSB(i);
            fpga_data.data_ready = false;
 8001bc2:	4b71      	ldr	r3, [pc, #452]	@ (8001d88 <ProcessUARTCommand+0x468>)
 8001bc4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2710 	strb.w	r2, [r3, #1808]	@ 0x710
        }


        if(thermocouple_error) {
 8001bce:	4b6f      	ldr	r3, [pc, #444]	@ (8001d8c <ProcessUARTCommand+0x46c>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80ea 	beq.w	8001dac <ProcessUARTCommand+0x48c>
            snprintf(usb_msg, sizeof(usb_msg),
 8001bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bdc:	3301      	adds	r3, #1
 8001bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001be0:	4b6b      	ldr	r3, [pc, #428]	@ (8001d90 <ProcessUARTCommand+0x470>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001be6:	4b6b      	ldr	r3, [pc, #428]	@ (8001d94 <ProcessUARTCommand+0x474>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fcbc 	bl	8000568 <__aeabi_f2d>
 8001bf0:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8001bf4:	4b68      	ldr	r3, [pc, #416]	@ (8001d98 <ProcessUARTCommand+0x478>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fcb5 	bl	8000568 <__aeabi_f2d>
 8001bfe:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
                    "SET%d:%s|%lu|%.4f|%.2f|ERROR|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                    i+1, start_date, period, received_voltage, received_temp, thickness_values[i],
 8001c02:	4a60      	ldr	r2, [pc, #384]	@ (8001d84 <ProcessUARTCommand+0x464>)
 8001c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	681b      	ldr	r3, [r3, #0]
            snprintf(usb_msg, sizeof(usb_msg),
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fcaa 	bl	8000568 <__aeabi_f2d>
 8001c14:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                    params[i].wave_speed, params[i].threshold, params[i].threshold_zero_crossing,
 8001c18:	4a60      	ldr	r2, [pc, #384]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c1e:	019b      	lsls	r3, r3, #6
 8001c20:	4413      	add	r3, r2
 8001c22:	3304      	adds	r3, #4
 8001c24:	681b      	ldr	r3, [r3, #0]
            snprintf(usb_msg, sizeof(usb_msg),
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc9e 	bl	8000568 <__aeabi_f2d>
 8001c2c:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                    params[i].wave_speed, params[i].threshold, params[i].threshold_zero_crossing,
 8001c30:	4a5a      	ldr	r2, [pc, #360]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c36:	019b      	lsls	r3, r3, #6
 8001c38:	4413      	add	r3, r2
 8001c3a:	3318      	adds	r3, #24
 8001c3c:	681b      	ldr	r3, [r3, #0]
            snprintf(usb_msg, sizeof(usb_msg),
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc92 	bl	8000568 <__aeabi_f2d>
 8001c44:	4682      	mov	sl, r0
 8001c46:	468b      	mov	fp, r1
                    params[i].wave_speed, params[i].threshold, params[i].threshold_zero_crossing,
 8001c48:	4a54      	ldr	r2, [pc, #336]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c4e:	019b      	lsls	r3, r3, #6
 8001c50:	4413      	add	r3, r2
 8001c52:	331c      	adds	r3, #28
 8001c54:	681b      	ldr	r3, [r3, #0]
            snprintf(usb_msg, sizeof(usb_msg),
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc86 	bl	8000568 <__aeabi_f2d>
 8001c5c:	4680      	mov	r8, r0
 8001c5e:	4689      	mov	r9, r1
 8001c60:	4a4e      	ldr	r2, [pc, #312]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c66:	019b      	lsls	r3, r3, #6
 8001c68:	4413      	add	r3, r2
 8001c6a:	6819      	ldr	r1, [r3, #0]
 8001c6c:	6239      	str	r1, [r7, #32]
 8001c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c74:	019b      	lsls	r3, r3, #6
 8001c76:	4413      	add	r3, r2
 8001c78:	3320      	adds	r3, #32
 8001c7a:	681c      	ldr	r4, [r3, #0]
 8001c7c:	61fc      	str	r4, [r7, #28]
 8001c7e:	4a47      	ldr	r2, [pc, #284]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	4413      	add	r3, r2
 8001c88:	3308      	adds	r3, #8
 8001c8a:	681d      	ldr	r5, [r3, #0]
 8001c8c:	61bd      	str	r5, [r7, #24]
 8001c8e:	4a43      	ldr	r2, [pc, #268]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c94:	019b      	lsls	r3, r3, #6
 8001c96:	4413      	add	r3, r2
 8001c98:	330c      	adds	r3, #12
 8001c9a:	681e      	ldr	r6, [r3, #0]
 8001c9c:	617e      	str	r6, [r7, #20]
 8001c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3310      	adds	r3, #16
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4a3b      	ldr	r2, [pc, #236]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cb4:	019b      	lsls	r3, r3, #6
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3314      	adds	r3, #20
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	60fa      	str	r2, [r7, #12]
 8001cbe:	4a37      	ldr	r2, [pc, #220]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cc4:	019b      	lsls	r3, r3, #6
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3324      	adds	r3, #36	@ 0x24
 8001cca:	6819      	ldr	r1, [r3, #0]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	4a33      	ldr	r2, [pc, #204]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cd4:	019b      	lsls	r3, r3, #6
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3328      	adds	r3, #40	@ 0x28
 8001cda:	681e      	ldr	r6, [r3, #0]
 8001cdc:	4a2f      	ldr	r2, [pc, #188]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ce2:	019b      	lsls	r3, r3, #6
 8001ce4:	4413      	add	r3, r2
 8001ce6:	332c      	adds	r3, #44	@ 0x2c
 8001ce8:	681d      	ldr	r5, [r3, #0]
                    params[i].start_index, params[i].probe_length, params[i].first_left_strobe,
                    params[i].first_right_strobe, params[i].second_left_strobe, params[i].second_right_strobe,
                    params[i].method, params[i].end_index, params[i].cycle_number, params[i].sensor_number,
 8001cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cee:	019b      	lsls	r3, r3, #6
 8001cf0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001cf4:	4b29      	ldr	r3, [pc, #164]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001cf6:	18d4      	adds	r4, r2, r3
                    params[i].gain, start_date, period);
 8001cf8:	4a28      	ldr	r2, [pc, #160]	@ (8001d9c <ProcessUARTCommand+0x47c>)
 8001cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cfe:	019b      	lsls	r3, r3, #6
 8001d00:	4413      	add	r3, r2
 8001d02:	3338      	adds	r3, #56	@ 0x38
 8001d04:	681b      	ldr	r3, [r3, #0]
            snprintf(usb_msg, sizeof(usb_msg),
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fc2e 	bl	8000568 <__aeabi_f2d>
 8001d0c:	4b20      	ldr	r3, [pc, #128]	@ (8001d90 <ProcessUARTCommand+0x470>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	931b      	str	r3, [sp, #108]	@ 0x6c
 8001d12:	4b23      	ldr	r3, [pc, #140]	@ (8001da0 <ProcessUARTCommand+0x480>)
 8001d14:	931a      	str	r3, [sp, #104]	@ 0x68
 8001d16:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 8001d1a:	9417      	str	r4, [sp, #92]	@ 0x5c
 8001d1c:	9516      	str	r5, [sp, #88]	@ 0x58
 8001d1e:	9615      	str	r6, [sp, #84]	@ 0x54
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	9114      	str	r1, [sp, #80]	@ 0x50
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	9213      	str	r2, [sp, #76]	@ 0x4c
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	9312      	str	r3, [sp, #72]	@ 0x48
 8001d2c:	697e      	ldr	r6, [r7, #20]
 8001d2e:	9611      	str	r6, [sp, #68]	@ 0x44
 8001d30:	69bd      	ldr	r5, [r7, #24]
 8001d32:	9510      	str	r5, [sp, #64]	@ 0x40
 8001d34:	69fc      	ldr	r4, [r7, #28]
 8001d36:	940f      	str	r4, [sp, #60]	@ 0x3c
 8001d38:	6a39      	ldr	r1, [r7, #32]
 8001d3a:	910e      	str	r1, [sp, #56]	@ 0x38
 8001d3c:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8001d40:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8001d44:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001d48:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001d4c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001d50:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001d54:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001d58:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001d5c:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001d60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001d64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d66:	9201      	str	r2, [sp, #4]
 8001d68:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <ProcessUARTCommand+0x480>)
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <ProcessUARTCommand+0x484>)
 8001d70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d74:	480c      	ldr	r0, [pc, #48]	@ (8001da8 <ProcessUARTCommand+0x488>)
 8001d76:	f00d ffc1 	bl	800fcfc <sniprintf>
 8001d7a:	e0f3      	b.n	8001f64 <ProcessUARTCommand+0x644>
 8001d7c:	2000a798 	.word	0x2000a798
 8001d80:	2000a79c 	.word	0x2000a79c
 8001d84:	2000a674 	.word	0x2000a674
 8001d88:	20000a28 	.word	0x20000a28
 8001d8c:	2000a690 	.word	0x2000a690
 8001d90:	2000084c 	.word	0x2000084c
 8001d94:	20000a1c 	.word	0x20000a1c
 8001d98:	20000a20 	.word	0x20000a20
 8001d9c:	2000a694 	.word	0x2000a694
 8001da0:	20000838 	.word	0x20000838
 8001da4:	080135c4 	.word	0x080135c4
 8001da8:	20000438 	.word	0x20000438
        } else {
            snprintf(usb_msg, sizeof(usb_msg),
 8001dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001db0:	3301      	adds	r3, #1
 8001db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001db4:	4b96      	ldr	r3, [pc, #600]	@ (8002010 <ProcessUARTCommand+0x6f0>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001dba:	4b96      	ldr	r3, [pc, #600]	@ (8002014 <ProcessUARTCommand+0x6f4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fbd2 	bl	8000568 <__aeabi_f2d>
 8001dc4:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8001dc8:	4b93      	ldr	r3, [pc, #588]	@ (8002018 <ProcessUARTCommand+0x6f8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fbcb 	bl	8000568 <__aeabi_f2d>
 8001dd2:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001dd6:	4b91      	ldr	r3, [pc, #580]	@ (800201c <ProcessUARTCommand+0x6fc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbc4 	bl	8000568 <__aeabi_f2d>
 8001de0:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                    "SET%d:%s|%lu|%.4f|%.2f|%.2f|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                    i+1, start_date, period, received_voltage, received_temp, thermocouple_temperature,
                    thickness_values[i], params[i].wave_speed, params[i].threshold, params[i].threshold_zero_crossing,
 8001de4:	4a8e      	ldr	r2, [pc, #568]	@ (8002020 <ProcessUARTCommand+0x700>)
 8001de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	681b      	ldr	r3, [r3, #0]
            snprintf(usb_msg, sizeof(usb_msg),
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fbb9 	bl	8000568 <__aeabi_f2d>
 8001df6:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                    thickness_values[i], params[i].wave_speed, params[i].threshold, params[i].threshold_zero_crossing,
 8001dfa:	4a8a      	ldr	r2, [pc, #552]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e00:	019b      	lsls	r3, r3, #6
 8001e02:	4413      	add	r3, r2
 8001e04:	3304      	adds	r3, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
            snprintf(usb_msg, sizeof(usb_msg),
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fbad 	bl	8000568 <__aeabi_f2d>
 8001e0e:	e9c7 0108 	strd	r0, r1, [r7, #32]
                    thickness_values[i], params[i].wave_speed, params[i].threshold, params[i].threshold_zero_crossing,
 8001e12:	4a84      	ldr	r2, [pc, #528]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3318      	adds	r3, #24
 8001e1e:	681b      	ldr	r3, [r3, #0]
            snprintf(usb_msg, sizeof(usb_msg),
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fba1 	bl	8000568 <__aeabi_f2d>
 8001e26:	4682      	mov	sl, r0
 8001e28:	468b      	mov	fp, r1
                    thickness_values[i], params[i].wave_speed, params[i].threshold, params[i].threshold_zero_crossing,
 8001e2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e30:	019b      	lsls	r3, r3, #6
 8001e32:	4413      	add	r3, r2
 8001e34:	331c      	adds	r3, #28
 8001e36:	681b      	ldr	r3, [r3, #0]
            snprintf(usb_msg, sizeof(usb_msg),
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb95 	bl	8000568 <__aeabi_f2d>
 8001e3e:	4680      	mov	r8, r0
 8001e40:	4689      	mov	r9, r1
 8001e42:	4a78      	ldr	r2, [pc, #480]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e48:	019b      	lsls	r3, r3, #6
 8001e4a:	4413      	add	r3, r2
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	61f9      	str	r1, [r7, #28]
 8001e50:	4a74      	ldr	r2, [pc, #464]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e56:	019b      	lsls	r3, r3, #6
 8001e58:	4413      	add	r3, r2
 8001e5a:	3320      	adds	r3, #32
 8001e5c:	681c      	ldr	r4, [r3, #0]
 8001e5e:	61bc      	str	r4, [r7, #24]
 8001e60:	4a70      	ldr	r2, [pc, #448]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e66:	019b      	lsls	r3, r3, #6
 8001e68:	4413      	add	r3, r2
 8001e6a:	3308      	adds	r3, #8
 8001e6c:	681d      	ldr	r5, [r3, #0]
 8001e6e:	617d      	str	r5, [r7, #20]
 8001e70:	4a6c      	ldr	r2, [pc, #432]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e76:	019b      	lsls	r3, r3, #6
 8001e78:	4413      	add	r3, r2
 8001e7a:	330c      	adds	r3, #12
 8001e7c:	681e      	ldr	r6, [r3, #0]
 8001e7e:	613e      	str	r6, [r7, #16]
 8001e80:	4a68      	ldr	r2, [pc, #416]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e86:	019b      	lsls	r3, r3, #6
 8001e88:	4413      	add	r3, r2
 8001e8a:	3310      	adds	r3, #16
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	4a64      	ldr	r2, [pc, #400]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e96:	019b      	lsls	r3, r3, #6
 8001e98:	4413      	add	r3, r2
 8001e9a:	3314      	adds	r3, #20
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	60ba      	str	r2, [r7, #8]
 8001ea0:	4a60      	ldr	r2, [pc, #384]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ea6:	019b      	lsls	r3, r3, #6
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3324      	adds	r3, #36	@ 0x24
 8001eac:	6819      	ldr	r1, [r3, #0]
 8001eae:	6079      	str	r1, [r7, #4]
 8001eb0:	4a5c      	ldr	r2, [pc, #368]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001eb6:	019b      	lsls	r3, r3, #6
 8001eb8:	4413      	add	r3, r2
 8001eba:	3328      	adds	r3, #40	@ 0x28
 8001ebc:	681e      	ldr	r6, [r3, #0]
 8001ebe:	4a59      	ldr	r2, [pc, #356]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ec4:	019b      	lsls	r3, r3, #6
 8001ec6:	4413      	add	r3, r2
 8001ec8:	332c      	adds	r3, #44	@ 0x2c
 8001eca:	681d      	ldr	r5, [r3, #0]
                    params[i].start_index, params[i].probe_length, params[i].first_left_strobe,
                    params[i].first_right_strobe, params[i].second_left_strobe, params[i].second_right_strobe,
                    params[i].method, params[i].end_index, params[i].cycle_number, params[i].sensor_number,
 8001ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ed0:	019b      	lsls	r3, r3, #6
 8001ed2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001ed6:	4b53      	ldr	r3, [pc, #332]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001ed8:	18d4      	adds	r4, r2, r3
                    params[i].gain, start_date, period);
 8001eda:	4a52      	ldr	r2, [pc, #328]	@ (8002024 <ProcessUARTCommand+0x704>)
 8001edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ee0:	019b      	lsls	r3, r3, #6
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3338      	adds	r3, #56	@ 0x38
 8001ee6:	681b      	ldr	r3, [r3, #0]
            snprintf(usb_msg, sizeof(usb_msg),
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fb3d 	bl	8000568 <__aeabi_f2d>
 8001eee:	4b48      	ldr	r3, [pc, #288]	@ (8002010 <ProcessUARTCommand+0x6f0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	931d      	str	r3, [sp, #116]	@ 0x74
 8001ef4:	4b4c      	ldr	r3, [pc, #304]	@ (8002028 <ProcessUARTCommand+0x708>)
 8001ef6:	931c      	str	r3, [sp, #112]	@ 0x70
 8001ef8:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 8001efc:	9419      	str	r4, [sp, #100]	@ 0x64
 8001efe:	9518      	str	r5, [sp, #96]	@ 0x60
 8001f00:	9617      	str	r6, [sp, #92]	@ 0x5c
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	9116      	str	r1, [sp, #88]	@ 0x58
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	9215      	str	r2, [sp, #84]	@ 0x54
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	9314      	str	r3, [sp, #80]	@ 0x50
 8001f0e:	693e      	ldr	r6, [r7, #16]
 8001f10:	9613      	str	r6, [sp, #76]	@ 0x4c
 8001f12:	697d      	ldr	r5, [r7, #20]
 8001f14:	9512      	str	r5, [sp, #72]	@ 0x48
 8001f16:	69bc      	ldr	r4, [r7, #24]
 8001f18:	9411      	str	r4, [sp, #68]	@ 0x44
 8001f1a:	69f9      	ldr	r1, [r7, #28]
 8001f1c:	9110      	str	r1, [sp, #64]	@ 0x40
 8001f1e:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001f22:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8001f26:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f2a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001f2e:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001f32:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001f36:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001f3a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001f3e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001f42:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001f46:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001f4a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001f4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f50:	9201      	str	r2, [sp, #4]
 8001f52:	4b35      	ldr	r3, [pc, #212]	@ (8002028 <ProcessUARTCommand+0x708>)
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f58:	4a34      	ldr	r2, [pc, #208]	@ (800202c <ProcessUARTCommand+0x70c>)
 8001f5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f5e:	4834      	ldr	r0, [pc, #208]	@ (8002030 <ProcessUARTCommand+0x710>)
 8001f60:	f00d fecc 	bl	800fcfc <sniprintf>
        }

        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001f64:	4832      	ldr	r0, [pc, #200]	@ (8002030 <ProcessUARTCommand+0x710>)
 8001f66:	f7fe f993 	bl	8000290 <strlen>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4619      	mov	r1, r3
 8001f70:	482f      	ldr	r0, [pc, #188]	@ (8002030 <ProcessUARTCommand+0x710>)
 8001f72:	f00b faa3 	bl	800d4bc <CDC_Transmit_FS>
        HAL_Delay(10);
 8001f76:	200a      	movs	r0, #10
 8001f78:	f002 fa70 	bl	800445c <HAL_Delay>


        // Выключение пина перед отправкой по LoRa
        switch(i) {
 8001f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d823      	bhi.n	8001fcc <ProcessUARTCommand+0x6ac>
 8001f84:	a201      	add	r2, pc, #4	@ (adr r2, 8001f8c <ProcessUARTCommand+0x66c>)
 8001f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8a:	bf00      	nop
 8001f8c:	08001f9d 	.word	0x08001f9d
 8001f90:	08001fa9 	.word	0x08001fa9
 8001f94:	08001fb5 	.word	0x08001fb5
 8001f98:	08001fc1 	.word	0x08001fc1
            case 0: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET); break;
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2120      	movs	r1, #32
 8001fa0:	4824      	ldr	r0, [pc, #144]	@ (8002034 <ProcessUARTCommand+0x714>)
 8001fa2:	f003 f8cf 	bl	8005144 <HAL_GPIO_WritePin>
 8001fa6:	e011      	b.n	8001fcc <ProcessUARTCommand+0x6ac>
            case 1: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET); break;
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2140      	movs	r1, #64	@ 0x40
 8001fac:	4821      	ldr	r0, [pc, #132]	@ (8002034 <ProcessUARTCommand+0x714>)
 8001fae:	f003 f8c9 	bl	8005144 <HAL_GPIO_WritePin>
 8001fb2:	e00b      	b.n	8001fcc <ProcessUARTCommand+0x6ac>
            case 2: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); break;
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2108      	movs	r1, #8
 8001fb8:	481e      	ldr	r0, [pc, #120]	@ (8002034 <ProcessUARTCommand+0x714>)
 8001fba:	f003 f8c3 	bl	8005144 <HAL_GPIO_WritePin>
 8001fbe:	e005      	b.n	8001fcc <ProcessUARTCommand+0x6ac>
            case 3: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET); break;
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2110      	movs	r1, #16
 8001fc4:	481b      	ldr	r0, [pc, #108]	@ (8002034 <ProcessUARTCommand+0x714>)
 8001fc6:	f003 f8bd 	bl	8005144 <HAL_GPIO_WritePin>
 8001fca:	bf00      	nop
        }



        HAL_Delay(100);
 8001fcc:	2064      	movs	r0, #100	@ 0x64
 8001fce:	f002 fa45 	bl	800445c <HAL_Delay>
        SendMeasurementDataViaLoRa(i);
 8001fd2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001fd6:	f000 f831 	bl	800203c <SendMeasurementDataViaLoRa>
        HAL_Delay(2000);
 8001fda:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fde:	f002 fa3d 	bl	800445c <HAL_Delay>
        SendTestDataViaLoRa();
 8001fe2:	f000 fb57 	bl	8002694 <SendTestDataViaLoRa>
 8001fe6:	e000      	b.n	8001fea <ProcessUARTCommand+0x6ca>
            continue;
 8001fe8:	bf00      	nop
    for (int i = 0; i < 4; i++) {
 8001fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	f77f ad30 	ble.w	8001a5e <ProcessUARTCommand+0x13e>

    }

    // После завершения всех операций отправляем COMPLETE
    SendUARTResponse(COMPLETE_STRING);
 8001ffe:	480e      	ldr	r0, [pc, #56]	@ (8002038 <ProcessUARTCommand+0x718>)
 8002000:	f000 fb8e 	bl	8002720 <SendUARTResponse>
}
 8002004:	bf00      	nop
 8002006:	3794      	adds	r7, #148	@ 0x94
 8002008:	46bd      	mov	sp, r7
 800200a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800200e:	bf00      	nop
 8002010:	2000084c 	.word	0x2000084c
 8002014:	20000a1c 	.word	0x20000a1c
 8002018:	20000a20 	.word	0x20000a20
 800201c:	2000a68c 	.word	0x2000a68c
 8002020:	2000a674 	.word	0x2000a674
 8002024:	2000a694 	.word	0x2000a694
 8002028:	20000838 	.word	0x20000838
 800202c:	08013628 	.word	0x08013628
 8002030:	20000438 	.word	0x20000438
 8002034:	40021000 	.word	0x40021000
 8002038:	0801368c 	.word	0x0801368c

0800203c <SendMeasurementDataViaLoRa>:

/**
  * @brief Отправка данных измерений через LoRa для конкретного набора параметров
  */
void SendMeasurementDataViaLoRa(int param_index) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b0b4      	sub	sp, #208	@ 0xd0
 8002040:	af02      	add	r7, sp, #8
 8002042:	6078      	str	r0, [r7, #4]
    // Формируем данные для отправки
    uint8_t lora_data[128] = {0};
 8002044:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002048:	2280      	movs	r2, #128	@ 0x80
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f00d ff1e 	bl	800fe8e <memset>
    uint8_t data_index = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем period (4 байта) - временная переменная
    memcpy(&lora_data[data_index], &period, sizeof(uint32_t));
 8002058:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800205c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002060:	4413      	add	r3, r2
 8002062:	4abc      	ldr	r2, [pc, #752]	@ (8002354 <SendMeasurementDataViaLoRa+0x318>)
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8002068:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800206c:	3304      	adds	r3, #4
 800206e:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем received_voltage (4 байта) - из ProcessUARTCommand
    float voltage = received_voltage;
 8002072:	4bb9      	ldr	r3, [pc, #740]	@ (8002358 <SendMeasurementDataViaLoRa+0x31c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	643b      	str	r3, [r7, #64]	@ 0x40
    memcpy(&lora_data[data_index], &voltage, sizeof(float));
 8002078:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800207c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002080:	4413      	add	r3, r2
 8002082:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002084:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8002086:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800208a:	3304      	adds	r3, #4
 800208c:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем received_temp (4 байта) - из ProcessUARTCommand
    float temp = received_temp;
 8002090:	4bb2      	ldr	r3, [pc, #712]	@ (800235c <SendMeasurementDataViaLoRa+0x320>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memcpy(&lora_data[data_index], &temp, sizeof(float));
 8002096:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800209a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800209e:	4413      	add	r3, r2
 80020a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020a2:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 80020a4:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80020a8:	3304      	adds	r3, #4
 80020aa:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем thermocouple_temperature (4 байта) - глобальная переменная
    memcpy(&lora_data[data_index], &thermocouple_temperature, sizeof(float));
 80020ae:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80020b2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80020b6:	4413      	add	r3, r2
 80020b8:	4aa9      	ldr	r2, [pc, #676]	@ (8002360 <SendMeasurementDataViaLoRa+0x324>)
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 80020be:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80020c2:	3304      	adds	r3, #4
 80020c4:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем thickness_value (4 байта) - расчетная переменная для текущего набора
    memcpy(&lora_data[data_index], &thickness_values[param_index], sizeof(float));
 80020c8:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80020cc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80020d0:	4413      	add	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	0092      	lsls	r2, r2, #2
 80020d6:	49a3      	ldr	r1, [pc, #652]	@ (8002364 <SendMeasurementDataViaLoRa+0x328>)
 80020d8:	440a      	add	r2, r1
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 80020de:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80020e2:	3304      	adds	r3, #4
 80020e4:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем wave_speed (4 байта) - из параметров текущего набора
    float wave_speed = params[param_index].wave_speed;
 80020e8:	4a9f      	ldr	r2, [pc, #636]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	019b      	lsls	r3, r3, #6
 80020ee:	4413      	add	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    memcpy(&lora_data[data_index], &wave_speed, sizeof(float));
 80020f6:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80020fa:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80020fe:	4413      	add	r3, r2
 8002100:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002102:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8002104:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002108:	3304      	adds	r3, #4
 800210a:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем threshold (4 байта) - из параметров текущего набора
    float threshold = params[param_index].threshold;
 800210e:	4a96      	ldr	r2, [pc, #600]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	019b      	lsls	r3, r3, #6
 8002114:	4413      	add	r3, r2
 8002116:	3318      	adds	r3, #24
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(&lora_data[data_index], &threshold, sizeof(float));
 800211c:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002120:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002124:	4413      	add	r3, r2
 8002126:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002128:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 800212a:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800212e:	3304      	adds	r3, #4
 8002130:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем threshold_zero_crossing (4 байта) - из параметров текущего набора
    float threshold_zero = params[param_index].threshold_zero_crossing;
 8002134:	4a8c      	ldr	r2, [pc, #560]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	4413      	add	r3, r2
 800213c:	331c      	adds	r3, #28
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	633b      	str	r3, [r7, #48]	@ 0x30
    memcpy(&lora_data[data_index], &threshold_zero, sizeof(float));
 8002142:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002146:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800214a:	4413      	add	r3, r2
 800214c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800214e:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8002150:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002154:	3304      	adds	r3, #4
 8002156:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем start_index (4 байта) - из параметров текущего набора
    uint32_t start_idx = params[param_index].start_index;
 800215a:	4a83      	ldr	r2, [pc, #524]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	019b      	lsls	r3, r3, #6
 8002160:	4413      	add	r3, r2
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(&lora_data[data_index], &start_idx, sizeof(uint32_t));
 8002166:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800216a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800216e:	4413      	add	r3, r2
 8002170:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002172:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8002174:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002178:	3304      	adds	r3, #4
 800217a:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем probe_length (4 байта) - из параметров текущего набора
    uint32_t probe_len = params[param_index].probe_length;
 800217e:	4a7a      	ldr	r2, [pc, #488]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	019b      	lsls	r3, r3, #6
 8002184:	4413      	add	r3, r2
 8002186:	3320      	adds	r3, #32
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
    memcpy(&lora_data[data_index], &probe_len, sizeof(uint32_t));
 800218c:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002190:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002194:	4413      	add	r3, r2
 8002196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002198:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 800219a:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800219e:	3304      	adds	r3, #4
 80021a0:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем first_left_strobe (4 байта) - из параметров текущего набора
    uint32_t strobe_l1 = params[param_index].first_left_strobe;
 80021a4:	4a70      	ldr	r2, [pc, #448]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	4413      	add	r3, r2
 80021ac:	3308      	adds	r3, #8
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
    memcpy(&lora_data[data_index], &strobe_l1, sizeof(uint32_t));
 80021b2:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80021b6:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80021ba:	4413      	add	r3, r2
 80021bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021be:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 80021c0:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80021c4:	3304      	adds	r3, #4
 80021c6:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем first_right_strobe (4 байта) - из параметров текущего набора
    uint32_t strobe_r1 = params[param_index].first_right_strobe;
 80021ca:	4a67      	ldr	r2, [pc, #412]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	019b      	lsls	r3, r3, #6
 80021d0:	4413      	add	r3, r2
 80021d2:	330c      	adds	r3, #12
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	623b      	str	r3, [r7, #32]
    memcpy(&lora_data[data_index], &strobe_r1, sizeof(uint32_t));
 80021d8:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80021dc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80021e0:	4413      	add	r3, r2
 80021e2:	6a3a      	ldr	r2, [r7, #32]
 80021e4:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 80021e6:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80021ea:	3304      	adds	r3, #4
 80021ec:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем second_left_strobe (4 байта) - из параметров текущего набора
    uint32_t strobe_l2 = params[param_index].second_left_strobe;
 80021f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	019b      	lsls	r3, r3, #6
 80021f6:	4413      	add	r3, r2
 80021f8:	3310      	adds	r3, #16
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	61fb      	str	r3, [r7, #28]
    memcpy(&lora_data[data_index], &strobe_l2, sizeof(uint32_t));
 80021fe:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002202:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002206:	4413      	add	r3, r2
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 800220c:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002210:	3304      	adds	r3, #4
 8002212:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем second_right_strobe (4 байта) - из параметров текущего набора
    uint32_t strobe_r2 = params[param_index].second_right_strobe;
 8002216:	4a54      	ldr	r2, [pc, #336]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	019b      	lsls	r3, r3, #6
 800221c:	4413      	add	r3, r2
 800221e:	3314      	adds	r3, #20
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	61bb      	str	r3, [r7, #24]
    memcpy(&lora_data[data_index], &strobe_r2, sizeof(uint32_t));
 8002224:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002228:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800222c:	4413      	add	r3, r2
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8002232:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002236:	3304      	adds	r3, #4
 8002238:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем method (4 байта) - из параметров текущего набора
    uint32_t method = params[param_index].method;
 800223c:	4a4a      	ldr	r2, [pc, #296]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	019b      	lsls	r3, r3, #6
 8002242:	4413      	add	r3, r2
 8002244:	3324      	adds	r3, #36	@ 0x24
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	617b      	str	r3, [r7, #20]
    memcpy(&lora_data[data_index], &method, sizeof(uint32_t));
 800224a:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800224e:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002252:	4413      	add	r3, r2
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8002258:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800225c:	3304      	adds	r3, #4
 800225e:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем end_index (4 байта) - из параметров текущего набора
    uint32_t end_idx = params[param_index].end_index;
 8002262:	4a41      	ldr	r2, [pc, #260]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	019b      	lsls	r3, r3, #6
 8002268:	4413      	add	r3, r2
 800226a:	3328      	adds	r3, #40	@ 0x28
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	613b      	str	r3, [r7, #16]
    memcpy(&lora_data[data_index], &end_idx, sizeof(uint32_t));
 8002270:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002274:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002278:	4413      	add	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 800227e:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002282:	3304      	adds	r3, #4
 8002284:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем cycle_number (4 байта) - из параметров текущего набора
    uint32_t cycle_num = params[param_index].cycle_number;
 8002288:	4a37      	ldr	r2, [pc, #220]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	019b      	lsls	r3, r3, #6
 800228e:	4413      	add	r3, r2
 8002290:	332c      	adds	r3, #44	@ 0x2c
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
    memcpy(&lora_data[data_index], &cycle_num, sizeof(uint32_t));
 8002296:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800229a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800229e:	4413      	add	r3, r2
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 80022a4:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80022a8:	3304      	adds	r3, #4
 80022aa:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем sensor_number (максимум 16 байт) - из параметров текущего набора
    uint8_t sensor_len = strlen(params[param_index].sensor_number);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	019b      	lsls	r3, r3, #6
 80022b2:	3330      	adds	r3, #48	@ 0x30
 80022b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 80022b6:	4413      	add	r3, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fd ffe9 	bl	8000290 <strlen>
 80022be:	4603      	mov	r3, r0
 80022c0:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
    if (sensor_len > 15) sensor_len = 15;
 80022c4:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80022c8:	2b0f      	cmp	r3, #15
 80022ca:	d902      	bls.n	80022d2 <SendMeasurementDataViaLoRa+0x296>
 80022cc:	230f      	movs	r3, #15
 80022ce:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
    lora_data[data_index++] = sensor_len;
 80022d2:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	f887 20c6 	strb.w	r2, [r7, #198]	@ 0xc6
 80022dc:	33c8      	adds	r3, #200	@ 0xc8
 80022de:	443b      	add	r3, r7
 80022e0:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 80022e4:	f803 2c84 	strb.w	r2, [r3, #-132]
    memcpy(&lora_data[data_index], params[param_index].sensor_number, sensor_len);
 80022e8:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 80022ec:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80022f0:	18d0      	adds	r0, r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	3330      	adds	r3, #48	@ 0x30
 80022f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 80022fa:	4413      	add	r3, r2
 80022fc:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8002300:	4619      	mov	r1, r3
 8002302:	f00d fee8 	bl	80100d6 <memcpy>
    data_index += sensor_len;
 8002306:	f897 20c6 	ldrb.w	r2, [r7, #198]	@ 0xc6
 800230a:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800230e:	4413      	add	r3, r2
 8002310:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Добавляем gain (4 байта) - из параметров текущего набора
    float gain = params[param_index].gain;
 8002314:	4a14      	ldr	r2, [pc, #80]	@ (8002368 <SendMeasurementDataViaLoRa+0x32c>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	019b      	lsls	r3, r3, #6
 800231a:	4413      	add	r3, r2
 800231c:	3338      	adds	r3, #56	@ 0x38
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60bb      	str	r3, [r7, #8]
    memcpy(&lora_data[data_index], &gain, sizeof(float));
 8002322:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002326:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800232a:	4413      	add	r3, r2
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8002330:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8002334:	3304      	adds	r3, #4
 8002336:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    // Общая длина данных
    uint8_t total_length = data_index;
 800233a:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800233e:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5

    // Настройка параметров передачи LoRa
    sx126x_set_tx_params(&radio, pa_power, SX126X_RAMP_800_US);
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <SendMeasurementDataViaLoRa+0x330>)
 8002344:	f993 3000 	ldrsb.w	r3, [r3]
 8002348:	2205      	movs	r2, #5
 800234a:	4619      	mov	r1, r3
 800234c:	4808      	ldr	r0, [pc, #32]	@ (8002370 <SendMeasurementDataViaLoRa+0x334>)
 800234e:	f008 fd48 	bl	800ade2 <sx126x_set_tx_params>

    // Ожидаем, пока модуль освободится
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET) {
 8002352:	e012      	b.n	800237a <SendMeasurementDataViaLoRa+0x33e>
 8002354:	2000084c 	.word	0x2000084c
 8002358:	20000a1c 	.word	0x20000a1c
 800235c:	20000a20 	.word	0x20000a20
 8002360:	2000a68c 	.word	0x2000a68c
 8002364:	2000a674 	.word	0x2000a674
 8002368:	2000a694 	.word	0x2000a694
 800236c:	20000000 	.word	0x20000000
 8002370:	200009ec 	.word	0x200009ec
        HAL_Delay(1);
 8002374:	2001      	movs	r0, #1
 8002376:	f002 f871 	bl	800445c <HAL_Delay>
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET) {
 800237a:	2110      	movs	r1, #16
 800237c:	4821      	ldr	r0, [pc, #132]	@ (8002404 <SendMeasurementDataViaLoRa+0x3c8>)
 800237e:	f002 fec9 	bl	8005114 <HAL_GPIO_ReadPin>
 8002382:	4603      	mov	r3, r0
 8002384:	2b01      	cmp	r3, #1
 8002386:	d0f5      	beq.n	8002374 <SendMeasurementDataViaLoRa+0x338>
    }

    // Записываем данные в буфер модуля LoRa
    sx126x_status_t status = sx126x_write_buffer(&radio, 0, lora_data, total_length);
 8002388:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 800238c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002390:	2100      	movs	r1, #0
 8002392:	481d      	ldr	r0, [pc, #116]	@ (8002408 <SendMeasurementDataViaLoRa+0x3cc>)
 8002394:	f008 fc59 	bl	800ac4a <sx126x_write_buffer>
 8002398:	4603      	mov	r3, r0
 800239a:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
    if (status != SX126X_STATUS_OK) {
 800239e:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d127      	bne.n	80023f6 <SendMeasurementDataViaLoRa+0x3ba>
        return;
    }

    // Обновляем параметры пакета с актуальной длиной
    pkt_params.pld_len_in_bytes = total_length;
 80023a6:	4a19      	ldr	r2, [pc, #100]	@ (800240c <SendMeasurementDataViaLoRa+0x3d0>)
 80023a8:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 80023ac:	70d3      	strb	r3, [r2, #3]
    status = sx126x_set_lora_pkt_params(&radio, &pkt_params);
 80023ae:	4917      	ldr	r1, [pc, #92]	@ (800240c <SendMeasurementDataViaLoRa+0x3d0>)
 80023b0:	4815      	ldr	r0, [pc, #84]	@ (8002408 <SendMeasurementDataViaLoRa+0x3cc>)
 80023b2:	f008 fd64 	bl	800ae7e <sx126x_set_lora_pkt_params>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
    if (status != SX126X_STATUS_OK) {
 80023bc:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d11a      	bne.n	80023fa <SendMeasurementDataViaLoRa+0x3be>
        return;
    }

    // Запускаем передачу
    status = sx126x_set_tx(&radio, SX126X_MAX_TIMEOUT_IN_MS);
 80023c4:	4912      	ldr	r1, [pc, #72]	@ (8002410 <SendMeasurementDataViaLoRa+0x3d4>)
 80023c6:	4810      	ldr	r0, [pc, #64]	@ (8002408 <SendMeasurementDataViaLoRa+0x3cc>)
 80023c8:	f008 fb6e 	bl	800aaa8 <sx126x_set_tx>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
    if (status != SX126X_STATUS_OK) {
 80023d2:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d110      	bne.n	80023fc <SendMeasurementDataViaLoRa+0x3c0>
        // Ошибка передачи
    } else {
        snprintf(usb_msg, sizeof(usb_msg), "LoRa measurement data sent for params[%d] (%d bytes)", param_index, total_length);
 80023da:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002414 <SendMeasurementDataViaLoRa+0x3d8>)
 80023e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80023e8:	480b      	ldr	r0, [pc, #44]	@ (8002418 <SendMeasurementDataViaLoRa+0x3dc>)
 80023ea:	f00d fc87 	bl	800fcfc <sniprintf>
        SendUSBDebugMessage(usb_msg);
 80023ee:	480a      	ldr	r0, [pc, #40]	@ (8002418 <SendMeasurementDataViaLoRa+0x3dc>)
 80023f0:	f7fe fe26 	bl	8001040 <SendUSBDebugMessage>
 80023f4:	e002      	b.n	80023fc <SendMeasurementDataViaLoRa+0x3c0>
        return;
 80023f6:	bf00      	nop
 80023f8:	e000      	b.n	80023fc <SendMeasurementDataViaLoRa+0x3c0>
        return;
 80023fa:	bf00      	nop
    }
}
 80023fc:	37c8      	adds	r7, #200	@ 0xc8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40020800 	.word	0x40020800
 8002408:	200009ec 	.word	0x200009ec
 800240c:	20000a0c 	.word	0x20000a0c
 8002410:	0003ffff 	.word	0x0003ffff
 8002414:	08013698 	.word	0x08013698
 8002418:	20000438 	.word	0x20000438

0800241c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1) {
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a21      	ldr	r2, [pc, #132]	@ (80024b0 <HAL_UART_RxCpltCallback+0x94>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d13b      	bne.n	80024a6 <HAL_UART_RxCpltCallback+0x8a>
        uart_last_rx_time = HAL_GetTick();
 800242e:	f002 f809 	bl	8004444 <HAL_GetTick>
 8002432:	4603      	mov	r3, r0
 8002434:	4a1f      	ldr	r2, [pc, #124]	@ (80024b4 <HAL_UART_RxCpltCallback+0x98>)
 8002436:	6013      	str	r3, [r2, #0]

        if(uart_rx_buf[uart_rx_pos] == '\n' || uart_rx_pos >= UART_RX_BUF_SIZE-1) {
 8002438:	4b1f      	ldr	r3, [pc, #124]	@ (80024b8 <HAL_UART_RxCpltCallback+0x9c>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	4b1f      	ldr	r3, [pc, #124]	@ (80024bc <HAL_UART_RxCpltCallback+0xa0>)
 8002440:	5c9b      	ldrb	r3, [r3, r2]
 8002442:	2b0a      	cmp	r3, #10
 8002444:	d003      	beq.n	800244e <HAL_UART_RxCpltCallback+0x32>
 8002446:	4b1c      	ldr	r3, [pc, #112]	@ (80024b8 <HAL_UART_RxCpltCallback+0x9c>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b7e      	cmp	r3, #126	@ 0x7e
 800244c:	d91b      	bls.n	8002486 <HAL_UART_RxCpltCallback+0x6a>
            // Копируем данные в буфер для обработки
            memcpy((void*)uart_rx_data, uart_rx_buf, uart_rx_pos);
 800244e:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <HAL_UART_RxCpltCallback+0x9c>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	4919      	ldr	r1, [pc, #100]	@ (80024bc <HAL_UART_RxCpltCallback+0xa0>)
 8002456:	481a      	ldr	r0, [pc, #104]	@ (80024c0 <HAL_UART_RxCpltCallback+0xa4>)
 8002458:	f00d fe3d 	bl	80100d6 <memcpy>
            uart_rx_len = uart_rx_pos;
 800245c:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <HAL_UART_RxCpltCallback+0x9c>)
 800245e:	781a      	ldrb	r2, [r3, #0]
 8002460:	4b18      	ldr	r3, [pc, #96]	@ (80024c4 <HAL_UART_RxCpltCallback+0xa8>)
 8002462:	701a      	strb	r2, [r3, #0]
            uart_message_received = 1;
 8002464:	4b18      	ldr	r3, [pc, #96]	@ (80024c8 <HAL_UART_RxCpltCallback+0xac>)
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]

            uart_rx_pos = 0;
 800246a:	4b13      	ldr	r3, [pc, #76]	@ (80024b8 <HAL_UART_RxCpltCallback+0x9c>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
            memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8002470:	2280      	movs	r2, #128	@ 0x80
 8002472:	2100      	movs	r1, #0
 8002474:	4811      	ldr	r0, [pc, #68]	@ (80024bc <HAL_UART_RxCpltCallback+0xa0>)
 8002476:	f00d fd0a 	bl	800fe8e <memset>

            // Немедленно запускаем прием следующего байта
            HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 800247a:	2201      	movs	r2, #1
 800247c:	490f      	ldr	r1, [pc, #60]	@ (80024bc <HAL_UART_RxCpltCallback+0xa0>)
 800247e:	4813      	ldr	r0, [pc, #76]	@ (80024cc <HAL_UART_RxCpltCallback+0xb0>)
 8002480:	f005 ff4b 	bl	800831a <HAL_UART_Receive_IT>
        } else {
            uart_rx_pos++;
            HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buf[uart_rx_pos], 1);
        }
    }
}
 8002484:	e00f      	b.n	80024a6 <HAL_UART_RxCpltCallback+0x8a>
            uart_rx_pos++;
 8002486:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <HAL_UART_RxCpltCallback+0x9c>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <HAL_UART_RxCpltCallback+0x9c>)
 8002490:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buf[uart_rx_pos], 1);
 8002492:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <HAL_UART_RxCpltCallback+0x9c>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <HAL_UART_RxCpltCallback+0xa0>)
 800249a:	4413      	add	r3, r2
 800249c:	2201      	movs	r2, #1
 800249e:	4619      	mov	r1, r3
 80024a0:	480a      	ldr	r0, [pc, #40]	@ (80024cc <HAL_UART_RxCpltCallback+0xb0>)
 80024a2:	f005 ff3a 	bl	800831a <HAL_UART_Receive_IT>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40011000 	.word	0x40011000
 80024b4:	20000964 	.word	0x20000964
 80024b8:	20000960 	.word	0x20000960
 80024bc:	200008e0 	.word	0x200008e0
 80024c0:	20000968 	.word	0x20000968
 80024c4:	200009e8 	.word	0x200009e8
 80024c8:	200009e9 	.word	0x200009e9
 80024cc:	200003a0 	.word	0x200003a0

080024d0 <InitializeLoRa>:

/**
  * @brief Инициализация модуля LoRa
  */
bool InitializeLoRa(void) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af02      	add	r7, sp, #8
    // Initialize radio context
    radio.cs_port = sx1262_cs_port;
 80024d6:	4b64      	ldr	r3, [pc, #400]	@ (8002668 <InitializeLoRa+0x198>)
 80024d8:	4a64      	ldr	r2, [pc, #400]	@ (800266c <InitializeLoRa+0x19c>)
 80024da:	601a      	str	r2, [r3, #0]
    radio.cs_pin = sx1262_cs_pin;
 80024dc:	4b62      	ldr	r3, [pc, #392]	@ (8002668 <InitializeLoRa+0x198>)
 80024de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024e2:	809a      	strh	r2, [r3, #4]
    radio.busy_port = sx1262_busy_port;
 80024e4:	4b60      	ldr	r3, [pc, #384]	@ (8002668 <InitializeLoRa+0x198>)
 80024e6:	4a62      	ldr	r2, [pc, #392]	@ (8002670 <InitializeLoRa+0x1a0>)
 80024e8:	609a      	str	r2, [r3, #8]
    radio.busy_pin = sx1262_busy_pin;
 80024ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002668 <InitializeLoRa+0x198>)
 80024ec:	2210      	movs	r2, #16
 80024ee:	819a      	strh	r2, [r3, #12]
    radio.reset_port = sx1262_reset_port;
 80024f0:	4b5d      	ldr	r3, [pc, #372]	@ (8002668 <InitializeLoRa+0x198>)
 80024f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002670 <InitializeLoRa+0x1a0>)
 80024f4:	611a      	str	r2, [r3, #16]
    radio.reset_pin = sx1262_reset_pin;
 80024f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002668 <InitializeLoRa+0x198>)
 80024f8:	2280      	movs	r2, #128	@ 0x80
 80024fa:	829a      	strh	r2, [r3, #20]
    radio.hspi = &hspi2;
 80024fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002668 <InitializeLoRa+0x198>)
 80024fe:	4a5d      	ldr	r2, [pc, #372]	@ (8002674 <InitializeLoRa+0x1a4>)
 8002500:	619a      	str	r2, [r3, #24]

    lora_params.sf = SX126X_LORA_SF9;
 8002502:	4b5d      	ldr	r3, [pc, #372]	@ (8002678 <InitializeLoRa+0x1a8>)
 8002504:	2209      	movs	r2, #9
 8002506:	701a      	strb	r2, [r3, #0]
    lora_params.bw = SX126X_LORA_BW_125;
 8002508:	4b5b      	ldr	r3, [pc, #364]	@ (8002678 <InitializeLoRa+0x1a8>)
 800250a:	2204      	movs	r2, #4
 800250c:	705a      	strb	r2, [r3, #1]
    lora_params.cr = SX126X_LORA_CR_4_5;
 800250e:	4b5a      	ldr	r3, [pc, #360]	@ (8002678 <InitializeLoRa+0x1a8>)
 8002510:	2201      	movs	r2, #1
 8002512:	709a      	strb	r2, [r3, #2]
    lora_params.ldro = 0x00;
 8002514:	4b58      	ldr	r3, [pc, #352]	@ (8002678 <InitializeLoRa+0x1a8>)
 8002516:	2200      	movs	r2, #0
 8002518:	70da      	strb	r2, [r3, #3]

    pkt_params.preamble_len_in_symb = 12;
 800251a:	4b58      	ldr	r3, [pc, #352]	@ (800267c <InitializeLoRa+0x1ac>)
 800251c:	220c      	movs	r2, #12
 800251e:	801a      	strh	r2, [r3, #0]
    pkt_params.header_type = SX126X_LORA_PKT_EXPLICIT;
 8002520:	4b56      	ldr	r3, [pc, #344]	@ (800267c <InitializeLoRa+0x1ac>)
 8002522:	2200      	movs	r2, #0
 8002524:	709a      	strb	r2, [r3, #2]
    pkt_params.pld_len_in_bytes = 128;
 8002526:	4b55      	ldr	r3, [pc, #340]	@ (800267c <InitializeLoRa+0x1ac>)
 8002528:	2280      	movs	r2, #128	@ 0x80
 800252a:	70da      	strb	r2, [r3, #3]
    pkt_params.crc_is_on = 0x01;
 800252c:	4b53      	ldr	r3, [pc, #332]	@ (800267c <InitializeLoRa+0x1ac>)
 800252e:	2201      	movs	r2, #1
 8002530:	711a      	strb	r2, [r3, #4]
    pkt_params.invert_iq_is_on = 0x00;
 8002532:	4b52      	ldr	r3, [pc, #328]	@ (800267c <InitializeLoRa+0x1ac>)
 8002534:	2200      	movs	r2, #0
 8002536:	715a      	strb	r2, [r3, #5]

    pa_params.pa_duty_cycle = 0x04;
 8002538:	4b51      	ldr	r3, [pc, #324]	@ (8002680 <InitializeLoRa+0x1b0>)
 800253a:	2204      	movs	r2, #4
 800253c:	701a      	strb	r2, [r3, #0]
    pa_params.hp_max = 0x07;
 800253e:	4b50      	ldr	r3, [pc, #320]	@ (8002680 <InitializeLoRa+0x1b0>)
 8002540:	2207      	movs	r2, #7
 8002542:	705a      	strb	r2, [r3, #1]
    pa_params.device_sel = 0x00;
 8002544:	4b4e      	ldr	r3, [pc, #312]	@ (8002680 <InitializeLoRa+0x1b0>)
 8002546:	2200      	movs	r2, #0
 8002548:	709a      	strb	r2, [r3, #2]
    pa_params.pa_lut = 0x01;
 800254a:	4b4d      	ldr	r3, [pc, #308]	@ (8002680 <InitializeLoRa+0x1b0>)
 800254c:	2201      	movs	r2, #1
 800254e:	70da      	strb	r2, [r3, #3]

    pa_power = 20;
 8002550:	4b4c      	ldr	r3, [pc, #304]	@ (8002684 <InitializeLoRa+0x1b4>)
 8002552:	2214      	movs	r2, #20
 8002554:	701a      	strb	r2, [r3, #0]
    frequency = 868900000U;
 8002556:	4b4c      	ldr	r3, [pc, #304]	@ (8002688 <InitializeLoRa+0x1b8>)
 8002558:	4a4c      	ldr	r2, [pc, #304]	@ (800268c <InitializeLoRa+0x1bc>)
 800255a:	601a      	str	r2, [r3, #0]

    sx126x_status_t status = sx126x_hal_reset(&radio);
 800255c:	4842      	ldr	r0, [pc, #264]	@ (8002668 <InitializeLoRa+0x198>)
 800255e:	f008 fe73 	bl	800b248 <sx126x_hal_reset>
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
    if (status != SX126X_STATUS_OK) {
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <InitializeLoRa+0xa0>
        return false;
 800256c:	2300      	movs	r3, #0
 800256e:	e077      	b.n	8002660 <InitializeLoRa+0x190>
    }

    sx126x_hal_wakeup(&radio);
 8002570:	483d      	ldr	r0, [pc, #244]	@ (8002668 <InitializeLoRa+0x198>)
 8002572:	f008 fe8d 	bl	800b290 <sx126x_hal_wakeup>
    HAL_Delay(10);
 8002576:	200a      	movs	r0, #10
 8002578:	f001 ff70 	bl	800445c <HAL_Delay>

    sx126x_set_standby(&radio, SX126X_STANDBY_CFG_RC);
 800257c:	2100      	movs	r1, #0
 800257e:	483a      	ldr	r0, [pc, #232]	@ (8002668 <InitializeLoRa+0x198>)
 8002580:	f008 fa7a 	bl	800aa78 <sx126x_set_standby>
    HAL_Delay(10);
 8002584:	200a      	movs	r0, #10
 8002586:	f001 ff69 	bl	800445c <HAL_Delay>

    sx126x_set_dio3_as_tcxo_ctrl(&radio, SX126X_TCXO_CTRL_2_4V, 5);
 800258a:	2205      	movs	r2, #5
 800258c:	2104      	movs	r1, #4
 800258e:	4836      	ldr	r0, [pc, #216]	@ (8002668 <InitializeLoRa+0x198>)
 8002590:	f008 fbb5 	bl	800acfe <sx126x_set_dio3_as_tcxo_ctrl>
    HAL_Delay(10);
 8002594:	200a      	movs	r0, #10
 8002596:	f001 ff61 	bl	800445c <HAL_Delay>

    sx126x_cal(&radio, 0xFF);
 800259a:	21ff      	movs	r1, #255	@ 0xff
 800259c:	4832      	ldr	r0, [pc, #200]	@ (8002668 <InitializeLoRa+0x198>)
 800259e:	f008 fad3 	bl	800ab48 <sx126x_cal>
    HAL_Delay(10);
 80025a2:	200a      	movs	r0, #10
 80025a4:	f001 ff5a 	bl	800445c <HAL_Delay>

    sx126x_set_standby(&radio, SX126X_STANDBY_CFG_XOSC);
 80025a8:	2101      	movs	r1, #1
 80025aa:	482f      	ldr	r0, [pc, #188]	@ (8002668 <InitializeLoRa+0x198>)
 80025ac:	f008 fa64 	bl	800aa78 <sx126x_set_standby>
    HAL_Delay(10);
 80025b0:	200a      	movs	r0, #10
 80025b2:	f001 ff53 	bl	800445c <HAL_Delay>

    sx126x_set_reg_mode(&radio, SX126X_REG_MODE_DCDC);
 80025b6:	2101      	movs	r1, #1
 80025b8:	482b      	ldr	r0, [pc, #172]	@ (8002668 <InitializeLoRa+0x198>)
 80025ba:	f008 faad 	bl	800ab18 <sx126x_set_reg_mode>
    HAL_Delay(10);
 80025be:	200a      	movs	r0, #10
 80025c0:	f001 ff4c 	bl	800445c <HAL_Delay>

    sx126x_set_pkt_type(&radio, SX126X_PKT_TYPE_LORA);
 80025c4:	2101      	movs	r1, #1
 80025c6:	4828      	ldr	r0, [pc, #160]	@ (8002668 <InitializeLoRa+0x198>)
 80025c8:	f008 fbf3 	bl	800adb2 <sx126x_set_pkt_type>
    HAL_Delay(10);
 80025cc:	200a      	movs	r0, #10
 80025ce:	f001 ff45 	bl	800445c <HAL_Delay>

    sx126x_set_lora_mod_params(&radio, &lora_params);
 80025d2:	4929      	ldr	r1, [pc, #164]	@ (8002678 <InitializeLoRa+0x1a8>)
 80025d4:	4824      	ldr	r0, [pc, #144]	@ (8002668 <InitializeLoRa+0x198>)
 80025d6:	f008 fc20 	bl	800ae1a <sx126x_set_lora_mod_params>
    HAL_Delay(10);
 80025da:	200a      	movs	r0, #10
 80025dc:	f001 ff3e 	bl	800445c <HAL_Delay>

    sx126x_set_lora_pkt_params(&radio, &pkt_params);
 80025e0:	4926      	ldr	r1, [pc, #152]	@ (800267c <InitializeLoRa+0x1ac>)
 80025e2:	4821      	ldr	r0, [pc, #132]	@ (8002668 <InitializeLoRa+0x198>)
 80025e4:	f008 fc4b 	bl	800ae7e <sx126x_set_lora_pkt_params>
    HAL_Delay(10);
 80025e8:	200a      	movs	r0, #10
 80025ea:	f001 ff37 	bl	800445c <HAL_Delay>

    sx126x_set_lora_sync_word(&radio, 0x12);
 80025ee:	2112      	movs	r1, #18
 80025f0:	481d      	ldr	r0, [pc, #116]	@ (8002668 <InitializeLoRa+0x198>)
 80025f2:	f008 fcf5 	bl	800afe0 <sx126x_set_lora_sync_word>
    HAL_Delay(10);
 80025f6:	200a      	movs	r0, #10
 80025f8:	f001 ff30 	bl	800445c <HAL_Delay>

    sx126x_set_rf_freq(&radio, frequency);
 80025fc:	4b22      	ldr	r3, [pc, #136]	@ (8002688 <InitializeLoRa+0x1b8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	4819      	ldr	r0, [pc, #100]	@ (8002668 <InitializeLoRa+0x198>)
 8002604:	f008 fb9f 	bl	800ad46 <sx126x_set_rf_freq>
    HAL_Delay(10);
 8002608:	200a      	movs	r0, #10
 800260a:	f001 ff27 	bl	800445c <HAL_Delay>

    sx126x_set_pa_cfg(&radio, &pa_params);
 800260e:	491c      	ldr	r1, [pc, #112]	@ (8002680 <InitializeLoRa+0x1b0>)
 8002610:	4815      	ldr	r0, [pc, #84]	@ (8002668 <InitializeLoRa+0x198>)
 8002612:	f008 fab1 	bl	800ab78 <sx126x_set_pa_cfg>
    HAL_Delay(10);
 8002616:	200a      	movs	r0, #10
 8002618:	f001 ff20 	bl	800445c <HAL_Delay>

    sx126x_set_tx_params(&radio, pa_power, SX126X_RAMP_800_US);
 800261c:	4b19      	ldr	r3, [pc, #100]	@ (8002684 <InitializeLoRa+0x1b4>)
 800261e:	f993 3000 	ldrsb.w	r3, [r3]
 8002622:	2205      	movs	r2, #5
 8002624:	4619      	mov	r1, r3
 8002626:	4810      	ldr	r0, [pc, #64]	@ (8002668 <InitializeLoRa+0x198>)
 8002628:	f008 fbdb 	bl	800ade2 <sx126x_set_tx_params>
    HAL_Delay(10);
 800262c:	200a      	movs	r0, #10
 800262e:	f001 ff15 	bl	800445c <HAL_Delay>

    sx126x_set_buffer_base_address(&radio, 0x00, 0x00);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	480c      	ldr	r0, [pc, #48]	@ (8002668 <InitializeLoRa+0x198>)
 8002638:	f008 fc83 	bl	800af42 <sx126x_set_buffer_base_address>
    HAL_Delay(10);
 800263c:	200a      	movs	r0, #10
 800263e:	f001 ff0d 	bl	800445c <HAL_Delay>

    sx126x_set_dio_irq_params(&radio,
 8002642:	2300      	movs	r3, #0
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2300      	movs	r3, #0
 8002648:	2203      	movs	r2, #3
 800264a:	2103      	movs	r1, #3
 800264c:	4806      	ldr	r0, [pc, #24]	@ (8002668 <InitializeLoRa+0x198>)
 800264e:	f008 fb19 	bl	800ac84 <sx126x_set_dio_irq_params>
            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE,
            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE,
            SX126X_IRQ_NONE,
            SX126X_IRQ_NONE);
    HAL_Delay(100);
 8002652:	2064      	movs	r0, #100	@ 0x64
 8002654:	f001 ff02 	bl	800445c <HAL_Delay>

    lora_initialized = true;
 8002658:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <InitializeLoRa+0x1c0>)
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
    return true;
 800265e:	2301      	movs	r3, #1
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200009ec 	.word	0x200009ec
 800266c:	40020400 	.word	0x40020400
 8002670:	40020800 	.word	0x40020800
 8002674:	20000300 	.word	0x20000300
 8002678:	20000a08 	.word	0x20000a08
 800267c:	20000a0c 	.word	0x20000a0c
 8002680:	20000a14 	.word	0x20000a14
 8002684:	20000000 	.word	0x20000000
 8002688:	20000004 	.word	0x20000004
 800268c:	33ca5ca0 	.word	0x33ca5ca0
 8002690:	20000a18 	.word	0x20000a18

08002694 <SendTestDataViaLoRa>:

/**
  * @brief Отправка данных через LoRa
  */
void SendTestDataViaLoRa(void) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
    if (!lora_initialized) {
 800269a:	4b1c      	ldr	r3, [pc, #112]	@ (800270c <SendTestDataViaLoRa+0x78>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	f083 0301 	eor.w	r3, r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <SendTestDataViaLoRa+0x24>
        if (!InitializeLoRa()) {
 80026a8:	f7ff ff12 	bl	80024d0 <InitializeLoRa>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f083 0301 	eor.w	r3, r3, #1
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d123      	bne.n	8002700 <SendTestDataViaLoRa+0x6c>
            return;
        }
    }

    // Создаем тестовые данные
    const uint8_t test_data[] = {1};
 80026b8:	2301      	movs	r3, #1
 80026ba:	713b      	strb	r3, [r7, #4]

    sx126x_set_tx_params(&radio, pa_power, SX126X_RAMP_800_US);
 80026bc:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <SendTestDataViaLoRa+0x7c>)
 80026be:	f993 3000 	ldrsb.w	r3, [r3]
 80026c2:	2205      	movs	r2, #5
 80026c4:	4619      	mov	r1, r3
 80026c6:	4813      	ldr	r0, [pc, #76]	@ (8002714 <SendTestDataViaLoRa+0x80>)
 80026c8:	f008 fb8b 	bl	800ade2 <sx126x_set_tx_params>

    // Wait while module is busy
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET);
 80026cc:	bf00      	nop
 80026ce:	2110      	movs	r1, #16
 80026d0:	4811      	ldr	r0, [pc, #68]	@ (8002718 <SendTestDataViaLoRa+0x84>)
 80026d2:	f002 fd1f 	bl	8005114 <HAL_GPIO_ReadPin>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d0f8      	beq.n	80026ce <SendTestDataViaLoRa+0x3a>

    // Write data to buffer
    sx126x_status_t status = sx126x_write_buffer(&radio, 0, test_data, sizeof(test_data));
 80026dc:	1d3a      	adds	r2, r7, #4
 80026de:	2301      	movs	r3, #1
 80026e0:	2100      	movs	r1, #0
 80026e2:	480c      	ldr	r0, [pc, #48]	@ (8002714 <SendTestDataViaLoRa+0x80>)
 80026e4:	f008 fab1 	bl	800ac4a <sx126x_write_buffer>
 80026e8:	4603      	mov	r3, r0
 80026ea:	71fb      	strb	r3, [r7, #7]
    if (status != SX126X_STATUS_OK) {
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d108      	bne.n	8002704 <SendTestDataViaLoRa+0x70>
        return;
    }

    // Start transmission
    status = sx126x_set_tx(&radio, SX126X_MAX_TIMEOUT_IN_MS);
 80026f2:	490a      	ldr	r1, [pc, #40]	@ (800271c <SendTestDataViaLoRa+0x88>)
 80026f4:	4807      	ldr	r0, [pc, #28]	@ (8002714 <SendTestDataViaLoRa+0x80>)
 80026f6:	f008 f9d7 	bl	800aaa8 <sx126x_set_tx>
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
 80026fe:	e002      	b.n	8002706 <SendTestDataViaLoRa+0x72>
            return;
 8002700:	bf00      	nop
 8002702:	e000      	b.n	8002706 <SendTestDataViaLoRa+0x72>
        return;
 8002704:	bf00      	nop
    if (status != SX126X_STATUS_OK) {
        // Ошибка передачи
    } else {
        // Успешная передача
    }
}
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000a18 	.word	0x20000a18
 8002710:	20000000 	.word	0x20000000
 8002714:	200009ec 	.word	0x200009ec
 8002718:	40020800 	.word	0x40020800
 800271c:	0003ffff 	.word	0x0003ffff

08002720 <SendUARTResponse>:

/**
  * @brief Отправка ответа по UART
  */
void SendUARTResponse(const char* response)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)response, strlen(response), 100);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7fd fdb1 	bl	8000290 <strlen>
 800272e:	4603      	mov	r3, r0
 8002730:	b29a      	uxth	r2, r3
 8002732:	2364      	movs	r3, #100	@ 0x64
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4805      	ldr	r0, [pc, #20]	@ (800274c <SendUARTResponse+0x2c>)
 8002738:	f005 fd64 	bl	8008204 <HAL_UART_Transmit>
    HAL_Delay(10);
 800273c:	200a      	movs	r0, #10
 800273e:	f001 fe8d 	bl	800445c <HAL_Delay>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200003a0 	.word	0x200003a0

08002750 <FPGA_LoadConfig>:
}

/**
  * @brief Отправка конфигурации в ПЛИС
  */
void FPGA_LoadConfig(void) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b08e      	sub	sp, #56	@ 0x38
 8002754:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002756:	463b      	mov	r3, r7
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]

    // Настройка пинов
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 8002764:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002768:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276a:	2301      	movs	r3, #1
 800276c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002776:	463b      	mov	r3, r7
 8002778:	4619      	mov	r1, r3
 800277a:	4861      	ldr	r0, [pc, #388]	@ (8002900 <FPGA_LoadConfig+0x1b0>)
 800277c:	f002 fb2e 	bl	8004ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002784:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002786:	463b      	mov	r3, r7
 8002788:	4619      	mov	r1, r3
 800278a:	485e      	ldr	r0, [pc, #376]	@ (8002904 <FPGA_LoadConfig+0x1b4>)
 800278c:	f002 fb26 	bl	8004ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002790:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002794:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	463b      	mov	r3, r7
 8002798:	4619      	mov	r1, r3
 800279a:	485b      	ldr	r0, [pc, #364]	@ (8002908 <FPGA_LoadConfig+0x1b8>)
 800279c:	f002 fb1e 	bl	8004ddc <HAL_GPIO_Init>

    // Установка начальных состояний
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80027a0:	2201      	movs	r2, #1
 80027a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027a6:	4856      	ldr	r0, [pc, #344]	@ (8002900 <FPGA_LoadConfig+0x1b0>)
 80027a8:	f002 fccc 	bl	8005144 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80027ac:	2201      	movs	r2, #1
 80027ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027b2:	4853      	ldr	r0, [pc, #332]	@ (8002900 <FPGA_LoadConfig+0x1b0>)
 80027b4:	f002 fcc6 	bl	8005144 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80027b8:	2200      	movs	r2, #0
 80027ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027be:	4850      	ldr	r0, [pc, #320]	@ (8002900 <FPGA_LoadConfig+0x1b0>)
 80027c0:	f002 fcc0 	bl	8005144 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80027c4:	2200      	movs	r2, #0
 80027c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027ca:	484d      	ldr	r0, [pc, #308]	@ (8002900 <FPGA_LoadConfig+0x1b0>)
 80027cc:	f002 fcba 	bl	8005144 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80027d0:	2200      	movs	r2, #0
 80027d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027d6:	484b      	ldr	r0, [pc, #300]	@ (8002904 <FPGA_LoadConfig+0x1b4>)
 80027d8:	f002 fcb4 	bl	8005144 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80027dc:	2201      	movs	r2, #1
 80027de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027e2:	4849      	ldr	r0, [pc, #292]	@ (8002908 <FPGA_LoadConfig+0x1b8>)
 80027e4:	f002 fcae 	bl	8005144 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 80027e8:	2064      	movs	r0, #100	@ 0x64
 80027ea:	f001 fe37 	bl	800445c <HAL_Delay>

    // Сброс ПЛИС
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80027ee:	2200      	movs	r2, #0
 80027f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027f4:	4843      	ldr	r0, [pc, #268]	@ (8002904 <FPGA_LoadConfig+0x1b4>)
 80027f6:	f002 fca5 	bl	8005144 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80027fa:	2200      	movs	r2, #0
 80027fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002800:	483f      	ldr	r0, [pc, #252]	@ (8002900 <FPGA_LoadConfig+0x1b0>)
 8002802:	f002 fc9f 	bl	8005144 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002806:	2005      	movs	r0, #5
 8002808:	f001 fe28 	bl	800445c <HAL_Delay>

    // Запуск конфигурации
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800280c:	2201      	movs	r2, #1
 800280e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002812:	483c      	ldr	r0, [pc, #240]	@ (8002904 <FPGA_LoadConfig+0x1b4>)
 8002814:	f002 fc96 	bl	8005144 <HAL_GPIO_WritePin>
    HAL_Delay(3);
 8002818:	2003      	movs	r0, #3
 800281a:	f001 fe1f 	bl	800445c <HAL_Delay>

    // Передача данных конфигурации
    const uint8_t *config_data = fpga_config;
 800281e:	4b3b      	ldr	r3, [pc, #236]	@ (800290c <FPGA_LoadConfig+0x1bc>)
 8002820:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t config_size = sizeof(fpga_config);
 8002822:	4b3b      	ldr	r3, [pc, #236]	@ (8002910 <FPGA_LoadConfig+0x1c0>)
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24

    GPIO_TypeDef* data_port = GPIOC;
 8002826:	4b36      	ldr	r3, [pc, #216]	@ (8002900 <FPGA_LoadConfig+0x1b0>)
 8002828:	623b      	str	r3, [r7, #32]
    GPIO_TypeDef* clk_port = GPIOC;
 800282a:	4b35      	ldr	r3, [pc, #212]	@ (8002900 <FPGA_LoadConfig+0x1b0>)
 800282c:	61fb      	str	r3, [r7, #28]
    uint16_t data_pin = GPIO_PIN_11;
 800282e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002832:	837b      	strh	r3, [r7, #26]
    uint16_t clk_pin = GPIO_PIN_10;
 8002834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002838:	833b      	strh	r3, [r7, #24]

    for (uint32_t i = 0; i < config_size; i++) {
 800283a:	2300      	movs	r3, #0
 800283c:	637b      	str	r3, [r7, #52]	@ 0x34
 800283e:	e02a      	b.n	8002896 <FPGA_LoadConfig+0x146>
        uint8_t byte = config_data[i];
 8002840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002844:	4413      	add	r3, r2
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	75fb      	strb	r3, [r7, #23]

        // Передача каждого бита
        for (int bit = 0; bit < 8; bit++) {
 800284a:	2300      	movs	r3, #0
 800284c:	633b      	str	r3, [r7, #48]	@ 0x30
 800284e:	e01c      	b.n	800288a <FPGA_LoadConfig+0x13a>
            if (byte & (1 << bit)) {
 8002850:	7dfa      	ldrb	r2, [r7, #23]
 8002852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002854:	fa42 f303 	asr.w	r3, r2, r3
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <FPGA_LoadConfig+0x118>
                data_port->BSRR = data_pin;
 8002860:	8b7a      	ldrh	r2, [r7, #26]
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	619a      	str	r2, [r3, #24]
 8002866:	e003      	b.n	8002870 <FPGA_LoadConfig+0x120>
            } else {
                data_port->BSRR = (uint32_t)data_pin << 16;
 8002868:	8b7b      	ldrh	r3, [r7, #26]
 800286a:	041a      	lsls	r2, r3, #16
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	619a      	str	r2, [r3, #24]
            }
            __NOP(); __NOP();
 8002870:	bf00      	nop
 8002872:	bf00      	nop
            clk_port->BSRR = clk_pin;
 8002874:	8b3a      	ldrh	r2, [r7, #24]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	619a      	str	r2, [r3, #24]
            __NOP();
 800287a:	bf00      	nop
            clk_port->BSRR = (uint32_t)clk_pin << 16;
 800287c:	8b3b      	ldrh	r3, [r7, #24]
 800287e:	041a      	lsls	r2, r3, #16
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	619a      	str	r2, [r3, #24]
        for (int bit = 0; bit < 8; bit++) {
 8002884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002886:	3301      	adds	r3, #1
 8002888:	633b      	str	r3, [r7, #48]	@ 0x30
 800288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288c:	2b07      	cmp	r3, #7
 800288e:	dddf      	ble.n	8002850 <FPGA_LoadConfig+0x100>
    for (uint32_t i = 0; i < config_size; i++) {
 8002890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002892:	3301      	adds	r3, #1
 8002894:	637b      	str	r3, [r7, #52]	@ 0x34
 8002896:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	429a      	cmp	r2, r3
 800289c:	d3d0      	bcc.n	8002840 <FPGA_LoadConfig+0xf0>
        }
    }

    // Завершающие импульсы
    for (int i = 0; i < 12; i++) {
 800289e:	2300      	movs	r3, #0
 80028a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028a2:	e00d      	b.n	80028c0 <FPGA_LoadConfig+0x170>
        clk_port->BSRR = clk_pin;
 80028a4:	8b3a      	ldrh	r2, [r7, #24]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	619a      	str	r2, [r3, #24]
        __NOP(); __NOP();
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
        clk_port->BSRR = (uint32_t)clk_pin << 16;
 80028ae:	8b3b      	ldrh	r3, [r7, #24]
 80028b0:	041a      	lsls	r2, r3, #16
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	619a      	str	r2, [r3, #24]
        __NOP(); __NOP();
 80028b6:	bf00      	nop
 80028b8:	bf00      	nop
    for (int i = 0; i < 12; i++) {
 80028ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028bc:	3301      	adds	r3, #1
 80028be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c2:	2b0b      	cmp	r3, #11
 80028c4:	ddee      	ble.n	80028a4 <FPGA_LoadConfig+0x154>
    }

    // Активация ПЛИС
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80028c6:	2201      	movs	r2, #1
 80028c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028cc:	480c      	ldr	r0, [pc, #48]	@ (8002900 <FPGA_LoadConfig+0x1b0>)
 80028ce:	f002 fc39 	bl	8005144 <HAL_GPIO_WritePin>
    HAL_Delay(3);
 80028d2:	2003      	movs	r0, #3
 80028d4:	f001 fdc2 	bl	800445c <HAL_Delay>

    // Финальные настройки
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80028d8:	2200      	movs	r2, #0
 80028da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028de:	4808      	ldr	r0, [pc, #32]	@ (8002900 <FPGA_LoadConfig+0x1b0>)
 80028e0:	f002 fc30 	bl	8005144 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028ea:	4807      	ldr	r0, [pc, #28]	@ (8002908 <FPGA_LoadConfig+0x1b8>)
 80028ec:	f002 fc2a 	bl	8005144 <HAL_GPIO_WritePin>

    HAL_Delay(5);
 80028f0:	2005      	movs	r0, #5
 80028f2:	f001 fdb3 	bl	800445c <HAL_Delay>
}
 80028f6:	bf00      	nop
 80028f8:	3738      	adds	r7, #56	@ 0x38
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40020800 	.word	0x40020800
 8002904:	40020000 	.word	0x40020000
 8002908:	40020400 	.word	0x40020400
 800290c:	08013774 	.word	0x08013774
 8002910:	00059d8b 	.word	0x00059d8b

08002914 <ReadFPGAData>:

/**
  * @brief Многократное чтение и усреднение данных из ПЛИС с проверкой порога для конкретного набора параметров
  */
void ReadFPGAData(int param_index) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b08c      	sub	sp, #48	@ 0x30
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
    // Инициализация итогового массива нулями
    memset(averaged_fpga_data, 0, sizeof(averaged_fpga_data));
 800291c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002920:	2100      	movs	r1, #0
 8002922:	4879      	ldr	r0, [pc, #484]	@ (8002b08 <ReadFPGAData+0x1f4>)
 8002924:	f00d fab3 	bl	800fe8e <memset>
    averaging_complete = false;
 8002928:	4b78      	ldr	r3, [pc, #480]	@ (8002b0c <ReadFPGAData+0x1f8>)
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]

    // Получаем количество циклов из параметров текущего набора
    uint32_t cycles = params[param_index].cycle_number;
 800292e:	4a78      	ldr	r2, [pc, #480]	@ (8002b10 <ReadFPGAData+0x1fc>)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	019b      	lsls	r3, r3, #6
 8002934:	4413      	add	r3, r2
 8002936:	332c      	adds	r3, #44	@ 0x2c
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float threshold = params[param_index].threshold;
 800293c:	4a74      	ldr	r2, [pc, #464]	@ (8002b10 <ReadFPGAData+0x1fc>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	019b      	lsls	r3, r3, #6
 8002942:	4413      	add	r3, r2
 8002944:	3318      	adds	r3, #24
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	613b      	str	r3, [r7, #16]

    if (cycles == 0) {
 800294a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <ReadFPGAData+0x40>
        cycles = 1;
 8002950:	2301      	movs	r3, #1
 8002952:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    uint32_t valid_cycles = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	62bb      	str	r3, [r7, #40]	@ 0x28

    for (uint32_t cycle = 0; cycle < cycles; cycle++) {
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
 800295c:	e094      	b.n	8002a88 <ReadFPGAData+0x174>
        // Генерируем START импульс для нового измерения
        GenerateStartPulse();
 800295e:	f7fe fb9d 	bl	800109c <GenerateStartPulse>

        // Ждем некоторое время для стабилизации ПЛИС
        HAL_Delay(1);
 8002962:	2001      	movs	r0, #1
 8002964:	f001 fd7a 	bl	800445c <HAL_Delay>

        bool threshold_exceeded = false;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800296e:	b672      	cpsid	i
}
 8002970:	bf00      	nop

        // Читаем данные во временный буфер с проверкой порога
        __disable_irq();

        for (int i = 0; i < DATA_SIZE; i++) {
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e02f      	b.n	80029d8 <ReadFPGAData+0xc4>
            uint16_t value = fpga_reg[0];
 8002978:	4b66      	ldr	r3, [pc, #408]	@ (8002b14 <ReadFPGAData+0x200>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	81fb      	strh	r3, [r7, #14]
            uint16_t raw_value = value & 0x0FFF - 2048;
 8002980:	89fb      	ldrh	r3, [r7, #14]
 8002982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002986:	81bb      	strh	r3, [r7, #12]

            if (abs((int16_t)raw_value) > threshold) {
 8002988:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	bfb8      	it	lt
 8002990:	425b      	neglt	r3, r3
 8002992:	b29b      	uxth	r3, r3
 8002994:	ee07 3a90 	vmov	s15, r3
 8002998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800299c:	ed97 7a04 	vldr	s14, [r7, #16]
 80029a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a8:	d505      	bpl.n	80029b6 <ReadFPGAData+0xa2>
                threshold_exceeded = true;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  __ASM volatile ("cpsie i" : : : "memory");
 80029b0:	b662      	cpsie	i
}
 80029b2:	bf00      	nop
                __enable_irq();
                break;
 80029b4:	e015      	b.n	80029e2 <ReadFPGAData+0xce>
            }

            temp_fpga_buffer[i] = raw_value;
 80029b6:	4958      	ldr	r1, [pc, #352]	@ (8002b18 <ReadFPGAData+0x204>)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	89ba      	ldrh	r2, [r7, #12]
 80029bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for(volatile int j = 0; j < 10; j++);
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	e002      	b.n	80029cc <ReadFPGAData+0xb8>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3301      	adds	r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	ddf9      	ble.n	80029c6 <ReadFPGAData+0xb2>
        for (int i = 0; i < DATA_SIZE; i++) {
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3301      	adds	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f241 3287 	movw	r2, #4999	@ 0x1387
 80029de:	4293      	cmp	r3, r2
 80029e0:	ddca      	ble.n	8002978 <ReadFPGAData+0x64>
  __ASM volatile ("cpsie i" : : : "memory");
 80029e2:	b662      	cpsie	i
}
 80029e4:	bf00      	nop
        }

        __enable_irq();

        // Если порог превышен, пропускаем этот цикл
        if (threshold_exceeded) {
 80029e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d148      	bne.n	8002a80 <ReadFPGAData+0x16c>
            continue;
        }

        // Усредняем данные только если цикл валидный
        valid_cycles++;
 80029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f0:	3301      	adds	r3, #1
 80029f2:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (int i = 0; i < DATA_SIZE; i++) {
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	e039      	b.n	8002a6e <ReadFPGAData+0x15a>
            if (valid_cycles == 1) {
 80029fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d10e      	bne.n	8002a1e <ReadFPGAData+0x10a>
                averaged_fpga_data[i] = (float)temp_fpga_buffer[i];
 8002a00:	4a45      	ldr	r2, [pc, #276]	@ (8002b18 <ReadFPGAData+0x204>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a10:	4a3d      	ldr	r2, [pc, #244]	@ (8002b08 <ReadFPGAData+0x1f4>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	edc3 7a00 	vstr	s15, [r3]
 8002a1c:	e024      	b.n	8002a68 <ReadFPGAData+0x154>
            } else {
                averaged_fpga_data[i] = (averaged_fpga_data[i] * (valid_cycles - 1) + (float)temp_fpga_buffer[i]) / valid_cycles;
 8002a1e:	4a3a      	ldr	r2, [pc, #232]	@ (8002b08 <ReadFPGAData+0x1f4>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	ed93 7a00 	vldr	s14, [r3]
 8002a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a3a:	4a37      	ldr	r2, [pc, #220]	@ (8002b18 <ReadFPGAData+0x204>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002b08 <ReadFPGAData+0x1f4>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < DATA_SIZE; i++) {
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002a74:	4293      	cmp	r3, r2
 8002a76:	ddc0      	ble.n	80029fa <ReadFPGAData+0xe6>
            }
        }

        HAL_Delay(10);
 8002a78:	200a      	movs	r0, #10
 8002a7a:	f001 fcef 	bl	800445c <HAL_Delay>
 8002a7e:	e000      	b.n	8002a82 <ReadFPGAData+0x16e>
            continue;
 8002a80:	bf00      	nop
    for (uint32_t cycle = 0; cycle < cycles; cycle++) {
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	3301      	adds	r3, #1
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f4ff af66 	bcc.w	800295e <ReadFPGAData+0x4a>
    }

    // Копируем усредненные данные в основную структуру только если есть валидные циклы
    if (valid_cycles > 0) {
 8002a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d029      	beq.n	8002aec <ReadFPGAData+0x1d8>
        for (int i = 0; i < DATA_SIZE; i++) {
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	e011      	b.n	8002ac2 <ReadFPGAData+0x1ae>
            fpga_data.data[i] = (uint16_t)averaged_fpga_data[i];
 8002a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8002b08 <ReadFPGAData+0x1f4>)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aae:	ee17 3a90 	vmov	r3, s15
 8002ab2:	b299      	uxth	r1, r3
 8002ab4:	4a19      	ldr	r2, [pc, #100]	@ (8002b1c <ReadFPGAData+0x208>)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int i = 0; i < DATA_SIZE; i++) {
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	dde8      	ble.n	8002a9e <ReadFPGAData+0x18a>
        }
        fpga_data.data_count = DATA_SIZE;
 8002acc:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <ReadFPGAData+0x208>)
 8002ace:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ad2:	2288      	movs	r2, #136	@ 0x88
 8002ad4:	f883 2711 	strb.w	r2, [r3, #1809]	@ 0x711
        fpga_data.data_ready = true;
 8002ad8:	4b10      	ldr	r3, [pc, #64]	@ (8002b1c <ReadFPGAData+0x208>)
 8002ada:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2710 	strb.w	r2, [r3, #1808]	@ 0x710
        averaging_complete = true;
 8002ae4:	4b09      	ldr	r3, [pc, #36]	@ (8002b0c <ReadFPGAData+0x1f8>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
    } else {
        fpga_data.data_ready = false;
        averaging_complete = false;
    }
}
 8002aea:	e008      	b.n	8002afe <ReadFPGAData+0x1ea>
        fpga_data.data_ready = false;
 8002aec:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <ReadFPGAData+0x208>)
 8002aee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2710 	strb.w	r2, [r3, #1808]	@ 0x710
        averaging_complete = false;
 8002af8:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <ReadFPGAData+0x1f8>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
}
 8002afe:	bf00      	nop
 8002b00:	3730      	adds	r7, #48	@ 0x30
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20005850 	.word	0x20005850
 8002b0c:	2000a670 	.word	0x2000a670
 8002b10:	2000a694 	.word	0x2000a694
 8002b14:	2000313c 	.word	0x2000313c
 8002b18:	20003140 	.word	0x20003140
 8002b1c:	20000a28 	.word	0x20000a28

08002b20 <Set_DAC_Voltage>:

void Set_DAC_Voltage(float voltage) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage < 0) voltage = 0;
 8002b2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b36:	d502      	bpl.n	8002b3e <Set_DAC_Voltage+0x1e>
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
    if (voltage > 1) voltage = 1;
 8002b3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4e:	dd02      	ble.n	8002b56 <Set_DAC_Voltage+0x36>
 8002b50:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002b54:	607b      	str	r3, [r7, #4]

    uint32_t dac_value = (voltage / 3.3f) * 4095;
 8002b56:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b5a:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002b98 <Set_DAC_Voltage+0x78>
 8002b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b62:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002b9c <Set_DAC_Voltage+0x7c>
 8002b66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b6e:	ee17 3a90 	vmov	r3, s15
 8002b72:	60fb      	str	r3, [r7, #12]
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4809      	ldr	r0, [pc, #36]	@ (8002ba0 <Set_DAC_Voltage+0x80>)
 8002b7c:	f001 fe1c 	bl	80047b8 <HAL_DAC_SetValue>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002b80:	2100      	movs	r1, #0
 8002b82:	4807      	ldr	r0, [pc, #28]	@ (8002ba0 <Set_DAC_Voltage+0x80>)
 8002b84:	f001 fdc1 	bl	800470a <HAL_DAC_Start>
    dac_voltage = voltage;
 8002b88:	4a06      	ldr	r2, [pc, #24]	@ (8002ba4 <Set_DAC_Voltage+0x84>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6013      	str	r3, [r2, #0]
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40533333 	.word	0x40533333
 8002b9c:	457ff000 	.word	0x457ff000
 8002ba0:	200002ec 	.word	0x200002ec
 8002ba4:	20000a24 	.word	0x20000a24

08002ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002bae:	f001 fbe3 	bl	8004378 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8002bb2:	f000 f8dd 	bl	8002d70 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b5d      	ldr	r3, [pc, #372]	@ (8002d30 <main+0x188>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	4a5c      	ldr	r2, [pc, #368]	@ (8002d30 <main+0x188>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc6:	4b5a      	ldr	r3, [pc, #360]	@ (8002d30 <main+0x188>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	4b56      	ldr	r3, [pc, #344]	@ (8002d30 <main+0x188>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	4a55      	ldr	r2, [pc, #340]	@ (8002d30 <main+0x188>)
 8002bdc:	f043 0302 	orr.w	r3, r3, #2
 8002be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be2:	4b53      	ldr	r3, [pc, #332]	@ (8002d30 <main+0x188>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8002d30 <main+0x188>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	4a4e      	ldr	r2, [pc, #312]	@ (8002d30 <main+0x188>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8002d30 <main+0x188>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8002c0a:	f000 f9f3 	bl	8002ff4 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8002c0e:	f000 f9c7 	bl	8002fa0 <MX_USART1_UART_Init>
    MX_USB_DEVICE_Init();
 8002c12:	f00a fb57 	bl	800d2c4 <MX_USB_DEVICE_Init>
    MX_DAC_Init();
 8002c16:	f000 f915 	bl	8002e44 <MX_DAC_Init>
    MX_TIM3_Init();
 8002c1a:	f000 f973 	bl	8002f04 <MX_TIM3_Init>
    MX_FSMC_Init();
 8002c1e:	f000 fae3 	bl	80031e8 <MX_FSMC_Init>
    MX_SPI2_Init();
 8002c22:	f000 f939 	bl	8002e98 <MX_SPI2_Init>
    /* USER CODE BEGIN 2 */

    HAL_Delay(150);
 8002c26:	2096      	movs	r0, #150	@ 0x96
 8002c28:	f001 fc18 	bl	800445c <HAL_Delay>
    FPGA_LoadConfig();
 8002c2c:	f7ff fd90 	bl	8002750 <FPGA_LoadConfig>
    HAL_Delay(100);
 8002c30:	2064      	movs	r0, #100	@ 0x64
 8002c32:	f001 fc13 	bl	800445c <HAL_Delay>
    HAL_TIM_Base_Start(&htim3);
 8002c36:	483f      	ldr	r0, [pc, #252]	@ (8002d34 <main+0x18c>)
 8002c38:	f004 fe72 	bl	8007920 <HAL_TIM_Base_Start>
    srand(HAL_GetTick());
 8002c3c:	f001 fc02 	bl	8004444 <HAL_GetTick>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f00b fa6a 	bl	800e11c <srand>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 8002c48:	2201      	movs	r2, #1
 8002c4a:	493b      	ldr	r1, [pc, #236]	@ (8002d38 <main+0x190>)
 8002c4c:	483b      	ldr	r0, [pc, #236]	@ (8002d3c <main+0x194>)
 8002c4e:	f005 fb64 	bl	800831a <HAL_UART_Receive_IT>

    fpga_reg = (volatile uint16_t *)FPGA_BASE_ADDRESS;
 8002c52:	4b3b      	ldr	r3, [pc, #236]	@ (8002d40 <main+0x198>)
 8002c54:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002c58:	601a      	str	r2, [r3, #0]
    memset(&fpga_data, 0, sizeof(fpga_data));
 8002c5a:	f242 7212 	movw	r2, #10002	@ 0x2712
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4838      	ldr	r0, [pc, #224]	@ (8002d44 <main+0x19c>)
 8002c62:	f00d f914 	bl	800fe8e <memset>
    HAL_Delay(1000);
 8002c66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c6a:	f001 fbf7 	bl	800445c <HAL_Delay>

    LoadParametersFromFlash();
 8002c6e:	f000 fea1 	bl	80039b4 <LoadParametersFromFlash>
    HAL_Delay(1000);
 8002c72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c76:	f001 fbf1 	bl	800445c <HAL_Delay>


    InitializeLoRa();
 8002c7a:	f7ff fc29 	bl	80024d0 <InitializeLoRa>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {


        if (new_data_received) {
 8002c7e:	4b32      	ldr	r3, [pc, #200]	@ (8002d48 <main+0x1a0>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d027      	beq.n	8002cd8 <main+0x130>
            uart_message_received = 0;
 8002c88:	4b30      	ldr	r3, [pc, #192]	@ (8002d4c <main+0x1a4>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]

            // В обработчике USB данных:
            // В обработчике USB данных:
            if (strncmp((char*)usb_rx_buffer, "AL=", 3) == 0) {
 8002c8e:	2203      	movs	r2, #3
 8002c90:	492f      	ldr	r1, [pc, #188]	@ (8002d50 <main+0x1a8>)
 8002c92:	4830      	ldr	r0, [pc, #192]	@ (8002d54 <main+0x1ac>)
 8002c94:	f00d f910 	bl	800feb8 <strncmp>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d105      	bne.n	8002caa <main+0x102>
                ParseParameters((char*)usb_rx_buffer);
 8002c9e:	482d      	ldr	r0, [pc, #180]	@ (8002d54 <main+0x1ac>)
 8002ca0:	f7fe fbe2 	bl	8001468 <ParseParameters>
                SendParametersResponse();
 8002ca4:	f7fe fd1a 	bl	80016dc <SendParametersResponse>
 8002ca8:	e00a      	b.n	8002cc0 <main+0x118>
            }
            else if (strncmp((char*)usb_rx_buffer, "1", 1) == 0) {
 8002caa:	4b2a      	ldr	r3, [pc, #168]	@ (8002d54 <main+0x1ac>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	4b29      	ldr	r3, [pc, #164]	@ (8002d58 <main+0x1b0>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <main+0x118>
                ProcessUSBCommand('1');
 8002cba:	2031      	movs	r0, #49	@ 0x31
 8002cbc:	f7fe fa0a 	bl	80010d4 <ProcessUSBCommand>
            }
            memset((void*)usb_rx_buffer, 0, USB_RX_BUFFER_SIZE);
 8002cc0:	f240 424c 	movw	r2, #1100	@ 0x44c
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4823      	ldr	r0, [pc, #140]	@ (8002d54 <main+0x1ac>)
 8002cc8:	f00d f8e1 	bl	800fe8e <memset>
            usb_rx_index = 0;
 8002ccc:	4b23      	ldr	r3, [pc, #140]	@ (8002d5c <main+0x1b4>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	801a      	strh	r2, [r3, #0]
            new_data_received = 0;
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <main+0x1a0>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
        }



        // Обработка UART от дежурного МК
        if(uart_message_received) {
 8002cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d4c <main+0x1a4>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <main+0x14e>
            uart_message_received = 0;
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d4c <main+0x1a4>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
            ProcessUARTCommand((uint8_t*)uart_rx_data, uart_rx_len);
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d60 <main+0x1b8>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4619      	mov	r1, r3
 8002cf0:	481c      	ldr	r0, [pc, #112]	@ (8002d64 <main+0x1bc>)
 8002cf2:	f7fe fe15 	bl	8001920 <ProcessUARTCommand>
        }

        // Таймаут UART приема
        if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_RX_TIMEOUT_MS) {
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d68 <main+0x1c0>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d014      	beq.n	8002d28 <main+0x180>
 8002cfe:	f001 fba1 	bl	8004444 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	4b19      	ldr	r3, [pc, #100]	@ (8002d6c <main+0x1c4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	@ 0x64
 8002d0c:	d90c      	bls.n	8002d28 <main+0x180>
            uart_rx_pos = 0;
 8002d0e:	4b16      	ldr	r3, [pc, #88]	@ (8002d68 <main+0x1c0>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
            memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8002d14:	2280      	movs	r2, #128	@ 0x80
 8002d16:	2100      	movs	r1, #0
 8002d18:	4807      	ldr	r0, [pc, #28]	@ (8002d38 <main+0x190>)
 8002d1a:	f00d f8b8 	bl	800fe8e <memset>
            HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4905      	ldr	r1, [pc, #20]	@ (8002d38 <main+0x190>)
 8002d22:	4806      	ldr	r0, [pc, #24]	@ (8002d3c <main+0x194>)
 8002d24:	f005 faf9 	bl	800831a <HAL_UART_Receive_IT>
        }

        HAL_Delay(10);
 8002d28:	200a      	movs	r0, #10
 8002d2a:	f001 fb97 	bl	800445c <HAL_Delay>
        if (new_data_received) {
 8002d2e:	e7a6      	b.n	8002c7e <main+0xd6>
 8002d30:	40023800 	.word	0x40023800
 8002d34:	20000358 	.word	0x20000358
 8002d38:	200008e0 	.word	0x200008e0
 8002d3c:	200003a0 	.word	0x200003a0
 8002d40:	2000313c 	.word	0x2000313c
 8002d44:	20000a28 	.word	0x20000a28
 8002d48:	20018cd2 	.word	0x20018cd2
 8002d4c:	200009e9 	.word	0x200009e9
 8002d50:	080133b8 	.word	0x080133b8
 8002d54:	20018884 	.word	0x20018884
 8002d58:	08013714 	.word	0x08013714
 8002d5c:	20018cd0 	.word	0x20018cd0
 8002d60:	200009e8 	.word	0x200009e8
 8002d64:	20000968 	.word	0x20000968
 8002d68:	20000960 	.word	0x20000960
 8002d6c:	20000964 	.word	0x20000964

08002d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b094      	sub	sp, #80	@ 0x50
 8002d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d76:	f107 0320 	add.w	r3, r7, #32
 8002d7a:	2230      	movs	r2, #48	@ 0x30
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f00d f885 	bl	800fe8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d84:	f107 030c 	add.w	r3, r7, #12
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	4b28      	ldr	r3, [pc, #160]	@ (8002e3c <SystemClock_Config+0xcc>)
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	4a27      	ldr	r2, [pc, #156]	@ (8002e3c <SystemClock_Config+0xcc>)
 8002d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002da4:	4b25      	ldr	r3, [pc, #148]	@ (8002e3c <SystemClock_Config+0xcc>)
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002db0:	2300      	movs	r3, #0
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	4b22      	ldr	r3, [pc, #136]	@ (8002e40 <SystemClock_Config+0xd0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a21      	ldr	r2, [pc, #132]	@ (8002e40 <SystemClock_Config+0xd0>)
 8002dba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e40 <SystemClock_Config+0xd0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002de0:	2308      	movs	r3, #8
 8002de2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002de4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002de8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dea:	2302      	movs	r3, #2
 8002dec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002dee:	2307      	movs	r3, #7
 8002df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002df2:	f107 0320 	add.w	r3, r7, #32
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 fc10 	bl	800661c <HAL_RCC_OscConfig>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e02:	f000 fa4f 	bl	80032a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e06:	230f      	movs	r3, #15
 8002e08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002e16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e1e:	f107 030c 	add.w	r3, r7, #12
 8002e22:	2105      	movs	r1, #5
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fe71 	bl	8006b0c <HAL_RCC_ClockConfig>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002e30:	f000 fa38 	bl	80032a4 <Error_Handler>
  }
}
 8002e34:	bf00      	nop
 8002e36:	3750      	adds	r7, #80	@ 0x50
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40007000 	.word	0x40007000

08002e44 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002e4a:	463b      	mov	r3, r7
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002e52:	4b0f      	ldr	r3, [pc, #60]	@ (8002e90 <MX_DAC_Init+0x4c>)
 8002e54:	4a0f      	ldr	r2, [pc, #60]	@ (8002e94 <MX_DAC_Init+0x50>)
 8002e56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002e58:	480d      	ldr	r0, [pc, #52]	@ (8002e90 <MX_DAC_Init+0x4c>)
 8002e5a:	f001 fc34 	bl	80046c6 <HAL_DAC_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002e64:	f000 fa1e 	bl	80032a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002e70:	463b      	mov	r3, r7
 8002e72:	2200      	movs	r2, #0
 8002e74:	4619      	mov	r1, r3
 8002e76:	4806      	ldr	r0, [pc, #24]	@ (8002e90 <MX_DAC_Init+0x4c>)
 8002e78:	f001 fcc8 	bl	800480c <HAL_DAC_ConfigChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002e82:	f000 fa0f 	bl	80032a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200002ec 	.word	0x200002ec
 8002e94:	40007400 	.word	0x40007400

08002e98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e9c:	4b17      	ldr	r3, [pc, #92]	@ (8002efc <MX_SPI2_Init+0x64>)
 8002e9e:	4a18      	ldr	r2, [pc, #96]	@ (8002f00 <MX_SPI2_Init+0x68>)
 8002ea0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ea2:	4b16      	ldr	r3, [pc, #88]	@ (8002efc <MX_SPI2_Init+0x64>)
 8002ea4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ea8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002eaa:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <MX_SPI2_Init+0x64>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002eb0:	4b12      	ldr	r3, [pc, #72]	@ (8002efc <MX_SPI2_Init+0x64>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eb6:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <MX_SPI2_Init+0x64>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8002efc <MX_SPI2_Init+0x64>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8002efc <MX_SPI2_Init+0x64>)
 8002ec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ec8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eca:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <MX_SPI2_Init+0x64>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <MX_SPI2_Init+0x64>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ed6:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <MX_SPI2_Init+0x64>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002edc:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <MX_SPI2_Init+0x64>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002ee2:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <MX_SPI2_Init+0x64>)
 8002ee4:	220a      	movs	r2, #10
 8002ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ee8:	4804      	ldr	r0, [pc, #16]	@ (8002efc <MX_SPI2_Init+0x64>)
 8002eea:	f004 f82f 	bl	8006f4c <HAL_SPI_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ef4:	f000 f9d6 	bl	80032a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ef8:	bf00      	nop
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000300 	.word	0x20000300
 8002f00:	40003800 	.word	0x40003800

08002f04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f0a:	f107 0308 	add.w	r3, r7, #8
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f18:	463b      	mov	r3, r7
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f20:	4b1d      	ldr	r3, [pc, #116]	@ (8002f98 <MX_TIM3_Init+0x94>)
 8002f22:	4a1e      	ldr	r2, [pc, #120]	@ (8002f9c <MX_TIM3_Init+0x98>)
 8002f24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8002f26:	4b1c      	ldr	r3, [pc, #112]	@ (8002f98 <MX_TIM3_Init+0x94>)
 8002f28:	22a7      	movs	r2, #167	@ 0xa7
 8002f2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f98 <MX_TIM3_Init+0x94>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f32:	4b19      	ldr	r3, [pc, #100]	@ (8002f98 <MX_TIM3_Init+0x94>)
 8002f34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f3a:	4b17      	ldr	r3, [pc, #92]	@ (8002f98 <MX_TIM3_Init+0x94>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f40:	4b15      	ldr	r3, [pc, #84]	@ (8002f98 <MX_TIM3_Init+0x94>)
 8002f42:	2280      	movs	r2, #128	@ 0x80
 8002f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f46:	4814      	ldr	r0, [pc, #80]	@ (8002f98 <MX_TIM3_Init+0x94>)
 8002f48:	f004 fc9a 	bl	8007880 <HAL_TIM_Base_Init>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002f52:	f000 f9a7 	bl	80032a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f5c:	f107 0308 	add.w	r3, r7, #8
 8002f60:	4619      	mov	r1, r3
 8002f62:	480d      	ldr	r0, [pc, #52]	@ (8002f98 <MX_TIM3_Init+0x94>)
 8002f64:	f004 fe34 	bl	8007bd0 <HAL_TIM_ConfigClockSource>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002f6e:	f000 f999 	bl	80032a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f72:	2300      	movs	r3, #0
 8002f74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f7a:	463b      	mov	r3, r7
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4806      	ldr	r0, [pc, #24]	@ (8002f98 <MX_TIM3_Init+0x94>)
 8002f80:	f005 f860 	bl	8008044 <HAL_TIMEx_MasterConfigSynchronization>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002f8a:	f000 f98b 	bl	80032a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000358 	.word	0x20000358
 8002f9c:	40000400 	.word	0x40000400

08002fa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <MX_USART1_UART_Init+0x4c>)
 8002fa6:	4a12      	ldr	r2, [pc, #72]	@ (8002ff0 <MX_USART1_UART_Init+0x50>)
 8002fa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002faa:	4b10      	ldr	r3, [pc, #64]	@ (8002fec <MX_USART1_UART_Init+0x4c>)
 8002fac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002fb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002fec <MX_USART1_UART_Init+0x4c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <MX_USART1_UART_Init+0x4c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <MX_USART1_UART_Init+0x4c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fc4:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <MX_USART1_UART_Init+0x4c>)
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fca:	4b08      	ldr	r3, [pc, #32]	@ (8002fec <MX_USART1_UART_Init+0x4c>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <MX_USART1_UART_Init+0x4c>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fd6:	4805      	ldr	r0, [pc, #20]	@ (8002fec <MX_USART1_UART_Init+0x4c>)
 8002fd8:	f005 f8c4 	bl	8008164 <HAL_UART_Init>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fe2:	f000 f95f 	bl	80032a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	200003a0 	.word	0x200003a0
 8002ff0:	40011000 	.word	0x40011000

08002ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08c      	sub	sp, #48	@ 0x30
 8002ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffa:	f107 031c 	add.w	r3, r7, #28
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	60da      	str	r2, [r3, #12]
 8003008:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	4b70      	ldr	r3, [pc, #448]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	4a6f      	ldr	r2, [pc, #444]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 8003014:	f043 0310 	orr.w	r3, r3, #16
 8003018:	6313      	str	r3, [r2, #48]	@ 0x30
 800301a:	4b6d      	ldr	r3, [pc, #436]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	4b69      	ldr	r3, [pc, #420]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	4a68      	ldr	r2, [pc, #416]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 8003030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003034:	6313      	str	r3, [r2, #48]	@ 0x30
 8003036:	4b66      	ldr	r3, [pc, #408]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	4b62      	ldr	r3, [pc, #392]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	4a61      	ldr	r2, [pc, #388]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6313      	str	r3, [r2, #48]	@ 0x30
 8003052:	4b5f      	ldr	r3, [pc, #380]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	4b5b      	ldr	r3, [pc, #364]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	4a5a      	ldr	r2, [pc, #360]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	6313      	str	r3, [r2, #48]	@ 0x30
 800306e:	4b58      	ldr	r3, [pc, #352]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	4b54      	ldr	r3, [pc, #336]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	4a53      	ldr	r2, [pc, #332]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 8003084:	f043 0302 	orr.w	r3, r3, #2
 8003088:	6313      	str	r3, [r2, #48]	@ 0x30
 800308a:	4b51      	ldr	r3, [pc, #324]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	4b4d      	ldr	r3, [pc, #308]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	4a4c      	ldr	r2, [pc, #304]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 80030a0:	f043 0308 	orr.w	r3, r3, #8
 80030a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a6:	4b4a      	ldr	r3, [pc, #296]	@ (80031d0 <MX_GPIO_Init+0x1dc>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	607b      	str	r3, [r7, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80030b2:	2200      	movs	r2, #0
 80030b4:	2178      	movs	r1, #120	@ 0x78
 80030b6:	4847      	ldr	r0, [pc, #284]	@ (80031d4 <MX_GPIO_Init+0x1e0>)
 80030b8:	f002 f844 	bl	8005144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 80030bc:	2200      	movs	r2, #0
 80030be:	f248 0120 	movw	r1, #32800	@ 0x8020
 80030c2:	4845      	ldr	r0, [pc, #276]	@ (80031d8 <MX_GPIO_Init+0x1e4>)
 80030c4:	f002 f83e 	bl	8005144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80030c8:	2200      	movs	r2, #0
 80030ca:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 80030ce:	4843      	ldr	r0, [pc, #268]	@ (80031dc <MX_GPIO_Init+0x1e8>)
 80030d0:	f002 f838 	bl	8005144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80030d4:	2200      	movs	r2, #0
 80030d6:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 80030da:	4841      	ldr	r0, [pc, #260]	@ (80031e0 <MX_GPIO_Init+0x1ec>)
 80030dc:	f002 f832 	bl	8005144 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80030e0:	2200      	movs	r2, #0
 80030e2:	2140      	movs	r1, #64	@ 0x40
 80030e4:	483f      	ldr	r0, [pc, #252]	@ (80031e4 <MX_GPIO_Init+0x1f0>)
 80030e6:	f002 f82d 	bl	8005144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 80030ea:	2306      	movs	r3, #6
 80030ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ee:	2300      	movs	r3, #0
 80030f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030f6:	f107 031c 	add.w	r3, r7, #28
 80030fa:	4619      	mov	r1, r3
 80030fc:	4835      	ldr	r0, [pc, #212]	@ (80031d4 <MX_GPIO_Init+0x1e0>)
 80030fe:	f001 fe6d 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003102:	2378      	movs	r3, #120	@ 0x78
 8003104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003106:	2301      	movs	r3, #1
 8003108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310e:	2300      	movs	r3, #0
 8003110:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003112:	f107 031c 	add.w	r3, r7, #28
 8003116:	4619      	mov	r1, r3
 8003118:	482e      	ldr	r0, [pc, #184]	@ (80031d4 <MX_GPIO_Init+0x1e0>)
 800311a:	f001 fe5f 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 800311e:	f248 0320 	movw	r3, #32800	@ 0x8020
 8003122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003124:	2301      	movs	r3, #1
 8003126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312c:	2300      	movs	r3, #0
 800312e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	4619      	mov	r1, r3
 8003136:	4828      	ldr	r0, [pc, #160]	@ (80031d8 <MX_GPIO_Init+0x1e4>)
 8003138:	f001 fe50 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800313c:	2310      	movs	r3, #16
 800313e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003140:	2300      	movs	r3, #0
 8003142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003148:	f107 031c 	add.w	r3, r7, #28
 800314c:	4619      	mov	r1, r3
 800314e:	4824      	ldr	r0, [pc, #144]	@ (80031e0 <MX_GPIO_Init+0x1ec>)
 8003150:	f001 fe44 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8003154:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 8003158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800315a:	2301      	movs	r3, #1
 800315c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003166:	f107 031c 	add.w	r3, r7, #28
 800316a:	4619      	mov	r1, r3
 800316c:	481b      	ldr	r0, [pc, #108]	@ (80031dc <MX_GPIO_Init+0x1e8>)
 800316e:	f001 fe35 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8003172:	f44f 637c 	mov.w	r3, #4032	@ 0xfc0
 8003176:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003178:	2301      	movs	r3, #1
 800317a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	2300      	movs	r3, #0
 8003182:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003184:	f107 031c 	add.w	r3, r7, #28
 8003188:	4619      	mov	r1, r3
 800318a:	4815      	ldr	r0, [pc, #84]	@ (80031e0 <MX_GPIO_Init+0x1ec>)
 800318c:	f001 fe26 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003190:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003196:	2300      	movs	r3, #0
 8003198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319e:	f107 031c 	add.w	r3, r7, #28
 80031a2:	4619      	mov	r1, r3
 80031a4:	480c      	ldr	r0, [pc, #48]	@ (80031d8 <MX_GPIO_Init+0x1e4>)
 80031a6:	f001 fe19 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031aa:	2340      	movs	r3, #64	@ 0x40
 80031ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ae:	2301      	movs	r3, #1
 80031b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	2300      	movs	r3, #0
 80031b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ba:	f107 031c 	add.w	r3, r7, #28
 80031be:	4619      	mov	r1, r3
 80031c0:	4808      	ldr	r0, [pc, #32]	@ (80031e4 <MX_GPIO_Init+0x1f0>)
 80031c2:	f001 fe0b 	bl	8004ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80031c6:	bf00      	nop
 80031c8:	3730      	adds	r7, #48	@ 0x30
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00

080031e8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
 80031fc:	615a      	str	r2, [r3, #20]
 80031fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003200:	4b26      	ldr	r3, [pc, #152]	@ (800329c <MX_FSMC_Init+0xb4>)
 8003202:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8003206:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003208:	4b24      	ldr	r3, [pc, #144]	@ (800329c <MX_FSMC_Init+0xb4>)
 800320a:	4a25      	ldr	r2, [pc, #148]	@ (80032a0 <MX_FSMC_Init+0xb8>)
 800320c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800320e:	4b23      	ldr	r3, [pc, #140]	@ (800329c <MX_FSMC_Init+0xb4>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003214:	4b21      	ldr	r3, [pc, #132]	@ (800329c <MX_FSMC_Init+0xb4>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_PSRAM;
 800321a:	4b20      	ldr	r3, [pc, #128]	@ (800329c <MX_FSMC_Init+0xb4>)
 800321c:	2204      	movs	r2, #4
 800321e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003220:	4b1e      	ldr	r3, [pc, #120]	@ (800329c <MX_FSMC_Init+0xb4>)
 8003222:	2210      	movs	r2, #16
 8003224:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003226:	4b1d      	ldr	r3, [pc, #116]	@ (800329c <MX_FSMC_Init+0xb4>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800322c:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <MX_FSMC_Init+0xb4>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003232:	4b1a      	ldr	r3, [pc, #104]	@ (800329c <MX_FSMC_Init+0xb4>)
 8003234:	2200      	movs	r2, #0
 8003236:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003238:	4b18      	ldr	r3, [pc, #96]	@ (800329c <MX_FSMC_Init+0xb4>)
 800323a:	2200      	movs	r2, #0
 800323c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 800323e:	4b17      	ldr	r3, [pc, #92]	@ (800329c <MX_FSMC_Init+0xb4>)
 8003240:	2200      	movs	r2, #0
 8003242:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003244:	4b15      	ldr	r3, [pc, #84]	@ (800329c <MX_FSMC_Init+0xb4>)
 8003246:	2200      	movs	r2, #0
 8003248:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800324a:	4b14      	ldr	r3, [pc, #80]	@ (800329c <MX_FSMC_Init+0xb4>)
 800324c:	2200      	movs	r2, #0
 800324e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003250:	4b12      	ldr	r3, [pc, #72]	@ (800329c <MX_FSMC_Init+0xb4>)
 8003252:	2200      	movs	r2, #0
 8003254:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003256:	4b11      	ldr	r3, [pc, #68]	@ (800329c <MX_FSMC_Init+0xb4>)
 8003258:	2200      	movs	r2, #0
 800325a:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800325c:	4b0f      	ldr	r3, [pc, #60]	@ (800329c <MX_FSMC_Init+0xb4>)
 800325e:	2200      	movs	r2, #0
 8003260:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8003262:	2302      	movs	r3, #2
 8003264:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 1;
 8003266:	2301      	movs	r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime =  5;
 800326a:	2305      	movs	r3, #5
 800326c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 800326e:	2301      	movs	r3, #1
 8003270:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 2;
 8003272:	2302      	movs	r3, #2
 8003274:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8003276:	2302      	movs	r3, #2
 8003278:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	2200      	movs	r2, #0
 8003282:	4619      	mov	r1, r3
 8003284:	4805      	ldr	r0, [pc, #20]	@ (800329c <MX_FSMC_Init+0xb4>)
 8003286:	f004 fab3 	bl	80077f0 <HAL_SRAM_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 8003290:	f000 f808 	bl	80032a4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003294:	bf00      	nop
 8003296:	3720      	adds	r7, #32
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	200003e8 	.word	0x200003e8
 80032a0:	a0000104 	.word	0xa0000104

080032a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <Error_Handler+0x4>

080032ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <HAL_MspInit+0x4c>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ba:	4a0f      	ldr	r2, [pc, #60]	@ (80032f8 <HAL_MspInit+0x4c>)
 80032bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032c2:	4b0d      	ldr	r3, [pc, #52]	@ (80032f8 <HAL_MspInit+0x4c>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <HAL_MspInit+0x4c>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	4a08      	ldr	r2, [pc, #32]	@ (80032f8 <HAL_MspInit+0x4c>)
 80032d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032de:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <HAL_MspInit+0x4c>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800

080032fc <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	@ 0x28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a17      	ldr	r2, [pc, #92]	@ (8003378 <HAL_DAC_MspInit+0x7c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d127      	bne.n	800336e <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	4b16      	ldr	r3, [pc, #88]	@ (800337c <HAL_DAC_MspInit+0x80>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	4a15      	ldr	r2, [pc, #84]	@ (800337c <HAL_DAC_MspInit+0x80>)
 8003328:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800332c:	6413      	str	r3, [r2, #64]	@ 0x40
 800332e:	4b13      	ldr	r3, [pc, #76]	@ (800337c <HAL_DAC_MspInit+0x80>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	4b0f      	ldr	r3, [pc, #60]	@ (800337c <HAL_DAC_MspInit+0x80>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	4a0e      	ldr	r2, [pc, #56]	@ (800337c <HAL_DAC_MspInit+0x80>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6313      	str	r3, [r2, #48]	@ 0x30
 800334a:	4b0c      	ldr	r3, [pc, #48]	@ (800337c <HAL_DAC_MspInit+0x80>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003356:	2310      	movs	r3, #16
 8003358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800335a:	2303      	movs	r3, #3
 800335c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	4619      	mov	r1, r3
 8003368:	4805      	ldr	r0, [pc, #20]	@ (8003380 <HAL_DAC_MspInit+0x84>)
 800336a:	f001 fd37 	bl	8004ddc <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 800336e:	bf00      	nop
 8003370:	3728      	adds	r7, #40	@ 0x28
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40007400 	.word	0x40007400
 800337c:	40023800 	.word	0x40023800
 8003380:	40020000 	.word	0x40020000

08003384 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	@ 0x28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 0314 	add.w	r3, r7, #20
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a19      	ldr	r2, [pc, #100]	@ (8003408 <HAL_SPI_MspInit+0x84>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d12c      	bne.n	8003400 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	4b18      	ldr	r3, [pc, #96]	@ (800340c <HAL_SPI_MspInit+0x88>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	4a17      	ldr	r2, [pc, #92]	@ (800340c <HAL_SPI_MspInit+0x88>)
 80033b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b6:	4b15      	ldr	r3, [pc, #84]	@ (800340c <HAL_SPI_MspInit+0x88>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	4b11      	ldr	r3, [pc, #68]	@ (800340c <HAL_SPI_MspInit+0x88>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	4a10      	ldr	r2, [pc, #64]	@ (800340c <HAL_SPI_MspInit+0x88>)
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d2:	4b0e      	ldr	r3, [pc, #56]	@ (800340c <HAL_SPI_MspInit+0x88>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80033de:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80033e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ec:	2303      	movs	r3, #3
 80033ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033f0:	2305      	movs	r3, #5
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f4:	f107 0314 	add.w	r3, r7, #20
 80033f8:	4619      	mov	r1, r3
 80033fa:	4805      	ldr	r0, [pc, #20]	@ (8003410 <HAL_SPI_MspInit+0x8c>)
 80033fc:	f001 fcee 	bl	8004ddc <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003400:	bf00      	nop
 8003402:	3728      	adds	r7, #40	@ 0x28
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40003800 	.word	0x40003800
 800340c:	40023800 	.word	0x40023800
 8003410:	40020400 	.word	0x40020400

08003414 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0e      	ldr	r2, [pc, #56]	@ (800345c <HAL_TIM_Base_MspInit+0x48>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d115      	bne.n	8003452 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	4b0d      	ldr	r3, [pc, #52]	@ (8003460 <HAL_TIM_Base_MspInit+0x4c>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	4a0c      	ldr	r2, [pc, #48]	@ (8003460 <HAL_TIM_Base_MspInit+0x4c>)
 8003430:	f043 0302 	orr.w	r3, r3, #2
 8003434:	6413      	str	r3, [r2, #64]	@ 0x40
 8003436:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <HAL_TIM_Base_MspInit+0x4c>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003442:	2200      	movs	r2, #0
 8003444:	2100      	movs	r1, #0
 8003446:	201d      	movs	r0, #29
 8003448:	f001 f907 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800344c:	201d      	movs	r0, #29
 800344e:	f001 f920 	bl	8004692 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40000400 	.word	0x40000400
 8003460:	40023800 	.word	0x40023800

08003464 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08a      	sub	sp, #40	@ 0x28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1d      	ldr	r2, [pc, #116]	@ (80034f8 <HAL_UART_MspInit+0x94>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d133      	bne.n	80034ee <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	4b1c      	ldr	r3, [pc, #112]	@ (80034fc <HAL_UART_MspInit+0x98>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348e:	4a1b      	ldr	r2, [pc, #108]	@ (80034fc <HAL_UART_MspInit+0x98>)
 8003490:	f043 0310 	orr.w	r3, r3, #16
 8003494:	6453      	str	r3, [r2, #68]	@ 0x44
 8003496:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <HAL_UART_MspInit+0x98>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <HAL_UART_MspInit+0x98>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	4a14      	ldr	r2, [pc, #80]	@ (80034fc <HAL_UART_MspInit+0x98>)
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b2:	4b12      	ldr	r3, [pc, #72]	@ (80034fc <HAL_UART_MspInit+0x98>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034be:	23c0      	movs	r3, #192	@ 0xc0
 80034c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ca:	2303      	movs	r3, #3
 80034cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034ce:	2307      	movs	r3, #7
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d2:	f107 0314 	add.w	r3, r7, #20
 80034d6:	4619      	mov	r1, r3
 80034d8:	4809      	ldr	r0, [pc, #36]	@ (8003500 <HAL_UART_MspInit+0x9c>)
 80034da:	f001 fc7f 	bl	8004ddc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	2025      	movs	r0, #37	@ 0x25
 80034e4:	f001 f8b9 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034e8:	2025      	movs	r0, #37	@ 0x25
 80034ea:	f001 f8d2 	bl	8004692 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80034ee:	bf00      	nop
 80034f0:	3728      	adds	r7, #40	@ 0x28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40011000 	.word	0x40011000
 80034fc:	40023800 	.word	0x40023800
 8003500:	40020400 	.word	0x40020400

08003504 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003518:	4b1c      	ldr	r3, [pc, #112]	@ (800358c <HAL_FSMC_MspInit+0x88>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d131      	bne.n	8003584 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8003520:	4b1a      	ldr	r3, [pc, #104]	@ (800358c <HAL_FSMC_MspInit+0x88>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	4b19      	ldr	r3, [pc, #100]	@ (8003590 <HAL_FSMC_MspInit+0x8c>)
 800352c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352e:	4a18      	ldr	r2, [pc, #96]	@ (8003590 <HAL_FSMC_MspInit+0x8c>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6393      	str	r3, [r2, #56]	@ 0x38
 8003536:	4b16      	ldr	r3, [pc, #88]	@ (8003590 <HAL_FSMC_MspInit+0x8c>)
 8003538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_DA3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003542:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003546:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003550:	2303      	movs	r3, #3
 8003552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003554:	230c      	movs	r3, #12
 8003556:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	4619      	mov	r1, r3
 800355c:	480d      	ldr	r0, [pc, #52]	@ (8003594 <HAL_FSMC_MspInit+0x90>)
 800355e:	f001 fc3d 	bl	8004ddc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003562:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 8003566:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003568:	2302      	movs	r3, #2
 800356a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003570:	2303      	movs	r3, #3
 8003572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003574:	230c      	movs	r3, #12
 8003576:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	4619      	mov	r1, r3
 800357c:	4806      	ldr	r0, [pc, #24]	@ (8003598 <HAL_FSMC_MspInit+0x94>)
 800357e:	f001 fc2d 	bl	8004ddc <HAL_GPIO_Init>
 8003582:	e000      	b.n	8003586 <HAL_FSMC_MspInit+0x82>
    return;
 8003584:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	2000a684 	.word	0x2000a684
 8003590:	40023800 	.word	0x40023800
 8003594:	40021000 	.word	0x40021000
 8003598:	40020c00 	.word	0x40020c00

0800359c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80035a4:	f7ff ffae 	bl	8003504 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035b4:	bf00      	nop
 80035b6:	e7fd      	b.n	80035b4 <NMI_Handler+0x4>

080035b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035bc:	bf00      	nop
 80035be:	e7fd      	b.n	80035bc <HardFault_Handler+0x4>

080035c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035c4:	bf00      	nop
 80035c6:	e7fd      	b.n	80035c4 <MemManage_Handler+0x4>

080035c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035cc:	bf00      	nop
 80035ce:	e7fd      	b.n	80035cc <BusFault_Handler+0x4>

080035d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035d4:	bf00      	nop
 80035d6:	e7fd      	b.n	80035d4 <UsageFault_Handler+0x4>

080035d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003606:	f000 ff09 	bl	800441c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003614:	4802      	ldr	r0, [pc, #8]	@ (8003620 <TIM3_IRQHandler+0x10>)
 8003616:	f004 f9eb 	bl	80079f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000358 	.word	0x20000358

08003624 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003628:	4802      	ldr	r0, [pc, #8]	@ (8003634 <USART1_IRQHandler+0x10>)
 800362a:	f004 fe9b 	bl	8008364 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	200003a0 	.word	0x200003a0

08003638 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800363c:	4802      	ldr	r0, [pc, #8]	@ (8003648 <OTG_FS_IRQHandler+0x10>)
 800363e:	f001 fede 	bl	80053fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20019ed4 	.word	0x20019ed4

0800364c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return 1;
 8003650:	2301      	movs	r3, #1
}
 8003652:	4618      	mov	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <_kill>:

int _kill(int pid, int sig)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003666:	f00c fd09 	bl	801007c <__errno>
 800366a:	4603      	mov	r3, r0
 800366c:	2216      	movs	r2, #22
 800366e:	601a      	str	r2, [r3, #0]
  return -1;
 8003670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <_exit>:

void _exit (int status)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003684:	f04f 31ff 	mov.w	r1, #4294967295
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ffe7 	bl	800365c <_kill>
  while (1) {}    /* Make sure we hang here */
 800368e:	bf00      	nop
 8003690:	e7fd      	b.n	800368e <_exit+0x12>

08003692 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b086      	sub	sp, #24
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	e00a      	b.n	80036ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036a4:	f3af 8000 	nop.w
 80036a8:	4601      	mov	r1, r0
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	60ba      	str	r2, [r7, #8]
 80036b0:	b2ca      	uxtb	r2, r1
 80036b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3301      	adds	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	dbf0      	blt.n	80036a4 <_read+0x12>
  }

  return len;
 80036c2:	687b      	ldr	r3, [r7, #4]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	e009      	b.n	80036f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	60ba      	str	r2, [r7, #8]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	3301      	adds	r3, #1
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	dbf1      	blt.n	80036de <_write+0x12>
  }
  return len;
 80036fa:	687b      	ldr	r3, [r7, #4]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <_close>:

int _close(int file)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800370c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800372c:	605a      	str	r2, [r3, #4]
  return 0;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <_isatty>:

int _isatty(int file)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003744:	2301      	movs	r3, #1
}
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003752:	b480      	push	{r7}
 8003754:	b085      	sub	sp, #20
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003774:	4a14      	ldr	r2, [pc, #80]	@ (80037c8 <_sbrk+0x5c>)
 8003776:	4b15      	ldr	r3, [pc, #84]	@ (80037cc <_sbrk+0x60>)
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003780:	4b13      	ldr	r3, [pc, #76]	@ (80037d0 <_sbrk+0x64>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <_sbrk+0x64>)
 800378a:	4a12      	ldr	r2, [pc, #72]	@ (80037d4 <_sbrk+0x68>)
 800378c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800378e:	4b10      	ldr	r3, [pc, #64]	@ (80037d0 <_sbrk+0x64>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	429a      	cmp	r2, r3
 800379a:	d207      	bcs.n	80037ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800379c:	f00c fc6e 	bl	801007c <__errno>
 80037a0:	4603      	mov	r3, r0
 80037a2:	220c      	movs	r2, #12
 80037a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037a6:	f04f 33ff 	mov.w	r3, #4294967295
 80037aa:	e009      	b.n	80037c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037ac:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <_sbrk+0x64>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037b2:	4b07      	ldr	r3, [pc, #28]	@ (80037d0 <_sbrk+0x64>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	4a05      	ldr	r2, [pc, #20]	@ (80037d0 <_sbrk+0x64>)
 80037bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037be:	68fb      	ldr	r3, [r7, #12]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20020000 	.word	0x20020000
 80037cc:	00000400 	.word	0x00000400
 80037d0:	2000a688 	.word	0x2000a688
 80037d4:	2001a728 	.word	0x2001a728

080037d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <SystemInit+0x20>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e2:	4a05      	ldr	r2, [pc, #20]	@ (80037f8 <SystemInit+0x20>)
 80037e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <Read_Thermocouple_Temperature>:
bool thermocouple_error = false;

/**
  * @brief Чтение сырых данных с термопары
  */
uint16_t Read_Thermocouple_Temperature(void) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	@ 0x28
 8003800:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003802:	f107 0310 	add.w	r3, r7, #16
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	609a      	str	r2, [r3, #8]
 800380e:	60da      	str	r2, [r3, #12]
 8003810:	611a      	str	r2, [r3, #16]
    uint16_t raw_data = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // Настройка PC11 (DATA) как входа
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003816:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800381a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003824:	f107 0310 	add.w	r3, r7, #16
 8003828:	4619      	mov	r1, r3
 800382a:	482e      	ldr	r0, [pc, #184]	@ (80038e4 <Read_Thermocouple_Temperature+0xe8>)
 800382c:	f001 fad6 	bl	8004ddc <HAL_GPIO_Init>

    // Активация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003836:	482b      	ldr	r0, [pc, #172]	@ (80038e4 <Read_Thermocouple_Temperature+0xe8>)
 8003838:	f001 fc84 	bl	8005144 <HAL_GPIO_WritePin>

    for(volatile int i = 0; i < 10; i++);
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e002      	b.n	8003848 <Read_Thermocouple_Temperature+0x4c>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3301      	adds	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b09      	cmp	r3, #9
 800384c:	ddf9      	ble.n	8003842 <Read_Thermocouple_Temperature+0x46>

    // Чтение 16 бит данных
    for(uint8_t i = 0; i < 16; i++) {
 800384e:	2300      	movs	r3, #0
 8003850:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003854:	e037      	b.n	80038c6 <Read_Thermocouple_Temperature+0xca>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8003856:	2201      	movs	r2, #1
 8003858:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800385c:	4821      	ldr	r0, [pc, #132]	@ (80038e4 <Read_Thermocouple_Temperature+0xe8>)
 800385e:	f001 fc71 	bl	8005144 <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++);
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	e002      	b.n	800386e <Read_Thermocouple_Temperature+0x72>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	3301      	adds	r3, #1
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b04      	cmp	r3, #4
 8003872:	ddf9      	ble.n	8003868 <Read_Thermocouple_Temperature+0x6c>

        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) {
 8003874:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003878:	481a      	ldr	r0, [pc, #104]	@ (80038e4 <Read_Thermocouple_Temperature+0xe8>)
 800387a:	f001 fc4b 	bl	8005114 <HAL_GPIO_ReadPin>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00c      	beq.n	800389e <Read_Thermocouple_Temperature+0xa2>
            raw_data |= (1 << (15 - i));
 8003884:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003888:	f1c3 030f 	rsb	r3, r3, #15
 800388c:	2201      	movs	r2, #1
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	b21a      	sxth	r2, r3
 8003894:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003898:	4313      	orrs	r3, r2
 800389a:	b21b      	sxth	r3, r3
 800389c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800389e:	2200      	movs	r2, #0
 80038a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80038a4:	480f      	ldr	r0, [pc, #60]	@ (80038e4 <Read_Thermocouple_Temperature+0xe8>)
 80038a6:	f001 fc4d 	bl	8005144 <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++);
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	e002      	b.n	80038b6 <Read_Thermocouple_Temperature+0xba>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3301      	adds	r3, #1
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	ddf9      	ble.n	80038b0 <Read_Thermocouple_Temperature+0xb4>
    for(uint8_t i = 0; i < 16; i++) {
 80038bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80038c0:	3301      	adds	r3, #1
 80038c2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80038c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80038ca:	2b0f      	cmp	r3, #15
 80038cc:	d9c3      	bls.n	8003856 <Read_Thermocouple_Temperature+0x5a>
    }

    // Деактивация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80038ce:	2201      	movs	r2, #1
 80038d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038d4:	4803      	ldr	r0, [pc, #12]	@ (80038e4 <Read_Thermocouple_Temperature+0xe8>)
 80038d6:	f001 fc35 	bl	8005144 <HAL_GPIO_WritePin>

    return raw_data;
 80038da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3728      	adds	r7, #40	@ 0x28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40020800 	.word	0x40020800

080038e8 <Get_Thermocouple_Temperature>:

/**
  * @brief Получение температуры термопары в градусах Цельсия
  */
float Get_Thermocouple_Temperature(void) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
    uint16_t raw_data = Read_Thermocouple_Temperature();
 80038ee:	f7ff ff85 	bl	80037fc <Read_Thermocouple_Temperature>
 80038f2:	4603      	mov	r3, r0
 80038f4:	80fb      	strh	r3, [r7, #6]

    // Проверка на разомкнутую цепь
    if(raw_data & 0x04) {
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <Get_Thermocouple_Temperature+0x24>
        thermocouple_error = true;
 8003900:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <Get_Thermocouple_Temperature+0x54>)
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
        return -999.0f;
 8003906:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003940 <Get_Thermocouple_Temperature+0x58>
 800390a:	e012      	b.n	8003932 <Get_Thermocouple_Temperature+0x4a>
    }

    thermocouple_error = false;
 800390c:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <Get_Thermocouple_Temperature+0x54>)
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]

    // Извлечение 12-битного значения температуры
    raw_data >>= 3;
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	08db      	lsrs	r3, r3, #3
 8003916:	80fb      	strh	r3, [r7, #6]
    raw_data &= 0x0FFF;
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391e:	80fb      	strh	r3, [r7, #6]

    // Конверсия в градусы
    return (float)raw_data * 0.25f;
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800392e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003932:	eeb0 0a67 	vmov.f32	s0, s15
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	2000a690 	.word	0x2000a690
 8003940:	c479c000 	.word	0xc479c000

08003944 <CalculateCRC32>:
void SendUSBDebugMessage(const char *message);

/**
  * @brief Расчет CRC32 для проверки целостности данных
  */
uint32_t CalculateCRC32(const uint8_t *data, size_t length) {
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < length; i++) {
 8003954:	2300      	movs	r3, #0
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	e01d      	b.n	8003996 <CalculateCRC32+0x52>
        crc ^= data[i];
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	4053      	eors	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	e00c      	b.n	800398a <CalculateCRC32+0x46>
            crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	085a      	lsrs	r2, r3, #1
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	4259      	negs	r1, r3
 800397c:	4b0c      	ldr	r3, [pc, #48]	@ (80039b0 <CalculateCRC32+0x6c>)
 800397e:	400b      	ands	r3, r1
 8003980:	4053      	eors	r3, r2
 8003982:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3301      	adds	r3, #1
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b07      	cmp	r3, #7
 800398e:	ddef      	ble.n	8003970 <CalculateCRC32+0x2c>
    for (size_t i = 0; i < length; i++) {
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	3301      	adds	r3, #1
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d3dd      	bcc.n	800395a <CalculateCRC32+0x16>
        }
    }
    return ~crc;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	43db      	mvns	r3, r3
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	edb88320 	.word	0xedb88320

080039b4 <LoadParametersFromFlash>:

/**
  * @brief Загрузка параметров из Flash памяти
  */
void LoadParametersFromFlash(void) {
 80039b4:	b5b0      	push	{r4, r5, r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
    uint8_t* flash_address = (uint8_t*)PARAMS_FLASH_ADDRESS;
 80039ba:	4b1c      	ldr	r3, [pc, #112]	@ (8003a2c <LoadParametersFromFlash+0x78>)
 80039bc:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < NUM_PARAM_SETS; i++) {
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]
 80039c2:	e02b      	b.n	8003a1c <LoadParametersFromFlash+0x68>
        Parameters_t* flash_params = (Parameters_t*)(flash_address + (i * PARAMS_SET_SIZE));
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	019b      	lsls	r3, r3, #6
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	4413      	add	r3, r2
 80039cc:	607b      	str	r3, [r7, #4]
        uint32_t calculated_crc = CalculateCRC32((uint8_t*)flash_params, sizeof(Parameters_t) - sizeof(uint32_t));
 80039ce:	213c      	movs	r1, #60	@ 0x3c
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ffb7 	bl	8003944 <CalculateCRC32>
 80039d6:	6038      	str	r0, [r7, #0]

        if (flash_params->crc == calculated_crc) {
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d115      	bne.n	8003a0e <LoadParametersFromFlash+0x5a>
            params[i] = *flash_params;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	4a12      	ldr	r2, [pc, #72]	@ (8003a30 <LoadParametersFromFlash+0x7c>)
 80039e6:	019b      	lsls	r3, r3, #6
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4614      	mov	r4, r2
 80039ee:	461d      	mov	r5, r3
 80039f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            parameters_initialized[i] = true;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	4a0b      	ldr	r2, [pc, #44]	@ (8003a34 <LoadParametersFromFlash+0x80>)
 8003a08:	2101      	movs	r1, #1
 8003a0a:	54d1      	strb	r1, [r2, r3]
 8003a0c:	e003      	b.n	8003a16 <LoadParametersFromFlash+0x62>
        } else {
            // Инициализируем конкретный набор по умолчанию
            InitializeParamSet(i);
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f869 	bl	8003ae8 <InitializeParamSet>
    for (uint8_t i = 0; i < NUM_PARAM_SETS; i++) {
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d9d0      	bls.n	80039c4 <LoadParametersFromFlash+0x10>
        }
    }
}
 8003a22:	bf00      	nop
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a2c:	08080000 	.word	0x08080000
 8003a30:	2000a694 	.word	0x2000a694
 8003a34:	2000a794 	.word	0x2000a794

08003a38 <SaveParametersToFlash>:

/**
  * @brief Сохранение параметров в Flash память
  */
void SaveParametersToFlash(void) {
 8003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8003a3e:	f001 f823 	bl	8004a88 <HAL_FLASH_Unlock>

    // Рассчитываем CRC для всех наборов перед сохранением
    for (uint8_t i = 0; i < NUM_PARAM_SETS; i++) {
 8003a42:	2300      	movs	r3, #0
 8003a44:	75fb      	strb	r3, [r7, #23]
 8003a46:	e011      	b.n	8003a6c <SaveParametersToFlash+0x34>
        params[i].crc = CalculateCRC32((uint8_t*)&params[i], sizeof(Parameters_t) - sizeof(uint32_t));
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	019b      	lsls	r3, r3, #6
 8003a4c:	4a24      	ldr	r2, [pc, #144]	@ (8003ae0 <SaveParametersToFlash+0xa8>)
 8003a4e:	4413      	add	r3, r2
 8003a50:	7dfe      	ldrb	r6, [r7, #23]
 8003a52:	213c      	movs	r1, #60	@ 0x3c
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff ff75 	bl	8003944 <CalculateCRC32>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	4920      	ldr	r1, [pc, #128]	@ (8003ae0 <SaveParametersToFlash+0xa8>)
 8003a5e:	01b3      	lsls	r3, r6, #6
 8003a60:	440b      	add	r3, r1
 8003a62:	333c      	adds	r3, #60	@ 0x3c
 8003a64:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_PARAM_SETS; i++) {
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	75fb      	strb	r3, [r7, #23]
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d9ea      	bls.n	8003a48 <SaveParametersToFlash+0x10>
    }

    // Стираем сектор Flash
    FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 8003a72:	2102      	movs	r1, #2
 8003a74:	200b      	movs	r0, #11
 8003a76:	f001 f969 	bl	8004d4c <FLASH_Erase_Sector>

    // Сохраняем все наборы параметров
    uint8_t* destination = (uint8_t*)PARAMS_FLASH_ADDRESS;
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae4 <SaveParametersToFlash+0xac>)
 8003a7c:	613b      	str	r3, [r7, #16]

    for (uint8_t i = 0; i < NUM_PARAM_SETS; i++) {
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
 8003a82:	e024      	b.n	8003ace <SaveParametersToFlash+0x96>
        uint32_t* source = (uint32_t*)&params[i];
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	019b      	lsls	r3, r3, #6
 8003a88:	4a15      	ldr	r2, [pc, #84]	@ (8003ae0 <SaveParametersToFlash+0xa8>)
 8003a8a:	4413      	add	r3, r2
 8003a8c:	60bb      	str	r3, [r7, #8]
        uint32_t words = sizeof(Parameters_t) / sizeof(uint32_t);
 8003a8e:	2310      	movs	r3, #16
 8003a90:	603b      	str	r3, [r7, #0]

        for (uint32_t j = 0; j < words; j++) {
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	e013      	b.n	8003ac0 <SaveParametersToFlash+0x88>
            HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)destination, *source);
 8003a98:	6939      	ldr	r1, [r7, #16]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	461c      	mov	r4, r3
 8003aa2:	4615      	mov	r5, r2
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	462b      	mov	r3, r5
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	f000 ff9b 	bl	80049e4 <HAL_FLASH_Program>
            source++;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	60bb      	str	r3, [r7, #8]
            destination += sizeof(uint32_t);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	613b      	str	r3, [r7, #16]
        for (uint32_t j = 0; j < words; j++) {
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3301      	adds	r3, #1
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d3e7      	bcc.n	8003a98 <SaveParametersToFlash+0x60>
    for (uint8_t i = 0; i < NUM_PARAM_SETS; i++) {
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	3301      	adds	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d9d7      	bls.n	8003a84 <SaveParametersToFlash+0x4c>
        }
    }

    HAL_FLASH_Lock();
 8003ad4:	f000 fffa 	bl	8004acc <HAL_FLASH_Lock>
}
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae0:	2000a694 	.word	0x2000a694
 8003ae4:	08080000 	.word	0x08080000

08003ae8 <InitializeParamSet>:

/**
  * @brief Инициализация конкретного набора параметров значениями по умолчанию
  */
void InitializeParamSet(uint8_t set_number) {
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
    if (set_number >= NUM_PARAM_SETS) return;
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d86b      	bhi.n	8003bd0 <InitializeParamSet+0xe8>

    params[set_number].start_index = 100;
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	4a38      	ldr	r2, [pc, #224]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003afc:	019b      	lsls	r3, r3, #6
 8003afe:	4413      	add	r3, r2
 8003b00:	2264      	movs	r2, #100	@ 0x64
 8003b02:	601a      	str	r2, [r3, #0]
    params[set_number].wave_speed = 520.0f;
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	4a35      	ldr	r2, [pc, #212]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003b08:	019b      	lsls	r3, r3, #6
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4a34      	ldr	r2, [pc, #208]	@ (8003be0 <InitializeParamSet+0xf8>)
 8003b10:	601a      	str	r2, [r3, #0]
    params[set_number].first_left_strobe = 20;
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	4a31      	ldr	r2, [pc, #196]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003b16:	019b      	lsls	r3, r3, #6
 8003b18:	4413      	add	r3, r2
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	2214      	movs	r2, #20
 8003b1e:	601a      	str	r2, [r3, #0]
    params[set_number].first_right_strobe = 120;
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	4a2e      	ldr	r2, [pc, #184]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003b24:	019b      	lsls	r3, r3, #6
 8003b26:	4413      	add	r3, r2
 8003b28:	330c      	adds	r3, #12
 8003b2a:	2278      	movs	r2, #120	@ 0x78
 8003b2c:	601a      	str	r2, [r3, #0]
    params[set_number].second_left_strobe = 140;
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	4a2a      	ldr	r2, [pc, #168]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003b32:	019b      	lsls	r3, r3, #6
 8003b34:	4413      	add	r3, r2
 8003b36:	3310      	adds	r3, #16
 8003b38:	228c      	movs	r2, #140	@ 0x8c
 8003b3a:	601a      	str	r2, [r3, #0]
    params[set_number].second_right_strobe = 240;
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	4a27      	ldr	r2, [pc, #156]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003b40:	019b      	lsls	r3, r3, #6
 8003b42:	4413      	add	r3, r2
 8003b44:	3314      	adds	r3, #20
 8003b46:	22f0      	movs	r2, #240	@ 0xf0
 8003b48:	601a      	str	r2, [r3, #0]
    params[set_number].threshold = 2080.0f;
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	4a23      	ldr	r2, [pc, #140]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003b4e:	019b      	lsls	r3, r3, #6
 8003b50:	4413      	add	r3, r2
 8003b52:	3318      	adds	r3, #24
 8003b54:	4a23      	ldr	r2, [pc, #140]	@ (8003be4 <InitializeParamSet+0xfc>)
 8003b56:	601a      	str	r2, [r3, #0]
    params[set_number].threshold_zero_crossing = 600.0f;
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	4a20      	ldr	r2, [pc, #128]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003b5c:	019b      	lsls	r3, r3, #6
 8003b5e:	4413      	add	r3, r2
 8003b60:	331c      	adds	r3, #28
 8003b62:	4a21      	ldr	r2, [pc, #132]	@ (8003be8 <InitializeParamSet+0x100>)
 8003b64:	601a      	str	r2, [r3, #0]
    params[set_number].probe_length = 400;
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	4a1c      	ldr	r2, [pc, #112]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003b6a:	019b      	lsls	r3, r3, #6
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3320      	adds	r3, #32
 8003b70:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003b74:	601a      	str	r2, [r3, #0]
    params[set_number].method = set_number; // Разные методы по умолчанию для разных наборов
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	79fa      	ldrb	r2, [r7, #7]
 8003b7a:	4918      	ldr	r1, [pc, #96]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003b7c:	019b      	lsls	r3, r3, #6
 8003b7e:	440b      	add	r3, r1
 8003b80:	3324      	adds	r3, #36	@ 0x24
 8003b82:	601a      	str	r2, [r3, #0]
    params[set_number].end_index = 400;
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	4a15      	ldr	r2, [pc, #84]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003b88:	019b      	lsls	r3, r3, #6
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3328      	adds	r3, #40	@ 0x28
 8003b8e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003b92:	601a      	str	r2, [r3, #0]
    params[set_number].cycle_number = 10;
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	4a11      	ldr	r2, [pc, #68]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003b98:	019b      	lsls	r3, r3, #6
 8003b9a:	4413      	add	r3, r2
 8003b9c:	332c      	adds	r3, #44	@ 0x2c
 8003b9e:	220a      	movs	r2, #10
 8003ba0:	601a      	str	r2, [r3, #0]
    strncpy(params[set_number].sensor_number, "0001", sizeof(params[set_number].sensor_number));
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	019b      	lsls	r3, r3, #6
 8003ba6:	3330      	adds	r3, #48	@ 0x30
 8003ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003baa:	4413      	add	r3, r2
 8003bac:	4a0f      	ldr	r2, [pc, #60]	@ (8003bec <InitializeParamSet+0x104>)
 8003bae:	6810      	ldr	r0, [r2, #0]
 8003bb0:	6018      	str	r0, [r3, #0]
 8003bb2:	7912      	ldrb	r2, [r2, #4]
 8003bb4:	711a      	strb	r2, [r3, #4]
    params[set_number].gain = 1.0f;
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	4a08      	ldr	r2, [pc, #32]	@ (8003bdc <InitializeParamSet+0xf4>)
 8003bba:	019b      	lsls	r3, r3, #6
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3338      	adds	r3, #56	@ 0x38
 8003bc0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003bc4:	601a      	str	r2, [r3, #0]

    parameters_initialized[set_number] = true;
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	4a09      	ldr	r2, [pc, #36]	@ (8003bf0 <InitializeParamSet+0x108>)
 8003bca:	2101      	movs	r1, #1
 8003bcc:	54d1      	strb	r1, [r2, r3]
 8003bce:	e000      	b.n	8003bd2 <InitializeParamSet+0xea>
    if (set_number >= NUM_PARAM_SETS) return;
 8003bd0:	bf00      	nop
}
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	2000a694 	.word	0x2000a694
 8003be0:	44020000 	.word	0x44020000
 8003be4:	45020000 	.word	0x45020000
 8003be8:	44160000 	.word	0x44160000
 8003bec:	08013718 	.word	0x08013718
 8003bf0:	2000a794 	.word	0x2000a794

08003bf4 <NormalizeData>:
}

/**
  * @brief Нормализация данных
  */
void NormalizeData(uint8_t param_set) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	f5ad 4d8f 	sub.w	sp, sp, #18304	@ 0x4780
 8003bfa:	b09c      	sub	sp, #112	@ 0x70
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4602      	mov	r2, r0
 8003c00:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003c04:	f2a3 73e9 	subw	r3, r3, #2025	@ 0x7e9
 8003c08:	701a      	strb	r2, [r3, #0]
    if (!parameters_initialized[param_set]) return;
 8003c0a:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003c0e:	f2a3 73e9 	subw	r3, r3, #2025	@ 0x7e9
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4a30      	ldr	r2, [pc, #192]	@ (8003cd8 <NormalizeData+0xe4>)
 8003c16:	5cd3      	ldrb	r3, [r2, r3]
 8003c18:	f083 0301 	eor.w	r3, r3, #1
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d153      	bne.n	8003cca <NormalizeData+0xd6>

    float32_t mean, std_dev;
    float32_t subtracted_mean[DATA_VALUES_COUNT];

    arm_mean_f32(normalized_data, DATA_VALUES_COUNT, &mean);
 8003c22:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 8003c26:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 8003c30:	482a      	ldr	r0, [pc, #168]	@ (8003cdc <NormalizeData+0xe8>)
 8003c32:	f00a f8f3 	bl	800de1c <arm_mean_f32>
    arm_offset_f32(normalized_data, -mean, subtracted_mean, DATA_VALUES_COUNT);
 8003c36:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 8003c3a:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003c3e:	edd3 7a00 	vldr	s15, [r3]
 8003c42:	eef1 7a67 	vneg.f32	s15, s15
 8003c46:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003c4a:	3b68      	subs	r3, #104	@ 0x68
 8003c4c:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003c50:	4619      	mov	r1, r3
 8003c52:	eeb0 0a67 	vmov.f32	s0, s15
 8003c56:	4821      	ldr	r0, [pc, #132]	@ (8003cdc <NormalizeData+0xe8>)
 8003c58:	f00a f964 	bl	800df24 <arm_offset_f32>
    arm_std_f32(subtracted_mean, DATA_VALUES_COUNT, &std_dev);
 8003c5c:	f507 428f 	add.w	r2, r7, #18304	@ 0x4780
 8003c60:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003c64:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003c68:	3b68      	subs	r3, #104	@ 0x68
 8003c6a:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f00a f8b2 	bl	800ddd8 <arm_std_f32>

    if (std_dev != 0.0f) {
 8003c74:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 8003c78:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003c7c:	edd3 7a00 	vldr	s15, [r3]
 8003c80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c88:	d015      	beq.n	8003cb6 <NormalizeData+0xc2>
        arm_scale_f32(subtracted_mean, 1.0f/std_dev, normalized_data, DATA_VALUES_COUNT);
 8003c8a:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 8003c8e:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003ca2:	3b68      	subs	r3, #104	@ 0x68
 8003ca4:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003ca8:	490c      	ldr	r1, [pc, #48]	@ (8003cdc <NormalizeData+0xe8>)
 8003caa:	eeb0 0a47 	vmov.f32	s0, s14
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f00a f8f2 	bl	800de98 <arm_scale_f32>
 8003cb4:	e00a      	b.n	8003ccc <NormalizeData+0xd8>
    } else {
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
 8003cb6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003cba:	3b68      	subs	r3, #104	@ 0x68
 8003cbc:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003cc0:	4906      	ldr	r1, [pc, #24]	@ (8003cdc <NormalizeData+0xe8>)
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f00a f856 	bl	800dd74 <arm_copy_f32>
 8003cc8:	e000      	b.n	8003ccc <NormalizeData+0xd8>
    if (!parameters_initialized[param_set]) return;
 8003cca:	bf00      	nop
    }
}
 8003ccc:	f507 478f 	add.w	r7, r7, #18304	@ 0x4780
 8003cd0:	3770      	adds	r7, #112	@ 0x70
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	2000a794 	.word	0x2000a794
 8003cdc:	2000a7a0 	.word	0x2000a7a0

08003ce0 <CalculateAutocorrelation>:

/**
  * @brief Расчет автокорреляционной функции
  */
void CalculateAutocorrelation(uint8_t param_set) {
 8003ce0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ce4:	b088      	sub	sp, #32
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	4603      	mov	r3, r0
 8003cea:	71fb      	strb	r3, [r7, #7]
    if (!parameters_initialized[param_set]) return;
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	4a34      	ldr	r2, [pc, #208]	@ (8003dc0 <CalculateAutocorrelation+0xe0>)
 8003cf0:	5cd3      	ldrb	r3, [r2, r3]
 8003cf2:	f083 0301 	eor.w	r3, r3, #1
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d15c      	bne.n	8003db6 <CalculateAutocorrelation+0xd6>

    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	e053      	b.n	8003daa <CalculateAutocorrelation+0xca>
        double sum = 0.0;
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        uint32_t count = DATA_VALUES_COUNT - lag;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f5c3 538f 	rsb	r3, r3, #4576	@ 0x11e0
 8003d14:	3318      	adds	r3, #24
 8003d16:	60bb      	str	r3, [r7, #8]

        for (uint32_t i = 0; i < count; i++) {
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e026      	b.n	8003d6c <CalculateAutocorrelation+0x8c>
            sum += (double)normalized_data[i] * (double)normalized_data[i + lag];
 8003d1e:	4a29      	ldr	r2, [pc, #164]	@ (8003dc4 <CalculateAutocorrelation+0xe4>)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fc fc1d 	bl	8000568 <__aeabi_f2d>
 8003d2e:	4680      	mov	r8, r0
 8003d30:	4689      	mov	r9, r1
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	4413      	add	r3, r2
 8003d38:	4a22      	ldr	r2, [pc, #136]	@ (8003dc4 <CalculateAutocorrelation+0xe4>)
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fc fc11 	bl	8000568 <__aeabi_f2d>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4640      	mov	r0, r8
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	f7fc fc63 	bl	8000618 <__aeabi_dmul>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d5a:	f7fc faa7 	bl	80002ac <__adddf3>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	e9c7 2304 	strd	r2, r3, [r7, #16]
        for (uint32_t i = 0; i < count; i++) {
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d3d4      	bcc.n	8003d1e <CalculateAutocorrelation+0x3e>
        }

        autocorrelation_result[lag] = (float32_t)fabs(sum / count);
 8003d74:	68b8      	ldr	r0, [r7, #8]
 8003d76:	f7fc fbd5 	bl	8000524 <__aeabi_ui2d>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d82:	f7fc fd73 	bl	800086c <__aeabi_ddiv>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4614      	mov	r4, r2
 8003d8c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003d90:	4620      	mov	r0, r4
 8003d92:	4629      	mov	r1, r5
 8003d94:	f7fc ff38 	bl	8000c08 <__aeabi_d2f>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	490b      	ldr	r1, [pc, #44]	@ (8003dc8 <CalculateAutocorrelation+0xe8>)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	601a      	str	r2, [r3, #0]
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	3301      	adds	r3, #1
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d9a6      	bls.n	8003d02 <CalculateAutocorrelation+0x22>
 8003db4:	e000      	b.n	8003db8 <CalculateAutocorrelation+0xd8>
    if (!parameters_initialized[param_set]) return;
 8003db6:	bf00      	nop
    }
}
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003dc0:	2000a794 	.word	0x2000a794
 8003dc4:	2000a7a0 	.word	0x2000a7a0
 8003dc8:	2000ef80 	.word	0x2000ef80

08003dcc <FindMaxAutocorrelationIndex>:

/**
  * @brief Поиск индекса максимальной автокорреляции
  */
uint32_t FindMaxAutocorrelationIndex(uint8_t param_set) {
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
    if (!parameters_initialized[param_set]) {
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	4a23      	ldr	r2, [pc, #140]	@ (8003e68 <FindMaxAutocorrelationIndex+0x9c>)
 8003dda:	5cd3      	ldrb	r3, [r2, r3]
 8003ddc:	f083 0301 	eor.w	r3, r3, #1
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <FindMaxAutocorrelationIndex+0x1e>
        return 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e038      	b.n	8003e5c <FindMaxAutocorrelationIndex+0x90>
    }

    float32_t max_value = 0.0f;
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
    uint32_t max_idx = params[param_set].start_index;
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e6c <FindMaxAutocorrelationIndex+0xa0>)
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	4413      	add	r3, r2
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	613b      	str	r3, [r7, #16]
    uint32_t search_end = (params[param_set].end_index < DATA_VALUES_COUNT) ? params[param_set].end_index : DATA_VALUES_COUNT - 1;
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8003e6c <FindMaxAutocorrelationIndex+0xa0>)
 8003e00:	019b      	lsls	r3, r3, #6
 8003e02:	4413      	add	r3, r2
 8003e04:	3328      	adds	r3, #40	@ 0x28
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	bf28      	it	cs
 8003e10:	4613      	movcs	r3, r2
 8003e12:	60bb      	str	r3, [r7, #8]

    for (uint32_t i = params[param_set].start_index; i < search_end; i++) {
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	4a15      	ldr	r2, [pc, #84]	@ (8003e6c <FindMaxAutocorrelationIndex+0xa0>)
 8003e18:	019b      	lsls	r3, r3, #6
 8003e1a:	4413      	add	r3, r2
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e017      	b.n	8003e52 <FindMaxAutocorrelationIndex+0x86>
        if (autocorrelation_result[i] > max_value) {
 8003e22:	4a13      	ldr	r2, [pc, #76]	@ (8003e70 <FindMaxAutocorrelationIndex+0xa4>)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	edd3 7a00 	vldr	s15, [r3]
 8003e2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3a:	d507      	bpl.n	8003e4c <FindMaxAutocorrelationIndex+0x80>
            max_value = autocorrelation_result[i];
 8003e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003e70 <FindMaxAutocorrelationIndex+0xa4>)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	617b      	str	r3, [r7, #20]
            max_idx = i;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	613b      	str	r3, [r7, #16]
    for (uint32_t i = params[param_set].start_index; i < search_end; i++) {
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d3e3      	bcc.n	8003e22 <FindMaxAutocorrelationIndex+0x56>
        }
    }

    return max_idx;
 8003e5a:	693b      	ldr	r3, [r7, #16]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	371c      	adds	r7, #28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	2000a794 	.word	0x2000a794
 8003e6c:	2000a694 	.word	0x2000a694
 8003e70:	2000ef80 	.word	0x2000ef80

08003e74 <CalculateZeroCrossingThickness>:

/**
  * @brief Расчет толщины методом перехода через ноль
  */
void CalculateZeroCrossingThickness(const float32_t* data, uint8_t param_set) {
 8003e74:	b480      	push	{r7}
 8003e76:	b08b      	sub	sp, #44	@ 0x2c
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	70fb      	strb	r3, [r7, #3]
    if (!parameters_initialized[param_set]) {
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	4a53      	ldr	r2, [pc, #332]	@ (8003fd0 <CalculateZeroCrossingThickness+0x15c>)
 8003e84:	5cd3      	ldrb	r3, [r2, r3]
 8003e86:	f083 0301 	eor.w	r3, r3, #1
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f040 8098 	bne.w	8003fc2 <CalculateZeroCrossingThickness+0x14e>
        return;
    }

    float one_point_mm = 1.0f / (params[param_set].wave_speed * 1000.0f * frequency_ns);
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	4a4f      	ldr	r2, [pc, #316]	@ (8003fd4 <CalculateZeroCrossingThickness+0x160>)
 8003e96:	019b      	lsls	r3, r3, #6
 8003e98:	4413      	add	r3, r2
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	edd3 7a00 	vldr	s15, [r3]
 8003ea0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003fd8 <CalculateZeroCrossingThickness+0x164>
 8003ea4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ea8:	4b4c      	ldr	r3, [pc, #304]	@ (8003fdc <CalculateZeroCrossingThickness+0x168>)
 8003eaa:	edd3 7a00 	vldr	s15, [r3]
 8003eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eba:	edc7 7a04 	vstr	s15, [r7, #16]
    uint32_t first_above_threshold_index = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t zero_crossing_index = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	623b      	str	r3, [r7, #32]
    bool found_threshold = false;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	77fb      	strb	r3, [r7, #31]

    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e019      	b.n	8003f04 <CalculateZeroCrossingThickness+0x90>
        if (data[i] >= params[param_set].threshold_zero_crossing) {
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	ed93 7a00 	vldr	s14, [r3]
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	4a3d      	ldr	r2, [pc, #244]	@ (8003fd4 <CalculateZeroCrossingThickness+0x160>)
 8003ee0:	019b      	lsls	r3, r3, #6
 8003ee2:	4413      	add	r3, r2
 8003ee4:	331c      	adds	r3, #28
 8003ee6:	edd3 7a00 	vldr	s15, [r3]
 8003eea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef2:	db04      	blt.n	8003efe <CalculateZeroCrossingThickness+0x8a>
            first_above_threshold_index = i;
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
            found_threshold = true;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	77fb      	strb	r3, [r7, #31]
            break;
 8003efc:	e007      	b.n	8003f0e <CalculateZeroCrossingThickness+0x9a>
    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	3301      	adds	r3, #1
 8003f02:	61bb      	str	r3, [r7, #24]
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d9e0      	bls.n	8003ed0 <CalculateZeroCrossingThickness+0x5c>
        }
    }

    if (!found_threshold) {
 8003f0e:	7ffb      	ldrb	r3, [r7, #31]
 8003f10:	f083 0301 	eor.w	r3, r3, #1
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d004      	beq.n	8003f24 <CalculateZeroCrossingThickness+0xb0>
        thickness_value = 0.0f;
 8003f1a:	4b31      	ldr	r3, [pc, #196]	@ (8003fe0 <CalculateZeroCrossingThickness+0x16c>)
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
        return;
 8003f22:	e04f      	b.n	8003fc4 <CalculateZeroCrossingThickness+0x150>
    }

    bool sign_positive = (data[first_above_threshold_index] >= 0);
 8003f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	edd3 7a00 	vldr	s15, [r3]
 8003f30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f38:	bfac      	ite	ge
 8003f3a:	2301      	movge	r3, #1
 8003f3c:	2300      	movlt	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	3301      	adds	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	e017      	b.n	8003f78 <CalculateZeroCrossingThickness+0x104>
        bool current_sign_positive = (data[i] >= 0);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	4413      	add	r3, r2
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5c:	bfac      	ite	ge
 8003f5e:	2301      	movge	r3, #1
 8003f60:	2300      	movlt	r3, #0
 8003f62:	73bb      	strb	r3, [r7, #14]
        if (current_sign_positive != sign_positive) {
 8003f64:	7bba      	ldrb	r2, [r7, #14]
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d002      	beq.n	8003f72 <CalculateZeroCrossingThickness+0xfe>
            zero_crossing_index = i;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	623b      	str	r3, [r7, #32]
            break;
 8003f70:	e007      	b.n	8003f82 <CalculateZeroCrossingThickness+0x10e>
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	3301      	adds	r3, #1
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d9e2      	bls.n	8003f48 <CalculateZeroCrossingThickness+0xd4>
        }
    }

    if (zero_crossing_index == 0) {
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <CalculateZeroCrossingThickness+0x11e>
        thickness_value = 0.0f;
 8003f88:	4b15      	ldr	r3, [pc, #84]	@ (8003fe0 <CalculateZeroCrossingThickness+0x16c>)
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
        return;
 8003f90:	e018      	b.n	8003fc4 <CalculateZeroCrossingThickness+0x150>
    }

    uint32_t final_index = zero_crossing_index + params[param_set].probe_length;
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	4a0f      	ldr	r2, [pc, #60]	@ (8003fd4 <CalculateZeroCrossingThickness+0x160>)
 8003f96:	019b      	lsls	r3, r3, #6
 8003f98:	4413      	add	r3, r2
 8003f9a:	3320      	adds	r3, #32
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6a3a      	ldr	r2, [r7, #32]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	60bb      	str	r3, [r7, #8]
    thickness_value = final_index / (2.0f * one_point_mm);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fae:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fb2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fba:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <CalculateZeroCrossingThickness+0x16c>)
 8003fbc:	edc3 7a00 	vstr	s15, [r3]
 8003fc0:	e000      	b.n	8003fc4 <CalculateZeroCrossingThickness+0x150>
        return;
 8003fc2:	bf00      	nop
}
 8003fc4:	372c      	adds	r7, #44	@ 0x2c
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	2000a794 	.word	0x2000a794
 8003fd4:	2000a694 	.word	0x2000a694
 8003fd8:	447a0000 	.word	0x447a0000
 8003fdc:	2000000c 	.word	0x2000000c
 8003fe0:	2000a79c 	.word	0x2000a79c

08003fe4 <CalculateStrobeThickness>:

/**
  * @brief Расчет толщины методом по стробам
  */
void CalculateStrobeThickness(const float32_t* data, uint8_t param_set) {
 8003fe4:	b480      	push	{r7}
 8003fe6:	b08b      	sub	sp, #44	@ 0x2c
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
    if (!parameters_initialized[param_set]) {
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	4a5f      	ldr	r2, [pc, #380]	@ (8004170 <CalculateStrobeThickness+0x18c>)
 8003ff4:	5cd3      	ldrb	r3, [r2, r3]
 8003ff6:	f083 0301 	eor.w	r3, r3, #1
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f040 80b0 	bne.w	8004162 <CalculateStrobeThickness+0x17e>
        return;
    }

    float one_point_mm = 1.0f / (params[param_set].wave_speed * 1000.0f * frequency_ns);
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	4a5b      	ldr	r2, [pc, #364]	@ (8004174 <CalculateStrobeThickness+0x190>)
 8004006:	019b      	lsls	r3, r3, #6
 8004008:	4413      	add	r3, r2
 800400a:	3304      	adds	r3, #4
 800400c:	edd3 7a00 	vldr	s15, [r3]
 8004010:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8004178 <CalculateStrobeThickness+0x194>
 8004014:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004018:	4b58      	ldr	r3, [pc, #352]	@ (800417c <CalculateStrobeThickness+0x198>)
 800401a:	edd3 7a00 	vldr	s15, [r3]
 800401e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800402a:	edc7 7a03 	vstr	s15, [r7, #12]
    float32_t max_value_first = -FLT_MAX;
 800402e:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t max_index_first = params[param_set].first_left_strobe;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	4a4f      	ldr	r2, [pc, #316]	@ (8004174 <CalculateStrobeThickness+0x190>)
 8004038:	019b      	lsls	r3, r3, #6
 800403a:	4413      	add	r3, r2
 800403c:	3308      	adds	r3, #8
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	623b      	str	r3, [r7, #32]
    float32_t max_value_second = -FLT_MAX;
 8004042:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8004046:	61fb      	str	r3, [r7, #28]
    uint32_t max_index_second = params[param_set].second_left_strobe;
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	4a4a      	ldr	r2, [pc, #296]	@ (8004174 <CalculateStrobeThickness+0x190>)
 800404c:	019b      	lsls	r3, r3, #6
 800404e:	4413      	add	r3, r2
 8004050:	3310      	adds	r3, #16
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = params[param_set].first_left_strobe; i <= params[param_set].first_right_strobe; i++) {
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	4a46      	ldr	r2, [pc, #280]	@ (8004174 <CalculateStrobeThickness+0x190>)
 800405a:	019b      	lsls	r3, r3, #6
 800405c:	4413      	add	r3, r2
 800405e:	3308      	adds	r3, #8
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e01c      	b.n	80040a0 <CalculateStrobeThickness+0xbc>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_first) {
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f241 3287 	movw	r2, #4999	@ 0x1387
 800406c:	4293      	cmp	r3, r2
 800406e:	d814      	bhi.n	800409a <CalculateStrobeThickness+0xb6>
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	4413      	add	r3, r2
 8004078:	edd3 7a00 	vldr	s15, [r3]
 800407c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004088:	d507      	bpl.n	800409a <CalculateStrobeThickness+0xb6>
            max_value_first = data[i];
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	627b      	str	r3, [r7, #36]	@ 0x24
            max_index_first = i;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	623b      	str	r3, [r7, #32]
    for (uint32_t i = params[param_set].first_left_strobe; i <= params[param_set].first_right_strobe; i++) {
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	3301      	adds	r3, #1
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	4a34      	ldr	r2, [pc, #208]	@ (8004174 <CalculateStrobeThickness+0x190>)
 80040a4:	019b      	lsls	r3, r3, #6
 80040a6:	4413      	add	r3, r2
 80040a8:	330c      	adds	r3, #12
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d9d9      	bls.n	8004066 <CalculateStrobeThickness+0x82>
        }
    }

    for (uint32_t i = params[param_set].second_left_strobe; i <= params[param_set].second_right_strobe; i++) {
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004174 <CalculateStrobeThickness+0x190>)
 80040b6:	019b      	lsls	r3, r3, #6
 80040b8:	4413      	add	r3, r2
 80040ba:	3310      	adds	r3, #16
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	e01c      	b.n	80040fc <CalculateStrobeThickness+0x118>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_second) {
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d814      	bhi.n	80040f6 <CalculateStrobeThickness+0x112>
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	4413      	add	r3, r2
 80040d4:	edd3 7a00 	vldr	s15, [r3]
 80040d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80040dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e4:	d507      	bpl.n	80040f6 <CalculateStrobeThickness+0x112>
            max_value_second = data[i];
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	61fb      	str	r3, [r7, #28]
            max_index_second = i;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = params[param_set].second_left_strobe; i <= params[param_set].second_right_strobe; i++) {
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	3301      	adds	r3, #1
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004174 <CalculateStrobeThickness+0x190>)
 8004100:	019b      	lsls	r3, r3, #6
 8004102:	4413      	add	r3, r2
 8004104:	3314      	adds	r3, #20
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	429a      	cmp	r2, r3
 800410c:	d9d9      	bls.n	80040c2 <CalculateStrobeThickness+0xde>
        }
    }

    if (max_value_first == -FLT_MAX || max_value_second == -FLT_MAX) {
 800410e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004112:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8004180 <CalculateStrobeThickness+0x19c>
 8004116:	eef4 7a47 	vcmp.f32	s15, s14
 800411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411e:	d008      	beq.n	8004132 <CalculateStrobeThickness+0x14e>
 8004120:	edd7 7a07 	vldr	s15, [r7, #28]
 8004124:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8004180 <CalculateStrobeThickness+0x19c>
 8004128:	eef4 7a47 	vcmp.f32	s15, s14
 800412c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004130:	d104      	bne.n	800413c <CalculateStrobeThickness+0x158>
        thickness_value = 0.0f;
 8004132:	4b14      	ldr	r3, [pc, #80]	@ (8004184 <CalculateStrobeThickness+0x1a0>)
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
        return;
 800413a:	e013      	b.n	8004164 <CalculateStrobeThickness+0x180>
    }

    uint32_t index_difference = max_index_second - max_index_first;
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	60bb      	str	r3, [r7, #8]
    thickness_value = index_difference / (2.0f * one_point_mm);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004152:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800415a:	4b0a      	ldr	r3, [pc, #40]	@ (8004184 <CalculateStrobeThickness+0x1a0>)
 800415c:	edc3 7a00 	vstr	s15, [r3]
 8004160:	e000      	b.n	8004164 <CalculateStrobeThickness+0x180>
        return;
 8004162:	bf00      	nop
}
 8004164:	372c      	adds	r7, #44	@ 0x2c
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	2000a794 	.word	0x2000a794
 8004174:	2000a694 	.word	0x2000a694
 8004178:	447a0000 	.word	0x447a0000
 800417c:	2000000c 	.word	0x2000000c
 8004180:	ff7fffff 	.word	0xff7fffff
 8004184:	2000a79c 	.word	0x2000a79c

08004188 <CalculateAndSendACFThickness>:

/**
  * @brief Расчет толщины автокорреляционным методом
  */
void CalculateAndSendACFThickness(uint8_t param_set) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	71fb      	strb	r3, [r7, #7]
    if (!parameters_initialized[param_set]) {
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	4a1a      	ldr	r2, [pc, #104]	@ (8004200 <CalculateAndSendACFThickness+0x78>)
 8004196:	5cd3      	ldrb	r3, [r2, r3]
 8004198:	f083 0301 	eor.w	r3, r3, #1
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d129      	bne.n	80041f6 <CalculateAndSendACFThickness+0x6e>
        return;
    }

    float one_point_mm = 1.0f / (params[param_set].wave_speed * 1000.0f * frequency_ns);
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	4a17      	ldr	r2, [pc, #92]	@ (8004204 <CalculateAndSendACFThickness+0x7c>)
 80041a6:	019b      	lsls	r3, r3, #6
 80041a8:	4413      	add	r3, r2
 80041aa:	3304      	adds	r3, #4
 80041ac:	edd3 7a00 	vldr	s15, [r3]
 80041b0:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004208 <CalculateAndSendACFThickness+0x80>
 80041b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041b8:	4b14      	ldr	r3, [pc, #80]	@ (800420c <CalculateAndSendACFThickness+0x84>)
 80041ba:	edd3 7a00 	vldr	s15, [r3]
 80041be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ca:	edc7 7a03 	vstr	s15, [r7, #12]
    uint32_t max_index = FindMaxAutocorrelationIndex(param_set);
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff fdfb 	bl	8003dcc <FindMaxAutocorrelationIndex>
 80041d6:	60b8      	str	r0, [r7, #8]
    thickness_value = max_index / (2.0f * one_point_mm);
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80041e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80041ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ee:	4b08      	ldr	r3, [pc, #32]	@ (8004210 <CalculateAndSendACFThickness+0x88>)
 80041f0:	edc3 7a00 	vstr	s15, [r3]
 80041f4:	e000      	b.n	80041f8 <CalculateAndSendACFThickness+0x70>
        return;
 80041f6:	bf00      	nop
}
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	2000a794 	.word	0x2000a794
 8004204:	2000a694 	.word	0x2000a694
 8004208:	447a0000 	.word	0x447a0000
 800420c:	2000000c 	.word	0x2000000c
 8004210:	2000a79c 	.word	0x2000a79c

08004214 <ProcessDataByMethod>:

/**
  * @brief Обработка данных в зависимости от выбранного метода для конкретного набора параметров
  */
void ProcessDataByMethod(uint8_t param_set) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
    if (param_set >= NUM_PARAM_SETS || !parameters_initialized[param_set]) {
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d86a      	bhi.n	80042fa <ProcessDataByMethod+0xe6>
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	4a38      	ldr	r2, [pc, #224]	@ (8004308 <ProcessDataByMethod+0xf4>)
 8004228:	5cd3      	ldrb	r3, [r2, r3]
 800422a:	f083 0301 	eor.w	r3, r3, #1
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d162      	bne.n	80042fa <ProcessDataByMethod+0xe6>
        return;
    }

    if (!averaging_complete) {
 8004234:	4b35      	ldr	r3, [pc, #212]	@ (800430c <ProcessDataByMethod+0xf8>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	f083 0301 	eor.w	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d004      	beq.n	800424c <ProcessDataByMethod+0x38>
        thickness_value = 0.0f;
 8004242:	4b33      	ldr	r3, [pc, #204]	@ (8004310 <ProcessDataByMethod+0xfc>)
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
        return;
 800424a:	e059      	b.n	8004300 <ProcessDataByMethod+0xec>
    }

    // Копируем данные из усредненного массива FPGA
    uint32_t copy_size = (DATA_SIZE < FINAL_DATA_SIZE) ? DATA_SIZE : FINAL_DATA_SIZE;
 800424c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004250:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0; i < copy_size; i++) {
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	e00c      	b.n	8004272 <ProcessDataByMethod+0x5e>
        final_data[i] = averaged_fpga_data[i];
 8004258:	4a2e      	ldr	r2, [pc, #184]	@ (8004314 <ProcessDataByMethod+0x100>)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	492d      	ldr	r1, [pc, #180]	@ (8004318 <ProcessDataByMethod+0x104>)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < copy_size; i++) {
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	3301      	adds	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	429a      	cmp	r2, r3
 8004278:	d3ee      	bcc.n	8004258 <ProcessDataByMethod+0x44>
    }

    for (uint32_t i = copy_size; i < FINAL_DATA_SIZE; i++) {
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	e009      	b.n	8004294 <ProcessDataByMethod+0x80>
        final_data[i] = 0.0f;
 8004280:	4a25      	ldr	r2, [pc, #148]	@ (8004318 <ProcessDataByMethod+0x104>)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
    for (uint32_t i = copy_size; i < FINAL_DATA_SIZE; i++) {
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	3301      	adds	r3, #1
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f241 3287 	movw	r2, #4999	@ 0x1387
 800429a:	4293      	cmp	r3, r2
 800429c:	d9f0      	bls.n	8004280 <ProcessDataByMethod+0x6c>
    }

    // Обрабатываем данные в зависимости от выбранного метода
    switch (params[param_set].method) {
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	4a1e      	ldr	r2, [pc, #120]	@ (800431c <ProcessDataByMethod+0x108>)
 80042a2:	019b      	lsls	r3, r3, #6
 80042a4:	4413      	add	r3, r2
 80042a6:	3324      	adds	r3, #36	@ 0x24
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d01f      	beq.n	80042ee <ProcessDataByMethod+0xda>
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d825      	bhi.n	80042fe <ProcessDataByMethod+0xea>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <ProcessDataByMethod+0xa8>
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d013      	beq.n	80042e2 <ProcessDataByMethod+0xce>
            // Метод стробов
            CalculateStrobeThickness(final_data, param_set);
            break;

        default:
            break;
 80042ba:	e020      	b.n	80042fe <ProcessDataByMethod+0xea>
            arm_copy_f32(final_data, normalized_data, DATA_VALUES_COUNT);
 80042bc:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 80042c0:	4917      	ldr	r1, [pc, #92]	@ (8004320 <ProcessDataByMethod+0x10c>)
 80042c2:	4815      	ldr	r0, [pc, #84]	@ (8004318 <ProcessDataByMethod+0x104>)
 80042c4:	f009 fd56 	bl	800dd74 <arm_copy_f32>
            NormalizeData(param_set);
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fc92 	bl	8003bf4 <NormalizeData>
            CalculateAutocorrelation(param_set);
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fd04 	bl	8003ce0 <CalculateAutocorrelation>
            CalculateAndSendACFThickness(param_set);
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff54 	bl	8004188 <CalculateAndSendACFThickness>
            break;
 80042e0:	e00e      	b.n	8004300 <ProcessDataByMethod+0xec>
            CalculateZeroCrossingThickness(final_data, param_set);
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	4619      	mov	r1, r3
 80042e6:	480c      	ldr	r0, [pc, #48]	@ (8004318 <ProcessDataByMethod+0x104>)
 80042e8:	f7ff fdc4 	bl	8003e74 <CalculateZeroCrossingThickness>
            break;
 80042ec:	e008      	b.n	8004300 <ProcessDataByMethod+0xec>
            CalculateStrobeThickness(final_data, param_set);
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	4619      	mov	r1, r3
 80042f2:	4809      	ldr	r0, [pc, #36]	@ (8004318 <ProcessDataByMethod+0x104>)
 80042f4:	f7ff fe76 	bl	8003fe4 <CalculateStrobeThickness>
            break;
 80042f8:	e002      	b.n	8004300 <ProcessDataByMethod+0xec>
        return;
 80042fa:	bf00      	nop
 80042fc:	e000      	b.n	8004300 <ProcessDataByMethod+0xec>
            break;
 80042fe:	bf00      	nop
    }
}
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	2000a794 	.word	0x2000a794
 800430c:	2000a670 	.word	0x2000a670
 8004310:	2000a79c 	.word	0x2000a79c
 8004314:	20005850 	.word	0x20005850
 8004318:	20013760 	.word	0x20013760
 800431c:	2000a694 	.word	0x2000a694
 8004320:	2000a7a0 	.word	0x2000a7a0

08004324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004324:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800435c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004328:	f7ff fa56 	bl	80037d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800432c:	480c      	ldr	r0, [pc, #48]	@ (8004360 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800432e:	490d      	ldr	r1, [pc, #52]	@ (8004364 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004330:	4a0d      	ldr	r2, [pc, #52]	@ (8004368 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004334:	e002      	b.n	800433c <LoopCopyDataInit>

08004336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800433a:	3304      	adds	r3, #4

0800433c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800433c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800433e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004340:	d3f9      	bcc.n	8004336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004342:	4a0a      	ldr	r2, [pc, #40]	@ (800436c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004344:	4c0a      	ldr	r4, [pc, #40]	@ (8004370 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004348:	e001      	b.n	800434e <LoopFillZerobss>

0800434a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800434a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800434c:	3204      	adds	r2, #4

0800434e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800434e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004350:	d3fb      	bcc.n	800434a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004352:	f00b fe99 	bl	8010088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004356:	f7fe fc27 	bl	8002ba8 <main>
  bx  lr    
 800435a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800435c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004364:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8004368:	0806da20 	.word	0x0806da20
  ldr r2, =_sbss
 800436c:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8004370:	2001a724 	.word	0x2001a724

08004374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004374:	e7fe      	b.n	8004374 <ADC_IRQHandler>
	...

08004378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800437c:	4b0e      	ldr	r3, [pc, #56]	@ (80043b8 <HAL_Init+0x40>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0d      	ldr	r2, [pc, #52]	@ (80043b8 <HAL_Init+0x40>)
 8004382:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004386:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004388:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <HAL_Init+0x40>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a0a      	ldr	r2, [pc, #40]	@ (80043b8 <HAL_Init+0x40>)
 800438e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004392:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004394:	4b08      	ldr	r3, [pc, #32]	@ (80043b8 <HAL_Init+0x40>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a07      	ldr	r2, [pc, #28]	@ (80043b8 <HAL_Init+0x40>)
 800439a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800439e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043a0:	2003      	movs	r0, #3
 80043a2:	f000 f94f 	bl	8004644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043a6:	200f      	movs	r0, #15
 80043a8:	f000 f808 	bl	80043bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043ac:	f7fe ff7e 	bl	80032ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40023c00 	.word	0x40023c00

080043bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043c4:	4b12      	ldr	r3, [pc, #72]	@ (8004410 <HAL_InitTick+0x54>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b12      	ldr	r3, [pc, #72]	@ (8004414 <HAL_InitTick+0x58>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	4619      	mov	r1, r3
 80043ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f967 	bl	80046ae <HAL_SYSTICK_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e00e      	b.n	8004408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b0f      	cmp	r3, #15
 80043ee:	d80a      	bhi.n	8004406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043f0:	2200      	movs	r2, #0
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	f04f 30ff 	mov.w	r0, #4294967295
 80043f8:	f000 f92f 	bl	800465a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043fc:	4a06      	ldr	r2, [pc, #24]	@ (8004418 <HAL_InitTick+0x5c>)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e000      	b.n	8004408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000008 	.word	0x20000008
 8004414:	20000014 	.word	0x20000014
 8004418:	20000010 	.word	0x20000010

0800441c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004420:	4b06      	ldr	r3, [pc, #24]	@ (800443c <HAL_IncTick+0x20>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <HAL_IncTick+0x24>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4413      	add	r3, r2
 800442c:	4a04      	ldr	r2, [pc, #16]	@ (8004440 <HAL_IncTick+0x24>)
 800442e:	6013      	str	r3, [r2, #0]
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000014 	.word	0x20000014
 8004440:	20018580 	.word	0x20018580

08004444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return uwTick;
 8004448:	4b03      	ldr	r3, [pc, #12]	@ (8004458 <HAL_GetTick+0x14>)
 800444a:	681b      	ldr	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20018580 	.word	0x20018580

0800445c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004464:	f7ff ffee 	bl	8004444 <HAL_GetTick>
 8004468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d005      	beq.n	8004482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004476:	4b0a      	ldr	r3, [pc, #40]	@ (80044a0 <HAL_Delay+0x44>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004482:	bf00      	nop
 8004484:	f7ff ffde 	bl	8004444 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	429a      	cmp	r2, r3
 8004492:	d8f7      	bhi.n	8004484 <HAL_Delay+0x28>
  {
  }
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000014 	.word	0x20000014

080044a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b4:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <__NVIC_SetPriorityGrouping+0x44>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044c0:	4013      	ands	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044d6:	4a04      	ldr	r2, [pc, #16]	@ (80044e8 <__NVIC_SetPriorityGrouping+0x44>)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	60d3      	str	r3, [r2, #12]
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f0:	4b04      	ldr	r3, [pc, #16]	@ (8004504 <__NVIC_GetPriorityGrouping+0x18>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	f003 0307 	and.w	r3, r3, #7
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004516:	2b00      	cmp	r3, #0
 8004518:	db0b      	blt.n	8004532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	f003 021f 	and.w	r2, r3, #31
 8004520:	4907      	ldr	r1, [pc, #28]	@ (8004540 <__NVIC_EnableIRQ+0x38>)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2001      	movs	r0, #1
 800452a:	fa00 f202 	lsl.w	r2, r0, r2
 800452e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	e000e100 	.word	0xe000e100

08004544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	6039      	str	r1, [r7, #0]
 800454e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004554:	2b00      	cmp	r3, #0
 8004556:	db0a      	blt.n	800456e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	490c      	ldr	r1, [pc, #48]	@ (8004590 <__NVIC_SetPriority+0x4c>)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	0112      	lsls	r2, r2, #4
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	440b      	add	r3, r1
 8004568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800456c:	e00a      	b.n	8004584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	4908      	ldr	r1, [pc, #32]	@ (8004594 <__NVIC_SetPriority+0x50>)
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	3b04      	subs	r3, #4
 800457c:	0112      	lsls	r2, r2, #4
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	440b      	add	r3, r1
 8004582:	761a      	strb	r2, [r3, #24]
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	e000e100 	.word	0xe000e100
 8004594:	e000ed00 	.word	0xe000ed00

08004598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	@ 0x24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f1c3 0307 	rsb	r3, r3, #7
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	bf28      	it	cs
 80045b6:	2304      	movcs	r3, #4
 80045b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3304      	adds	r3, #4
 80045be:	2b06      	cmp	r3, #6
 80045c0:	d902      	bls.n	80045c8 <NVIC_EncodePriority+0x30>
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3b03      	subs	r3, #3
 80045c6:	e000      	b.n	80045ca <NVIC_EncodePriority+0x32>
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43da      	mvns	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	401a      	ands	r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e0:	f04f 31ff 	mov.w	r1, #4294967295
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ea:	43d9      	mvns	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f0:	4313      	orrs	r3, r2
         );
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3724      	adds	r7, #36	@ 0x24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3b01      	subs	r3, #1
 800460c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004610:	d301      	bcc.n	8004616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004612:	2301      	movs	r3, #1
 8004614:	e00f      	b.n	8004636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004616:	4a0a      	ldr	r2, [pc, #40]	@ (8004640 <SysTick_Config+0x40>)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3b01      	subs	r3, #1
 800461c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800461e:	210f      	movs	r1, #15
 8004620:	f04f 30ff 	mov.w	r0, #4294967295
 8004624:	f7ff ff8e 	bl	8004544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004628:	4b05      	ldr	r3, [pc, #20]	@ (8004640 <SysTick_Config+0x40>)
 800462a:	2200      	movs	r2, #0
 800462c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800462e:	4b04      	ldr	r3, [pc, #16]	@ (8004640 <SysTick_Config+0x40>)
 8004630:	2207      	movs	r2, #7
 8004632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	e000e010 	.word	0xe000e010

08004644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff29 	bl	80044a4 <__NVIC_SetPriorityGrouping>
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af00      	add	r7, sp, #0
 8004660:	4603      	mov	r3, r0
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800466c:	f7ff ff3e 	bl	80044ec <__NVIC_GetPriorityGrouping>
 8004670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	6978      	ldr	r0, [r7, #20]
 8004678:	f7ff ff8e 	bl	8004598 <NVIC_EncodePriority>
 800467c:	4602      	mov	r2, r0
 800467e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff ff5d 	bl	8004544 <__NVIC_SetPriority>
}
 800468a:	bf00      	nop
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	4603      	mov	r3, r0
 800469a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800469c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff ff31 	bl	8004508 <__NVIC_EnableIRQ>
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff ffa2 	bl	8004600 <SysTick_Config>
 80046bc:	4603      	mov	r3, r0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e014      	b.n	8004702 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	791b      	ldrb	r3, [r3, #4]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d105      	bne.n	80046ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7fe fe07 	bl	80032fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e046      	b.n	80047ac <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	795b      	ldrb	r3, [r3, #5]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_DAC_Start+0x20>
 8004726:	2302      	movs	r3, #2
 8004728:	e040      	b.n	80047ac <HAL_DAC_Start+0xa2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6819      	ldr	r1, [r3, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2201      	movs	r2, #1
 8004744:	409a      	lsls	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10f      	bne.n	8004774 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800475e:	2b3c      	cmp	r3, #60	@ 0x3c
 8004760:	d11d      	bne.n	800479e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	e014      	b.n	800479e <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	213c      	movs	r1, #60	@ 0x3c
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	429a      	cmp	r2, r3
 800478c:	d107      	bne.n	800479e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0202 	orr.w	r2, r2, #2
 800479c:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e015      	b.n	8004800 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d105      	bne.n	80047ec <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4413      	add	r3, r2
 80047e6:	3308      	adds	r3, #8
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	e004      	b.n	80047f6 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	3314      	adds	r3, #20
 80047f4:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	461a      	mov	r2, r3
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	@ 0x24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_DAC_ConfigChannel+0x1c>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e042      	b.n	80048b2 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	795b      	ldrb	r3, [r3, #5]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_DAC_ConfigChannel+0x2c>
 8004834:	2302      	movs	r3, #2
 8004836:	e03c      	b.n	80048b2 <HAL_DAC_ConfigChannel+0xa6>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2202      	movs	r2, #2
 8004842:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800485a:	43db      	mvns	r3, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4013      	ands	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6819      	ldr	r1, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	22c0      	movs	r2, #192	@ 0xc0
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43da      	mvns	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	400a      	ands	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80048b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3724      	adds	r7, #36	@ 0x24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048cc:	f7ff fdba 	bl	8004444 <HAL_GetTick>
 80048d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d008      	beq.n	80048f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2280      	movs	r2, #128	@ 0x80
 80048e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e052      	b.n	8004996 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0216 	bic.w	r2, r2, #22
 80048fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800490e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d103      	bne.n	8004920 <HAL_DMA_Abort+0x62>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0208 	bic.w	r2, r2, #8
 800492e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004940:	e013      	b.n	800496a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004942:	f7ff fd7f 	bl	8004444 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b05      	cmp	r3, #5
 800494e:	d90c      	bls.n	800496a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2203      	movs	r2, #3
 800495a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e015      	b.n	8004996 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e4      	bne.n	8004942 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497c:	223f      	movs	r2, #63	@ 0x3f
 800497e:	409a      	lsls	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d004      	beq.n	80049bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2280      	movs	r2, #128	@ 0x80
 80049b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e00c      	b.n	80049d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2205      	movs	r2, #5
 80049c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0201 	bic.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80049f2:	4b23      	ldr	r3, [pc, #140]	@ (8004a80 <HAL_FLASH_Program+0x9c>)
 80049f4:	7e1b      	ldrb	r3, [r3, #24]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_FLASH_Program+0x1a>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e03b      	b.n	8004a76 <HAL_FLASH_Program+0x92>
 80049fe:	4b20      	ldr	r3, [pc, #128]	@ (8004a80 <HAL_FLASH_Program+0x9c>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a04:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004a08:	f000 f870 	bl	8004aec <FLASH_WaitForLastOperation>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d12b      	bne.n	8004a6e <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d105      	bne.n	8004a28 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004a1c:	783b      	ldrb	r3, [r7, #0]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	68b8      	ldr	r0, [r7, #8]
 8004a22:	f000 f91b 	bl	8004c5c <FLASH_Program_Byte>
 8004a26:	e016      	b.n	8004a56 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d105      	bne.n	8004a3a <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004a2e:	883b      	ldrh	r3, [r7, #0]
 8004a30:	4619      	mov	r1, r3
 8004a32:	68b8      	ldr	r0, [r7, #8]
 8004a34:	f000 f8ee 	bl	8004c14 <FLASH_Program_HalfWord>
 8004a38:	e00d      	b.n	8004a56 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d105      	bne.n	8004a4c <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	4619      	mov	r1, r3
 8004a44:	68b8      	ldr	r0, [r7, #8]
 8004a46:	f000 f8c3 	bl	8004bd0 <FLASH_Program_Word>
 8004a4a:	e004      	b.n	8004a56 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a50:	68b8      	ldr	r0, [r7, #8]
 8004a52:	f000 f88b 	bl	8004b6c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a56:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004a5a:	f000 f847 	bl	8004aec <FLASH_WaitForLastOperation>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8004a62:	4b08      	ldr	r3, [pc, #32]	@ (8004a84 <HAL_FLASH_Program+0xa0>)
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	4a07      	ldr	r2, [pc, #28]	@ (8004a84 <HAL_FLASH_Program+0xa0>)
 8004a68:	f023 0301 	bic.w	r3, r3, #1
 8004a6c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a6e:	4b04      	ldr	r3, [pc, #16]	@ (8004a80 <HAL_FLASH_Program+0x9c>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	761a      	strb	r2, [r3, #24]

  return status;
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20018584 	.word	0x20018584
 8004a84:	40023c00 	.word	0x40023c00

08004a88 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a92:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <HAL_FLASH_Unlock+0x38>)
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	da0b      	bge.n	8004ab2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a9a:	4b09      	ldr	r3, [pc, #36]	@ (8004ac0 <HAL_FLASH_Unlock+0x38>)
 8004a9c:	4a09      	ldr	r2, [pc, #36]	@ (8004ac4 <HAL_FLASH_Unlock+0x3c>)
 8004a9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004aa0:	4b07      	ldr	r3, [pc, #28]	@ (8004ac0 <HAL_FLASH_Unlock+0x38>)
 8004aa2:	4a09      	ldr	r2, [pc, #36]	@ (8004ac8 <HAL_FLASH_Unlock+0x40>)
 8004aa4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004aa6:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <HAL_FLASH_Unlock+0x38>)
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	da01      	bge.n	8004ab2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	40023c00 	.word	0x40023c00
 8004ac4:	45670123 	.word	0x45670123
 8004ac8:	cdef89ab 	.word	0xcdef89ab

08004acc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004ad0:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <HAL_FLASH_Lock+0x1c>)
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	4a04      	ldr	r2, [pc, #16]	@ (8004ae8 <HAL_FLASH_Lock+0x1c>)
 8004ad6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ada:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40023c00 	.word	0x40023c00

08004aec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004af8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b64 <FLASH_WaitForLastOperation+0x78>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004afe:	f7ff fca1 	bl	8004444 <HAL_GetTick>
 8004b02:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004b04:	e010      	b.n	8004b28 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d00c      	beq.n	8004b28 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <FLASH_WaitForLastOperation+0x38>
 8004b14:	f7ff fc96 	bl	8004444 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d201      	bcs.n	8004b28 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e019      	b.n	8004b5c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004b28:	4b0f      	ldr	r3, [pc, #60]	@ (8004b68 <FLASH_WaitForLastOperation+0x7c>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e8      	bne.n	8004b06 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004b34:	4b0c      	ldr	r3, [pc, #48]	@ (8004b68 <FLASH_WaitForLastOperation+0x7c>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004b40:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <FLASH_WaitForLastOperation+0x7c>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004b46:	4b08      	ldr	r3, [pc, #32]	@ (8004b68 <FLASH_WaitForLastOperation+0x7c>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004b52:	f000 f8a5 	bl	8004ca0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0

}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20018584 	.word	0x20018584
 8004b68:	40023c00 	.word	0x40023c00

08004b6c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b78:	4b14      	ldr	r3, [pc, #80]	@ (8004bcc <FLASH_Program_DoubleWord+0x60>)
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	4a13      	ldr	r2, [pc, #76]	@ (8004bcc <FLASH_Program_DoubleWord+0x60>)
 8004b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004b84:	4b11      	ldr	r3, [pc, #68]	@ (8004bcc <FLASH_Program_DoubleWord+0x60>)
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	4a10      	ldr	r2, [pc, #64]	@ (8004bcc <FLASH_Program_DoubleWord+0x60>)
 8004b8a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004b8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b90:	4b0e      	ldr	r3, [pc, #56]	@ (8004bcc <FLASH_Program_DoubleWord+0x60>)
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	4a0d      	ldr	r2, [pc, #52]	@ (8004bcc <FLASH_Program_DoubleWord+0x60>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004ba2:	f3bf 8f6f 	isb	sy
}
 8004ba6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8004ba8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	000a      	movs	r2, r1
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	68f9      	ldr	r1, [r7, #12]
 8004bba:	3104      	adds	r1, #4
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40023c00 	.word	0x40023c00

08004bd0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004bda:	4b0d      	ldr	r3, [pc, #52]	@ (8004c10 <FLASH_Program_Word+0x40>)
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	4a0c      	ldr	r2, [pc, #48]	@ (8004c10 <FLASH_Program_Word+0x40>)
 8004be0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004be4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004be6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c10 <FLASH_Program_Word+0x40>)
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	4a09      	ldr	r2, [pc, #36]	@ (8004c10 <FLASH_Program_Word+0x40>)
 8004bec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bf0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004bf2:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <FLASH_Program_Word+0x40>)
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	4a06      	ldr	r2, [pc, #24]	@ (8004c10 <FLASH_Program_Word+0x40>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	601a      	str	r2, [r3, #0]
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40023c00 	.word	0x40023c00

08004c14 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c20:	4b0d      	ldr	r3, [pc, #52]	@ (8004c58 <FLASH_Program_HalfWord+0x44>)
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	4a0c      	ldr	r2, [pc, #48]	@ (8004c58 <FLASH_Program_HalfWord+0x44>)
 8004c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <FLASH_Program_HalfWord+0x44>)
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	4a09      	ldr	r2, [pc, #36]	@ (8004c58 <FLASH_Program_HalfWord+0x44>)
 8004c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c38:	4b07      	ldr	r3, [pc, #28]	@ (8004c58 <FLASH_Program_HalfWord+0x44>)
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	4a06      	ldr	r2, [pc, #24]	@ (8004c58 <FLASH_Program_HalfWord+0x44>)
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	801a      	strh	r2, [r3, #0]
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40023c00 	.word	0x40023c00

08004c5c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c68:	4b0c      	ldr	r3, [pc, #48]	@ (8004c9c <FLASH_Program_Byte+0x40>)
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c9c <FLASH_Program_Byte+0x40>)
 8004c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004c74:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <FLASH_Program_Byte+0x40>)
 8004c76:	4a09      	ldr	r2, [pc, #36]	@ (8004c9c <FLASH_Program_Byte+0x40>)
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c7c:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <FLASH_Program_Byte+0x40>)
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	4a06      	ldr	r2, [pc, #24]	@ (8004c9c <FLASH_Program_Byte+0x40>)
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	78fa      	ldrb	r2, [r7, #3]
 8004c8c:	701a      	strb	r2, [r3, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40023c00 	.word	0x40023c00

08004ca0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004ca4:	4b27      	ldr	r3, [pc, #156]	@ (8004d44 <FLASH_SetErrorCode+0xa4>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004cb0:	4b25      	ldr	r3, [pc, #148]	@ (8004d48 <FLASH_SetErrorCode+0xa8>)
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f043 0310 	orr.w	r3, r3, #16
 8004cb8:	4a23      	ldr	r2, [pc, #140]	@ (8004d48 <FLASH_SetErrorCode+0xa8>)
 8004cba:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004cbc:	4b21      	ldr	r3, [pc, #132]	@ (8004d44 <FLASH_SetErrorCode+0xa4>)
 8004cbe:	2210      	movs	r2, #16
 8004cc0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004cc2:	4b20      	ldr	r3, [pc, #128]	@ (8004d44 <FLASH_SetErrorCode+0xa4>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004cce:	4b1e      	ldr	r3, [pc, #120]	@ (8004d48 <FLASH_SetErrorCode+0xa8>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f043 0308 	orr.w	r3, r3, #8
 8004cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d48 <FLASH_SetErrorCode+0xa8>)
 8004cd8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004cda:	4b1a      	ldr	r3, [pc, #104]	@ (8004d44 <FLASH_SetErrorCode+0xa4>)
 8004cdc:	2220      	movs	r2, #32
 8004cde:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004ce0:	4b18      	ldr	r3, [pc, #96]	@ (8004d44 <FLASH_SetErrorCode+0xa4>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004cec:	4b16      	ldr	r3, [pc, #88]	@ (8004d48 <FLASH_SetErrorCode+0xa8>)
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	f043 0304 	orr.w	r3, r3, #4
 8004cf4:	4a14      	ldr	r2, [pc, #80]	@ (8004d48 <FLASH_SetErrorCode+0xa8>)
 8004cf6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004cf8:	4b12      	ldr	r3, [pc, #72]	@ (8004d44 <FLASH_SetErrorCode+0xa4>)
 8004cfa:	2240      	movs	r2, #64	@ 0x40
 8004cfc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004cfe:	4b11      	ldr	r3, [pc, #68]	@ (8004d44 <FLASH_SetErrorCode+0xa4>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d008      	beq.n	8004d1c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d48 <FLASH_SetErrorCode+0xa8>)
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f043 0302 	orr.w	r3, r3, #2
 8004d12:	4a0d      	ldr	r2, [pc, #52]	@ (8004d48 <FLASH_SetErrorCode+0xa8>)
 8004d14:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004d16:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <FLASH_SetErrorCode+0xa4>)
 8004d18:	2280      	movs	r2, #128	@ 0x80
 8004d1a:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004d1c:	4b09      	ldr	r3, [pc, #36]	@ (8004d44 <FLASH_SetErrorCode+0xa4>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004d28:	4b07      	ldr	r3, [pc, #28]	@ (8004d48 <FLASH_SetErrorCode+0xa8>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f043 0320 	orr.w	r3, r3, #32
 8004d30:	4a05      	ldr	r2, [pc, #20]	@ (8004d48 <FLASH_SetErrorCode+0xa8>)
 8004d32:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004d34:	4b03      	ldr	r3, [pc, #12]	@ (8004d44 <FLASH_SetErrorCode+0xa4>)
 8004d36:	2202      	movs	r2, #2
 8004d38:	60da      	str	r2, [r3, #12]
  }
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	40023c00 	.word	0x40023c00
 8004d48:	20018584 	.word	0x20018584

08004d4c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e010      	b.n	8004d8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d103      	bne.n	8004d76 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004d6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e009      	b.n	8004d8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d103      	bne.n	8004d84 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004d7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e002      	b.n	8004d8a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004d84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d8a:	4b13      	ldr	r3, [pc, #76]	@ (8004dd8 <FLASH_Erase_Sector+0x8c>)
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	4a12      	ldr	r2, [pc, #72]	@ (8004dd8 <FLASH_Erase_Sector+0x8c>)
 8004d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004d96:	4b10      	ldr	r3, [pc, #64]	@ (8004dd8 <FLASH_Erase_Sector+0x8c>)
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	490f      	ldr	r1, [pc, #60]	@ (8004dd8 <FLASH_Erase_Sector+0x8c>)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004da2:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd8 <FLASH_Erase_Sector+0x8c>)
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd8 <FLASH_Erase_Sector+0x8c>)
 8004da8:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8004dac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004dae:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd8 <FLASH_Erase_Sector+0x8c>)
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4313      	orrs	r3, r2
 8004db8:	4a07      	ldr	r2, [pc, #28]	@ (8004dd8 <FLASH_Erase_Sector+0x8c>)
 8004dba:	f043 0302 	orr.w	r3, r3, #2
 8004dbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <FLASH_Erase_Sector+0x8c>)
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	4a04      	ldr	r2, [pc, #16]	@ (8004dd8 <FLASH_Erase_Sector+0x8c>)
 8004dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dca:	6113      	str	r3, [r2, #16]
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	40023c00 	.word	0x40023c00

08004ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b089      	sub	sp, #36	@ 0x24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	e16b      	b.n	80050d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004df8:	2201      	movs	r2, #1
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	f040 815a 	bne.w	80050ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d005      	beq.n	8004e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d130      	bne.n	8004e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	2203      	movs	r2, #3
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4013      	ands	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e64:	2201      	movs	r2, #1
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4013      	ands	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	091b      	lsrs	r3, r3, #4
 8004e7a:	f003 0201 	and.w	r2, r3, #1
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d017      	beq.n	8004ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d123      	bne.n	8004f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	08da      	lsrs	r2, r3, #3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3208      	adds	r2, #8
 8004ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	220f      	movs	r2, #15
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	08da      	lsrs	r2, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3208      	adds	r2, #8
 8004f1a:	69b9      	ldr	r1, [r7, #24]
 8004f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	2203      	movs	r2, #3
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4013      	ands	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 0203 	and.w	r2, r3, #3
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80b4 	beq.w	80050ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	4b60      	ldr	r3, [pc, #384]	@ (80050e8 <HAL_GPIO_Init+0x30c>)
 8004f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6a:	4a5f      	ldr	r2, [pc, #380]	@ (80050e8 <HAL_GPIO_Init+0x30c>)
 8004f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f72:	4b5d      	ldr	r3, [pc, #372]	@ (80050e8 <HAL_GPIO_Init+0x30c>)
 8004f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80050ec <HAL_GPIO_Init+0x310>)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	3302      	adds	r3, #2
 8004f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	220f      	movs	r2, #15
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a52      	ldr	r2, [pc, #328]	@ (80050f0 <HAL_GPIO_Init+0x314>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02b      	beq.n	8005002 <HAL_GPIO_Init+0x226>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a51      	ldr	r2, [pc, #324]	@ (80050f4 <HAL_GPIO_Init+0x318>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d025      	beq.n	8004ffe <HAL_GPIO_Init+0x222>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a50      	ldr	r2, [pc, #320]	@ (80050f8 <HAL_GPIO_Init+0x31c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01f      	beq.n	8004ffa <HAL_GPIO_Init+0x21e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a4f      	ldr	r2, [pc, #316]	@ (80050fc <HAL_GPIO_Init+0x320>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d019      	beq.n	8004ff6 <HAL_GPIO_Init+0x21a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a4e      	ldr	r2, [pc, #312]	@ (8005100 <HAL_GPIO_Init+0x324>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <HAL_GPIO_Init+0x216>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a4d      	ldr	r2, [pc, #308]	@ (8005104 <HAL_GPIO_Init+0x328>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00d      	beq.n	8004fee <HAL_GPIO_Init+0x212>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a4c      	ldr	r2, [pc, #304]	@ (8005108 <HAL_GPIO_Init+0x32c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <HAL_GPIO_Init+0x20e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a4b      	ldr	r2, [pc, #300]	@ (800510c <HAL_GPIO_Init+0x330>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d101      	bne.n	8004fe6 <HAL_GPIO_Init+0x20a>
 8004fe2:	2307      	movs	r3, #7
 8004fe4:	e00e      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	e00c      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004fea:	2306      	movs	r3, #6
 8004fec:	e00a      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004fee:	2305      	movs	r3, #5
 8004ff0:	e008      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004ff2:	2304      	movs	r3, #4
 8004ff4:	e006      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e004      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e002      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8005002:	2300      	movs	r3, #0
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	f002 0203 	and.w	r2, r2, #3
 800500a:	0092      	lsls	r2, r2, #2
 800500c:	4093      	lsls	r3, r2
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4313      	orrs	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005014:	4935      	ldr	r1, [pc, #212]	@ (80050ec <HAL_GPIO_Init+0x310>)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	089b      	lsrs	r3, r3, #2
 800501a:	3302      	adds	r3, #2
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005022:	4b3b      	ldr	r3, [pc, #236]	@ (8005110 <HAL_GPIO_Init+0x334>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	43db      	mvns	r3, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4013      	ands	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005046:	4a32      	ldr	r2, [pc, #200]	@ (8005110 <HAL_GPIO_Init+0x334>)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800504c:	4b30      	ldr	r3, [pc, #192]	@ (8005110 <HAL_GPIO_Init+0x334>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	43db      	mvns	r3, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005070:	4a27      	ldr	r2, [pc, #156]	@ (8005110 <HAL_GPIO_Init+0x334>)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005076:	4b26      	ldr	r3, [pc, #152]	@ (8005110 <HAL_GPIO_Init+0x334>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800509a:	4a1d      	ldr	r2, [pc, #116]	@ (8005110 <HAL_GPIO_Init+0x334>)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005110 <HAL_GPIO_Init+0x334>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050c4:	4a12      	ldr	r2, [pc, #72]	@ (8005110 <HAL_GPIO_Init+0x334>)
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3301      	adds	r3, #1
 80050ce:	61fb      	str	r3, [r7, #28]
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	2b0f      	cmp	r3, #15
 80050d4:	f67f ae90 	bls.w	8004df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	3724      	adds	r7, #36	@ 0x24
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800
 80050ec:	40013800 	.word	0x40013800
 80050f0:	40020000 	.word	0x40020000
 80050f4:	40020400 	.word	0x40020400
 80050f8:	40020800 	.word	0x40020800
 80050fc:	40020c00 	.word	0x40020c00
 8005100:	40021000 	.word	0x40021000
 8005104:	40021400 	.word	0x40021400
 8005108:	40021800 	.word	0x40021800
 800510c:	40021c00 	.word	0x40021c00
 8005110:	40013c00 	.word	0x40013c00

08005114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	887b      	ldrh	r3, [r7, #2]
 8005126:	4013      	ands	r3, r2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800512c:	2301      	movs	r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
 8005130:	e001      	b.n	8005136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005136:	7bfb      	ldrb	r3, [r7, #15]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	807b      	strh	r3, [r7, #2]
 8005150:	4613      	mov	r3, r2
 8005152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005154:	787b      	ldrb	r3, [r7, #1]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800515a:	887a      	ldrh	r2, [r7, #2]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005160:	e003      	b.n	800516a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005162:	887b      	ldrh	r3, [r7, #2]
 8005164:	041a      	lsls	r2, r3, #16
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	619a      	str	r2, [r3, #24]
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b086      	sub	sp, #24
 800517a:	af02      	add	r7, sp, #8
 800517c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e101      	b.n	800538c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f008 fad2 	bl	800d74c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2203      	movs	r2, #3
 80051ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051b6:	d102      	bne.n	80051be <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f004 fa21 	bl	800960a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	7c1a      	ldrb	r2, [r3, #16]
 80051d0:	f88d 2000 	strb.w	r2, [sp]
 80051d4:	3304      	adds	r3, #4
 80051d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051d8:	f004 f900 	bl	80093dc <USB_CoreInit>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e0ce      	b.n	800538c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2100      	movs	r1, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	f004 fa19 	bl	800962c <USB_SetCurrentMode>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0bf      	b.n	800538c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800520c:	2300      	movs	r3, #0
 800520e:	73fb      	strb	r3, [r7, #15]
 8005210:	e04a      	b.n	80052a8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005212:	7bfa      	ldrb	r2, [r7, #15]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	3315      	adds	r3, #21
 8005222:	2201      	movs	r2, #1
 8005224:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005226:	7bfa      	ldrb	r2, [r7, #15]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	3314      	adds	r3, #20
 8005236:	7bfa      	ldrb	r2, [r7, #15]
 8005238:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800523a:	7bfa      	ldrb	r2, [r7, #15]
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	b298      	uxth	r0, r3
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	332e      	adds	r3, #46	@ 0x2e
 800524e:	4602      	mov	r2, r0
 8005250:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005252:	7bfa      	ldrb	r2, [r7, #15]
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	3318      	adds	r3, #24
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005266:	7bfa      	ldrb	r2, [r7, #15]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	331c      	adds	r3, #28
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800527a:	7bfa      	ldrb	r2, [r7, #15]
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	3320      	adds	r3, #32
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800528e:	7bfa      	ldrb	r2, [r7, #15]
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	3324      	adds	r3, #36	@ 0x24
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	3301      	adds	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	791b      	ldrb	r3, [r3, #4]
 80052ac:	7bfa      	ldrb	r2, [r7, #15]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d3af      	bcc.n	8005212 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
 80052b6:	e044      	b.n	8005342 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052b8:	7bfa      	ldrb	r2, [r7, #15]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052ce:	7bfa      	ldrb	r2, [r7, #15]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80052e0:	7bfa      	ldrb	r2, [r7, #15]
 80052e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052e4:	7bfa      	ldrb	r2, [r7, #15]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80052f6:	2200      	movs	r2, #0
 80052f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052fa:	7bfa      	ldrb	r2, [r7, #15]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005310:	7bfa      	ldrb	r2, [r7, #15]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005326:	7bfa      	ldrb	r2, [r7, #15]
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	3301      	adds	r3, #1
 8005340:	73fb      	strb	r3, [r7, #15]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	791b      	ldrb	r3, [r3, #4]
 8005346:	7bfa      	ldrb	r2, [r7, #15]
 8005348:	429a      	cmp	r2, r3
 800534a:	d3b5      	bcc.n	80052b8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	7c1a      	ldrb	r2, [r3, #16]
 8005354:	f88d 2000 	strb.w	r2, [sp]
 8005358:	3304      	adds	r3, #4
 800535a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800535c:	f004 f9b2 	bl	80096c4 <USB_DevInit>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d005      	beq.n	8005372 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2202      	movs	r2, #2
 800536a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e00c      	b.n	800538c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f005 f9fc 	bl	800a782 <USB_DevDisconnect>

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_PCD_Start+0x1c>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e022      	b.n	80053f6 <HAL_PCD_Start+0x62>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d009      	beq.n	80053d8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d105      	bne.n	80053d8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f004 f903 	bl	80095e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f005 f9aa 	bl	800a740 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80053fe:	b590      	push	{r4, r7, lr}
 8005400:	b08d      	sub	sp, #52	@ 0x34
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f005 fa68 	bl	800a8ea <USB_GetMode>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 848c 	bne.w	8005d3a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f005 f9cc 	bl	800a7c4 <USB_ReadInterrupts>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 8482 	beq.w	8005d38 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	0a1b      	lsrs	r3, r3, #8
 800543e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f005 f9b9 	bl	800a7c4 <USB_ReadInterrupts>
 8005452:	4603      	mov	r3, r0
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b02      	cmp	r3, #2
 800545a:	d107      	bne.n	800546c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695a      	ldr	r2, [r3, #20]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f002 0202 	and.w	r2, r2, #2
 800546a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4618      	mov	r0, r3
 8005472:	f005 f9a7 	bl	800a7c4 <USB_ReadInterrupts>
 8005476:	4603      	mov	r3, r0
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b10      	cmp	r3, #16
 800547e:	d161      	bne.n	8005544 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0210 	bic.w	r2, r2, #16
 800548e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f003 020f 	and.w	r2, r3, #15
 800549c:	4613      	mov	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4413      	add	r3, r2
 80054ac:	3304      	adds	r3, #4
 80054ae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80054b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054ba:	d124      	bne.n	8005506 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80054c2:	4013      	ands	r3, r2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d035      	beq.n	8005534 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	091b      	lsrs	r3, r3, #4
 80054d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	6a38      	ldr	r0, [r7, #32]
 80054dc:	f004 ffde 	bl	800a49c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	091b      	lsrs	r3, r3, #4
 80054e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054ec:	441a      	add	r2, r3
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	695a      	ldr	r2, [r3, #20]
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054fe:	441a      	add	r2, r3
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	615a      	str	r2, [r3, #20]
 8005504:	e016      	b.n	8005534 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800550c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005510:	d110      	bne.n	8005534 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005518:	2208      	movs	r2, #8
 800551a:	4619      	mov	r1, r3
 800551c:	6a38      	ldr	r0, [r7, #32]
 800551e:	f004 ffbd 	bl	800a49c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	695a      	ldr	r2, [r3, #20]
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800552e:	441a      	add	r2, r3
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0210 	orr.w	r2, r2, #16
 8005542:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f005 f93b 	bl	800a7c4 <USB_ReadInterrupts>
 800554e:	4603      	mov	r3, r0
 8005550:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005554:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005558:	f040 80a7 	bne.w	80056aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4618      	mov	r0, r3
 8005566:	f005 f940 	bl	800a7ea <USB_ReadDevAllOutEpInterrupt>
 800556a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800556c:	e099      	b.n	80056a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 808e 	beq.w	8005696 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	4611      	mov	r1, r2
 8005584:	4618      	mov	r0, r3
 8005586:	f005 f964 	bl	800a852 <USB_ReadDevOutEPInterrupt>
 800558a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00c      	beq.n	80055b0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a2:	461a      	mov	r2, r3
 80055a4:	2301      	movs	r3, #1
 80055a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80055a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fea4 	bl	80062f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00c      	beq.n	80055d4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c6:	461a      	mov	r2, r3
 80055c8:	2308      	movs	r3, #8
 80055ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80055cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 ff7a 	bl	80064c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f003 0310 	and.w	r3, r3, #16
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d008      	beq.n	80055f0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80055de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ea:	461a      	mov	r2, r3
 80055ec:	2310      	movs	r3, #16
 80055ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d030      	beq.n	800565c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005602:	2b80      	cmp	r3, #128	@ 0x80
 8005604:	d109      	bne.n	800561a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005614:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005618:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800561a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800561c:	4613      	mov	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	4413      	add	r3, r2
 800562c:	3304      	adds	r3, #4
 800562e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	78db      	ldrb	r3, [r3, #3]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d108      	bne.n	800564a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2200      	movs	r2, #0
 800563c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	b2db      	uxtb	r3, r3
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f008 f987 	bl	800d958 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005656:	461a      	mov	r2, r3
 8005658:	2302      	movs	r3, #2
 800565a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b00      	cmp	r3, #0
 8005664:	d008      	beq.n	8005678 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005672:	461a      	mov	r2, r3
 8005674:	2320      	movs	r3, #32
 8005676:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d009      	beq.n	8005696 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800568e:	461a      	mov	r2, r3
 8005690:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005694:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	3301      	adds	r3, #1
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800569c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80056a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f47f af62 	bne.w	800556e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f005 f888 	bl	800a7c4 <USB_ReadInterrupts>
 80056b4:	4603      	mov	r3, r0
 80056b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056be:	f040 80db 	bne.w	8005878 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f005 f8a9 	bl	800a81e <USB_ReadDevAllInEpInterrupt>
 80056cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80056d2:	e0cd      	b.n	8005870 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 80c2 	beq.w	8005864 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	4611      	mov	r1, r2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f005 f8cf 	bl	800a88e <USB_ReadDevInEPInterrupt>
 80056f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d057      	beq.n	80057ac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	2201      	movs	r2, #1
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	43db      	mvns	r3, r3
 8005716:	69f9      	ldr	r1, [r7, #28]
 8005718:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800571c:	4013      	ands	r3, r2
 800571e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800572c:	461a      	mov	r2, r3
 800572e:	2301      	movs	r3, #1
 8005730:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	799b      	ldrb	r3, [r3, #6]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d132      	bne.n	80057a0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800573e:	4613      	mov	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	3320      	adds	r3, #32
 800574a:	6819      	ldr	r1, [r3, #0]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4403      	add	r3, r0
 800575a:	331c      	adds	r3, #28
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4419      	add	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005764:	4613      	mov	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4403      	add	r3, r0
 800576e:	3320      	adds	r3, #32
 8005770:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d113      	bne.n	80057a0 <HAL_PCD_IRQHandler+0x3a2>
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	3324      	adds	r3, #36	@ 0x24
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d108      	bne.n	80057a0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005798:	461a      	mov	r2, r3
 800579a:	2101      	movs	r1, #1
 800579c:	f005 f8d6 	bl	800a94c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f008 f851 	bl	800d84e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d008      	beq.n	80057c8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c2:	461a      	mov	r2, r3
 80057c4:	2308      	movs	r3, #8
 80057c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d008      	beq.n	80057e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057de:	461a      	mov	r2, r3
 80057e0:	2310      	movs	r3, #16
 80057e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057fa:	461a      	mov	r2, r3
 80057fc:	2340      	movs	r3, #64	@ 0x40
 80057fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d023      	beq.n	8005852 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800580a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800580c:	6a38      	ldr	r0, [r7, #32]
 800580e:	f004 f8bd 	bl	800998c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005814:	4613      	mov	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	3310      	adds	r3, #16
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4413      	add	r3, r2
 8005822:	3304      	adds	r3, #4
 8005824:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	78db      	ldrb	r3, [r3, #3]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d108      	bne.n	8005840 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2200      	movs	r2, #0
 8005832:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	b2db      	uxtb	r3, r3
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f008 f89e 	bl	800d97c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800584c:	461a      	mov	r2, r3
 800584e:	2302      	movs	r3, #2
 8005850:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800585c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fcbd 	bl	80061de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	3301      	adds	r3, #1
 8005868:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800586a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005872:	2b00      	cmp	r3, #0
 8005874:	f47f af2e 	bne.w	80056d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f004 ffa1 	bl	800a7c4 <USB_ReadInterrupts>
 8005882:	4603      	mov	r3, r0
 8005884:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005888:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800588c:	d122      	bne.n	80058d4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800589c:	f023 0301 	bic.w	r3, r3, #1
 80058a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d108      	bne.n	80058be <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80058b4:	2100      	movs	r1, #0
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fea4 	bl	8006604 <HAL_PCDEx_LPM_Callback>
 80058bc:	e002      	b.n	80058c4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f008 f83c 	bl	800d93c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80058d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4618      	mov	r0, r3
 80058da:	f004 ff73 	bl	800a7c4 <USB_ReadInterrupts>
 80058de:	4603      	mov	r3, r0
 80058e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058e8:	d112      	bne.n	8005910 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d102      	bne.n	8005900 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f007 fff8 	bl	800d8f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695a      	ldr	r2, [r3, #20]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800590e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f004 ff55 	bl	800a7c4 <USB_ReadInterrupts>
 800591a:	4603      	mov	r3, r0
 800591c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005924:	f040 80b7 	bne.w	8005a96 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005936:	f023 0301 	bic.w	r3, r3, #1
 800593a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2110      	movs	r1, #16
 8005942:	4618      	mov	r0, r3
 8005944:	f004 f822 	bl	800998c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005948:	2300      	movs	r3, #0
 800594a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800594c:	e046      	b.n	80059dc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800594e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800595a:	461a      	mov	r2, r3
 800595c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005960:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	440a      	add	r2, r1
 8005978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800597c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005980:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598e:	461a      	mov	r2, r3
 8005990:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005994:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	69fa      	ldr	r2, [r7, #28]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d8:	3301      	adds	r3, #1
 80059da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	791b      	ldrb	r3, [r3, #4]
 80059e0:	461a      	mov	r2, r3
 80059e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d3b2      	bcc.n	800594e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059f6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80059fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	7bdb      	ldrb	r3, [r3, #15]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d016      	beq.n	8005a32 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a14:	f043 030b 	orr.w	r3, r3, #11
 8005a18:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a2a:	f043 030b 	orr.w	r3, r3, #11
 8005a2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a30:	e015      	b.n	8005a5e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005a44:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005a48:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a58:	f043 030b 	orr.w	r3, r3, #11
 8005a5c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a6c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005a70:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a80:	461a      	mov	r2, r3
 8005a82:	f004 ff63 	bl	800a94c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f004 fe92 	bl	800a7c4 <USB_ReadInterrupts>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aaa:	d123      	bne.n	8005af4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f004 ff28 	bl	800a906 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f003 ffdf 	bl	8009a7e <USB_GetDevSpeed>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681c      	ldr	r4, [r3, #0]
 8005acc:	f001 fa0a 	bl	8006ee4 <HAL_RCC_GetHCLKFreq>
 8005ad0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f003 fce3 	bl	80094a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f007 fedd 	bl	800d89e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695a      	ldr	r2, [r3, #20]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f004 fe63 	bl	800a7c4 <USB_ReadInterrupts>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d10a      	bne.n	8005b1e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f007 feba 	bl	800d882 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695a      	ldr	r2, [r3, #20]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f002 0208 	and.w	r2, r2, #8
 8005b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f004 fe4e 	bl	800a7c4 <USB_ReadInterrupts>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b2e:	2b80      	cmp	r3, #128	@ 0x80
 8005b30:	d123      	bne.n	8005b7a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b3e:	2301      	movs	r3, #1
 8005b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b42:	e014      	b.n	8005b6e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b48:	4613      	mov	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d105      	bne.n	8005b68 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fb0a 	bl	800617c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	791b      	ldrb	r3, [r3, #4]
 8005b72:	461a      	mov	r2, r3
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d3e4      	bcc.n	8005b44 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f004 fe20 	bl	800a7c4 <USB_ReadInterrupts>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b8e:	d13c      	bne.n	8005c0a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b90:	2301      	movs	r3, #1
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b94:	e02b      	b.n	8005bee <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005baa:	4613      	mov	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	3318      	adds	r3, #24
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d115      	bne.n	8005be8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005bbc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	da12      	bge.n	8005be8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	3317      	adds	r3, #23
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 faca 	bl	800617c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	3301      	adds	r3, #1
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	791b      	ldrb	r3, [r3, #4]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d3cd      	bcc.n	8005b96 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695a      	ldr	r2, [r3, #20]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f004 fdd8 	bl	800a7c4 <USB_ReadInterrupts>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c1e:	d156      	bne.n	8005cce <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c20:	2301      	movs	r3, #1
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c24:	e045      	b.n	8005cb2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d12e      	bne.n	8005cac <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	da2b      	bge.n	8005cac <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	0c1a      	lsrs	r2, r3, #16
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005c5e:	4053      	eors	r3, r2
 8005c60:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d121      	bne.n	8005cac <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ca4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ca8:	6053      	str	r3, [r2, #4]
            break;
 8005caa:	e008      	b.n	8005cbe <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cae:	3301      	adds	r3, #1
 8005cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	791b      	ldrb	r3, [r3, #4]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d3b3      	bcc.n	8005c26 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f004 fd76 	bl	800a7c4 <USB_ReadInterrupts>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce2:	d10a      	bne.n	8005cfa <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f007 fe5b 	bl	800d9a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695a      	ldr	r2, [r3, #20]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f004 fd60 	bl	800a7c4 <USB_ReadInterrupts>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d115      	bne.n	8005d3a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f007 fe4b 	bl	800d9bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6859      	ldr	r1, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	605a      	str	r2, [r3, #4]
 8005d36:	e000      	b.n	8005d3a <HAL_PCD_IRQHandler+0x93c>
      return;
 8005d38:	bf00      	nop
    }
  }
}
 8005d3a:	3734      	adds	r7, #52	@ 0x34
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd90      	pop	{r4, r7, pc}

08005d40 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_PCD_SetAddress+0x1a>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e012      	b.n	8005d80 <HAL_PCD_SetAddress+0x40>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	78fa      	ldrb	r2, [r7, #3]
 8005d66:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	78fa      	ldrb	r2, [r7, #3]
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4618      	mov	r0, r3
 8005d72:	f004 fcbf 	bl	800a6f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	461a      	mov	r2, r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	70fb      	strb	r3, [r7, #3]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	803b      	strh	r3, [r7, #0]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	da0f      	bge.n	8005dce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dae:	78fb      	ldrb	r3, [r7, #3]
 8005db0:	f003 020f 	and.w	r2, r3, #15
 8005db4:	4613      	mov	r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	3310      	adds	r3, #16
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	705a      	strb	r2, [r3, #1]
 8005dcc:	e00f      	b.n	8005dee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	f003 020f 	and.w	r2, r3, #15
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	3304      	adds	r3, #4
 8005de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005dfa:	883b      	ldrh	r3, [r7, #0]
 8005dfc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	78ba      	ldrb	r2, [r7, #2]
 8005e08:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	785b      	ldrb	r3, [r3, #1]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d004      	beq.n	8005e1c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e1c:	78bb      	ldrb	r3, [r7, #2]
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d102      	bne.n	8005e28 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_PCD_EP_Open+0xae>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e00e      	b.n	8005e54 <HAL_PCD_EP_Open+0xcc>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68f9      	ldr	r1, [r7, #12]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f003 fe3f 	bl	8009ac8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005e52:	7afb      	ldrb	r3, [r7, #11]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	da0f      	bge.n	8005e90 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	f003 020f 	and.w	r2, r3, #15
 8005e76:	4613      	mov	r3, r2
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	3310      	adds	r3, #16
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	4413      	add	r3, r2
 8005e84:	3304      	adds	r3, #4
 8005e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	705a      	strb	r2, [r3, #1]
 8005e8e:	e00f      	b.n	8005eb0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	f003 020f 	and.w	r2, r3, #15
 8005e96:	4613      	mov	r3, r2
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_PCD_EP_Close+0x6e>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e00e      	b.n	8005ee8 <HAL_PCD_EP_Close+0x8c>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68f9      	ldr	r1, [r7, #12]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f003 fe7d 	bl	8009bd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	607a      	str	r2, [r7, #4]
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	460b      	mov	r3, r1
 8005efe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f00:	7afb      	ldrb	r3, [r7, #11]
 8005f02:	f003 020f 	and.w	r2, r3, #15
 8005f06:	4613      	mov	r3, r2
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4413      	add	r3, r2
 8005f16:	3304      	adds	r3, #4
 8005f18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f32:	7afb      	ldrb	r3, [r7, #11]
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	799b      	ldrb	r3, [r3, #6]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d102      	bne.n	8005f4c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	799b      	ldrb	r3, [r3, #6]
 8005f54:	461a      	mov	r2, r3
 8005f56:	6979      	ldr	r1, [r7, #20]
 8005f58:	f003 ff1a 	bl	8009d90 <USB_EPStartXfer>

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	460b      	mov	r3, r1
 8005f70:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	f003 020f 	and.w	r2, r3, #15
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005f88:	681b      	ldr	r3, [r3, #0]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b086      	sub	sp, #24
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fa6:	7afb      	ldrb	r3, [r7, #11]
 8005fa8:	f003 020f 	and.w	r2, r3, #15
 8005fac:	4613      	mov	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	3310      	adds	r3, #16
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4413      	add	r3, r2
 8005fba:	3304      	adds	r3, #4
 8005fbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fd6:	7afb      	ldrb	r3, [r7, #11]
 8005fd8:	f003 030f 	and.w	r3, r3, #15
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	799b      	ldrb	r3, [r3, #6]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d102      	bne.n	8005ff0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	799b      	ldrb	r3, [r3, #6]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	6979      	ldr	r1, [r7, #20]
 8005ffc:	f003 fec8 	bl	8009d90 <USB_EPStartXfer>

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	460b      	mov	r3, r1
 8006014:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	f003 030f 	and.w	r3, r3, #15
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	7912      	ldrb	r2, [r2, #4]
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e04f      	b.n	80060c8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006028:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800602c:	2b00      	cmp	r3, #0
 800602e:	da0f      	bge.n	8006050 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	f003 020f 	and.w	r2, r3, #15
 8006036:	4613      	mov	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	3310      	adds	r3, #16
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	4413      	add	r3, r2
 8006044:	3304      	adds	r3, #4
 8006046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	705a      	strb	r2, [r3, #1]
 800604e:	e00d      	b.n	800606c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006050:	78fa      	ldrb	r2, [r7, #3]
 8006052:	4613      	mov	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	4413      	add	r3, r2
 8006062:	3304      	adds	r3, #4
 8006064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	b2da      	uxtb	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_PCD_EP_SetStall+0x82>
 8006088:	2302      	movs	r3, #2
 800608a:	e01d      	b.n	80060c8 <HAL_PCD_EP_SetStall+0xbe>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68f9      	ldr	r1, [r7, #12]
 800609a:	4618      	mov	r0, r3
 800609c:	f004 fa56 	bl	800a54c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d109      	bne.n	80060be <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	7999      	ldrb	r1, [r3, #6]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80060b8:	461a      	mov	r2, r3
 80060ba:	f004 fc47 	bl	800a94c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	7912      	ldrb	r2, [r2, #4]
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d901      	bls.n	80060ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e042      	b.n	8006174 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da0f      	bge.n	8006116 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	f003 020f 	and.w	r2, r3, #15
 80060fc:	4613      	mov	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	3310      	adds	r3, #16
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	4413      	add	r3, r2
 800610a:	3304      	adds	r3, #4
 800610c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	705a      	strb	r2, [r3, #1]
 8006114:	e00f      	b.n	8006136 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006116:	78fb      	ldrb	r3, [r7, #3]
 8006118:	f003 020f 	and.w	r2, r3, #15
 800611c:	4613      	mov	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4413      	add	r3, r2
 800612c:	3304      	adds	r3, #4
 800612e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	b2da      	uxtb	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_PCD_EP_ClrStall+0x86>
 8006152:	2302      	movs	r3, #2
 8006154:	e00e      	b.n	8006174 <HAL_PCD_EP_ClrStall+0xa4>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68f9      	ldr	r1, [r7, #12]
 8006164:	4618      	mov	r0, r3
 8006166:	f004 fa5f 	bl	800a628 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800618c:	2b00      	cmp	r3, #0
 800618e:	da0c      	bge.n	80061aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	f003 020f 	and.w	r2, r3, #15
 8006196:	4613      	mov	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	3310      	adds	r3, #16
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	4413      	add	r3, r2
 80061a4:	3304      	adds	r3, #4
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	e00c      	b.n	80061c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	f003 020f 	and.w	r2, r3, #15
 80061b0:	4613      	mov	r3, r2
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	4413      	add	r3, r2
 80061c0:	3304      	adds	r3, #4
 80061c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68f9      	ldr	r1, [r7, #12]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f004 f87e 	bl	800a2cc <USB_EPStopXfer>
 80061d0:	4603      	mov	r3, r0
 80061d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80061d4:	7afb      	ldrb	r3, [r7, #11]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b08a      	sub	sp, #40	@ 0x28
 80061e2:	af02      	add	r7, sp, #8
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	4613      	mov	r3, r2
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	3310      	adds	r3, #16
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	4413      	add	r3, r2
 8006202:	3304      	adds	r3, #4
 8006204:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	695a      	ldr	r2, [r3, #20]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	429a      	cmp	r2, r3
 8006210:	d901      	bls.n	8006216 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e06b      	b.n	80062ee <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	429a      	cmp	r2, r3
 800622a:	d902      	bls.n	8006232 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	3303      	adds	r3, #3
 8006236:	089b      	lsrs	r3, r3, #2
 8006238:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800623a:	e02a      	b.n	8006292 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	429a      	cmp	r2, r3
 8006250:	d902      	bls.n	8006258 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	3303      	adds	r3, #3
 800625c:	089b      	lsrs	r3, r3, #2
 800625e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	68d9      	ldr	r1, [r3, #12]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	b2da      	uxtb	r2, r3
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	4603      	mov	r3, r0
 8006274:	6978      	ldr	r0, [r7, #20]
 8006276:	f004 f8d3 	bl	800a420 <USB_WritePacket>

    ep->xfer_buff  += len;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	441a      	add	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	695a      	ldr	r2, [r3, #20]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	441a      	add	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d809      	bhi.n	80062bc <PCD_WriteEmptyTxFifo+0xde>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	695a      	ldr	r2, [r3, #20]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d203      	bcs.n	80062bc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1bf      	bne.n	800623c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d811      	bhi.n	80062ec <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	2201      	movs	r2, #1
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	43db      	mvns	r3, r3
 80062e2:	6939      	ldr	r1, [r7, #16]
 80062e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062e8:	4013      	ands	r3, r2
 80062ea:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	333c      	adds	r3, #60	@ 0x3c
 8006310:	3304      	adds	r3, #4
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	799b      	ldrb	r3, [r3, #6]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d17b      	bne.n	8006426 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d015      	beq.n	8006364 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	4a61      	ldr	r2, [pc, #388]	@ (80064c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	f240 80b9 	bls.w	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 80b3 	beq.w	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800635a:	461a      	mov	r2, r3
 800635c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006360:	6093      	str	r3, [r2, #8]
 8006362:	e0a7      	b.n	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637a:	461a      	mov	r2, r3
 800637c:	2320      	movs	r3, #32
 800637e:	6093      	str	r3, [r2, #8]
 8006380:	e098      	b.n	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006388:	2b00      	cmp	r3, #0
 800638a:	f040 8093 	bne.w	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	4a4b      	ldr	r2, [pc, #300]	@ (80064c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d90f      	bls.n	80063b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ac:	461a      	mov	r2, r3
 80063ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063b2:	6093      	str	r3, [r2, #8]
 80063b4:	e07e      	b.n	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	4413      	add	r3, r2
 80063c8:	3304      	adds	r3, #4
 80063ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a1a      	ldr	r2, [r3, #32]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	0159      	lsls	r1, r3, #5
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	440b      	add	r3, r1
 80063d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063e2:	1ad2      	subs	r2, r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d114      	bne.n	8006418 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006400:	461a      	mov	r2, r3
 8006402:	2101      	movs	r1, #1
 8006404:	f004 faa2 	bl	800a94c <USB_EP0_OutStart>
 8006408:	e006      	b.n	8006418 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	441a      	add	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f007 f9fa 	bl	800d818 <HAL_PCD_DataOutStageCallback>
 8006424:	e046      	b.n	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	4a26      	ldr	r2, [pc, #152]	@ (80064c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d124      	bne.n	8006478 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006444:	461a      	mov	r2, r3
 8006446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800644a:	6093      	str	r3, [r2, #8]
 800644c:	e032      	b.n	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006464:	461a      	mov	r2, r3
 8006466:	2320      	movs	r3, #32
 8006468:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	b2db      	uxtb	r3, r3
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f007 f9d1 	bl	800d818 <HAL_PCD_DataOutStageCallback>
 8006476:	e01d      	b.n	80064b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d114      	bne.n	80064a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	4613      	mov	r3, r2
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	440b      	add	r3, r1
 800648c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d108      	bne.n	80064a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80064a0:	461a      	mov	r2, r3
 80064a2:	2100      	movs	r1, #0
 80064a4:	f004 fa52 	bl	800a94c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f007 f9b2 	bl	800d818 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	4f54300a 	.word	0x4f54300a
 80064c4:	4f54310a 	.word	0x4f54310a

080064c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	333c      	adds	r3, #60	@ 0x3c
 80064e0:	3304      	adds	r3, #4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a15      	ldr	r2, [pc, #84]	@ (8006550 <PCD_EP_OutSetupPacket_int+0x88>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d90e      	bls.n	800651c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006504:	2b00      	cmp	r3, #0
 8006506:	d009      	beq.n	800651c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006514:	461a      	mov	r2, r3
 8006516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800651a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f007 f969 	bl	800d7f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4a0a      	ldr	r2, [pc, #40]	@ (8006550 <PCD_EP_OutSetupPacket_int+0x88>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d90c      	bls.n	8006544 <PCD_EP_OutSetupPacket_int+0x7c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	799b      	ldrb	r3, [r3, #6]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d108      	bne.n	8006544 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800653c:	461a      	mov	r2, r3
 800653e:	2101      	movs	r1, #1
 8006540:	f004 fa04 	bl	800a94c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	4f54300a 	.word	0x4f54300a

08006554 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
 8006560:	4613      	mov	r3, r2
 8006562:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d107      	bne.n	8006582 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006572:	883b      	ldrh	r3, [r7, #0]
 8006574:	0419      	lsls	r1, r3, #16
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	430a      	orrs	r2, r1
 800657e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006580:	e028      	b.n	80065d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006588:	0c1b      	lsrs	r3, r3, #16
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	4413      	add	r3, r2
 800658e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006590:	2300      	movs	r3, #0
 8006592:	73fb      	strb	r3, [r7, #15]
 8006594:	e00d      	b.n	80065b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	3340      	adds	r3, #64	@ 0x40
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	0c1b      	lsrs	r3, r3, #16
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	4413      	add	r3, r2
 80065aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	3301      	adds	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]
 80065b2:	7bfa      	ldrb	r2, [r7, #15]
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d3ec      	bcc.n	8006596 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80065bc:	883b      	ldrh	r3, [r7, #0]
 80065be:	0418      	lsls	r0, r3, #16
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6819      	ldr	r1, [r3, #0]
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	4302      	orrs	r2, r0
 80065cc:	3340      	adds	r3, #64	@ 0x40
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	460b      	mov	r3, r1
 80065ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	887a      	ldrh	r2, [r7, #2]
 80065f4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e267      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d075      	beq.n	8006726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800663a:	4b88      	ldr	r3, [pc, #544]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 030c 	and.w	r3, r3, #12
 8006642:	2b04      	cmp	r3, #4
 8006644:	d00c      	beq.n	8006660 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006646:	4b85      	ldr	r3, [pc, #532]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800664e:	2b08      	cmp	r3, #8
 8006650:	d112      	bne.n	8006678 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006652:	4b82      	ldr	r3, [pc, #520]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800665a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800665e:	d10b      	bne.n	8006678 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006660:	4b7e      	ldr	r3, [pc, #504]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d05b      	beq.n	8006724 <HAL_RCC_OscConfig+0x108>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d157      	bne.n	8006724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e242      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006680:	d106      	bne.n	8006690 <HAL_RCC_OscConfig+0x74>
 8006682:	4b76      	ldr	r3, [pc, #472]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a75      	ldr	r2, [pc, #468]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 8006688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	e01d      	b.n	80066cc <HAL_RCC_OscConfig+0xb0>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006698:	d10c      	bne.n	80066b4 <HAL_RCC_OscConfig+0x98>
 800669a:	4b70      	ldr	r3, [pc, #448]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a6f      	ldr	r2, [pc, #444]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 80066a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	4b6d      	ldr	r3, [pc, #436]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a6c      	ldr	r2, [pc, #432]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 80066ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	e00b      	b.n	80066cc <HAL_RCC_OscConfig+0xb0>
 80066b4:	4b69      	ldr	r3, [pc, #420]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a68      	ldr	r2, [pc, #416]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 80066ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	4b66      	ldr	r3, [pc, #408]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a65      	ldr	r2, [pc, #404]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 80066c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d013      	beq.n	80066fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d4:	f7fd feb6 	bl	8004444 <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066dc:	f7fd feb2 	bl	8004444 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b64      	cmp	r3, #100	@ 0x64
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e207      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ee:	4b5b      	ldr	r3, [pc, #364]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0f0      	beq.n	80066dc <HAL_RCC_OscConfig+0xc0>
 80066fa:	e014      	b.n	8006726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066fc:	f7fd fea2 	bl	8004444 <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006702:	e008      	b.n	8006716 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006704:	f7fd fe9e 	bl	8004444 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b64      	cmp	r3, #100	@ 0x64
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e1f3      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006716:	4b51      	ldr	r3, [pc, #324]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1f0      	bne.n	8006704 <HAL_RCC_OscConfig+0xe8>
 8006722:	e000      	b.n	8006726 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d063      	beq.n	80067fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006732:	4b4a      	ldr	r3, [pc, #296]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 030c 	and.w	r3, r3, #12
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00b      	beq.n	8006756 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800673e:	4b47      	ldr	r3, [pc, #284]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006746:	2b08      	cmp	r3, #8
 8006748:	d11c      	bne.n	8006784 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800674a:	4b44      	ldr	r3, [pc, #272]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d116      	bne.n	8006784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006756:	4b41      	ldr	r3, [pc, #260]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d005      	beq.n	800676e <HAL_RCC_OscConfig+0x152>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d001      	beq.n	800676e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e1c7      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800676e:	4b3b      	ldr	r3, [pc, #236]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	4937      	ldr	r1, [pc, #220]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 800677e:	4313      	orrs	r3, r2
 8006780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006782:	e03a      	b.n	80067fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d020      	beq.n	80067ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800678c:	4b34      	ldr	r3, [pc, #208]	@ (8006860 <HAL_RCC_OscConfig+0x244>)
 800678e:	2201      	movs	r2, #1
 8006790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006792:	f7fd fe57 	bl	8004444 <HAL_GetTick>
 8006796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006798:	e008      	b.n	80067ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800679a:	f7fd fe53 	bl	8004444 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e1a8      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ac:	4b2b      	ldr	r3, [pc, #172]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0f0      	beq.n	800679a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b8:	4b28      	ldr	r3, [pc, #160]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	4925      	ldr	r1, [pc, #148]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	600b      	str	r3, [r1, #0]
 80067cc:	e015      	b.n	80067fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ce:	4b24      	ldr	r3, [pc, #144]	@ (8006860 <HAL_RCC_OscConfig+0x244>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d4:	f7fd fe36 	bl	8004444 <HAL_GetTick>
 80067d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067da:	e008      	b.n	80067ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067dc:	f7fd fe32 	bl	8004444 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e187      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ee:	4b1b      	ldr	r3, [pc, #108]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1f0      	bne.n	80067dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	2b00      	cmp	r3, #0
 8006804:	d036      	beq.n	8006874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d016      	beq.n	800683c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800680e:	4b15      	ldr	r3, [pc, #84]	@ (8006864 <HAL_RCC_OscConfig+0x248>)
 8006810:	2201      	movs	r2, #1
 8006812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006814:	f7fd fe16 	bl	8004444 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800681c:	f7fd fe12 	bl	8004444 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e167      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800682e:	4b0b      	ldr	r3, [pc, #44]	@ (800685c <HAL_RCC_OscConfig+0x240>)
 8006830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0f0      	beq.n	800681c <HAL_RCC_OscConfig+0x200>
 800683a:	e01b      	b.n	8006874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800683c:	4b09      	ldr	r3, [pc, #36]	@ (8006864 <HAL_RCC_OscConfig+0x248>)
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006842:	f7fd fdff 	bl	8004444 <HAL_GetTick>
 8006846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006848:	e00e      	b.n	8006868 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800684a:	f7fd fdfb 	bl	8004444 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d907      	bls.n	8006868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e150      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
 800685c:	40023800 	.word	0x40023800
 8006860:	42470000 	.word	0x42470000
 8006864:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006868:	4b88      	ldr	r3, [pc, #544]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 800686a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1ea      	bne.n	800684a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8097 	beq.w	80069b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006882:	2300      	movs	r3, #0
 8006884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006886:	4b81      	ldr	r3, [pc, #516]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 8006888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10f      	bne.n	80068b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006892:	2300      	movs	r3, #0
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	4b7d      	ldr	r3, [pc, #500]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 8006898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689a:	4a7c      	ldr	r2, [pc, #496]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 800689c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80068a2:	4b7a      	ldr	r3, [pc, #488]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 80068a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068aa:	60bb      	str	r3, [r7, #8]
 80068ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ae:	2301      	movs	r3, #1
 80068b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b2:	4b77      	ldr	r3, [pc, #476]	@ (8006a90 <HAL_RCC_OscConfig+0x474>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d118      	bne.n	80068f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068be:	4b74      	ldr	r3, [pc, #464]	@ (8006a90 <HAL_RCC_OscConfig+0x474>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a73      	ldr	r2, [pc, #460]	@ (8006a90 <HAL_RCC_OscConfig+0x474>)
 80068c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068ca:	f7fd fdbb 	bl	8004444 <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068d0:	e008      	b.n	80068e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d2:	f7fd fdb7 	bl	8004444 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e10c      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e4:	4b6a      	ldr	r3, [pc, #424]	@ (8006a90 <HAL_RCC_OscConfig+0x474>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0f0      	beq.n	80068d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d106      	bne.n	8006906 <HAL_RCC_OscConfig+0x2ea>
 80068f8:	4b64      	ldr	r3, [pc, #400]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 80068fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fc:	4a63      	ldr	r2, [pc, #396]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 80068fe:	f043 0301 	orr.w	r3, r3, #1
 8006902:	6713      	str	r3, [r2, #112]	@ 0x70
 8006904:	e01c      	b.n	8006940 <HAL_RCC_OscConfig+0x324>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	2b05      	cmp	r3, #5
 800690c:	d10c      	bne.n	8006928 <HAL_RCC_OscConfig+0x30c>
 800690e:	4b5f      	ldr	r3, [pc, #380]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 8006910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006912:	4a5e      	ldr	r2, [pc, #376]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 8006914:	f043 0304 	orr.w	r3, r3, #4
 8006918:	6713      	str	r3, [r2, #112]	@ 0x70
 800691a:	4b5c      	ldr	r3, [pc, #368]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 800691c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691e:	4a5b      	ldr	r2, [pc, #364]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 8006920:	f043 0301 	orr.w	r3, r3, #1
 8006924:	6713      	str	r3, [r2, #112]	@ 0x70
 8006926:	e00b      	b.n	8006940 <HAL_RCC_OscConfig+0x324>
 8006928:	4b58      	ldr	r3, [pc, #352]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 800692a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800692c:	4a57      	ldr	r2, [pc, #348]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 800692e:	f023 0301 	bic.w	r3, r3, #1
 8006932:	6713      	str	r3, [r2, #112]	@ 0x70
 8006934:	4b55      	ldr	r3, [pc, #340]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 8006936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006938:	4a54      	ldr	r2, [pc, #336]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 800693a:	f023 0304 	bic.w	r3, r3, #4
 800693e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d015      	beq.n	8006974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006948:	f7fd fd7c 	bl	8004444 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800694e:	e00a      	b.n	8006966 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006950:	f7fd fd78 	bl	8004444 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800695e:	4293      	cmp	r3, r2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e0cb      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006966:	4b49      	ldr	r3, [pc, #292]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0ee      	beq.n	8006950 <HAL_RCC_OscConfig+0x334>
 8006972:	e014      	b.n	800699e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006974:	f7fd fd66 	bl	8004444 <HAL_GetTick>
 8006978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800697a:	e00a      	b.n	8006992 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800697c:	f7fd fd62 	bl	8004444 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800698a:	4293      	cmp	r3, r2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e0b5      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006992:	4b3e      	ldr	r3, [pc, #248]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1ee      	bne.n	800697c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d105      	bne.n	80069b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069a4:	4b39      	ldr	r3, [pc, #228]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 80069a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a8:	4a38      	ldr	r2, [pc, #224]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 80069aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 80a1 	beq.w	8006afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069ba:	4b34      	ldr	r3, [pc, #208]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 030c 	and.w	r3, r3, #12
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	d05c      	beq.n	8006a80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d141      	bne.n	8006a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ce:	4b31      	ldr	r3, [pc, #196]	@ (8006a94 <HAL_RCC_OscConfig+0x478>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d4:	f7fd fd36 	bl	8004444 <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069dc:	f7fd fd32 	bl	8004444 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e087      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ee:	4b27      	ldr	r3, [pc, #156]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f0      	bne.n	80069dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69da      	ldr	r2, [r3, #28]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	019b      	lsls	r3, r3, #6
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a10:	085b      	lsrs	r3, r3, #1
 8006a12:	3b01      	subs	r3, #1
 8006a14:	041b      	lsls	r3, r3, #16
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1c:	061b      	lsls	r3, r3, #24
 8006a1e:	491b      	ldr	r1, [pc, #108]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a24:	4b1b      	ldr	r3, [pc, #108]	@ (8006a94 <HAL_RCC_OscConfig+0x478>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a2a:	f7fd fd0b 	bl	8004444 <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a32:	f7fd fd07 	bl	8004444 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e05c      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a44:	4b11      	ldr	r3, [pc, #68]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0f0      	beq.n	8006a32 <HAL_RCC_OscConfig+0x416>
 8006a50:	e054      	b.n	8006afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a52:	4b10      	ldr	r3, [pc, #64]	@ (8006a94 <HAL_RCC_OscConfig+0x478>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a58:	f7fd fcf4 	bl	8004444 <HAL_GetTick>
 8006a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a60:	f7fd fcf0 	bl	8004444 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e045      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a72:	4b06      	ldr	r3, [pc, #24]	@ (8006a8c <HAL_RCC_OscConfig+0x470>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1f0      	bne.n	8006a60 <HAL_RCC_OscConfig+0x444>
 8006a7e:	e03d      	b.n	8006afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d107      	bne.n	8006a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e038      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	40007000 	.word	0x40007000
 8006a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a98:	4b1b      	ldr	r3, [pc, #108]	@ (8006b08 <HAL_RCC_OscConfig+0x4ec>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d028      	beq.n	8006af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d121      	bne.n	8006af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d11a      	bne.n	8006af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ac8:	4013      	ands	r3, r2
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d111      	bne.n	8006af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d107      	bne.n	8006af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d001      	beq.n	8006afc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40023800 	.word	0x40023800

08006b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e0cc      	b.n	8006cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b20:	4b68      	ldr	r3, [pc, #416]	@ (8006cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d90c      	bls.n	8006b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2e:	4b65      	ldr	r3, [pc, #404]	@ (8006cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b36:	4b63      	ldr	r3, [pc, #396]	@ (8006cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d001      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e0b8      	b.n	8006cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d020      	beq.n	8006b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d005      	beq.n	8006b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b60:	4b59      	ldr	r3, [pc, #356]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	4a58      	ldr	r2, [pc, #352]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b78:	4b53      	ldr	r3, [pc, #332]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	4a52      	ldr	r2, [pc, #328]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b84:	4b50      	ldr	r3, [pc, #320]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	494d      	ldr	r1, [pc, #308]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d044      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d107      	bne.n	8006bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006baa:	4b47      	ldr	r3, [pc, #284]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d119      	bne.n	8006bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e07f      	b.n	8006cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d003      	beq.n	8006bca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d107      	bne.n	8006bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bca:	4b3f      	ldr	r3, [pc, #252]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e06f      	b.n	8006cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bda:	4b3b      	ldr	r3, [pc, #236]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e067      	b.n	8006cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bea:	4b37      	ldr	r3, [pc, #220]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f023 0203 	bic.w	r2, r3, #3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	4934      	ldr	r1, [pc, #208]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bfc:	f7fd fc22 	bl	8004444 <HAL_GetTick>
 8006c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c02:	e00a      	b.n	8006c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c04:	f7fd fc1e 	bl	8004444 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e04f      	b.n	8006cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 020c 	and.w	r2, r3, #12
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d1eb      	bne.n	8006c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c2c:	4b25      	ldr	r3, [pc, #148]	@ (8006cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d20c      	bcs.n	8006c54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c3a:	4b22      	ldr	r3, [pc, #136]	@ (8006cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c42:	4b20      	ldr	r3, [pc, #128]	@ (8006cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d001      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e032      	b.n	8006cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d008      	beq.n	8006c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c60:	4b19      	ldr	r3, [pc, #100]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	4916      	ldr	r1, [pc, #88]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0308 	and.w	r3, r3, #8
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d009      	beq.n	8006c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c7e:	4b12      	ldr	r3, [pc, #72]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	490e      	ldr	r1, [pc, #56]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c92:	f000 f821 	bl	8006cd8 <HAL_RCC_GetSysClockFreq>
 8006c96:	4602      	mov	r2, r0
 8006c98:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	091b      	lsrs	r3, r3, #4
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	490a      	ldr	r1, [pc, #40]	@ (8006ccc <HAL_RCC_ClockConfig+0x1c0>)
 8006ca4:	5ccb      	ldrb	r3, [r1, r3]
 8006ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8006caa:	4a09      	ldr	r2, [pc, #36]	@ (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006cae:	4b09      	ldr	r3, [pc, #36]	@ (8006cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fd fb82 	bl	80043bc <HAL_InitTick>

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40023c00 	.word	0x40023c00
 8006cc8:	40023800 	.word	0x40023800
 8006ccc:	0806d500 	.word	0x0806d500
 8006cd0:	20000008 	.word	0x20000008
 8006cd4:	20000010 	.word	0x20000010

08006cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cdc:	b094      	sub	sp, #80	@ 0x50
 8006cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cf0:	4b79      	ldr	r3, [pc, #484]	@ (8006ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f003 030c 	and.w	r3, r3, #12
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d00d      	beq.n	8006d18 <HAL_RCC_GetSysClockFreq+0x40>
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	f200 80e1 	bhi.w	8006ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <HAL_RCC_GetSysClockFreq+0x34>
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d003      	beq.n	8006d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d0a:	e0db      	b.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d0c:	4b73      	ldr	r3, [pc, #460]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x204>)
 8006d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d10:	e0db      	b.n	8006eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d12:	4b73      	ldr	r3, [pc, #460]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d16:	e0d8      	b.n	8006eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d18:	4b6f      	ldr	r3, [pc, #444]	@ (8006ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d20:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d22:	4b6d      	ldr	r3, [pc, #436]	@ (8006ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d063      	beq.n	8006df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	099b      	lsrs	r3, r3, #6
 8006d34:	2200      	movs	r2, #0
 8006d36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d42:	2300      	movs	r3, #0
 8006d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d4a:	4622      	mov	r2, r4
 8006d4c:	462b      	mov	r3, r5
 8006d4e:	f04f 0000 	mov.w	r0, #0
 8006d52:	f04f 0100 	mov.w	r1, #0
 8006d56:	0159      	lsls	r1, r3, #5
 8006d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d5c:	0150      	lsls	r0, r2, #5
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4621      	mov	r1, r4
 8006d64:	1a51      	subs	r1, r2, r1
 8006d66:	6139      	str	r1, [r7, #16]
 8006d68:	4629      	mov	r1, r5
 8006d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d7c:	4659      	mov	r1, fp
 8006d7e:	018b      	lsls	r3, r1, #6
 8006d80:	4651      	mov	r1, sl
 8006d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d86:	4651      	mov	r1, sl
 8006d88:	018a      	lsls	r2, r1, #6
 8006d8a:	4651      	mov	r1, sl
 8006d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8006d90:	4659      	mov	r1, fp
 8006d92:	eb63 0901 	sbc.w	r9, r3, r1
 8006d96:	f04f 0200 	mov.w	r2, #0
 8006d9a:	f04f 0300 	mov.w	r3, #0
 8006d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006daa:	4690      	mov	r8, r2
 8006dac:	4699      	mov	r9, r3
 8006dae:	4623      	mov	r3, r4
 8006db0:	eb18 0303 	adds.w	r3, r8, r3
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	462b      	mov	r3, r5
 8006db8:	eb49 0303 	adc.w	r3, r9, r3
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	f04f 0200 	mov.w	r2, #0
 8006dc2:	f04f 0300 	mov.w	r3, #0
 8006dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006dca:	4629      	mov	r1, r5
 8006dcc:	024b      	lsls	r3, r1, #9
 8006dce:	4621      	mov	r1, r4
 8006dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	024a      	lsls	r2, r1, #9
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dde:	2200      	movs	r2, #0
 8006de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006de2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006de8:	f7f9 ff5e 	bl	8000ca8 <__aeabi_uldivmod>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4613      	mov	r3, r2
 8006df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006df4:	e058      	b.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006df6:	4b38      	ldr	r3, [pc, #224]	@ (8006ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	099b      	lsrs	r3, r3, #6
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4618      	mov	r0, r3
 8006e00:	4611      	mov	r1, r2
 8006e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e06:	623b      	str	r3, [r7, #32]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e10:	4642      	mov	r2, r8
 8006e12:	464b      	mov	r3, r9
 8006e14:	f04f 0000 	mov.w	r0, #0
 8006e18:	f04f 0100 	mov.w	r1, #0
 8006e1c:	0159      	lsls	r1, r3, #5
 8006e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e22:	0150      	lsls	r0, r2, #5
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4641      	mov	r1, r8
 8006e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e2e:	4649      	mov	r1, r9
 8006e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e48:	ebb2 040a 	subs.w	r4, r2, sl
 8006e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8006e50:	f04f 0200 	mov.w	r2, #0
 8006e54:	f04f 0300 	mov.w	r3, #0
 8006e58:	00eb      	lsls	r3, r5, #3
 8006e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e5e:	00e2      	lsls	r2, r4, #3
 8006e60:	4614      	mov	r4, r2
 8006e62:	461d      	mov	r5, r3
 8006e64:	4643      	mov	r3, r8
 8006e66:	18e3      	adds	r3, r4, r3
 8006e68:	603b      	str	r3, [r7, #0]
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	eb45 0303 	adc.w	r3, r5, r3
 8006e70:	607b      	str	r3, [r7, #4]
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	f04f 0300 	mov.w	r3, #0
 8006e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e7e:	4629      	mov	r1, r5
 8006e80:	028b      	lsls	r3, r1, #10
 8006e82:	4621      	mov	r1, r4
 8006e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e88:	4621      	mov	r1, r4
 8006e8a:	028a      	lsls	r2, r1, #10
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e92:	2200      	movs	r2, #0
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	61fa      	str	r2, [r7, #28]
 8006e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e9c:	f7f9 ff04 	bl	8000ca8 <__aeabi_uldivmod>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	0c1b      	lsrs	r3, r3, #16
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006eb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ec2:	e002      	b.n	8006eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ec4:	4b05      	ldr	r3, [pc, #20]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x204>)
 8006ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3750      	adds	r7, #80	@ 0x50
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40023800 	.word	0x40023800
 8006edc:	00f42400 	.word	0x00f42400
 8006ee0:	007a1200 	.word	0x007a1200

08006ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ee8:	4b03      	ldr	r3, [pc, #12]	@ (8006ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eea:	681b      	ldr	r3, [r3, #0]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000008 	.word	0x20000008

08006efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f00:	f7ff fff0 	bl	8006ee4 <HAL_RCC_GetHCLKFreq>
 8006f04:	4602      	mov	r2, r0
 8006f06:	4b05      	ldr	r3, [pc, #20]	@ (8006f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	0a9b      	lsrs	r3, r3, #10
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	4903      	ldr	r1, [pc, #12]	@ (8006f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f12:	5ccb      	ldrb	r3, [r1, r3]
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	40023800 	.word	0x40023800
 8006f20:	0806d510 	.word	0x0806d510

08006f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f28:	f7ff ffdc 	bl	8006ee4 <HAL_RCC_GetHCLKFreq>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	4b05      	ldr	r3, [pc, #20]	@ (8006f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	0b5b      	lsrs	r3, r3, #13
 8006f34:	f003 0307 	and.w	r3, r3, #7
 8006f38:	4903      	ldr	r1, [pc, #12]	@ (8006f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f3a:	5ccb      	ldrb	r3, [r1, r3]
 8006f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	40023800 	.word	0x40023800
 8006f48:	0806d510 	.word	0x0806d510

08006f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e07b      	b.n	8007056 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d108      	bne.n	8006f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f6e:	d009      	beq.n	8006f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	61da      	str	r2, [r3, #28]
 8006f76:	e005      	b.n	8006f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fc f9f0 	bl	8003384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ffe:	431a      	orrs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007008:	ea42 0103 	orr.w	r1, r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	0c1b      	lsrs	r3, r3, #16
 8007022:	f003 0104 	and.w	r1, r3, #4
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702a:	f003 0210 	and.w	r2, r3, #16
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69da      	ldr	r2, [r3, #28]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007044:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b088      	sub	sp, #32
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	60b9      	str	r1, [r7, #8]
 8007068:	603b      	str	r3, [r7, #0]
 800706a:	4613      	mov	r3, r2
 800706c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800706e:	f7fd f9e9 	bl	8004444 <HAL_GetTick>
 8007072:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007074:	88fb      	ldrh	r3, [r7, #6]
 8007076:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b01      	cmp	r3, #1
 8007082:	d001      	beq.n	8007088 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007084:	2302      	movs	r3, #2
 8007086:	e12a      	b.n	80072de <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_SPI_Transmit+0x36>
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e122      	b.n	80072de <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <HAL_SPI_Transmit+0x48>
 80070a2:	2302      	movs	r3, #2
 80070a4:	e11b      	b.n	80072de <HAL_SPI_Transmit+0x280>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2203      	movs	r2, #3
 80070b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	88fa      	ldrh	r2, [r7, #6]
 80070c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	88fa      	ldrh	r2, [r7, #6]
 80070cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070f4:	d10f      	bne.n	8007116 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007104:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007114:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007120:	2b40      	cmp	r3, #64	@ 0x40
 8007122:	d007      	beq.n	8007134 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007132:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800713c:	d152      	bne.n	80071e4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <HAL_SPI_Transmit+0xee>
 8007146:	8b7b      	ldrh	r3, [r7, #26]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d145      	bne.n	80071d8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007150:	881a      	ldrh	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715c:	1c9a      	adds	r2, r3, #2
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007166:	b29b      	uxth	r3, r3
 8007168:	3b01      	subs	r3, #1
 800716a:	b29a      	uxth	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007170:	e032      	b.n	80071d8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b02      	cmp	r3, #2
 800717e:	d112      	bne.n	80071a6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007184:	881a      	ldrh	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007190:	1c9a      	adds	r2, r3, #2
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800719a:	b29b      	uxth	r3, r3
 800719c:	3b01      	subs	r3, #1
 800719e:	b29a      	uxth	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80071a4:	e018      	b.n	80071d8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071a6:	f7fd f94d 	bl	8004444 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d803      	bhi.n	80071be <HAL_SPI_Transmit+0x160>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071bc:	d102      	bne.n	80071c4 <HAL_SPI_Transmit+0x166>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d109      	bne.n	80071d8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e082      	b.n	80072de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071dc:	b29b      	uxth	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1c7      	bne.n	8007172 <HAL_SPI_Transmit+0x114>
 80071e2:	e053      	b.n	800728c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <HAL_SPI_Transmit+0x194>
 80071ec:	8b7b      	ldrh	r3, [r7, #26]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d147      	bne.n	8007282 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	330c      	adds	r3, #12
 80071fc:	7812      	ldrb	r2, [r2, #0]
 80071fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800720e:	b29b      	uxth	r3, r3
 8007210:	3b01      	subs	r3, #1
 8007212:	b29a      	uxth	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007218:	e033      	b.n	8007282 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b02      	cmp	r3, #2
 8007226:	d113      	bne.n	8007250 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	330c      	adds	r3, #12
 8007232:	7812      	ldrb	r2, [r2, #0]
 8007234:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800724e:	e018      	b.n	8007282 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007250:	f7fd f8f8 	bl	8004444 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d803      	bhi.n	8007268 <HAL_SPI_Transmit+0x20a>
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007266:	d102      	bne.n	800726e <HAL_SPI_Transmit+0x210>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e02d      	b.n	80072de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1c6      	bne.n	800721a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 fa59 	bl	8007748 <SPI_EndRxTxTransaction>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	617b      	str	r3, [r7, #20]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e000      	b.n	80072de <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80072dc:	2300      	movs	r3, #0
  }
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3720      	adds	r7, #32
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b08a      	sub	sp, #40	@ 0x28
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
 80072f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072f4:	2301      	movs	r3, #1
 80072f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072f8:	f7fd f8a4 	bl	8004444 <HAL_GetTick>
 80072fc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007304:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800730c:	887b      	ldrh	r3, [r7, #2]
 800730e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007310:	7ffb      	ldrb	r3, [r7, #31]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d00c      	beq.n	8007330 <HAL_SPI_TransmitReceive+0x4a>
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800731c:	d106      	bne.n	800732c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d102      	bne.n	800732c <HAL_SPI_TransmitReceive+0x46>
 8007326:	7ffb      	ldrb	r3, [r7, #31]
 8007328:	2b04      	cmp	r3, #4
 800732a:	d001      	beq.n	8007330 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800732c:	2302      	movs	r3, #2
 800732e:	e17f      	b.n	8007630 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d005      	beq.n	8007342 <HAL_SPI_TransmitReceive+0x5c>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <HAL_SPI_TransmitReceive+0x5c>
 800733c:	887b      	ldrh	r3, [r7, #2]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e174      	b.n	8007630 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_SPI_TransmitReceive+0x6e>
 8007350:	2302      	movs	r3, #2
 8007352:	e16d      	b.n	8007630 <HAL_SPI_TransmitReceive+0x34a>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b04      	cmp	r3, #4
 8007366:	d003      	beq.n	8007370 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2205      	movs	r2, #5
 800736c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	887a      	ldrh	r2, [r7, #2]
 8007380:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	887a      	ldrh	r2, [r7, #2]
 8007386:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	887a      	ldrh	r2, [r7, #2]
 8007392:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	887a      	ldrh	r2, [r7, #2]
 8007398:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b0:	2b40      	cmp	r3, #64	@ 0x40
 80073b2:	d007      	beq.n	80073c4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073cc:	d17e      	bne.n	80074cc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <HAL_SPI_TransmitReceive+0xf6>
 80073d6:	8afb      	ldrh	r3, [r7, #22]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d16c      	bne.n	80074b6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e0:	881a      	ldrh	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ec:	1c9a      	adds	r2, r3, #2
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007400:	e059      	b.n	80074b6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b02      	cmp	r3, #2
 800740e:	d11b      	bne.n	8007448 <HAL_SPI_TransmitReceive+0x162>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007414:	b29b      	uxth	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d016      	beq.n	8007448 <HAL_SPI_TransmitReceive+0x162>
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	2b01      	cmp	r3, #1
 800741e:	d113      	bne.n	8007448 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007424:	881a      	ldrh	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007430:	1c9a      	adds	r2, r3, #2
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800743a:	b29b      	uxth	r3, r3
 800743c:	3b01      	subs	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b01      	cmp	r3, #1
 8007454:	d119      	bne.n	800748a <HAL_SPI_TransmitReceive+0x1a4>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d014      	beq.n	800748a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746a:	b292      	uxth	r2, r2
 800746c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007472:	1c9a      	adds	r2, r3, #2
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800747c:	b29b      	uxth	r3, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007486:	2301      	movs	r3, #1
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800748a:	f7fc ffdb 	bl	8004444 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007496:	429a      	cmp	r2, r3
 8007498:	d80d      	bhi.n	80074b6 <HAL_SPI_TransmitReceive+0x1d0>
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a0:	d009      	beq.n	80074b6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e0bc      	b.n	8007630 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1a0      	bne.n	8007402 <HAL_SPI_TransmitReceive+0x11c>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d19b      	bne.n	8007402 <HAL_SPI_TransmitReceive+0x11c>
 80074ca:	e082      	b.n	80075d2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <HAL_SPI_TransmitReceive+0x1f4>
 80074d4:	8afb      	ldrh	r3, [r7, #22]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d171      	bne.n	80075be <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	330c      	adds	r3, #12
 80074e4:	7812      	ldrb	r2, [r2, #0]
 80074e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	3b01      	subs	r3, #1
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007500:	e05d      	b.n	80075be <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b02      	cmp	r3, #2
 800750e:	d11c      	bne.n	800754a <HAL_SPI_TransmitReceive+0x264>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d017      	beq.n	800754a <HAL_SPI_TransmitReceive+0x264>
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	2b01      	cmp	r3, #1
 800751e:	d114      	bne.n	800754a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	7812      	ldrb	r2, [r2, #0]
 800752c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800753c:	b29b      	uxth	r3, r3
 800753e:	3b01      	subs	r3, #1
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b01      	cmp	r3, #1
 8007556:	d119      	bne.n	800758c <HAL_SPI_TransmitReceive+0x2a6>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d014      	beq.n	800758c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756c:	b2d2      	uxtb	r2, r2
 800756e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007588:	2301      	movs	r3, #1
 800758a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800758c:	f7fc ff5a 	bl	8004444 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007598:	429a      	cmp	r2, r3
 800759a:	d803      	bhi.n	80075a4 <HAL_SPI_TransmitReceive+0x2be>
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a2:	d102      	bne.n	80075aa <HAL_SPI_TransmitReceive+0x2c4>
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e038      	b.n	8007630 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d19c      	bne.n	8007502 <HAL_SPI_TransmitReceive+0x21c>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d197      	bne.n	8007502 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075d2:	6a3a      	ldr	r2, [r7, #32]
 80075d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 f8b6 	bl	8007748 <SPI_EndRxTxTransaction>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d008      	beq.n	80075f4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2220      	movs	r2, #32
 80075e6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e01d      	b.n	8007630 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10a      	bne.n	8007612 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075fc:	2300      	movs	r3, #0
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	613b      	str	r3, [r7, #16]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e000      	b.n	8007630 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800762e:	2300      	movs	r3, #0
  }
}
 8007630:	4618      	mov	r0, r3
 8007632:	3728      	adds	r7, #40	@ 0x28
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	603b      	str	r3, [r7, #0]
 8007644:	4613      	mov	r3, r2
 8007646:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007648:	f7fc fefc 	bl	8004444 <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007650:	1a9b      	subs	r3, r3, r2
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	4413      	add	r3, r2
 8007656:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007658:	f7fc fef4 	bl	8004444 <HAL_GetTick>
 800765c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800765e:	4b39      	ldr	r3, [pc, #228]	@ (8007744 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	015b      	lsls	r3, r3, #5
 8007664:	0d1b      	lsrs	r3, r3, #20
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	fb02 f303 	mul.w	r3, r2, r3
 800766c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800766e:	e055      	b.n	800771c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007676:	d051      	beq.n	800771c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007678:	f7fc fee4 	bl	8004444 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	429a      	cmp	r2, r3
 8007686:	d902      	bls.n	800768e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d13d      	bne.n	800770a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800769c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076a6:	d111      	bne.n	80076cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076b0:	d004      	beq.n	80076bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ba:	d107      	bne.n	80076cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076d4:	d10f      	bne.n	80076f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e018      	b.n	800773c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	61fb      	str	r3, [r7, #28]
 8007714:	e002      	b.n	800771c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	3b01      	subs	r3, #1
 800771a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689a      	ldr	r2, [r3, #8]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	4013      	ands	r3, r2
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	429a      	cmp	r2, r3
 800772a:	bf0c      	ite	eq
 800772c:	2301      	moveq	r3, #1
 800772e:	2300      	movne	r3, #0
 8007730:	b2db      	uxtb	r3, r3
 8007732:	461a      	mov	r2, r3
 8007734:	79fb      	ldrb	r3, [r7, #7]
 8007736:	429a      	cmp	r2, r3
 8007738:	d19a      	bne.n	8007670 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3720      	adds	r7, #32
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000008 	.word	0x20000008

08007748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2201      	movs	r2, #1
 800775c:	2102      	movs	r1, #2
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f7ff ff6a 	bl	8007638 <SPI_WaitFlagStateUntilTimeout>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d007      	beq.n	800777a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800776e:	f043 0220 	orr.w	r2, r3, #32
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e032      	b.n	80077e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800777a:	4b1b      	ldr	r3, [pc, #108]	@ (80077e8 <SPI_EndRxTxTransaction+0xa0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a1b      	ldr	r2, [pc, #108]	@ (80077ec <SPI_EndRxTxTransaction+0xa4>)
 8007780:	fba2 2303 	umull	r2, r3, r2, r3
 8007784:	0d5b      	lsrs	r3, r3, #21
 8007786:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800778a:	fb02 f303 	mul.w	r3, r2, r3
 800778e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007798:	d112      	bne.n	80077c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2200      	movs	r2, #0
 80077a2:	2180      	movs	r1, #128	@ 0x80
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f7ff ff47 	bl	8007638 <SPI_WaitFlagStateUntilTimeout>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d016      	beq.n	80077de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b4:	f043 0220 	orr.w	r2, r3, #32
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e00f      	b.n	80077e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077d6:	2b80      	cmp	r3, #128	@ 0x80
 80077d8:	d0f2      	beq.n	80077c0 <SPI_EndRxTxTransaction+0x78>
 80077da:	e000      	b.n	80077de <SPI_EndRxTxTransaction+0x96>
        break;
 80077dc:	bf00      	nop
  }

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3718      	adds	r7, #24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20000008 	.word	0x20000008
 80077ec:	165e9f81 	.word	0x165e9f81

080077f0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e038      	b.n	8007878 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d106      	bne.n	8007820 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f7fb febe 	bl	800359c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3308      	adds	r3, #8
 8007828:	4619      	mov	r1, r3
 800782a:	4610      	mov	r0, r2
 800782c:	f001 fd06 	bl	800923c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	461a      	mov	r2, r3
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	f001 fd68 	bl	8009310 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6858      	ldr	r0, [r3, #4]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	f001 fd8d 	bl	800936c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	6892      	ldr	r2, [r2, #8]
 800785a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	6892      	ldr	r2, [r2, #8]
 8007866:	f041 0101 	orr.w	r1, r1, #1
 800786a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e041      	b.n	8007916 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fb fdb4 	bl	8003414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4619      	mov	r1, r3
 80078be:	4610      	mov	r0, r2
 80078c0:	f000 fa80 	bl	8007dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b01      	cmp	r3, #1
 8007932:	d001      	beq.n	8007938 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e046      	b.n	80079c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a23      	ldr	r2, [pc, #140]	@ (80079d4 <HAL_TIM_Base_Start+0xb4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d022      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007952:	d01d      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a1f      	ldr	r2, [pc, #124]	@ (80079d8 <HAL_TIM_Base_Start+0xb8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d018      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a1e      	ldr	r2, [pc, #120]	@ (80079dc <HAL_TIM_Base_Start+0xbc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d013      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1c      	ldr	r2, [pc, #112]	@ (80079e0 <HAL_TIM_Base_Start+0xc0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00e      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1b      	ldr	r2, [pc, #108]	@ (80079e4 <HAL_TIM_Base_Start+0xc4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d009      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a19      	ldr	r2, [pc, #100]	@ (80079e8 <HAL_TIM_Base_Start+0xc8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d004      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a18      	ldr	r2, [pc, #96]	@ (80079ec <HAL_TIM_Base_Start+0xcc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d111      	bne.n	80079b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b06      	cmp	r3, #6
 80079a0:	d010      	beq.n	80079c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0201 	orr.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b2:	e007      	b.n	80079c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0201 	orr.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40010000 	.word	0x40010000
 80079d8:	40000400 	.word	0x40000400
 80079dc:	40000800 	.word	0x40000800
 80079e0:	40000c00 	.word	0x40000c00
 80079e4:	40010400 	.word	0x40010400
 80079e8:	40014000 	.word	0x40014000
 80079ec:	40001800 	.word	0x40001800

080079f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d020      	beq.n	8007a54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d01b      	beq.n	8007a54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f06f 0202 	mvn.w	r2, #2
 8007a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f9a3 	bl	8007d86 <HAL_TIM_IC_CaptureCallback>
 8007a40:	e005      	b.n	8007a4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f995 	bl	8007d72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f9a6 	bl	8007d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f003 0304 	and.w	r3, r3, #4
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d020      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01b      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0204 	mvn.w	r2, #4
 8007a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f97d 	bl	8007d86 <HAL_TIM_IC_CaptureCallback>
 8007a8c:	e005      	b.n	8007a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f96f 	bl	8007d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f980 	bl	8007d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 0308 	and.w	r3, r3, #8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d020      	beq.n	8007aec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01b      	beq.n	8007aec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f06f 0208 	mvn.w	r2, #8
 8007abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2204      	movs	r2, #4
 8007ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f957 	bl	8007d86 <HAL_TIM_IC_CaptureCallback>
 8007ad8:	e005      	b.n	8007ae6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f949 	bl	8007d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f95a 	bl	8007d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f003 0310 	and.w	r3, r3, #16
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d020      	beq.n	8007b38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f003 0310 	and.w	r3, r3, #16
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d01b      	beq.n	8007b38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f06f 0210 	mvn.w	r2, #16
 8007b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f931 	bl	8007d86 <HAL_TIM_IC_CaptureCallback>
 8007b24:	e005      	b.n	8007b32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f923 	bl	8007d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f934 	bl	8007d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00c      	beq.n	8007b5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d007      	beq.n	8007b5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f06f 0201 	mvn.w	r2, #1
 8007b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f901 	bl	8007d5e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00c      	beq.n	8007b80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d007      	beq.n	8007b80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fae8 	bl	8008150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00c      	beq.n	8007ba4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d007      	beq.n	8007ba4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f905 	bl	8007dae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00c      	beq.n	8007bc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d007      	beq.n	8007bc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0220 	mvn.w	r2, #32
 8007bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 faba 	bl	800813c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bc8:	bf00      	nop
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d101      	bne.n	8007bec <HAL_TIM_ConfigClockSource+0x1c>
 8007be8:	2302      	movs	r3, #2
 8007bea:	e0b4      	b.n	8007d56 <HAL_TIM_ConfigClockSource+0x186>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c24:	d03e      	beq.n	8007ca4 <HAL_TIM_ConfigClockSource+0xd4>
 8007c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c2a:	f200 8087 	bhi.w	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c32:	f000 8086 	beq.w	8007d42 <HAL_TIM_ConfigClockSource+0x172>
 8007c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c3a:	d87f      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c3c:	2b70      	cmp	r3, #112	@ 0x70
 8007c3e:	d01a      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0xa6>
 8007c40:	2b70      	cmp	r3, #112	@ 0x70
 8007c42:	d87b      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c44:	2b60      	cmp	r3, #96	@ 0x60
 8007c46:	d050      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x11a>
 8007c48:	2b60      	cmp	r3, #96	@ 0x60
 8007c4a:	d877      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c4c:	2b50      	cmp	r3, #80	@ 0x50
 8007c4e:	d03c      	beq.n	8007cca <HAL_TIM_ConfigClockSource+0xfa>
 8007c50:	2b50      	cmp	r3, #80	@ 0x50
 8007c52:	d873      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c54:	2b40      	cmp	r3, #64	@ 0x40
 8007c56:	d058      	beq.n	8007d0a <HAL_TIM_ConfigClockSource+0x13a>
 8007c58:	2b40      	cmp	r3, #64	@ 0x40
 8007c5a:	d86f      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c5c:	2b30      	cmp	r3, #48	@ 0x30
 8007c5e:	d064      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x15a>
 8007c60:	2b30      	cmp	r3, #48	@ 0x30
 8007c62:	d86b      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d060      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x15a>
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	d867      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d05c      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x15a>
 8007c70:	2b10      	cmp	r3, #16
 8007c72:	d05a      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x15a>
 8007c74:	e062      	b.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c86:	f000 f9bd 	bl	8008004 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	609a      	str	r2, [r3, #8]
      break;
 8007ca2:	e04f      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cb4:	f000 f9a6 	bl	8008004 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cc6:	609a      	str	r2, [r3, #8]
      break;
 8007cc8:	e03c      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f000 f91a 	bl	8007f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2150      	movs	r1, #80	@ 0x50
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f973 	bl	8007fce <TIM_ITRx_SetConfig>
      break;
 8007ce8:	e02c      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f000 f939 	bl	8007f6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2160      	movs	r1, #96	@ 0x60
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 f963 	bl	8007fce <TIM_ITRx_SetConfig>
      break;
 8007d08:	e01c      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d16:	461a      	mov	r2, r3
 8007d18:	f000 f8fa 	bl	8007f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2140      	movs	r1, #64	@ 0x40
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 f953 	bl	8007fce <TIM_ITRx_SetConfig>
      break;
 8007d28:	e00c      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4619      	mov	r1, r3
 8007d34:	4610      	mov	r0, r2
 8007d36:	f000 f94a 	bl	8007fce <TIM_ITRx_SetConfig>
      break;
 8007d3a:	e003      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d40:	e000      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
	...

08007dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a43      	ldr	r2, [pc, #268]	@ (8007ee4 <TIM_Base_SetConfig+0x120>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d013      	beq.n	8007e04 <TIM_Base_SetConfig+0x40>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de2:	d00f      	beq.n	8007e04 <TIM_Base_SetConfig+0x40>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a40      	ldr	r2, [pc, #256]	@ (8007ee8 <TIM_Base_SetConfig+0x124>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00b      	beq.n	8007e04 <TIM_Base_SetConfig+0x40>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a3f      	ldr	r2, [pc, #252]	@ (8007eec <TIM_Base_SetConfig+0x128>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d007      	beq.n	8007e04 <TIM_Base_SetConfig+0x40>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a3e      	ldr	r2, [pc, #248]	@ (8007ef0 <TIM_Base_SetConfig+0x12c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d003      	beq.n	8007e04 <TIM_Base_SetConfig+0x40>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a3d      	ldr	r2, [pc, #244]	@ (8007ef4 <TIM_Base_SetConfig+0x130>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d108      	bne.n	8007e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a32      	ldr	r2, [pc, #200]	@ (8007ee4 <TIM_Base_SetConfig+0x120>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d02b      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e24:	d027      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a2f      	ldr	r2, [pc, #188]	@ (8007ee8 <TIM_Base_SetConfig+0x124>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d023      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a2e      	ldr	r2, [pc, #184]	@ (8007eec <TIM_Base_SetConfig+0x128>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d01f      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a2d      	ldr	r2, [pc, #180]	@ (8007ef0 <TIM_Base_SetConfig+0x12c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d01b      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a2c      	ldr	r2, [pc, #176]	@ (8007ef4 <TIM_Base_SetConfig+0x130>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d017      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a2b      	ldr	r2, [pc, #172]	@ (8007ef8 <TIM_Base_SetConfig+0x134>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d013      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a2a      	ldr	r2, [pc, #168]	@ (8007efc <TIM_Base_SetConfig+0x138>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d00f      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a29      	ldr	r2, [pc, #164]	@ (8007f00 <TIM_Base_SetConfig+0x13c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d00b      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a28      	ldr	r2, [pc, #160]	@ (8007f04 <TIM_Base_SetConfig+0x140>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d007      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a27      	ldr	r2, [pc, #156]	@ (8007f08 <TIM_Base_SetConfig+0x144>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d003      	beq.n	8007e76 <TIM_Base_SetConfig+0xb2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a26      	ldr	r2, [pc, #152]	@ (8007f0c <TIM_Base_SetConfig+0x148>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d108      	bne.n	8007e88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8007ee4 <TIM_Base_SetConfig+0x120>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d003      	beq.n	8007eb6 <TIM_Base_SetConfig+0xf2>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a10      	ldr	r2, [pc, #64]	@ (8007ef4 <TIM_Base_SetConfig+0x130>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d103      	bne.n	8007ebe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	691a      	ldr	r2, [r3, #16]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f043 0204 	orr.w	r2, r3, #4
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	601a      	str	r2, [r3, #0]
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	40010000 	.word	0x40010000
 8007ee8:	40000400 	.word	0x40000400
 8007eec:	40000800 	.word	0x40000800
 8007ef0:	40000c00 	.word	0x40000c00
 8007ef4:	40010400 	.word	0x40010400
 8007ef8:	40014000 	.word	0x40014000
 8007efc:	40014400 	.word	0x40014400
 8007f00:	40014800 	.word	0x40014800
 8007f04:	40001800 	.word	0x40001800
 8007f08:	40001c00 	.word	0x40001c00
 8007f0c:	40002000 	.word	0x40002000

08007f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	f023 0201 	bic.w	r2, r3, #1
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	011b      	lsls	r3, r3, #4
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f023 030a 	bic.w	r3, r3, #10
 8007f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	621a      	str	r2, [r3, #32]
}
 8007f62:	bf00      	nop
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b087      	sub	sp, #28
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	60b9      	str	r1, [r7, #8]
 8007f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	f023 0210 	bic.w	r2, r3, #16
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	031b      	lsls	r3, r3, #12
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007faa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	011b      	lsls	r3, r3, #4
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	621a      	str	r2, [r3, #32]
}
 8007fc2:	bf00      	nop
 8007fc4:	371c      	adds	r7, #28
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b085      	sub	sp, #20
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	f043 0307 	orr.w	r3, r3, #7
 8007ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	609a      	str	r2, [r3, #8]
}
 8007ff8:	bf00      	nop
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
 8008010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800801e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	021a      	lsls	r2, r3, #8
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	431a      	orrs	r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	4313      	orrs	r3, r2
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	609a      	str	r2, [r3, #8]
}
 8008038:	bf00      	nop
 800803a:	371c      	adds	r7, #28
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008058:	2302      	movs	r3, #2
 800805a:	e05a      	b.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2202      	movs	r2, #2
 8008068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a21      	ldr	r2, [pc, #132]	@ (8008120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d022      	beq.n	80080e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a8:	d01d      	beq.n	80080e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a1d      	ldr	r2, [pc, #116]	@ (8008124 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d018      	beq.n	80080e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008128 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d013      	beq.n	80080e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a1a      	ldr	r2, [pc, #104]	@ (800812c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d00e      	beq.n	80080e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a18      	ldr	r2, [pc, #96]	@ (8008130 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d009      	beq.n	80080e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a17      	ldr	r2, [pc, #92]	@ (8008134 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d004      	beq.n	80080e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a15      	ldr	r2, [pc, #84]	@ (8008138 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d10c      	bne.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	40010000 	.word	0x40010000
 8008124:	40000400 	.word	0x40000400
 8008128:	40000800 	.word	0x40000800
 800812c:	40000c00 	.word	0x40000c00
 8008130:	40010400 	.word	0x40010400
 8008134:	40014000 	.word	0x40014000
 8008138:	40001800 	.word	0x40001800

0800813c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e042      	b.n	80081fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d106      	bne.n	8008190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7fb f96a 	bl	8003464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2224      	movs	r2, #36	@ 0x24
 8008194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80081a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fdd3 	bl	8008d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	691a      	ldr	r2, [r3, #16]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80081bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	695a      	ldr	r2, [r3, #20]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68da      	ldr	r2, [r3, #12]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80081dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2220      	movs	r2, #32
 80081f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08a      	sub	sp, #40	@ 0x28
 8008208:	af02      	add	r7, sp, #8
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	4613      	mov	r3, r2
 8008212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b20      	cmp	r3, #32
 8008222:	d175      	bne.n	8008310 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <HAL_UART_Transmit+0x2c>
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e06e      	b.n	8008312 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2221      	movs	r2, #33	@ 0x21
 800823e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008242:	f7fc f8ff 	bl	8004444 <HAL_GetTick>
 8008246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	88fa      	ldrh	r2, [r7, #6]
 800824c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	88fa      	ldrh	r2, [r7, #6]
 8008252:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800825c:	d108      	bne.n	8008270 <HAL_UART_Transmit+0x6c>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d104      	bne.n	8008270 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008266:	2300      	movs	r3, #0
 8008268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	61bb      	str	r3, [r7, #24]
 800826e:	e003      	b.n	8008278 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008274:	2300      	movs	r3, #0
 8008276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008278:	e02e      	b.n	80082d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2200      	movs	r2, #0
 8008282:	2180      	movs	r1, #128	@ 0x80
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 fb37 	bl	80088f8 <UART_WaitOnFlagUntilTimeout>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d005      	beq.n	800829c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2220      	movs	r2, #32
 8008294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e03a      	b.n	8008312 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10b      	bne.n	80082ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	3302      	adds	r3, #2
 80082b6:	61bb      	str	r3, [r7, #24]
 80082b8:	e007      	b.n	80082ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	781a      	ldrb	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	3301      	adds	r3, #1
 80082c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	3b01      	subs	r3, #1
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80082dc:	b29b      	uxth	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1cb      	bne.n	800827a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2200      	movs	r2, #0
 80082ea:	2140      	movs	r1, #64	@ 0x40
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 fb03 	bl	80088f8 <UART_WaitOnFlagUntilTimeout>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2220      	movs	r2, #32
 80082fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e006      	b.n	8008312 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2220      	movs	r2, #32
 8008308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	e000      	b.n	8008312 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008310:	2302      	movs	r3, #2
  }
}
 8008312:	4618      	mov	r0, r3
 8008314:	3720      	adds	r7, #32
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	4613      	mov	r3, r2
 8008326:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b20      	cmp	r3, #32
 8008332:	d112      	bne.n	800835a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <HAL_UART_Receive_IT+0x26>
 800833a:	88fb      	ldrh	r3, [r7, #6]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e00b      	b.n	800835c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800834a:	88fb      	ldrh	r3, [r7, #6]
 800834c:	461a      	mov	r2, r3
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 fb2a 	bl	80089aa <UART_Start_Receive_IT>
 8008356:	4603      	mov	r3, r0
 8008358:	e000      	b.n	800835c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800835a:	2302      	movs	r3, #2
  }
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b0ba      	sub	sp, #232	@ 0xe8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800838a:	2300      	movs	r3, #0
 800838c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008390:	2300      	movs	r3, #0
 8008392:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800839a:	f003 030f 	and.w	r3, r3, #15
 800839e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80083a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10f      	bne.n	80083ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d009      	beq.n	80083ca <HAL_UART_IRQHandler+0x66>
 80083b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ba:	f003 0320 	and.w	r3, r3, #32
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fc07 	bl	8008bd6 <UART_Receive_IT>
      return;
 80083c8:	e273      	b.n	80088b2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80083ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 80de 	beq.w	8008590 <HAL_UART_IRQHandler+0x22c>
 80083d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d106      	bne.n	80083ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 80d1 	beq.w	8008590 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00b      	beq.n	8008412 <HAL_UART_IRQHandler+0xae>
 80083fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008402:	2b00      	cmp	r3, #0
 8008404:	d005      	beq.n	8008412 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800840a:	f043 0201 	orr.w	r2, r3, #1
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008416:	f003 0304 	and.w	r3, r3, #4
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00b      	beq.n	8008436 <HAL_UART_IRQHandler+0xd2>
 800841e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b00      	cmp	r3, #0
 8008428:	d005      	beq.n	8008436 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800842e:	f043 0202 	orr.w	r2, r3, #2
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <HAL_UART_IRQHandler+0xf6>
 8008442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008452:	f043 0204 	orr.w	r2, r3, #4
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800845a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800845e:	f003 0308 	and.w	r3, r3, #8
 8008462:	2b00      	cmp	r3, #0
 8008464:	d011      	beq.n	800848a <HAL_UART_IRQHandler+0x126>
 8008466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800846a:	f003 0320 	and.w	r3, r3, #32
 800846e:	2b00      	cmp	r3, #0
 8008470:	d105      	bne.n	800847e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	d005      	beq.n	800848a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008482:	f043 0208 	orr.w	r2, r3, #8
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 820a 	beq.w	80088a8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b00      	cmp	r3, #0
 800849e:	d008      	beq.n	80084b2 <HAL_UART_IRQHandler+0x14e>
 80084a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fb92 	bl	8008bd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084bc:	2b40      	cmp	r3, #64	@ 0x40
 80084be:	bf0c      	ite	eq
 80084c0:	2301      	moveq	r3, #1
 80084c2:	2300      	movne	r3, #0
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ce:	f003 0308 	and.w	r3, r3, #8
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d103      	bne.n	80084de <HAL_UART_IRQHandler+0x17a>
 80084d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d04f      	beq.n	800857e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa9d 	bl	8008a1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ee:	2b40      	cmp	r3, #64	@ 0x40
 80084f0:	d141      	bne.n	8008576 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3314      	adds	r3, #20
 80084f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008500:	e853 3f00 	ldrex	r3, [r3]
 8008504:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008508:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800850c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3314      	adds	r3, #20
 800851a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800851e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008522:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800852a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800852e:	e841 2300 	strex	r3, r2, [r1]
 8008532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1d9      	bne.n	80084f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008542:	2b00      	cmp	r3, #0
 8008544:	d013      	beq.n	800856e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800854a:	4a8a      	ldr	r2, [pc, #552]	@ (8008774 <HAL_UART_IRQHandler+0x410>)
 800854c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008552:	4618      	mov	r0, r3
 8008554:	f7fc fa23 	bl	800499e <HAL_DMA_Abort_IT>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d016      	beq.n	800858c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008568:	4610      	mov	r0, r2
 800856a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800856c:	e00e      	b.n	800858c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f9ac 	bl	80088cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008574:	e00a      	b.n	800858c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f9a8 	bl	80088cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800857c:	e006      	b.n	800858c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f9a4 	bl	80088cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800858a:	e18d      	b.n	80088a8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800858c:	bf00      	nop
    return;
 800858e:	e18b      	b.n	80088a8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008594:	2b01      	cmp	r3, #1
 8008596:	f040 8167 	bne.w	8008868 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800859a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800859e:	f003 0310 	and.w	r3, r3, #16
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 8160 	beq.w	8008868 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80085a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ac:	f003 0310 	and.w	r3, r3, #16
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 8159 	beq.w	8008868 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085b6:	2300      	movs	r3, #0
 80085b8:	60bb      	str	r3, [r7, #8]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	60bb      	str	r3, [r7, #8]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	60bb      	str	r3, [r7, #8]
 80085ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d6:	2b40      	cmp	r3, #64	@ 0x40
 80085d8:	f040 80ce 	bne.w	8008778 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 80a9 	beq.w	8008744 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80085f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085fa:	429a      	cmp	r2, r3
 80085fc:	f080 80a2 	bcs.w	8008744 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008606:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008612:	f000 8088 	beq.w	8008726 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	330c      	adds	r3, #12
 800861c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008620:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800862c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	330c      	adds	r3, #12
 800863e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008642:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800864e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800865a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1d9      	bne.n	8008616 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3314      	adds	r3, #20
 8008668:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008672:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008674:	f023 0301 	bic.w	r3, r3, #1
 8008678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3314      	adds	r3, #20
 8008682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008686:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800868a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800868e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1e1      	bne.n	8008662 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3314      	adds	r3, #20
 80086a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80086ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3314      	adds	r3, #20
 80086be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80086c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80086c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80086c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80086d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e3      	bne.n	800869e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2220      	movs	r2, #32
 80086da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	330c      	adds	r3, #12
 80086ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086ee:	e853 3f00 	ldrex	r3, [r3]
 80086f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086f6:	f023 0310 	bic.w	r3, r3, #16
 80086fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	330c      	adds	r3, #12
 8008704:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008708:	65ba      	str	r2, [r7, #88]	@ 0x58
 800870a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800870e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008710:	e841 2300 	strex	r3, r2, [r1]
 8008714:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e3      	bne.n	80086e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008720:	4618      	mov	r0, r3
 8008722:	f7fc f8cc 	bl	80048be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2202      	movs	r2, #2
 800872a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008734:	b29b      	uxth	r3, r3
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	b29b      	uxth	r3, r3
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f8cf 	bl	80088e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008742:	e0b3      	b.n	80088ac <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008748:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800874c:	429a      	cmp	r2, r3
 800874e:	f040 80ad 	bne.w	80088ac <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800875c:	f040 80a6 	bne.w	80088ac <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2202      	movs	r2, #2
 8008764:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f8b7 	bl	80088e0 <HAL_UARTEx_RxEventCallback>
      return;
 8008772:	e09b      	b.n	80088ac <HAL_UART_IRQHandler+0x548>
 8008774:	08008ae5 	.word	0x08008ae5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008780:	b29b      	uxth	r3, r3
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800878c:	b29b      	uxth	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 808e 	beq.w	80088b0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 8089 	beq.w	80088b0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	330c      	adds	r3, #12
 80087a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a8:	e853 3f00 	ldrex	r3, [r3]
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	330c      	adds	r3, #12
 80087be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80087c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80087c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1e3      	bne.n	800879e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3314      	adds	r3, #20
 80087dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	623b      	str	r3, [r7, #32]
   return(result);
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	f023 0301 	bic.w	r3, r3, #1
 80087ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3314      	adds	r3, #20
 80087f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80087fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80087fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e3      	bne.n	80087d6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2220      	movs	r2, #32
 8008812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	330c      	adds	r3, #12
 8008822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	e853 3f00 	ldrex	r3, [r3]
 800882a:	60fb      	str	r3, [r7, #12]
   return(result);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 0310 	bic.w	r3, r3, #16
 8008832:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	330c      	adds	r3, #12
 800883c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008840:	61fa      	str	r2, [r7, #28]
 8008842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008844:	69b9      	ldr	r1, [r7, #24]
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	e841 2300 	strex	r3, r2, [r1]
 800884c:	617b      	str	r3, [r7, #20]
   return(result);
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e3      	bne.n	800881c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2202      	movs	r2, #2
 8008858:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800885a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f83d 	bl	80088e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008866:	e023      	b.n	80088b0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800886c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008870:	2b00      	cmp	r3, #0
 8008872:	d009      	beq.n	8008888 <HAL_UART_IRQHandler+0x524>
 8008874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800887c:	2b00      	cmp	r3, #0
 800887e:	d003      	beq.n	8008888 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f940 	bl	8008b06 <UART_Transmit_IT>
    return;
 8008886:	e014      	b.n	80088b2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800888c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00e      	beq.n	80088b2 <HAL_UART_IRQHandler+0x54e>
 8008894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800889c:	2b00      	cmp	r3, #0
 800889e:	d008      	beq.n	80088b2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f980 	bl	8008ba6 <UART_EndTransmit_IT>
    return;
 80088a6:	e004      	b.n	80088b2 <HAL_UART_IRQHandler+0x54e>
    return;
 80088a8:	bf00      	nop
 80088aa:	e002      	b.n	80088b2 <HAL_UART_IRQHandler+0x54e>
      return;
 80088ac:	bf00      	nop
 80088ae:	e000      	b.n	80088b2 <HAL_UART_IRQHandler+0x54e>
      return;
 80088b0:	bf00      	nop
  }
}
 80088b2:	37e8      	adds	r7, #232	@ 0xe8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	603b      	str	r3, [r7, #0]
 8008904:	4613      	mov	r3, r2
 8008906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008908:	e03b      	b.n	8008982 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008910:	d037      	beq.n	8008982 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008912:	f7fb fd97 	bl	8004444 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	6a3a      	ldr	r2, [r7, #32]
 800891e:	429a      	cmp	r2, r3
 8008920:	d302      	bcc.n	8008928 <UART_WaitOnFlagUntilTimeout+0x30>
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e03a      	b.n	80089a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b00      	cmp	r3, #0
 8008938:	d023      	beq.n	8008982 <UART_WaitOnFlagUntilTimeout+0x8a>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	2b80      	cmp	r3, #128	@ 0x80
 800893e:	d020      	beq.n	8008982 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b40      	cmp	r3, #64	@ 0x40
 8008944:	d01d      	beq.n	8008982 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0308 	and.w	r3, r3, #8
 8008950:	2b08      	cmp	r3, #8
 8008952:	d116      	bne.n	8008982 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008954:	2300      	movs	r3, #0
 8008956:	617b      	str	r3, [r7, #20]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 f857 	bl	8008a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2208      	movs	r2, #8
 8008974:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e00f      	b.n	80089a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	4013      	ands	r3, r2
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	429a      	cmp	r2, r3
 8008990:	bf0c      	ite	eq
 8008992:	2301      	moveq	r3, #1
 8008994:	2300      	movne	r3, #0
 8008996:	b2db      	uxtb	r3, r3
 8008998:	461a      	mov	r2, r3
 800899a:	79fb      	ldrb	r3, [r7, #7]
 800899c:	429a      	cmp	r2, r3
 800899e:	d0b4      	beq.n	800890a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3718      	adds	r7, #24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b085      	sub	sp, #20
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	4613      	mov	r3, r2
 80089b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	88fa      	ldrh	r2, [r7, #6]
 80089c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	88fa      	ldrh	r2, [r7, #6]
 80089c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2222      	movs	r2, #34	@ 0x22
 80089d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d007      	beq.n	80089f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	695a      	ldr	r2, [r3, #20]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0201 	orr.w	r2, r2, #1
 80089fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68da      	ldr	r2, [r3, #12]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0220 	orr.w	r2, r2, #32
 8008a0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b095      	sub	sp, #84	@ 0x54
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	330c      	adds	r3, #12
 8008a44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a46:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e5      	bne.n	8008a26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3314      	adds	r3, #20
 8008a78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e5      	bne.n	8008a5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d119      	bne.n	8008aca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	330c      	adds	r3, #12
 8008a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f023 0310 	bic.w	r3, r3, #16
 8008aac:	647b      	str	r3, [r7, #68]	@ 0x44
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	330c      	adds	r3, #12
 8008ab4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ab6:	61ba      	str	r2, [r7, #24]
 8008ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aba:	6979      	ldr	r1, [r7, #20]
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e5      	bne.n	8008a96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2220      	movs	r2, #32
 8008ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008ad8:	bf00      	nop
 8008ada:	3754      	adds	r7, #84	@ 0x54
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7ff fee7 	bl	80088cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008afe:	bf00      	nop
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b085      	sub	sp, #20
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b21      	cmp	r3, #33	@ 0x21
 8008b18:	d13e      	bne.n	8008b98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b22:	d114      	bne.n	8008b4e <UART_Transmit_IT+0x48>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d110      	bne.n	8008b4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	1c9a      	adds	r2, r3, #2
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	621a      	str	r2, [r3, #32]
 8008b4c:	e008      	b.n	8008b60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	1c59      	adds	r1, r3, #1
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	6211      	str	r1, [r2, #32]
 8008b58:	781a      	ldrb	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	3b01      	subs	r3, #1
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10f      	bne.n	8008b94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68da      	ldr	r2, [r3, #12]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	e000      	b.n	8008b9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b98:	2302      	movs	r3, #2
  }
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2220      	movs	r2, #32
 8008bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7ff fe76 	bl	80088b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b08c      	sub	sp, #48	@ 0x30
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b22      	cmp	r3, #34	@ 0x22
 8008bf0:	f040 80aa 	bne.w	8008d48 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bfc:	d115      	bne.n	8008c2a <UART_Receive_IT+0x54>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d111      	bne.n	8008c2a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c22:	1c9a      	adds	r2, r3, #2
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c28:	e024      	b.n	8008c74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c38:	d007      	beq.n	8008c4a <UART_Receive_IT+0x74>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10a      	bne.n	8008c58 <UART_Receive_IT+0x82>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d106      	bne.n	8008c58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c54:	701a      	strb	r2, [r3, #0]
 8008c56:	e008      	b.n	8008c6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c6e:	1c5a      	adds	r2, r3, #1
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	4619      	mov	r1, r3
 8008c82:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d15d      	bne.n	8008d44 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68da      	ldr	r2, [r3, #12]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f022 0220 	bic.w	r2, r2, #32
 8008c96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ca6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	695a      	ldr	r2, [r3, #20]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f022 0201 	bic.w	r2, r2, #1
 8008cb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2220      	movs	r2, #32
 8008cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d135      	bne.n	8008d3a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	330c      	adds	r3, #12
 8008cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	e853 3f00 	ldrex	r3, [r3]
 8008ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f023 0310 	bic.w	r3, r3, #16
 8008cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	330c      	adds	r3, #12
 8008cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cf4:	623a      	str	r2, [r7, #32]
 8008cf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf8:	69f9      	ldr	r1, [r7, #28]
 8008cfa:	6a3a      	ldr	r2, [r7, #32]
 8008cfc:	e841 2300 	strex	r3, r2, [r1]
 8008d00:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e5      	bne.n	8008cd4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0310 	and.w	r3, r3, #16
 8008d12:	2b10      	cmp	r3, #16
 8008d14:	d10a      	bne.n	8008d2c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	60fb      	str	r3, [r7, #12]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7ff fdd4 	bl	80088e0 <HAL_UARTEx_RxEventCallback>
 8008d38:	e002      	b.n	8008d40 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7f9 fb6e 	bl	800241c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	e002      	b.n	8008d4a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	e000      	b.n	8008d4a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008d48:	2302      	movs	r3, #2
  }
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3730      	adds	r7, #48	@ 0x30
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
	...

08008d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d58:	b0c0      	sub	sp, #256	@ 0x100
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d70:	68d9      	ldr	r1, [r3, #12]
 8008d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	ea40 0301 	orr.w	r3, r0, r1
 8008d7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	431a      	orrs	r2, r3
 8008d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008dac:	f021 010c 	bic.w	r1, r1, #12
 8008db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008dba:	430b      	orrs	r3, r1
 8008dbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dce:	6999      	ldr	r1, [r3, #24]
 8008dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	ea40 0301 	orr.w	r3, r0, r1
 8008dda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	4b8f      	ldr	r3, [pc, #572]	@ (8009020 <UART_SetConfig+0x2cc>)
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d005      	beq.n	8008df4 <UART_SetConfig+0xa0>
 8008de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	4b8d      	ldr	r3, [pc, #564]	@ (8009024 <UART_SetConfig+0x2d0>)
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d104      	bne.n	8008dfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008df4:	f7fe f896 	bl	8006f24 <HAL_RCC_GetPCLK2Freq>
 8008df8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008dfc:	e003      	b.n	8008e06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dfe:	f7fe f87d 	bl	8006efc <HAL_RCC_GetPCLK1Freq>
 8008e02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e10:	f040 810c 	bne.w	800902c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008e22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008e26:	4622      	mov	r2, r4
 8008e28:	462b      	mov	r3, r5
 8008e2a:	1891      	adds	r1, r2, r2
 8008e2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008e2e:	415b      	adcs	r3, r3
 8008e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008e36:	4621      	mov	r1, r4
 8008e38:	eb12 0801 	adds.w	r8, r2, r1
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	eb43 0901 	adc.w	r9, r3, r1
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	f04f 0300 	mov.w	r3, #0
 8008e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e56:	4690      	mov	r8, r2
 8008e58:	4699      	mov	r9, r3
 8008e5a:	4623      	mov	r3, r4
 8008e5c:	eb18 0303 	adds.w	r3, r8, r3
 8008e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e64:	462b      	mov	r3, r5
 8008e66:	eb49 0303 	adc.w	r3, r9, r3
 8008e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008e7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e82:	460b      	mov	r3, r1
 8008e84:	18db      	adds	r3, r3, r3
 8008e86:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e88:	4613      	mov	r3, r2
 8008e8a:	eb42 0303 	adc.w	r3, r2, r3
 8008e8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008e94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008e98:	f7f7 ff06 	bl	8000ca8 <__aeabi_uldivmod>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4b61      	ldr	r3, [pc, #388]	@ (8009028 <UART_SetConfig+0x2d4>)
 8008ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ea6:	095b      	lsrs	r3, r3, #5
 8008ea8:	011c      	lsls	r4, r3, #4
 8008eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008eb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008eb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008ebc:	4642      	mov	r2, r8
 8008ebe:	464b      	mov	r3, r9
 8008ec0:	1891      	adds	r1, r2, r2
 8008ec2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008ec4:	415b      	adcs	r3, r3
 8008ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ec8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008ecc:	4641      	mov	r1, r8
 8008ece:	eb12 0a01 	adds.w	sl, r2, r1
 8008ed2:	4649      	mov	r1, r9
 8008ed4:	eb43 0b01 	adc.w	fp, r3, r1
 8008ed8:	f04f 0200 	mov.w	r2, #0
 8008edc:	f04f 0300 	mov.w	r3, #0
 8008ee0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ee4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ee8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008eec:	4692      	mov	sl, r2
 8008eee:	469b      	mov	fp, r3
 8008ef0:	4643      	mov	r3, r8
 8008ef2:	eb1a 0303 	adds.w	r3, sl, r3
 8008ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008efa:	464b      	mov	r3, r9
 8008efc:	eb4b 0303 	adc.w	r3, fp, r3
 8008f00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008f14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	18db      	adds	r3, r3, r3
 8008f1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f1e:	4613      	mov	r3, r2
 8008f20:	eb42 0303 	adc.w	r3, r2, r3
 8008f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008f2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008f2e:	f7f7 febb 	bl	8000ca8 <__aeabi_uldivmod>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	4611      	mov	r1, r2
 8008f38:	4b3b      	ldr	r3, [pc, #236]	@ (8009028 <UART_SetConfig+0x2d4>)
 8008f3a:	fba3 2301 	umull	r2, r3, r3, r1
 8008f3e:	095b      	lsrs	r3, r3, #5
 8008f40:	2264      	movs	r2, #100	@ 0x64
 8008f42:	fb02 f303 	mul.w	r3, r2, r3
 8008f46:	1acb      	subs	r3, r1, r3
 8008f48:	00db      	lsls	r3, r3, #3
 8008f4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008f4e:	4b36      	ldr	r3, [pc, #216]	@ (8009028 <UART_SetConfig+0x2d4>)
 8008f50:	fba3 2302 	umull	r2, r3, r3, r2
 8008f54:	095b      	lsrs	r3, r3, #5
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008f5c:	441c      	add	r4, r3
 8008f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f62:	2200      	movs	r2, #0
 8008f64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008f6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008f70:	4642      	mov	r2, r8
 8008f72:	464b      	mov	r3, r9
 8008f74:	1891      	adds	r1, r2, r2
 8008f76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008f78:	415b      	adcs	r3, r3
 8008f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008f80:	4641      	mov	r1, r8
 8008f82:	1851      	adds	r1, r2, r1
 8008f84:	6339      	str	r1, [r7, #48]	@ 0x30
 8008f86:	4649      	mov	r1, r9
 8008f88:	414b      	adcs	r3, r1
 8008f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f8c:	f04f 0200 	mov.w	r2, #0
 8008f90:	f04f 0300 	mov.w	r3, #0
 8008f94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008f98:	4659      	mov	r1, fp
 8008f9a:	00cb      	lsls	r3, r1, #3
 8008f9c:	4651      	mov	r1, sl
 8008f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fa2:	4651      	mov	r1, sl
 8008fa4:	00ca      	lsls	r2, r1, #3
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4603      	mov	r3, r0
 8008fac:	4642      	mov	r2, r8
 8008fae:	189b      	adds	r3, r3, r2
 8008fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fb4:	464b      	mov	r3, r9
 8008fb6:	460a      	mov	r2, r1
 8008fb8:	eb42 0303 	adc.w	r3, r2, r3
 8008fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008fcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008fd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	18db      	adds	r3, r3, r3
 8008fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fda:	4613      	mov	r3, r2
 8008fdc:	eb42 0303 	adc.w	r3, r2, r3
 8008fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008fe6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008fea:	f7f7 fe5d 	bl	8000ca8 <__aeabi_uldivmod>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8009028 <UART_SetConfig+0x2d4>)
 8008ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ff8:	095b      	lsrs	r3, r3, #5
 8008ffa:	2164      	movs	r1, #100	@ 0x64
 8008ffc:	fb01 f303 	mul.w	r3, r1, r3
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	3332      	adds	r3, #50	@ 0x32
 8009006:	4a08      	ldr	r2, [pc, #32]	@ (8009028 <UART_SetConfig+0x2d4>)
 8009008:	fba2 2303 	umull	r2, r3, r2, r3
 800900c:	095b      	lsrs	r3, r3, #5
 800900e:	f003 0207 	and.w	r2, r3, #7
 8009012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4422      	add	r2, r4
 800901a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800901c:	e106      	b.n	800922c <UART_SetConfig+0x4d8>
 800901e:	bf00      	nop
 8009020:	40011000 	.word	0x40011000
 8009024:	40011400 	.word	0x40011400
 8009028:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800902c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009030:	2200      	movs	r2, #0
 8009032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009036:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800903a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800903e:	4642      	mov	r2, r8
 8009040:	464b      	mov	r3, r9
 8009042:	1891      	adds	r1, r2, r2
 8009044:	6239      	str	r1, [r7, #32]
 8009046:	415b      	adcs	r3, r3
 8009048:	627b      	str	r3, [r7, #36]	@ 0x24
 800904a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800904e:	4641      	mov	r1, r8
 8009050:	1854      	adds	r4, r2, r1
 8009052:	4649      	mov	r1, r9
 8009054:	eb43 0501 	adc.w	r5, r3, r1
 8009058:	f04f 0200 	mov.w	r2, #0
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	00eb      	lsls	r3, r5, #3
 8009062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009066:	00e2      	lsls	r2, r4, #3
 8009068:	4614      	mov	r4, r2
 800906a:	461d      	mov	r5, r3
 800906c:	4643      	mov	r3, r8
 800906e:	18e3      	adds	r3, r4, r3
 8009070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009074:	464b      	mov	r3, r9
 8009076:	eb45 0303 	adc.w	r3, r5, r3
 800907a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800907e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800908a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800908e:	f04f 0200 	mov.w	r2, #0
 8009092:	f04f 0300 	mov.w	r3, #0
 8009096:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800909a:	4629      	mov	r1, r5
 800909c:	008b      	lsls	r3, r1, #2
 800909e:	4621      	mov	r1, r4
 80090a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090a4:	4621      	mov	r1, r4
 80090a6:	008a      	lsls	r2, r1, #2
 80090a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80090ac:	f7f7 fdfc 	bl	8000ca8 <__aeabi_uldivmod>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	4b60      	ldr	r3, [pc, #384]	@ (8009238 <UART_SetConfig+0x4e4>)
 80090b6:	fba3 2302 	umull	r2, r3, r3, r2
 80090ba:	095b      	lsrs	r3, r3, #5
 80090bc:	011c      	lsls	r4, r3, #4
 80090be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090c2:	2200      	movs	r2, #0
 80090c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80090cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80090d0:	4642      	mov	r2, r8
 80090d2:	464b      	mov	r3, r9
 80090d4:	1891      	adds	r1, r2, r2
 80090d6:	61b9      	str	r1, [r7, #24]
 80090d8:	415b      	adcs	r3, r3
 80090da:	61fb      	str	r3, [r7, #28]
 80090dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090e0:	4641      	mov	r1, r8
 80090e2:	1851      	adds	r1, r2, r1
 80090e4:	6139      	str	r1, [r7, #16]
 80090e6:	4649      	mov	r1, r9
 80090e8:	414b      	adcs	r3, r1
 80090ea:	617b      	str	r3, [r7, #20]
 80090ec:	f04f 0200 	mov.w	r2, #0
 80090f0:	f04f 0300 	mov.w	r3, #0
 80090f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090f8:	4659      	mov	r1, fp
 80090fa:	00cb      	lsls	r3, r1, #3
 80090fc:	4651      	mov	r1, sl
 80090fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009102:	4651      	mov	r1, sl
 8009104:	00ca      	lsls	r2, r1, #3
 8009106:	4610      	mov	r0, r2
 8009108:	4619      	mov	r1, r3
 800910a:	4603      	mov	r3, r0
 800910c:	4642      	mov	r2, r8
 800910e:	189b      	adds	r3, r3, r2
 8009110:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009114:	464b      	mov	r3, r9
 8009116:	460a      	mov	r2, r1
 8009118:	eb42 0303 	adc.w	r3, r2, r3
 800911c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	67bb      	str	r3, [r7, #120]	@ 0x78
 800912a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800912c:	f04f 0200 	mov.w	r2, #0
 8009130:	f04f 0300 	mov.w	r3, #0
 8009134:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009138:	4649      	mov	r1, r9
 800913a:	008b      	lsls	r3, r1, #2
 800913c:	4641      	mov	r1, r8
 800913e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009142:	4641      	mov	r1, r8
 8009144:	008a      	lsls	r2, r1, #2
 8009146:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800914a:	f7f7 fdad 	bl	8000ca8 <__aeabi_uldivmod>
 800914e:	4602      	mov	r2, r0
 8009150:	460b      	mov	r3, r1
 8009152:	4611      	mov	r1, r2
 8009154:	4b38      	ldr	r3, [pc, #224]	@ (8009238 <UART_SetConfig+0x4e4>)
 8009156:	fba3 2301 	umull	r2, r3, r3, r1
 800915a:	095b      	lsrs	r3, r3, #5
 800915c:	2264      	movs	r2, #100	@ 0x64
 800915e:	fb02 f303 	mul.w	r3, r2, r3
 8009162:	1acb      	subs	r3, r1, r3
 8009164:	011b      	lsls	r3, r3, #4
 8009166:	3332      	adds	r3, #50	@ 0x32
 8009168:	4a33      	ldr	r2, [pc, #204]	@ (8009238 <UART_SetConfig+0x4e4>)
 800916a:	fba2 2303 	umull	r2, r3, r2, r3
 800916e:	095b      	lsrs	r3, r3, #5
 8009170:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009174:	441c      	add	r4, r3
 8009176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800917a:	2200      	movs	r2, #0
 800917c:	673b      	str	r3, [r7, #112]	@ 0x70
 800917e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009180:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009184:	4642      	mov	r2, r8
 8009186:	464b      	mov	r3, r9
 8009188:	1891      	adds	r1, r2, r2
 800918a:	60b9      	str	r1, [r7, #8]
 800918c:	415b      	adcs	r3, r3
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009194:	4641      	mov	r1, r8
 8009196:	1851      	adds	r1, r2, r1
 8009198:	6039      	str	r1, [r7, #0]
 800919a:	4649      	mov	r1, r9
 800919c:	414b      	adcs	r3, r1
 800919e:	607b      	str	r3, [r7, #4]
 80091a0:	f04f 0200 	mov.w	r2, #0
 80091a4:	f04f 0300 	mov.w	r3, #0
 80091a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091ac:	4659      	mov	r1, fp
 80091ae:	00cb      	lsls	r3, r1, #3
 80091b0:	4651      	mov	r1, sl
 80091b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091b6:	4651      	mov	r1, sl
 80091b8:	00ca      	lsls	r2, r1, #3
 80091ba:	4610      	mov	r0, r2
 80091bc:	4619      	mov	r1, r3
 80091be:	4603      	mov	r3, r0
 80091c0:	4642      	mov	r2, r8
 80091c2:	189b      	adds	r3, r3, r2
 80091c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091c6:	464b      	mov	r3, r9
 80091c8:	460a      	mov	r2, r1
 80091ca:	eb42 0303 	adc.w	r3, r2, r3
 80091ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80091da:	667a      	str	r2, [r7, #100]	@ 0x64
 80091dc:	f04f 0200 	mov.w	r2, #0
 80091e0:	f04f 0300 	mov.w	r3, #0
 80091e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80091e8:	4649      	mov	r1, r9
 80091ea:	008b      	lsls	r3, r1, #2
 80091ec:	4641      	mov	r1, r8
 80091ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091f2:	4641      	mov	r1, r8
 80091f4:	008a      	lsls	r2, r1, #2
 80091f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80091fa:	f7f7 fd55 	bl	8000ca8 <__aeabi_uldivmod>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	4b0d      	ldr	r3, [pc, #52]	@ (8009238 <UART_SetConfig+0x4e4>)
 8009204:	fba3 1302 	umull	r1, r3, r3, r2
 8009208:	095b      	lsrs	r3, r3, #5
 800920a:	2164      	movs	r1, #100	@ 0x64
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	011b      	lsls	r3, r3, #4
 8009214:	3332      	adds	r3, #50	@ 0x32
 8009216:	4a08      	ldr	r2, [pc, #32]	@ (8009238 <UART_SetConfig+0x4e4>)
 8009218:	fba2 2303 	umull	r2, r3, r2, r3
 800921c:	095b      	lsrs	r3, r3, #5
 800921e:	f003 020f 	and.w	r2, r3, #15
 8009222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4422      	add	r2, r4
 800922a:	609a      	str	r2, [r3, #8]
}
 800922c:	bf00      	nop
 800922e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009232:	46bd      	mov	sp, r7
 8009234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009238:	51eb851f 	.word	0x51eb851f

0800923c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 800923c:	b480      	push	{r7}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	6812      	ldr	r2, [r2, #0]
 8009254:	f023 0101 	bic.w	r1, r3, #1
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	2b08      	cmp	r3, #8
 8009264:	d102      	bne.n	800926c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009266:	2340      	movs	r3, #64	@ 0x40
 8009268:	617b      	str	r3, [r7, #20]
 800926a:	e001      	b.n	8009270 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800926c:	2300      	movs	r3, #0
 800926e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800927c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009282:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009288:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800928e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009294:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800929a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80092a0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80092a6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80092ac:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80092b2:	4313      	orrs	r3, r2
 80092b4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	4313      	orrs	r3, r2
 80092be:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80092ca:	4b10      	ldr	r3, [pc, #64]	@ (800930c <FSMC_NORSRAM_Init+0xd0>)
 80092cc:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80092d4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80092dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	43db      	mvns	r3, r3
 80092ec:	ea02 0103 	and.w	r1, r2, r3
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	4319      	orrs	r1, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	371c      	adds	r7, #28
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	0008fb7f 	.word	0x0008fb7f

08009310 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8009326:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800932e:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8009336:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	3b01      	subs	r3, #1
 800933e:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8009340:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	3b02      	subs	r3, #2
 8009348:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 800934a:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8009356:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009380:	d11d      	bne.n	80093be <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800938a:	4b13      	ldr	r3, [pc, #76]	@ (80093d8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800938c:	4013      	ands	r3, r2
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	6811      	ldr	r1, [r2, #0]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	6852      	ldr	r2, [r2, #4]
 8009396:	0112      	lsls	r2, r2, #4
 8009398:	4311      	orrs	r1, r2
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	6892      	ldr	r2, [r2, #8]
 800939e:	0212      	lsls	r2, r2, #8
 80093a0:	4311      	orrs	r1, r2
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	6992      	ldr	r2, [r2, #24]
 80093a6:	4311      	orrs	r1, r2
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	68d2      	ldr	r2, [r2, #12]
 80093ac:	0412      	lsls	r2, r2, #16
 80093ae:	430a      	orrs	r2, r1
 80093b0:	ea43 0102 	orr.w	r1, r3, r2
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80093bc:	e005      	b.n	80093ca <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80093c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	cff00000 	.word	0xcff00000

080093dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093dc:	b084      	sub	sp, #16
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	f107 001c 	add.w	r0, r7, #28
 80093ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d123      	bne.n	800943e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800940a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800941e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009422:	2b01      	cmp	r3, #1
 8009424:	d105      	bne.n	8009432 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f001 fae8 	bl	800aa08 <USB_CoreReset>
 8009438:	4603      	mov	r3, r0
 800943a:	73fb      	strb	r3, [r7, #15]
 800943c:	e01b      	b.n	8009476 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f001 fadc 	bl	800aa08 <USB_CoreReset>
 8009450:	4603      	mov	r3, r0
 8009452:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009454:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009458:	2b00      	cmp	r3, #0
 800945a:	d106      	bne.n	800946a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009460:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	639a      	str	r2, [r3, #56]	@ 0x38
 8009468:	e005      	b.n	8009476 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009476:	7fbb      	ldrb	r3, [r7, #30]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d10b      	bne.n	8009494 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f043 0206 	orr.w	r2, r3, #6
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f043 0220 	orr.w	r2, r3, #32
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094a0:	b004      	add	sp, #16
 80094a2:	4770      	bx	lr

080094a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	4613      	mov	r3, r2
 80094b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80094b2:	79fb      	ldrb	r3, [r7, #7]
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d165      	bne.n	8009584 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	4a41      	ldr	r2, [pc, #260]	@ (80095c0 <USB_SetTurnaroundTime+0x11c>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d906      	bls.n	80094ce <USB_SetTurnaroundTime+0x2a>
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	4a40      	ldr	r2, [pc, #256]	@ (80095c4 <USB_SetTurnaroundTime+0x120>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d202      	bcs.n	80094ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80094c8:	230f      	movs	r3, #15
 80094ca:	617b      	str	r3, [r7, #20]
 80094cc:	e062      	b.n	8009594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	4a3c      	ldr	r2, [pc, #240]	@ (80095c4 <USB_SetTurnaroundTime+0x120>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d306      	bcc.n	80094e4 <USB_SetTurnaroundTime+0x40>
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	4a3b      	ldr	r2, [pc, #236]	@ (80095c8 <USB_SetTurnaroundTime+0x124>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d202      	bcs.n	80094e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80094de:	230e      	movs	r3, #14
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	e057      	b.n	8009594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	4a38      	ldr	r2, [pc, #224]	@ (80095c8 <USB_SetTurnaroundTime+0x124>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d306      	bcc.n	80094fa <USB_SetTurnaroundTime+0x56>
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	4a37      	ldr	r2, [pc, #220]	@ (80095cc <USB_SetTurnaroundTime+0x128>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d202      	bcs.n	80094fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80094f4:	230d      	movs	r3, #13
 80094f6:	617b      	str	r3, [r7, #20]
 80094f8:	e04c      	b.n	8009594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	4a33      	ldr	r2, [pc, #204]	@ (80095cc <USB_SetTurnaroundTime+0x128>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d306      	bcc.n	8009510 <USB_SetTurnaroundTime+0x6c>
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	4a32      	ldr	r2, [pc, #200]	@ (80095d0 <USB_SetTurnaroundTime+0x12c>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d802      	bhi.n	8009510 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800950a:	230c      	movs	r3, #12
 800950c:	617b      	str	r3, [r7, #20]
 800950e:	e041      	b.n	8009594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	4a2f      	ldr	r2, [pc, #188]	@ (80095d0 <USB_SetTurnaroundTime+0x12c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d906      	bls.n	8009526 <USB_SetTurnaroundTime+0x82>
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	4a2e      	ldr	r2, [pc, #184]	@ (80095d4 <USB_SetTurnaroundTime+0x130>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d802      	bhi.n	8009526 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009520:	230b      	movs	r3, #11
 8009522:	617b      	str	r3, [r7, #20]
 8009524:	e036      	b.n	8009594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	4a2a      	ldr	r2, [pc, #168]	@ (80095d4 <USB_SetTurnaroundTime+0x130>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d906      	bls.n	800953c <USB_SetTurnaroundTime+0x98>
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	4a29      	ldr	r2, [pc, #164]	@ (80095d8 <USB_SetTurnaroundTime+0x134>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d802      	bhi.n	800953c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009536:	230a      	movs	r3, #10
 8009538:	617b      	str	r3, [r7, #20]
 800953a:	e02b      	b.n	8009594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	4a26      	ldr	r2, [pc, #152]	@ (80095d8 <USB_SetTurnaroundTime+0x134>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d906      	bls.n	8009552 <USB_SetTurnaroundTime+0xae>
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	4a25      	ldr	r2, [pc, #148]	@ (80095dc <USB_SetTurnaroundTime+0x138>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d202      	bcs.n	8009552 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800954c:	2309      	movs	r3, #9
 800954e:	617b      	str	r3, [r7, #20]
 8009550:	e020      	b.n	8009594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	4a21      	ldr	r2, [pc, #132]	@ (80095dc <USB_SetTurnaroundTime+0x138>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d306      	bcc.n	8009568 <USB_SetTurnaroundTime+0xc4>
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	4a20      	ldr	r2, [pc, #128]	@ (80095e0 <USB_SetTurnaroundTime+0x13c>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d802      	bhi.n	8009568 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009562:	2308      	movs	r3, #8
 8009564:	617b      	str	r3, [r7, #20]
 8009566:	e015      	b.n	8009594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	4a1d      	ldr	r2, [pc, #116]	@ (80095e0 <USB_SetTurnaroundTime+0x13c>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d906      	bls.n	800957e <USB_SetTurnaroundTime+0xda>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	4a1c      	ldr	r2, [pc, #112]	@ (80095e4 <USB_SetTurnaroundTime+0x140>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d202      	bcs.n	800957e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009578:	2307      	movs	r3, #7
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	e00a      	b.n	8009594 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800957e:	2306      	movs	r3, #6
 8009580:	617b      	str	r3, [r7, #20]
 8009582:	e007      	b.n	8009594 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009584:	79fb      	ldrb	r3, [r7, #7]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d102      	bne.n	8009590 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800958a:	2309      	movs	r3, #9
 800958c:	617b      	str	r3, [r7, #20]
 800958e:	e001      	b.n	8009594 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009590:	2309      	movs	r3, #9
 8009592:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	68da      	ldr	r2, [r3, #12]
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	029b      	lsls	r3, r3, #10
 80095a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80095ac:	431a      	orrs	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	371c      	adds	r7, #28
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	00d8acbf 	.word	0x00d8acbf
 80095c4:	00e4e1c0 	.word	0x00e4e1c0
 80095c8:	00f42400 	.word	0x00f42400
 80095cc:	01067380 	.word	0x01067380
 80095d0:	011a499f 	.word	0x011a499f
 80095d4:	01312cff 	.word	0x01312cff
 80095d8:	014ca43f 	.word	0x014ca43f
 80095dc:	016e3600 	.word	0x016e3600
 80095e0:	01a6ab1f 	.word	0x01a6ab1f
 80095e4:	01e84800 	.word	0x01e84800

080095e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f043 0201 	orr.w	r2, r3, #1
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800960a:	b480      	push	{r7}
 800960c:	b083      	sub	sp, #12
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f023 0201 	bic.w	r2, r3, #1
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	460b      	mov	r3, r1
 8009636:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009648:	78fb      	ldrb	r3, [r7, #3]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d115      	bne.n	800967a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800965a:	200a      	movs	r0, #10
 800965c:	f7fa fefe 	bl	800445c <HAL_Delay>
      ms += 10U;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	330a      	adds	r3, #10
 8009664:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f001 f93f 	bl	800a8ea <USB_GetMode>
 800966c:	4603      	mov	r3, r0
 800966e:	2b01      	cmp	r3, #1
 8009670:	d01e      	beq.n	80096b0 <USB_SetCurrentMode+0x84>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2bc7      	cmp	r3, #199	@ 0xc7
 8009676:	d9f0      	bls.n	800965a <USB_SetCurrentMode+0x2e>
 8009678:	e01a      	b.n	80096b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800967a:	78fb      	ldrb	r3, [r7, #3]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d115      	bne.n	80096ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800968c:	200a      	movs	r0, #10
 800968e:	f7fa fee5 	bl	800445c <HAL_Delay>
      ms += 10U;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	330a      	adds	r3, #10
 8009696:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f001 f926 	bl	800a8ea <USB_GetMode>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d005      	beq.n	80096b0 <USB_SetCurrentMode+0x84>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80096a8:	d9f0      	bls.n	800968c <USB_SetCurrentMode+0x60>
 80096aa:	e001      	b.n	80096b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e005      	b.n	80096bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80096b4:	d101      	bne.n	80096ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e000      	b.n	80096bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096c4:	b084      	sub	sp, #16
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b086      	sub	sp, #24
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80096d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80096de:	2300      	movs	r3, #0
 80096e0:	613b      	str	r3, [r7, #16]
 80096e2:	e009      	b.n	80096f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	3340      	adds	r3, #64	@ 0x40
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	2200      	movs	r2, #0
 80096f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	3301      	adds	r3, #1
 80096f6:	613b      	str	r3, [r7, #16]
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	2b0e      	cmp	r3, #14
 80096fc:	d9f2      	bls.n	80096e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80096fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009702:	2b00      	cmp	r3, #0
 8009704:	d11c      	bne.n	8009740 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009714:	f043 0302 	orr.w	r3, r3, #2
 8009718:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800972a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009736:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	639a      	str	r2, [r3, #56]	@ 0x38
 800973e:	e00b      	b.n	8009758 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009744:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009750:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800975e:	461a      	mov	r2, r3
 8009760:	2300      	movs	r3, #0
 8009762:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009764:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009768:	2b01      	cmp	r3, #1
 800976a:	d10d      	bne.n	8009788 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800976c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009770:	2b00      	cmp	r3, #0
 8009772:	d104      	bne.n	800977e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009774:	2100      	movs	r1, #0
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f968 	bl	8009a4c <USB_SetDevSpeed>
 800977c:	e008      	b.n	8009790 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800977e:	2101      	movs	r1, #1
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f963 	bl	8009a4c <USB_SetDevSpeed>
 8009786:	e003      	b.n	8009790 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009788:	2103      	movs	r1, #3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f95e 	bl	8009a4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009790:	2110      	movs	r1, #16
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f8fa 	bl	800998c <USB_FlushTxFifo>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f924 	bl	80099f0 <USB_FlushRxFifo>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097b8:	461a      	mov	r2, r3
 80097ba:	2300      	movs	r3, #0
 80097bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097c4:	461a      	mov	r2, r3
 80097c6:	2300      	movs	r3, #0
 80097c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097d0:	461a      	mov	r2, r3
 80097d2:	2300      	movs	r3, #0
 80097d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097d6:	2300      	movs	r3, #0
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	e043      	b.n	8009864 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097f2:	d118      	bne.n	8009826 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10a      	bne.n	8009810 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009806:	461a      	mov	r2, r3
 8009808:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	e013      	b.n	8009838 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800981c:	461a      	mov	r2, r3
 800981e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	e008      	b.n	8009838 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009832:	461a      	mov	r2, r3
 8009834:	2300      	movs	r3, #0
 8009836:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009844:	461a      	mov	r2, r3
 8009846:	2300      	movs	r3, #0
 8009848:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009856:	461a      	mov	r2, r3
 8009858:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800985c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	3301      	adds	r3, #1
 8009862:	613b      	str	r3, [r7, #16]
 8009864:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009868:	461a      	mov	r2, r3
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	4293      	cmp	r3, r2
 800986e:	d3b5      	bcc.n	80097dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009870:	2300      	movs	r3, #0
 8009872:	613b      	str	r3, [r7, #16]
 8009874:	e043      	b.n	80098fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4413      	add	r3, r2
 800987e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009888:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800988c:	d118      	bne.n	80098c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10a      	bne.n	80098aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	4413      	add	r3, r2
 800989c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a0:	461a      	mov	r2, r3
 80098a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	e013      	b.n	80098d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	015a      	lsls	r2, r3, #5
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	4413      	add	r3, r2
 80098b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098b6:	461a      	mov	r2, r3
 80098b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	e008      	b.n	80098d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098cc:	461a      	mov	r2, r3
 80098ce:	2300      	movs	r3, #0
 80098d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098de:	461a      	mov	r2, r3
 80098e0:	2300      	movs	r3, #0
 80098e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	015a      	lsls	r2, r3, #5
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4413      	add	r3, r2
 80098ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098f0:	461a      	mov	r2, r3
 80098f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80098f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	3301      	adds	r3, #1
 80098fc:	613b      	str	r3, [r7, #16]
 80098fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009902:	461a      	mov	r2, r3
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	4293      	cmp	r3, r2
 8009908:	d3b5      	bcc.n	8009876 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800991c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800992a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800992c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009930:	2b00      	cmp	r3, #0
 8009932:	d105      	bne.n	8009940 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	f043 0210 	orr.w	r2, r3, #16
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	699a      	ldr	r2, [r3, #24]
 8009944:	4b10      	ldr	r3, [pc, #64]	@ (8009988 <USB_DevInit+0x2c4>)
 8009946:	4313      	orrs	r3, r2
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800994c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009950:	2b00      	cmp	r3, #0
 8009952:	d005      	beq.n	8009960 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	f043 0208 	orr.w	r2, r3, #8
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009960:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009964:	2b01      	cmp	r3, #1
 8009966:	d107      	bne.n	8009978 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009970:	f043 0304 	orr.w	r3, r3, #4
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009978:	7dfb      	ldrb	r3, [r7, #23]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009984:	b004      	add	sp, #16
 8009986:	4770      	bx	lr
 8009988:	803c3800 	.word	0x803c3800

0800998c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3301      	adds	r3, #1
 800999e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099a6:	d901      	bls.n	80099ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e01b      	b.n	80099e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	daf2      	bge.n	800999a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80099b4:	2300      	movs	r3, #0
 80099b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	019b      	lsls	r3, r3, #6
 80099bc:	f043 0220 	orr.w	r2, r3, #32
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	3301      	adds	r3, #1
 80099c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099d0:	d901      	bls.n	80099d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e006      	b.n	80099e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	f003 0320 	and.w	r3, r3, #32
 80099de:	2b20      	cmp	r3, #32
 80099e0:	d0f0      	beq.n	80099c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099f8:	2300      	movs	r3, #0
 80099fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3301      	adds	r3, #1
 8009a00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a08:	d901      	bls.n	8009a0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e018      	b.n	8009a40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	daf2      	bge.n	80099fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a16:	2300      	movs	r3, #0
 8009a18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2210      	movs	r2, #16
 8009a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	3301      	adds	r3, #1
 8009a24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a2c:	d901      	bls.n	8009a32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e006      	b.n	8009a40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	f003 0310 	and.w	r3, r3, #16
 8009a3a:	2b10      	cmp	r3, #16
 8009a3c:	d0f0      	beq.n	8009a20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	68f9      	ldr	r1, [r7, #12]
 8009a68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b087      	sub	sp, #28
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	f003 0306 	and.w	r3, r3, #6
 8009a96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d102      	bne.n	8009aa4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	75fb      	strb	r3, [r7, #23]
 8009aa2:	e00a      	b.n	8009aba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d002      	beq.n	8009ab0 <USB_GetDevSpeed+0x32>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b06      	cmp	r3, #6
 8009aae:	d102      	bne.n	8009ab6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	75fb      	strb	r3, [r7, #23]
 8009ab4:	e001      	b.n	8009aba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009ab6:	230f      	movs	r3, #15
 8009ab8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	371c      	adds	r7, #28
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	785b      	ldrb	r3, [r3, #1]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d13a      	bne.n	8009b5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aea:	69da      	ldr	r2, [r3, #28]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	f003 030f 	and.w	r3, r3, #15
 8009af4:	2101      	movs	r1, #1
 8009af6:	fa01 f303 	lsl.w	r3, r1, r3
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	68f9      	ldr	r1, [r7, #12]
 8009afe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b02:	4313      	orrs	r3, r2
 8009b04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d155      	bne.n	8009bc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	791b      	ldrb	r3, [r3, #4]
 8009b36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	059b      	lsls	r3, r3, #22
 8009b3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b40:	4313      	orrs	r3, r2
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	0151      	lsls	r1, r2, #5
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	440a      	add	r2, r1
 8009b4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b56:	6013      	str	r3, [r2, #0]
 8009b58:	e036      	b.n	8009bc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b60:	69da      	ldr	r2, [r3, #28]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	f003 030f 	and.w	r3, r3, #15
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b70:	041b      	lsls	r3, r3, #16
 8009b72:	68f9      	ldr	r1, [r7, #12]
 8009b74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	015a      	lsls	r2, r3, #5
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d11a      	bne.n	8009bc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	015a      	lsls	r2, r3, #5
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	4413      	add	r3, r2
 8009b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	791b      	ldrb	r3, [r3, #4]
 8009bac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009bae:	430b      	orrs	r3, r1
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	0151      	lsls	r1, r2, #5
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	440a      	add	r2, r1
 8009bba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
	...

08009bd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	785b      	ldrb	r3, [r3, #1]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d161      	bne.n	8009cb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c0a:	d11f      	bne.n	8009c4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	0151      	lsls	r1, r2, #5
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	440a      	add	r2, r1
 8009c22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	015a      	lsls	r2, r3, #5
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	4413      	add	r3, r2
 8009c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	0151      	lsls	r1, r2, #5
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	440a      	add	r2, r1
 8009c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	f003 030f 	and.w	r3, r3, #15
 8009c5c:	2101      	movs	r1, #1
 8009c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	43db      	mvns	r3, r3
 8009c66:	68f9      	ldr	r1, [r7, #12]
 8009c68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c76:	69da      	ldr	r2, [r3, #28]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	f003 030f 	and.w	r3, r3, #15
 8009c80:	2101      	movs	r1, #1
 8009c82:	fa01 f303 	lsl.w	r3, r1, r3
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	43db      	mvns	r3, r3
 8009c8a:	68f9      	ldr	r1, [r7, #12]
 8009c8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c90:	4013      	ands	r3, r2
 8009c92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	0159      	lsls	r1, r3, #5
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	440b      	add	r3, r1
 8009caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cae:	4619      	mov	r1, r3
 8009cb0:	4b35      	ldr	r3, [pc, #212]	@ (8009d88 <USB_DeactivateEndpoint+0x1b0>)
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	600b      	str	r3, [r1, #0]
 8009cb6:	e060      	b.n	8009d7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009cca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cce:	d11f      	bne.n	8009d10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	0151      	lsls	r1, r2, #5
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	440a      	add	r2, r1
 8009ce6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009cee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	0151      	lsls	r1, r2, #5
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	440a      	add	r2, r1
 8009d06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	f003 030f 	and.w	r3, r3, #15
 8009d20:	2101      	movs	r1, #1
 8009d22:	fa01 f303 	lsl.w	r3, r1, r3
 8009d26:	041b      	lsls	r3, r3, #16
 8009d28:	43db      	mvns	r3, r3
 8009d2a:	68f9      	ldr	r1, [r7, #12]
 8009d2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d30:	4013      	ands	r3, r2
 8009d32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d3a:	69da      	ldr	r2, [r3, #28]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	f003 030f 	and.w	r3, r3, #15
 8009d44:	2101      	movs	r1, #1
 8009d46:	fa01 f303 	lsl.w	r3, r1, r3
 8009d4a:	041b      	lsls	r3, r3, #16
 8009d4c:	43db      	mvns	r3, r3
 8009d4e:	68f9      	ldr	r1, [r7, #12]
 8009d50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d54:	4013      	ands	r3, r2
 8009d56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	0159      	lsls	r1, r3, #5
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	440b      	add	r3, r1
 8009d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d72:	4619      	mov	r1, r3
 8009d74:	4b05      	ldr	r3, [pc, #20]	@ (8009d8c <USB_DeactivateEndpoint+0x1b4>)
 8009d76:	4013      	ands	r3, r2
 8009d78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	ec337800 	.word	0xec337800
 8009d8c:	eff37800 	.word	0xeff37800

08009d90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08a      	sub	sp, #40	@ 0x28
 8009d94:	af02      	add	r7, sp, #8
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	785b      	ldrb	r3, [r3, #1]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	f040 817f 	bne.w	800a0b0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d132      	bne.n	8009e20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	015a      	lsls	r2, r3, #5
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	69ba      	ldr	r2, [r7, #24]
 8009dca:	0151      	lsls	r1, r2, #5
 8009dcc:	69fa      	ldr	r2, [r7, #28]
 8009dce:	440a      	add	r2, r1
 8009dd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dd4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009dd8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009ddc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	69ba      	ldr	r2, [r7, #24]
 8009dee:	0151      	lsls	r1, r2, #5
 8009df0:	69fa      	ldr	r2, [r7, #28]
 8009df2:	440a      	add	r2, r1
 8009df4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009df8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009dfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	69ba      	ldr	r2, [r7, #24]
 8009e0e:	0151      	lsls	r1, r2, #5
 8009e10:	69fa      	ldr	r2, [r7, #28]
 8009e12:	440a      	add	r2, r1
 8009e14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e18:	0cdb      	lsrs	r3, r3, #19
 8009e1a:	04db      	lsls	r3, r3, #19
 8009e1c:	6113      	str	r3, [r2, #16]
 8009e1e:	e097      	b.n	8009f50 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	69ba      	ldr	r2, [r7, #24]
 8009e30:	0151      	lsls	r1, r2, #5
 8009e32:	69fa      	ldr	r2, [r7, #28]
 8009e34:	440a      	add	r2, r1
 8009e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e3a:	0cdb      	lsrs	r3, r3, #19
 8009e3c:	04db      	lsls	r3, r3, #19
 8009e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	69ba      	ldr	r2, [r7, #24]
 8009e50:	0151      	lsls	r1, r2, #5
 8009e52:	69fa      	ldr	r2, [r7, #28]
 8009e54:	440a      	add	r2, r1
 8009e56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e62:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d11a      	bne.n	8009ea0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	691a      	ldr	r2, [r3, #16]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d903      	bls.n	8009e7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	689a      	ldr	r2, [r3, #8]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	015a      	lsls	r2, r3, #5
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	4413      	add	r3, r2
 8009e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	69ba      	ldr	r2, [r7, #24]
 8009e8e:	0151      	lsls	r1, r2, #5
 8009e90:	69fa      	ldr	r2, [r7, #28]
 8009e92:	440a      	add	r2, r1
 8009e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e9c:	6113      	str	r3, [r2, #16]
 8009e9e:	e044      	b.n	8009f2a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	691a      	ldr	r2, [r3, #16]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	1e5a      	subs	r2, r3, #1
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ec2:	691a      	ldr	r2, [r3, #16]
 8009ec4:	8afb      	ldrh	r3, [r7, #22]
 8009ec6:	04d9      	lsls	r1, r3, #19
 8009ec8:	4ba4      	ldr	r3, [pc, #656]	@ (800a15c <USB_EPStartXfer+0x3cc>)
 8009eca:	400b      	ands	r3, r1
 8009ecc:	69b9      	ldr	r1, [r7, #24]
 8009ece:	0148      	lsls	r0, r1, #5
 8009ed0:	69f9      	ldr	r1, [r7, #28]
 8009ed2:	4401      	add	r1, r0
 8009ed4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	791b      	ldrb	r3, [r3, #4]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d122      	bne.n	8009f2a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	015a      	lsls	r2, r3, #5
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	69ba      	ldr	r2, [r7, #24]
 8009ef4:	0151      	lsls	r1, r2, #5
 8009ef6:	69fa      	ldr	r2, [r7, #28]
 8009ef8:	440a      	add	r2, r1
 8009efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009efe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009f02:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f10:	691a      	ldr	r2, [r3, #16]
 8009f12:	8afb      	ldrh	r3, [r7, #22]
 8009f14:	075b      	lsls	r3, r3, #29
 8009f16:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009f1a:	69b9      	ldr	r1, [r7, #24]
 8009f1c:	0148      	lsls	r0, r1, #5
 8009f1e:	69f9      	ldr	r1, [r7, #28]
 8009f20:	4401      	add	r1, r0
 8009f22:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f26:	4313      	orrs	r3, r2
 8009f28:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f36:	691a      	ldr	r2, [r3, #16]
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f40:	69b9      	ldr	r1, [r7, #24]
 8009f42:	0148      	lsls	r0, r1, #5
 8009f44:	69f9      	ldr	r1, [r7, #28]
 8009f46:	4401      	add	r1, r0
 8009f48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f50:	79fb      	ldrb	r3, [r7, #7]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d14b      	bne.n	8009fee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	69db      	ldr	r3, [r3, #28]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d009      	beq.n	8009f72 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	015a      	lsls	r2, r3, #5
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	4413      	add	r3, r2
 8009f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	69db      	ldr	r3, [r3, #28]
 8009f70:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	791b      	ldrb	r3, [r3, #4]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d128      	bne.n	8009fcc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d110      	bne.n	8009fac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	69ba      	ldr	r2, [r7, #24]
 8009f9a:	0151      	lsls	r1, r2, #5
 8009f9c:	69fa      	ldr	r2, [r7, #28]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fa4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009fa8:	6013      	str	r3, [r2, #0]
 8009faa:	e00f      	b.n	8009fcc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	0151      	lsls	r1, r2, #5
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	440a      	add	r2, r1
 8009fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69ba      	ldr	r2, [r7, #24]
 8009fdc:	0151      	lsls	r1, r2, #5
 8009fde:	69fa      	ldr	r2, [r7, #28]
 8009fe0:	440a      	add	r2, r1
 8009fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fe6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009fea:	6013      	str	r3, [r2, #0]
 8009fec:	e166      	b.n	800a2bc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	015a      	lsls	r2, r3, #5
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	69ba      	ldr	r2, [r7, #24]
 8009ffe:	0151      	lsls	r1, r2, #5
 800a000:	69fa      	ldr	r2, [r7, #28]
 800a002:	440a      	add	r2, r1
 800a004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a008:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a00c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	791b      	ldrb	r3, [r3, #4]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d015      	beq.n	800a042 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 814e 	beq.w	800a2bc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a026:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	f003 030f 	and.w	r3, r3, #15
 800a030:	2101      	movs	r1, #1
 800a032:	fa01 f303 	lsl.w	r3, r1, r3
 800a036:	69f9      	ldr	r1, [r7, #28]
 800a038:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a03c:	4313      	orrs	r3, r2
 800a03e:	634b      	str	r3, [r1, #52]	@ 0x34
 800a040:	e13c      	b.n	800a2bc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d110      	bne.n	800a074 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	015a      	lsls	r2, r3, #5
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	4413      	add	r3, r2
 800a05a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	0151      	lsls	r1, r2, #5
 800a064:	69fa      	ldr	r2, [r7, #28]
 800a066:	440a      	add	r2, r1
 800a068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a06c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	e00f      	b.n	800a094 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	69ba      	ldr	r2, [r7, #24]
 800a084:	0151      	lsls	r1, r2, #5
 800a086:	69fa      	ldr	r2, [r7, #28]
 800a088:	440a      	add	r2, r1
 800a08a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a08e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a092:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	68d9      	ldr	r1, [r3, #12]
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	781a      	ldrb	r2, [r3, #0]
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	b298      	uxth	r0, r3
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f000 f9b9 	bl	800a420 <USB_WritePacket>
 800a0ae:	e105      	b.n	800a2bc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	69ba      	ldr	r2, [r7, #24]
 800a0c0:	0151      	lsls	r1, r2, #5
 800a0c2:	69fa      	ldr	r2, [r7, #28]
 800a0c4:	440a      	add	r2, r1
 800a0c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0ca:	0cdb      	lsrs	r3, r3, #19
 800a0cc:	04db      	lsls	r3, r3, #19
 800a0ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	0151      	lsls	r1, r2, #5
 800a0e2:	69fa      	ldr	r2, [r7, #28]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a0ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a0f2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d132      	bne.n	800a160 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d003      	beq.n	800a10a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	689a      	ldr	r2, [r3, #8]
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	689a      	ldr	r2, [r3, #8]
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	015a      	lsls	r2, r3, #5
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	4413      	add	r3, r2
 800a11a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a11e:	691a      	ldr	r2, [r3, #16]
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	6a1b      	ldr	r3, [r3, #32]
 800a124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a128:	69b9      	ldr	r1, [r7, #24]
 800a12a:	0148      	lsls	r0, r1, #5
 800a12c:	69f9      	ldr	r1, [r7, #28]
 800a12e:	4401      	add	r1, r0
 800a130:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a134:	4313      	orrs	r3, r2
 800a136:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	015a      	lsls	r2, r3, #5
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	69ba      	ldr	r2, [r7, #24]
 800a148:	0151      	lsls	r1, r2, #5
 800a14a:	69fa      	ldr	r2, [r7, #28]
 800a14c:	440a      	add	r2, r1
 800a14e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a152:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a156:	6113      	str	r3, [r2, #16]
 800a158:	e062      	b.n	800a220 <USB_EPStartXfer+0x490>
 800a15a:	bf00      	nop
 800a15c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d123      	bne.n	800a1b0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	015a      	lsls	r2, r3, #5
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	4413      	add	r3, r2
 800a170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a174:	691a      	ldr	r2, [r3, #16]
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a17e:	69b9      	ldr	r1, [r7, #24]
 800a180:	0148      	lsls	r0, r1, #5
 800a182:	69f9      	ldr	r1, [r7, #28]
 800a184:	4401      	add	r1, r0
 800a186:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a18a:	4313      	orrs	r3, r2
 800a18c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	69ba      	ldr	r2, [r7, #24]
 800a19e:	0151      	lsls	r1, r2, #5
 800a1a0:	69fa      	ldr	r2, [r7, #28]
 800a1a2:	440a      	add	r2, r1
 800a1a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1ac:	6113      	str	r3, [r2, #16]
 800a1ae:	e037      	b.n	800a220 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	691a      	ldr	r2, [r3, #16]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	1e5a      	subs	r2, r3, #1
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	8afa      	ldrh	r2, [r7, #22]
 800a1cc:	fb03 f202 	mul.w	r2, r3, r2
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1e0:	691a      	ldr	r2, [r3, #16]
 800a1e2:	8afb      	ldrh	r3, [r7, #22]
 800a1e4:	04d9      	lsls	r1, r3, #19
 800a1e6:	4b38      	ldr	r3, [pc, #224]	@ (800a2c8 <USB_EPStartXfer+0x538>)
 800a1e8:	400b      	ands	r3, r1
 800a1ea:	69b9      	ldr	r1, [r7, #24]
 800a1ec:	0148      	lsls	r0, r1, #5
 800a1ee:	69f9      	ldr	r1, [r7, #28]
 800a1f0:	4401      	add	r1, r0
 800a1f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	015a      	lsls	r2, r3, #5
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	4413      	add	r3, r2
 800a202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a206:	691a      	ldr	r2, [r3, #16]
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a210:	69b9      	ldr	r1, [r7, #24]
 800a212:	0148      	lsls	r0, r1, #5
 800a214:	69f9      	ldr	r1, [r7, #28]
 800a216:	4401      	add	r1, r0
 800a218:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a21c:	4313      	orrs	r3, r2
 800a21e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a220:	79fb      	ldrb	r3, [r7, #7]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d10d      	bne.n	800a242 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d009      	beq.n	800a242 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	68d9      	ldr	r1, [r3, #12]
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	015a      	lsls	r2, r3, #5
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	4413      	add	r3, r2
 800a23a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a23e:	460a      	mov	r2, r1
 800a240:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	791b      	ldrb	r3, [r3, #4]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d128      	bne.n	800a29c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a256:	2b00      	cmp	r3, #0
 800a258:	d110      	bne.n	800a27c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	015a      	lsls	r2, r3, #5
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	4413      	add	r3, r2
 800a262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	69ba      	ldr	r2, [r7, #24]
 800a26a:	0151      	lsls	r1, r2, #5
 800a26c:	69fa      	ldr	r2, [r7, #28]
 800a26e:	440a      	add	r2, r1
 800a270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a274:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a278:	6013      	str	r3, [r2, #0]
 800a27a:	e00f      	b.n	800a29c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	69ba      	ldr	r2, [r7, #24]
 800a28c:	0151      	lsls	r1, r2, #5
 800a28e:	69fa      	ldr	r2, [r7, #28]
 800a290:	440a      	add	r2, r1
 800a292:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a29a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	0151      	lsls	r1, r2, #5
 800a2ae:	69fa      	ldr	r2, [r7, #28]
 800a2b0:	440a      	add	r2, r1
 800a2b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a2ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3720      	adds	r7, #32
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	1ff80000 	.word	0x1ff80000

0800a2cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	785b      	ldrb	r3, [r3, #1]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d14a      	bne.n	800a380 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	015a      	lsls	r2, r3, #5
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a302:	f040 8086 	bne.w	800a412 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	7812      	ldrb	r2, [r2, #0]
 800a31a:	0151      	lsls	r1, r2, #5
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	440a      	add	r2, r1
 800a320:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a324:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a328:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	015a      	lsls	r2, r3, #5
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	4413      	add	r3, r2
 800a334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	7812      	ldrb	r2, [r2, #0]
 800a33e:	0151      	lsls	r1, r2, #5
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	440a      	add	r2, r1
 800a344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a348:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a34c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3301      	adds	r3, #1
 800a352:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d902      	bls.n	800a364 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	75fb      	strb	r3, [r7, #23]
          break;
 800a362:	e056      	b.n	800a412 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a37c:	d0e7      	beq.n	800a34e <USB_EPStopXfer+0x82>
 800a37e:	e048      	b.n	800a412 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a394:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a398:	d13b      	bne.n	800a412 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	7812      	ldrb	r2, [r2, #0]
 800a3ae:	0151      	lsls	r1, r2, #5
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	440a      	add	r2, r1
 800a3b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a3bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	015a      	lsls	r2, r3, #5
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	7812      	ldrb	r2, [r2, #0]
 800a3d2:	0151      	lsls	r1, r2, #5
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	440a      	add	r2, r1
 800a3d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d902      	bls.n	800a3f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	75fb      	strb	r3, [r7, #23]
          break;
 800a3f6:	e00c      	b.n	800a412 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	015a      	lsls	r2, r3, #5
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	4413      	add	r3, r2
 800a402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a40c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a410:	d0e7      	beq.n	800a3e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a412:	7dfb      	ldrb	r3, [r7, #23]
}
 800a414:	4618      	mov	r0, r3
 800a416:	371c      	adds	r7, #28
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a420:	b480      	push	{r7}
 800a422:	b089      	sub	sp, #36	@ 0x24
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	4611      	mov	r1, r2
 800a42c:	461a      	mov	r2, r3
 800a42e:	460b      	mov	r3, r1
 800a430:	71fb      	strb	r3, [r7, #7]
 800a432:	4613      	mov	r3, r2
 800a434:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a43e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a442:	2b00      	cmp	r3, #0
 800a444:	d123      	bne.n	800a48e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a446:	88bb      	ldrh	r3, [r7, #4]
 800a448:	3303      	adds	r3, #3
 800a44a:	089b      	lsrs	r3, r3, #2
 800a44c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a44e:	2300      	movs	r3, #0
 800a450:	61bb      	str	r3, [r7, #24]
 800a452:	e018      	b.n	800a486 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a454:	79fb      	ldrb	r3, [r7, #7]
 800a456:	031a      	lsls	r2, r3, #12
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a460:	461a      	mov	r2, r3
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	3301      	adds	r3, #1
 800a46c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	3301      	adds	r3, #1
 800a472:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	3301      	adds	r3, #1
 800a478:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	3301      	adds	r3, #1
 800a47e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	3301      	adds	r3, #1
 800a484:	61bb      	str	r3, [r7, #24]
 800a486:	69ba      	ldr	r2, [r7, #24]
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d3e2      	bcc.n	800a454 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3724      	adds	r7, #36	@ 0x24
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b08b      	sub	sp, #44	@ 0x2c
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a4b2:	88fb      	ldrh	r3, [r7, #6]
 800a4b4:	089b      	lsrs	r3, r3, #2
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a4ba:	88fb      	ldrh	r3, [r7, #6]
 800a4bc:	f003 0303 	and.w	r3, r3, #3
 800a4c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	623b      	str	r3, [r7, #32]
 800a4c6:	e014      	b.n	800a4f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4dc:	3301      	adds	r3, #1
 800a4de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a4ec:	6a3b      	ldr	r3, [r7, #32]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	623b      	str	r3, [r7, #32]
 800a4f2:	6a3a      	ldr	r2, [r7, #32]
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d3e6      	bcc.n	800a4c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a4fa:	8bfb      	ldrh	r3, [r7, #30]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d01e      	beq.n	800a53e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a500:	2300      	movs	r3, #0
 800a502:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a50a:	461a      	mov	r2, r3
 800a50c:	f107 0310 	add.w	r3, r7, #16
 800a510:	6812      	ldr	r2, [r2, #0]
 800a512:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a514:	693a      	ldr	r2, [r7, #16]
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	fa22 f303 	lsr.w	r3, r2, r3
 800a520:	b2da      	uxtb	r2, r3
 800a522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a524:	701a      	strb	r2, [r3, #0]
      i++;
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	3301      	adds	r3, #1
 800a52a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52e:	3301      	adds	r3, #1
 800a530:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a532:	8bfb      	ldrh	r3, [r7, #30]
 800a534:	3b01      	subs	r3, #1
 800a536:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a538:	8bfb      	ldrh	r3, [r7, #30]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1ea      	bne.n	800a514 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a540:	4618      	mov	r0, r3
 800a542:	372c      	adds	r7, #44	@ 0x2c
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	785b      	ldrb	r3, [r3, #1]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d12c      	bne.n	800a5c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	db12      	blt.n	800a5a0 <USB_EPSetStall+0x54>
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00f      	beq.n	800a5a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	015a      	lsls	r2, r3, #5
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	4413      	add	r3, r2
 800a588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	0151      	lsls	r1, r2, #5
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	440a      	add	r2, r1
 800a596:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a59a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a59e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	015a      	lsls	r2, r3, #5
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	0151      	lsls	r1, r2, #5
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	440a      	add	r2, r1
 800a5b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	e02b      	b.n	800a61a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	db12      	blt.n	800a5fa <USB_EPSetStall+0xae>
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00f      	beq.n	800a5fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	015a      	lsls	r2, r3, #5
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	0151      	lsls	r1, r2, #5
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	440a      	add	r2, r1
 800a5f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a5f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	015a      	lsls	r2, r3, #5
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	4413      	add	r3, r2
 800a602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	0151      	lsls	r1, r2, #5
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	440a      	add	r2, r1
 800a610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a614:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a618:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	785b      	ldrb	r3, [r3, #1]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d128      	bne.n	800a696 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	015a      	lsls	r2, r3, #5
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	4413      	add	r3, r2
 800a64c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	0151      	lsls	r1, r2, #5
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	440a      	add	r2, r1
 800a65a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a65e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a662:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	791b      	ldrb	r3, [r3, #4]
 800a668:	2b03      	cmp	r3, #3
 800a66a:	d003      	beq.n	800a674 <USB_EPClearStall+0x4c>
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	791b      	ldrb	r3, [r3, #4]
 800a670:	2b02      	cmp	r3, #2
 800a672:	d138      	bne.n	800a6e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	015a      	lsls	r2, r3, #5
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	4413      	add	r3, r2
 800a67c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	68ba      	ldr	r2, [r7, #8]
 800a684:	0151      	lsls	r1, r2, #5
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	440a      	add	r2, r1
 800a68a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a68e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a692:	6013      	str	r3, [r2, #0]
 800a694:	e027      	b.n	800a6e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	0151      	lsls	r1, r2, #5
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	440a      	add	r2, r1
 800a6ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a6b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	791b      	ldrb	r3, [r3, #4]
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d003      	beq.n	800a6c6 <USB_EPClearStall+0x9e>
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	791b      	ldrb	r3, [r3, #4]
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d10f      	bne.n	800a6e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	0151      	lsls	r1, r2, #5
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	440a      	add	r2, r1
 800a6dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3714      	adds	r7, #20
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a712:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a716:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	78fb      	ldrb	r3, [r7, #3]
 800a722:	011b      	lsls	r3, r3, #4
 800a724:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a728:	68f9      	ldr	r1, [r7, #12]
 800a72a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a72e:	4313      	orrs	r3, r2
 800a730:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3714      	adds	r7, #20
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a75a:	f023 0303 	bic.w	r3, r3, #3
 800a75e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a76e:	f023 0302 	bic.w	r3, r3, #2
 800a772:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr

0800a782 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a782:	b480      	push	{r7}
 800a784:	b085      	sub	sp, #20
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a79c:	f023 0303 	bic.w	r3, r3, #3
 800a7a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7b0:	f043 0302 	orr.w	r3, r3, #2
 800a7b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	4013      	ands	r3, r2
 800a7da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	4013      	ands	r3, r2
 800a80c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	0c1b      	lsrs	r3, r3, #16
}
 800a812:	4618      	mov	r0, r3
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a81e:	b480      	push	{r7}
 800a820:	b085      	sub	sp, #20
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	4013      	ands	r3, r2
 800a840:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	b29b      	uxth	r3, r3
}
 800a846:	4618      	mov	r0, r3
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a852:	b480      	push	{r7}
 800a854:	b085      	sub	sp, #20
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	460b      	mov	r3, r1
 800a85c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a862:	78fb      	ldrb	r3, [r7, #3]
 800a864:	015a      	lsls	r2, r3, #5
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	4413      	add	r3, r2
 800a86a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	4013      	ands	r3, r2
 800a87e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a880:	68bb      	ldr	r3, [r7, #8]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3714      	adds	r7, #20
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a88e:	b480      	push	{r7}
 800a890:	b087      	sub	sp, #28
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	460b      	mov	r3, r1
 800a898:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a8b2:	78fb      	ldrb	r3, [r7, #3]
 800a8b4:	f003 030f 	and.w	r3, r3, #15
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a8be:	01db      	lsls	r3, r3, #7
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	693a      	ldr	r2, [r7, #16]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a8c8:	78fb      	ldrb	r3, [r7, #3]
 800a8ca:	015a      	lsls	r2, r3, #5
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	4013      	ands	r3, r2
 800a8da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a8dc:	68bb      	ldr	r3, [r7, #8]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	371c      	adds	r7, #28
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b083      	sub	sp, #12
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	f003 0301 	and.w	r3, r3, #1
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a906:	b480      	push	{r7}
 800a908:	b085      	sub	sp, #20
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a920:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a924:	f023 0307 	bic.w	r3, r3, #7
 800a928:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a93c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	460b      	mov	r3, r1
 800a956:	607a      	str	r2, [r7, #4]
 800a958:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	333c      	adds	r3, #60	@ 0x3c
 800a962:	3304      	adds	r3, #4
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	4a26      	ldr	r2, [pc, #152]	@ (800aa04 <USB_EP0_OutStart+0xb8>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d90a      	bls.n	800a986 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a97c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a980:	d101      	bne.n	800a986 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a982:	2300      	movs	r3, #0
 800a984:	e037      	b.n	800a9f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a98c:	461a      	mov	r2, r3
 800a98e:	2300      	movs	r3, #0
 800a990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a9a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9b4:	f043 0318 	orr.w	r3, r3, #24
 800a9b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a9cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a9ce:	7afb      	ldrb	r3, [r7, #11]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d10f      	bne.n	800a9f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9da:	461a      	mov	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9ee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a9f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	371c      	adds	r7, #28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	4f54300a 	.word	0x4f54300a

0800aa08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa10:	2300      	movs	r3, #0
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	3301      	adds	r3, #1
 800aa18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa20:	d901      	bls.n	800aa26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e022      	b.n	800aa6c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	daf2      	bge.n	800aa14 <USB_CoreReset+0xc>

  count = 10U;
 800aa2e:	230a      	movs	r3, #10
 800aa30:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800aa32:	e002      	b.n	800aa3a <USB_CoreReset+0x32>
  {
    count--;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1f9      	bne.n	800aa34 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	f043 0201 	orr.w	r2, r3, #1
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa58:	d901      	bls.n	800aa5e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	e006      	b.n	800aa6c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d0f0      	beq.n	800aa4c <USB_CoreReset+0x44>

  return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af02      	add	r7, sp, #8
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_STANDBY] = {
 800aa84:	2380      	movs	r3, #128	@ 0x80
 800aa86:	733b      	strb	r3, [r7, #12]
 800aa88:	78fb      	ldrb	r3, [r7, #3]
 800aa8a:	737b      	strb	r3, [r7, #13]
        SX126X_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800aa8c:	f107 010c 	add.w	r1, r7, #12
 800aa90:	2300      	movs	r3, #0
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	2300      	movs	r3, #0
 800aa96:	2202      	movs	r2, #2
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fb1a 	bl	800b0d2 <sx126x_hal_write>
 800aa9e:	4603      	mov	r3, r0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aab8:	d301      	bcc.n	800aabe <sx126x_set_tx+0x16>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800aaba:	2302      	movs	r3, #2
 800aabc:	e008      	b.n	800aad0 <sx126x_set_tx+0x28>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800aabe:	6838      	ldr	r0, [r7, #0]
 800aac0:	f000 fa82 	bl	800afc8 <sx126x_convert_timeout_in_ms_to_rtc_step>
 800aac4:	60f8      	str	r0, [r7, #12]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800aac6:	68f9      	ldr	r1, [r7, #12]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 f805 	bl	800aad8 <sx126x_set_tx_with_timeout_in_rtc_step>
 800aace:	4603      	mov	r3, r0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af02      	add	r7, sp, #8
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800aae2:	2383      	movs	r3, #131	@ 0x83
 800aae4:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	0c1b      	lsrs	r3, r3, #16
 800aaea:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800aaec:	737b      	strb	r3, [r7, #13]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	0a1b      	lsrs	r3, r3, #8
 800aaf2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800aaf4:	73bb      	strb	r3, [r7, #14]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800aafa:	73fb      	strb	r3, [r7, #15]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800aafc:	f107 010c 	add.w	r1, r7, #12
 800ab00:	2300      	movs	r3, #0
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	2300      	movs	r3, #0
 800ab06:	2204      	movs	r2, #4
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fae2 	bl	800b0d2 <sx126x_hal_write>
 800ab0e:	4603      	mov	r3, r0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af02      	add	r7, sp, #8
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = {
 800ab24:	2396      	movs	r3, #150	@ 0x96
 800ab26:	733b      	strb	r3, [r7, #12]
 800ab28:	78fb      	ldrb	r3, [r7, #3]
 800ab2a:	737b      	strb	r3, [r7, #13]
        SX126X_SET_REGULATOR_MODE,
        ( uint8_t ) mode,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800ab2c:	f107 010c 	add.w	r1, r7, #12
 800ab30:	2300      	movs	r3, #0
 800ab32:	9300      	str	r3, [sp, #0]
 800ab34:	2300      	movs	r3, #0
 800ab36:	2202      	movs	r2, #2
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 faca 	bl	800b0d2 <sx126x_hal_write>
 800ab3e:	4603      	mov	r3, r0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af02      	add	r7, sp, #8
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	460b      	mov	r3, r1
 800ab52:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_CALIBRATE] = {
 800ab54:	2389      	movs	r3, #137	@ 0x89
 800ab56:	733b      	strb	r3, [r7, #12]
 800ab58:	78fb      	ldrb	r3, [r7, #3]
 800ab5a:	737b      	strb	r3, [r7, #13]
        SX126X_CALIBRATE,
        ( uint8_t ) param,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800ab5c:	f107 010c 	add.w	r1, r7, #12
 800ab60:	2300      	movs	r3, #0
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	2300      	movs	r3, #0
 800ab66:	2202      	movs	r2, #2
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fab2 	bl	800b0d2 <sx126x_hal_write>
 800ab6e:	4603      	mov	r3, r0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <sx126x_set_pa_cfg>:

    return sx126x_cal_img( context, freq1, freq2 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af02      	add	r7, sp, #8
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800ab82:	2395      	movs	r3, #149	@ 0x95
 800ab84:	723b      	strb	r3, [r7, #8]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800ab8a:	727b      	strb	r3, [r7, #9]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800ab90:	72bb      	strb	r3, [r7, #10]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800ab96:	72fb      	strb	r3, [r7, #11]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800ab9c:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800ab9e:	f107 0108 	add.w	r1, r7, #8
 800aba2:	2300      	movs	r3, #0
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	2300      	movs	r3, #0
 800aba8:	2205      	movs	r2, #5
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fa91 	bl	800b0d2 <sx126x_hal_write>
 800abb0:	4603      	mov	r3, r0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b088      	sub	sp, #32
 800abbe:	af02      	add	r7, sp, #8
 800abc0:	60f8      	str	r0, [r7, #12]
 800abc2:	607a      	str	r2, [r7, #4]
 800abc4:	461a      	mov	r2, r3
 800abc6:	460b      	mov	r3, r1
 800abc8:	817b      	strh	r3, [r7, #10]
 800abca:	4613      	mov	r3, r2
 800abcc:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800abce:	230d      	movs	r3, #13
 800abd0:	753b      	strb	r3, [r7, #20]
        SX126X_WRITE_REGISTER,
        ( uint8_t )( address >> 8 ),
 800abd2:	897b      	ldrh	r3, [r7, #10]
 800abd4:	0a1b      	lsrs	r3, r3, #8
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800abda:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800abdc:	897b      	ldrh	r3, [r7, #10]
 800abde:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800abe0:	75bb      	strb	r3, [r7, #22]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800abe2:	7a7b      	ldrb	r3, [r7, #9]
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	f107 0114 	add.w	r1, r7, #20
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2203      	movs	r2, #3
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 fa6e 	bl	800b0d2 <sx126x_hal_write>
 800abf6:	4603      	mov	r3, r0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3718      	adds	r7, #24
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b088      	sub	sp, #32
 800ac04:	af02      	add	r7, sp, #8
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	607a      	str	r2, [r7, #4]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	817b      	strh	r3, [r7, #10]
 800ac10:	4613      	mov	r3, r2
 800ac12:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800ac14:	231d      	movs	r3, #29
 800ac16:	753b      	strb	r3, [r7, #20]
        SX126X_READ_REGISTER,
        ( uint8_t )( address >> 8 ),
 800ac18:	897b      	ldrh	r3, [r7, #10]
 800ac1a:	0a1b      	lsrs	r3, r3, #8
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800ac20:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800ac22:	897b      	ldrh	r3, [r7, #10]
 800ac24:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800ac26:	75bb      	strb	r3, [r7, #22]
 800ac28:	2300      	movs	r3, #0
 800ac2a:	75fb      	strb	r3, [r7, #23]
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800ac2c:	7a7b      	ldrb	r3, [r7, #9]
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	f107 0114 	add.w	r1, r7, #20
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2204      	movs	r2, #4
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f000 faa4 	bl	800b188 <sx126x_hal_read>
 800ac40:	4603      	mov	r3, r0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b088      	sub	sp, #32
 800ac4e:	af02      	add	r7, sp, #8
 800ac50:	60f8      	str	r0, [r7, #12]
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	461a      	mov	r2, r3
 800ac56:	460b      	mov	r3, r1
 800ac58:	72fb      	strb	r3, [r7, #11]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	72bb      	strb	r3, [r7, #10]
    const uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = {
 800ac5e:	230e      	movs	r3, #14
 800ac60:	753b      	strb	r3, [r7, #20]
 800ac62:	7afb      	ldrb	r3, [r7, #11]
 800ac64:	757b      	strb	r3, [r7, #21]
        SX126X_WRITE_BUFFER,
        offset,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 800ac66:	7abb      	ldrb	r3, [r7, #10]
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	f107 0114 	add.w	r1, r7, #20
 800ac6e:	9300      	str	r3, [sp, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f000 fa2c 	bl	800b0d2 <sx126x_hal_write>
 800ac7a:	4603      	mov	r3, r0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b08a      	sub	sp, #40	@ 0x28
 800ac88:	af02      	add	r7, sp, #8
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	4608      	mov	r0, r1
 800ac8e:	4611      	mov	r1, r2
 800ac90:	461a      	mov	r2, r3
 800ac92:	4603      	mov	r3, r0
 800ac94:	817b      	strh	r3, [r7, #10]
 800ac96:	460b      	mov	r3, r1
 800ac98:	813b      	strh	r3, [r7, #8]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	80fb      	strh	r3, [r7, #6]
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800ac9e:	2308      	movs	r3, #8
 800aca0:	753b      	strb	r3, [r7, #20]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800aca2:	897b      	ldrh	r3, [r7, #10]
 800aca4:	0a1b      	lsrs	r3, r3, #8
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800acaa:	757b      	strb	r3, [r7, #21]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800acac:	897b      	ldrh	r3, [r7, #10]
 800acae:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800acb0:	75bb      	strb	r3, [r7, #22]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800acb2:	893b      	ldrh	r3, [r7, #8]
 800acb4:	0a1b      	lsrs	r3, r3, #8
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800acba:	75fb      	strb	r3, [r7, #23]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800acbc:	893b      	ldrh	r3, [r7, #8]
 800acbe:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800acc0:	763b      	strb	r3, [r7, #24]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800acc2:	88fb      	ldrh	r3, [r7, #6]
 800acc4:	0a1b      	lsrs	r3, r3, #8
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800acca:	767b      	strb	r3, [r7, #25]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800accc:	88fb      	ldrh	r3, [r7, #6]
 800acce:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800acd0:	76bb      	strb	r3, [r7, #26]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800acd2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800acd4:	0a1b      	lsrs	r3, r3, #8
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800acda:	76fb      	strb	r3, [r7, #27]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800acdc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800acde:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800ace0:	773b      	strb	r3, [r7, #28]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800ace2:	f107 0114 	add.w	r1, r7, #20
 800ace6:	2300      	movs	r3, #0
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	2300      	movs	r3, #0
 800acec:	2209      	movs	r2, #9
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f000 f9ef 	bl	800b0d2 <sx126x_hal_write>
 800acf4:	4603      	mov	r3, r0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3720      	adds	r7, #32
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <sx126x_set_dio3_as_tcxo_ctrl>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
}

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b088      	sub	sp, #32
 800ad02:	af02      	add	r7, sp, #8
 800ad04:	60f8      	str	r0, [r7, #12]
 800ad06:	460b      	mov	r3, r1
 800ad08:	607a      	str	r2, [r7, #4]
 800ad0a:	72fb      	strb	r3, [r7, #11]
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800ad0c:	2397      	movs	r3, #151	@ 0x97
 800ad0e:	743b      	strb	r3, [r7, #16]
 800ad10:	7afb      	ldrb	r3, [r7, #11]
 800ad12:	747b      	strb	r3, [r7, #17]
        SX126X_SET_DIO3_AS_TCXO_CTRL, ( uint8_t ) tcxo_voltage,    ( uint8_t )( timeout >> 16 ),
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	0c1b      	lsrs	r3, r3, #16
 800ad18:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800ad1a:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	0a1b      	lsrs	r3, r3, #8
 800ad20:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800ad22:	74fb      	strb	r3, [r7, #19]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800ad28:	753b      	strb	r3, [r7, #20]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800ad2a:	f107 0110 	add.w	r1, r7, #16
 800ad2e:	2300      	movs	r3, #0
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	2300      	movs	r3, #0
 800ad34:	2205      	movs	r2, #5
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f000 f9cb 	bl	800b0d2 <sx126x_hal_write>
 800ad3c:	4603      	mov	r3, r0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3718      	adds	r7, #24
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b084      	sub	sp, #16
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800ad50:	6838      	ldr	r0, [r7, #0]
 800ad52:	f000 f913 	bl	800af7c <sx126x_convert_freq_in_hz_to_pll_step>
 800ad56:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800ad58:	68f9      	ldr	r1, [r7, #12]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f805 	bl	800ad6a <sx126x_set_rf_freq_in_pll_steps>
 800ad60:	4603      	mov	r3, r0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b086      	sub	sp, #24
 800ad6e:	af02      	add	r7, sp, #8
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800ad74:	2386      	movs	r3, #134	@ 0x86
 800ad76:	723b      	strb	r3, [r7, #8]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	0e1b      	lsrs	r3, r3, #24
 800ad7c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800ad7e:	727b      	strb	r3, [r7, #9]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	0c1b      	lsrs	r3, r3, #16
 800ad84:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800ad86:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	0a1b      	lsrs	r3, r3, #8
 800ad8c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800ad8e:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800ad94:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800ad96:	f107 0108 	add.w	r1, r7, #8
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	2205      	movs	r2, #5
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f995 	bl	800b0d2 <sx126x_hal_write>
 800ada8:	4603      	mov	r3, r0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b086      	sub	sp, #24
 800adb6:	af02      	add	r7, sp, #8
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	460b      	mov	r3, r1
 800adbc:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = {
 800adbe:	238a      	movs	r3, #138	@ 0x8a
 800adc0:	733b      	strb	r3, [r7, #12]
 800adc2:	78fb      	ldrb	r3, [r7, #3]
 800adc4:	737b      	strb	r3, [r7, #13]
        SX126X_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800adc6:	f107 010c 	add.w	r1, r7, #12
 800adca:	2300      	movs	r3, #0
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	2300      	movs	r3, #0
 800add0:	2202      	movs	r2, #2
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f97d 	bl	800b0d2 <sx126x_hal_write>
 800add8:	4603      	mov	r3, r0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <sx126x_set_tx_params>:

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b086      	sub	sp, #24
 800ade6:	af02      	add	r7, sp, #8
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	460b      	mov	r3, r1
 800adec:	70fb      	strb	r3, [r7, #3]
 800adee:	4613      	mov	r3, r2
 800adf0:	70bb      	strb	r3, [r7, #2]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800adf2:	238e      	movs	r3, #142	@ 0x8e
 800adf4:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
 800adf6:	78fb      	ldrb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800adf8:	737b      	strb	r3, [r7, #13]
 800adfa:	78bb      	ldrb	r3, [r7, #2]
 800adfc:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ramp_time,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800adfe:	f107 010c 	add.w	r1, r7, #12
 800ae02:	2300      	movs	r3, #0
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	2300      	movs	r3, #0
 800ae08:	2203      	movs	r2, #3
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 f961 	bl	800b0d2 <sx126x_hal_write>
 800ae10:	4603      	mov	r3, r0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <sx126x_set_lora_mod_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_BPSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b086      	sub	sp, #24
 800ae1e:	af02      	add	r7, sp, #8
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800ae24:	238b      	movs	r3, #139	@ 0x8b
 800ae26:	723b      	strb	r3, [r7, #8]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800ae2c:	727b      	strb	r3, [r7, #9]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800ae32:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800ae38:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	78db      	ldrb	r3, [r3, #3]
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800ae44:	733b      	strb	r3, [r7, #12]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800ae46:	f107 0108 	add.w	r1, r7, #8
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	2205      	movs	r2, #5
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f93d 	bl	800b0d2 <sx126x_hal_write>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800ae5c:	7bfb      	ldrb	r3, [r7, #15]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d108      	bne.n	800ae74 <sx126x_set_lora_mod_params+0x5a>
    {
        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see datasheet DS_SX1261-2_V1.2 §15.1
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	785b      	ldrb	r3, [r3, #1]
 800ae66:	461a      	mov	r2, r3
 800ae68:	2101      	movs	r1, #1
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f8f4 	bl	800b058 <sx126x_tx_modulation_workaround>
 800ae70:	4603      	mov	r3, r0
 800ae72:	73fb      	strb	r3, [r7, #15]
        // WORKAROUND END
    }

    return status;
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <sx126x_set_lora_pkt_params>:

    return sx126x_write_register( context, 0x00F0, buf2, sizeof( buf2 ) );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b088      	sub	sp, #32
 800ae82:	af02      	add	r7, sp, #8
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800ae88:	238c      	movs	r3, #140	@ 0x8c
 800ae8a:	743b      	strb	r3, [r7, #16]
        SX126X_SET_PKT_PARAMS,
        ( uint8_t )( params->preamble_len_in_symb >> 8 ),
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	881b      	ldrh	r3, [r3, #0]
 800ae90:	0a1b      	lsrs	r3, r3, #8
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800ae96:	747b      	strb	r3, [r7, #17]
        ( uint8_t )( params->preamble_len_in_symb >> 0 ),
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800ae9e:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( params->header_type ),
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aea4:	74fb      	strb	r3, [r7, #19]
        params->pld_len_in_bytes,
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aeaa:	753b      	strb	r3, [r7, #20]
        ( uint8_t )( params->crc_is_on ? 1 : 0 ),
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	791b      	ldrb	r3, [r3, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <sx126x_set_lora_pkt_params+0x3a>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e000      	b.n	800aeba <sx126x_set_lora_pkt_params+0x3c>
 800aeb8:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aeba:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( params->invert_iq_is_on ? 1 : 0 ),
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	795b      	ldrb	r3, [r3, #5]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d001      	beq.n	800aec8 <sx126x_set_lora_pkt_params+0x4a>
 800aec4:	2301      	movs	r3, #1
 800aec6:	e000      	b.n	800aeca <sx126x_set_lora_pkt_params+0x4c>
 800aec8:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800aeca:	75bb      	strb	r3, [r7, #22]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800aecc:	f107 0110 	add.w	r1, r7, #16
 800aed0:	2300      	movs	r3, #0
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	2300      	movs	r3, #0
 800aed6:	2207      	movs	r2, #7
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f8fa 	bl	800b0d2 <sx126x_hal_write>
 800aede:	4603      	mov	r3, r0
 800aee0:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800aee2:	7dfb      	ldrb	r3, [r7, #23]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d127      	bne.n	800af38 <sx126x_set_lora_pkt_params+0xba>
    {
        uint8_t reg_value = 0;
 800aee8:	2300      	movs	r3, #0
 800aeea:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800aeec:	f107 020f 	add.w	r2, r7, #15
 800aef0:	2301      	movs	r3, #1
 800aef2:	f240 7136 	movw	r1, #1846	@ 0x736
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7ff fe82 	bl	800ac00 <sx126x_read_register>
 800aefc:	4603      	mov	r3, r0
 800aefe:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d118      	bne.n	800af38 <sx126x_set_lora_pkt_params+0xba>
        {
            if( params->invert_iq_is_on == true )
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	795b      	ldrb	r3, [r3, #5]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d005      	beq.n	800af1a <sx126x_set_lora_pkt_params+0x9c>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
 800af10:	f023 0304 	bic.w	r3, r3, #4
 800af14:	b2db      	uxtb	r3, r3
 800af16:	73fb      	strb	r3, [r7, #15]
 800af18:	e004      	b.n	800af24 <sx126x_set_lora_pkt_params+0xa6>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
 800af1c:	f043 0304 	orr.w	r3, r3, #4
 800af20:	b2db      	uxtb	r3, r3
 800af22:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800af24:	f107 020f 	add.w	r2, r7, #15
 800af28:	2301      	movs	r3, #1
 800af2a:	f240 7136 	movw	r1, #1846	@ 0x736
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7ff fe43 	bl	800abba <sx126x_write_register>
 800af34:	4603      	mov	r3, r0
 800af36:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800af38:	7dfb      	ldrb	r3, [r7, #23]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b086      	sub	sp, #24
 800af46:	af02      	add	r7, sp, #8
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	460b      	mov	r3, r1
 800af4c:	70fb      	strb	r3, [r7, #3]
 800af4e:	4613      	mov	r3, r2
 800af50:	70bb      	strb	r3, [r7, #2]
    const uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = {
 800af52:	238f      	movs	r3, #143	@ 0x8f
 800af54:	733b      	strb	r3, [r7, #12]
 800af56:	78fb      	ldrb	r3, [r7, #3]
 800af58:	737b      	strb	r3, [r7, #13]
 800af5a:	78bb      	ldrb	r3, [r7, #2]
 800af5c:	73bb      	strb	r3, [r7, #14]
        SX126X_SET_BUFFER_BASE_ADDRESS,
        tx_base_address,
        rx_base_address,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800af5e:	f107 010c 	add.w	r1, r7, #12
 800af62:	2300      	movs	r3, #0
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	2300      	movs	r3, #0
 800af68:	2203      	movs	r2, #3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f8b1 	bl	800b0d2 <sx126x_hal_write>
 800af70:	4603      	mov	r3, r0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
	...

0800af7c <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a0f      	ldr	r2, [pc, #60]	@ (800afc4 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800af88:	fba2 2303 	umull	r2, r3, r2, r3
 800af8c:	0b1b      	lsrs	r3, r3, #12
 800af8e:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f643 5209 	movw	r2, #15625	@ 0x3d09
 800af96:	fb02 f303 	mul.w	r3, r2, r3
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	039b      	lsls	r3, r3, #14
 800afa8:	f503 53f4 	add.w	r3, r3, #7808	@ 0x1e80
 800afac:	3304      	adds	r3, #4
 800afae:	4905      	ldr	r1, [pc, #20]	@ (800afc4 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800afb0:	fba1 1303 	umull	r1, r3, r1, r3
 800afb4:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800afb6:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr
 800afc4:	431bde83 	.word	0x431bde83

0800afc8 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	019b      	lsls	r3, r3, #6
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <sx126x_set_lora_sync_word>:

    return status;
}

sx126x_status_t sx126x_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	460b      	mov	r3, r1
 800afea:	70fb      	strb	r3, [r7, #3]
    uint8_t buffer[2] = { 0x00 };
 800afec:	2300      	movs	r3, #0
 800afee:	81bb      	strh	r3, [r7, #12]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800aff0:	f107 020c 	add.w	r2, r7, #12
 800aff4:	2302      	movs	r3, #2
 800aff6:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7ff fe00 	bl	800ac00 <sx126x_read_register>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d121      	bne.n	800b04e <sx126x_set_lora_sync_word+0x6e>
    {
        buffer[0] = ( buffer[0] & ~0xF0 ) + ( sync_word & 0xF0 );
 800b00a:	7b3b      	ldrb	r3, [r7, #12]
 800b00c:	b25b      	sxtb	r3, r3
 800b00e:	f003 030f 	and.w	r3, r3, #15
 800b012:	b25a      	sxtb	r2, r3
 800b014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b018:	f023 030f 	bic.w	r3, r3, #15
 800b01c:	b25b      	sxtb	r3, r3
 800b01e:	4313      	orrs	r3, r2
 800b020:	b25b      	sxtb	r3, r3
 800b022:	b2db      	uxtb	r3, r3
 800b024:	733b      	strb	r3, [r7, #12]
        buffer[1] = ( buffer[1] & ~0xF0 ) + ( ( sync_word & 0x0F ) << 4 );
 800b026:	7b7b      	ldrb	r3, [r7, #13]
 800b028:	f003 030f 	and.w	r3, r3, #15
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	78fb      	ldrb	r3, [r7, #3]
 800b030:	011b      	lsls	r3, r3, #4
 800b032:	b2db      	uxtb	r3, r3
 800b034:	4413      	add	r3, r2
 800b036:	b2db      	uxtb	r3, r3
 800b038:	737b      	strb	r3, [r7, #13]

        status = sx126x_write_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800b03a:	f107 020c 	add.w	r2, r7, #12
 800b03e:	2302      	movs	r3, #2
 800b040:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7ff fdb8 	bl	800abba <sx126x_write_register>
 800b04a:	4603      	mov	r3, r0
 800b04c:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800b04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <sx126x_tx_modulation_workaround>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static sx126x_status_t sx126x_tx_modulation_workaround( const void* context, sx126x_pkt_type_t pkt_type,
                                                        sx126x_lora_bw_t bw )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	460b      	mov	r3, r1
 800b062:	70fb      	strb	r3, [r7, #3]
 800b064:	4613      	mov	r3, r2
 800b066:	70bb      	strb	r3, [r7, #2]
    uint8_t reg_value = 0;
 800b068:	2300      	movs	r3, #0
 800b06a:	73bb      	strb	r3, [r7, #14]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800b06c:	f107 020e 	add.w	r2, r7, #14
 800b070:	2301      	movs	r3, #1
 800b072:	f640 0189 	movw	r1, #2185	@ 0x889
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7ff fdc2 	bl	800ac00 <sx126x_read_register>
 800b07c:	4603      	mov	r3, r0
 800b07e:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800b080:	7bfb      	ldrb	r3, [r7, #15]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d120      	bne.n	800b0c8 <sx126x_tx_modulation_workaround+0x70>
    {
        if( pkt_type == SX126X_PKT_TYPE_LORA )
 800b086:	78fb      	ldrb	r3, [r7, #3]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d10e      	bne.n	800b0aa <sx126x_tx_modulation_workaround+0x52>
        {
            if( bw == SX126X_LORA_BW_500 )
 800b08c:	78bb      	ldrb	r3, [r7, #2]
 800b08e:	2b06      	cmp	r3, #6
 800b090:	d105      	bne.n	800b09e <sx126x_tx_modulation_workaround+0x46>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 if the LoRa BW = 500 kHz
 800b092:	7bbb      	ldrb	r3, [r7, #14]
 800b094:	f023 0304 	bic.w	r3, r3, #4
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	73bb      	strb	r3, [r7, #14]
 800b09c:	e00a      	b.n	800b0b4 <sx126x_tx_modulation_workaround+0x5c>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any other LoRa BW
 800b09e:	7bbb      	ldrb	r3, [r7, #14]
 800b0a0:	f043 0304 	orr.w	r3, r3, #4
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	73bb      	strb	r3, [r7, #14]
 800b0a8:	e004      	b.n	800b0b4 <sx126x_tx_modulation_workaround+0x5c>
            }
        }
        else
        {
            reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any (G)FSK configuration
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	f043 0304 	orr.w	r3, r3, #4
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	73bb      	strb	r3, [r7, #14]
        }

        status = sx126x_write_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800b0b4:	f107 020e 	add.w	r2, r7, #14
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	f640 0189 	movw	r1, #2185	@ 0x889
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7ff fd7b 	bl	800abba <sx126x_write_register>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <sx126x_hal_write>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_write(const void *context,
		const uint8_t *command, const uint16_t command_length,
		const uint8_t *data, const uint16_t data_length) {
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b086      	sub	sp, #24
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	60f8      	str	r0, [r7, #12]
 800b0da:	60b9      	str	r1, [r7, #8]
 800b0dc:	603b      	str	r3, [r7, #0]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	80fb      	strh	r3, [r7, #6]
	// Cast context
	sx126x_context *ctx = (sx126x_context*) context;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	617b      	str	r3, [r7, #20]

	//Poll the tranmsitters busy pin (active high)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800b0e6:	bf00      	nop
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	689a      	ldr	r2, [r3, #8]
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	899b      	ldrh	r3, [r3, #12]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	4610      	mov	r0, r2
 800b0f4:	f7fa f80e 	bl	8005114 <HAL_GPIO_ReadPin>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d0f4      	beq.n	800b0e8 <sx126x_hal_write+0x16>
	}

	// Activate chip select (active low)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	6818      	ldr	r0, [r3, #0]
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	889b      	ldrh	r3, [r3, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	4619      	mov	r1, r3
 800b10a:	f7fa f81b 	bl	8005144 <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	6998      	ldr	r0, [r3, #24]
 800b112:	88fa      	ldrh	r2, [r7, #6]
 800b114:	f04f 33ff 	mov.w	r3, #4294967295
 800b118:	68b9      	ldr	r1, [r7, #8]
 800b11a:	f7fb ffa0 	bl	800705e <HAL_SPI_Transmit>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d009      	beq.n	800b138 <sx126x_hal_write+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	6818      	ldr	r0, [r3, #0]
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	889b      	ldrh	r3, [r3, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	4619      	mov	r1, r3
 800b130:	f7fa f808 	bl	8005144 <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800b134:	2303      	movs	r3, #3
 800b136:	e023      	b.n	800b180 <sx126x_hal_write+0xae>
	}

	// Transmit data
	if (data != NULL && data_length > 0) {
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d017      	beq.n	800b16e <sx126x_hal_write+0x9c>
 800b13e:	8c3b      	ldrh	r3, [r7, #32]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d014      	beq.n	800b16e <sx126x_hal_write+0x9c>
		if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) data, data_length,
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	6998      	ldr	r0, [r3, #24]
 800b148:	8c3a      	ldrh	r2, [r7, #32]
 800b14a:	f04f 33ff 	mov.w	r3, #4294967295
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	f7fb ff85 	bl	800705e <HAL_SPI_Transmit>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d009      	beq.n	800b16e <sx126x_hal_write+0x9c>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	6818      	ldr	r0, [r3, #0]
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	889b      	ldrh	r3, [r3, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	4619      	mov	r1, r3
 800b166:	f7f9 ffed 	bl	8005144 <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800b16a:	2303      	movs	r3, #3
 800b16c:	e008      	b.n	800b180 <sx126x_hal_write+0xae>
		}
	}

	// Deactivate chip select
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	6818      	ldr	r0, [r3, #0]
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	889b      	ldrh	r3, [r3, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	4619      	mov	r1, r3
 800b17a:	f7f9 ffe3 	bl	8005144 <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800b17e:	2300      	movs	r3, #0

}
 800b180:	4618      	mov	r0, r3
 800b182:	3718      	adds	r7, #24
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <sx126x_hal_read>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read(const void *context, const uint8_t *command,
		const uint16_t command_length, uint8_t *data,
		const uint16_t data_length) {
 800b188:	b580      	push	{r7, lr}
 800b18a:	b088      	sub	sp, #32
 800b18c:	af02      	add	r7, sp, #8
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	603b      	str	r3, [r7, #0]
 800b194:	4613      	mov	r3, r2
 800b196:	80fb      	strh	r3, [r7, #6]

	// Cast context to the struct type
	sx126x_context *ctx = (sx126x_context*) context;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	617b      	str	r3, [r7, #20]

	// Activate chip select (active low)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800b19c:	bf00      	nop
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	689a      	ldr	r2, [r3, #8]
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	899b      	ldrh	r3, [r3, #12]
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	4610      	mov	r0, r2
 800b1aa:	f7f9 ffb3 	bl	8005114 <HAL_GPIO_ReadPin>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d0f4      	beq.n	800b19e <sx126x_hal_read+0x16>
	}

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	6818      	ldr	r0, [r3, #0]
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	889b      	ldrh	r3, [r3, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	4619      	mov	r1, r3
 800b1c0:	f7f9 ffc0 	bl	8005144 <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	6998      	ldr	r0, [r3, #24]
 800b1c8:	88fa      	ldrh	r2, [r7, #6]
 800b1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ce:	68b9      	ldr	r1, [r7, #8]
 800b1d0:	f7fb ff45 	bl	800705e <HAL_SPI_Transmit>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d009      	beq.n	800b1ee <sx126x_hal_read+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	6818      	ldr	r0, [r3, #0]
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	889b      	ldrh	r3, [r3, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	f7f9 ffad 	bl	8005144 <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	e028      	b.n	800b240 <sx126x_hal_read+0xb8>
	}

	// Receive data
	if (data != NULL && data_length > 0) {
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d01c      	beq.n	800b22e <sx126x_hal_read+0xa6>
 800b1f4:	8c3b      	ldrh	r3, [r7, #32]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d019      	beq.n	800b22e <sx126x_hal_read+0xa6>
		uint8_t dummy_byte = SX126X_NOP;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	74fb      	strb	r3, [r7, #19]
		if (HAL_SPI_TransmitReceive(ctx->hspi, &dummy_byte, data, data_length,
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	6998      	ldr	r0, [r3, #24]
 800b202:	8c3b      	ldrh	r3, [r7, #32]
 800b204:	f107 0113 	add.w	r1, r7, #19
 800b208:	f04f 32ff 	mov.w	r2, #4294967295
 800b20c:	9200      	str	r2, [sp, #0]
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	f7fc f869 	bl	80072e6 <HAL_SPI_TransmitReceive>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d009      	beq.n	800b22e <sx126x_hal_read+0xa6>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	6818      	ldr	r0, [r3, #0]
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	889b      	ldrh	r3, [r3, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	4619      	mov	r1, r3
 800b226:	f7f9 ff8d 	bl	8005144 <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800b22a:	2303      	movs	r3, #3
 800b22c:	e008      	b.n	800b240 <sx126x_hal_read+0xb8>
		}
	}

	// Deactivate chip select (active high)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	6818      	ldr	r0, [r3, #0]
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	889b      	ldrh	r3, [r3, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	4619      	mov	r1, r3
 800b23a:	f7f9 ff83 	bl	8005144 <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3718      	adds	r7, #24
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <sx126x_hal_reset>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_reset(const void *context) {
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	60fb      	str	r3, [r7, #12]

	HAL_Delay(10U);
 800b254:	200a      	movs	r0, #10
 800b256:	f7f9 f901 	bl	800445c <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_RESET);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6918      	ldr	r0, [r3, #16]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	8a9b      	ldrh	r3, [r3, #20]
 800b262:	2200      	movs	r2, #0
 800b264:	4619      	mov	r1, r3
 800b266:	f7f9 ff6d 	bl	8005144 <HAL_GPIO_WritePin>
	HAL_Delay(20U);
 800b26a:	2014      	movs	r0, #20
 800b26c:	f7f9 f8f6 	bl	800445c <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_SET);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6918      	ldr	r0, [r3, #16]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	8a9b      	ldrh	r3, [r3, #20]
 800b278:	2201      	movs	r2, #1
 800b27a:	4619      	mov	r1, r3
 800b27c:	f7f9 ff62 	bl	8005144 <HAL_GPIO_WritePin>
	HAL_Delay(10U);
 800b280:	200a      	movs	r0, #10
 800b282:	f7f9 f8eb 	bl	800445c <HAL_Delay>

	return SX126X_HAL_STATUS_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <sx126x_hal_wakeup>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_wakeup(const void *context) {
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6818      	ldr	r0, [r3, #0]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	889b      	ldrh	r3, [r3, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	f7f9 ff4c 	bl	8005144 <HAL_GPIO_WritePin>

	uint8_t nop_cmd = 0x00;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(ctx->hspi, &nop_cmd, 1, HAL_MAX_DELAY);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6998      	ldr	r0, [r3, #24]
 800b2b4:	f107 010b 	add.w	r1, r7, #11
 800b2b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f7fb fece 	bl	800705e <HAL_SPI_Transmit>

	HAL_Delay(3500);
 800b2c2:	f640 50ac 	movw	r0, #3500	@ 0xdac
 800b2c6:	f7f9 f8c9 	bl	800445c <HAL_Delay>

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6818      	ldr	r0, [r3, #0]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	889b      	ldrh	r3, [r3, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	f7f9 ff35 	bl	8005144 <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b2f0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b2f4:	f002 fcfa 	bl	800dcec <USBD_static_malloc>
 800b2f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d109      	bne.n	800b314 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	32b0      	adds	r2, #176	@ 0xb0
 800b30a:	2100      	movs	r1, #0
 800b30c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b310:	2302      	movs	r3, #2
 800b312:	e0d4      	b.n	800b4be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b314:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b318:	2100      	movs	r1, #0
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f004 fdb7 	bl	800fe8e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	32b0      	adds	r2, #176	@ 0xb0
 800b32a:	68f9      	ldr	r1, [r7, #12]
 800b32c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	32b0      	adds	r2, #176	@ 0xb0
 800b33a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	7c1b      	ldrb	r3, [r3, #16]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d138      	bne.n	800b3be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b34c:	4b5e      	ldr	r3, [pc, #376]	@ (800b4c8 <USBD_CDC_Init+0x1e4>)
 800b34e:	7819      	ldrb	r1, [r3, #0]
 800b350:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b354:	2202      	movs	r2, #2
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f002 fba5 	bl	800daa6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b35c:	4b5a      	ldr	r3, [pc, #360]	@ (800b4c8 <USBD_CDC_Init+0x1e4>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	f003 020f 	and.w	r2, r3, #15
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	4613      	mov	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	440b      	add	r3, r1
 800b370:	3323      	adds	r3, #35	@ 0x23
 800b372:	2201      	movs	r2, #1
 800b374:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b376:	4b55      	ldr	r3, [pc, #340]	@ (800b4cc <USBD_CDC_Init+0x1e8>)
 800b378:	7819      	ldrb	r1, [r3, #0]
 800b37a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b37e:	2202      	movs	r2, #2
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f002 fb90 	bl	800daa6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b386:	4b51      	ldr	r3, [pc, #324]	@ (800b4cc <USBD_CDC_Init+0x1e8>)
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	f003 020f 	and.w	r2, r3, #15
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	4613      	mov	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4413      	add	r3, r2
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	440b      	add	r3, r1
 800b39a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b39e:	2201      	movs	r2, #1
 800b3a0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b3a2:	4b4b      	ldr	r3, [pc, #300]	@ (800b4d0 <USBD_CDC_Init+0x1ec>)
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	f003 020f 	and.w	r2, r3, #15
 800b3aa:	6879      	ldr	r1, [r7, #4]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	440b      	add	r3, r1
 800b3b6:	331c      	adds	r3, #28
 800b3b8:	2210      	movs	r2, #16
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	e035      	b.n	800b42a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b3be:	4b42      	ldr	r3, [pc, #264]	@ (800b4c8 <USBD_CDC_Init+0x1e4>)
 800b3c0:	7819      	ldrb	r1, [r3, #0]
 800b3c2:	2340      	movs	r3, #64	@ 0x40
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f002 fb6d 	bl	800daa6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b3cc:	4b3e      	ldr	r3, [pc, #248]	@ (800b4c8 <USBD_CDC_Init+0x1e4>)
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	f003 020f 	and.w	r2, r3, #15
 800b3d4:	6879      	ldr	r1, [r7, #4]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4413      	add	r3, r2
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	440b      	add	r3, r1
 800b3e0:	3323      	adds	r3, #35	@ 0x23
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b3e6:	4b39      	ldr	r3, [pc, #228]	@ (800b4cc <USBD_CDC_Init+0x1e8>)
 800b3e8:	7819      	ldrb	r1, [r3, #0]
 800b3ea:	2340      	movs	r3, #64	@ 0x40
 800b3ec:	2202      	movs	r2, #2
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f002 fb59 	bl	800daa6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b3f4:	4b35      	ldr	r3, [pc, #212]	@ (800b4cc <USBD_CDC_Init+0x1e8>)
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	f003 020f 	and.w	r2, r3, #15
 800b3fc:	6879      	ldr	r1, [r7, #4]
 800b3fe:	4613      	mov	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4413      	add	r3, r2
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	440b      	add	r3, r1
 800b408:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b40c:	2201      	movs	r2, #1
 800b40e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b410:	4b2f      	ldr	r3, [pc, #188]	@ (800b4d0 <USBD_CDC_Init+0x1ec>)
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	f003 020f 	and.w	r2, r3, #15
 800b418:	6879      	ldr	r1, [r7, #4]
 800b41a:	4613      	mov	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4413      	add	r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	440b      	add	r3, r1
 800b424:	331c      	adds	r3, #28
 800b426:	2210      	movs	r2, #16
 800b428:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b42a:	4b29      	ldr	r3, [pc, #164]	@ (800b4d0 <USBD_CDC_Init+0x1ec>)
 800b42c:	7819      	ldrb	r1, [r3, #0]
 800b42e:	2308      	movs	r3, #8
 800b430:	2203      	movs	r2, #3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f002 fb37 	bl	800daa6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b438:	4b25      	ldr	r3, [pc, #148]	@ (800b4d0 <USBD_CDC_Init+0x1ec>)
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	f003 020f 	and.w	r2, r3, #15
 800b440:	6879      	ldr	r1, [r7, #4]
 800b442:	4613      	mov	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	440b      	add	r3, r1
 800b44c:	3323      	adds	r3, #35	@ 0x23
 800b44e:	2201      	movs	r2, #1
 800b450:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	33b0      	adds	r3, #176	@ 0xb0
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	4413      	add	r3, r2
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2200      	movs	r2, #0
 800b472:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2200      	movs	r2, #0
 800b47a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b488:	2302      	movs	r3, #2
 800b48a:	e018      	b.n	800b4be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	7c1b      	ldrb	r3, [r3, #16]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10a      	bne.n	800b4aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b494:	4b0d      	ldr	r3, [pc, #52]	@ (800b4cc <USBD_CDC_Init+0x1e8>)
 800b496:	7819      	ldrb	r1, [r3, #0]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b49e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f002 fbee 	bl	800dc84 <USBD_LL_PrepareReceive>
 800b4a8:	e008      	b.n	800b4bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4aa:	4b08      	ldr	r3, [pc, #32]	@ (800b4cc <USBD_CDC_Init+0x1e8>)
 800b4ac:	7819      	ldrb	r1, [r3, #0]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4b4:	2340      	movs	r3, #64	@ 0x40
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f002 fbe4 	bl	800dc84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	2000009f 	.word	0x2000009f
 800b4cc:	200000a0 	.word	0x200000a0
 800b4d0:	200000a1 	.word	0x200000a1

0800b4d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	460b      	mov	r3, r1
 800b4de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b4e0:	4b3a      	ldr	r3, [pc, #232]	@ (800b5cc <USBD_CDC_DeInit+0xf8>)
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f002 fb03 	bl	800daf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b4ec:	4b37      	ldr	r3, [pc, #220]	@ (800b5cc <USBD_CDC_DeInit+0xf8>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	f003 020f 	and.w	r2, r3, #15
 800b4f4:	6879      	ldr	r1, [r7, #4]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	440b      	add	r3, r1
 800b500:	3323      	adds	r3, #35	@ 0x23
 800b502:	2200      	movs	r2, #0
 800b504:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b506:	4b32      	ldr	r3, [pc, #200]	@ (800b5d0 <USBD_CDC_DeInit+0xfc>)
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f002 faf0 	bl	800daf2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b512:	4b2f      	ldr	r3, [pc, #188]	@ (800b5d0 <USBD_CDC_DeInit+0xfc>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	f003 020f 	and.w	r2, r3, #15
 800b51a:	6879      	ldr	r1, [r7, #4]
 800b51c:	4613      	mov	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	4413      	add	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	440b      	add	r3, r1
 800b526:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b52a:	2200      	movs	r2, #0
 800b52c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b52e:	4b29      	ldr	r3, [pc, #164]	@ (800b5d4 <USBD_CDC_DeInit+0x100>)
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	4619      	mov	r1, r3
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f002 fadc 	bl	800daf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b53a:	4b26      	ldr	r3, [pc, #152]	@ (800b5d4 <USBD_CDC_DeInit+0x100>)
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	f003 020f 	and.w	r2, r3, #15
 800b542:	6879      	ldr	r1, [r7, #4]
 800b544:	4613      	mov	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4413      	add	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	440b      	add	r3, r1
 800b54e:	3323      	adds	r3, #35	@ 0x23
 800b550:	2200      	movs	r2, #0
 800b552:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b554:	4b1f      	ldr	r3, [pc, #124]	@ (800b5d4 <USBD_CDC_DeInit+0x100>)
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	f003 020f 	and.w	r2, r3, #15
 800b55c:	6879      	ldr	r1, [r7, #4]
 800b55e:	4613      	mov	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4413      	add	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	440b      	add	r3, r1
 800b568:	331c      	adds	r3, #28
 800b56a:	2200      	movs	r2, #0
 800b56c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	32b0      	adds	r2, #176	@ 0xb0
 800b578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d01f      	beq.n	800b5c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	33b0      	adds	r3, #176	@ 0xb0
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	4413      	add	r3, r2
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	32b0      	adds	r2, #176	@ 0xb0
 800b59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f002 fbb0 	bl	800dd08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	32b0      	adds	r2, #176	@ 0xb0
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	2000009f 	.word	0x2000009f
 800b5d0:	200000a0 	.word	0x200000a0
 800b5d4:	200000a1 	.word	0x200000a1

0800b5d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	32b0      	adds	r2, #176	@ 0xb0
 800b5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b604:	2303      	movs	r3, #3
 800b606:	e0bf      	b.n	800b788 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b610:	2b00      	cmp	r3, #0
 800b612:	d050      	beq.n	800b6b6 <USBD_CDC_Setup+0xde>
 800b614:	2b20      	cmp	r3, #32
 800b616:	f040 80af 	bne.w	800b778 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	88db      	ldrh	r3, [r3, #6]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d03a      	beq.n	800b698 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	b25b      	sxtb	r3, r3
 800b628:	2b00      	cmp	r3, #0
 800b62a:	da1b      	bge.n	800b664 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	33b0      	adds	r3, #176	@ 0xb0
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b642:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	88d2      	ldrh	r2, [r2, #6]
 800b648:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	88db      	ldrh	r3, [r3, #6]
 800b64e:	2b07      	cmp	r3, #7
 800b650:	bf28      	it	cs
 800b652:	2307      	movcs	r3, #7
 800b654:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	89fa      	ldrh	r2, [r7, #14]
 800b65a:	4619      	mov	r1, r3
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f001 fda9 	bl	800d1b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b662:	e090      	b.n	800b786 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	785a      	ldrb	r2, [r3, #1]
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	88db      	ldrh	r3, [r3, #6]
 800b672:	2b3f      	cmp	r3, #63	@ 0x3f
 800b674:	d803      	bhi.n	800b67e <USBD_CDC_Setup+0xa6>
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	88db      	ldrh	r3, [r3, #6]
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	e000      	b.n	800b680 <USBD_CDC_Setup+0xa8>
 800b67e:	2240      	movs	r2, #64	@ 0x40
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b686:	6939      	ldr	r1, [r7, #16]
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b68e:	461a      	mov	r2, r3
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f001 fdbe 	bl	800d212 <USBD_CtlPrepareRx>
      break;
 800b696:	e076      	b.n	800b786 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	33b0      	adds	r3, #176	@ 0xb0
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	4413      	add	r3, r2
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	7850      	ldrb	r0, [r2, #1]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	4798      	blx	r3
      break;
 800b6b4:	e067      	b.n	800b786 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	785b      	ldrb	r3, [r3, #1]
 800b6ba:	2b0b      	cmp	r3, #11
 800b6bc:	d851      	bhi.n	800b762 <USBD_CDC_Setup+0x18a>
 800b6be:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c4 <USBD_CDC_Setup+0xec>)
 800b6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c4:	0800b6f5 	.word	0x0800b6f5
 800b6c8:	0800b771 	.word	0x0800b771
 800b6cc:	0800b763 	.word	0x0800b763
 800b6d0:	0800b763 	.word	0x0800b763
 800b6d4:	0800b763 	.word	0x0800b763
 800b6d8:	0800b763 	.word	0x0800b763
 800b6dc:	0800b763 	.word	0x0800b763
 800b6e0:	0800b763 	.word	0x0800b763
 800b6e4:	0800b763 	.word	0x0800b763
 800b6e8:	0800b763 	.word	0x0800b763
 800b6ec:	0800b71f 	.word	0x0800b71f
 800b6f0:	0800b749 	.word	0x0800b749
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b03      	cmp	r3, #3
 800b6fe:	d107      	bne.n	800b710 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b700:	f107 030a 	add.w	r3, r7, #10
 800b704:	2202      	movs	r2, #2
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f001 fd53 	bl	800d1b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b70e:	e032      	b.n	800b776 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f001 fcd1 	bl	800d0ba <USBD_CtlError>
            ret = USBD_FAIL;
 800b718:	2303      	movs	r3, #3
 800b71a:	75fb      	strb	r3, [r7, #23]
          break;
 800b71c:	e02b      	b.n	800b776 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b03      	cmp	r3, #3
 800b728:	d107      	bne.n	800b73a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b72a:	f107 030d 	add.w	r3, r7, #13
 800b72e:	2201      	movs	r2, #1
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f001 fd3e 	bl	800d1b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b738:	e01d      	b.n	800b776 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f001 fcbc 	bl	800d0ba <USBD_CtlError>
            ret = USBD_FAIL;
 800b742:	2303      	movs	r3, #3
 800b744:	75fb      	strb	r3, [r7, #23]
          break;
 800b746:	e016      	b.n	800b776 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	2b03      	cmp	r3, #3
 800b752:	d00f      	beq.n	800b774 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f001 fcaf 	bl	800d0ba <USBD_CtlError>
            ret = USBD_FAIL;
 800b75c:	2303      	movs	r3, #3
 800b75e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b760:	e008      	b.n	800b774 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b762:	6839      	ldr	r1, [r7, #0]
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f001 fca8 	bl	800d0ba <USBD_CtlError>
          ret = USBD_FAIL;
 800b76a:	2303      	movs	r3, #3
 800b76c:	75fb      	strb	r3, [r7, #23]
          break;
 800b76e:	e002      	b.n	800b776 <USBD_CDC_Setup+0x19e>
          break;
 800b770:	bf00      	nop
 800b772:	e008      	b.n	800b786 <USBD_CDC_Setup+0x1ae>
          break;
 800b774:	bf00      	nop
      }
      break;
 800b776:	e006      	b.n	800b786 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f001 fc9d 	bl	800d0ba <USBD_CtlError>
      ret = USBD_FAIL;
 800b780:	2303      	movs	r3, #3
 800b782:	75fb      	strb	r3, [r7, #23]
      break;
 800b784:	bf00      	nop
  }

  return (uint8_t)ret;
 800b786:	7dfb      	ldrb	r3, [r7, #23]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3718      	adds	r7, #24
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	460b      	mov	r3, r1
 800b79a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b7a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	32b0      	adds	r2, #176	@ 0xb0
 800b7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d101      	bne.n	800b7ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	e065      	b.n	800b886 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	32b0      	adds	r2, #176	@ 0xb0
 800b7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b7ca:	78fb      	ldrb	r3, [r7, #3]
 800b7cc:	f003 020f 	and.w	r2, r3, #15
 800b7d0:	6879      	ldr	r1, [r7, #4]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4413      	add	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	440b      	add	r3, r1
 800b7dc:	3314      	adds	r3, #20
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d02f      	beq.n	800b844 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b7e4:	78fb      	ldrb	r3, [r7, #3]
 800b7e6:	f003 020f 	and.w	r2, r3, #15
 800b7ea:	6879      	ldr	r1, [r7, #4]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	4413      	add	r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	440b      	add	r3, r1
 800b7f6:	3314      	adds	r3, #20
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	78fb      	ldrb	r3, [r7, #3]
 800b7fc:	f003 010f 	and.w	r1, r3, #15
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	460b      	mov	r3, r1
 800b804:	00db      	lsls	r3, r3, #3
 800b806:	440b      	add	r3, r1
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4403      	add	r3, r0
 800b80c:	331c      	adds	r3, #28
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	fbb2 f1f3 	udiv	r1, r2, r3
 800b814:	fb01 f303 	mul.w	r3, r1, r3
 800b818:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d112      	bne.n	800b844 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b81e:	78fb      	ldrb	r3, [r7, #3]
 800b820:	f003 020f 	and.w	r2, r3, #15
 800b824:	6879      	ldr	r1, [r7, #4]
 800b826:	4613      	mov	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4413      	add	r3, r2
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	440b      	add	r3, r1
 800b830:	3314      	adds	r3, #20
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b836:	78f9      	ldrb	r1, [r7, #3]
 800b838:	2300      	movs	r3, #0
 800b83a:	2200      	movs	r2, #0
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f002 fa00 	bl	800dc42 <USBD_LL_Transmit>
 800b842:	e01f      	b.n	800b884 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2200      	movs	r2, #0
 800b848:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	33b0      	adds	r3, #176	@ 0xb0
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4413      	add	r3, r2
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d010      	beq.n	800b884 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	33b0      	adds	r3, #176	@ 0xb0
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	4413      	add	r3, r2
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	691b      	ldr	r3, [r3, #16]
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b880:	78fa      	ldrb	r2, [r7, #3]
 800b882:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b084      	sub	sp, #16
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
 800b896:	460b      	mov	r3, r1
 800b898:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	32b0      	adds	r2, #176	@ 0xb0
 800b8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	32b0      	adds	r2, #176	@ 0xb0
 800b8b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	e01a      	b.n	800b8f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f002 f9fe 	bl	800dcc6 <USBD_LL_GetRxDataSize>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	33b0      	adds	r3, #176	@ 0xb0
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	4413      	add	r3, r2
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	32b0      	adds	r2, #176	@ 0xb0
 800b910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b914:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b91c:	2303      	movs	r3, #3
 800b91e:	e024      	b.n	800b96a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	33b0      	adds	r3, #176	@ 0xb0
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	4413      	add	r3, r2
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d019      	beq.n	800b968 <USBD_CDC_EP0_RxReady+0x6a>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b93a:	2bff      	cmp	r3, #255	@ 0xff
 800b93c:	d014      	beq.n	800b968 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	33b0      	adds	r3, #176	@ 0xb0
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4413      	add	r3, r2
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b956:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b95e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	22ff      	movs	r2, #255	@ 0xff
 800b964:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
	...

0800b974 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b97c:	2182      	movs	r1, #130	@ 0x82
 800b97e:	4818      	ldr	r0, [pc, #96]	@ (800b9e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b980:	f000 fd62 	bl	800c448 <USBD_GetEpDesc>
 800b984:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b986:	2101      	movs	r1, #1
 800b988:	4815      	ldr	r0, [pc, #84]	@ (800b9e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b98a:	f000 fd5d 	bl	800c448 <USBD_GetEpDesc>
 800b98e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b990:	2181      	movs	r1, #129	@ 0x81
 800b992:	4813      	ldr	r0, [pc, #76]	@ (800b9e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b994:	f000 fd58 	bl	800c448 <USBD_GetEpDesc>
 800b998:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	2210      	movs	r2, #16
 800b9a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d006      	beq.n	800b9ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9b4:	711a      	strb	r2, [r3, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d006      	beq.n	800b9ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9c8:	711a      	strb	r2, [r3, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2243      	movs	r2, #67	@ 0x43
 800b9d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b9d4:	4b02      	ldr	r3, [pc, #8]	@ (800b9e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3718      	adds	r7, #24
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	2000005c 	.word	0x2000005c

0800b9e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b9ec:	2182      	movs	r1, #130	@ 0x82
 800b9ee:	4818      	ldr	r0, [pc, #96]	@ (800ba50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b9f0:	f000 fd2a 	bl	800c448 <USBD_GetEpDesc>
 800b9f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b9f6:	2101      	movs	r1, #1
 800b9f8:	4815      	ldr	r0, [pc, #84]	@ (800ba50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b9fa:	f000 fd25 	bl	800c448 <USBD_GetEpDesc>
 800b9fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ba00:	2181      	movs	r1, #129	@ 0x81
 800ba02:	4813      	ldr	r0, [pc, #76]	@ (800ba50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ba04:	f000 fd20 	bl	800c448 <USBD_GetEpDesc>
 800ba08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	2210      	movs	r2, #16
 800ba14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d006      	beq.n	800ba2a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	711a      	strb	r2, [r3, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f042 0202 	orr.w	r2, r2, #2
 800ba28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d006      	beq.n	800ba3e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	711a      	strb	r2, [r3, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f042 0202 	orr.w	r2, r2, #2
 800ba3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2243      	movs	r2, #67	@ 0x43
 800ba42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ba44:	4b02      	ldr	r3, [pc, #8]	@ (800ba50 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	2000005c 	.word	0x2000005c

0800ba54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ba5c:	2182      	movs	r1, #130	@ 0x82
 800ba5e:	4818      	ldr	r0, [pc, #96]	@ (800bac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ba60:	f000 fcf2 	bl	800c448 <USBD_GetEpDesc>
 800ba64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ba66:	2101      	movs	r1, #1
 800ba68:	4815      	ldr	r0, [pc, #84]	@ (800bac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ba6a:	f000 fced 	bl	800c448 <USBD_GetEpDesc>
 800ba6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ba70:	2181      	movs	r1, #129	@ 0x81
 800ba72:	4813      	ldr	r0, [pc, #76]	@ (800bac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ba74:	f000 fce8 	bl	800c448 <USBD_GetEpDesc>
 800ba78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	2210      	movs	r2, #16
 800ba84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d006      	beq.n	800ba9a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba94:	711a      	strb	r2, [r3, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d006      	beq.n	800baae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800baa8:	711a      	strb	r2, [r3, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2243      	movs	r2, #67	@ 0x43
 800bab2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bab4:	4b02      	ldr	r3, [pc, #8]	@ (800bac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3718      	adds	r7, #24
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	2000005c 	.word	0x2000005c

0800bac4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	220a      	movs	r2, #10
 800bad0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bad2:	4b03      	ldr	r3, [pc, #12]	@ (800bae0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr
 800bae0:	20000018 	.word	0x20000018

0800bae4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d101      	bne.n	800baf8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800baf4:	2303      	movs	r3, #3
 800baf6:	e009      	b.n	800bb0c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	33b0      	adds	r3, #176	@ 0xb0
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4413      	add	r3, r2
 800bb06:	683a      	ldr	r2, [r7, #0]
 800bb08:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bb0a:	2300      	movs	r3, #0
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b087      	sub	sp, #28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	32b0      	adds	r2, #176	@ 0xb0
 800bb2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb32:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d101      	bne.n	800bb3e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	e008      	b.n	800bb50 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	371c      	adds	r7, #28
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	32b0      	adds	r2, #176	@ 0xb0
 800bb70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d101      	bne.n	800bb80 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	e004      	b.n	800bb8a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	683a      	ldr	r2, [r7, #0]
 800bb84:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3714      	adds	r7, #20
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr
	...

0800bb98 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	32b0      	adds	r2, #176	@ 0xb0
 800bbaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bbba:	2303      	movs	r3, #3
 800bbbc:	e025      	b.n	800bc0a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d11f      	bne.n	800bc08 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bbd0:	4b10      	ldr	r3, [pc, #64]	@ (800bc14 <USBD_CDC_TransmitPacket+0x7c>)
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	f003 020f 	and.w	r2, r3, #15
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	4403      	add	r3, r0
 800bbea:	3314      	adds	r3, #20
 800bbec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bbee:	4b09      	ldr	r3, [pc, #36]	@ (800bc14 <USBD_CDC_TransmitPacket+0x7c>)
 800bbf0:	7819      	ldrb	r1, [r3, #0]
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f002 f81f 	bl	800dc42 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	2000009f 	.word	0x2000009f

0800bc18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	32b0      	adds	r2, #176	@ 0xb0
 800bc2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc2e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	32b0      	adds	r2, #176	@ 0xb0
 800bc3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d101      	bne.n	800bc46 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bc42:	2303      	movs	r3, #3
 800bc44:	e018      	b.n	800bc78 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	7c1b      	ldrb	r3, [r3, #16]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10a      	bne.n	800bc64 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc4e:	4b0c      	ldr	r3, [pc, #48]	@ (800bc80 <USBD_CDC_ReceivePacket+0x68>)
 800bc50:	7819      	ldrb	r1, [r3, #0]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bc58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f002 f811 	bl	800dc84 <USBD_LL_PrepareReceive>
 800bc62:	e008      	b.n	800bc76 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc64:	4b06      	ldr	r3, [pc, #24]	@ (800bc80 <USBD_CDC_ReceivePacket+0x68>)
 800bc66:	7819      	ldrb	r1, [r3, #0]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bc6e:	2340      	movs	r3, #64	@ 0x40
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f002 f807 	bl	800dc84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	200000a0 	.word	0x200000a0

0800bc84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d101      	bne.n	800bc9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bc98:	2303      	movs	r3, #3
 800bc9a:	e01f      	b.n	800bcdc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d003      	beq.n	800bcc2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	79fa      	ldrb	r2, [r7, #7]
 800bcce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f001 fe81 	bl	800d9d8 <USBD_LL_Init>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3718      	adds	r7, #24
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d101      	bne.n	800bcfc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	e025      	b.n	800bd48 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	32ae      	adds	r2, #174	@ 0xae
 800bd0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00f      	beq.n	800bd38 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	32ae      	adds	r2, #174	@ 0xae
 800bd22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd28:	f107 020e 	add.w	r2, r7, #14
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	4798      	blx	r3
 800bd30:	4602      	mov	r2, r0
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bd3e:	1c5a      	adds	r2, r3, #1
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f001 fe89 	bl	800da70 <USBD_LL_Start>
 800bd5e:	4603      	mov	r3, r0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd70:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	370c      	adds	r7, #12
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr

0800bd7e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b084      	sub	sp, #16
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	460b      	mov	r3, r1
 800bd88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d009      	beq.n	800bdac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	78fa      	ldrb	r2, [r7, #3]
 800bda2:	4611      	mov	r1, r2
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	4798      	blx	r3
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b084      	sub	sp, #16
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	78fa      	ldrb	r2, [r7, #3]
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	4798      	blx	r3
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bddc:	2303      	movs	r3, #3
 800bdde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b084      	sub	sp, #16
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
 800bdf2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f001 f922 	bl	800d046 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2201      	movs	r2, #1
 800be06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800be10:	461a      	mov	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800be1e:	f003 031f 	and.w	r3, r3, #31
 800be22:	2b02      	cmp	r3, #2
 800be24:	d01a      	beq.n	800be5c <USBD_LL_SetupStage+0x72>
 800be26:	2b02      	cmp	r3, #2
 800be28:	d822      	bhi.n	800be70 <USBD_LL_SetupStage+0x86>
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d002      	beq.n	800be34 <USBD_LL_SetupStage+0x4a>
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d00a      	beq.n	800be48 <USBD_LL_SetupStage+0x5e>
 800be32:	e01d      	b.n	800be70 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800be3a:	4619      	mov	r1, r3
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fb77 	bl	800c530 <USBD_StdDevReq>
 800be42:	4603      	mov	r3, r0
 800be44:	73fb      	strb	r3, [r7, #15]
      break;
 800be46:	e020      	b.n	800be8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fbdf 	bl	800c614 <USBD_StdItfReq>
 800be56:	4603      	mov	r3, r0
 800be58:	73fb      	strb	r3, [r7, #15]
      break;
 800be5a:	e016      	b.n	800be8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800be62:	4619      	mov	r1, r3
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 fc41 	bl	800c6ec <USBD_StdEPReq>
 800be6a:	4603      	mov	r3, r0
 800be6c:	73fb      	strb	r3, [r7, #15]
      break;
 800be6e:	e00c      	b.n	800be8a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800be76:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	4619      	mov	r1, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f001 fe56 	bl	800db30 <USBD_LL_StallEP>
 800be84:	4603      	mov	r3, r0
 800be86:	73fb      	strb	r3, [r7, #15]
      break;
 800be88:	bf00      	nop
  }

  return ret;
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b086      	sub	sp, #24
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	460b      	mov	r3, r1
 800be9e:	607a      	str	r2, [r7, #4]
 800bea0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bea2:	2300      	movs	r3, #0
 800bea4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bea6:	7afb      	ldrb	r3, [r7, #11]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d177      	bne.n	800bf9c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800beb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800beba:	2b03      	cmp	r3, #3
 800bebc:	f040 80a1 	bne.w	800c002 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	693a      	ldr	r2, [r7, #16]
 800bec6:	8992      	ldrh	r2, [r2, #12]
 800bec8:	4293      	cmp	r3, r2
 800beca:	d91c      	bls.n	800bf06 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	693a      	ldr	r2, [r7, #16]
 800bed2:	8992      	ldrh	r2, [r2, #12]
 800bed4:	1a9a      	subs	r2, r3, r2
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	693a      	ldr	r2, [r7, #16]
 800bee0:	8992      	ldrh	r2, [r2, #12]
 800bee2:	441a      	add	r2, r3
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	6919      	ldr	r1, [r3, #16]
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	899b      	ldrh	r3, [r3, #12]
 800bef0:	461a      	mov	r2, r3
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	4293      	cmp	r3, r2
 800bef8:	bf38      	it	cc
 800befa:	4613      	movcc	r3, r2
 800befc:	461a      	mov	r2, r3
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f001 f9a8 	bl	800d254 <USBD_CtlContinueRx>
 800bf04:	e07d      	b.n	800c002 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bf0c:	f003 031f 	and.w	r3, r3, #31
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d014      	beq.n	800bf3e <USBD_LL_DataOutStage+0xaa>
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d81d      	bhi.n	800bf54 <USBD_LL_DataOutStage+0xc0>
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <USBD_LL_DataOutStage+0x8e>
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d003      	beq.n	800bf28 <USBD_LL_DataOutStage+0x94>
 800bf20:	e018      	b.n	800bf54 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bf22:	2300      	movs	r3, #0
 800bf24:	75bb      	strb	r3, [r7, #22]
            break;
 800bf26:	e018      	b.n	800bf5a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	4619      	mov	r1, r3
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 fa6e 	bl	800c414 <USBD_CoreFindIF>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	75bb      	strb	r3, [r7, #22]
            break;
 800bf3c:	e00d      	b.n	800bf5a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	4619      	mov	r1, r3
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f000 fa70 	bl	800c42e <USBD_CoreFindEP>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	75bb      	strb	r3, [r7, #22]
            break;
 800bf52:	e002      	b.n	800bf5a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bf54:	2300      	movs	r3, #0
 800bf56:	75bb      	strb	r3, [r7, #22]
            break;
 800bf58:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bf5a:	7dbb      	ldrb	r3, [r7, #22]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d119      	bne.n	800bf94 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	2b03      	cmp	r3, #3
 800bf6a:	d113      	bne.n	800bf94 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bf6c:	7dba      	ldrb	r2, [r7, #22]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	32ae      	adds	r2, #174	@ 0xae
 800bf72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00b      	beq.n	800bf94 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800bf7c:	7dba      	ldrb	r2, [r7, #22]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bf84:	7dba      	ldrb	r2, [r7, #22]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	32ae      	adds	r2, #174	@ 0xae
 800bf8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf8e:	691b      	ldr	r3, [r3, #16]
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f001 f96e 	bl	800d276 <USBD_CtlSendStatus>
 800bf9a:	e032      	b.n	800c002 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bf9c:	7afb      	ldrb	r3, [r7, #11]
 800bf9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f000 fa41 	bl	800c42e <USBD_CoreFindEP>
 800bfac:	4603      	mov	r3, r0
 800bfae:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfb0:	7dbb      	ldrb	r3, [r7, #22]
 800bfb2:	2bff      	cmp	r3, #255	@ 0xff
 800bfb4:	d025      	beq.n	800c002 <USBD_LL_DataOutStage+0x16e>
 800bfb6:	7dbb      	ldrb	r3, [r7, #22]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d122      	bne.n	800c002 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b03      	cmp	r3, #3
 800bfc6:	d117      	bne.n	800bff8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bfc8:	7dba      	ldrb	r2, [r7, #22]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	32ae      	adds	r2, #174	@ 0xae
 800bfce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfd2:	699b      	ldr	r3, [r3, #24]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00f      	beq.n	800bff8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800bfd8:	7dba      	ldrb	r2, [r7, #22]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bfe0:	7dba      	ldrb	r2, [r7, #22]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	32ae      	adds	r2, #174	@ 0xae
 800bfe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfea:	699b      	ldr	r3, [r3, #24]
 800bfec:	7afa      	ldrb	r2, [r7, #11]
 800bfee:	4611      	mov	r1, r2
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	4798      	blx	r3
 800bff4:	4603      	mov	r3, r0
 800bff6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bff8:	7dfb      	ldrb	r3, [r7, #23]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d001      	beq.n	800c002 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800bffe:	7dfb      	ldrb	r3, [r7, #23]
 800c000:	e000      	b.n	800c004 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3718      	adds	r7, #24
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b086      	sub	sp, #24
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	460b      	mov	r3, r1
 800c016:	607a      	str	r2, [r7, #4]
 800c018:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c01a:	7afb      	ldrb	r3, [r7, #11]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d178      	bne.n	800c112 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	3314      	adds	r3, #20
 800c024:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d163      	bne.n	800c0f8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	693a      	ldr	r2, [r7, #16]
 800c036:	8992      	ldrh	r2, [r2, #12]
 800c038:	4293      	cmp	r3, r2
 800c03a:	d91c      	bls.n	800c076 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	8992      	ldrh	r2, [r2, #12]
 800c044:	1a9a      	subs	r2, r3, r2
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	693a      	ldr	r2, [r7, #16]
 800c050:	8992      	ldrh	r2, [r2, #12]
 800c052:	441a      	add	r2, r3
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	6919      	ldr	r1, [r3, #16]
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	461a      	mov	r2, r3
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f001 f8c4 	bl	800d1f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c068:	2300      	movs	r3, #0
 800c06a:	2200      	movs	r2, #0
 800c06c:	2100      	movs	r1, #0
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f001 fe08 	bl	800dc84 <USBD_LL_PrepareReceive>
 800c074:	e040      	b.n	800c0f8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	899b      	ldrh	r3, [r3, #12]
 800c07a:	461a      	mov	r2, r3
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	429a      	cmp	r2, r3
 800c082:	d11c      	bne.n	800c0be <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d316      	bcc.n	800c0be <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d20f      	bcs.n	800c0be <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c09e:	2200      	movs	r2, #0
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f001 f8a4 	bl	800d1f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	2100      	movs	r1, #0
 800c0b6:	68f8      	ldr	r0, [r7, #12]
 800c0b8:	f001 fde4 	bl	800dc84 <USBD_LL_PrepareReceive>
 800c0bc:	e01c      	b.n	800c0f8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	2b03      	cmp	r3, #3
 800c0c8:	d10f      	bne.n	800c0ea <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d009      	beq.n	800c0ea <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0ea:	2180      	movs	r1, #128	@ 0x80
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f001 fd1f 	bl	800db30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f001 f8d2 	bl	800d29c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d03a      	beq.n	800c178 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f7ff fe30 	bl	800bd68 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c110:	e032      	b.n	800c178 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c112:	7afb      	ldrb	r3, [r7, #11]
 800c114:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	4619      	mov	r1, r3
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f000 f986 	bl	800c42e <USBD_CoreFindEP>
 800c122:	4603      	mov	r3, r0
 800c124:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c126:	7dfb      	ldrb	r3, [r7, #23]
 800c128:	2bff      	cmp	r3, #255	@ 0xff
 800c12a:	d025      	beq.n	800c178 <USBD_LL_DataInStage+0x16c>
 800c12c:	7dfb      	ldrb	r3, [r7, #23]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d122      	bne.n	800c178 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	d11c      	bne.n	800c178 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c13e:	7dfa      	ldrb	r2, [r7, #23]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	32ae      	adds	r2, #174	@ 0xae
 800c144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d014      	beq.n	800c178 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800c14e:	7dfa      	ldrb	r2, [r7, #23]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c156:	7dfa      	ldrb	r2, [r7, #23]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	32ae      	adds	r2, #174	@ 0xae
 800c15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c160:	695b      	ldr	r3, [r3, #20]
 800c162:	7afa      	ldrb	r2, [r7, #11]
 800c164:	4611      	mov	r1, r2
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	4798      	blx	r3
 800c16a:	4603      	mov	r3, r0
 800c16c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c16e:	7dbb      	ldrb	r3, [r7, #22]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d001      	beq.n	800c178 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800c174:	7dbb      	ldrb	r3, [r7, #22]
 800c176:	e000      	b.n	800c17a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3718      	adds	r7, #24
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b084      	sub	sp, #16
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c18a:	2300      	movs	r3, #0
 800c18c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d014      	beq.n	800c1e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00e      	beq.n	800c1e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	6852      	ldr	r2, [r2, #4]
 800c1d6:	b2d2      	uxtb	r2, r2
 800c1d8:	4611      	mov	r1, r2
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	4798      	blx	r3
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d001      	beq.n	800c1e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c1e4:	2303      	movs	r3, #3
 800c1e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c1e8:	2340      	movs	r3, #64	@ 0x40
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f001 fc59 	bl	800daa6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2240      	movs	r2, #64	@ 0x40
 800c200:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c204:	2340      	movs	r3, #64	@ 0x40
 800c206:	2200      	movs	r2, #0
 800c208:	2180      	movs	r1, #128	@ 0x80
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f001 fc4b 	bl	800daa6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2240      	movs	r2, #64	@ 0x40
 800c21c:	841a      	strh	r2, [r3, #32]

  return ret;
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	460b      	mov	r3, r1
 800c232:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	78fa      	ldrb	r2, [r7, #3]
 800c238:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c256:	b2db      	uxtb	r3, r3
 800c258:	2b04      	cmp	r3, #4
 800c25a:	d006      	beq.n	800c26a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c262:	b2da      	uxtb	r2, r3
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2204      	movs	r2, #4
 800c26e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	2b04      	cmp	r3, #4
 800c292:	d106      	bne.n	800c2a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c2a2:	2300      	movs	r3, #0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2be:	b2db      	uxtb	r3, r3
 800c2c0:	2b03      	cmp	r3, #3
 800c2c2:	d110      	bne.n	800c2e6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00b      	beq.n	800c2e6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2d4:	69db      	ldr	r3, [r3, #28]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d005      	beq.n	800c2e6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2e0:	69db      	ldr	r3, [r3, #28]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	32ae      	adds	r2, #174	@ 0xae
 800c306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d101      	bne.n	800c312 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c30e:	2303      	movs	r3, #3
 800c310:	e01c      	b.n	800c34c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b03      	cmp	r3, #3
 800c31c:	d115      	bne.n	800c34a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	32ae      	adds	r2, #174	@ 0xae
 800c328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c32c:	6a1b      	ldr	r3, [r3, #32]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00b      	beq.n	800c34a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	32ae      	adds	r2, #174	@ 0xae
 800c33c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c340:	6a1b      	ldr	r3, [r3, #32]
 800c342:	78fa      	ldrb	r2, [r7, #3]
 800c344:	4611      	mov	r1, r2
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c34a:	2300      	movs	r3, #0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	460b      	mov	r3, r1
 800c35e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	32ae      	adds	r2, #174	@ 0xae
 800c36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d101      	bne.n	800c376 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c372:	2303      	movs	r3, #3
 800c374:	e01c      	b.n	800c3b0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	2b03      	cmp	r3, #3
 800c380:	d115      	bne.n	800c3ae <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	32ae      	adds	r2, #174	@ 0xae
 800c38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00b      	beq.n	800c3ae <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	32ae      	adds	r2, #174	@ 0xae
 800c3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a6:	78fa      	ldrb	r2, [r7, #3]
 800c3a8:	4611      	mov	r1, r2
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b084      	sub	sp, #16
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00e      	beq.n	800c40a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	6852      	ldr	r2, [r2, #4]
 800c3f8:	b2d2      	uxtb	r2, r2
 800c3fa:	4611      	mov	r1, r2
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	4798      	blx	r3
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c406:	2303      	movs	r3, #3
 800c408:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	460b      	mov	r3, r1
 800c41e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c420:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c422:	4618      	mov	r0, r3
 800c424:	370c      	adds	r7, #12
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c42e:	b480      	push	{r7}
 800c430:	b083      	sub	sp, #12
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	460b      	mov	r3, r1
 800c438:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c43a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	460b      	mov	r3, r1
 800c452:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c45c:	2300      	movs	r3, #0
 800c45e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	885b      	ldrh	r3, [r3, #2]
 800c464:	b29b      	uxth	r3, r3
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	7812      	ldrb	r2, [r2, #0]
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d91f      	bls.n	800c4ae <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c474:	e013      	b.n	800c49e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c476:	f107 030a 	add.w	r3, r7, #10
 800c47a:	4619      	mov	r1, r3
 800c47c:	6978      	ldr	r0, [r7, #20]
 800c47e:	f000 f81b 	bl	800c4b8 <USBD_GetNextDesc>
 800c482:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	785b      	ldrb	r3, [r3, #1]
 800c488:	2b05      	cmp	r3, #5
 800c48a:	d108      	bne.n	800c49e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	789b      	ldrb	r3, [r3, #2]
 800c494:	78fa      	ldrb	r2, [r7, #3]
 800c496:	429a      	cmp	r2, r3
 800c498:	d008      	beq.n	800c4ac <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c49a:	2300      	movs	r3, #0
 800c49c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	885b      	ldrh	r3, [r3, #2]
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	897b      	ldrh	r3, [r7, #10]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d8e5      	bhi.n	800c476 <USBD_GetEpDesc+0x2e>
 800c4aa:	e000      	b.n	800c4ae <USBD_GetEpDesc+0x66>
          break;
 800c4ac:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c4ae:	693b      	ldr	r3, [r7, #16]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3718      	adds	r7, #24
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	881b      	ldrh	r3, [r3, #0]
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	7812      	ldrb	r2, [r2, #0]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4413      	add	r3, r2
 800c4e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3714      	adds	r7, #20
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b087      	sub	sp, #28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	3301      	adds	r3, #1
 800c506:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c50e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c512:	021b      	lsls	r3, r3, #8
 800c514:	b21a      	sxth	r2, r3
 800c516:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	b21b      	sxth	r3, r3
 800c51e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c520:	89fb      	ldrh	r3, [r7, #14]
}
 800c522:	4618      	mov	r0, r3
 800c524:	371c      	adds	r7, #28
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
	...

0800c530 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c53a:	2300      	movs	r3, #0
 800c53c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c546:	2b40      	cmp	r3, #64	@ 0x40
 800c548:	d005      	beq.n	800c556 <USBD_StdDevReq+0x26>
 800c54a:	2b40      	cmp	r3, #64	@ 0x40
 800c54c:	d857      	bhi.n	800c5fe <USBD_StdDevReq+0xce>
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00f      	beq.n	800c572 <USBD_StdDevReq+0x42>
 800c552:	2b20      	cmp	r3, #32
 800c554:	d153      	bne.n	800c5fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	32ae      	adds	r2, #174	@ 0xae
 800c560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	4798      	blx	r3
 800c56c:	4603      	mov	r3, r0
 800c56e:	73fb      	strb	r3, [r7, #15]
      break;
 800c570:	e04a      	b.n	800c608 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	785b      	ldrb	r3, [r3, #1]
 800c576:	2b09      	cmp	r3, #9
 800c578:	d83b      	bhi.n	800c5f2 <USBD_StdDevReq+0xc2>
 800c57a:	a201      	add	r2, pc, #4	@ (adr r2, 800c580 <USBD_StdDevReq+0x50>)
 800c57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c580:	0800c5d5 	.word	0x0800c5d5
 800c584:	0800c5e9 	.word	0x0800c5e9
 800c588:	0800c5f3 	.word	0x0800c5f3
 800c58c:	0800c5df 	.word	0x0800c5df
 800c590:	0800c5f3 	.word	0x0800c5f3
 800c594:	0800c5b3 	.word	0x0800c5b3
 800c598:	0800c5a9 	.word	0x0800c5a9
 800c59c:	0800c5f3 	.word	0x0800c5f3
 800c5a0:	0800c5cb 	.word	0x0800c5cb
 800c5a4:	0800c5bd 	.word	0x0800c5bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c5a8:	6839      	ldr	r1, [r7, #0]
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 fa3e 	bl	800ca2c <USBD_GetDescriptor>
          break;
 800c5b0:	e024      	b.n	800c5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c5b2:	6839      	ldr	r1, [r7, #0]
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fba3 	bl	800cd00 <USBD_SetAddress>
          break;
 800c5ba:	e01f      	b.n	800c5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c5bc:	6839      	ldr	r1, [r7, #0]
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fbe2 	bl	800cd88 <USBD_SetConfig>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	73fb      	strb	r3, [r7, #15]
          break;
 800c5c8:	e018      	b.n	800c5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c5ca:	6839      	ldr	r1, [r7, #0]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 fc85 	bl	800cedc <USBD_GetConfig>
          break;
 800c5d2:	e013      	b.n	800c5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c5d4:	6839      	ldr	r1, [r7, #0]
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 fcb6 	bl	800cf48 <USBD_GetStatus>
          break;
 800c5dc:	e00e      	b.n	800c5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c5de:	6839      	ldr	r1, [r7, #0]
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 fce5 	bl	800cfb0 <USBD_SetFeature>
          break;
 800c5e6:	e009      	b.n	800c5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 fd09 	bl	800d002 <USBD_ClrFeature>
          break;
 800c5f0:	e004      	b.n	800c5fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 fd60 	bl	800d0ba <USBD_CtlError>
          break;
 800c5fa:	bf00      	nop
      }
      break;
 800c5fc:	e004      	b.n	800c608 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c5fe:	6839      	ldr	r1, [r7, #0]
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 fd5a 	bl	800d0ba <USBD_CtlError>
      break;
 800c606:	bf00      	nop
  }

  return ret;
 800c608:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop

0800c614 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c61e:	2300      	movs	r3, #0
 800c620:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c62a:	2b40      	cmp	r3, #64	@ 0x40
 800c62c:	d005      	beq.n	800c63a <USBD_StdItfReq+0x26>
 800c62e:	2b40      	cmp	r3, #64	@ 0x40
 800c630:	d852      	bhi.n	800c6d8 <USBD_StdItfReq+0xc4>
 800c632:	2b00      	cmp	r3, #0
 800c634:	d001      	beq.n	800c63a <USBD_StdItfReq+0x26>
 800c636:	2b20      	cmp	r3, #32
 800c638:	d14e      	bne.n	800c6d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c640:	b2db      	uxtb	r3, r3
 800c642:	3b01      	subs	r3, #1
 800c644:	2b02      	cmp	r3, #2
 800c646:	d840      	bhi.n	800c6ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	889b      	ldrh	r3, [r3, #4]
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d836      	bhi.n	800c6c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	889b      	ldrh	r3, [r3, #4]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	4619      	mov	r1, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7ff feda 	bl	800c414 <USBD_CoreFindIF>
 800c660:	4603      	mov	r3, r0
 800c662:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c664:	7bbb      	ldrb	r3, [r7, #14]
 800c666:	2bff      	cmp	r3, #255	@ 0xff
 800c668:	d01d      	beq.n	800c6a6 <USBD_StdItfReq+0x92>
 800c66a:	7bbb      	ldrb	r3, [r7, #14]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d11a      	bne.n	800c6a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c670:	7bba      	ldrb	r2, [r7, #14]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	32ae      	adds	r2, #174	@ 0xae
 800c676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00f      	beq.n	800c6a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c680:	7bba      	ldrb	r2, [r7, #14]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c688:	7bba      	ldrb	r2, [r7, #14]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	32ae      	adds	r2, #174	@ 0xae
 800c68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	6839      	ldr	r1, [r7, #0]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	4798      	blx	r3
 800c69a:	4603      	mov	r3, r0
 800c69c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c69e:	e004      	b.n	800c6aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c6a4:	e001      	b.n	800c6aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c6a6:	2303      	movs	r3, #3
 800c6a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	88db      	ldrh	r3, [r3, #6]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d110      	bne.n	800c6d4 <USBD_StdItfReq+0xc0>
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d10d      	bne.n	800c6d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 fddc 	bl	800d276 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c6be:	e009      	b.n	800c6d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c6c0:	6839      	ldr	r1, [r7, #0]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 fcf9 	bl	800d0ba <USBD_CtlError>
          break;
 800c6c8:	e004      	b.n	800c6d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c6ca:	6839      	ldr	r1, [r7, #0]
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 fcf4 	bl	800d0ba <USBD_CtlError>
          break;
 800c6d2:	e000      	b.n	800c6d6 <USBD_StdItfReq+0xc2>
          break;
 800c6d4:	bf00      	nop
      }
      break;
 800c6d6:	e004      	b.n	800c6e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c6d8:	6839      	ldr	r1, [r7, #0]
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 fced 	bl	800d0ba <USBD_CtlError>
      break;
 800c6e0:	bf00      	nop
  }

  return ret;
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	889b      	ldrh	r3, [r3, #4]
 800c6fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c708:	2b40      	cmp	r3, #64	@ 0x40
 800c70a:	d007      	beq.n	800c71c <USBD_StdEPReq+0x30>
 800c70c:	2b40      	cmp	r3, #64	@ 0x40
 800c70e:	f200 8181 	bhi.w	800ca14 <USBD_StdEPReq+0x328>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d02a      	beq.n	800c76c <USBD_StdEPReq+0x80>
 800c716:	2b20      	cmp	r3, #32
 800c718:	f040 817c 	bne.w	800ca14 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c71c:	7bbb      	ldrb	r3, [r7, #14]
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7ff fe84 	bl	800c42e <USBD_CoreFindEP>
 800c726:	4603      	mov	r3, r0
 800c728:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c72a:	7b7b      	ldrb	r3, [r7, #13]
 800c72c:	2bff      	cmp	r3, #255	@ 0xff
 800c72e:	f000 8176 	beq.w	800ca1e <USBD_StdEPReq+0x332>
 800c732:	7b7b      	ldrb	r3, [r7, #13]
 800c734:	2b00      	cmp	r3, #0
 800c736:	f040 8172 	bne.w	800ca1e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c73a:	7b7a      	ldrb	r2, [r7, #13]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c742:	7b7a      	ldrb	r2, [r7, #13]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	32ae      	adds	r2, #174	@ 0xae
 800c748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c74c:	689b      	ldr	r3, [r3, #8]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	f000 8165 	beq.w	800ca1e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c754:	7b7a      	ldrb	r2, [r7, #13]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	32ae      	adds	r2, #174	@ 0xae
 800c75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	4798      	blx	r3
 800c766:	4603      	mov	r3, r0
 800c768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c76a:	e158      	b.n	800ca1e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	785b      	ldrb	r3, [r3, #1]
 800c770:	2b03      	cmp	r3, #3
 800c772:	d008      	beq.n	800c786 <USBD_StdEPReq+0x9a>
 800c774:	2b03      	cmp	r3, #3
 800c776:	f300 8147 	bgt.w	800ca08 <USBD_StdEPReq+0x31c>
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f000 809b 	beq.w	800c8b6 <USBD_StdEPReq+0x1ca>
 800c780:	2b01      	cmp	r3, #1
 800c782:	d03c      	beq.n	800c7fe <USBD_StdEPReq+0x112>
 800c784:	e140      	b.n	800ca08 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	2b02      	cmp	r3, #2
 800c790:	d002      	beq.n	800c798 <USBD_StdEPReq+0xac>
 800c792:	2b03      	cmp	r3, #3
 800c794:	d016      	beq.n	800c7c4 <USBD_StdEPReq+0xd8>
 800c796:	e02c      	b.n	800c7f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c798:	7bbb      	ldrb	r3, [r7, #14]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d00d      	beq.n	800c7ba <USBD_StdEPReq+0xce>
 800c79e:	7bbb      	ldrb	r3, [r7, #14]
 800c7a0:	2b80      	cmp	r3, #128	@ 0x80
 800c7a2:	d00a      	beq.n	800c7ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7a4:	7bbb      	ldrb	r3, [r7, #14]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f001 f9c1 	bl	800db30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7ae:	2180      	movs	r1, #128	@ 0x80
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f001 f9bd 	bl	800db30 <USBD_LL_StallEP>
 800c7b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c7b8:	e020      	b.n	800c7fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fc7c 	bl	800d0ba <USBD_CtlError>
              break;
 800c7c2:	e01b      	b.n	800c7fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	885b      	ldrh	r3, [r3, #2]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d10e      	bne.n	800c7ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c7cc:	7bbb      	ldrb	r3, [r7, #14]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00b      	beq.n	800c7ea <USBD_StdEPReq+0xfe>
 800c7d2:	7bbb      	ldrb	r3, [r7, #14]
 800c7d4:	2b80      	cmp	r3, #128	@ 0x80
 800c7d6:	d008      	beq.n	800c7ea <USBD_StdEPReq+0xfe>
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	88db      	ldrh	r3, [r3, #6]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d104      	bne.n	800c7ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7e0:	7bbb      	ldrb	r3, [r7, #14]
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f001 f9a3 	bl	800db30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fd43 	bl	800d276 <USBD_CtlSendStatus>

              break;
 800c7f0:	e004      	b.n	800c7fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c7f2:	6839      	ldr	r1, [r7, #0]
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fc60 	bl	800d0ba <USBD_CtlError>
              break;
 800c7fa:	bf00      	nop
          }
          break;
 800c7fc:	e109      	b.n	800ca12 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c804:	b2db      	uxtb	r3, r3
 800c806:	2b02      	cmp	r3, #2
 800c808:	d002      	beq.n	800c810 <USBD_StdEPReq+0x124>
 800c80a:	2b03      	cmp	r3, #3
 800c80c:	d016      	beq.n	800c83c <USBD_StdEPReq+0x150>
 800c80e:	e04b      	b.n	800c8a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c810:	7bbb      	ldrb	r3, [r7, #14]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d00d      	beq.n	800c832 <USBD_StdEPReq+0x146>
 800c816:	7bbb      	ldrb	r3, [r7, #14]
 800c818:	2b80      	cmp	r3, #128	@ 0x80
 800c81a:	d00a      	beq.n	800c832 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c81c:	7bbb      	ldrb	r3, [r7, #14]
 800c81e:	4619      	mov	r1, r3
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f001 f985 	bl	800db30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c826:	2180      	movs	r1, #128	@ 0x80
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f001 f981 	bl	800db30 <USBD_LL_StallEP>
 800c82e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c830:	e040      	b.n	800c8b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c832:	6839      	ldr	r1, [r7, #0]
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fc40 	bl	800d0ba <USBD_CtlError>
              break;
 800c83a:	e03b      	b.n	800c8b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	885b      	ldrh	r3, [r3, #2]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d136      	bne.n	800c8b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c844:	7bbb      	ldrb	r3, [r7, #14]
 800c846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d004      	beq.n	800c858 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c84e:	7bbb      	ldrb	r3, [r7, #14]
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f001 f98b 	bl	800db6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fd0c 	bl	800d276 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c85e:	7bbb      	ldrb	r3, [r7, #14]
 800c860:	4619      	mov	r1, r3
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f7ff fde3 	bl	800c42e <USBD_CoreFindEP>
 800c868:	4603      	mov	r3, r0
 800c86a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c86c:	7b7b      	ldrb	r3, [r7, #13]
 800c86e:	2bff      	cmp	r3, #255	@ 0xff
 800c870:	d01f      	beq.n	800c8b2 <USBD_StdEPReq+0x1c6>
 800c872:	7b7b      	ldrb	r3, [r7, #13]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d11c      	bne.n	800c8b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c878:	7b7a      	ldrb	r2, [r7, #13]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c880:	7b7a      	ldrb	r2, [r7, #13]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	32ae      	adds	r2, #174	@ 0xae
 800c886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d010      	beq.n	800c8b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c890:	7b7a      	ldrb	r2, [r7, #13]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	32ae      	adds	r2, #174	@ 0xae
 800c896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	6839      	ldr	r1, [r7, #0]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	4798      	blx	r3
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c8a6:	e004      	b.n	800c8b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 fc05 	bl	800d0ba <USBD_CtlError>
              break;
 800c8b0:	e000      	b.n	800c8b4 <USBD_StdEPReq+0x1c8>
              break;
 800c8b2:	bf00      	nop
          }
          break;
 800c8b4:	e0ad      	b.n	800ca12 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d002      	beq.n	800c8c8 <USBD_StdEPReq+0x1dc>
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	d033      	beq.n	800c92e <USBD_StdEPReq+0x242>
 800c8c6:	e099      	b.n	800c9fc <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8c8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d007      	beq.n	800c8de <USBD_StdEPReq+0x1f2>
 800c8ce:	7bbb      	ldrb	r3, [r7, #14]
 800c8d0:	2b80      	cmp	r3, #128	@ 0x80
 800c8d2:	d004      	beq.n	800c8de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c8d4:	6839      	ldr	r1, [r7, #0]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fbef 	bl	800d0ba <USBD_CtlError>
                break;
 800c8dc:	e093      	b.n	800ca06 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	da0b      	bge.n	800c8fe <USBD_StdEPReq+0x212>
 800c8e6:	7bbb      	ldrb	r3, [r7, #14]
 800c8e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	3310      	adds	r3, #16
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	3304      	adds	r3, #4
 800c8fc:	e00b      	b.n	800c916 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c8fe:	7bbb      	ldrb	r3, [r7, #14]
 800c900:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c904:	4613      	mov	r3, r2
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	4413      	add	r3, r2
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	4413      	add	r3, r2
 800c914:	3304      	adds	r3, #4
 800c916:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	2200      	movs	r2, #0
 800c91c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	330e      	adds	r3, #14
 800c922:	2202      	movs	r2, #2
 800c924:	4619      	mov	r1, r3
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fc44 	bl	800d1b4 <USBD_CtlSendData>
              break;
 800c92c:	e06b      	b.n	800ca06 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c92e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c932:	2b00      	cmp	r3, #0
 800c934:	da11      	bge.n	800c95a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c936:	7bbb      	ldrb	r3, [r7, #14]
 800c938:	f003 020f 	and.w	r2, r3, #15
 800c93c:	6879      	ldr	r1, [r7, #4]
 800c93e:	4613      	mov	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	4413      	add	r3, r2
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	440b      	add	r3, r1
 800c948:	3323      	adds	r3, #35	@ 0x23
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d117      	bne.n	800c980 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c950:	6839      	ldr	r1, [r7, #0]
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fbb1 	bl	800d0ba <USBD_CtlError>
                  break;
 800c958:	e055      	b.n	800ca06 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c95a:	7bbb      	ldrb	r3, [r7, #14]
 800c95c:	f003 020f 	and.w	r2, r3, #15
 800c960:	6879      	ldr	r1, [r7, #4]
 800c962:	4613      	mov	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	4413      	add	r3, r2
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	440b      	add	r3, r1
 800c96c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d104      	bne.n	800c980 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fb9e 	bl	800d0ba <USBD_CtlError>
                  break;
 800c97e:	e042      	b.n	800ca06 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c984:	2b00      	cmp	r3, #0
 800c986:	da0b      	bge.n	800c9a0 <USBD_StdEPReq+0x2b4>
 800c988:	7bbb      	ldrb	r3, [r7, #14]
 800c98a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c98e:	4613      	mov	r3, r2
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	4413      	add	r3, r2
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	3310      	adds	r3, #16
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	4413      	add	r3, r2
 800c99c:	3304      	adds	r3, #4
 800c99e:	e00b      	b.n	800c9b8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c9a0:	7bbb      	ldrb	r3, [r7, #14]
 800c9a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	4413      	add	r3, r2
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c9ba:	7bbb      	ldrb	r3, [r7, #14]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d002      	beq.n	800c9c6 <USBD_StdEPReq+0x2da>
 800c9c0:	7bbb      	ldrb	r3, [r7, #14]
 800c9c2:	2b80      	cmp	r3, #128	@ 0x80
 800c9c4:	d103      	bne.n	800c9ce <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	739a      	strb	r2, [r3, #14]
 800c9cc:	e00e      	b.n	800c9ec <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c9ce:	7bbb      	ldrb	r3, [r7, #14]
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f001 f8ea 	bl	800dbac <USBD_LL_IsStallEP>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d003      	beq.n	800c9e6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	739a      	strb	r2, [r3, #14]
 800c9e4:	e002      	b.n	800c9ec <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	330e      	adds	r3, #14
 800c9f0:	2202      	movs	r2, #2
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fbdd 	bl	800d1b4 <USBD_CtlSendData>
              break;
 800c9fa:	e004      	b.n	800ca06 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fb5b 	bl	800d0ba <USBD_CtlError>
              break;
 800ca04:	bf00      	nop
          }
          break;
 800ca06:	e004      	b.n	800ca12 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800ca08:	6839      	ldr	r1, [r7, #0]
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 fb55 	bl	800d0ba <USBD_CtlError>
          break;
 800ca10:	bf00      	nop
      }
      break;
 800ca12:	e005      	b.n	800ca20 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800ca14:	6839      	ldr	r1, [r7, #0]
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fb4f 	bl	800d0ba <USBD_CtlError>
      break;
 800ca1c:	e000      	b.n	800ca20 <USBD_StdEPReq+0x334>
      break;
 800ca1e:	bf00      	nop
  }

  return ret;
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
	...

0800ca2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ca36:	2300      	movs	r3, #0
 800ca38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	885b      	ldrh	r3, [r3, #2]
 800ca46:	0a1b      	lsrs	r3, r3, #8
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	3b01      	subs	r3, #1
 800ca4c:	2b06      	cmp	r3, #6
 800ca4e:	f200 8128 	bhi.w	800cca2 <USBD_GetDescriptor+0x276>
 800ca52:	a201      	add	r2, pc, #4	@ (adr r2, 800ca58 <USBD_GetDescriptor+0x2c>)
 800ca54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca58:	0800ca75 	.word	0x0800ca75
 800ca5c:	0800ca8d 	.word	0x0800ca8d
 800ca60:	0800cacd 	.word	0x0800cacd
 800ca64:	0800cca3 	.word	0x0800cca3
 800ca68:	0800cca3 	.word	0x0800cca3
 800ca6c:	0800cc43 	.word	0x0800cc43
 800ca70:	0800cc6f 	.word	0x0800cc6f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	7c12      	ldrb	r2, [r2, #16]
 800ca80:	f107 0108 	add.w	r1, r7, #8
 800ca84:	4610      	mov	r0, r2
 800ca86:	4798      	blx	r3
 800ca88:	60f8      	str	r0, [r7, #12]
      break;
 800ca8a:	e112      	b.n	800ccb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	7c1b      	ldrb	r3, [r3, #16]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10d      	bne.n	800cab0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca9c:	f107 0208 	add.w	r2, r7, #8
 800caa0:	4610      	mov	r0, r2
 800caa2:	4798      	blx	r3
 800caa4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	3301      	adds	r3, #1
 800caaa:	2202      	movs	r2, #2
 800caac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800caae:	e100      	b.n	800ccb2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cab8:	f107 0208 	add.w	r2, r7, #8
 800cabc:	4610      	mov	r0, r2
 800cabe:	4798      	blx	r3
 800cac0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	3301      	adds	r3, #1
 800cac6:	2202      	movs	r2, #2
 800cac8:	701a      	strb	r2, [r3, #0]
      break;
 800caca:	e0f2      	b.n	800ccb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	885b      	ldrh	r3, [r3, #2]
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	2b05      	cmp	r3, #5
 800cad4:	f200 80ac 	bhi.w	800cc30 <USBD_GetDescriptor+0x204>
 800cad8:	a201      	add	r2, pc, #4	@ (adr r2, 800cae0 <USBD_GetDescriptor+0xb4>)
 800cada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cade:	bf00      	nop
 800cae0:	0800caf9 	.word	0x0800caf9
 800cae4:	0800cb2d 	.word	0x0800cb2d
 800cae8:	0800cb61 	.word	0x0800cb61
 800caec:	0800cb95 	.word	0x0800cb95
 800caf0:	0800cbc9 	.word	0x0800cbc9
 800caf4:	0800cbfd 	.word	0x0800cbfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00b      	beq.n	800cb1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	7c12      	ldrb	r2, [r2, #16]
 800cb10:	f107 0108 	add.w	r1, r7, #8
 800cb14:	4610      	mov	r0, r2
 800cb16:	4798      	blx	r3
 800cb18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb1a:	e091      	b.n	800cc40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb1c:	6839      	ldr	r1, [r7, #0]
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 facb 	bl	800d0ba <USBD_CtlError>
            err++;
 800cb24:	7afb      	ldrb	r3, [r7, #11]
 800cb26:	3301      	adds	r3, #1
 800cb28:	72fb      	strb	r3, [r7, #11]
          break;
 800cb2a:	e089      	b.n	800cc40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00b      	beq.n	800cb50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	687a      	ldr	r2, [r7, #4]
 800cb42:	7c12      	ldrb	r2, [r2, #16]
 800cb44:	f107 0108 	add.w	r1, r7, #8
 800cb48:	4610      	mov	r0, r2
 800cb4a:	4798      	blx	r3
 800cb4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb4e:	e077      	b.n	800cc40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb50:	6839      	ldr	r1, [r7, #0]
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 fab1 	bl	800d0ba <USBD_CtlError>
            err++;
 800cb58:	7afb      	ldrb	r3, [r7, #11]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	72fb      	strb	r3, [r7, #11]
          break;
 800cb5e:	e06f      	b.n	800cc40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00b      	beq.n	800cb84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	7c12      	ldrb	r2, [r2, #16]
 800cb78:	f107 0108 	add.w	r1, r7, #8
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	4798      	blx	r3
 800cb80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb82:	e05d      	b.n	800cc40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb84:	6839      	ldr	r1, [r7, #0]
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 fa97 	bl	800d0ba <USBD_CtlError>
            err++;
 800cb8c:	7afb      	ldrb	r3, [r7, #11]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	72fb      	strb	r3, [r7, #11]
          break;
 800cb92:	e055      	b.n	800cc40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cb9a:	691b      	ldr	r3, [r3, #16]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d00b      	beq.n	800cbb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cba6:	691b      	ldr	r3, [r3, #16]
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	7c12      	ldrb	r2, [r2, #16]
 800cbac:	f107 0108 	add.w	r1, r7, #8
 800cbb0:	4610      	mov	r0, r2
 800cbb2:	4798      	blx	r3
 800cbb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbb6:	e043      	b.n	800cc40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbb8:	6839      	ldr	r1, [r7, #0]
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 fa7d 	bl	800d0ba <USBD_CtlError>
            err++;
 800cbc0:	7afb      	ldrb	r3, [r7, #11]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	72fb      	strb	r3, [r7, #11]
          break;
 800cbc6:	e03b      	b.n	800cc40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbce:	695b      	ldr	r3, [r3, #20]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00b      	beq.n	800cbec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbda:	695b      	ldr	r3, [r3, #20]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	7c12      	ldrb	r2, [r2, #16]
 800cbe0:	f107 0108 	add.w	r1, r7, #8
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	4798      	blx	r3
 800cbe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbea:	e029      	b.n	800cc40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 fa63 	bl	800d0ba <USBD_CtlError>
            err++;
 800cbf4:	7afb      	ldrb	r3, [r7, #11]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	72fb      	strb	r3, [r7, #11]
          break;
 800cbfa:	e021      	b.n	800cc40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc02:	699b      	ldr	r3, [r3, #24]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d00b      	beq.n	800cc20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc0e:	699b      	ldr	r3, [r3, #24]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	7c12      	ldrb	r2, [r2, #16]
 800cc14:	f107 0108 	add.w	r1, r7, #8
 800cc18:	4610      	mov	r0, r2
 800cc1a:	4798      	blx	r3
 800cc1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc1e:	e00f      	b.n	800cc40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc20:	6839      	ldr	r1, [r7, #0]
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fa49 	bl	800d0ba <USBD_CtlError>
            err++;
 800cc28:	7afb      	ldrb	r3, [r7, #11]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	72fb      	strb	r3, [r7, #11]
          break;
 800cc2e:	e007      	b.n	800cc40 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cc30:	6839      	ldr	r1, [r7, #0]
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 fa41 	bl	800d0ba <USBD_CtlError>
          err++;
 800cc38:	7afb      	ldrb	r3, [r7, #11]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cc3e:	bf00      	nop
      }
      break;
 800cc40:	e037      	b.n	800ccb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	7c1b      	ldrb	r3, [r3, #16]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d109      	bne.n	800cc5e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc52:	f107 0208 	add.w	r2, r7, #8
 800cc56:	4610      	mov	r0, r2
 800cc58:	4798      	blx	r3
 800cc5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc5c:	e029      	b.n	800ccb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cc5e:	6839      	ldr	r1, [r7, #0]
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 fa2a 	bl	800d0ba <USBD_CtlError>
        err++;
 800cc66:	7afb      	ldrb	r3, [r7, #11]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	72fb      	strb	r3, [r7, #11]
      break;
 800cc6c:	e021      	b.n	800ccb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	7c1b      	ldrb	r3, [r3, #16]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10d      	bne.n	800cc92 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc7e:	f107 0208 	add.w	r2, r7, #8
 800cc82:	4610      	mov	r0, r2
 800cc84:	4798      	blx	r3
 800cc86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	2207      	movs	r2, #7
 800cc8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc90:	e00f      	b.n	800ccb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cc92:	6839      	ldr	r1, [r7, #0]
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 fa10 	bl	800d0ba <USBD_CtlError>
        err++;
 800cc9a:	7afb      	ldrb	r3, [r7, #11]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	72fb      	strb	r3, [r7, #11]
      break;
 800cca0:	e007      	b.n	800ccb2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 fa08 	bl	800d0ba <USBD_CtlError>
      err++;
 800ccaa:	7afb      	ldrb	r3, [r7, #11]
 800ccac:	3301      	adds	r3, #1
 800ccae:	72fb      	strb	r3, [r7, #11]
      break;
 800ccb0:	bf00      	nop
  }

  if (err != 0U)
 800ccb2:	7afb      	ldrb	r3, [r7, #11]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d11e      	bne.n	800ccf6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	88db      	ldrh	r3, [r3, #6]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d016      	beq.n	800ccee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ccc0:	893b      	ldrh	r3, [r7, #8]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00e      	beq.n	800cce4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	88da      	ldrh	r2, [r3, #6]
 800ccca:	893b      	ldrh	r3, [r7, #8]
 800cccc:	4293      	cmp	r3, r2
 800ccce:	bf28      	it	cs
 800ccd0:	4613      	movcs	r3, r2
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ccd6:	893b      	ldrh	r3, [r7, #8]
 800ccd8:	461a      	mov	r2, r3
 800ccda:	68f9      	ldr	r1, [r7, #12]
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 fa69 	bl	800d1b4 <USBD_CtlSendData>
 800cce2:	e009      	b.n	800ccf8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cce4:	6839      	ldr	r1, [r7, #0]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 f9e7 	bl	800d0ba <USBD_CtlError>
 800ccec:	e004      	b.n	800ccf8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fac1 	bl	800d276 <USBD_CtlSendStatus>
 800ccf4:	e000      	b.n	800ccf8 <USBD_GetDescriptor+0x2cc>
    return;
 800ccf6:	bf00      	nop
  }
}
 800ccf8:	3710      	adds	r7, #16
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop

0800cd00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	889b      	ldrh	r3, [r3, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d131      	bne.n	800cd76 <USBD_SetAddress+0x76>
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	88db      	ldrh	r3, [r3, #6]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d12d      	bne.n	800cd76 <USBD_SetAddress+0x76>
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	885b      	ldrh	r3, [r3, #2]
 800cd1e:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd20:	d829      	bhi.n	800cd76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	885b      	ldrh	r3, [r3, #2]
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	2b03      	cmp	r3, #3
 800cd38:	d104      	bne.n	800cd44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cd3a:	6839      	ldr	r1, [r7, #0]
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 f9bc 	bl	800d0ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd42:	e01d      	b.n	800cd80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	7bfa      	ldrb	r2, [r7, #15]
 800cd48:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
 800cd4e:	4619      	mov	r1, r3
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 ff57 	bl	800dc04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 fa8d 	bl	800d276 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cd5c:	7bfb      	ldrb	r3, [r7, #15]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d004      	beq.n	800cd6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2202      	movs	r2, #2
 800cd66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd6a:	e009      	b.n	800cd80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd74:	e004      	b.n	800cd80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cd76:	6839      	ldr	r1, [r7, #0]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 f99e 	bl	800d0ba <USBD_CtlError>
  }
}
 800cd7e:	bf00      	nop
 800cd80:	bf00      	nop
 800cd82:	3710      	adds	r7, #16
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd92:	2300      	movs	r3, #0
 800cd94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	885b      	ldrh	r3, [r3, #2]
 800cd9a:	b2da      	uxtb	r2, r3
 800cd9c:	4b4e      	ldr	r3, [pc, #312]	@ (800ced8 <USBD_SetConfig+0x150>)
 800cd9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cda0:	4b4d      	ldr	r3, [pc, #308]	@ (800ced8 <USBD_SetConfig+0x150>)
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d905      	bls.n	800cdb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 f985 	bl	800d0ba <USBD_CtlError>
    return USBD_FAIL;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	e08c      	b.n	800cece <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b02      	cmp	r3, #2
 800cdbe:	d002      	beq.n	800cdc6 <USBD_SetConfig+0x3e>
 800cdc0:	2b03      	cmp	r3, #3
 800cdc2:	d029      	beq.n	800ce18 <USBD_SetConfig+0x90>
 800cdc4:	e075      	b.n	800ceb2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cdc6:	4b44      	ldr	r3, [pc, #272]	@ (800ced8 <USBD_SetConfig+0x150>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d020      	beq.n	800ce10 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cdce:	4b42      	ldr	r3, [pc, #264]	@ (800ced8 <USBD_SetConfig+0x150>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cdd8:	4b3f      	ldr	r3, [pc, #252]	@ (800ced8 <USBD_SetConfig+0x150>)
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	4619      	mov	r1, r3
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7fe ffcd 	bl	800bd7e <USBD_SetClassConfig>
 800cde4:	4603      	mov	r3, r0
 800cde6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cde8:	7bfb      	ldrb	r3, [r7, #15]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d008      	beq.n	800ce00 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cdee:	6839      	ldr	r1, [r7, #0]
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 f962 	bl	800d0ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cdfe:	e065      	b.n	800cecc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 fa38 	bl	800d276 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2203      	movs	r2, #3
 800ce0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ce0e:	e05d      	b.n	800cecc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 fa30 	bl	800d276 <USBD_CtlSendStatus>
      break;
 800ce16:	e059      	b.n	800cecc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ce18:	4b2f      	ldr	r3, [pc, #188]	@ (800ced8 <USBD_SetConfig+0x150>)
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d112      	bne.n	800ce46 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2202      	movs	r2, #2
 800ce24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ce28:	4b2b      	ldr	r3, [pc, #172]	@ (800ced8 <USBD_SetConfig+0x150>)
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ce32:	4b29      	ldr	r3, [pc, #164]	@ (800ced8 <USBD_SetConfig+0x150>)
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	4619      	mov	r1, r3
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7fe ffbc 	bl	800bdb6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 fa19 	bl	800d276 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ce44:	e042      	b.n	800cecc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ce46:	4b24      	ldr	r3, [pc, #144]	@ (800ced8 <USBD_SetConfig+0x150>)
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d02a      	beq.n	800ceaa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	b2db      	uxtb	r3, r3
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f7fe ffaa 	bl	800bdb6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ce62:	4b1d      	ldr	r3, [pc, #116]	@ (800ced8 <USBD_SetConfig+0x150>)
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	461a      	mov	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ce6c:	4b1a      	ldr	r3, [pc, #104]	@ (800ced8 <USBD_SetConfig+0x150>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	4619      	mov	r1, r3
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f7fe ff83 	bl	800bd7e <USBD_SetClassConfig>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00f      	beq.n	800cea2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ce82:	6839      	ldr	r1, [r7, #0]
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 f918 	bl	800d0ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	4619      	mov	r1, r3
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7fe ff8f 	bl	800bdb6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2202      	movs	r2, #2
 800ce9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cea0:	e014      	b.n	800cecc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 f9e7 	bl	800d276 <USBD_CtlSendStatus>
      break;
 800cea8:	e010      	b.n	800cecc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 f9e3 	bl	800d276 <USBD_CtlSendStatus>
      break;
 800ceb0:	e00c      	b.n	800cecc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ceb2:	6839      	ldr	r1, [r7, #0]
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 f900 	bl	800d0ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ceba:	4b07      	ldr	r3, [pc, #28]	@ (800ced8 <USBD_SetConfig+0x150>)
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	4619      	mov	r1, r3
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7fe ff78 	bl	800bdb6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cec6:	2303      	movs	r3, #3
 800cec8:	73fb      	strb	r3, [r7, #15]
      break;
 800ceca:	bf00      	nop
  }

  return ret;
 800cecc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	200185a4 	.word	0x200185a4

0800cedc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	88db      	ldrh	r3, [r3, #6]
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d004      	beq.n	800cef8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 f8e2 	bl	800d0ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cef6:	e023      	b.n	800cf40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	2b02      	cmp	r3, #2
 800cf02:	dc02      	bgt.n	800cf0a <USBD_GetConfig+0x2e>
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	dc03      	bgt.n	800cf10 <USBD_GetConfig+0x34>
 800cf08:	e015      	b.n	800cf36 <USBD_GetConfig+0x5a>
 800cf0a:	2b03      	cmp	r3, #3
 800cf0c:	d00b      	beq.n	800cf26 <USBD_GetConfig+0x4a>
 800cf0e:	e012      	b.n	800cf36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	3308      	adds	r3, #8
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 f948 	bl	800d1b4 <USBD_CtlSendData>
        break;
 800cf24:	e00c      	b.n	800cf40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	3304      	adds	r3, #4
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 f940 	bl	800d1b4 <USBD_CtlSendData>
        break;
 800cf34:	e004      	b.n	800cf40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cf36:	6839      	ldr	r1, [r7, #0]
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 f8be 	bl	800d0ba <USBD_CtlError>
        break;
 800cf3e:	bf00      	nop
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	2b02      	cmp	r3, #2
 800cf5e:	d81e      	bhi.n	800cf9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	88db      	ldrh	r3, [r3, #6]
 800cf64:	2b02      	cmp	r3, #2
 800cf66:	d004      	beq.n	800cf72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cf68:	6839      	ldr	r1, [r7, #0]
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 f8a5 	bl	800d0ba <USBD_CtlError>
        break;
 800cf70:	e01a      	b.n	800cfa8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2201      	movs	r2, #1
 800cf76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d005      	beq.n	800cf8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	f043 0202 	orr.w	r2, r3, #2
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	330c      	adds	r3, #12
 800cf92:	2202      	movs	r2, #2
 800cf94:	4619      	mov	r1, r3
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 f90c 	bl	800d1b4 <USBD_CtlSendData>
      break;
 800cf9c:	e004      	b.n	800cfa8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cf9e:	6839      	ldr	r1, [r7, #0]
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 f88a 	bl	800d0ba <USBD_CtlError>
      break;
 800cfa6:	bf00      	nop
  }
}
 800cfa8:	bf00      	nop
 800cfaa:	3708      	adds	r7, #8
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	885b      	ldrh	r3, [r3, #2]
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d107      	bne.n	800cfd2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 f953 	bl	800d276 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cfd0:	e013      	b.n	800cffa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	885b      	ldrh	r3, [r3, #2]
 800cfd6:	2b02      	cmp	r3, #2
 800cfd8:	d10b      	bne.n	800cff2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	889b      	ldrh	r3, [r3, #4]
 800cfde:	0a1b      	lsrs	r3, r3, #8
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	b2da      	uxtb	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 f943 	bl	800d276 <USBD_CtlSendStatus>
}
 800cff0:	e003      	b.n	800cffa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cff2:	6839      	ldr	r1, [r7, #0]
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 f860 	bl	800d0ba <USBD_CtlError>
}
 800cffa:	bf00      	nop
 800cffc:	3708      	adds	r7, #8
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b082      	sub	sp, #8
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
 800d00a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d012:	b2db      	uxtb	r3, r3
 800d014:	3b01      	subs	r3, #1
 800d016:	2b02      	cmp	r3, #2
 800d018:	d80b      	bhi.n	800d032 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	885b      	ldrh	r3, [r3, #2]
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d10c      	bne.n	800d03c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 f923 	bl	800d276 <USBD_CtlSendStatus>
      }
      break;
 800d030:	e004      	b.n	800d03c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 f840 	bl	800d0ba <USBD_CtlError>
      break;
 800d03a:	e000      	b.n	800d03e <USBD_ClrFeature+0x3c>
      break;
 800d03c:	bf00      	nop
  }
}
 800d03e:	bf00      	nop
 800d040:	3708      	adds	r7, #8
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b084      	sub	sp, #16
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	781a      	ldrb	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	3301      	adds	r3, #1
 800d060:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	781a      	ldrb	r2, [r3, #0]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	3301      	adds	r3, #1
 800d06e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d070:	68f8      	ldr	r0, [r7, #12]
 800d072:	f7ff fa3d 	bl	800c4f0 <SWAPBYTE>
 800d076:	4603      	mov	r3, r0
 800d078:	461a      	mov	r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	3301      	adds	r3, #1
 800d082:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	3301      	adds	r3, #1
 800d088:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f7ff fa30 	bl	800c4f0 <SWAPBYTE>
 800d090:	4603      	mov	r3, r0
 800d092:	461a      	mov	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	3301      	adds	r3, #1
 800d09c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f7ff fa23 	bl	800c4f0 <SWAPBYTE>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	80da      	strh	r2, [r3, #6]
}
 800d0b2:	bf00      	nop
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b082      	sub	sp, #8
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0c4:	2180      	movs	r1, #128	@ 0x80
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 fd32 	bl	800db30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 fd2e 	bl	800db30 <USBD_LL_StallEP>
}
 800d0d4:	bf00      	nop
 800d0d6:	3708      	adds	r7, #8
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b086      	sub	sp, #24
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d042      	beq.n	800d178 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d0f6:	6938      	ldr	r0, [r7, #16]
 800d0f8:	f000 f842 	bl	800d180 <USBD_GetLen>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	3301      	adds	r3, #1
 800d100:	005b      	lsls	r3, r3, #1
 800d102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d106:	d808      	bhi.n	800d11a <USBD_GetString+0x3e>
 800d108:	6938      	ldr	r0, [r7, #16]
 800d10a:	f000 f839 	bl	800d180 <USBD_GetLen>
 800d10e:	4603      	mov	r3, r0
 800d110:	3301      	adds	r3, #1
 800d112:	b29b      	uxth	r3, r3
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	b29a      	uxth	r2, r3
 800d118:	e001      	b.n	800d11e <USBD_GetString+0x42>
 800d11a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d122:	7dfb      	ldrb	r3, [r7, #23]
 800d124:	68ba      	ldr	r2, [r7, #8]
 800d126:	4413      	add	r3, r2
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	7812      	ldrb	r2, [r2, #0]
 800d12c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d12e:	7dfb      	ldrb	r3, [r7, #23]
 800d130:	3301      	adds	r3, #1
 800d132:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d134:	7dfb      	ldrb	r3, [r7, #23]
 800d136:	68ba      	ldr	r2, [r7, #8]
 800d138:	4413      	add	r3, r2
 800d13a:	2203      	movs	r2, #3
 800d13c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d13e:	7dfb      	ldrb	r3, [r7, #23]
 800d140:	3301      	adds	r3, #1
 800d142:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d144:	e013      	b.n	800d16e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d146:	7dfb      	ldrb	r3, [r7, #23]
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	4413      	add	r3, r2
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	7812      	ldrb	r2, [r2, #0]
 800d150:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	3301      	adds	r3, #1
 800d156:	613b      	str	r3, [r7, #16]
    idx++;
 800d158:	7dfb      	ldrb	r3, [r7, #23]
 800d15a:	3301      	adds	r3, #1
 800d15c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d15e:	7dfb      	ldrb	r3, [r7, #23]
 800d160:	68ba      	ldr	r2, [r7, #8]
 800d162:	4413      	add	r3, r2
 800d164:	2200      	movs	r2, #0
 800d166:	701a      	strb	r2, [r3, #0]
    idx++;
 800d168:	7dfb      	ldrb	r3, [r7, #23]
 800d16a:	3301      	adds	r3, #1
 800d16c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1e7      	bne.n	800d146 <USBD_GetString+0x6a>
 800d176:	e000      	b.n	800d17a <USBD_GetString+0x9e>
    return;
 800d178:	bf00      	nop
  }
}
 800d17a:	3718      	adds	r7, #24
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d180:	b480      	push	{r7}
 800d182:	b085      	sub	sp, #20
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d188:	2300      	movs	r3, #0
 800d18a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d190:	e005      	b.n	800d19e <USBD_GetLen+0x1e>
  {
    len++;
 800d192:	7bfb      	ldrb	r3, [r7, #15]
 800d194:	3301      	adds	r3, #1
 800d196:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	3301      	adds	r3, #1
 800d19c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1f5      	bne.n	800d192 <USBD_GetLen+0x12>
  }

  return len;
 800d1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3714      	adds	r7, #20
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr

0800d1b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2202      	movs	r2, #2
 800d1c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	68ba      	ldr	r2, [r7, #8]
 800d1d2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	2100      	movs	r1, #0
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f000 fd2e 	bl	800dc42 <USBD_LL_Transmit>

  return USBD_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	68ba      	ldr	r2, [r7, #8]
 800d200:	2100      	movs	r1, #0
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f000 fd1d 	bl	800dc42 <USBD_LL_Transmit>

  return USBD_OK;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b084      	sub	sp, #16
 800d216:	af00      	add	r7, sp, #0
 800d218:	60f8      	str	r0, [r7, #12]
 800d21a:	60b9      	str	r1, [r7, #8]
 800d21c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2203      	movs	r2, #3
 800d222:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	687a      	ldr	r2, [r7, #4]
 800d22a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	68ba      	ldr	r2, [r7, #8]
 800d232:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	68ba      	ldr	r2, [r7, #8]
 800d242:	2100      	movs	r1, #0
 800d244:	68f8      	ldr	r0, [r7, #12]
 800d246:	f000 fd1d 	bl	800dc84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d24a:	2300      	movs	r3, #0
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	68ba      	ldr	r2, [r7, #8]
 800d264:	2100      	movs	r1, #0
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f000 fd0c 	bl	800dc84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d26c:	2300      	movs	r3, #0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b082      	sub	sp, #8
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2204      	movs	r2, #4
 800d282:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d286:	2300      	movs	r3, #0
 800d288:	2200      	movs	r2, #0
 800d28a:	2100      	movs	r1, #0
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 fcd8 	bl	800dc42 <USBD_LL_Transmit>

  return USBD_OK;
 800d292:	2300      	movs	r3, #0
}
 800d294:	4618      	mov	r0, r3
 800d296:	3708      	adds	r7, #8
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2205      	movs	r2, #5
 800d2a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 fce6 	bl	800dc84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2b8:	2300      	movs	r3, #0
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
	...

0800d2c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	4912      	ldr	r1, [pc, #72]	@ (800d314 <MX_USB_DEVICE_Init+0x50>)
 800d2cc:	4812      	ldr	r0, [pc, #72]	@ (800d318 <MX_USB_DEVICE_Init+0x54>)
 800d2ce:	f7fe fcd9 	bl	800bc84 <USBD_Init>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d001      	beq.n	800d2dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d2d8:	f7f5 ffe4 	bl	80032a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d2dc:	490f      	ldr	r1, [pc, #60]	@ (800d31c <MX_USB_DEVICE_Init+0x58>)
 800d2de:	480e      	ldr	r0, [pc, #56]	@ (800d318 <MX_USB_DEVICE_Init+0x54>)
 800d2e0:	f7fe fd00 	bl	800bce4 <USBD_RegisterClass>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d2ea:	f7f5 ffdb 	bl	80032a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d2ee:	490c      	ldr	r1, [pc, #48]	@ (800d320 <MX_USB_DEVICE_Init+0x5c>)
 800d2f0:	4809      	ldr	r0, [pc, #36]	@ (800d318 <MX_USB_DEVICE_Init+0x54>)
 800d2f2:	f7fe fbf7 	bl	800bae4 <USBD_CDC_RegisterInterface>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d001      	beq.n	800d300 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d2fc:	f7f5 ffd2 	bl	80032a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d300:	4805      	ldr	r0, [pc, #20]	@ (800d318 <MX_USB_DEVICE_Init+0x54>)
 800d302:	f7fe fd25 	bl	800bd50 <USBD_Start>
 800d306:	4603      	mov	r3, r0
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d001      	beq.n	800d310 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d30c:	f7f5 ffca 	bl	80032a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d310:	bf00      	nop
 800d312:	bd80      	pop	{r7, pc}
 800d314:	200000b8 	.word	0x200000b8
 800d318:	200185a8 	.word	0x200185a8
 800d31c:	20000024 	.word	0x20000024
 800d320:	200000a4 	.word	0x200000a4

0800d324 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d328:	2200      	movs	r2, #0
 800d32a:	4905      	ldr	r1, [pc, #20]	@ (800d340 <CDC_Init_FS+0x1c>)
 800d32c:	4805      	ldr	r0, [pc, #20]	@ (800d344 <CDC_Init_FS+0x20>)
 800d32e:	f7fe fbf3 	bl	800bb18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d332:	4905      	ldr	r1, [pc, #20]	@ (800d348 <CDC_Init_FS+0x24>)
 800d334:	4803      	ldr	r0, [pc, #12]	@ (800d344 <CDC_Init_FS+0x20>)
 800d336:	f7fe fc11 	bl	800bb5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d33a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	200194d4 	.word	0x200194d4
 800d344:	200185a8 	.word	0x200185a8
 800d348:	20018cd4 	.word	0x20018cd4

0800d34c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d34c:	b480      	push	{r7}
 800d34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d350:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d352:	4618      	mov	r0, r3
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	4603      	mov	r3, r0
 800d364:	6039      	str	r1, [r7, #0]
 800d366:	71fb      	strb	r3, [r7, #7]
 800d368:	4613      	mov	r3, r2
 800d36a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d36c:	79fb      	ldrb	r3, [r7, #7]
 800d36e:	2b23      	cmp	r3, #35	@ 0x23
 800d370:	d84a      	bhi.n	800d408 <CDC_Control_FS+0xac>
 800d372:	a201      	add	r2, pc, #4	@ (adr r2, 800d378 <CDC_Control_FS+0x1c>)
 800d374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d378:	0800d409 	.word	0x0800d409
 800d37c:	0800d409 	.word	0x0800d409
 800d380:	0800d409 	.word	0x0800d409
 800d384:	0800d409 	.word	0x0800d409
 800d388:	0800d409 	.word	0x0800d409
 800d38c:	0800d409 	.word	0x0800d409
 800d390:	0800d409 	.word	0x0800d409
 800d394:	0800d409 	.word	0x0800d409
 800d398:	0800d409 	.word	0x0800d409
 800d39c:	0800d409 	.word	0x0800d409
 800d3a0:	0800d409 	.word	0x0800d409
 800d3a4:	0800d409 	.word	0x0800d409
 800d3a8:	0800d409 	.word	0x0800d409
 800d3ac:	0800d409 	.word	0x0800d409
 800d3b0:	0800d409 	.word	0x0800d409
 800d3b4:	0800d409 	.word	0x0800d409
 800d3b8:	0800d409 	.word	0x0800d409
 800d3bc:	0800d409 	.word	0x0800d409
 800d3c0:	0800d409 	.word	0x0800d409
 800d3c4:	0800d409 	.word	0x0800d409
 800d3c8:	0800d409 	.word	0x0800d409
 800d3cc:	0800d409 	.word	0x0800d409
 800d3d0:	0800d409 	.word	0x0800d409
 800d3d4:	0800d409 	.word	0x0800d409
 800d3d8:	0800d409 	.word	0x0800d409
 800d3dc:	0800d409 	.word	0x0800d409
 800d3e0:	0800d409 	.word	0x0800d409
 800d3e4:	0800d409 	.word	0x0800d409
 800d3e8:	0800d409 	.word	0x0800d409
 800d3ec:	0800d409 	.word	0x0800d409
 800d3f0:	0800d409 	.word	0x0800d409
 800d3f4:	0800d409 	.word	0x0800d409
 800d3f8:	0800d409 	.word	0x0800d409
 800d3fc:	0800d409 	.word	0x0800d409
 800d400:	0800d409 	.word	0x0800d409
 800d404:	0800d409 	.word	0x0800d409
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d408:	bf00      	nop
  }

  return (USBD_OK);
 800d40a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	370c      	adds	r7, #12
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	4b21      	ldr	r3, [pc, #132]	@ (800d4ac <CDC_Receive_FS+0x94>)
 800d428:	881b      	ldrh	r3, [r3, #0]
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	f5c3 6389 	rsb	r3, r3, #1096	@ 0x448
 800d430:	3304      	adds	r3, #4
                            (USB_RX_BUFFER_SIZE - usb_rx_index) : *Len;
 800d432:	429a      	cmp	r2, r3
 800d434:	d906      	bls.n	800d444 <CDC_Receive_FS+0x2c>
 800d436:	4b1d      	ldr	r3, [pc, #116]	@ (800d4ac <CDC_Receive_FS+0x94>)
 800d438:	881b      	ldrh	r3, [r3, #0]
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	f5c3 6389 	rsb	r3, r3, #1096	@ 0x448
 800d440:	3304      	adds	r3, #4
 800d442:	e001      	b.n	800d448 <CDC_Receive_FS+0x30>
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	681b      	ldr	r3, [r3, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800d448:	60fb      	str	r3, [r7, #12]

    memcpy((void*)&usb_rx_buffer[usb_rx_index], Buf, bytes_to_copy);
 800d44a:	4b18      	ldr	r3, [pc, #96]	@ (800d4ac <CDC_Receive_FS+0x94>)
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	b29b      	uxth	r3, r3
 800d450:	461a      	mov	r2, r3
 800d452:	4b17      	ldr	r3, [pc, #92]	@ (800d4b0 <CDC_Receive_FS+0x98>)
 800d454:	4413      	add	r3, r2
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	6879      	ldr	r1, [r7, #4]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f002 fe3b 	bl	80100d6 <memcpy>
    usb_rx_index += bytes_to_copy;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	b29a      	uxth	r2, r3
 800d464:	4b11      	ldr	r3, [pc, #68]	@ (800d4ac <CDC_Receive_FS+0x94>)
 800d466:	881b      	ldrh	r3, [r3, #0]
 800d468:	b29b      	uxth	r3, r3
 800d46a:	4413      	add	r3, r2
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	4b0f      	ldr	r3, [pc, #60]	@ (800d4ac <CDC_Receive_FS+0x94>)
 800d470:	801a      	strh	r2, [r3, #0]

    // Проверяем наличие завершающего символа
    if (usb_rx_index > 0 && usb_rx_buffer[usb_rx_index - 1] == '\n') {
 800d472:	4b0e      	ldr	r3, [pc, #56]	@ (800d4ac <CDC_Receive_FS+0x94>)
 800d474:	881b      	ldrh	r3, [r3, #0]
 800d476:	b29b      	uxth	r3, r3
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00b      	beq.n	800d494 <CDC_Receive_FS+0x7c>
 800d47c:	4b0b      	ldr	r3, [pc, #44]	@ (800d4ac <CDC_Receive_FS+0x94>)
 800d47e:	881b      	ldrh	r3, [r3, #0]
 800d480:	b29b      	uxth	r3, r3
 800d482:	3b01      	subs	r3, #1
 800d484:	4a0a      	ldr	r2, [pc, #40]	@ (800d4b0 <CDC_Receive_FS+0x98>)
 800d486:	5cd3      	ldrb	r3, [r2, r3]
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	2b0a      	cmp	r3, #10
 800d48c:	d102      	bne.n	800d494 <CDC_Receive_FS+0x7c>
        new_data_received = 1;
 800d48e:	4b09      	ldr	r3, [pc, #36]	@ (800d4b4 <CDC_Receive_FS+0x9c>)
 800d490:	2201      	movs	r2, #1
 800d492:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d494:	6879      	ldr	r1, [r7, #4]
 800d496:	4808      	ldr	r0, [pc, #32]	@ (800d4b8 <CDC_Receive_FS+0xa0>)
 800d498:	f7fe fb60 	bl	800bb5c <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d49c:	4806      	ldr	r0, [pc, #24]	@ (800d4b8 <CDC_Receive_FS+0xa0>)
 800d49e:	f7fe fbbb 	bl	800bc18 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800d4a2:	2300      	movs	r3, #0
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	20018cd0 	.word	0x20018cd0
 800d4b0:	20018884 	.word	0x20018884
 800d4b4:	20018cd2 	.word	0x20018cd2
 800d4b8:	200185a8 	.word	0x200185a8

0800d4bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d4cc:	4b0d      	ldr	r3, [pc, #52]	@ (800d504 <CDC_Transmit_FS+0x48>)
 800d4ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d4d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d001      	beq.n	800d4e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e00b      	b.n	800d4fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d4e2:	887b      	ldrh	r3, [r7, #2]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	6879      	ldr	r1, [r7, #4]
 800d4e8:	4806      	ldr	r0, [pc, #24]	@ (800d504 <CDC_Transmit_FS+0x48>)
 800d4ea:	f7fe fb15 	bl	800bb18 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d4ee:	4805      	ldr	r0, [pc, #20]	@ (800d504 <CDC_Transmit_FS+0x48>)
 800d4f0:	f7fe fb52 	bl	800bb98 <USBD_CDC_TransmitPacket>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	200185a8 	.word	0x200185a8

0800d508 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d508:	b480      	push	{r7}
 800d50a:	b087      	sub	sp, #28
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	4613      	mov	r3, r2
 800d514:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d516:	2300      	movs	r3, #0
 800d518:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d51a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	371c      	adds	r7, #28
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr
	...

0800d52c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b083      	sub	sp, #12
 800d530:	af00      	add	r7, sp, #0
 800d532:	4603      	mov	r3, r0
 800d534:	6039      	str	r1, [r7, #0]
 800d536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	2212      	movs	r2, #18
 800d53c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d53e:	4b03      	ldr	r3, [pc, #12]	@ (800d54c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d540:	4618      	mov	r0, r3
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr
 800d54c:	200000d4 	.word	0x200000d4

0800d550 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d550:	b480      	push	{r7}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
 800d556:	4603      	mov	r3, r0
 800d558:	6039      	str	r1, [r7, #0]
 800d55a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	2204      	movs	r2, #4
 800d560:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d562:	4b03      	ldr	r3, [pc, #12]	@ (800d570 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d564:	4618      	mov	r0, r3
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr
 800d570:	200000e8 	.word	0x200000e8

0800d574 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	4603      	mov	r3, r0
 800d57c:	6039      	str	r1, [r7, #0]
 800d57e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d580:	79fb      	ldrb	r3, [r7, #7]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d105      	bne.n	800d592 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d586:	683a      	ldr	r2, [r7, #0]
 800d588:	4907      	ldr	r1, [pc, #28]	@ (800d5a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d58a:	4808      	ldr	r0, [pc, #32]	@ (800d5ac <USBD_FS_ProductStrDescriptor+0x38>)
 800d58c:	f7ff fda6 	bl	800d0dc <USBD_GetString>
 800d590:	e004      	b.n	800d59c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d592:	683a      	ldr	r2, [r7, #0]
 800d594:	4904      	ldr	r1, [pc, #16]	@ (800d5a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d596:	4805      	ldr	r0, [pc, #20]	@ (800d5ac <USBD_FS_ProductStrDescriptor+0x38>)
 800d598:	f7ff fda0 	bl	800d0dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d59c:	4b02      	ldr	r3, [pc, #8]	@ (800d5a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	20019cd4 	.word	0x20019cd4
 800d5ac:	08013720 	.word	0x08013720

0800d5b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	6039      	str	r1, [r7, #0]
 800d5ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d5bc:	683a      	ldr	r2, [r7, #0]
 800d5be:	4904      	ldr	r1, [pc, #16]	@ (800d5d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d5c0:	4804      	ldr	r0, [pc, #16]	@ (800d5d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d5c2:	f7ff fd8b 	bl	800d0dc <USBD_GetString>
  return USBD_StrDesc;
 800d5c6:	4b02      	ldr	r3, [pc, #8]	@ (800d5d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3708      	adds	r7, #8
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	20019cd4 	.word	0x20019cd4
 800d5d4:	08013738 	.word	0x08013738

0800d5d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	4603      	mov	r3, r0
 800d5e0:	6039      	str	r1, [r7, #0]
 800d5e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	221a      	movs	r2, #26
 800d5e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d5ea:	f000 f843 	bl	800d674 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d5ee:	4b02      	ldr	r3, [pc, #8]	@ (800d5f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	200000ec 	.word	0x200000ec

0800d5fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	4603      	mov	r3, r0
 800d604:	6039      	str	r1, [r7, #0]
 800d606:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d608:	79fb      	ldrb	r3, [r7, #7]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d105      	bne.n	800d61a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d60e:	683a      	ldr	r2, [r7, #0]
 800d610:	4907      	ldr	r1, [pc, #28]	@ (800d630 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d612:	4808      	ldr	r0, [pc, #32]	@ (800d634 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d614:	f7ff fd62 	bl	800d0dc <USBD_GetString>
 800d618:	e004      	b.n	800d624 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	4904      	ldr	r1, [pc, #16]	@ (800d630 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d61e:	4805      	ldr	r0, [pc, #20]	@ (800d634 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d620:	f7ff fd5c 	bl	800d0dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d624:	4b02      	ldr	r3, [pc, #8]	@ (800d630 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d626:	4618      	mov	r0, r3
 800d628:	3708      	adds	r7, #8
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	20019cd4 	.word	0x20019cd4
 800d634:	0801374c 	.word	0x0801374c

0800d638 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	4603      	mov	r3, r0
 800d640:	6039      	str	r1, [r7, #0]
 800d642:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d644:	79fb      	ldrb	r3, [r7, #7]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d105      	bne.n	800d656 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d64a:	683a      	ldr	r2, [r7, #0]
 800d64c:	4907      	ldr	r1, [pc, #28]	@ (800d66c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d64e:	4808      	ldr	r0, [pc, #32]	@ (800d670 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d650:	f7ff fd44 	bl	800d0dc <USBD_GetString>
 800d654:	e004      	b.n	800d660 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d656:	683a      	ldr	r2, [r7, #0]
 800d658:	4904      	ldr	r1, [pc, #16]	@ (800d66c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d65a:	4805      	ldr	r0, [pc, #20]	@ (800d670 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d65c:	f7ff fd3e 	bl	800d0dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d660:	4b02      	ldr	r3, [pc, #8]	@ (800d66c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d662:	4618      	mov	r0, r3
 800d664:	3708      	adds	r7, #8
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	20019cd4 	.word	0x20019cd4
 800d670:	08013758 	.word	0x08013758

0800d674 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d67a:	4b0f      	ldr	r3, [pc, #60]	@ (800d6b8 <Get_SerialNum+0x44>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d680:	4b0e      	ldr	r3, [pc, #56]	@ (800d6bc <Get_SerialNum+0x48>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d686:	4b0e      	ldr	r3, [pc, #56]	@ (800d6c0 <Get_SerialNum+0x4c>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d68c:	68fa      	ldr	r2, [r7, #12]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	4413      	add	r3, r2
 800d692:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d009      	beq.n	800d6ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d69a:	2208      	movs	r2, #8
 800d69c:	4909      	ldr	r1, [pc, #36]	@ (800d6c4 <Get_SerialNum+0x50>)
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f000 f814 	bl	800d6cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d6a4:	2204      	movs	r2, #4
 800d6a6:	4908      	ldr	r1, [pc, #32]	@ (800d6c8 <Get_SerialNum+0x54>)
 800d6a8:	68b8      	ldr	r0, [r7, #8]
 800d6aa:	f000 f80f 	bl	800d6cc <IntToUnicode>
  }
}
 800d6ae:	bf00      	nop
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	1fff7a10 	.word	0x1fff7a10
 800d6bc:	1fff7a14 	.word	0x1fff7a14
 800d6c0:	1fff7a18 	.word	0x1fff7a18
 800d6c4:	200000ee 	.word	0x200000ee
 800d6c8:	200000fe 	.word	0x200000fe

0800d6cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b087      	sub	sp, #28
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d6de:	2300      	movs	r3, #0
 800d6e0:	75fb      	strb	r3, [r7, #23]
 800d6e2:	e027      	b.n	800d734 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	0f1b      	lsrs	r3, r3, #28
 800d6e8:	2b09      	cmp	r3, #9
 800d6ea:	d80b      	bhi.n	800d704 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	0f1b      	lsrs	r3, r3, #28
 800d6f0:	b2da      	uxtb	r2, r3
 800d6f2:	7dfb      	ldrb	r3, [r7, #23]
 800d6f4:	005b      	lsls	r3, r3, #1
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	440b      	add	r3, r1
 800d6fc:	3230      	adds	r2, #48	@ 0x30
 800d6fe:	b2d2      	uxtb	r2, r2
 800d700:	701a      	strb	r2, [r3, #0]
 800d702:	e00a      	b.n	800d71a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	0f1b      	lsrs	r3, r3, #28
 800d708:	b2da      	uxtb	r2, r3
 800d70a:	7dfb      	ldrb	r3, [r7, #23]
 800d70c:	005b      	lsls	r3, r3, #1
 800d70e:	4619      	mov	r1, r3
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	440b      	add	r3, r1
 800d714:	3237      	adds	r2, #55	@ 0x37
 800d716:	b2d2      	uxtb	r2, r2
 800d718:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	011b      	lsls	r3, r3, #4
 800d71e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d720:	7dfb      	ldrb	r3, [r7, #23]
 800d722:	005b      	lsls	r3, r3, #1
 800d724:	3301      	adds	r3, #1
 800d726:	68ba      	ldr	r2, [r7, #8]
 800d728:	4413      	add	r3, r2
 800d72a:	2200      	movs	r2, #0
 800d72c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d72e:	7dfb      	ldrb	r3, [r7, #23]
 800d730:	3301      	adds	r3, #1
 800d732:	75fb      	strb	r3, [r7, #23]
 800d734:	7dfa      	ldrb	r2, [r7, #23]
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d3d3      	bcc.n	800d6e4 <IntToUnicode+0x18>
  }
}
 800d73c:	bf00      	nop
 800d73e:	bf00      	nop
 800d740:	371c      	adds	r7, #28
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr
	...

0800d74c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b08a      	sub	sp, #40	@ 0x28
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d754:	f107 0314 	add.w	r3, r7, #20
 800d758:	2200      	movs	r2, #0
 800d75a:	601a      	str	r2, [r3, #0]
 800d75c:	605a      	str	r2, [r3, #4]
 800d75e:	609a      	str	r2, [r3, #8]
 800d760:	60da      	str	r2, [r3, #12]
 800d762:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d76c:	d13a      	bne.n	800d7e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d76e:	2300      	movs	r3, #0
 800d770:	613b      	str	r3, [r7, #16]
 800d772:	4b1e      	ldr	r3, [pc, #120]	@ (800d7ec <HAL_PCD_MspInit+0xa0>)
 800d774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d776:	4a1d      	ldr	r2, [pc, #116]	@ (800d7ec <HAL_PCD_MspInit+0xa0>)
 800d778:	f043 0301 	orr.w	r3, r3, #1
 800d77c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d77e:	4b1b      	ldr	r3, [pc, #108]	@ (800d7ec <HAL_PCD_MspInit+0xa0>)
 800d780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d782:	f003 0301 	and.w	r3, r3, #1
 800d786:	613b      	str	r3, [r7, #16]
 800d788:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d78a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d78e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d790:	2302      	movs	r3, #2
 800d792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d794:	2300      	movs	r3, #0
 800d796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d798:	2303      	movs	r3, #3
 800d79a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d79c:	230a      	movs	r3, #10
 800d79e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7a0:	f107 0314 	add.w	r3, r7, #20
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	4812      	ldr	r0, [pc, #72]	@ (800d7f0 <HAL_PCD_MspInit+0xa4>)
 800d7a8:	f7f7 fb18 	bl	8004ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d7ac:	4b0f      	ldr	r3, [pc, #60]	@ (800d7ec <HAL_PCD_MspInit+0xa0>)
 800d7ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7b0:	4a0e      	ldr	r2, [pc, #56]	@ (800d7ec <HAL_PCD_MspInit+0xa0>)
 800d7b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7b6:	6353      	str	r3, [r2, #52]	@ 0x34
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	60fb      	str	r3, [r7, #12]
 800d7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d7ec <HAL_PCD_MspInit+0xa0>)
 800d7be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7c0:	4a0a      	ldr	r2, [pc, #40]	@ (800d7ec <HAL_PCD_MspInit+0xa0>)
 800d7c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d7c6:	6453      	str	r3, [r2, #68]	@ 0x44
 800d7c8:	4b08      	ldr	r3, [pc, #32]	@ (800d7ec <HAL_PCD_MspInit+0xa0>)
 800d7ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7d0:	60fb      	str	r3, [r7, #12]
 800d7d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	2100      	movs	r1, #0
 800d7d8:	2043      	movs	r0, #67	@ 0x43
 800d7da:	f7f6 ff3e 	bl	800465a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d7de:	2043      	movs	r0, #67	@ 0x43
 800d7e0:	f7f6 ff57 	bl	8004692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d7e4:	bf00      	nop
 800d7e6:	3728      	adds	r7, #40	@ 0x28
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	40023800 	.word	0x40023800
 800d7f0:	40020000 	.word	0x40020000

0800d7f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d808:	4619      	mov	r1, r3
 800d80a:	4610      	mov	r0, r2
 800d80c:	f7fe faed 	bl	800bdea <USBD_LL_SetupStage>
}
 800d810:	bf00      	nop
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	460b      	mov	r3, r1
 800d822:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d82a:	78fa      	ldrb	r2, [r7, #3]
 800d82c:	6879      	ldr	r1, [r7, #4]
 800d82e:	4613      	mov	r3, r2
 800d830:	00db      	lsls	r3, r3, #3
 800d832:	4413      	add	r3, r2
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	440b      	add	r3, r1
 800d838:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	78fb      	ldrb	r3, [r7, #3]
 800d840:	4619      	mov	r1, r3
 800d842:	f7fe fb27 	bl	800be94 <USBD_LL_DataOutStage>
}
 800d846:	bf00      	nop
 800d848:	3708      	adds	r7, #8
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b082      	sub	sp, #8
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
 800d856:	460b      	mov	r3, r1
 800d858:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d860:	78fa      	ldrb	r2, [r7, #3]
 800d862:	6879      	ldr	r1, [r7, #4]
 800d864:	4613      	mov	r3, r2
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	4413      	add	r3, r2
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	440b      	add	r3, r1
 800d86e:	3320      	adds	r3, #32
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	78fb      	ldrb	r3, [r7, #3]
 800d874:	4619      	mov	r1, r3
 800d876:	f7fe fbc9 	bl	800c00c <USBD_LL_DataInStage>
}
 800d87a:	bf00      	nop
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b082      	sub	sp, #8
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d890:	4618      	mov	r0, r3
 800d892:	f7fe fd0d 	bl	800c2b0 <USBD_LL_SOF>
}
 800d896:	bf00      	nop
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b084      	sub	sp, #16
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	79db      	ldrb	r3, [r3, #7]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d102      	bne.n	800d8b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	73fb      	strb	r3, [r7, #15]
 800d8b6:	e008      	b.n	800d8ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	79db      	ldrb	r3, [r3, #7]
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d102      	bne.n	800d8c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	73fb      	strb	r3, [r7, #15]
 800d8c4:	e001      	b.n	800d8ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d8c6:	f7f5 fced 	bl	80032a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d8d0:	7bfa      	ldrb	r2, [r7, #15]
 800d8d2:	4611      	mov	r1, r2
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7fe fca7 	bl	800c228 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7fe fc4e 	bl	800c182 <USBD_LL_Reset>
}
 800d8e6:	bf00      	nop
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
	...

0800d8f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fe fca2 	bl	800c248 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	6812      	ldr	r2, [r2, #0]
 800d912:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d916:	f043 0301 	orr.w	r3, r3, #1
 800d91a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	7adb      	ldrb	r3, [r3, #11]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d005      	beq.n	800d930 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d924:	4b04      	ldr	r3, [pc, #16]	@ (800d938 <HAL_PCD_SuspendCallback+0x48>)
 800d926:	691b      	ldr	r3, [r3, #16]
 800d928:	4a03      	ldr	r2, [pc, #12]	@ (800d938 <HAL_PCD_SuspendCallback+0x48>)
 800d92a:	f043 0306 	orr.w	r3, r3, #6
 800d92e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	e000ed00 	.word	0xe000ed00

0800d93c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fe fc98 	bl	800c280 <USBD_LL_Resume>
}
 800d950:	bf00      	nop
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	460b      	mov	r3, r1
 800d962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d96a:	78fa      	ldrb	r2, [r7, #3]
 800d96c:	4611      	mov	r1, r2
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fe fcf0 	bl	800c354 <USBD_LL_IsoOUTIncomplete>
}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	460b      	mov	r3, r1
 800d986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d98e:	78fa      	ldrb	r2, [r7, #3]
 800d990:	4611      	mov	r1, r2
 800d992:	4618      	mov	r0, r3
 800d994:	f7fe fcac 	bl	800c2f0 <USBD_LL_IsoINIncomplete>
}
 800d998:	bf00      	nop
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7fe fd02 	bl	800c3b8 <USBD_LL_DevConnected>
}
 800d9b4:	bf00      	nop
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fe fcff 	bl	800c3ce <USBD_LL_DevDisconnected>
}
 800d9d0:	bf00      	nop
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d13c      	bne.n	800da62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d9e8:	4a20      	ldr	r2, [pc, #128]	@ (800da6c <USBD_LL_Init+0x94>)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a1e      	ldr	r2, [pc, #120]	@ (800da6c <USBD_LL_Init+0x94>)
 800d9f4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d9f8:	4b1c      	ldr	r3, [pc, #112]	@ (800da6c <USBD_LL_Init+0x94>)
 800d9fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d9fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800da00:	4b1a      	ldr	r3, [pc, #104]	@ (800da6c <USBD_LL_Init+0x94>)
 800da02:	2204      	movs	r2, #4
 800da04:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800da06:	4b19      	ldr	r3, [pc, #100]	@ (800da6c <USBD_LL_Init+0x94>)
 800da08:	2202      	movs	r2, #2
 800da0a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800da0c:	4b17      	ldr	r3, [pc, #92]	@ (800da6c <USBD_LL_Init+0x94>)
 800da0e:	2200      	movs	r2, #0
 800da10:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800da12:	4b16      	ldr	r3, [pc, #88]	@ (800da6c <USBD_LL_Init+0x94>)
 800da14:	2202      	movs	r2, #2
 800da16:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800da18:	4b14      	ldr	r3, [pc, #80]	@ (800da6c <USBD_LL_Init+0x94>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800da1e:	4b13      	ldr	r3, [pc, #76]	@ (800da6c <USBD_LL_Init+0x94>)
 800da20:	2200      	movs	r2, #0
 800da22:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800da24:	4b11      	ldr	r3, [pc, #68]	@ (800da6c <USBD_LL_Init+0x94>)
 800da26:	2200      	movs	r2, #0
 800da28:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800da2a:	4b10      	ldr	r3, [pc, #64]	@ (800da6c <USBD_LL_Init+0x94>)
 800da2c:	2200      	movs	r2, #0
 800da2e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800da30:	4b0e      	ldr	r3, [pc, #56]	@ (800da6c <USBD_LL_Init+0x94>)
 800da32:	2200      	movs	r2, #0
 800da34:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800da36:	480d      	ldr	r0, [pc, #52]	@ (800da6c <USBD_LL_Init+0x94>)
 800da38:	f7f7 fb9d 	bl	8005176 <HAL_PCD_Init>
 800da3c:	4603      	mov	r3, r0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d001      	beq.n	800da46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800da42:	f7f5 fc2f 	bl	80032a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800da46:	2180      	movs	r1, #128	@ 0x80
 800da48:	4808      	ldr	r0, [pc, #32]	@ (800da6c <USBD_LL_Init+0x94>)
 800da4a:	f7f8 fdca 	bl	80065e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800da4e:	2240      	movs	r2, #64	@ 0x40
 800da50:	2100      	movs	r1, #0
 800da52:	4806      	ldr	r0, [pc, #24]	@ (800da6c <USBD_LL_Init+0x94>)
 800da54:	f7f8 fd7e 	bl	8006554 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800da58:	2280      	movs	r2, #128	@ 0x80
 800da5a:	2101      	movs	r1, #1
 800da5c:	4803      	ldr	r0, [pc, #12]	@ (800da6c <USBD_LL_Init+0x94>)
 800da5e:	f7f8 fd79 	bl	8006554 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800da62:	2300      	movs	r3, #0
}
 800da64:	4618      	mov	r0, r3
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	20019ed4 	.word	0x20019ed4

0800da70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da78:	2300      	movs	r3, #0
 800da7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da7c:	2300      	movs	r3, #0
 800da7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da86:	4618      	mov	r0, r3
 800da88:	f7f7 fc84 	bl	8005394 <HAL_PCD_Start>
 800da8c:	4603      	mov	r3, r0
 800da8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da90:	7bfb      	ldrb	r3, [r7, #15]
 800da92:	4618      	mov	r0, r3
 800da94:	f000 f942 	bl	800dd1c <USBD_Get_USB_Status>
 800da98:	4603      	mov	r3, r0
 800da9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b084      	sub	sp, #16
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
 800daae:	4608      	mov	r0, r1
 800dab0:	4611      	mov	r1, r2
 800dab2:	461a      	mov	r2, r3
 800dab4:	4603      	mov	r3, r0
 800dab6:	70fb      	strb	r3, [r7, #3]
 800dab8:	460b      	mov	r3, r1
 800daba:	70bb      	strb	r3, [r7, #2]
 800dabc:	4613      	mov	r3, r2
 800dabe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dac4:	2300      	movs	r3, #0
 800dac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dace:	78bb      	ldrb	r3, [r7, #2]
 800dad0:	883a      	ldrh	r2, [r7, #0]
 800dad2:	78f9      	ldrb	r1, [r7, #3]
 800dad4:	f7f8 f958 	bl	8005d88 <HAL_PCD_EP_Open>
 800dad8:	4603      	mov	r3, r0
 800dada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
 800dade:	4618      	mov	r0, r3
 800dae0:	f000 f91c 	bl	800dd1c <USBD_Get_USB_Status>
 800dae4:	4603      	mov	r3, r0
 800dae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dae8:	7bbb      	ldrb	r3, [r7, #14]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b084      	sub	sp, #16
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	460b      	mov	r3, r1
 800dafc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db02:	2300      	movs	r3, #0
 800db04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db0c:	78fa      	ldrb	r2, [r7, #3]
 800db0e:	4611      	mov	r1, r2
 800db10:	4618      	mov	r0, r3
 800db12:	f7f8 f9a3 	bl	8005e5c <HAL_PCD_EP_Close>
 800db16:	4603      	mov	r3, r0
 800db18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db1a:	7bfb      	ldrb	r3, [r7, #15]
 800db1c:	4618      	mov	r0, r3
 800db1e:	f000 f8fd 	bl	800dd1c <USBD_Get_USB_Status>
 800db22:	4603      	mov	r3, r0
 800db24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db26:	7bbb      	ldrb	r3, [r7, #14]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	460b      	mov	r3, r1
 800db3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db3c:	2300      	movs	r3, #0
 800db3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db40:	2300      	movs	r3, #0
 800db42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db4a:	78fa      	ldrb	r2, [r7, #3]
 800db4c:	4611      	mov	r1, r2
 800db4e:	4618      	mov	r0, r3
 800db50:	f7f8 fa5b 	bl	800600a <HAL_PCD_EP_SetStall>
 800db54:	4603      	mov	r3, r0
 800db56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db58:	7bfb      	ldrb	r3, [r7, #15]
 800db5a:	4618      	mov	r0, r3
 800db5c:	f000 f8de 	bl	800dd1c <USBD_Get_USB_Status>
 800db60:	4603      	mov	r3, r0
 800db62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db64:	7bbb      	ldrb	r3, [r7, #14]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b084      	sub	sp, #16
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	460b      	mov	r3, r1
 800db78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db7a:	2300      	movs	r3, #0
 800db7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db7e:	2300      	movs	r3, #0
 800db80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db88:	78fa      	ldrb	r2, [r7, #3]
 800db8a:	4611      	mov	r1, r2
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7f8 fa9f 	bl	80060d0 <HAL_PCD_EP_ClrStall>
 800db92:	4603      	mov	r3, r0
 800db94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db96:	7bfb      	ldrb	r3, [r7, #15]
 800db98:	4618      	mov	r0, r3
 800db9a:	f000 f8bf 	bl	800dd1c <USBD_Get_USB_Status>
 800db9e:	4603      	mov	r3, r0
 800dba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dba2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b085      	sub	sp, #20
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dbbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dbc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	da0b      	bge.n	800dbe0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbc8:	78fb      	ldrb	r3, [r7, #3]
 800dbca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbce:	68f9      	ldr	r1, [r7, #12]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	4413      	add	r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	440b      	add	r3, r1
 800dbda:	3316      	adds	r3, #22
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	e00b      	b.n	800dbf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dbe0:	78fb      	ldrb	r3, [r7, #3]
 800dbe2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbe6:	68f9      	ldr	r1, [r7, #12]
 800dbe8:	4613      	mov	r3, r2
 800dbea:	00db      	lsls	r3, r3, #3
 800dbec:	4413      	add	r3, r2
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	440b      	add	r3, r1
 800dbf2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800dbf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b084      	sub	sp, #16
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc10:	2300      	movs	r3, #0
 800dc12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc14:	2300      	movs	r3, #0
 800dc16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc1e:	78fa      	ldrb	r2, [r7, #3]
 800dc20:	4611      	mov	r1, r2
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7f8 f88c 	bl	8005d40 <HAL_PCD_SetAddress>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc2c:	7bfb      	ldrb	r3, [r7, #15]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f000 f874 	bl	800dd1c <USBD_Get_USB_Status>
 800dc34:	4603      	mov	r3, r0
 800dc36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc38:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b086      	sub	sp, #24
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	60f8      	str	r0, [r7, #12]
 800dc4a:	607a      	str	r2, [r7, #4]
 800dc4c:	603b      	str	r3, [r7, #0]
 800dc4e:	460b      	mov	r3, r1
 800dc50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc52:	2300      	movs	r3, #0
 800dc54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc56:	2300      	movs	r3, #0
 800dc58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dc60:	7af9      	ldrb	r1, [r7, #11]
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	f7f8 f996 	bl	8005f96 <HAL_PCD_EP_Transmit>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc6e:	7dfb      	ldrb	r3, [r7, #23]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f000 f853 	bl	800dd1c <USBD_Get_USB_Status>
 800dc76:	4603      	mov	r3, r0
 800dc78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc7a:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3718      	adds	r7, #24
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b086      	sub	sp, #24
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	607a      	str	r2, [r7, #4]
 800dc8e:	603b      	str	r3, [r7, #0]
 800dc90:	460b      	mov	r3, r1
 800dc92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc94:	2300      	movs	r3, #0
 800dc96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dca2:	7af9      	ldrb	r1, [r7, #11]
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	f7f8 f922 	bl	8005ef0 <HAL_PCD_EP_Receive>
 800dcac:	4603      	mov	r3, r0
 800dcae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcb0:	7dfb      	ldrb	r3, [r7, #23]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f000 f832 	bl	800dd1c <USBD_Get_USB_Status>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dcbc:	7dbb      	ldrb	r3, [r7, #22]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3718      	adds	r7, #24
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b082      	sub	sp, #8
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	460b      	mov	r3, r1
 800dcd0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dcd8:	78fa      	ldrb	r2, [r7, #3]
 800dcda:	4611      	mov	r1, r2
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7f8 f942 	bl	8005f66 <HAL_PCD_EP_GetRxCount>
 800dce2:	4603      	mov	r3, r0
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dcf4:	4b03      	ldr	r3, [pc, #12]	@ (800dd04 <USBD_static_malloc+0x18>)
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	370c      	adds	r7, #12
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	2001a3b8 	.word	0x2001a3b8

0800dd08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]

}
 800dd10:	bf00      	nop
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	4603      	mov	r3, r0
 800dd24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd26:	2300      	movs	r3, #0
 800dd28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd2a:	79fb      	ldrb	r3, [r7, #7]
 800dd2c:	2b03      	cmp	r3, #3
 800dd2e:	d817      	bhi.n	800dd60 <USBD_Get_USB_Status+0x44>
 800dd30:	a201      	add	r2, pc, #4	@ (adr r2, 800dd38 <USBD_Get_USB_Status+0x1c>)
 800dd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd36:	bf00      	nop
 800dd38:	0800dd49 	.word	0x0800dd49
 800dd3c:	0800dd4f 	.word	0x0800dd4f
 800dd40:	0800dd55 	.word	0x0800dd55
 800dd44:	0800dd5b 	.word	0x0800dd5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd4c:	e00b      	b.n	800dd66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd4e:	2303      	movs	r3, #3
 800dd50:	73fb      	strb	r3, [r7, #15]
    break;
 800dd52:	e008      	b.n	800dd66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd54:	2301      	movs	r3, #1
 800dd56:	73fb      	strb	r3, [r7, #15]
    break;
 800dd58:	e005      	b.n	800dd66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd5a:	2303      	movs	r3, #3
 800dd5c:	73fb      	strb	r3, [r7, #15]
    break;
 800dd5e:	e002      	b.n	800dd66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd60:	2303      	movs	r3, #3
 800dd62:	73fb      	strb	r3, [r7, #15]
    break;
 800dd64:	bf00      	nop
  }
  return usb_status;
 800dd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3714      	adds	r7, #20
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <arm_copy_f32>:
 800dd74:	b4f0      	push	{r4, r5, r6, r7}
 800dd76:	0897      	lsrs	r7, r2, #2
 800dd78:	d01e      	beq.n	800ddb8 <arm_copy_f32+0x44>
 800dd7a:	f100 0410 	add.w	r4, r0, #16
 800dd7e:	f101 0310 	add.w	r3, r1, #16
 800dd82:	463d      	mov	r5, r7
 800dd84:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800dd88:	f843 6c10 	str.w	r6, [r3, #-16]
 800dd8c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800dd90:	f843 6c0c 	str.w	r6, [r3, #-12]
 800dd94:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800dd98:	f843 6c08 	str.w	r6, [r3, #-8]
 800dd9c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800dda0:	f843 6c04 	str.w	r6, [r3, #-4]
 800dda4:	3d01      	subs	r5, #1
 800dda6:	f104 0410 	add.w	r4, r4, #16
 800ddaa:	f103 0310 	add.w	r3, r3, #16
 800ddae:	d1e9      	bne.n	800dd84 <arm_copy_f32+0x10>
 800ddb0:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800ddb4:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800ddb8:	f012 0203 	ands.w	r2, r2, #3
 800ddbc:	d009      	beq.n	800ddd2 <arm_copy_f32+0x5e>
 800ddbe:	6803      	ldr	r3, [r0, #0]
 800ddc0:	600b      	str	r3, [r1, #0]
 800ddc2:	3a01      	subs	r2, #1
 800ddc4:	d005      	beq.n	800ddd2 <arm_copy_f32+0x5e>
 800ddc6:	6843      	ldr	r3, [r0, #4]
 800ddc8:	604b      	str	r3, [r1, #4]
 800ddca:	2a01      	cmp	r2, #1
 800ddcc:	bf1c      	itt	ne
 800ddce:	6883      	ldrne	r3, [r0, #8]
 800ddd0:	608b      	strne	r3, [r1, #8]
 800ddd2:	bcf0      	pop	{r4, r5, r6, r7}
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop

0800ddd8 <arm_std_f32>:
 800ddd8:	b510      	push	{r4, lr}
 800ddda:	ed2d 8b02 	vpush	{d8}
 800ddde:	b082      	sub	sp, #8
 800dde0:	4614      	mov	r4, r2
 800dde2:	aa01      	add	r2, sp, #4
 800dde4:	f000 f8e4 	bl	800dfb0 <arm_var_f32>
 800dde8:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ddec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ddf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf4:	db0c      	blt.n	800de10 <arm_std_f32+0x38>
 800ddf6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ddfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddfe:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800de02:	d408      	bmi.n	800de16 <arm_std_f32+0x3e>
 800de04:	ed84 8a00 	vstr	s16, [r4]
 800de08:	b002      	add	sp, #8
 800de0a:	ecbd 8b02 	vpop	{d8}
 800de0e:	bd10      	pop	{r4, pc}
 800de10:	2300      	movs	r3, #0
 800de12:	6023      	str	r3, [r4, #0]
 800de14:	e7f8      	b.n	800de08 <arm_std_f32+0x30>
 800de16:	f005 fa27 	bl	8013268 <sqrtf>
 800de1a:	e7f3      	b.n	800de04 <arm_std_f32+0x2c>

0800de1c <arm_mean_f32>:
 800de1c:	b430      	push	{r4, r5}
 800de1e:	088d      	lsrs	r5, r1, #2
 800de20:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800de94 <arm_mean_f32+0x78>
 800de24:	d018      	beq.n	800de58 <arm_mean_f32+0x3c>
 800de26:	f100 0310 	add.w	r3, r0, #16
 800de2a:	462c      	mov	r4, r5
 800de2c:	ed53 5a04 	vldr	s11, [r3, #-16]
 800de30:	ed13 6a03 	vldr	s12, [r3, #-12]
 800de34:	ed53 6a02 	vldr	s13, [r3, #-8]
 800de38:	ed13 7a01 	vldr	s14, [r3, #-4]
 800de3c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800de40:	3c01      	subs	r4, #1
 800de42:	ee77 7a86 	vadd.f32	s15, s15, s12
 800de46:	f103 0310 	add.w	r3, r3, #16
 800de4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de52:	d1eb      	bne.n	800de2c <arm_mean_f32+0x10>
 800de54:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800de58:	f011 0303 	ands.w	r3, r1, #3
 800de5c:	d00f      	beq.n	800de7e <arm_mean_f32+0x62>
 800de5e:	ed90 7a00 	vldr	s14, [r0]
 800de62:	3b01      	subs	r3, #1
 800de64:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de68:	d009      	beq.n	800de7e <arm_mean_f32+0x62>
 800de6a:	ed90 7a01 	vldr	s14, [r0, #4]
 800de6e:	2b01      	cmp	r3, #1
 800de70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de74:	bf1c      	itt	ne
 800de76:	ed90 7a02 	vldrne	s14, [r0, #8]
 800de7a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800de7e:	ee07 1a10 	vmov	s14, r1
 800de82:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800de86:	bc30      	pop	{r4, r5}
 800de88:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800de8c:	edc2 6a00 	vstr	s13, [r2]
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	00000000 	.word	0x00000000

0800de98 <arm_scale_f32>:
 800de98:	b470      	push	{r4, r5, r6}
 800de9a:	0896      	lsrs	r6, r2, #2
 800de9c:	d026      	beq.n	800deec <arm_scale_f32+0x54>
 800de9e:	f100 0410 	add.w	r4, r0, #16
 800dea2:	f101 0310 	add.w	r3, r1, #16
 800dea6:	4635      	mov	r5, r6
 800dea8:	ed14 6a03 	vldr	s12, [r4, #-12]
 800deac:	ed54 6a02 	vldr	s13, [r4, #-8]
 800deb0:	ed14 7a01 	vldr	s14, [r4, #-4]
 800deb4:	ed54 7a04 	vldr	s15, [r4, #-16]
 800deb8:	ee20 6a06 	vmul.f32	s12, s0, s12
 800debc:	ee60 6a26 	vmul.f32	s13, s0, s13
 800dec0:	ee20 7a07 	vmul.f32	s14, s0, s14
 800dec4:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dec8:	3d01      	subs	r5, #1
 800deca:	ed03 6a03 	vstr	s12, [r3, #-12]
 800dece:	ed43 6a02 	vstr	s13, [r3, #-8]
 800ded2:	ed03 7a01 	vstr	s14, [r3, #-4]
 800ded6:	ed43 7a04 	vstr	s15, [r3, #-16]
 800deda:	f104 0410 	add.w	r4, r4, #16
 800dede:	f103 0310 	add.w	r3, r3, #16
 800dee2:	d1e1      	bne.n	800dea8 <arm_scale_f32+0x10>
 800dee4:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800dee8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800deec:	f012 0203 	ands.w	r2, r2, #3
 800def0:	d015      	beq.n	800df1e <arm_scale_f32+0x86>
 800def2:	edd0 7a00 	vldr	s15, [r0]
 800def6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800defa:	3a01      	subs	r2, #1
 800defc:	edc1 7a00 	vstr	s15, [r1]
 800df00:	d00d      	beq.n	800df1e <arm_scale_f32+0x86>
 800df02:	edd0 7a01 	vldr	s15, [r0, #4]
 800df06:	ee67 7a80 	vmul.f32	s15, s15, s0
 800df0a:	2a01      	cmp	r2, #1
 800df0c:	edc1 7a01 	vstr	s15, [r1, #4]
 800df10:	d005      	beq.n	800df1e <arm_scale_f32+0x86>
 800df12:	edd0 7a02 	vldr	s15, [r0, #8]
 800df16:	ee27 0a80 	vmul.f32	s0, s15, s0
 800df1a:	ed81 0a02 	vstr	s0, [r1, #8]
 800df1e:	bc70      	pop	{r4, r5, r6}
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop

0800df24 <arm_offset_f32>:
 800df24:	b470      	push	{r4, r5, r6}
 800df26:	0896      	lsrs	r6, r2, #2
 800df28:	d026      	beq.n	800df78 <arm_offset_f32+0x54>
 800df2a:	f100 0410 	add.w	r4, r0, #16
 800df2e:	f101 0310 	add.w	r3, r1, #16
 800df32:	4635      	mov	r5, r6
 800df34:	ed54 7a04 	vldr	s15, [r4, #-16]
 800df38:	ee77 7a80 	vadd.f32	s15, s15, s0
 800df3c:	3d01      	subs	r5, #1
 800df3e:	ed43 7a04 	vstr	s15, [r3, #-16]
 800df42:	ed54 7a03 	vldr	s15, [r4, #-12]
 800df46:	ee77 7a80 	vadd.f32	s15, s15, s0
 800df4a:	f104 0410 	add.w	r4, r4, #16
 800df4e:	ed43 7a03 	vstr	s15, [r3, #-12]
 800df52:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800df56:	ee77 7a80 	vadd.f32	s15, s15, s0
 800df5a:	f103 0310 	add.w	r3, r3, #16
 800df5e:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800df62:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800df66:	ee77 7a80 	vadd.f32	s15, s15, s0
 800df6a:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800df6e:	d1e1      	bne.n	800df34 <arm_offset_f32+0x10>
 800df70:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800df74:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800df78:	f012 0203 	ands.w	r2, r2, #3
 800df7c:	d015      	beq.n	800dfaa <arm_offset_f32+0x86>
 800df7e:	edd0 7a00 	vldr	s15, [r0]
 800df82:	ee77 7a80 	vadd.f32	s15, s15, s0
 800df86:	3a01      	subs	r2, #1
 800df88:	edc1 7a00 	vstr	s15, [r1]
 800df8c:	d00d      	beq.n	800dfaa <arm_offset_f32+0x86>
 800df8e:	edd0 7a01 	vldr	s15, [r0, #4]
 800df92:	ee77 7a80 	vadd.f32	s15, s15, s0
 800df96:	2a01      	cmp	r2, #1
 800df98:	edc1 7a01 	vstr	s15, [r1, #4]
 800df9c:	d005      	beq.n	800dfaa <arm_offset_f32+0x86>
 800df9e:	edd0 7a02 	vldr	s15, [r0, #8]
 800dfa2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800dfa6:	ed81 0a02 	vstr	s0, [r1, #8]
 800dfaa:	bc70      	pop	{r4, r5, r6}
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop

0800dfb0 <arm_var_f32>:
 800dfb0:	2901      	cmp	r1, #1
 800dfb2:	f240 809a 	bls.w	800e0ea <arm_var_f32+0x13a>
 800dfb6:	b4f0      	push	{r4, r5, r6, r7}
 800dfb8:	088d      	lsrs	r5, r1, #2
 800dfba:	f000 80a0 	beq.w	800e0fe <arm_var_f32+0x14e>
 800dfbe:	f100 0310 	add.w	r3, r0, #16
 800dfc2:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800e108 <arm_var_f32+0x158>
 800dfc6:	461c      	mov	r4, r3
 800dfc8:	462e      	mov	r6, r5
 800dfca:	ed54 5a04 	vldr	s11, [r4, #-16]
 800dfce:	ed14 6a03 	vldr	s12, [r4, #-12]
 800dfd2:	ed54 6a02 	vldr	s13, [r4, #-8]
 800dfd6:	ed14 7a01 	vldr	s14, [r4, #-4]
 800dfda:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800dfde:	3e01      	subs	r6, #1
 800dfe0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800dfe4:	f104 0410 	add.w	r4, r4, #16
 800dfe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dff0:	d1eb      	bne.n	800dfca <arm_var_f32+0x1a>
 800dff2:	f011 0403 	ands.w	r4, r1, #3
 800dff6:	ea4f 1705 	mov.w	r7, r5, lsl #4
 800dffa:	eb00 1605 	add.w	r6, r0, r5, lsl #4
 800dffe:	d077      	beq.n	800e0f0 <arm_var_f32+0x140>
 800e000:	ed96 7a00 	vldr	s14, [r6]
 800e004:	1e63      	subs	r3, r4, #1
 800e006:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e00a:	d063      	beq.n	800e0d4 <arm_var_f32+0x124>
 800e00c:	ed96 7a01 	vldr	s14, [r6, #4]
 800e010:	2b01      	cmp	r3, #1
 800e012:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e016:	d05d      	beq.n	800e0d4 <arm_var_f32+0x124>
 800e018:	ed96 7a02 	vldr	s14, [r6, #8]
 800e01c:	ee06 1a90 	vmov	s13, r1
 800e020:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e024:	eef8 4a66 	vcvt.f32.u32	s9, s13
 800e028:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800e02c:	2d00      	cmp	r5, #0
 800e02e:	d059      	beq.n	800e0e4 <arm_var_f32+0x134>
 800e030:	f100 0310 	add.w	r3, r0, #16
 800e034:	012f      	lsls	r7, r5, #4
 800e036:	4629      	mov	r1, r5
 800e038:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800e108 <arm_var_f32+0x158>
 800e03c:	ed13 6a04 	vldr	s12, [r3, #-16]
 800e040:	ed53 6a03 	vldr	s13, [r3, #-12]
 800e044:	ed13 7a02 	vldr	s14, [r3, #-8]
 800e048:	ed53 5a01 	vldr	s11, [r3, #-4]
 800e04c:	ee36 6a45 	vsub.f32	s12, s12, s10
 800e050:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800e054:	ee26 6a06 	vmul.f32	s12, s12, s12
 800e058:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800e05c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800e060:	ee77 7a45 	vsub.f32	s15, s14, s10
 800e064:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e068:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e06c:	ee35 6ac5 	vsub.f32	s12, s11, s10
 800e070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e074:	ee26 6a06 	vmul.f32	s12, s12, s12
 800e078:	3901      	subs	r1, #1
 800e07a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e07e:	f103 0310 	add.w	r3, r3, #16
 800e082:	d1db      	bne.n	800e03c <arm_var_f32+0x8c>
 800e084:	4438      	add	r0, r7
 800e086:	b1dc      	cbz	r4, 800e0c0 <arm_var_f32+0x110>
 800e088:	1e63      	subs	r3, r4, #1
 800e08a:	ed90 7a00 	vldr	s14, [r0]
 800e08e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800e092:	ee27 7a07 	vmul.f32	s14, s14, s14
 800e096:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e09a:	b18b      	cbz	r3, 800e0c0 <arm_var_f32+0x110>
 800e09c:	ed90 7a01 	vldr	s14, [r0, #4]
 800e0a0:	ee37 7a45 	vsub.f32	s14, s14, s10
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	ee27 7a07 	vmul.f32	s14, s14, s14
 800e0aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0ae:	d007      	beq.n	800e0c0 <arm_var_f32+0x110>
 800e0b0:	ed90 7a02 	vldr	s14, [r0, #8]
 800e0b4:	ee37 5a45 	vsub.f32	s10, s14, s10
 800e0b8:	ee25 5a05 	vmul.f32	s10, s10, s10
 800e0bc:	ee77 7a85 	vadd.f32	s15, s15, s10
 800e0c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e0c4:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800e0c8:	bcf0      	pop	{r4, r5, r6, r7}
 800e0ca:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e0ce:	ed82 7a00 	vstr	s14, [r2]
 800e0d2:	4770      	bx	lr
 800e0d4:	ee07 1a10 	vmov	s14, r1
 800e0d8:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800e0dc:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800e0e0:	2d00      	cmp	r5, #0
 800e0e2:	d1a5      	bne.n	800e030 <arm_var_f32+0x80>
 800e0e4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e108 <arm_var_f32+0x158>
 800e0e8:	e7cf      	b.n	800e08a <arm_var_f32+0xda>
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	6013      	str	r3, [r2, #0]
 800e0ee:	4770      	bx	lr
 800e0f0:	ee07 1a10 	vmov	s14, r1
 800e0f4:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800e0f8:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800e0fc:	e79b      	b.n	800e036 <arm_var_f32+0x86>
 800e0fe:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800e108 <arm_var_f32+0x158>
 800e102:	4606      	mov	r6, r0
 800e104:	460c      	mov	r4, r1
 800e106:	e77b      	b.n	800e000 <arm_var_f32+0x50>
 800e108:	00000000 	.word	0x00000000

0800e10c <atof>:
 800e10c:	2100      	movs	r1, #0
 800e10e:	f000 be3d 	b.w	800ed8c <strtod>

0800e112 <atoi>:
 800e112:	220a      	movs	r2, #10
 800e114:	2100      	movs	r1, #0
 800e116:	f000 bec1 	b.w	800ee9c <strtol>
	...

0800e11c <srand>:
 800e11c:	b538      	push	{r3, r4, r5, lr}
 800e11e:	4b10      	ldr	r3, [pc, #64]	@ (800e160 <srand+0x44>)
 800e120:	681d      	ldr	r5, [r3, #0]
 800e122:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e124:	4604      	mov	r4, r0
 800e126:	b9b3      	cbnz	r3, 800e156 <srand+0x3a>
 800e128:	2018      	movs	r0, #24
 800e12a:	f003 f9ed 	bl	8011508 <malloc>
 800e12e:	4602      	mov	r2, r0
 800e130:	6328      	str	r0, [r5, #48]	@ 0x30
 800e132:	b920      	cbnz	r0, 800e13e <srand+0x22>
 800e134:	4b0b      	ldr	r3, [pc, #44]	@ (800e164 <srand+0x48>)
 800e136:	480c      	ldr	r0, [pc, #48]	@ (800e168 <srand+0x4c>)
 800e138:	2146      	movs	r1, #70	@ 0x46
 800e13a:	f001 ffeb 	bl	8010114 <__assert_func>
 800e13e:	490b      	ldr	r1, [pc, #44]	@ (800e16c <srand+0x50>)
 800e140:	4b0b      	ldr	r3, [pc, #44]	@ (800e170 <srand+0x54>)
 800e142:	e9c0 1300 	strd	r1, r3, [r0]
 800e146:	4b0b      	ldr	r3, [pc, #44]	@ (800e174 <srand+0x58>)
 800e148:	6083      	str	r3, [r0, #8]
 800e14a:	230b      	movs	r3, #11
 800e14c:	8183      	strh	r3, [r0, #12]
 800e14e:	2100      	movs	r1, #0
 800e150:	2001      	movs	r0, #1
 800e152:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e156:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e158:	2200      	movs	r2, #0
 800e15a:	611c      	str	r4, [r3, #16]
 800e15c:	615a      	str	r2, [r3, #20]
 800e15e:	bd38      	pop	{r3, r4, r5, pc}
 800e160:	20000280 	.word	0x20000280
 800e164:	0806d518 	.word	0x0806d518
 800e168:	0806d52f 	.word	0x0806d52f
 800e16c:	abcd330e 	.word	0xabcd330e
 800e170:	e66d1234 	.word	0xe66d1234
 800e174:	0005deec 	.word	0x0005deec

0800e178 <sulp>:
 800e178:	b570      	push	{r4, r5, r6, lr}
 800e17a:	4604      	mov	r4, r0
 800e17c:	460d      	mov	r5, r1
 800e17e:	ec45 4b10 	vmov	d0, r4, r5
 800e182:	4616      	mov	r6, r2
 800e184:	f003 fdf4 	bl	8011d70 <__ulp>
 800e188:	ec51 0b10 	vmov	r0, r1, d0
 800e18c:	b17e      	cbz	r6, 800e1ae <sulp+0x36>
 800e18e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e192:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e196:	2b00      	cmp	r3, #0
 800e198:	dd09      	ble.n	800e1ae <sulp+0x36>
 800e19a:	051b      	lsls	r3, r3, #20
 800e19c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e1a0:	2400      	movs	r4, #0
 800e1a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e1a6:	4622      	mov	r2, r4
 800e1a8:	462b      	mov	r3, r5
 800e1aa:	f7f2 fa35 	bl	8000618 <__aeabi_dmul>
 800e1ae:	ec41 0b10 	vmov	d0, r0, r1
 800e1b2:	bd70      	pop	{r4, r5, r6, pc}
 800e1b4:	0000      	movs	r0, r0
	...

0800e1b8 <_strtod_l>:
 800e1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1bc:	b09f      	sub	sp, #124	@ 0x7c
 800e1be:	460c      	mov	r4, r1
 800e1c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	921a      	str	r2, [sp, #104]	@ 0x68
 800e1c6:	9005      	str	r0, [sp, #20]
 800e1c8:	f04f 0a00 	mov.w	sl, #0
 800e1cc:	f04f 0b00 	mov.w	fp, #0
 800e1d0:	460a      	mov	r2, r1
 800e1d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1d4:	7811      	ldrb	r1, [r2, #0]
 800e1d6:	292b      	cmp	r1, #43	@ 0x2b
 800e1d8:	d04a      	beq.n	800e270 <_strtod_l+0xb8>
 800e1da:	d838      	bhi.n	800e24e <_strtod_l+0x96>
 800e1dc:	290d      	cmp	r1, #13
 800e1de:	d832      	bhi.n	800e246 <_strtod_l+0x8e>
 800e1e0:	2908      	cmp	r1, #8
 800e1e2:	d832      	bhi.n	800e24a <_strtod_l+0x92>
 800e1e4:	2900      	cmp	r1, #0
 800e1e6:	d03b      	beq.n	800e260 <_strtod_l+0xa8>
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	920e      	str	r2, [sp, #56]	@ 0x38
 800e1ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e1ee:	782a      	ldrb	r2, [r5, #0]
 800e1f0:	2a30      	cmp	r2, #48	@ 0x30
 800e1f2:	f040 80b2 	bne.w	800e35a <_strtod_l+0x1a2>
 800e1f6:	786a      	ldrb	r2, [r5, #1]
 800e1f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e1fc:	2a58      	cmp	r2, #88	@ 0x58
 800e1fe:	d16e      	bne.n	800e2de <_strtod_l+0x126>
 800e200:	9302      	str	r3, [sp, #8]
 800e202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e204:	9301      	str	r3, [sp, #4]
 800e206:	ab1a      	add	r3, sp, #104	@ 0x68
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	4a8f      	ldr	r2, [pc, #572]	@ (800e448 <_strtod_l+0x290>)
 800e20c:	9805      	ldr	r0, [sp, #20]
 800e20e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e210:	a919      	add	r1, sp, #100	@ 0x64
 800e212:	f002 fea7 	bl	8010f64 <__gethex>
 800e216:	f010 060f 	ands.w	r6, r0, #15
 800e21a:	4604      	mov	r4, r0
 800e21c:	d005      	beq.n	800e22a <_strtod_l+0x72>
 800e21e:	2e06      	cmp	r6, #6
 800e220:	d128      	bne.n	800e274 <_strtod_l+0xbc>
 800e222:	3501      	adds	r5, #1
 800e224:	2300      	movs	r3, #0
 800e226:	9519      	str	r5, [sp, #100]	@ 0x64
 800e228:	930e      	str	r3, [sp, #56]	@ 0x38
 800e22a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f040 858e 	bne.w	800ed4e <_strtod_l+0xb96>
 800e232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e234:	b1cb      	cbz	r3, 800e26a <_strtod_l+0xb2>
 800e236:	4652      	mov	r2, sl
 800e238:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e23c:	ec43 2b10 	vmov	d0, r2, r3
 800e240:	b01f      	add	sp, #124	@ 0x7c
 800e242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e246:	2920      	cmp	r1, #32
 800e248:	d1ce      	bne.n	800e1e8 <_strtod_l+0x30>
 800e24a:	3201      	adds	r2, #1
 800e24c:	e7c1      	b.n	800e1d2 <_strtod_l+0x1a>
 800e24e:	292d      	cmp	r1, #45	@ 0x2d
 800e250:	d1ca      	bne.n	800e1e8 <_strtod_l+0x30>
 800e252:	2101      	movs	r1, #1
 800e254:	910e      	str	r1, [sp, #56]	@ 0x38
 800e256:	1c51      	adds	r1, r2, #1
 800e258:	9119      	str	r1, [sp, #100]	@ 0x64
 800e25a:	7852      	ldrb	r2, [r2, #1]
 800e25c:	2a00      	cmp	r2, #0
 800e25e:	d1c5      	bne.n	800e1ec <_strtod_l+0x34>
 800e260:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e262:	9419      	str	r4, [sp, #100]	@ 0x64
 800e264:	2b00      	cmp	r3, #0
 800e266:	f040 8570 	bne.w	800ed4a <_strtod_l+0xb92>
 800e26a:	4652      	mov	r2, sl
 800e26c:	465b      	mov	r3, fp
 800e26e:	e7e5      	b.n	800e23c <_strtod_l+0x84>
 800e270:	2100      	movs	r1, #0
 800e272:	e7ef      	b.n	800e254 <_strtod_l+0x9c>
 800e274:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e276:	b13a      	cbz	r2, 800e288 <_strtod_l+0xd0>
 800e278:	2135      	movs	r1, #53	@ 0x35
 800e27a:	a81c      	add	r0, sp, #112	@ 0x70
 800e27c:	f003 fe72 	bl	8011f64 <__copybits>
 800e280:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e282:	9805      	ldr	r0, [sp, #20]
 800e284:	f003 fa48 	bl	8011718 <_Bfree>
 800e288:	3e01      	subs	r6, #1
 800e28a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e28c:	2e04      	cmp	r6, #4
 800e28e:	d806      	bhi.n	800e29e <_strtod_l+0xe6>
 800e290:	e8df f006 	tbb	[pc, r6]
 800e294:	201d0314 	.word	0x201d0314
 800e298:	14          	.byte	0x14
 800e299:	00          	.byte	0x00
 800e29a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e29e:	05e1      	lsls	r1, r4, #23
 800e2a0:	bf48      	it	mi
 800e2a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e2a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e2aa:	0d1b      	lsrs	r3, r3, #20
 800e2ac:	051b      	lsls	r3, r3, #20
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d1bb      	bne.n	800e22a <_strtod_l+0x72>
 800e2b2:	f001 fee3 	bl	801007c <__errno>
 800e2b6:	2322      	movs	r3, #34	@ 0x22
 800e2b8:	6003      	str	r3, [r0, #0]
 800e2ba:	e7b6      	b.n	800e22a <_strtod_l+0x72>
 800e2bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e2c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e2c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e2c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e2cc:	e7e7      	b.n	800e29e <_strtod_l+0xe6>
 800e2ce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800e450 <_strtod_l+0x298>
 800e2d2:	e7e4      	b.n	800e29e <_strtod_l+0xe6>
 800e2d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e2d8:	f04f 3aff 	mov.w	sl, #4294967295
 800e2dc:	e7df      	b.n	800e29e <_strtod_l+0xe6>
 800e2de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2e0:	1c5a      	adds	r2, r3, #1
 800e2e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e2e4:	785b      	ldrb	r3, [r3, #1]
 800e2e6:	2b30      	cmp	r3, #48	@ 0x30
 800e2e8:	d0f9      	beq.n	800e2de <_strtod_l+0x126>
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d09d      	beq.n	800e22a <_strtod_l+0x72>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	2700      	movs	r7, #0
 800e2f2:	9308      	str	r3, [sp, #32]
 800e2f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2f6:	930c      	str	r3, [sp, #48]	@ 0x30
 800e2f8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800e2fa:	46b9      	mov	r9, r7
 800e2fc:	220a      	movs	r2, #10
 800e2fe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e300:	7805      	ldrb	r5, [r0, #0]
 800e302:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e306:	b2d9      	uxtb	r1, r3
 800e308:	2909      	cmp	r1, #9
 800e30a:	d928      	bls.n	800e35e <_strtod_l+0x1a6>
 800e30c:	494f      	ldr	r1, [pc, #316]	@ (800e44c <_strtod_l+0x294>)
 800e30e:	2201      	movs	r2, #1
 800e310:	f001 fdd2 	bl	800feb8 <strncmp>
 800e314:	2800      	cmp	r0, #0
 800e316:	d032      	beq.n	800e37e <_strtod_l+0x1c6>
 800e318:	2000      	movs	r0, #0
 800e31a:	462a      	mov	r2, r5
 800e31c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e31e:	464d      	mov	r5, r9
 800e320:	4603      	mov	r3, r0
 800e322:	2a65      	cmp	r2, #101	@ 0x65
 800e324:	d001      	beq.n	800e32a <_strtod_l+0x172>
 800e326:	2a45      	cmp	r2, #69	@ 0x45
 800e328:	d114      	bne.n	800e354 <_strtod_l+0x19c>
 800e32a:	b91d      	cbnz	r5, 800e334 <_strtod_l+0x17c>
 800e32c:	9a08      	ldr	r2, [sp, #32]
 800e32e:	4302      	orrs	r2, r0
 800e330:	d096      	beq.n	800e260 <_strtod_l+0xa8>
 800e332:	2500      	movs	r5, #0
 800e334:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e336:	1c62      	adds	r2, r4, #1
 800e338:	9219      	str	r2, [sp, #100]	@ 0x64
 800e33a:	7862      	ldrb	r2, [r4, #1]
 800e33c:	2a2b      	cmp	r2, #43	@ 0x2b
 800e33e:	d07a      	beq.n	800e436 <_strtod_l+0x27e>
 800e340:	2a2d      	cmp	r2, #45	@ 0x2d
 800e342:	d07e      	beq.n	800e442 <_strtod_l+0x28a>
 800e344:	f04f 0c00 	mov.w	ip, #0
 800e348:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e34c:	2909      	cmp	r1, #9
 800e34e:	f240 8085 	bls.w	800e45c <_strtod_l+0x2a4>
 800e352:	9419      	str	r4, [sp, #100]	@ 0x64
 800e354:	f04f 0800 	mov.w	r8, #0
 800e358:	e0a5      	b.n	800e4a6 <_strtod_l+0x2ee>
 800e35a:	2300      	movs	r3, #0
 800e35c:	e7c8      	b.n	800e2f0 <_strtod_l+0x138>
 800e35e:	f1b9 0f08 	cmp.w	r9, #8
 800e362:	bfd8      	it	le
 800e364:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800e366:	f100 0001 	add.w	r0, r0, #1
 800e36a:	bfda      	itte	le
 800e36c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e370:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800e372:	fb02 3707 	mlagt	r7, r2, r7, r3
 800e376:	f109 0901 	add.w	r9, r9, #1
 800e37a:	9019      	str	r0, [sp, #100]	@ 0x64
 800e37c:	e7bf      	b.n	800e2fe <_strtod_l+0x146>
 800e37e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e380:	1c5a      	adds	r2, r3, #1
 800e382:	9219      	str	r2, [sp, #100]	@ 0x64
 800e384:	785a      	ldrb	r2, [r3, #1]
 800e386:	f1b9 0f00 	cmp.w	r9, #0
 800e38a:	d03b      	beq.n	800e404 <_strtod_l+0x24c>
 800e38c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e38e:	464d      	mov	r5, r9
 800e390:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e394:	2b09      	cmp	r3, #9
 800e396:	d912      	bls.n	800e3be <_strtod_l+0x206>
 800e398:	2301      	movs	r3, #1
 800e39a:	e7c2      	b.n	800e322 <_strtod_l+0x16a>
 800e39c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e39e:	1c5a      	adds	r2, r3, #1
 800e3a0:	9219      	str	r2, [sp, #100]	@ 0x64
 800e3a2:	785a      	ldrb	r2, [r3, #1]
 800e3a4:	3001      	adds	r0, #1
 800e3a6:	2a30      	cmp	r2, #48	@ 0x30
 800e3a8:	d0f8      	beq.n	800e39c <_strtod_l+0x1e4>
 800e3aa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e3ae:	2b08      	cmp	r3, #8
 800e3b0:	f200 84d2 	bhi.w	800ed58 <_strtod_l+0xba0>
 800e3b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3b6:	900a      	str	r0, [sp, #40]	@ 0x28
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3bc:	4605      	mov	r5, r0
 800e3be:	3a30      	subs	r2, #48	@ 0x30
 800e3c0:	f100 0301 	add.w	r3, r0, #1
 800e3c4:	d018      	beq.n	800e3f8 <_strtod_l+0x240>
 800e3c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e3c8:	4419      	add	r1, r3
 800e3ca:	910a      	str	r1, [sp, #40]	@ 0x28
 800e3cc:	462e      	mov	r6, r5
 800e3ce:	f04f 0e0a 	mov.w	lr, #10
 800e3d2:	1c71      	adds	r1, r6, #1
 800e3d4:	eba1 0c05 	sub.w	ip, r1, r5
 800e3d8:	4563      	cmp	r3, ip
 800e3da:	dc15      	bgt.n	800e408 <_strtod_l+0x250>
 800e3dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800e3e0:	182b      	adds	r3, r5, r0
 800e3e2:	2b08      	cmp	r3, #8
 800e3e4:	f105 0501 	add.w	r5, r5, #1
 800e3e8:	4405      	add	r5, r0
 800e3ea:	dc1a      	bgt.n	800e422 <_strtod_l+0x26a>
 800e3ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3ee:	230a      	movs	r3, #10
 800e3f0:	fb03 2301 	mla	r3, r3, r1, r2
 800e3f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e3fa:	1c51      	adds	r1, r2, #1
 800e3fc:	9119      	str	r1, [sp, #100]	@ 0x64
 800e3fe:	7852      	ldrb	r2, [r2, #1]
 800e400:	4618      	mov	r0, r3
 800e402:	e7c5      	b.n	800e390 <_strtod_l+0x1d8>
 800e404:	4648      	mov	r0, r9
 800e406:	e7ce      	b.n	800e3a6 <_strtod_l+0x1ee>
 800e408:	2e08      	cmp	r6, #8
 800e40a:	dc05      	bgt.n	800e418 <_strtod_l+0x260>
 800e40c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e40e:	fb0e f606 	mul.w	r6, lr, r6
 800e412:	960b      	str	r6, [sp, #44]	@ 0x2c
 800e414:	460e      	mov	r6, r1
 800e416:	e7dc      	b.n	800e3d2 <_strtod_l+0x21a>
 800e418:	2910      	cmp	r1, #16
 800e41a:	bfd8      	it	le
 800e41c:	fb0e f707 	mulle.w	r7, lr, r7
 800e420:	e7f8      	b.n	800e414 <_strtod_l+0x25c>
 800e422:	2b0f      	cmp	r3, #15
 800e424:	bfdc      	itt	le
 800e426:	230a      	movle	r3, #10
 800e428:	fb03 2707 	mlale	r7, r3, r7, r2
 800e42c:	e7e3      	b.n	800e3f6 <_strtod_l+0x23e>
 800e42e:	2300      	movs	r3, #0
 800e430:	930a      	str	r3, [sp, #40]	@ 0x28
 800e432:	2301      	movs	r3, #1
 800e434:	e77a      	b.n	800e32c <_strtod_l+0x174>
 800e436:	f04f 0c00 	mov.w	ip, #0
 800e43a:	1ca2      	adds	r2, r4, #2
 800e43c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e43e:	78a2      	ldrb	r2, [r4, #2]
 800e440:	e782      	b.n	800e348 <_strtod_l+0x190>
 800e442:	f04f 0c01 	mov.w	ip, #1
 800e446:	e7f8      	b.n	800e43a <_strtod_l+0x282>
 800e448:	0806d7d0 	.word	0x0806d7d0
 800e44c:	0806d587 	.word	0x0806d587
 800e450:	7ff00000 	.word	0x7ff00000
 800e454:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e456:	1c51      	adds	r1, r2, #1
 800e458:	9119      	str	r1, [sp, #100]	@ 0x64
 800e45a:	7852      	ldrb	r2, [r2, #1]
 800e45c:	2a30      	cmp	r2, #48	@ 0x30
 800e45e:	d0f9      	beq.n	800e454 <_strtod_l+0x29c>
 800e460:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e464:	2908      	cmp	r1, #8
 800e466:	f63f af75 	bhi.w	800e354 <_strtod_l+0x19c>
 800e46a:	3a30      	subs	r2, #48	@ 0x30
 800e46c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e46e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e470:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e472:	f04f 080a 	mov.w	r8, #10
 800e476:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e478:	1c56      	adds	r6, r2, #1
 800e47a:	9619      	str	r6, [sp, #100]	@ 0x64
 800e47c:	7852      	ldrb	r2, [r2, #1]
 800e47e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e482:	f1be 0f09 	cmp.w	lr, #9
 800e486:	d939      	bls.n	800e4fc <_strtod_l+0x344>
 800e488:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e48a:	1a76      	subs	r6, r6, r1
 800e48c:	2e08      	cmp	r6, #8
 800e48e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e492:	dc03      	bgt.n	800e49c <_strtod_l+0x2e4>
 800e494:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e496:	4588      	cmp	r8, r1
 800e498:	bfa8      	it	ge
 800e49a:	4688      	movge	r8, r1
 800e49c:	f1bc 0f00 	cmp.w	ip, #0
 800e4a0:	d001      	beq.n	800e4a6 <_strtod_l+0x2ee>
 800e4a2:	f1c8 0800 	rsb	r8, r8, #0
 800e4a6:	2d00      	cmp	r5, #0
 800e4a8:	d14e      	bne.n	800e548 <_strtod_l+0x390>
 800e4aa:	9908      	ldr	r1, [sp, #32]
 800e4ac:	4308      	orrs	r0, r1
 800e4ae:	f47f aebc 	bne.w	800e22a <_strtod_l+0x72>
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	f47f aed4 	bne.w	800e260 <_strtod_l+0xa8>
 800e4b8:	2a69      	cmp	r2, #105	@ 0x69
 800e4ba:	d028      	beq.n	800e50e <_strtod_l+0x356>
 800e4bc:	dc25      	bgt.n	800e50a <_strtod_l+0x352>
 800e4be:	2a49      	cmp	r2, #73	@ 0x49
 800e4c0:	d025      	beq.n	800e50e <_strtod_l+0x356>
 800e4c2:	2a4e      	cmp	r2, #78	@ 0x4e
 800e4c4:	f47f aecc 	bne.w	800e260 <_strtod_l+0xa8>
 800e4c8:	499a      	ldr	r1, [pc, #616]	@ (800e734 <_strtod_l+0x57c>)
 800e4ca:	a819      	add	r0, sp, #100	@ 0x64
 800e4cc:	f002 ff6c 	bl	80113a8 <__match>
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	f43f aec5 	beq.w	800e260 <_strtod_l+0xa8>
 800e4d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	2b28      	cmp	r3, #40	@ 0x28
 800e4dc:	d12e      	bne.n	800e53c <_strtod_l+0x384>
 800e4de:	4996      	ldr	r1, [pc, #600]	@ (800e738 <_strtod_l+0x580>)
 800e4e0:	aa1c      	add	r2, sp, #112	@ 0x70
 800e4e2:	a819      	add	r0, sp, #100	@ 0x64
 800e4e4:	f002 ff74 	bl	80113d0 <__hexnan>
 800e4e8:	2805      	cmp	r0, #5
 800e4ea:	d127      	bne.n	800e53c <_strtod_l+0x384>
 800e4ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e4ee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e4f2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e4f6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e4fa:	e696      	b.n	800e22a <_strtod_l+0x72>
 800e4fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e4fe:	fb08 2101 	mla	r1, r8, r1, r2
 800e502:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e506:	9209      	str	r2, [sp, #36]	@ 0x24
 800e508:	e7b5      	b.n	800e476 <_strtod_l+0x2be>
 800e50a:	2a6e      	cmp	r2, #110	@ 0x6e
 800e50c:	e7da      	b.n	800e4c4 <_strtod_l+0x30c>
 800e50e:	498b      	ldr	r1, [pc, #556]	@ (800e73c <_strtod_l+0x584>)
 800e510:	a819      	add	r0, sp, #100	@ 0x64
 800e512:	f002 ff49 	bl	80113a8 <__match>
 800e516:	2800      	cmp	r0, #0
 800e518:	f43f aea2 	beq.w	800e260 <_strtod_l+0xa8>
 800e51c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e51e:	4988      	ldr	r1, [pc, #544]	@ (800e740 <_strtod_l+0x588>)
 800e520:	3b01      	subs	r3, #1
 800e522:	a819      	add	r0, sp, #100	@ 0x64
 800e524:	9319      	str	r3, [sp, #100]	@ 0x64
 800e526:	f002 ff3f 	bl	80113a8 <__match>
 800e52a:	b910      	cbnz	r0, 800e532 <_strtod_l+0x37a>
 800e52c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e52e:	3301      	adds	r3, #1
 800e530:	9319      	str	r3, [sp, #100]	@ 0x64
 800e532:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800e750 <_strtod_l+0x598>
 800e536:	f04f 0a00 	mov.w	sl, #0
 800e53a:	e676      	b.n	800e22a <_strtod_l+0x72>
 800e53c:	4881      	ldr	r0, [pc, #516]	@ (800e744 <_strtod_l+0x58c>)
 800e53e:	f001 fddb 	bl	80100f8 <nan>
 800e542:	ec5b ab10 	vmov	sl, fp, d0
 800e546:	e670      	b.n	800e22a <_strtod_l+0x72>
 800e548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e54a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e54c:	eba8 0303 	sub.w	r3, r8, r3
 800e550:	f1b9 0f00 	cmp.w	r9, #0
 800e554:	bf08      	it	eq
 800e556:	46a9      	moveq	r9, r5
 800e558:	2d10      	cmp	r5, #16
 800e55a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e55c:	462c      	mov	r4, r5
 800e55e:	bfa8      	it	ge
 800e560:	2410      	movge	r4, #16
 800e562:	f7f1 ffdf 	bl	8000524 <__aeabi_ui2d>
 800e566:	2d09      	cmp	r5, #9
 800e568:	4682      	mov	sl, r0
 800e56a:	468b      	mov	fp, r1
 800e56c:	dc13      	bgt.n	800e596 <_strtod_l+0x3de>
 800e56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e570:	2b00      	cmp	r3, #0
 800e572:	f43f ae5a 	beq.w	800e22a <_strtod_l+0x72>
 800e576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e578:	dd78      	ble.n	800e66c <_strtod_l+0x4b4>
 800e57a:	2b16      	cmp	r3, #22
 800e57c:	dc5f      	bgt.n	800e63e <_strtod_l+0x486>
 800e57e:	4972      	ldr	r1, [pc, #456]	@ (800e748 <_strtod_l+0x590>)
 800e580:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e584:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e588:	4652      	mov	r2, sl
 800e58a:	465b      	mov	r3, fp
 800e58c:	f7f2 f844 	bl	8000618 <__aeabi_dmul>
 800e590:	4682      	mov	sl, r0
 800e592:	468b      	mov	fp, r1
 800e594:	e649      	b.n	800e22a <_strtod_l+0x72>
 800e596:	4b6c      	ldr	r3, [pc, #432]	@ (800e748 <_strtod_l+0x590>)
 800e598:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e59c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e5a0:	f7f2 f83a 	bl	8000618 <__aeabi_dmul>
 800e5a4:	4682      	mov	sl, r0
 800e5a6:	4638      	mov	r0, r7
 800e5a8:	468b      	mov	fp, r1
 800e5aa:	f7f1 ffbb 	bl	8000524 <__aeabi_ui2d>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	4650      	mov	r0, sl
 800e5b4:	4659      	mov	r1, fp
 800e5b6:	f7f1 fe79 	bl	80002ac <__adddf3>
 800e5ba:	2d0f      	cmp	r5, #15
 800e5bc:	4682      	mov	sl, r0
 800e5be:	468b      	mov	fp, r1
 800e5c0:	ddd5      	ble.n	800e56e <_strtod_l+0x3b6>
 800e5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5c4:	1b2c      	subs	r4, r5, r4
 800e5c6:	441c      	add	r4, r3
 800e5c8:	2c00      	cmp	r4, #0
 800e5ca:	f340 8093 	ble.w	800e6f4 <_strtod_l+0x53c>
 800e5ce:	f014 030f 	ands.w	r3, r4, #15
 800e5d2:	d00a      	beq.n	800e5ea <_strtod_l+0x432>
 800e5d4:	495c      	ldr	r1, [pc, #368]	@ (800e748 <_strtod_l+0x590>)
 800e5d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e5da:	4652      	mov	r2, sl
 800e5dc:	465b      	mov	r3, fp
 800e5de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5e2:	f7f2 f819 	bl	8000618 <__aeabi_dmul>
 800e5e6:	4682      	mov	sl, r0
 800e5e8:	468b      	mov	fp, r1
 800e5ea:	f034 040f 	bics.w	r4, r4, #15
 800e5ee:	d073      	beq.n	800e6d8 <_strtod_l+0x520>
 800e5f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e5f4:	dd49      	ble.n	800e68a <_strtod_l+0x4d2>
 800e5f6:	2400      	movs	r4, #0
 800e5f8:	46a0      	mov	r8, r4
 800e5fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e5fc:	46a1      	mov	r9, r4
 800e5fe:	9a05      	ldr	r2, [sp, #20]
 800e600:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800e750 <_strtod_l+0x598>
 800e604:	2322      	movs	r3, #34	@ 0x22
 800e606:	6013      	str	r3, [r2, #0]
 800e608:	f04f 0a00 	mov.w	sl, #0
 800e60c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f43f ae0b 	beq.w	800e22a <_strtod_l+0x72>
 800e614:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e616:	9805      	ldr	r0, [sp, #20]
 800e618:	f003 f87e 	bl	8011718 <_Bfree>
 800e61c:	9805      	ldr	r0, [sp, #20]
 800e61e:	4649      	mov	r1, r9
 800e620:	f003 f87a 	bl	8011718 <_Bfree>
 800e624:	9805      	ldr	r0, [sp, #20]
 800e626:	4641      	mov	r1, r8
 800e628:	f003 f876 	bl	8011718 <_Bfree>
 800e62c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e62e:	9805      	ldr	r0, [sp, #20]
 800e630:	f003 f872 	bl	8011718 <_Bfree>
 800e634:	9805      	ldr	r0, [sp, #20]
 800e636:	4621      	mov	r1, r4
 800e638:	f003 f86e 	bl	8011718 <_Bfree>
 800e63c:	e5f5      	b.n	800e22a <_strtod_l+0x72>
 800e63e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e640:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e644:	4293      	cmp	r3, r2
 800e646:	dbbc      	blt.n	800e5c2 <_strtod_l+0x40a>
 800e648:	4c3f      	ldr	r4, [pc, #252]	@ (800e748 <_strtod_l+0x590>)
 800e64a:	f1c5 050f 	rsb	r5, r5, #15
 800e64e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e652:	4652      	mov	r2, sl
 800e654:	465b      	mov	r3, fp
 800e656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e65a:	f7f1 ffdd 	bl	8000618 <__aeabi_dmul>
 800e65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e660:	1b5d      	subs	r5, r3, r5
 800e662:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e666:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e66a:	e78f      	b.n	800e58c <_strtod_l+0x3d4>
 800e66c:	3316      	adds	r3, #22
 800e66e:	dba8      	blt.n	800e5c2 <_strtod_l+0x40a>
 800e670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e672:	eba3 0808 	sub.w	r8, r3, r8
 800e676:	4b34      	ldr	r3, [pc, #208]	@ (800e748 <_strtod_l+0x590>)
 800e678:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e67c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e680:	4650      	mov	r0, sl
 800e682:	4659      	mov	r1, fp
 800e684:	f7f2 f8f2 	bl	800086c <__aeabi_ddiv>
 800e688:	e782      	b.n	800e590 <_strtod_l+0x3d8>
 800e68a:	2300      	movs	r3, #0
 800e68c:	4f2f      	ldr	r7, [pc, #188]	@ (800e74c <_strtod_l+0x594>)
 800e68e:	1124      	asrs	r4, r4, #4
 800e690:	4650      	mov	r0, sl
 800e692:	4659      	mov	r1, fp
 800e694:	461e      	mov	r6, r3
 800e696:	2c01      	cmp	r4, #1
 800e698:	dc21      	bgt.n	800e6de <_strtod_l+0x526>
 800e69a:	b10b      	cbz	r3, 800e6a0 <_strtod_l+0x4e8>
 800e69c:	4682      	mov	sl, r0
 800e69e:	468b      	mov	fp, r1
 800e6a0:	492a      	ldr	r1, [pc, #168]	@ (800e74c <_strtod_l+0x594>)
 800e6a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e6a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e6aa:	4652      	mov	r2, sl
 800e6ac:	465b      	mov	r3, fp
 800e6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6b2:	f7f1 ffb1 	bl	8000618 <__aeabi_dmul>
 800e6b6:	4b26      	ldr	r3, [pc, #152]	@ (800e750 <_strtod_l+0x598>)
 800e6b8:	460a      	mov	r2, r1
 800e6ba:	400b      	ands	r3, r1
 800e6bc:	4925      	ldr	r1, [pc, #148]	@ (800e754 <_strtod_l+0x59c>)
 800e6be:	428b      	cmp	r3, r1
 800e6c0:	4682      	mov	sl, r0
 800e6c2:	d898      	bhi.n	800e5f6 <_strtod_l+0x43e>
 800e6c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e6c8:	428b      	cmp	r3, r1
 800e6ca:	bf86      	itte	hi
 800e6cc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800e758 <_strtod_l+0x5a0>
 800e6d0:	f04f 3aff 	movhi.w	sl, #4294967295
 800e6d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e6d8:	2300      	movs	r3, #0
 800e6da:	9308      	str	r3, [sp, #32]
 800e6dc:	e076      	b.n	800e7cc <_strtod_l+0x614>
 800e6de:	07e2      	lsls	r2, r4, #31
 800e6e0:	d504      	bpl.n	800e6ec <_strtod_l+0x534>
 800e6e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6e6:	f7f1 ff97 	bl	8000618 <__aeabi_dmul>
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	3601      	adds	r6, #1
 800e6ee:	1064      	asrs	r4, r4, #1
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	e7d0      	b.n	800e696 <_strtod_l+0x4de>
 800e6f4:	d0f0      	beq.n	800e6d8 <_strtod_l+0x520>
 800e6f6:	4264      	negs	r4, r4
 800e6f8:	f014 020f 	ands.w	r2, r4, #15
 800e6fc:	d00a      	beq.n	800e714 <_strtod_l+0x55c>
 800e6fe:	4b12      	ldr	r3, [pc, #72]	@ (800e748 <_strtod_l+0x590>)
 800e700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e704:	4650      	mov	r0, sl
 800e706:	4659      	mov	r1, fp
 800e708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70c:	f7f2 f8ae 	bl	800086c <__aeabi_ddiv>
 800e710:	4682      	mov	sl, r0
 800e712:	468b      	mov	fp, r1
 800e714:	1124      	asrs	r4, r4, #4
 800e716:	d0df      	beq.n	800e6d8 <_strtod_l+0x520>
 800e718:	2c1f      	cmp	r4, #31
 800e71a:	dd1f      	ble.n	800e75c <_strtod_l+0x5a4>
 800e71c:	2400      	movs	r4, #0
 800e71e:	46a0      	mov	r8, r4
 800e720:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e722:	46a1      	mov	r9, r4
 800e724:	9a05      	ldr	r2, [sp, #20]
 800e726:	2322      	movs	r3, #34	@ 0x22
 800e728:	f04f 0a00 	mov.w	sl, #0
 800e72c:	f04f 0b00 	mov.w	fp, #0
 800e730:	6013      	str	r3, [r2, #0]
 800e732:	e76b      	b.n	800e60c <_strtod_l+0x454>
 800e734:	0806d596 	.word	0x0806d596
 800e738:	0806d7bc 	.word	0x0806d7bc
 800e73c:	0806d58e 	.word	0x0806d58e
 800e740:	0806d661 	.word	0x0806d661
 800e744:	0806d65d 	.word	0x0806d65d
 800e748:	0806d948 	.word	0x0806d948
 800e74c:	0806d920 	.word	0x0806d920
 800e750:	7ff00000 	.word	0x7ff00000
 800e754:	7ca00000 	.word	0x7ca00000
 800e758:	7fefffff 	.word	0x7fefffff
 800e75c:	f014 0310 	ands.w	r3, r4, #16
 800e760:	bf18      	it	ne
 800e762:	236a      	movne	r3, #106	@ 0x6a
 800e764:	4ea9      	ldr	r6, [pc, #676]	@ (800ea0c <_strtod_l+0x854>)
 800e766:	9308      	str	r3, [sp, #32]
 800e768:	4650      	mov	r0, sl
 800e76a:	4659      	mov	r1, fp
 800e76c:	2300      	movs	r3, #0
 800e76e:	07e7      	lsls	r7, r4, #31
 800e770:	d504      	bpl.n	800e77c <_strtod_l+0x5c4>
 800e772:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e776:	f7f1 ff4f 	bl	8000618 <__aeabi_dmul>
 800e77a:	2301      	movs	r3, #1
 800e77c:	1064      	asrs	r4, r4, #1
 800e77e:	f106 0608 	add.w	r6, r6, #8
 800e782:	d1f4      	bne.n	800e76e <_strtod_l+0x5b6>
 800e784:	b10b      	cbz	r3, 800e78a <_strtod_l+0x5d2>
 800e786:	4682      	mov	sl, r0
 800e788:	468b      	mov	fp, r1
 800e78a:	9b08      	ldr	r3, [sp, #32]
 800e78c:	b1b3      	cbz	r3, 800e7bc <_strtod_l+0x604>
 800e78e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e792:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e796:	2b00      	cmp	r3, #0
 800e798:	4659      	mov	r1, fp
 800e79a:	dd0f      	ble.n	800e7bc <_strtod_l+0x604>
 800e79c:	2b1f      	cmp	r3, #31
 800e79e:	dd56      	ble.n	800e84e <_strtod_l+0x696>
 800e7a0:	2b34      	cmp	r3, #52	@ 0x34
 800e7a2:	bfde      	ittt	le
 800e7a4:	f04f 33ff 	movle.w	r3, #4294967295
 800e7a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e7ac:	4093      	lslle	r3, r2
 800e7ae:	f04f 0a00 	mov.w	sl, #0
 800e7b2:	bfcc      	ite	gt
 800e7b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e7b8:	ea03 0b01 	andle.w	fp, r3, r1
 800e7bc:	2200      	movs	r2, #0
 800e7be:	2300      	movs	r3, #0
 800e7c0:	4650      	mov	r0, sl
 800e7c2:	4659      	mov	r1, fp
 800e7c4:	f7f2 f990 	bl	8000ae8 <__aeabi_dcmpeq>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d1a7      	bne.n	800e71c <_strtod_l+0x564>
 800e7cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7ce:	9300      	str	r3, [sp, #0]
 800e7d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e7d2:	9805      	ldr	r0, [sp, #20]
 800e7d4:	462b      	mov	r3, r5
 800e7d6:	464a      	mov	r2, r9
 800e7d8:	f003 f806 	bl	80117e8 <__s2b>
 800e7dc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	f43f af09 	beq.w	800e5f6 <_strtod_l+0x43e>
 800e7e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7e8:	2a00      	cmp	r2, #0
 800e7ea:	eba3 0308 	sub.w	r3, r3, r8
 800e7ee:	bfa8      	it	ge
 800e7f0:	2300      	movge	r3, #0
 800e7f2:	9312      	str	r3, [sp, #72]	@ 0x48
 800e7f4:	2400      	movs	r4, #0
 800e7f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e7fa:	9316      	str	r3, [sp, #88]	@ 0x58
 800e7fc:	46a0      	mov	r8, r4
 800e7fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e800:	9805      	ldr	r0, [sp, #20]
 800e802:	6859      	ldr	r1, [r3, #4]
 800e804:	f002 ff48 	bl	8011698 <_Balloc>
 800e808:	4681      	mov	r9, r0
 800e80a:	2800      	cmp	r0, #0
 800e80c:	f43f aef7 	beq.w	800e5fe <_strtod_l+0x446>
 800e810:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e812:	691a      	ldr	r2, [r3, #16]
 800e814:	3202      	adds	r2, #2
 800e816:	f103 010c 	add.w	r1, r3, #12
 800e81a:	0092      	lsls	r2, r2, #2
 800e81c:	300c      	adds	r0, #12
 800e81e:	f001 fc5a 	bl	80100d6 <memcpy>
 800e822:	ec4b ab10 	vmov	d0, sl, fp
 800e826:	9805      	ldr	r0, [sp, #20]
 800e828:	aa1c      	add	r2, sp, #112	@ 0x70
 800e82a:	a91b      	add	r1, sp, #108	@ 0x6c
 800e82c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e830:	f003 fb0e 	bl	8011e50 <__d2b>
 800e834:	901a      	str	r0, [sp, #104]	@ 0x68
 800e836:	2800      	cmp	r0, #0
 800e838:	f43f aee1 	beq.w	800e5fe <_strtod_l+0x446>
 800e83c:	9805      	ldr	r0, [sp, #20]
 800e83e:	2101      	movs	r1, #1
 800e840:	f003 f868 	bl	8011914 <__i2b>
 800e844:	4680      	mov	r8, r0
 800e846:	b948      	cbnz	r0, 800e85c <_strtod_l+0x6a4>
 800e848:	f04f 0800 	mov.w	r8, #0
 800e84c:	e6d7      	b.n	800e5fe <_strtod_l+0x446>
 800e84e:	f04f 32ff 	mov.w	r2, #4294967295
 800e852:	fa02 f303 	lsl.w	r3, r2, r3
 800e856:	ea03 0a0a 	and.w	sl, r3, sl
 800e85a:	e7af      	b.n	800e7bc <_strtod_l+0x604>
 800e85c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e85e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e860:	2d00      	cmp	r5, #0
 800e862:	bfab      	itete	ge
 800e864:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e866:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e868:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e86a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e86c:	bfac      	ite	ge
 800e86e:	18ef      	addge	r7, r5, r3
 800e870:	1b5e      	sublt	r6, r3, r5
 800e872:	9b08      	ldr	r3, [sp, #32]
 800e874:	1aed      	subs	r5, r5, r3
 800e876:	4415      	add	r5, r2
 800e878:	4b65      	ldr	r3, [pc, #404]	@ (800ea10 <_strtod_l+0x858>)
 800e87a:	3d01      	subs	r5, #1
 800e87c:	429d      	cmp	r5, r3
 800e87e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e882:	da50      	bge.n	800e926 <_strtod_l+0x76e>
 800e884:	1b5b      	subs	r3, r3, r5
 800e886:	2b1f      	cmp	r3, #31
 800e888:	eba2 0203 	sub.w	r2, r2, r3
 800e88c:	f04f 0101 	mov.w	r1, #1
 800e890:	dc3d      	bgt.n	800e90e <_strtod_l+0x756>
 800e892:	fa01 f303 	lsl.w	r3, r1, r3
 800e896:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e898:	2300      	movs	r3, #0
 800e89a:	9310      	str	r3, [sp, #64]	@ 0x40
 800e89c:	18bd      	adds	r5, r7, r2
 800e89e:	9b08      	ldr	r3, [sp, #32]
 800e8a0:	42af      	cmp	r7, r5
 800e8a2:	4416      	add	r6, r2
 800e8a4:	441e      	add	r6, r3
 800e8a6:	463b      	mov	r3, r7
 800e8a8:	bfa8      	it	ge
 800e8aa:	462b      	movge	r3, r5
 800e8ac:	42b3      	cmp	r3, r6
 800e8ae:	bfa8      	it	ge
 800e8b0:	4633      	movge	r3, r6
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	bfc2      	ittt	gt
 800e8b6:	1aed      	subgt	r5, r5, r3
 800e8b8:	1af6      	subgt	r6, r6, r3
 800e8ba:	1aff      	subgt	r7, r7, r3
 800e8bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	dd16      	ble.n	800e8f0 <_strtod_l+0x738>
 800e8c2:	4641      	mov	r1, r8
 800e8c4:	9805      	ldr	r0, [sp, #20]
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	f003 f8dc 	bl	8011a84 <__pow5mult>
 800e8cc:	4680      	mov	r8, r0
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d0ba      	beq.n	800e848 <_strtod_l+0x690>
 800e8d2:	4601      	mov	r1, r0
 800e8d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e8d6:	9805      	ldr	r0, [sp, #20]
 800e8d8:	f003 f832 	bl	8011940 <__multiply>
 800e8dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	f43f ae8d 	beq.w	800e5fe <_strtod_l+0x446>
 800e8e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e8e6:	9805      	ldr	r0, [sp, #20]
 800e8e8:	f002 ff16 	bl	8011718 <_Bfree>
 800e8ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8f0:	2d00      	cmp	r5, #0
 800e8f2:	dc1d      	bgt.n	800e930 <_strtod_l+0x778>
 800e8f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	dd23      	ble.n	800e942 <_strtod_l+0x78a>
 800e8fa:	4649      	mov	r1, r9
 800e8fc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e8fe:	9805      	ldr	r0, [sp, #20]
 800e900:	f003 f8c0 	bl	8011a84 <__pow5mult>
 800e904:	4681      	mov	r9, r0
 800e906:	b9e0      	cbnz	r0, 800e942 <_strtod_l+0x78a>
 800e908:	f04f 0900 	mov.w	r9, #0
 800e90c:	e677      	b.n	800e5fe <_strtod_l+0x446>
 800e90e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e912:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e916:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e91a:	35e2      	adds	r5, #226	@ 0xe2
 800e91c:	fa01 f305 	lsl.w	r3, r1, r5
 800e920:	9310      	str	r3, [sp, #64]	@ 0x40
 800e922:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e924:	e7ba      	b.n	800e89c <_strtod_l+0x6e4>
 800e926:	2300      	movs	r3, #0
 800e928:	9310      	str	r3, [sp, #64]	@ 0x40
 800e92a:	2301      	movs	r3, #1
 800e92c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e92e:	e7b5      	b.n	800e89c <_strtod_l+0x6e4>
 800e930:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e932:	9805      	ldr	r0, [sp, #20]
 800e934:	462a      	mov	r2, r5
 800e936:	f003 f8ff 	bl	8011b38 <__lshift>
 800e93a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e93c:	2800      	cmp	r0, #0
 800e93e:	d1d9      	bne.n	800e8f4 <_strtod_l+0x73c>
 800e940:	e65d      	b.n	800e5fe <_strtod_l+0x446>
 800e942:	2e00      	cmp	r6, #0
 800e944:	dd07      	ble.n	800e956 <_strtod_l+0x79e>
 800e946:	4649      	mov	r1, r9
 800e948:	9805      	ldr	r0, [sp, #20]
 800e94a:	4632      	mov	r2, r6
 800e94c:	f003 f8f4 	bl	8011b38 <__lshift>
 800e950:	4681      	mov	r9, r0
 800e952:	2800      	cmp	r0, #0
 800e954:	d0d8      	beq.n	800e908 <_strtod_l+0x750>
 800e956:	2f00      	cmp	r7, #0
 800e958:	dd08      	ble.n	800e96c <_strtod_l+0x7b4>
 800e95a:	4641      	mov	r1, r8
 800e95c:	9805      	ldr	r0, [sp, #20]
 800e95e:	463a      	mov	r2, r7
 800e960:	f003 f8ea 	bl	8011b38 <__lshift>
 800e964:	4680      	mov	r8, r0
 800e966:	2800      	cmp	r0, #0
 800e968:	f43f ae49 	beq.w	800e5fe <_strtod_l+0x446>
 800e96c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e96e:	9805      	ldr	r0, [sp, #20]
 800e970:	464a      	mov	r2, r9
 800e972:	f003 f969 	bl	8011c48 <__mdiff>
 800e976:	4604      	mov	r4, r0
 800e978:	2800      	cmp	r0, #0
 800e97a:	f43f ae40 	beq.w	800e5fe <_strtod_l+0x446>
 800e97e:	68c3      	ldr	r3, [r0, #12]
 800e980:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e982:	2300      	movs	r3, #0
 800e984:	60c3      	str	r3, [r0, #12]
 800e986:	4641      	mov	r1, r8
 800e988:	f003 f942 	bl	8011c10 <__mcmp>
 800e98c:	2800      	cmp	r0, #0
 800e98e:	da45      	bge.n	800ea1c <_strtod_l+0x864>
 800e990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e992:	ea53 030a 	orrs.w	r3, r3, sl
 800e996:	d16b      	bne.n	800ea70 <_strtod_l+0x8b8>
 800e998:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d167      	bne.n	800ea70 <_strtod_l+0x8b8>
 800e9a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e9a4:	0d1b      	lsrs	r3, r3, #20
 800e9a6:	051b      	lsls	r3, r3, #20
 800e9a8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e9ac:	d960      	bls.n	800ea70 <_strtod_l+0x8b8>
 800e9ae:	6963      	ldr	r3, [r4, #20]
 800e9b0:	b913      	cbnz	r3, 800e9b8 <_strtod_l+0x800>
 800e9b2:	6923      	ldr	r3, [r4, #16]
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	dd5b      	ble.n	800ea70 <_strtod_l+0x8b8>
 800e9b8:	4621      	mov	r1, r4
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	9805      	ldr	r0, [sp, #20]
 800e9be:	f003 f8bb 	bl	8011b38 <__lshift>
 800e9c2:	4641      	mov	r1, r8
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	f003 f923 	bl	8011c10 <__mcmp>
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	dd50      	ble.n	800ea70 <_strtod_l+0x8b8>
 800e9ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e9d2:	9a08      	ldr	r2, [sp, #32]
 800e9d4:	0d1b      	lsrs	r3, r3, #20
 800e9d6:	051b      	lsls	r3, r3, #20
 800e9d8:	2a00      	cmp	r2, #0
 800e9da:	d06a      	beq.n	800eab2 <_strtod_l+0x8fa>
 800e9dc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e9e0:	d867      	bhi.n	800eab2 <_strtod_l+0x8fa>
 800e9e2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e9e6:	f67f ae9d 	bls.w	800e724 <_strtod_l+0x56c>
 800e9ea:	4b0a      	ldr	r3, [pc, #40]	@ (800ea14 <_strtod_l+0x85c>)
 800e9ec:	4650      	mov	r0, sl
 800e9ee:	4659      	mov	r1, fp
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f7f1 fe11 	bl	8000618 <__aeabi_dmul>
 800e9f6:	4b08      	ldr	r3, [pc, #32]	@ (800ea18 <_strtod_l+0x860>)
 800e9f8:	400b      	ands	r3, r1
 800e9fa:	4682      	mov	sl, r0
 800e9fc:	468b      	mov	fp, r1
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	f47f ae08 	bne.w	800e614 <_strtod_l+0x45c>
 800ea04:	9a05      	ldr	r2, [sp, #20]
 800ea06:	2322      	movs	r3, #34	@ 0x22
 800ea08:	6013      	str	r3, [r2, #0]
 800ea0a:	e603      	b.n	800e614 <_strtod_l+0x45c>
 800ea0c:	0806d7e8 	.word	0x0806d7e8
 800ea10:	fffffc02 	.word	0xfffffc02
 800ea14:	39500000 	.word	0x39500000
 800ea18:	7ff00000 	.word	0x7ff00000
 800ea1c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ea20:	d165      	bne.n	800eaee <_strtod_l+0x936>
 800ea22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ea24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea28:	b35a      	cbz	r2, 800ea82 <_strtod_l+0x8ca>
 800ea2a:	4a9f      	ldr	r2, [pc, #636]	@ (800eca8 <_strtod_l+0xaf0>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d12b      	bne.n	800ea88 <_strtod_l+0x8d0>
 800ea30:	9b08      	ldr	r3, [sp, #32]
 800ea32:	4651      	mov	r1, sl
 800ea34:	b303      	cbz	r3, 800ea78 <_strtod_l+0x8c0>
 800ea36:	4b9d      	ldr	r3, [pc, #628]	@ (800ecac <_strtod_l+0xaf4>)
 800ea38:	465a      	mov	r2, fp
 800ea3a:	4013      	ands	r3, r2
 800ea3c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ea40:	f04f 32ff 	mov.w	r2, #4294967295
 800ea44:	d81b      	bhi.n	800ea7e <_strtod_l+0x8c6>
 800ea46:	0d1b      	lsrs	r3, r3, #20
 800ea48:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ea4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ea50:	4299      	cmp	r1, r3
 800ea52:	d119      	bne.n	800ea88 <_strtod_l+0x8d0>
 800ea54:	4b96      	ldr	r3, [pc, #600]	@ (800ecb0 <_strtod_l+0xaf8>)
 800ea56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d102      	bne.n	800ea62 <_strtod_l+0x8aa>
 800ea5c:	3101      	adds	r1, #1
 800ea5e:	f43f adce 	beq.w	800e5fe <_strtod_l+0x446>
 800ea62:	4b92      	ldr	r3, [pc, #584]	@ (800ecac <_strtod_l+0xaf4>)
 800ea64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea66:	401a      	ands	r2, r3
 800ea68:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ea6c:	f04f 0a00 	mov.w	sl, #0
 800ea70:	9b08      	ldr	r3, [sp, #32]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d1b9      	bne.n	800e9ea <_strtod_l+0x832>
 800ea76:	e5cd      	b.n	800e614 <_strtod_l+0x45c>
 800ea78:	f04f 33ff 	mov.w	r3, #4294967295
 800ea7c:	e7e8      	b.n	800ea50 <_strtod_l+0x898>
 800ea7e:	4613      	mov	r3, r2
 800ea80:	e7e6      	b.n	800ea50 <_strtod_l+0x898>
 800ea82:	ea53 030a 	orrs.w	r3, r3, sl
 800ea86:	d0a2      	beq.n	800e9ce <_strtod_l+0x816>
 800ea88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ea8a:	b1db      	cbz	r3, 800eac4 <_strtod_l+0x90c>
 800ea8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea8e:	4213      	tst	r3, r2
 800ea90:	d0ee      	beq.n	800ea70 <_strtod_l+0x8b8>
 800ea92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea94:	9a08      	ldr	r2, [sp, #32]
 800ea96:	4650      	mov	r0, sl
 800ea98:	4659      	mov	r1, fp
 800ea9a:	b1bb      	cbz	r3, 800eacc <_strtod_l+0x914>
 800ea9c:	f7ff fb6c 	bl	800e178 <sulp>
 800eaa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eaa4:	ec53 2b10 	vmov	r2, r3, d0
 800eaa8:	f7f1 fc00 	bl	80002ac <__adddf3>
 800eaac:	4682      	mov	sl, r0
 800eaae:	468b      	mov	fp, r1
 800eab0:	e7de      	b.n	800ea70 <_strtod_l+0x8b8>
 800eab2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800eab6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eaba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eabe:	f04f 3aff 	mov.w	sl, #4294967295
 800eac2:	e7d5      	b.n	800ea70 <_strtod_l+0x8b8>
 800eac4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eac6:	ea13 0f0a 	tst.w	r3, sl
 800eaca:	e7e1      	b.n	800ea90 <_strtod_l+0x8d8>
 800eacc:	f7ff fb54 	bl	800e178 <sulp>
 800ead0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ead4:	ec53 2b10 	vmov	r2, r3, d0
 800ead8:	f7f1 fbe6 	bl	80002a8 <__aeabi_dsub>
 800eadc:	2200      	movs	r2, #0
 800eade:	2300      	movs	r3, #0
 800eae0:	4682      	mov	sl, r0
 800eae2:	468b      	mov	fp, r1
 800eae4:	f7f2 f800 	bl	8000ae8 <__aeabi_dcmpeq>
 800eae8:	2800      	cmp	r0, #0
 800eaea:	d0c1      	beq.n	800ea70 <_strtod_l+0x8b8>
 800eaec:	e61a      	b.n	800e724 <_strtod_l+0x56c>
 800eaee:	4641      	mov	r1, r8
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	f003 fa05 	bl	8011f00 <__ratio>
 800eaf6:	ec57 6b10 	vmov	r6, r7, d0
 800eafa:	2200      	movs	r2, #0
 800eafc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800eb00:	4630      	mov	r0, r6
 800eb02:	4639      	mov	r1, r7
 800eb04:	f7f2 f804 	bl	8000b10 <__aeabi_dcmple>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	d06f      	beq.n	800ebec <_strtod_l+0xa34>
 800eb0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d17a      	bne.n	800ec08 <_strtod_l+0xa50>
 800eb12:	f1ba 0f00 	cmp.w	sl, #0
 800eb16:	d158      	bne.n	800ebca <_strtod_l+0xa12>
 800eb18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d15a      	bne.n	800ebd8 <_strtod_l+0xa20>
 800eb22:	4b64      	ldr	r3, [pc, #400]	@ (800ecb4 <_strtod_l+0xafc>)
 800eb24:	2200      	movs	r2, #0
 800eb26:	4630      	mov	r0, r6
 800eb28:	4639      	mov	r1, r7
 800eb2a:	f7f1 ffe7 	bl	8000afc <__aeabi_dcmplt>
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	d159      	bne.n	800ebe6 <_strtod_l+0xa2e>
 800eb32:	4630      	mov	r0, r6
 800eb34:	4639      	mov	r1, r7
 800eb36:	4b60      	ldr	r3, [pc, #384]	@ (800ecb8 <_strtod_l+0xb00>)
 800eb38:	2200      	movs	r2, #0
 800eb3a:	f7f1 fd6d 	bl	8000618 <__aeabi_dmul>
 800eb3e:	4606      	mov	r6, r0
 800eb40:	460f      	mov	r7, r1
 800eb42:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800eb46:	9606      	str	r6, [sp, #24]
 800eb48:	9307      	str	r3, [sp, #28]
 800eb4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb4e:	4d57      	ldr	r5, [pc, #348]	@ (800ecac <_strtod_l+0xaf4>)
 800eb50:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800eb54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb56:	401d      	ands	r5, r3
 800eb58:	4b58      	ldr	r3, [pc, #352]	@ (800ecbc <_strtod_l+0xb04>)
 800eb5a:	429d      	cmp	r5, r3
 800eb5c:	f040 80b2 	bne.w	800ecc4 <_strtod_l+0xb0c>
 800eb60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb62:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800eb66:	ec4b ab10 	vmov	d0, sl, fp
 800eb6a:	f003 f901 	bl	8011d70 <__ulp>
 800eb6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb72:	ec51 0b10 	vmov	r0, r1, d0
 800eb76:	f7f1 fd4f 	bl	8000618 <__aeabi_dmul>
 800eb7a:	4652      	mov	r2, sl
 800eb7c:	465b      	mov	r3, fp
 800eb7e:	f7f1 fb95 	bl	80002ac <__adddf3>
 800eb82:	460b      	mov	r3, r1
 800eb84:	4949      	ldr	r1, [pc, #292]	@ (800ecac <_strtod_l+0xaf4>)
 800eb86:	4a4e      	ldr	r2, [pc, #312]	@ (800ecc0 <_strtod_l+0xb08>)
 800eb88:	4019      	ands	r1, r3
 800eb8a:	4291      	cmp	r1, r2
 800eb8c:	4682      	mov	sl, r0
 800eb8e:	d942      	bls.n	800ec16 <_strtod_l+0xa5e>
 800eb90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb92:	4b47      	ldr	r3, [pc, #284]	@ (800ecb0 <_strtod_l+0xaf8>)
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d103      	bne.n	800eba0 <_strtod_l+0x9e8>
 800eb98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	f43f ad2f 	beq.w	800e5fe <_strtod_l+0x446>
 800eba0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ecb0 <_strtod_l+0xaf8>
 800eba4:	f04f 3aff 	mov.w	sl, #4294967295
 800eba8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ebaa:	9805      	ldr	r0, [sp, #20]
 800ebac:	f002 fdb4 	bl	8011718 <_Bfree>
 800ebb0:	9805      	ldr	r0, [sp, #20]
 800ebb2:	4649      	mov	r1, r9
 800ebb4:	f002 fdb0 	bl	8011718 <_Bfree>
 800ebb8:	9805      	ldr	r0, [sp, #20]
 800ebba:	4641      	mov	r1, r8
 800ebbc:	f002 fdac 	bl	8011718 <_Bfree>
 800ebc0:	9805      	ldr	r0, [sp, #20]
 800ebc2:	4621      	mov	r1, r4
 800ebc4:	f002 fda8 	bl	8011718 <_Bfree>
 800ebc8:	e619      	b.n	800e7fe <_strtod_l+0x646>
 800ebca:	f1ba 0f01 	cmp.w	sl, #1
 800ebce:	d103      	bne.n	800ebd8 <_strtod_l+0xa20>
 800ebd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	f43f ada6 	beq.w	800e724 <_strtod_l+0x56c>
 800ebd8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ec88 <_strtod_l+0xad0>
 800ebdc:	4f35      	ldr	r7, [pc, #212]	@ (800ecb4 <_strtod_l+0xafc>)
 800ebde:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ebe2:	2600      	movs	r6, #0
 800ebe4:	e7b1      	b.n	800eb4a <_strtod_l+0x992>
 800ebe6:	4f34      	ldr	r7, [pc, #208]	@ (800ecb8 <_strtod_l+0xb00>)
 800ebe8:	2600      	movs	r6, #0
 800ebea:	e7aa      	b.n	800eb42 <_strtod_l+0x98a>
 800ebec:	4b32      	ldr	r3, [pc, #200]	@ (800ecb8 <_strtod_l+0xb00>)
 800ebee:	4630      	mov	r0, r6
 800ebf0:	4639      	mov	r1, r7
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f7f1 fd10 	bl	8000618 <__aeabi_dmul>
 800ebf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebfa:	4606      	mov	r6, r0
 800ebfc:	460f      	mov	r7, r1
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d09f      	beq.n	800eb42 <_strtod_l+0x98a>
 800ec02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ec06:	e7a0      	b.n	800eb4a <_strtod_l+0x992>
 800ec08:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ec90 <_strtod_l+0xad8>
 800ec0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ec10:	ec57 6b17 	vmov	r6, r7, d7
 800ec14:	e799      	b.n	800eb4a <_strtod_l+0x992>
 800ec16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ec1a:	9b08      	ldr	r3, [sp, #32]
 800ec1c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d1c1      	bne.n	800eba8 <_strtod_l+0x9f0>
 800ec24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec28:	0d1b      	lsrs	r3, r3, #20
 800ec2a:	051b      	lsls	r3, r3, #20
 800ec2c:	429d      	cmp	r5, r3
 800ec2e:	d1bb      	bne.n	800eba8 <_strtod_l+0x9f0>
 800ec30:	4630      	mov	r0, r6
 800ec32:	4639      	mov	r1, r7
 800ec34:	f7f2 f850 	bl	8000cd8 <__aeabi_d2lz>
 800ec38:	f7f1 fcc0 	bl	80005bc <__aeabi_l2d>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	460b      	mov	r3, r1
 800ec40:	4630      	mov	r0, r6
 800ec42:	4639      	mov	r1, r7
 800ec44:	f7f1 fb30 	bl	80002a8 <__aeabi_dsub>
 800ec48:	460b      	mov	r3, r1
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ec50:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ec54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec56:	ea46 060a 	orr.w	r6, r6, sl
 800ec5a:	431e      	orrs	r6, r3
 800ec5c:	d06f      	beq.n	800ed3e <_strtod_l+0xb86>
 800ec5e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ec98 <_strtod_l+0xae0>)
 800ec60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec64:	f7f1 ff4a 	bl	8000afc <__aeabi_dcmplt>
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	f47f acd3 	bne.w	800e614 <_strtod_l+0x45c>
 800ec6e:	a30c      	add	r3, pc, #48	@ (adr r3, 800eca0 <_strtod_l+0xae8>)
 800ec70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ec78:	f7f1 ff5e 	bl	8000b38 <__aeabi_dcmpgt>
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	d093      	beq.n	800eba8 <_strtod_l+0x9f0>
 800ec80:	e4c8      	b.n	800e614 <_strtod_l+0x45c>
 800ec82:	bf00      	nop
 800ec84:	f3af 8000 	nop.w
 800ec88:	00000000 	.word	0x00000000
 800ec8c:	bff00000 	.word	0xbff00000
 800ec90:	00000000 	.word	0x00000000
 800ec94:	3ff00000 	.word	0x3ff00000
 800ec98:	94a03595 	.word	0x94a03595
 800ec9c:	3fdfffff 	.word	0x3fdfffff
 800eca0:	35afe535 	.word	0x35afe535
 800eca4:	3fe00000 	.word	0x3fe00000
 800eca8:	000fffff 	.word	0x000fffff
 800ecac:	7ff00000 	.word	0x7ff00000
 800ecb0:	7fefffff 	.word	0x7fefffff
 800ecb4:	3ff00000 	.word	0x3ff00000
 800ecb8:	3fe00000 	.word	0x3fe00000
 800ecbc:	7fe00000 	.word	0x7fe00000
 800ecc0:	7c9fffff 	.word	0x7c9fffff
 800ecc4:	9b08      	ldr	r3, [sp, #32]
 800ecc6:	b323      	cbz	r3, 800ed12 <_strtod_l+0xb5a>
 800ecc8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800eccc:	d821      	bhi.n	800ed12 <_strtod_l+0xb5a>
 800ecce:	a328      	add	r3, pc, #160	@ (adr r3, 800ed70 <_strtod_l+0xbb8>)
 800ecd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	4639      	mov	r1, r7
 800ecd8:	f7f1 ff1a 	bl	8000b10 <__aeabi_dcmple>
 800ecdc:	b1a0      	cbz	r0, 800ed08 <_strtod_l+0xb50>
 800ecde:	4639      	mov	r1, r7
 800ece0:	4630      	mov	r0, r6
 800ece2:	f7f1 ff71 	bl	8000bc8 <__aeabi_d2uiz>
 800ece6:	2801      	cmp	r0, #1
 800ece8:	bf38      	it	cc
 800ecea:	2001      	movcc	r0, #1
 800ecec:	f7f1 fc1a 	bl	8000524 <__aeabi_ui2d>
 800ecf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecf2:	4606      	mov	r6, r0
 800ecf4:	460f      	mov	r7, r1
 800ecf6:	b9fb      	cbnz	r3, 800ed38 <_strtod_l+0xb80>
 800ecf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ecfc:	9014      	str	r0, [sp, #80]	@ 0x50
 800ecfe:	9315      	str	r3, [sp, #84]	@ 0x54
 800ed00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ed04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ed08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ed0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ed0e:	1b5b      	subs	r3, r3, r5
 800ed10:	9311      	str	r3, [sp, #68]	@ 0x44
 800ed12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ed16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ed1a:	f003 f829 	bl	8011d70 <__ulp>
 800ed1e:	4650      	mov	r0, sl
 800ed20:	ec53 2b10 	vmov	r2, r3, d0
 800ed24:	4659      	mov	r1, fp
 800ed26:	f7f1 fc77 	bl	8000618 <__aeabi_dmul>
 800ed2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ed2e:	f7f1 fabd 	bl	80002ac <__adddf3>
 800ed32:	4682      	mov	sl, r0
 800ed34:	468b      	mov	fp, r1
 800ed36:	e770      	b.n	800ec1a <_strtod_l+0xa62>
 800ed38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ed3c:	e7e0      	b.n	800ed00 <_strtod_l+0xb48>
 800ed3e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ed78 <_strtod_l+0xbc0>)
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	f7f1 feda 	bl	8000afc <__aeabi_dcmplt>
 800ed48:	e798      	b.n	800ec7c <_strtod_l+0xac4>
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ed4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ed50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed52:	6013      	str	r3, [r2, #0]
 800ed54:	f7ff ba6d 	b.w	800e232 <_strtod_l+0x7a>
 800ed58:	2a65      	cmp	r2, #101	@ 0x65
 800ed5a:	f43f ab68 	beq.w	800e42e <_strtod_l+0x276>
 800ed5e:	2a45      	cmp	r2, #69	@ 0x45
 800ed60:	f43f ab65 	beq.w	800e42e <_strtod_l+0x276>
 800ed64:	2301      	movs	r3, #1
 800ed66:	f7ff bba0 	b.w	800e4aa <_strtod_l+0x2f2>
 800ed6a:	bf00      	nop
 800ed6c:	f3af 8000 	nop.w
 800ed70:	ffc00000 	.word	0xffc00000
 800ed74:	41dfffff 	.word	0x41dfffff
 800ed78:	94a03595 	.word	0x94a03595
 800ed7c:	3fcfffff 	.word	0x3fcfffff

0800ed80 <_strtod_r>:
 800ed80:	4b01      	ldr	r3, [pc, #4]	@ (800ed88 <_strtod_r+0x8>)
 800ed82:	f7ff ba19 	b.w	800e1b8 <_strtod_l>
 800ed86:	bf00      	nop
 800ed88:	20000114 	.word	0x20000114

0800ed8c <strtod>:
 800ed8c:	460a      	mov	r2, r1
 800ed8e:	4601      	mov	r1, r0
 800ed90:	4802      	ldr	r0, [pc, #8]	@ (800ed9c <strtod+0x10>)
 800ed92:	4b03      	ldr	r3, [pc, #12]	@ (800eda0 <strtod+0x14>)
 800ed94:	6800      	ldr	r0, [r0, #0]
 800ed96:	f7ff ba0f 	b.w	800e1b8 <_strtod_l>
 800ed9a:	bf00      	nop
 800ed9c:	20000280 	.word	0x20000280
 800eda0:	20000114 	.word	0x20000114

0800eda4 <_strtol_l.isra.0>:
 800eda4:	2b24      	cmp	r3, #36	@ 0x24
 800eda6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edaa:	4686      	mov	lr, r0
 800edac:	4690      	mov	r8, r2
 800edae:	d801      	bhi.n	800edb4 <_strtol_l.isra.0+0x10>
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d106      	bne.n	800edc2 <_strtol_l.isra.0+0x1e>
 800edb4:	f001 f962 	bl	801007c <__errno>
 800edb8:	2316      	movs	r3, #22
 800edba:	6003      	str	r3, [r0, #0]
 800edbc:	2000      	movs	r0, #0
 800edbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc2:	4834      	ldr	r0, [pc, #208]	@ (800ee94 <_strtol_l.isra.0+0xf0>)
 800edc4:	460d      	mov	r5, r1
 800edc6:	462a      	mov	r2, r5
 800edc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800edcc:	5d06      	ldrb	r6, [r0, r4]
 800edce:	f016 0608 	ands.w	r6, r6, #8
 800edd2:	d1f8      	bne.n	800edc6 <_strtol_l.isra.0+0x22>
 800edd4:	2c2d      	cmp	r4, #45	@ 0x2d
 800edd6:	d110      	bne.n	800edfa <_strtol_l.isra.0+0x56>
 800edd8:	782c      	ldrb	r4, [r5, #0]
 800edda:	2601      	movs	r6, #1
 800eddc:	1c95      	adds	r5, r2, #2
 800edde:	f033 0210 	bics.w	r2, r3, #16
 800ede2:	d115      	bne.n	800ee10 <_strtol_l.isra.0+0x6c>
 800ede4:	2c30      	cmp	r4, #48	@ 0x30
 800ede6:	d10d      	bne.n	800ee04 <_strtol_l.isra.0+0x60>
 800ede8:	782a      	ldrb	r2, [r5, #0]
 800edea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800edee:	2a58      	cmp	r2, #88	@ 0x58
 800edf0:	d108      	bne.n	800ee04 <_strtol_l.isra.0+0x60>
 800edf2:	786c      	ldrb	r4, [r5, #1]
 800edf4:	3502      	adds	r5, #2
 800edf6:	2310      	movs	r3, #16
 800edf8:	e00a      	b.n	800ee10 <_strtol_l.isra.0+0x6c>
 800edfa:	2c2b      	cmp	r4, #43	@ 0x2b
 800edfc:	bf04      	itt	eq
 800edfe:	782c      	ldrbeq	r4, [r5, #0]
 800ee00:	1c95      	addeq	r5, r2, #2
 800ee02:	e7ec      	b.n	800edde <_strtol_l.isra.0+0x3a>
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d1f6      	bne.n	800edf6 <_strtol_l.isra.0+0x52>
 800ee08:	2c30      	cmp	r4, #48	@ 0x30
 800ee0a:	bf14      	ite	ne
 800ee0c:	230a      	movne	r3, #10
 800ee0e:	2308      	moveq	r3, #8
 800ee10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ee14:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ee18:	2200      	movs	r2, #0
 800ee1a:	fbbc f9f3 	udiv	r9, ip, r3
 800ee1e:	4610      	mov	r0, r2
 800ee20:	fb03 ca19 	mls	sl, r3, r9, ip
 800ee24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ee28:	2f09      	cmp	r7, #9
 800ee2a:	d80f      	bhi.n	800ee4c <_strtol_l.isra.0+0xa8>
 800ee2c:	463c      	mov	r4, r7
 800ee2e:	42a3      	cmp	r3, r4
 800ee30:	dd1b      	ble.n	800ee6a <_strtol_l.isra.0+0xc6>
 800ee32:	1c57      	adds	r7, r2, #1
 800ee34:	d007      	beq.n	800ee46 <_strtol_l.isra.0+0xa2>
 800ee36:	4581      	cmp	r9, r0
 800ee38:	d314      	bcc.n	800ee64 <_strtol_l.isra.0+0xc0>
 800ee3a:	d101      	bne.n	800ee40 <_strtol_l.isra.0+0x9c>
 800ee3c:	45a2      	cmp	sl, r4
 800ee3e:	db11      	blt.n	800ee64 <_strtol_l.isra.0+0xc0>
 800ee40:	fb00 4003 	mla	r0, r0, r3, r4
 800ee44:	2201      	movs	r2, #1
 800ee46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee4a:	e7eb      	b.n	800ee24 <_strtol_l.isra.0+0x80>
 800ee4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ee50:	2f19      	cmp	r7, #25
 800ee52:	d801      	bhi.n	800ee58 <_strtol_l.isra.0+0xb4>
 800ee54:	3c37      	subs	r4, #55	@ 0x37
 800ee56:	e7ea      	b.n	800ee2e <_strtol_l.isra.0+0x8a>
 800ee58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ee5c:	2f19      	cmp	r7, #25
 800ee5e:	d804      	bhi.n	800ee6a <_strtol_l.isra.0+0xc6>
 800ee60:	3c57      	subs	r4, #87	@ 0x57
 800ee62:	e7e4      	b.n	800ee2e <_strtol_l.isra.0+0x8a>
 800ee64:	f04f 32ff 	mov.w	r2, #4294967295
 800ee68:	e7ed      	b.n	800ee46 <_strtol_l.isra.0+0xa2>
 800ee6a:	1c53      	adds	r3, r2, #1
 800ee6c:	d108      	bne.n	800ee80 <_strtol_l.isra.0+0xdc>
 800ee6e:	2322      	movs	r3, #34	@ 0x22
 800ee70:	f8ce 3000 	str.w	r3, [lr]
 800ee74:	4660      	mov	r0, ip
 800ee76:	f1b8 0f00 	cmp.w	r8, #0
 800ee7a:	d0a0      	beq.n	800edbe <_strtol_l.isra.0+0x1a>
 800ee7c:	1e69      	subs	r1, r5, #1
 800ee7e:	e006      	b.n	800ee8e <_strtol_l.isra.0+0xea>
 800ee80:	b106      	cbz	r6, 800ee84 <_strtol_l.isra.0+0xe0>
 800ee82:	4240      	negs	r0, r0
 800ee84:	f1b8 0f00 	cmp.w	r8, #0
 800ee88:	d099      	beq.n	800edbe <_strtol_l.isra.0+0x1a>
 800ee8a:	2a00      	cmp	r2, #0
 800ee8c:	d1f6      	bne.n	800ee7c <_strtol_l.isra.0+0xd8>
 800ee8e:	f8c8 1000 	str.w	r1, [r8]
 800ee92:	e794      	b.n	800edbe <_strtol_l.isra.0+0x1a>
 800ee94:	0806d811 	.word	0x0806d811

0800ee98 <_strtol_r>:
 800ee98:	f7ff bf84 	b.w	800eda4 <_strtol_l.isra.0>

0800ee9c <strtol>:
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	460a      	mov	r2, r1
 800eea0:	4601      	mov	r1, r0
 800eea2:	4802      	ldr	r0, [pc, #8]	@ (800eeac <strtol+0x10>)
 800eea4:	6800      	ldr	r0, [r0, #0]
 800eea6:	f7ff bf7d 	b.w	800eda4 <_strtol_l.isra.0>
 800eeaa:	bf00      	nop
 800eeac:	20000280 	.word	0x20000280

0800eeb0 <__cvt>:
 800eeb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb4:	ec57 6b10 	vmov	r6, r7, d0
 800eeb8:	2f00      	cmp	r7, #0
 800eeba:	460c      	mov	r4, r1
 800eebc:	4619      	mov	r1, r3
 800eebe:	463b      	mov	r3, r7
 800eec0:	bfbb      	ittet	lt
 800eec2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800eec6:	461f      	movlt	r7, r3
 800eec8:	2300      	movge	r3, #0
 800eeca:	232d      	movlt	r3, #45	@ 0x2d
 800eecc:	700b      	strb	r3, [r1, #0]
 800eece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eed0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800eed4:	4691      	mov	r9, r2
 800eed6:	f023 0820 	bic.w	r8, r3, #32
 800eeda:	bfbc      	itt	lt
 800eedc:	4632      	movlt	r2, r6
 800eede:	4616      	movlt	r6, r2
 800eee0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eee4:	d005      	beq.n	800eef2 <__cvt+0x42>
 800eee6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800eeea:	d100      	bne.n	800eeee <__cvt+0x3e>
 800eeec:	3401      	adds	r4, #1
 800eeee:	2102      	movs	r1, #2
 800eef0:	e000      	b.n	800eef4 <__cvt+0x44>
 800eef2:	2103      	movs	r1, #3
 800eef4:	ab03      	add	r3, sp, #12
 800eef6:	9301      	str	r3, [sp, #4]
 800eef8:	ab02      	add	r3, sp, #8
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	ec47 6b10 	vmov	d0, r6, r7
 800ef00:	4653      	mov	r3, sl
 800ef02:	4622      	mov	r2, r4
 800ef04:	f001 f9ac 	bl	8010260 <_dtoa_r>
 800ef08:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ef0c:	4605      	mov	r5, r0
 800ef0e:	d119      	bne.n	800ef44 <__cvt+0x94>
 800ef10:	f019 0f01 	tst.w	r9, #1
 800ef14:	d00e      	beq.n	800ef34 <__cvt+0x84>
 800ef16:	eb00 0904 	add.w	r9, r0, r4
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	4630      	mov	r0, r6
 800ef20:	4639      	mov	r1, r7
 800ef22:	f7f1 fde1 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef26:	b108      	cbz	r0, 800ef2c <__cvt+0x7c>
 800ef28:	f8cd 900c 	str.w	r9, [sp, #12]
 800ef2c:	2230      	movs	r2, #48	@ 0x30
 800ef2e:	9b03      	ldr	r3, [sp, #12]
 800ef30:	454b      	cmp	r3, r9
 800ef32:	d31e      	bcc.n	800ef72 <__cvt+0xc2>
 800ef34:	9b03      	ldr	r3, [sp, #12]
 800ef36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef38:	1b5b      	subs	r3, r3, r5
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	6013      	str	r3, [r2, #0]
 800ef3e:	b004      	add	sp, #16
 800ef40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ef48:	eb00 0904 	add.w	r9, r0, r4
 800ef4c:	d1e5      	bne.n	800ef1a <__cvt+0x6a>
 800ef4e:	7803      	ldrb	r3, [r0, #0]
 800ef50:	2b30      	cmp	r3, #48	@ 0x30
 800ef52:	d10a      	bne.n	800ef6a <__cvt+0xba>
 800ef54:	2200      	movs	r2, #0
 800ef56:	2300      	movs	r3, #0
 800ef58:	4630      	mov	r0, r6
 800ef5a:	4639      	mov	r1, r7
 800ef5c:	f7f1 fdc4 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef60:	b918      	cbnz	r0, 800ef6a <__cvt+0xba>
 800ef62:	f1c4 0401 	rsb	r4, r4, #1
 800ef66:	f8ca 4000 	str.w	r4, [sl]
 800ef6a:	f8da 3000 	ldr.w	r3, [sl]
 800ef6e:	4499      	add	r9, r3
 800ef70:	e7d3      	b.n	800ef1a <__cvt+0x6a>
 800ef72:	1c59      	adds	r1, r3, #1
 800ef74:	9103      	str	r1, [sp, #12]
 800ef76:	701a      	strb	r2, [r3, #0]
 800ef78:	e7d9      	b.n	800ef2e <__cvt+0x7e>

0800ef7a <__exponent>:
 800ef7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef7c:	2900      	cmp	r1, #0
 800ef7e:	bfba      	itte	lt
 800ef80:	4249      	neglt	r1, r1
 800ef82:	232d      	movlt	r3, #45	@ 0x2d
 800ef84:	232b      	movge	r3, #43	@ 0x2b
 800ef86:	2909      	cmp	r1, #9
 800ef88:	7002      	strb	r2, [r0, #0]
 800ef8a:	7043      	strb	r3, [r0, #1]
 800ef8c:	dd29      	ble.n	800efe2 <__exponent+0x68>
 800ef8e:	f10d 0307 	add.w	r3, sp, #7
 800ef92:	461d      	mov	r5, r3
 800ef94:	270a      	movs	r7, #10
 800ef96:	461a      	mov	r2, r3
 800ef98:	fbb1 f6f7 	udiv	r6, r1, r7
 800ef9c:	fb07 1416 	mls	r4, r7, r6, r1
 800efa0:	3430      	adds	r4, #48	@ 0x30
 800efa2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800efa6:	460c      	mov	r4, r1
 800efa8:	2c63      	cmp	r4, #99	@ 0x63
 800efaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800efae:	4631      	mov	r1, r6
 800efb0:	dcf1      	bgt.n	800ef96 <__exponent+0x1c>
 800efb2:	3130      	adds	r1, #48	@ 0x30
 800efb4:	1e94      	subs	r4, r2, #2
 800efb6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800efba:	1c41      	adds	r1, r0, #1
 800efbc:	4623      	mov	r3, r4
 800efbe:	42ab      	cmp	r3, r5
 800efc0:	d30a      	bcc.n	800efd8 <__exponent+0x5e>
 800efc2:	f10d 0309 	add.w	r3, sp, #9
 800efc6:	1a9b      	subs	r3, r3, r2
 800efc8:	42ac      	cmp	r4, r5
 800efca:	bf88      	it	hi
 800efcc:	2300      	movhi	r3, #0
 800efce:	3302      	adds	r3, #2
 800efd0:	4403      	add	r3, r0
 800efd2:	1a18      	subs	r0, r3, r0
 800efd4:	b003      	add	sp, #12
 800efd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efd8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800efdc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800efe0:	e7ed      	b.n	800efbe <__exponent+0x44>
 800efe2:	2330      	movs	r3, #48	@ 0x30
 800efe4:	3130      	adds	r1, #48	@ 0x30
 800efe6:	7083      	strb	r3, [r0, #2]
 800efe8:	70c1      	strb	r1, [r0, #3]
 800efea:	1d03      	adds	r3, r0, #4
 800efec:	e7f1      	b.n	800efd2 <__exponent+0x58>
	...

0800eff0 <_printf_float>:
 800eff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff4:	b08d      	sub	sp, #52	@ 0x34
 800eff6:	460c      	mov	r4, r1
 800eff8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800effc:	4616      	mov	r6, r2
 800effe:	461f      	mov	r7, r3
 800f000:	4605      	mov	r5, r0
 800f002:	f000 fff1 	bl	800ffe8 <_localeconv_r>
 800f006:	6803      	ldr	r3, [r0, #0]
 800f008:	9304      	str	r3, [sp, #16]
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7f1 f940 	bl	8000290 <strlen>
 800f010:	2300      	movs	r3, #0
 800f012:	930a      	str	r3, [sp, #40]	@ 0x28
 800f014:	f8d8 3000 	ldr.w	r3, [r8]
 800f018:	9005      	str	r0, [sp, #20]
 800f01a:	3307      	adds	r3, #7
 800f01c:	f023 0307 	bic.w	r3, r3, #7
 800f020:	f103 0208 	add.w	r2, r3, #8
 800f024:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f028:	f8d4 b000 	ldr.w	fp, [r4]
 800f02c:	f8c8 2000 	str.w	r2, [r8]
 800f030:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f034:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f038:	9307      	str	r3, [sp, #28]
 800f03a:	f8cd 8018 	str.w	r8, [sp, #24]
 800f03e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f046:	4b9c      	ldr	r3, [pc, #624]	@ (800f2b8 <_printf_float+0x2c8>)
 800f048:	f04f 32ff 	mov.w	r2, #4294967295
 800f04c:	f7f1 fd7e 	bl	8000b4c <__aeabi_dcmpun>
 800f050:	bb70      	cbnz	r0, 800f0b0 <_printf_float+0xc0>
 800f052:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f056:	4b98      	ldr	r3, [pc, #608]	@ (800f2b8 <_printf_float+0x2c8>)
 800f058:	f04f 32ff 	mov.w	r2, #4294967295
 800f05c:	f7f1 fd58 	bl	8000b10 <__aeabi_dcmple>
 800f060:	bb30      	cbnz	r0, 800f0b0 <_printf_float+0xc0>
 800f062:	2200      	movs	r2, #0
 800f064:	2300      	movs	r3, #0
 800f066:	4640      	mov	r0, r8
 800f068:	4649      	mov	r1, r9
 800f06a:	f7f1 fd47 	bl	8000afc <__aeabi_dcmplt>
 800f06e:	b110      	cbz	r0, 800f076 <_printf_float+0x86>
 800f070:	232d      	movs	r3, #45	@ 0x2d
 800f072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f076:	4a91      	ldr	r2, [pc, #580]	@ (800f2bc <_printf_float+0x2cc>)
 800f078:	4b91      	ldr	r3, [pc, #580]	@ (800f2c0 <_printf_float+0x2d0>)
 800f07a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f07e:	bf8c      	ite	hi
 800f080:	4690      	movhi	r8, r2
 800f082:	4698      	movls	r8, r3
 800f084:	2303      	movs	r3, #3
 800f086:	6123      	str	r3, [r4, #16]
 800f088:	f02b 0304 	bic.w	r3, fp, #4
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	f04f 0900 	mov.w	r9, #0
 800f092:	9700      	str	r7, [sp, #0]
 800f094:	4633      	mov	r3, r6
 800f096:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f098:	4621      	mov	r1, r4
 800f09a:	4628      	mov	r0, r5
 800f09c:	f000 f9d2 	bl	800f444 <_printf_common>
 800f0a0:	3001      	adds	r0, #1
 800f0a2:	f040 808d 	bne.w	800f1c0 <_printf_float+0x1d0>
 800f0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0aa:	b00d      	add	sp, #52	@ 0x34
 800f0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b0:	4642      	mov	r2, r8
 800f0b2:	464b      	mov	r3, r9
 800f0b4:	4640      	mov	r0, r8
 800f0b6:	4649      	mov	r1, r9
 800f0b8:	f7f1 fd48 	bl	8000b4c <__aeabi_dcmpun>
 800f0bc:	b140      	cbz	r0, 800f0d0 <_printf_float+0xe0>
 800f0be:	464b      	mov	r3, r9
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	bfbc      	itt	lt
 800f0c4:	232d      	movlt	r3, #45	@ 0x2d
 800f0c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f0ca:	4a7e      	ldr	r2, [pc, #504]	@ (800f2c4 <_printf_float+0x2d4>)
 800f0cc:	4b7e      	ldr	r3, [pc, #504]	@ (800f2c8 <_printf_float+0x2d8>)
 800f0ce:	e7d4      	b.n	800f07a <_printf_float+0x8a>
 800f0d0:	6863      	ldr	r3, [r4, #4]
 800f0d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f0d6:	9206      	str	r2, [sp, #24]
 800f0d8:	1c5a      	adds	r2, r3, #1
 800f0da:	d13b      	bne.n	800f154 <_printf_float+0x164>
 800f0dc:	2306      	movs	r3, #6
 800f0de:	6063      	str	r3, [r4, #4]
 800f0e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	6022      	str	r2, [r4, #0]
 800f0e8:	9303      	str	r3, [sp, #12]
 800f0ea:	ab0a      	add	r3, sp, #40	@ 0x28
 800f0ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f0f0:	ab09      	add	r3, sp, #36	@ 0x24
 800f0f2:	9300      	str	r3, [sp, #0]
 800f0f4:	6861      	ldr	r1, [r4, #4]
 800f0f6:	ec49 8b10 	vmov	d0, r8, r9
 800f0fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f0fe:	4628      	mov	r0, r5
 800f100:	f7ff fed6 	bl	800eeb0 <__cvt>
 800f104:	9b06      	ldr	r3, [sp, #24]
 800f106:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f108:	2b47      	cmp	r3, #71	@ 0x47
 800f10a:	4680      	mov	r8, r0
 800f10c:	d129      	bne.n	800f162 <_printf_float+0x172>
 800f10e:	1cc8      	adds	r0, r1, #3
 800f110:	db02      	blt.n	800f118 <_printf_float+0x128>
 800f112:	6863      	ldr	r3, [r4, #4]
 800f114:	4299      	cmp	r1, r3
 800f116:	dd41      	ble.n	800f19c <_printf_float+0x1ac>
 800f118:	f1aa 0a02 	sub.w	sl, sl, #2
 800f11c:	fa5f fa8a 	uxtb.w	sl, sl
 800f120:	3901      	subs	r1, #1
 800f122:	4652      	mov	r2, sl
 800f124:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f128:	9109      	str	r1, [sp, #36]	@ 0x24
 800f12a:	f7ff ff26 	bl	800ef7a <__exponent>
 800f12e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f130:	1813      	adds	r3, r2, r0
 800f132:	2a01      	cmp	r2, #1
 800f134:	4681      	mov	r9, r0
 800f136:	6123      	str	r3, [r4, #16]
 800f138:	dc02      	bgt.n	800f140 <_printf_float+0x150>
 800f13a:	6822      	ldr	r2, [r4, #0]
 800f13c:	07d2      	lsls	r2, r2, #31
 800f13e:	d501      	bpl.n	800f144 <_printf_float+0x154>
 800f140:	3301      	adds	r3, #1
 800f142:	6123      	str	r3, [r4, #16]
 800f144:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d0a2      	beq.n	800f092 <_printf_float+0xa2>
 800f14c:	232d      	movs	r3, #45	@ 0x2d
 800f14e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f152:	e79e      	b.n	800f092 <_printf_float+0xa2>
 800f154:	9a06      	ldr	r2, [sp, #24]
 800f156:	2a47      	cmp	r2, #71	@ 0x47
 800f158:	d1c2      	bne.n	800f0e0 <_printf_float+0xf0>
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1c0      	bne.n	800f0e0 <_printf_float+0xf0>
 800f15e:	2301      	movs	r3, #1
 800f160:	e7bd      	b.n	800f0de <_printf_float+0xee>
 800f162:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f166:	d9db      	bls.n	800f120 <_printf_float+0x130>
 800f168:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f16c:	d118      	bne.n	800f1a0 <_printf_float+0x1b0>
 800f16e:	2900      	cmp	r1, #0
 800f170:	6863      	ldr	r3, [r4, #4]
 800f172:	dd0b      	ble.n	800f18c <_printf_float+0x19c>
 800f174:	6121      	str	r1, [r4, #16]
 800f176:	b913      	cbnz	r3, 800f17e <_printf_float+0x18e>
 800f178:	6822      	ldr	r2, [r4, #0]
 800f17a:	07d0      	lsls	r0, r2, #31
 800f17c:	d502      	bpl.n	800f184 <_printf_float+0x194>
 800f17e:	3301      	adds	r3, #1
 800f180:	440b      	add	r3, r1
 800f182:	6123      	str	r3, [r4, #16]
 800f184:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f186:	f04f 0900 	mov.w	r9, #0
 800f18a:	e7db      	b.n	800f144 <_printf_float+0x154>
 800f18c:	b913      	cbnz	r3, 800f194 <_printf_float+0x1a4>
 800f18e:	6822      	ldr	r2, [r4, #0]
 800f190:	07d2      	lsls	r2, r2, #31
 800f192:	d501      	bpl.n	800f198 <_printf_float+0x1a8>
 800f194:	3302      	adds	r3, #2
 800f196:	e7f4      	b.n	800f182 <_printf_float+0x192>
 800f198:	2301      	movs	r3, #1
 800f19a:	e7f2      	b.n	800f182 <_printf_float+0x192>
 800f19c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f1a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1a2:	4299      	cmp	r1, r3
 800f1a4:	db05      	blt.n	800f1b2 <_printf_float+0x1c2>
 800f1a6:	6823      	ldr	r3, [r4, #0]
 800f1a8:	6121      	str	r1, [r4, #16]
 800f1aa:	07d8      	lsls	r0, r3, #31
 800f1ac:	d5ea      	bpl.n	800f184 <_printf_float+0x194>
 800f1ae:	1c4b      	adds	r3, r1, #1
 800f1b0:	e7e7      	b.n	800f182 <_printf_float+0x192>
 800f1b2:	2900      	cmp	r1, #0
 800f1b4:	bfd4      	ite	le
 800f1b6:	f1c1 0202 	rsble	r2, r1, #2
 800f1ba:	2201      	movgt	r2, #1
 800f1bc:	4413      	add	r3, r2
 800f1be:	e7e0      	b.n	800f182 <_printf_float+0x192>
 800f1c0:	6823      	ldr	r3, [r4, #0]
 800f1c2:	055a      	lsls	r2, r3, #21
 800f1c4:	d407      	bmi.n	800f1d6 <_printf_float+0x1e6>
 800f1c6:	6923      	ldr	r3, [r4, #16]
 800f1c8:	4642      	mov	r2, r8
 800f1ca:	4631      	mov	r1, r6
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	47b8      	blx	r7
 800f1d0:	3001      	adds	r0, #1
 800f1d2:	d12b      	bne.n	800f22c <_printf_float+0x23c>
 800f1d4:	e767      	b.n	800f0a6 <_printf_float+0xb6>
 800f1d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f1da:	f240 80dd 	bls.w	800f398 <_printf_float+0x3a8>
 800f1de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	f7f1 fc7f 	bl	8000ae8 <__aeabi_dcmpeq>
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	d033      	beq.n	800f256 <_printf_float+0x266>
 800f1ee:	4a37      	ldr	r2, [pc, #220]	@ (800f2cc <_printf_float+0x2dc>)
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	4631      	mov	r1, r6
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	47b8      	blx	r7
 800f1f8:	3001      	adds	r0, #1
 800f1fa:	f43f af54 	beq.w	800f0a6 <_printf_float+0xb6>
 800f1fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f202:	4543      	cmp	r3, r8
 800f204:	db02      	blt.n	800f20c <_printf_float+0x21c>
 800f206:	6823      	ldr	r3, [r4, #0]
 800f208:	07d8      	lsls	r0, r3, #31
 800f20a:	d50f      	bpl.n	800f22c <_printf_float+0x23c>
 800f20c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f210:	4631      	mov	r1, r6
 800f212:	4628      	mov	r0, r5
 800f214:	47b8      	blx	r7
 800f216:	3001      	adds	r0, #1
 800f218:	f43f af45 	beq.w	800f0a6 <_printf_float+0xb6>
 800f21c:	f04f 0900 	mov.w	r9, #0
 800f220:	f108 38ff 	add.w	r8, r8, #4294967295
 800f224:	f104 0a1a 	add.w	sl, r4, #26
 800f228:	45c8      	cmp	r8, r9
 800f22a:	dc09      	bgt.n	800f240 <_printf_float+0x250>
 800f22c:	6823      	ldr	r3, [r4, #0]
 800f22e:	079b      	lsls	r3, r3, #30
 800f230:	f100 8103 	bmi.w	800f43a <_printf_float+0x44a>
 800f234:	68e0      	ldr	r0, [r4, #12]
 800f236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f238:	4298      	cmp	r0, r3
 800f23a:	bfb8      	it	lt
 800f23c:	4618      	movlt	r0, r3
 800f23e:	e734      	b.n	800f0aa <_printf_float+0xba>
 800f240:	2301      	movs	r3, #1
 800f242:	4652      	mov	r2, sl
 800f244:	4631      	mov	r1, r6
 800f246:	4628      	mov	r0, r5
 800f248:	47b8      	blx	r7
 800f24a:	3001      	adds	r0, #1
 800f24c:	f43f af2b 	beq.w	800f0a6 <_printf_float+0xb6>
 800f250:	f109 0901 	add.w	r9, r9, #1
 800f254:	e7e8      	b.n	800f228 <_printf_float+0x238>
 800f256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f258:	2b00      	cmp	r3, #0
 800f25a:	dc39      	bgt.n	800f2d0 <_printf_float+0x2e0>
 800f25c:	4a1b      	ldr	r2, [pc, #108]	@ (800f2cc <_printf_float+0x2dc>)
 800f25e:	2301      	movs	r3, #1
 800f260:	4631      	mov	r1, r6
 800f262:	4628      	mov	r0, r5
 800f264:	47b8      	blx	r7
 800f266:	3001      	adds	r0, #1
 800f268:	f43f af1d 	beq.w	800f0a6 <_printf_float+0xb6>
 800f26c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f270:	ea59 0303 	orrs.w	r3, r9, r3
 800f274:	d102      	bne.n	800f27c <_printf_float+0x28c>
 800f276:	6823      	ldr	r3, [r4, #0]
 800f278:	07d9      	lsls	r1, r3, #31
 800f27a:	d5d7      	bpl.n	800f22c <_printf_float+0x23c>
 800f27c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f280:	4631      	mov	r1, r6
 800f282:	4628      	mov	r0, r5
 800f284:	47b8      	blx	r7
 800f286:	3001      	adds	r0, #1
 800f288:	f43f af0d 	beq.w	800f0a6 <_printf_float+0xb6>
 800f28c:	f04f 0a00 	mov.w	sl, #0
 800f290:	f104 0b1a 	add.w	fp, r4, #26
 800f294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f296:	425b      	negs	r3, r3
 800f298:	4553      	cmp	r3, sl
 800f29a:	dc01      	bgt.n	800f2a0 <_printf_float+0x2b0>
 800f29c:	464b      	mov	r3, r9
 800f29e:	e793      	b.n	800f1c8 <_printf_float+0x1d8>
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	465a      	mov	r2, fp
 800f2a4:	4631      	mov	r1, r6
 800f2a6:	4628      	mov	r0, r5
 800f2a8:	47b8      	blx	r7
 800f2aa:	3001      	adds	r0, #1
 800f2ac:	f43f aefb 	beq.w	800f0a6 <_printf_float+0xb6>
 800f2b0:	f10a 0a01 	add.w	sl, sl, #1
 800f2b4:	e7ee      	b.n	800f294 <_printf_float+0x2a4>
 800f2b6:	bf00      	nop
 800f2b8:	7fefffff 	.word	0x7fefffff
 800f2bc:	0806d58d 	.word	0x0806d58d
 800f2c0:	0806d589 	.word	0x0806d589
 800f2c4:	0806d595 	.word	0x0806d595
 800f2c8:	0806d591 	.word	0x0806d591
 800f2cc:	0806d7b4 	.word	0x0806d7b4
 800f2d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f2d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f2d6:	4553      	cmp	r3, sl
 800f2d8:	bfa8      	it	ge
 800f2da:	4653      	movge	r3, sl
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	4699      	mov	r9, r3
 800f2e0:	dc36      	bgt.n	800f350 <_printf_float+0x360>
 800f2e2:	f04f 0b00 	mov.w	fp, #0
 800f2e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2ea:	f104 021a 	add.w	r2, r4, #26
 800f2ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f2f0:	9306      	str	r3, [sp, #24]
 800f2f2:	eba3 0309 	sub.w	r3, r3, r9
 800f2f6:	455b      	cmp	r3, fp
 800f2f8:	dc31      	bgt.n	800f35e <_printf_float+0x36e>
 800f2fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2fc:	459a      	cmp	sl, r3
 800f2fe:	dc3a      	bgt.n	800f376 <_printf_float+0x386>
 800f300:	6823      	ldr	r3, [r4, #0]
 800f302:	07da      	lsls	r2, r3, #31
 800f304:	d437      	bmi.n	800f376 <_printf_float+0x386>
 800f306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f308:	ebaa 0903 	sub.w	r9, sl, r3
 800f30c:	9b06      	ldr	r3, [sp, #24]
 800f30e:	ebaa 0303 	sub.w	r3, sl, r3
 800f312:	4599      	cmp	r9, r3
 800f314:	bfa8      	it	ge
 800f316:	4699      	movge	r9, r3
 800f318:	f1b9 0f00 	cmp.w	r9, #0
 800f31c:	dc33      	bgt.n	800f386 <_printf_float+0x396>
 800f31e:	f04f 0800 	mov.w	r8, #0
 800f322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f326:	f104 0b1a 	add.w	fp, r4, #26
 800f32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f32c:	ebaa 0303 	sub.w	r3, sl, r3
 800f330:	eba3 0309 	sub.w	r3, r3, r9
 800f334:	4543      	cmp	r3, r8
 800f336:	f77f af79 	ble.w	800f22c <_printf_float+0x23c>
 800f33a:	2301      	movs	r3, #1
 800f33c:	465a      	mov	r2, fp
 800f33e:	4631      	mov	r1, r6
 800f340:	4628      	mov	r0, r5
 800f342:	47b8      	blx	r7
 800f344:	3001      	adds	r0, #1
 800f346:	f43f aeae 	beq.w	800f0a6 <_printf_float+0xb6>
 800f34a:	f108 0801 	add.w	r8, r8, #1
 800f34e:	e7ec      	b.n	800f32a <_printf_float+0x33a>
 800f350:	4642      	mov	r2, r8
 800f352:	4631      	mov	r1, r6
 800f354:	4628      	mov	r0, r5
 800f356:	47b8      	blx	r7
 800f358:	3001      	adds	r0, #1
 800f35a:	d1c2      	bne.n	800f2e2 <_printf_float+0x2f2>
 800f35c:	e6a3      	b.n	800f0a6 <_printf_float+0xb6>
 800f35e:	2301      	movs	r3, #1
 800f360:	4631      	mov	r1, r6
 800f362:	4628      	mov	r0, r5
 800f364:	9206      	str	r2, [sp, #24]
 800f366:	47b8      	blx	r7
 800f368:	3001      	adds	r0, #1
 800f36a:	f43f ae9c 	beq.w	800f0a6 <_printf_float+0xb6>
 800f36e:	9a06      	ldr	r2, [sp, #24]
 800f370:	f10b 0b01 	add.w	fp, fp, #1
 800f374:	e7bb      	b.n	800f2ee <_printf_float+0x2fe>
 800f376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f37a:	4631      	mov	r1, r6
 800f37c:	4628      	mov	r0, r5
 800f37e:	47b8      	blx	r7
 800f380:	3001      	adds	r0, #1
 800f382:	d1c0      	bne.n	800f306 <_printf_float+0x316>
 800f384:	e68f      	b.n	800f0a6 <_printf_float+0xb6>
 800f386:	9a06      	ldr	r2, [sp, #24]
 800f388:	464b      	mov	r3, r9
 800f38a:	4442      	add	r2, r8
 800f38c:	4631      	mov	r1, r6
 800f38e:	4628      	mov	r0, r5
 800f390:	47b8      	blx	r7
 800f392:	3001      	adds	r0, #1
 800f394:	d1c3      	bne.n	800f31e <_printf_float+0x32e>
 800f396:	e686      	b.n	800f0a6 <_printf_float+0xb6>
 800f398:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f39c:	f1ba 0f01 	cmp.w	sl, #1
 800f3a0:	dc01      	bgt.n	800f3a6 <_printf_float+0x3b6>
 800f3a2:	07db      	lsls	r3, r3, #31
 800f3a4:	d536      	bpl.n	800f414 <_printf_float+0x424>
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	4642      	mov	r2, r8
 800f3aa:	4631      	mov	r1, r6
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	47b8      	blx	r7
 800f3b0:	3001      	adds	r0, #1
 800f3b2:	f43f ae78 	beq.w	800f0a6 <_printf_float+0xb6>
 800f3b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3ba:	4631      	mov	r1, r6
 800f3bc:	4628      	mov	r0, r5
 800f3be:	47b8      	blx	r7
 800f3c0:	3001      	adds	r0, #1
 800f3c2:	f43f ae70 	beq.w	800f0a6 <_printf_float+0xb6>
 800f3c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3d2:	f7f1 fb89 	bl	8000ae8 <__aeabi_dcmpeq>
 800f3d6:	b9c0      	cbnz	r0, 800f40a <_printf_float+0x41a>
 800f3d8:	4653      	mov	r3, sl
 800f3da:	f108 0201 	add.w	r2, r8, #1
 800f3de:	4631      	mov	r1, r6
 800f3e0:	4628      	mov	r0, r5
 800f3e2:	47b8      	blx	r7
 800f3e4:	3001      	adds	r0, #1
 800f3e6:	d10c      	bne.n	800f402 <_printf_float+0x412>
 800f3e8:	e65d      	b.n	800f0a6 <_printf_float+0xb6>
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	465a      	mov	r2, fp
 800f3ee:	4631      	mov	r1, r6
 800f3f0:	4628      	mov	r0, r5
 800f3f2:	47b8      	blx	r7
 800f3f4:	3001      	adds	r0, #1
 800f3f6:	f43f ae56 	beq.w	800f0a6 <_printf_float+0xb6>
 800f3fa:	f108 0801 	add.w	r8, r8, #1
 800f3fe:	45d0      	cmp	r8, sl
 800f400:	dbf3      	blt.n	800f3ea <_printf_float+0x3fa>
 800f402:	464b      	mov	r3, r9
 800f404:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f408:	e6df      	b.n	800f1ca <_printf_float+0x1da>
 800f40a:	f04f 0800 	mov.w	r8, #0
 800f40e:	f104 0b1a 	add.w	fp, r4, #26
 800f412:	e7f4      	b.n	800f3fe <_printf_float+0x40e>
 800f414:	2301      	movs	r3, #1
 800f416:	4642      	mov	r2, r8
 800f418:	e7e1      	b.n	800f3de <_printf_float+0x3ee>
 800f41a:	2301      	movs	r3, #1
 800f41c:	464a      	mov	r2, r9
 800f41e:	4631      	mov	r1, r6
 800f420:	4628      	mov	r0, r5
 800f422:	47b8      	blx	r7
 800f424:	3001      	adds	r0, #1
 800f426:	f43f ae3e 	beq.w	800f0a6 <_printf_float+0xb6>
 800f42a:	f108 0801 	add.w	r8, r8, #1
 800f42e:	68e3      	ldr	r3, [r4, #12]
 800f430:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f432:	1a5b      	subs	r3, r3, r1
 800f434:	4543      	cmp	r3, r8
 800f436:	dcf0      	bgt.n	800f41a <_printf_float+0x42a>
 800f438:	e6fc      	b.n	800f234 <_printf_float+0x244>
 800f43a:	f04f 0800 	mov.w	r8, #0
 800f43e:	f104 0919 	add.w	r9, r4, #25
 800f442:	e7f4      	b.n	800f42e <_printf_float+0x43e>

0800f444 <_printf_common>:
 800f444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f448:	4616      	mov	r6, r2
 800f44a:	4698      	mov	r8, r3
 800f44c:	688a      	ldr	r2, [r1, #8]
 800f44e:	690b      	ldr	r3, [r1, #16]
 800f450:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f454:	4293      	cmp	r3, r2
 800f456:	bfb8      	it	lt
 800f458:	4613      	movlt	r3, r2
 800f45a:	6033      	str	r3, [r6, #0]
 800f45c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f460:	4607      	mov	r7, r0
 800f462:	460c      	mov	r4, r1
 800f464:	b10a      	cbz	r2, 800f46a <_printf_common+0x26>
 800f466:	3301      	adds	r3, #1
 800f468:	6033      	str	r3, [r6, #0]
 800f46a:	6823      	ldr	r3, [r4, #0]
 800f46c:	0699      	lsls	r1, r3, #26
 800f46e:	bf42      	ittt	mi
 800f470:	6833      	ldrmi	r3, [r6, #0]
 800f472:	3302      	addmi	r3, #2
 800f474:	6033      	strmi	r3, [r6, #0]
 800f476:	6825      	ldr	r5, [r4, #0]
 800f478:	f015 0506 	ands.w	r5, r5, #6
 800f47c:	d106      	bne.n	800f48c <_printf_common+0x48>
 800f47e:	f104 0a19 	add.w	sl, r4, #25
 800f482:	68e3      	ldr	r3, [r4, #12]
 800f484:	6832      	ldr	r2, [r6, #0]
 800f486:	1a9b      	subs	r3, r3, r2
 800f488:	42ab      	cmp	r3, r5
 800f48a:	dc26      	bgt.n	800f4da <_printf_common+0x96>
 800f48c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f490:	6822      	ldr	r2, [r4, #0]
 800f492:	3b00      	subs	r3, #0
 800f494:	bf18      	it	ne
 800f496:	2301      	movne	r3, #1
 800f498:	0692      	lsls	r2, r2, #26
 800f49a:	d42b      	bmi.n	800f4f4 <_printf_common+0xb0>
 800f49c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f4a0:	4641      	mov	r1, r8
 800f4a2:	4638      	mov	r0, r7
 800f4a4:	47c8      	blx	r9
 800f4a6:	3001      	adds	r0, #1
 800f4a8:	d01e      	beq.n	800f4e8 <_printf_common+0xa4>
 800f4aa:	6823      	ldr	r3, [r4, #0]
 800f4ac:	6922      	ldr	r2, [r4, #16]
 800f4ae:	f003 0306 	and.w	r3, r3, #6
 800f4b2:	2b04      	cmp	r3, #4
 800f4b4:	bf02      	ittt	eq
 800f4b6:	68e5      	ldreq	r5, [r4, #12]
 800f4b8:	6833      	ldreq	r3, [r6, #0]
 800f4ba:	1aed      	subeq	r5, r5, r3
 800f4bc:	68a3      	ldr	r3, [r4, #8]
 800f4be:	bf0c      	ite	eq
 800f4c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4c4:	2500      	movne	r5, #0
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	bfc4      	itt	gt
 800f4ca:	1a9b      	subgt	r3, r3, r2
 800f4cc:	18ed      	addgt	r5, r5, r3
 800f4ce:	2600      	movs	r6, #0
 800f4d0:	341a      	adds	r4, #26
 800f4d2:	42b5      	cmp	r5, r6
 800f4d4:	d11a      	bne.n	800f50c <_printf_common+0xc8>
 800f4d6:	2000      	movs	r0, #0
 800f4d8:	e008      	b.n	800f4ec <_printf_common+0xa8>
 800f4da:	2301      	movs	r3, #1
 800f4dc:	4652      	mov	r2, sl
 800f4de:	4641      	mov	r1, r8
 800f4e0:	4638      	mov	r0, r7
 800f4e2:	47c8      	blx	r9
 800f4e4:	3001      	adds	r0, #1
 800f4e6:	d103      	bne.n	800f4f0 <_printf_common+0xac>
 800f4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f0:	3501      	adds	r5, #1
 800f4f2:	e7c6      	b.n	800f482 <_printf_common+0x3e>
 800f4f4:	18e1      	adds	r1, r4, r3
 800f4f6:	1c5a      	adds	r2, r3, #1
 800f4f8:	2030      	movs	r0, #48	@ 0x30
 800f4fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f4fe:	4422      	add	r2, r4
 800f500:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f508:	3302      	adds	r3, #2
 800f50a:	e7c7      	b.n	800f49c <_printf_common+0x58>
 800f50c:	2301      	movs	r3, #1
 800f50e:	4622      	mov	r2, r4
 800f510:	4641      	mov	r1, r8
 800f512:	4638      	mov	r0, r7
 800f514:	47c8      	blx	r9
 800f516:	3001      	adds	r0, #1
 800f518:	d0e6      	beq.n	800f4e8 <_printf_common+0xa4>
 800f51a:	3601      	adds	r6, #1
 800f51c:	e7d9      	b.n	800f4d2 <_printf_common+0x8e>
	...

0800f520 <_printf_i>:
 800f520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f524:	7e0f      	ldrb	r7, [r1, #24]
 800f526:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f528:	2f78      	cmp	r7, #120	@ 0x78
 800f52a:	4691      	mov	r9, r2
 800f52c:	4680      	mov	r8, r0
 800f52e:	460c      	mov	r4, r1
 800f530:	469a      	mov	sl, r3
 800f532:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f536:	d807      	bhi.n	800f548 <_printf_i+0x28>
 800f538:	2f62      	cmp	r7, #98	@ 0x62
 800f53a:	d80a      	bhi.n	800f552 <_printf_i+0x32>
 800f53c:	2f00      	cmp	r7, #0
 800f53e:	f000 80d1 	beq.w	800f6e4 <_printf_i+0x1c4>
 800f542:	2f58      	cmp	r7, #88	@ 0x58
 800f544:	f000 80b8 	beq.w	800f6b8 <_printf_i+0x198>
 800f548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f54c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f550:	e03a      	b.n	800f5c8 <_printf_i+0xa8>
 800f552:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f556:	2b15      	cmp	r3, #21
 800f558:	d8f6      	bhi.n	800f548 <_printf_i+0x28>
 800f55a:	a101      	add	r1, pc, #4	@ (adr r1, 800f560 <_printf_i+0x40>)
 800f55c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f560:	0800f5b9 	.word	0x0800f5b9
 800f564:	0800f5cd 	.word	0x0800f5cd
 800f568:	0800f549 	.word	0x0800f549
 800f56c:	0800f549 	.word	0x0800f549
 800f570:	0800f549 	.word	0x0800f549
 800f574:	0800f549 	.word	0x0800f549
 800f578:	0800f5cd 	.word	0x0800f5cd
 800f57c:	0800f549 	.word	0x0800f549
 800f580:	0800f549 	.word	0x0800f549
 800f584:	0800f549 	.word	0x0800f549
 800f588:	0800f549 	.word	0x0800f549
 800f58c:	0800f6cb 	.word	0x0800f6cb
 800f590:	0800f5f7 	.word	0x0800f5f7
 800f594:	0800f685 	.word	0x0800f685
 800f598:	0800f549 	.word	0x0800f549
 800f59c:	0800f549 	.word	0x0800f549
 800f5a0:	0800f6ed 	.word	0x0800f6ed
 800f5a4:	0800f549 	.word	0x0800f549
 800f5a8:	0800f5f7 	.word	0x0800f5f7
 800f5ac:	0800f549 	.word	0x0800f549
 800f5b0:	0800f549 	.word	0x0800f549
 800f5b4:	0800f68d 	.word	0x0800f68d
 800f5b8:	6833      	ldr	r3, [r6, #0]
 800f5ba:	1d1a      	adds	r2, r3, #4
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	6032      	str	r2, [r6, #0]
 800f5c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f5c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	e09c      	b.n	800f706 <_printf_i+0x1e6>
 800f5cc:	6833      	ldr	r3, [r6, #0]
 800f5ce:	6820      	ldr	r0, [r4, #0]
 800f5d0:	1d19      	adds	r1, r3, #4
 800f5d2:	6031      	str	r1, [r6, #0]
 800f5d4:	0606      	lsls	r6, r0, #24
 800f5d6:	d501      	bpl.n	800f5dc <_printf_i+0xbc>
 800f5d8:	681d      	ldr	r5, [r3, #0]
 800f5da:	e003      	b.n	800f5e4 <_printf_i+0xc4>
 800f5dc:	0645      	lsls	r5, r0, #25
 800f5de:	d5fb      	bpl.n	800f5d8 <_printf_i+0xb8>
 800f5e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f5e4:	2d00      	cmp	r5, #0
 800f5e6:	da03      	bge.n	800f5f0 <_printf_i+0xd0>
 800f5e8:	232d      	movs	r3, #45	@ 0x2d
 800f5ea:	426d      	negs	r5, r5
 800f5ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5f0:	4858      	ldr	r0, [pc, #352]	@ (800f754 <_printf_i+0x234>)
 800f5f2:	230a      	movs	r3, #10
 800f5f4:	e011      	b.n	800f61a <_printf_i+0xfa>
 800f5f6:	6821      	ldr	r1, [r4, #0]
 800f5f8:	6833      	ldr	r3, [r6, #0]
 800f5fa:	0608      	lsls	r0, r1, #24
 800f5fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800f600:	d402      	bmi.n	800f608 <_printf_i+0xe8>
 800f602:	0649      	lsls	r1, r1, #25
 800f604:	bf48      	it	mi
 800f606:	b2ad      	uxthmi	r5, r5
 800f608:	2f6f      	cmp	r7, #111	@ 0x6f
 800f60a:	4852      	ldr	r0, [pc, #328]	@ (800f754 <_printf_i+0x234>)
 800f60c:	6033      	str	r3, [r6, #0]
 800f60e:	bf14      	ite	ne
 800f610:	230a      	movne	r3, #10
 800f612:	2308      	moveq	r3, #8
 800f614:	2100      	movs	r1, #0
 800f616:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f61a:	6866      	ldr	r6, [r4, #4]
 800f61c:	60a6      	str	r6, [r4, #8]
 800f61e:	2e00      	cmp	r6, #0
 800f620:	db05      	blt.n	800f62e <_printf_i+0x10e>
 800f622:	6821      	ldr	r1, [r4, #0]
 800f624:	432e      	orrs	r6, r5
 800f626:	f021 0104 	bic.w	r1, r1, #4
 800f62a:	6021      	str	r1, [r4, #0]
 800f62c:	d04b      	beq.n	800f6c6 <_printf_i+0x1a6>
 800f62e:	4616      	mov	r6, r2
 800f630:	fbb5 f1f3 	udiv	r1, r5, r3
 800f634:	fb03 5711 	mls	r7, r3, r1, r5
 800f638:	5dc7      	ldrb	r7, [r0, r7]
 800f63a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f63e:	462f      	mov	r7, r5
 800f640:	42bb      	cmp	r3, r7
 800f642:	460d      	mov	r5, r1
 800f644:	d9f4      	bls.n	800f630 <_printf_i+0x110>
 800f646:	2b08      	cmp	r3, #8
 800f648:	d10b      	bne.n	800f662 <_printf_i+0x142>
 800f64a:	6823      	ldr	r3, [r4, #0]
 800f64c:	07df      	lsls	r7, r3, #31
 800f64e:	d508      	bpl.n	800f662 <_printf_i+0x142>
 800f650:	6923      	ldr	r3, [r4, #16]
 800f652:	6861      	ldr	r1, [r4, #4]
 800f654:	4299      	cmp	r1, r3
 800f656:	bfde      	ittt	le
 800f658:	2330      	movle	r3, #48	@ 0x30
 800f65a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f65e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f662:	1b92      	subs	r2, r2, r6
 800f664:	6122      	str	r2, [r4, #16]
 800f666:	f8cd a000 	str.w	sl, [sp]
 800f66a:	464b      	mov	r3, r9
 800f66c:	aa03      	add	r2, sp, #12
 800f66e:	4621      	mov	r1, r4
 800f670:	4640      	mov	r0, r8
 800f672:	f7ff fee7 	bl	800f444 <_printf_common>
 800f676:	3001      	adds	r0, #1
 800f678:	d14a      	bne.n	800f710 <_printf_i+0x1f0>
 800f67a:	f04f 30ff 	mov.w	r0, #4294967295
 800f67e:	b004      	add	sp, #16
 800f680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f684:	6823      	ldr	r3, [r4, #0]
 800f686:	f043 0320 	orr.w	r3, r3, #32
 800f68a:	6023      	str	r3, [r4, #0]
 800f68c:	4832      	ldr	r0, [pc, #200]	@ (800f758 <_printf_i+0x238>)
 800f68e:	2778      	movs	r7, #120	@ 0x78
 800f690:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f694:	6823      	ldr	r3, [r4, #0]
 800f696:	6831      	ldr	r1, [r6, #0]
 800f698:	061f      	lsls	r7, r3, #24
 800f69a:	f851 5b04 	ldr.w	r5, [r1], #4
 800f69e:	d402      	bmi.n	800f6a6 <_printf_i+0x186>
 800f6a0:	065f      	lsls	r7, r3, #25
 800f6a2:	bf48      	it	mi
 800f6a4:	b2ad      	uxthmi	r5, r5
 800f6a6:	6031      	str	r1, [r6, #0]
 800f6a8:	07d9      	lsls	r1, r3, #31
 800f6aa:	bf44      	itt	mi
 800f6ac:	f043 0320 	orrmi.w	r3, r3, #32
 800f6b0:	6023      	strmi	r3, [r4, #0]
 800f6b2:	b11d      	cbz	r5, 800f6bc <_printf_i+0x19c>
 800f6b4:	2310      	movs	r3, #16
 800f6b6:	e7ad      	b.n	800f614 <_printf_i+0xf4>
 800f6b8:	4826      	ldr	r0, [pc, #152]	@ (800f754 <_printf_i+0x234>)
 800f6ba:	e7e9      	b.n	800f690 <_printf_i+0x170>
 800f6bc:	6823      	ldr	r3, [r4, #0]
 800f6be:	f023 0320 	bic.w	r3, r3, #32
 800f6c2:	6023      	str	r3, [r4, #0]
 800f6c4:	e7f6      	b.n	800f6b4 <_printf_i+0x194>
 800f6c6:	4616      	mov	r6, r2
 800f6c8:	e7bd      	b.n	800f646 <_printf_i+0x126>
 800f6ca:	6833      	ldr	r3, [r6, #0]
 800f6cc:	6825      	ldr	r5, [r4, #0]
 800f6ce:	6961      	ldr	r1, [r4, #20]
 800f6d0:	1d18      	adds	r0, r3, #4
 800f6d2:	6030      	str	r0, [r6, #0]
 800f6d4:	062e      	lsls	r6, r5, #24
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	d501      	bpl.n	800f6de <_printf_i+0x1be>
 800f6da:	6019      	str	r1, [r3, #0]
 800f6dc:	e002      	b.n	800f6e4 <_printf_i+0x1c4>
 800f6de:	0668      	lsls	r0, r5, #25
 800f6e0:	d5fb      	bpl.n	800f6da <_printf_i+0x1ba>
 800f6e2:	8019      	strh	r1, [r3, #0]
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	6123      	str	r3, [r4, #16]
 800f6e8:	4616      	mov	r6, r2
 800f6ea:	e7bc      	b.n	800f666 <_printf_i+0x146>
 800f6ec:	6833      	ldr	r3, [r6, #0]
 800f6ee:	1d1a      	adds	r2, r3, #4
 800f6f0:	6032      	str	r2, [r6, #0]
 800f6f2:	681e      	ldr	r6, [r3, #0]
 800f6f4:	6862      	ldr	r2, [r4, #4]
 800f6f6:	2100      	movs	r1, #0
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	f7f0 fd79 	bl	80001f0 <memchr>
 800f6fe:	b108      	cbz	r0, 800f704 <_printf_i+0x1e4>
 800f700:	1b80      	subs	r0, r0, r6
 800f702:	6060      	str	r0, [r4, #4]
 800f704:	6863      	ldr	r3, [r4, #4]
 800f706:	6123      	str	r3, [r4, #16]
 800f708:	2300      	movs	r3, #0
 800f70a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f70e:	e7aa      	b.n	800f666 <_printf_i+0x146>
 800f710:	6923      	ldr	r3, [r4, #16]
 800f712:	4632      	mov	r2, r6
 800f714:	4649      	mov	r1, r9
 800f716:	4640      	mov	r0, r8
 800f718:	47d0      	blx	sl
 800f71a:	3001      	adds	r0, #1
 800f71c:	d0ad      	beq.n	800f67a <_printf_i+0x15a>
 800f71e:	6823      	ldr	r3, [r4, #0]
 800f720:	079b      	lsls	r3, r3, #30
 800f722:	d413      	bmi.n	800f74c <_printf_i+0x22c>
 800f724:	68e0      	ldr	r0, [r4, #12]
 800f726:	9b03      	ldr	r3, [sp, #12]
 800f728:	4298      	cmp	r0, r3
 800f72a:	bfb8      	it	lt
 800f72c:	4618      	movlt	r0, r3
 800f72e:	e7a6      	b.n	800f67e <_printf_i+0x15e>
 800f730:	2301      	movs	r3, #1
 800f732:	4632      	mov	r2, r6
 800f734:	4649      	mov	r1, r9
 800f736:	4640      	mov	r0, r8
 800f738:	47d0      	blx	sl
 800f73a:	3001      	adds	r0, #1
 800f73c:	d09d      	beq.n	800f67a <_printf_i+0x15a>
 800f73e:	3501      	adds	r5, #1
 800f740:	68e3      	ldr	r3, [r4, #12]
 800f742:	9903      	ldr	r1, [sp, #12]
 800f744:	1a5b      	subs	r3, r3, r1
 800f746:	42ab      	cmp	r3, r5
 800f748:	dcf2      	bgt.n	800f730 <_printf_i+0x210>
 800f74a:	e7eb      	b.n	800f724 <_printf_i+0x204>
 800f74c:	2500      	movs	r5, #0
 800f74e:	f104 0619 	add.w	r6, r4, #25
 800f752:	e7f5      	b.n	800f740 <_printf_i+0x220>
 800f754:	0806d599 	.word	0x0806d599
 800f758:	0806d5aa 	.word	0x0806d5aa

0800f75c <_scanf_float>:
 800f75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f760:	b087      	sub	sp, #28
 800f762:	4691      	mov	r9, r2
 800f764:	9303      	str	r3, [sp, #12]
 800f766:	688b      	ldr	r3, [r1, #8]
 800f768:	1e5a      	subs	r2, r3, #1
 800f76a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f76e:	bf81      	itttt	hi
 800f770:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f774:	eb03 0b05 	addhi.w	fp, r3, r5
 800f778:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f77c:	608b      	strhi	r3, [r1, #8]
 800f77e:	680b      	ldr	r3, [r1, #0]
 800f780:	460a      	mov	r2, r1
 800f782:	f04f 0500 	mov.w	r5, #0
 800f786:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f78a:	f842 3b1c 	str.w	r3, [r2], #28
 800f78e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f792:	4680      	mov	r8, r0
 800f794:	460c      	mov	r4, r1
 800f796:	bf98      	it	ls
 800f798:	f04f 0b00 	movls.w	fp, #0
 800f79c:	9201      	str	r2, [sp, #4]
 800f79e:	4616      	mov	r6, r2
 800f7a0:	46aa      	mov	sl, r5
 800f7a2:	462f      	mov	r7, r5
 800f7a4:	9502      	str	r5, [sp, #8]
 800f7a6:	68a2      	ldr	r2, [r4, #8]
 800f7a8:	b15a      	cbz	r2, 800f7c2 <_scanf_float+0x66>
 800f7aa:	f8d9 3000 	ldr.w	r3, [r9]
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	2b4e      	cmp	r3, #78	@ 0x4e
 800f7b2:	d863      	bhi.n	800f87c <_scanf_float+0x120>
 800f7b4:	2b40      	cmp	r3, #64	@ 0x40
 800f7b6:	d83b      	bhi.n	800f830 <_scanf_float+0xd4>
 800f7b8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f7bc:	b2c8      	uxtb	r0, r1
 800f7be:	280e      	cmp	r0, #14
 800f7c0:	d939      	bls.n	800f836 <_scanf_float+0xda>
 800f7c2:	b11f      	cbz	r7, 800f7cc <_scanf_float+0x70>
 800f7c4:	6823      	ldr	r3, [r4, #0]
 800f7c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f7ca:	6023      	str	r3, [r4, #0]
 800f7cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7d0:	f1ba 0f01 	cmp.w	sl, #1
 800f7d4:	f200 8114 	bhi.w	800fa00 <_scanf_float+0x2a4>
 800f7d8:	9b01      	ldr	r3, [sp, #4]
 800f7da:	429e      	cmp	r6, r3
 800f7dc:	f200 8105 	bhi.w	800f9ea <_scanf_float+0x28e>
 800f7e0:	2001      	movs	r0, #1
 800f7e2:	b007      	add	sp, #28
 800f7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f7ec:	2a0d      	cmp	r2, #13
 800f7ee:	d8e8      	bhi.n	800f7c2 <_scanf_float+0x66>
 800f7f0:	a101      	add	r1, pc, #4	@ (adr r1, 800f7f8 <_scanf_float+0x9c>)
 800f7f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f7f6:	bf00      	nop
 800f7f8:	0800f941 	.word	0x0800f941
 800f7fc:	0800f7c3 	.word	0x0800f7c3
 800f800:	0800f7c3 	.word	0x0800f7c3
 800f804:	0800f7c3 	.word	0x0800f7c3
 800f808:	0800f99d 	.word	0x0800f99d
 800f80c:	0800f977 	.word	0x0800f977
 800f810:	0800f7c3 	.word	0x0800f7c3
 800f814:	0800f7c3 	.word	0x0800f7c3
 800f818:	0800f94f 	.word	0x0800f94f
 800f81c:	0800f7c3 	.word	0x0800f7c3
 800f820:	0800f7c3 	.word	0x0800f7c3
 800f824:	0800f7c3 	.word	0x0800f7c3
 800f828:	0800f7c3 	.word	0x0800f7c3
 800f82c:	0800f90b 	.word	0x0800f90b
 800f830:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f834:	e7da      	b.n	800f7ec <_scanf_float+0x90>
 800f836:	290e      	cmp	r1, #14
 800f838:	d8c3      	bhi.n	800f7c2 <_scanf_float+0x66>
 800f83a:	a001      	add	r0, pc, #4	@ (adr r0, 800f840 <_scanf_float+0xe4>)
 800f83c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f840:	0800f8fb 	.word	0x0800f8fb
 800f844:	0800f7c3 	.word	0x0800f7c3
 800f848:	0800f8fb 	.word	0x0800f8fb
 800f84c:	0800f98b 	.word	0x0800f98b
 800f850:	0800f7c3 	.word	0x0800f7c3
 800f854:	0800f89d 	.word	0x0800f89d
 800f858:	0800f8e1 	.word	0x0800f8e1
 800f85c:	0800f8e1 	.word	0x0800f8e1
 800f860:	0800f8e1 	.word	0x0800f8e1
 800f864:	0800f8e1 	.word	0x0800f8e1
 800f868:	0800f8e1 	.word	0x0800f8e1
 800f86c:	0800f8e1 	.word	0x0800f8e1
 800f870:	0800f8e1 	.word	0x0800f8e1
 800f874:	0800f8e1 	.word	0x0800f8e1
 800f878:	0800f8e1 	.word	0x0800f8e1
 800f87c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f87e:	d809      	bhi.n	800f894 <_scanf_float+0x138>
 800f880:	2b60      	cmp	r3, #96	@ 0x60
 800f882:	d8b1      	bhi.n	800f7e8 <_scanf_float+0x8c>
 800f884:	2b54      	cmp	r3, #84	@ 0x54
 800f886:	d07b      	beq.n	800f980 <_scanf_float+0x224>
 800f888:	2b59      	cmp	r3, #89	@ 0x59
 800f88a:	d19a      	bne.n	800f7c2 <_scanf_float+0x66>
 800f88c:	2d07      	cmp	r5, #7
 800f88e:	d198      	bne.n	800f7c2 <_scanf_float+0x66>
 800f890:	2508      	movs	r5, #8
 800f892:	e02f      	b.n	800f8f4 <_scanf_float+0x198>
 800f894:	2b74      	cmp	r3, #116	@ 0x74
 800f896:	d073      	beq.n	800f980 <_scanf_float+0x224>
 800f898:	2b79      	cmp	r3, #121	@ 0x79
 800f89a:	e7f6      	b.n	800f88a <_scanf_float+0x12e>
 800f89c:	6821      	ldr	r1, [r4, #0]
 800f89e:	05c8      	lsls	r0, r1, #23
 800f8a0:	d51e      	bpl.n	800f8e0 <_scanf_float+0x184>
 800f8a2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f8a6:	6021      	str	r1, [r4, #0]
 800f8a8:	3701      	adds	r7, #1
 800f8aa:	f1bb 0f00 	cmp.w	fp, #0
 800f8ae:	d003      	beq.n	800f8b8 <_scanf_float+0x15c>
 800f8b0:	3201      	adds	r2, #1
 800f8b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f8b6:	60a2      	str	r2, [r4, #8]
 800f8b8:	68a3      	ldr	r3, [r4, #8]
 800f8ba:	3b01      	subs	r3, #1
 800f8bc:	60a3      	str	r3, [r4, #8]
 800f8be:	6923      	ldr	r3, [r4, #16]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	6123      	str	r3, [r4, #16]
 800f8c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f8c8:	3b01      	subs	r3, #1
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f8c9 3004 	str.w	r3, [r9, #4]
 800f8d0:	f340 8082 	ble.w	800f9d8 <_scanf_float+0x27c>
 800f8d4:	f8d9 3000 	ldr.w	r3, [r9]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	f8c9 3000 	str.w	r3, [r9]
 800f8de:	e762      	b.n	800f7a6 <_scanf_float+0x4a>
 800f8e0:	eb1a 0105 	adds.w	r1, sl, r5
 800f8e4:	f47f af6d 	bne.w	800f7c2 <_scanf_float+0x66>
 800f8e8:	6822      	ldr	r2, [r4, #0]
 800f8ea:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f8ee:	6022      	str	r2, [r4, #0]
 800f8f0:	460d      	mov	r5, r1
 800f8f2:	468a      	mov	sl, r1
 800f8f4:	f806 3b01 	strb.w	r3, [r6], #1
 800f8f8:	e7de      	b.n	800f8b8 <_scanf_float+0x15c>
 800f8fa:	6822      	ldr	r2, [r4, #0]
 800f8fc:	0610      	lsls	r0, r2, #24
 800f8fe:	f57f af60 	bpl.w	800f7c2 <_scanf_float+0x66>
 800f902:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f906:	6022      	str	r2, [r4, #0]
 800f908:	e7f4      	b.n	800f8f4 <_scanf_float+0x198>
 800f90a:	f1ba 0f00 	cmp.w	sl, #0
 800f90e:	d10c      	bne.n	800f92a <_scanf_float+0x1ce>
 800f910:	b977      	cbnz	r7, 800f930 <_scanf_float+0x1d4>
 800f912:	6822      	ldr	r2, [r4, #0]
 800f914:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f918:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f91c:	d108      	bne.n	800f930 <_scanf_float+0x1d4>
 800f91e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f922:	6022      	str	r2, [r4, #0]
 800f924:	f04f 0a01 	mov.w	sl, #1
 800f928:	e7e4      	b.n	800f8f4 <_scanf_float+0x198>
 800f92a:	f1ba 0f02 	cmp.w	sl, #2
 800f92e:	d050      	beq.n	800f9d2 <_scanf_float+0x276>
 800f930:	2d01      	cmp	r5, #1
 800f932:	d002      	beq.n	800f93a <_scanf_float+0x1de>
 800f934:	2d04      	cmp	r5, #4
 800f936:	f47f af44 	bne.w	800f7c2 <_scanf_float+0x66>
 800f93a:	3501      	adds	r5, #1
 800f93c:	b2ed      	uxtb	r5, r5
 800f93e:	e7d9      	b.n	800f8f4 <_scanf_float+0x198>
 800f940:	f1ba 0f01 	cmp.w	sl, #1
 800f944:	f47f af3d 	bne.w	800f7c2 <_scanf_float+0x66>
 800f948:	f04f 0a02 	mov.w	sl, #2
 800f94c:	e7d2      	b.n	800f8f4 <_scanf_float+0x198>
 800f94e:	b975      	cbnz	r5, 800f96e <_scanf_float+0x212>
 800f950:	2f00      	cmp	r7, #0
 800f952:	f47f af37 	bne.w	800f7c4 <_scanf_float+0x68>
 800f956:	6822      	ldr	r2, [r4, #0]
 800f958:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f95c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f960:	f040 8103 	bne.w	800fb6a <_scanf_float+0x40e>
 800f964:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f968:	6022      	str	r2, [r4, #0]
 800f96a:	2501      	movs	r5, #1
 800f96c:	e7c2      	b.n	800f8f4 <_scanf_float+0x198>
 800f96e:	2d03      	cmp	r5, #3
 800f970:	d0e3      	beq.n	800f93a <_scanf_float+0x1de>
 800f972:	2d05      	cmp	r5, #5
 800f974:	e7df      	b.n	800f936 <_scanf_float+0x1da>
 800f976:	2d02      	cmp	r5, #2
 800f978:	f47f af23 	bne.w	800f7c2 <_scanf_float+0x66>
 800f97c:	2503      	movs	r5, #3
 800f97e:	e7b9      	b.n	800f8f4 <_scanf_float+0x198>
 800f980:	2d06      	cmp	r5, #6
 800f982:	f47f af1e 	bne.w	800f7c2 <_scanf_float+0x66>
 800f986:	2507      	movs	r5, #7
 800f988:	e7b4      	b.n	800f8f4 <_scanf_float+0x198>
 800f98a:	6822      	ldr	r2, [r4, #0]
 800f98c:	0591      	lsls	r1, r2, #22
 800f98e:	f57f af18 	bpl.w	800f7c2 <_scanf_float+0x66>
 800f992:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f996:	6022      	str	r2, [r4, #0]
 800f998:	9702      	str	r7, [sp, #8]
 800f99a:	e7ab      	b.n	800f8f4 <_scanf_float+0x198>
 800f99c:	6822      	ldr	r2, [r4, #0]
 800f99e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f9a2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f9a6:	d005      	beq.n	800f9b4 <_scanf_float+0x258>
 800f9a8:	0550      	lsls	r0, r2, #21
 800f9aa:	f57f af0a 	bpl.w	800f7c2 <_scanf_float+0x66>
 800f9ae:	2f00      	cmp	r7, #0
 800f9b0:	f000 80db 	beq.w	800fb6a <_scanf_float+0x40e>
 800f9b4:	0591      	lsls	r1, r2, #22
 800f9b6:	bf58      	it	pl
 800f9b8:	9902      	ldrpl	r1, [sp, #8]
 800f9ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f9be:	bf58      	it	pl
 800f9c0:	1a79      	subpl	r1, r7, r1
 800f9c2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f9c6:	bf58      	it	pl
 800f9c8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f9cc:	6022      	str	r2, [r4, #0]
 800f9ce:	2700      	movs	r7, #0
 800f9d0:	e790      	b.n	800f8f4 <_scanf_float+0x198>
 800f9d2:	f04f 0a03 	mov.w	sl, #3
 800f9d6:	e78d      	b.n	800f8f4 <_scanf_float+0x198>
 800f9d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f9dc:	4649      	mov	r1, r9
 800f9de:	4640      	mov	r0, r8
 800f9e0:	4798      	blx	r3
 800f9e2:	2800      	cmp	r0, #0
 800f9e4:	f43f aedf 	beq.w	800f7a6 <_scanf_float+0x4a>
 800f9e8:	e6eb      	b.n	800f7c2 <_scanf_float+0x66>
 800f9ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f9ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f9f2:	464a      	mov	r2, r9
 800f9f4:	4640      	mov	r0, r8
 800f9f6:	4798      	blx	r3
 800f9f8:	6923      	ldr	r3, [r4, #16]
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	6123      	str	r3, [r4, #16]
 800f9fe:	e6eb      	b.n	800f7d8 <_scanf_float+0x7c>
 800fa00:	1e6b      	subs	r3, r5, #1
 800fa02:	2b06      	cmp	r3, #6
 800fa04:	d824      	bhi.n	800fa50 <_scanf_float+0x2f4>
 800fa06:	2d02      	cmp	r5, #2
 800fa08:	d836      	bhi.n	800fa78 <_scanf_float+0x31c>
 800fa0a:	9b01      	ldr	r3, [sp, #4]
 800fa0c:	429e      	cmp	r6, r3
 800fa0e:	f67f aee7 	bls.w	800f7e0 <_scanf_float+0x84>
 800fa12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fa1a:	464a      	mov	r2, r9
 800fa1c:	4640      	mov	r0, r8
 800fa1e:	4798      	blx	r3
 800fa20:	6923      	ldr	r3, [r4, #16]
 800fa22:	3b01      	subs	r3, #1
 800fa24:	6123      	str	r3, [r4, #16]
 800fa26:	e7f0      	b.n	800fa0a <_scanf_float+0x2ae>
 800fa28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa2c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fa30:	464a      	mov	r2, r9
 800fa32:	4640      	mov	r0, r8
 800fa34:	4798      	blx	r3
 800fa36:	6923      	ldr	r3, [r4, #16]
 800fa38:	3b01      	subs	r3, #1
 800fa3a:	6123      	str	r3, [r4, #16]
 800fa3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa40:	fa5f fa8a 	uxtb.w	sl, sl
 800fa44:	f1ba 0f02 	cmp.w	sl, #2
 800fa48:	d1ee      	bne.n	800fa28 <_scanf_float+0x2cc>
 800fa4a:	3d03      	subs	r5, #3
 800fa4c:	b2ed      	uxtb	r5, r5
 800fa4e:	1b76      	subs	r6, r6, r5
 800fa50:	6823      	ldr	r3, [r4, #0]
 800fa52:	05da      	lsls	r2, r3, #23
 800fa54:	d530      	bpl.n	800fab8 <_scanf_float+0x35c>
 800fa56:	055b      	lsls	r3, r3, #21
 800fa58:	d511      	bpl.n	800fa7e <_scanf_float+0x322>
 800fa5a:	9b01      	ldr	r3, [sp, #4]
 800fa5c:	429e      	cmp	r6, r3
 800fa5e:	f67f aebf 	bls.w	800f7e0 <_scanf_float+0x84>
 800fa62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fa6a:	464a      	mov	r2, r9
 800fa6c:	4640      	mov	r0, r8
 800fa6e:	4798      	blx	r3
 800fa70:	6923      	ldr	r3, [r4, #16]
 800fa72:	3b01      	subs	r3, #1
 800fa74:	6123      	str	r3, [r4, #16]
 800fa76:	e7f0      	b.n	800fa5a <_scanf_float+0x2fe>
 800fa78:	46aa      	mov	sl, r5
 800fa7a:	46b3      	mov	fp, r6
 800fa7c:	e7de      	b.n	800fa3c <_scanf_float+0x2e0>
 800fa7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fa82:	6923      	ldr	r3, [r4, #16]
 800fa84:	2965      	cmp	r1, #101	@ 0x65
 800fa86:	f103 33ff 	add.w	r3, r3, #4294967295
 800fa8a:	f106 35ff 	add.w	r5, r6, #4294967295
 800fa8e:	6123      	str	r3, [r4, #16]
 800fa90:	d00c      	beq.n	800faac <_scanf_float+0x350>
 800fa92:	2945      	cmp	r1, #69	@ 0x45
 800fa94:	d00a      	beq.n	800faac <_scanf_float+0x350>
 800fa96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa9a:	464a      	mov	r2, r9
 800fa9c:	4640      	mov	r0, r8
 800fa9e:	4798      	blx	r3
 800faa0:	6923      	ldr	r3, [r4, #16]
 800faa2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800faa6:	3b01      	subs	r3, #1
 800faa8:	1eb5      	subs	r5, r6, #2
 800faaa:	6123      	str	r3, [r4, #16]
 800faac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fab0:	464a      	mov	r2, r9
 800fab2:	4640      	mov	r0, r8
 800fab4:	4798      	blx	r3
 800fab6:	462e      	mov	r6, r5
 800fab8:	6822      	ldr	r2, [r4, #0]
 800faba:	f012 0210 	ands.w	r2, r2, #16
 800fabe:	d001      	beq.n	800fac4 <_scanf_float+0x368>
 800fac0:	2000      	movs	r0, #0
 800fac2:	e68e      	b.n	800f7e2 <_scanf_float+0x86>
 800fac4:	7032      	strb	r2, [r6, #0]
 800fac6:	6823      	ldr	r3, [r4, #0]
 800fac8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800facc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fad0:	d125      	bne.n	800fb1e <_scanf_float+0x3c2>
 800fad2:	9b02      	ldr	r3, [sp, #8]
 800fad4:	429f      	cmp	r7, r3
 800fad6:	d00a      	beq.n	800faee <_scanf_float+0x392>
 800fad8:	1bda      	subs	r2, r3, r7
 800fada:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fade:	429e      	cmp	r6, r3
 800fae0:	bf28      	it	cs
 800fae2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fae6:	4922      	ldr	r1, [pc, #136]	@ (800fb70 <_scanf_float+0x414>)
 800fae8:	4630      	mov	r0, r6
 800faea:	f000 f93d 	bl	800fd68 <siprintf>
 800faee:	9901      	ldr	r1, [sp, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	4640      	mov	r0, r8
 800faf4:	f7ff f944 	bl	800ed80 <_strtod_r>
 800faf8:	9b03      	ldr	r3, [sp, #12]
 800fafa:	6821      	ldr	r1, [r4, #0]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f011 0f02 	tst.w	r1, #2
 800fb02:	ec57 6b10 	vmov	r6, r7, d0
 800fb06:	f103 0204 	add.w	r2, r3, #4
 800fb0a:	d015      	beq.n	800fb38 <_scanf_float+0x3dc>
 800fb0c:	9903      	ldr	r1, [sp, #12]
 800fb0e:	600a      	str	r2, [r1, #0]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	e9c3 6700 	strd	r6, r7, [r3]
 800fb16:	68e3      	ldr	r3, [r4, #12]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	60e3      	str	r3, [r4, #12]
 800fb1c:	e7d0      	b.n	800fac0 <_scanf_float+0x364>
 800fb1e:	9b04      	ldr	r3, [sp, #16]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d0e4      	beq.n	800faee <_scanf_float+0x392>
 800fb24:	9905      	ldr	r1, [sp, #20]
 800fb26:	230a      	movs	r3, #10
 800fb28:	3101      	adds	r1, #1
 800fb2a:	4640      	mov	r0, r8
 800fb2c:	f7ff f9b4 	bl	800ee98 <_strtol_r>
 800fb30:	9b04      	ldr	r3, [sp, #16]
 800fb32:	9e05      	ldr	r6, [sp, #20]
 800fb34:	1ac2      	subs	r2, r0, r3
 800fb36:	e7d0      	b.n	800fada <_scanf_float+0x37e>
 800fb38:	f011 0f04 	tst.w	r1, #4
 800fb3c:	9903      	ldr	r1, [sp, #12]
 800fb3e:	600a      	str	r2, [r1, #0]
 800fb40:	d1e6      	bne.n	800fb10 <_scanf_float+0x3b4>
 800fb42:	681d      	ldr	r5, [r3, #0]
 800fb44:	4632      	mov	r2, r6
 800fb46:	463b      	mov	r3, r7
 800fb48:	4630      	mov	r0, r6
 800fb4a:	4639      	mov	r1, r7
 800fb4c:	f7f0 fffe 	bl	8000b4c <__aeabi_dcmpun>
 800fb50:	b128      	cbz	r0, 800fb5e <_scanf_float+0x402>
 800fb52:	4808      	ldr	r0, [pc, #32]	@ (800fb74 <_scanf_float+0x418>)
 800fb54:	f000 fad8 	bl	8010108 <nanf>
 800fb58:	ed85 0a00 	vstr	s0, [r5]
 800fb5c:	e7db      	b.n	800fb16 <_scanf_float+0x3ba>
 800fb5e:	4630      	mov	r0, r6
 800fb60:	4639      	mov	r1, r7
 800fb62:	f7f1 f851 	bl	8000c08 <__aeabi_d2f>
 800fb66:	6028      	str	r0, [r5, #0]
 800fb68:	e7d5      	b.n	800fb16 <_scanf_float+0x3ba>
 800fb6a:	2700      	movs	r7, #0
 800fb6c:	e62e      	b.n	800f7cc <_scanf_float+0x70>
 800fb6e:	bf00      	nop
 800fb70:	0806d5bb 	.word	0x0806d5bb
 800fb74:	0806d65d 	.word	0x0806d65d

0800fb78 <std>:
 800fb78:	2300      	movs	r3, #0
 800fb7a:	b510      	push	{r4, lr}
 800fb7c:	4604      	mov	r4, r0
 800fb7e:	e9c0 3300 	strd	r3, r3, [r0]
 800fb82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb86:	6083      	str	r3, [r0, #8]
 800fb88:	8181      	strh	r1, [r0, #12]
 800fb8a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fb8c:	81c2      	strh	r2, [r0, #14]
 800fb8e:	6183      	str	r3, [r0, #24]
 800fb90:	4619      	mov	r1, r3
 800fb92:	2208      	movs	r2, #8
 800fb94:	305c      	adds	r0, #92	@ 0x5c
 800fb96:	f000 f97a 	bl	800fe8e <memset>
 800fb9a:	4b0d      	ldr	r3, [pc, #52]	@ (800fbd0 <std+0x58>)
 800fb9c:	6263      	str	r3, [r4, #36]	@ 0x24
 800fb9e:	4b0d      	ldr	r3, [pc, #52]	@ (800fbd4 <std+0x5c>)
 800fba0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fba2:	4b0d      	ldr	r3, [pc, #52]	@ (800fbd8 <std+0x60>)
 800fba4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fba6:	4b0d      	ldr	r3, [pc, #52]	@ (800fbdc <std+0x64>)
 800fba8:	6323      	str	r3, [r4, #48]	@ 0x30
 800fbaa:	4b0d      	ldr	r3, [pc, #52]	@ (800fbe0 <std+0x68>)
 800fbac:	6224      	str	r4, [r4, #32]
 800fbae:	429c      	cmp	r4, r3
 800fbb0:	d006      	beq.n	800fbc0 <std+0x48>
 800fbb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fbb6:	4294      	cmp	r4, r2
 800fbb8:	d002      	beq.n	800fbc0 <std+0x48>
 800fbba:	33d0      	adds	r3, #208	@ 0xd0
 800fbbc:	429c      	cmp	r4, r3
 800fbbe:	d105      	bne.n	800fbcc <std+0x54>
 800fbc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fbc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbc8:	f000 ba82 	b.w	80100d0 <__retarget_lock_init_recursive>
 800fbcc:	bd10      	pop	{r4, pc}
 800fbce:	bf00      	nop
 800fbd0:	0800fe05 	.word	0x0800fe05
 800fbd4:	0800fe2b 	.word	0x0800fe2b
 800fbd8:	0800fe63 	.word	0x0800fe63
 800fbdc:	0800fe87 	.word	0x0800fe87
 800fbe0:	2001a5d8 	.word	0x2001a5d8

0800fbe4 <stdio_exit_handler>:
 800fbe4:	4a02      	ldr	r2, [pc, #8]	@ (800fbf0 <stdio_exit_handler+0xc>)
 800fbe6:	4903      	ldr	r1, [pc, #12]	@ (800fbf4 <stdio_exit_handler+0x10>)
 800fbe8:	4803      	ldr	r0, [pc, #12]	@ (800fbf8 <stdio_exit_handler+0x14>)
 800fbea:	f000 b869 	b.w	800fcc0 <_fwalk_sglue>
 800fbee:	bf00      	nop
 800fbf0:	20000108 	.word	0x20000108
 800fbf4:	080129f9 	.word	0x080129f9
 800fbf8:	20000284 	.word	0x20000284

0800fbfc <cleanup_stdio>:
 800fbfc:	6841      	ldr	r1, [r0, #4]
 800fbfe:	4b0c      	ldr	r3, [pc, #48]	@ (800fc30 <cleanup_stdio+0x34>)
 800fc00:	4299      	cmp	r1, r3
 800fc02:	b510      	push	{r4, lr}
 800fc04:	4604      	mov	r4, r0
 800fc06:	d001      	beq.n	800fc0c <cleanup_stdio+0x10>
 800fc08:	f002 fef6 	bl	80129f8 <_fflush_r>
 800fc0c:	68a1      	ldr	r1, [r4, #8]
 800fc0e:	4b09      	ldr	r3, [pc, #36]	@ (800fc34 <cleanup_stdio+0x38>)
 800fc10:	4299      	cmp	r1, r3
 800fc12:	d002      	beq.n	800fc1a <cleanup_stdio+0x1e>
 800fc14:	4620      	mov	r0, r4
 800fc16:	f002 feef 	bl	80129f8 <_fflush_r>
 800fc1a:	68e1      	ldr	r1, [r4, #12]
 800fc1c:	4b06      	ldr	r3, [pc, #24]	@ (800fc38 <cleanup_stdio+0x3c>)
 800fc1e:	4299      	cmp	r1, r3
 800fc20:	d004      	beq.n	800fc2c <cleanup_stdio+0x30>
 800fc22:	4620      	mov	r0, r4
 800fc24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc28:	f002 bee6 	b.w	80129f8 <_fflush_r>
 800fc2c:	bd10      	pop	{r4, pc}
 800fc2e:	bf00      	nop
 800fc30:	2001a5d8 	.word	0x2001a5d8
 800fc34:	2001a640 	.word	0x2001a640
 800fc38:	2001a6a8 	.word	0x2001a6a8

0800fc3c <global_stdio_init.part.0>:
 800fc3c:	b510      	push	{r4, lr}
 800fc3e:	4b0b      	ldr	r3, [pc, #44]	@ (800fc6c <global_stdio_init.part.0+0x30>)
 800fc40:	4c0b      	ldr	r4, [pc, #44]	@ (800fc70 <global_stdio_init.part.0+0x34>)
 800fc42:	4a0c      	ldr	r2, [pc, #48]	@ (800fc74 <global_stdio_init.part.0+0x38>)
 800fc44:	601a      	str	r2, [r3, #0]
 800fc46:	4620      	mov	r0, r4
 800fc48:	2200      	movs	r2, #0
 800fc4a:	2104      	movs	r1, #4
 800fc4c:	f7ff ff94 	bl	800fb78 <std>
 800fc50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fc54:	2201      	movs	r2, #1
 800fc56:	2109      	movs	r1, #9
 800fc58:	f7ff ff8e 	bl	800fb78 <std>
 800fc5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fc60:	2202      	movs	r2, #2
 800fc62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc66:	2112      	movs	r1, #18
 800fc68:	f7ff bf86 	b.w	800fb78 <std>
 800fc6c:	2001a710 	.word	0x2001a710
 800fc70:	2001a5d8 	.word	0x2001a5d8
 800fc74:	0800fbe5 	.word	0x0800fbe5

0800fc78 <__sfp_lock_acquire>:
 800fc78:	4801      	ldr	r0, [pc, #4]	@ (800fc80 <__sfp_lock_acquire+0x8>)
 800fc7a:	f000 ba2a 	b.w	80100d2 <__retarget_lock_acquire_recursive>
 800fc7e:	bf00      	nop
 800fc80:	2001a719 	.word	0x2001a719

0800fc84 <__sfp_lock_release>:
 800fc84:	4801      	ldr	r0, [pc, #4]	@ (800fc8c <__sfp_lock_release+0x8>)
 800fc86:	f000 ba25 	b.w	80100d4 <__retarget_lock_release_recursive>
 800fc8a:	bf00      	nop
 800fc8c:	2001a719 	.word	0x2001a719

0800fc90 <__sinit>:
 800fc90:	b510      	push	{r4, lr}
 800fc92:	4604      	mov	r4, r0
 800fc94:	f7ff fff0 	bl	800fc78 <__sfp_lock_acquire>
 800fc98:	6a23      	ldr	r3, [r4, #32]
 800fc9a:	b11b      	cbz	r3, 800fca4 <__sinit+0x14>
 800fc9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fca0:	f7ff bff0 	b.w	800fc84 <__sfp_lock_release>
 800fca4:	4b04      	ldr	r3, [pc, #16]	@ (800fcb8 <__sinit+0x28>)
 800fca6:	6223      	str	r3, [r4, #32]
 800fca8:	4b04      	ldr	r3, [pc, #16]	@ (800fcbc <__sinit+0x2c>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d1f5      	bne.n	800fc9c <__sinit+0xc>
 800fcb0:	f7ff ffc4 	bl	800fc3c <global_stdio_init.part.0>
 800fcb4:	e7f2      	b.n	800fc9c <__sinit+0xc>
 800fcb6:	bf00      	nop
 800fcb8:	0800fbfd 	.word	0x0800fbfd
 800fcbc:	2001a710 	.word	0x2001a710

0800fcc0 <_fwalk_sglue>:
 800fcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcc4:	4607      	mov	r7, r0
 800fcc6:	4688      	mov	r8, r1
 800fcc8:	4614      	mov	r4, r2
 800fcca:	2600      	movs	r6, #0
 800fccc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fcd0:	f1b9 0901 	subs.w	r9, r9, #1
 800fcd4:	d505      	bpl.n	800fce2 <_fwalk_sglue+0x22>
 800fcd6:	6824      	ldr	r4, [r4, #0]
 800fcd8:	2c00      	cmp	r4, #0
 800fcda:	d1f7      	bne.n	800fccc <_fwalk_sglue+0xc>
 800fcdc:	4630      	mov	r0, r6
 800fcde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fce2:	89ab      	ldrh	r3, [r5, #12]
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d907      	bls.n	800fcf8 <_fwalk_sglue+0x38>
 800fce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fcec:	3301      	adds	r3, #1
 800fcee:	d003      	beq.n	800fcf8 <_fwalk_sglue+0x38>
 800fcf0:	4629      	mov	r1, r5
 800fcf2:	4638      	mov	r0, r7
 800fcf4:	47c0      	blx	r8
 800fcf6:	4306      	orrs	r6, r0
 800fcf8:	3568      	adds	r5, #104	@ 0x68
 800fcfa:	e7e9      	b.n	800fcd0 <_fwalk_sglue+0x10>

0800fcfc <sniprintf>:
 800fcfc:	b40c      	push	{r2, r3}
 800fcfe:	b530      	push	{r4, r5, lr}
 800fd00:	4b18      	ldr	r3, [pc, #96]	@ (800fd64 <sniprintf+0x68>)
 800fd02:	1e0c      	subs	r4, r1, #0
 800fd04:	681d      	ldr	r5, [r3, #0]
 800fd06:	b09d      	sub	sp, #116	@ 0x74
 800fd08:	da08      	bge.n	800fd1c <sniprintf+0x20>
 800fd0a:	238b      	movs	r3, #139	@ 0x8b
 800fd0c:	602b      	str	r3, [r5, #0]
 800fd0e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd12:	b01d      	add	sp, #116	@ 0x74
 800fd14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd18:	b002      	add	sp, #8
 800fd1a:	4770      	bx	lr
 800fd1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fd20:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fd24:	f04f 0300 	mov.w	r3, #0
 800fd28:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fd2a:	bf14      	ite	ne
 800fd2c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fd30:	4623      	moveq	r3, r4
 800fd32:	9304      	str	r3, [sp, #16]
 800fd34:	9307      	str	r3, [sp, #28]
 800fd36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd3a:	9002      	str	r0, [sp, #8]
 800fd3c:	9006      	str	r0, [sp, #24]
 800fd3e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd42:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fd44:	ab21      	add	r3, sp, #132	@ 0x84
 800fd46:	a902      	add	r1, sp, #8
 800fd48:	4628      	mov	r0, r5
 800fd4a:	9301      	str	r3, [sp, #4]
 800fd4c:	f002 f9b6 	bl	80120bc <_svfiprintf_r>
 800fd50:	1c43      	adds	r3, r0, #1
 800fd52:	bfbc      	itt	lt
 800fd54:	238b      	movlt	r3, #139	@ 0x8b
 800fd56:	602b      	strlt	r3, [r5, #0]
 800fd58:	2c00      	cmp	r4, #0
 800fd5a:	d0da      	beq.n	800fd12 <sniprintf+0x16>
 800fd5c:	9b02      	ldr	r3, [sp, #8]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	701a      	strb	r2, [r3, #0]
 800fd62:	e7d6      	b.n	800fd12 <sniprintf+0x16>
 800fd64:	20000280 	.word	0x20000280

0800fd68 <siprintf>:
 800fd68:	b40e      	push	{r1, r2, r3}
 800fd6a:	b510      	push	{r4, lr}
 800fd6c:	b09d      	sub	sp, #116	@ 0x74
 800fd6e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fd70:	9002      	str	r0, [sp, #8]
 800fd72:	9006      	str	r0, [sp, #24]
 800fd74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fd78:	480a      	ldr	r0, [pc, #40]	@ (800fda4 <siprintf+0x3c>)
 800fd7a:	9107      	str	r1, [sp, #28]
 800fd7c:	9104      	str	r1, [sp, #16]
 800fd7e:	490a      	ldr	r1, [pc, #40]	@ (800fda8 <siprintf+0x40>)
 800fd80:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd84:	9105      	str	r1, [sp, #20]
 800fd86:	2400      	movs	r4, #0
 800fd88:	a902      	add	r1, sp, #8
 800fd8a:	6800      	ldr	r0, [r0, #0]
 800fd8c:	9301      	str	r3, [sp, #4]
 800fd8e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fd90:	f002 f994 	bl	80120bc <_svfiprintf_r>
 800fd94:	9b02      	ldr	r3, [sp, #8]
 800fd96:	701c      	strb	r4, [r3, #0]
 800fd98:	b01d      	add	sp, #116	@ 0x74
 800fd9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd9e:	b003      	add	sp, #12
 800fda0:	4770      	bx	lr
 800fda2:	bf00      	nop
 800fda4:	20000280 	.word	0x20000280
 800fda8:	ffff0208 	.word	0xffff0208

0800fdac <siscanf>:
 800fdac:	b40e      	push	{r1, r2, r3}
 800fdae:	b570      	push	{r4, r5, r6, lr}
 800fdb0:	b09d      	sub	sp, #116	@ 0x74
 800fdb2:	ac21      	add	r4, sp, #132	@ 0x84
 800fdb4:	2500      	movs	r5, #0
 800fdb6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800fdba:	f854 6b04 	ldr.w	r6, [r4], #4
 800fdbe:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fdc2:	951b      	str	r5, [sp, #108]	@ 0x6c
 800fdc4:	9002      	str	r0, [sp, #8]
 800fdc6:	9006      	str	r0, [sp, #24]
 800fdc8:	f7f0 fa62 	bl	8000290 <strlen>
 800fdcc:	4b0b      	ldr	r3, [pc, #44]	@ (800fdfc <siscanf+0x50>)
 800fdce:	9003      	str	r0, [sp, #12]
 800fdd0:	9007      	str	r0, [sp, #28]
 800fdd2:	480b      	ldr	r0, [pc, #44]	@ (800fe00 <siscanf+0x54>)
 800fdd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fdd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fdda:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fdde:	4632      	mov	r2, r6
 800fde0:	4623      	mov	r3, r4
 800fde2:	a902      	add	r1, sp, #8
 800fde4:	6800      	ldr	r0, [r0, #0]
 800fde6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800fde8:	9514      	str	r5, [sp, #80]	@ 0x50
 800fdea:	9401      	str	r4, [sp, #4]
 800fdec:	f002 fabc 	bl	8012368 <__ssvfiscanf_r>
 800fdf0:	b01d      	add	sp, #116	@ 0x74
 800fdf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdf6:	b003      	add	sp, #12
 800fdf8:	4770      	bx	lr
 800fdfa:	bf00      	nop
 800fdfc:	0800fe27 	.word	0x0800fe27
 800fe00:	20000280 	.word	0x20000280

0800fe04 <__sread>:
 800fe04:	b510      	push	{r4, lr}
 800fe06:	460c      	mov	r4, r1
 800fe08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe0c:	f000 f912 	bl	8010034 <_read_r>
 800fe10:	2800      	cmp	r0, #0
 800fe12:	bfab      	itete	ge
 800fe14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fe16:	89a3      	ldrhlt	r3, [r4, #12]
 800fe18:	181b      	addge	r3, r3, r0
 800fe1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fe1e:	bfac      	ite	ge
 800fe20:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fe22:	81a3      	strhlt	r3, [r4, #12]
 800fe24:	bd10      	pop	{r4, pc}

0800fe26 <__seofread>:
 800fe26:	2000      	movs	r0, #0
 800fe28:	4770      	bx	lr

0800fe2a <__swrite>:
 800fe2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe2e:	461f      	mov	r7, r3
 800fe30:	898b      	ldrh	r3, [r1, #12]
 800fe32:	05db      	lsls	r3, r3, #23
 800fe34:	4605      	mov	r5, r0
 800fe36:	460c      	mov	r4, r1
 800fe38:	4616      	mov	r6, r2
 800fe3a:	d505      	bpl.n	800fe48 <__swrite+0x1e>
 800fe3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe40:	2302      	movs	r3, #2
 800fe42:	2200      	movs	r2, #0
 800fe44:	f000 f8e4 	bl	8010010 <_lseek_r>
 800fe48:	89a3      	ldrh	r3, [r4, #12]
 800fe4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fe52:	81a3      	strh	r3, [r4, #12]
 800fe54:	4632      	mov	r2, r6
 800fe56:	463b      	mov	r3, r7
 800fe58:	4628      	mov	r0, r5
 800fe5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe5e:	f000 b8fb 	b.w	8010058 <_write_r>

0800fe62 <__sseek>:
 800fe62:	b510      	push	{r4, lr}
 800fe64:	460c      	mov	r4, r1
 800fe66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe6a:	f000 f8d1 	bl	8010010 <_lseek_r>
 800fe6e:	1c43      	adds	r3, r0, #1
 800fe70:	89a3      	ldrh	r3, [r4, #12]
 800fe72:	bf15      	itete	ne
 800fe74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fe76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fe7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fe7e:	81a3      	strheq	r3, [r4, #12]
 800fe80:	bf18      	it	ne
 800fe82:	81a3      	strhne	r3, [r4, #12]
 800fe84:	bd10      	pop	{r4, pc}

0800fe86 <__sclose>:
 800fe86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe8a:	f000 b8b1 	b.w	800fff0 <_close_r>

0800fe8e <memset>:
 800fe8e:	4402      	add	r2, r0
 800fe90:	4603      	mov	r3, r0
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d100      	bne.n	800fe98 <memset+0xa>
 800fe96:	4770      	bx	lr
 800fe98:	f803 1b01 	strb.w	r1, [r3], #1
 800fe9c:	e7f9      	b.n	800fe92 <memset+0x4>

0800fe9e <strchr>:
 800fe9e:	b2c9      	uxtb	r1, r1
 800fea0:	4603      	mov	r3, r0
 800fea2:	4618      	mov	r0, r3
 800fea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fea8:	b112      	cbz	r2, 800feb0 <strchr+0x12>
 800feaa:	428a      	cmp	r2, r1
 800feac:	d1f9      	bne.n	800fea2 <strchr+0x4>
 800feae:	4770      	bx	lr
 800feb0:	2900      	cmp	r1, #0
 800feb2:	bf18      	it	ne
 800feb4:	2000      	movne	r0, #0
 800feb6:	4770      	bx	lr

0800feb8 <strncmp>:
 800feb8:	b510      	push	{r4, lr}
 800feba:	b16a      	cbz	r2, 800fed8 <strncmp+0x20>
 800febc:	3901      	subs	r1, #1
 800febe:	1884      	adds	r4, r0, r2
 800fec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fec4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fec8:	429a      	cmp	r2, r3
 800feca:	d103      	bne.n	800fed4 <strncmp+0x1c>
 800fecc:	42a0      	cmp	r0, r4
 800fece:	d001      	beq.n	800fed4 <strncmp+0x1c>
 800fed0:	2a00      	cmp	r2, #0
 800fed2:	d1f5      	bne.n	800fec0 <strncmp+0x8>
 800fed4:	1ad0      	subs	r0, r2, r3
 800fed6:	bd10      	pop	{r4, pc}
 800fed8:	4610      	mov	r0, r2
 800feda:	e7fc      	b.n	800fed6 <strncmp+0x1e>

0800fedc <strncpy>:
 800fedc:	b510      	push	{r4, lr}
 800fede:	3901      	subs	r1, #1
 800fee0:	4603      	mov	r3, r0
 800fee2:	b132      	cbz	r2, 800fef2 <strncpy+0x16>
 800fee4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fee8:	f803 4b01 	strb.w	r4, [r3], #1
 800feec:	3a01      	subs	r2, #1
 800feee:	2c00      	cmp	r4, #0
 800fef0:	d1f7      	bne.n	800fee2 <strncpy+0x6>
 800fef2:	441a      	add	r2, r3
 800fef4:	2100      	movs	r1, #0
 800fef6:	4293      	cmp	r3, r2
 800fef8:	d100      	bne.n	800fefc <strncpy+0x20>
 800fefa:	bd10      	pop	{r4, pc}
 800fefc:	f803 1b01 	strb.w	r1, [r3], #1
 800ff00:	e7f9      	b.n	800fef6 <strncpy+0x1a>
	...

0800ff04 <strtok>:
 800ff04:	4b16      	ldr	r3, [pc, #88]	@ (800ff60 <strtok+0x5c>)
 800ff06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff0a:	681f      	ldr	r7, [r3, #0]
 800ff0c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ff0e:	4605      	mov	r5, r0
 800ff10:	460e      	mov	r6, r1
 800ff12:	b9ec      	cbnz	r4, 800ff50 <strtok+0x4c>
 800ff14:	2050      	movs	r0, #80	@ 0x50
 800ff16:	f001 faf7 	bl	8011508 <malloc>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ff1e:	b920      	cbnz	r0, 800ff2a <strtok+0x26>
 800ff20:	4b10      	ldr	r3, [pc, #64]	@ (800ff64 <strtok+0x60>)
 800ff22:	4811      	ldr	r0, [pc, #68]	@ (800ff68 <strtok+0x64>)
 800ff24:	215b      	movs	r1, #91	@ 0x5b
 800ff26:	f000 f8f5 	bl	8010114 <__assert_func>
 800ff2a:	e9c0 4400 	strd	r4, r4, [r0]
 800ff2e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ff32:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ff36:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ff3a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ff3e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ff42:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ff46:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ff4a:	6184      	str	r4, [r0, #24]
 800ff4c:	7704      	strb	r4, [r0, #28]
 800ff4e:	6244      	str	r4, [r0, #36]	@ 0x24
 800ff50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ff52:	4631      	mov	r1, r6
 800ff54:	4628      	mov	r0, r5
 800ff56:	2301      	movs	r3, #1
 800ff58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff5c:	f000 b806 	b.w	800ff6c <__strtok_r>
 800ff60:	20000280 	.word	0x20000280
 800ff64:	0806d518 	.word	0x0806d518
 800ff68:	0806d5c0 	.word	0x0806d5c0

0800ff6c <__strtok_r>:
 800ff6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff6e:	4604      	mov	r4, r0
 800ff70:	b908      	cbnz	r0, 800ff76 <__strtok_r+0xa>
 800ff72:	6814      	ldr	r4, [r2, #0]
 800ff74:	b144      	cbz	r4, 800ff88 <__strtok_r+0x1c>
 800ff76:	4620      	mov	r0, r4
 800ff78:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ff7c:	460f      	mov	r7, r1
 800ff7e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ff82:	b91e      	cbnz	r6, 800ff8c <__strtok_r+0x20>
 800ff84:	b965      	cbnz	r5, 800ffa0 <__strtok_r+0x34>
 800ff86:	6015      	str	r5, [r2, #0]
 800ff88:	2000      	movs	r0, #0
 800ff8a:	e005      	b.n	800ff98 <__strtok_r+0x2c>
 800ff8c:	42b5      	cmp	r5, r6
 800ff8e:	d1f6      	bne.n	800ff7e <__strtok_r+0x12>
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d1f0      	bne.n	800ff76 <__strtok_r+0xa>
 800ff94:	6014      	str	r4, [r2, #0]
 800ff96:	7003      	strb	r3, [r0, #0]
 800ff98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff9a:	461c      	mov	r4, r3
 800ff9c:	e00c      	b.n	800ffb8 <__strtok_r+0x4c>
 800ff9e:	b91d      	cbnz	r5, 800ffa8 <__strtok_r+0x3c>
 800ffa0:	4627      	mov	r7, r4
 800ffa2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ffa6:	460e      	mov	r6, r1
 800ffa8:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ffac:	42ab      	cmp	r3, r5
 800ffae:	d1f6      	bne.n	800ff9e <__strtok_r+0x32>
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d0f2      	beq.n	800ff9a <__strtok_r+0x2e>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	703b      	strb	r3, [r7, #0]
 800ffb8:	6014      	str	r4, [r2, #0]
 800ffba:	e7ed      	b.n	800ff98 <__strtok_r+0x2c>

0800ffbc <strstr>:
 800ffbc:	780a      	ldrb	r2, [r1, #0]
 800ffbe:	b570      	push	{r4, r5, r6, lr}
 800ffc0:	b96a      	cbnz	r2, 800ffde <strstr+0x22>
 800ffc2:	bd70      	pop	{r4, r5, r6, pc}
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d109      	bne.n	800ffdc <strstr+0x20>
 800ffc8:	460c      	mov	r4, r1
 800ffca:	4605      	mov	r5, r0
 800ffcc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d0f6      	beq.n	800ffc2 <strstr+0x6>
 800ffd4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ffd8:	429e      	cmp	r6, r3
 800ffda:	d0f7      	beq.n	800ffcc <strstr+0x10>
 800ffdc:	3001      	adds	r0, #1
 800ffde:	7803      	ldrb	r3, [r0, #0]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d1ef      	bne.n	800ffc4 <strstr+0x8>
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	e7ec      	b.n	800ffc2 <strstr+0x6>

0800ffe8 <_localeconv_r>:
 800ffe8:	4800      	ldr	r0, [pc, #0]	@ (800ffec <_localeconv_r+0x4>)
 800ffea:	4770      	bx	lr
 800ffec:	20000204 	.word	0x20000204

0800fff0 <_close_r>:
 800fff0:	b538      	push	{r3, r4, r5, lr}
 800fff2:	4d06      	ldr	r5, [pc, #24]	@ (801000c <_close_r+0x1c>)
 800fff4:	2300      	movs	r3, #0
 800fff6:	4604      	mov	r4, r0
 800fff8:	4608      	mov	r0, r1
 800fffa:	602b      	str	r3, [r5, #0]
 800fffc:	f7f3 fb82 	bl	8003704 <_close>
 8010000:	1c43      	adds	r3, r0, #1
 8010002:	d102      	bne.n	801000a <_close_r+0x1a>
 8010004:	682b      	ldr	r3, [r5, #0]
 8010006:	b103      	cbz	r3, 801000a <_close_r+0x1a>
 8010008:	6023      	str	r3, [r4, #0]
 801000a:	bd38      	pop	{r3, r4, r5, pc}
 801000c:	2001a714 	.word	0x2001a714

08010010 <_lseek_r>:
 8010010:	b538      	push	{r3, r4, r5, lr}
 8010012:	4d07      	ldr	r5, [pc, #28]	@ (8010030 <_lseek_r+0x20>)
 8010014:	4604      	mov	r4, r0
 8010016:	4608      	mov	r0, r1
 8010018:	4611      	mov	r1, r2
 801001a:	2200      	movs	r2, #0
 801001c:	602a      	str	r2, [r5, #0]
 801001e:	461a      	mov	r2, r3
 8010020:	f7f3 fb97 	bl	8003752 <_lseek>
 8010024:	1c43      	adds	r3, r0, #1
 8010026:	d102      	bne.n	801002e <_lseek_r+0x1e>
 8010028:	682b      	ldr	r3, [r5, #0]
 801002a:	b103      	cbz	r3, 801002e <_lseek_r+0x1e>
 801002c:	6023      	str	r3, [r4, #0]
 801002e:	bd38      	pop	{r3, r4, r5, pc}
 8010030:	2001a714 	.word	0x2001a714

08010034 <_read_r>:
 8010034:	b538      	push	{r3, r4, r5, lr}
 8010036:	4d07      	ldr	r5, [pc, #28]	@ (8010054 <_read_r+0x20>)
 8010038:	4604      	mov	r4, r0
 801003a:	4608      	mov	r0, r1
 801003c:	4611      	mov	r1, r2
 801003e:	2200      	movs	r2, #0
 8010040:	602a      	str	r2, [r5, #0]
 8010042:	461a      	mov	r2, r3
 8010044:	f7f3 fb25 	bl	8003692 <_read>
 8010048:	1c43      	adds	r3, r0, #1
 801004a:	d102      	bne.n	8010052 <_read_r+0x1e>
 801004c:	682b      	ldr	r3, [r5, #0]
 801004e:	b103      	cbz	r3, 8010052 <_read_r+0x1e>
 8010050:	6023      	str	r3, [r4, #0]
 8010052:	bd38      	pop	{r3, r4, r5, pc}
 8010054:	2001a714 	.word	0x2001a714

08010058 <_write_r>:
 8010058:	b538      	push	{r3, r4, r5, lr}
 801005a:	4d07      	ldr	r5, [pc, #28]	@ (8010078 <_write_r+0x20>)
 801005c:	4604      	mov	r4, r0
 801005e:	4608      	mov	r0, r1
 8010060:	4611      	mov	r1, r2
 8010062:	2200      	movs	r2, #0
 8010064:	602a      	str	r2, [r5, #0]
 8010066:	461a      	mov	r2, r3
 8010068:	f7f3 fb30 	bl	80036cc <_write>
 801006c:	1c43      	adds	r3, r0, #1
 801006e:	d102      	bne.n	8010076 <_write_r+0x1e>
 8010070:	682b      	ldr	r3, [r5, #0]
 8010072:	b103      	cbz	r3, 8010076 <_write_r+0x1e>
 8010074:	6023      	str	r3, [r4, #0]
 8010076:	bd38      	pop	{r3, r4, r5, pc}
 8010078:	2001a714 	.word	0x2001a714

0801007c <__errno>:
 801007c:	4b01      	ldr	r3, [pc, #4]	@ (8010084 <__errno+0x8>)
 801007e:	6818      	ldr	r0, [r3, #0]
 8010080:	4770      	bx	lr
 8010082:	bf00      	nop
 8010084:	20000280 	.word	0x20000280

08010088 <__libc_init_array>:
 8010088:	b570      	push	{r4, r5, r6, lr}
 801008a:	4d0d      	ldr	r5, [pc, #52]	@ (80100c0 <__libc_init_array+0x38>)
 801008c:	4c0d      	ldr	r4, [pc, #52]	@ (80100c4 <__libc_init_array+0x3c>)
 801008e:	1b64      	subs	r4, r4, r5
 8010090:	10a4      	asrs	r4, r4, #2
 8010092:	2600      	movs	r6, #0
 8010094:	42a6      	cmp	r6, r4
 8010096:	d109      	bne.n	80100ac <__libc_init_array+0x24>
 8010098:	4d0b      	ldr	r5, [pc, #44]	@ (80100c8 <__libc_init_array+0x40>)
 801009a:	4c0c      	ldr	r4, [pc, #48]	@ (80100cc <__libc_init_array+0x44>)
 801009c:	f003 f906 	bl	80132ac <_init>
 80100a0:	1b64      	subs	r4, r4, r5
 80100a2:	10a4      	asrs	r4, r4, #2
 80100a4:	2600      	movs	r6, #0
 80100a6:	42a6      	cmp	r6, r4
 80100a8:	d105      	bne.n	80100b6 <__libc_init_array+0x2e>
 80100aa:	bd70      	pop	{r4, r5, r6, pc}
 80100ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80100b0:	4798      	blx	r3
 80100b2:	3601      	adds	r6, #1
 80100b4:	e7ee      	b.n	8010094 <__libc_init_array+0xc>
 80100b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80100ba:	4798      	blx	r3
 80100bc:	3601      	adds	r6, #1
 80100be:	e7f2      	b.n	80100a6 <__libc_init_array+0x1e>
 80100c0:	0806da18 	.word	0x0806da18
 80100c4:	0806da18 	.word	0x0806da18
 80100c8:	0806da18 	.word	0x0806da18
 80100cc:	0806da1c 	.word	0x0806da1c

080100d0 <__retarget_lock_init_recursive>:
 80100d0:	4770      	bx	lr

080100d2 <__retarget_lock_acquire_recursive>:
 80100d2:	4770      	bx	lr

080100d4 <__retarget_lock_release_recursive>:
 80100d4:	4770      	bx	lr

080100d6 <memcpy>:
 80100d6:	440a      	add	r2, r1
 80100d8:	4291      	cmp	r1, r2
 80100da:	f100 33ff 	add.w	r3, r0, #4294967295
 80100de:	d100      	bne.n	80100e2 <memcpy+0xc>
 80100e0:	4770      	bx	lr
 80100e2:	b510      	push	{r4, lr}
 80100e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100ec:	4291      	cmp	r1, r2
 80100ee:	d1f9      	bne.n	80100e4 <memcpy+0xe>
 80100f0:	bd10      	pop	{r4, pc}
 80100f2:	0000      	movs	r0, r0
 80100f4:	0000      	movs	r0, r0
	...

080100f8 <nan>:
 80100f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010100 <nan+0x8>
 80100fc:	4770      	bx	lr
 80100fe:	bf00      	nop
 8010100:	00000000 	.word	0x00000000
 8010104:	7ff80000 	.word	0x7ff80000

08010108 <nanf>:
 8010108:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010110 <nanf+0x8>
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	7fc00000 	.word	0x7fc00000

08010114 <__assert_func>:
 8010114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010116:	4614      	mov	r4, r2
 8010118:	461a      	mov	r2, r3
 801011a:	4b09      	ldr	r3, [pc, #36]	@ (8010140 <__assert_func+0x2c>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	4605      	mov	r5, r0
 8010120:	68d8      	ldr	r0, [r3, #12]
 8010122:	b14c      	cbz	r4, 8010138 <__assert_func+0x24>
 8010124:	4b07      	ldr	r3, [pc, #28]	@ (8010144 <__assert_func+0x30>)
 8010126:	9100      	str	r1, [sp, #0]
 8010128:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801012c:	4906      	ldr	r1, [pc, #24]	@ (8010148 <__assert_func+0x34>)
 801012e:	462b      	mov	r3, r5
 8010130:	f002 fc8a 	bl	8012a48 <fiprintf>
 8010134:	f002 fd38 	bl	8012ba8 <abort>
 8010138:	4b04      	ldr	r3, [pc, #16]	@ (801014c <__assert_func+0x38>)
 801013a:	461c      	mov	r4, r3
 801013c:	e7f3      	b.n	8010126 <__assert_func+0x12>
 801013e:	bf00      	nop
 8010140:	20000280 	.word	0x20000280
 8010144:	0806d622 	.word	0x0806d622
 8010148:	0806d62f 	.word	0x0806d62f
 801014c:	0806d65d 	.word	0x0806d65d

08010150 <quorem>:
 8010150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010154:	6903      	ldr	r3, [r0, #16]
 8010156:	690c      	ldr	r4, [r1, #16]
 8010158:	42a3      	cmp	r3, r4
 801015a:	4607      	mov	r7, r0
 801015c:	db7e      	blt.n	801025c <quorem+0x10c>
 801015e:	3c01      	subs	r4, #1
 8010160:	f101 0814 	add.w	r8, r1, #20
 8010164:	00a3      	lsls	r3, r4, #2
 8010166:	f100 0514 	add.w	r5, r0, #20
 801016a:	9300      	str	r3, [sp, #0]
 801016c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010170:	9301      	str	r3, [sp, #4]
 8010172:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801017a:	3301      	adds	r3, #1
 801017c:	429a      	cmp	r2, r3
 801017e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010182:	fbb2 f6f3 	udiv	r6, r2, r3
 8010186:	d32e      	bcc.n	80101e6 <quorem+0x96>
 8010188:	f04f 0a00 	mov.w	sl, #0
 801018c:	46c4      	mov	ip, r8
 801018e:	46ae      	mov	lr, r5
 8010190:	46d3      	mov	fp, sl
 8010192:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010196:	b298      	uxth	r0, r3
 8010198:	fb06 a000 	mla	r0, r6, r0, sl
 801019c:	0c02      	lsrs	r2, r0, #16
 801019e:	0c1b      	lsrs	r3, r3, #16
 80101a0:	fb06 2303 	mla	r3, r6, r3, r2
 80101a4:	f8de 2000 	ldr.w	r2, [lr]
 80101a8:	b280      	uxth	r0, r0
 80101aa:	b292      	uxth	r2, r2
 80101ac:	1a12      	subs	r2, r2, r0
 80101ae:	445a      	add	r2, fp
 80101b0:	f8de 0000 	ldr.w	r0, [lr]
 80101b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80101be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80101c2:	b292      	uxth	r2, r2
 80101c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80101c8:	45e1      	cmp	r9, ip
 80101ca:	f84e 2b04 	str.w	r2, [lr], #4
 80101ce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80101d2:	d2de      	bcs.n	8010192 <quorem+0x42>
 80101d4:	9b00      	ldr	r3, [sp, #0]
 80101d6:	58eb      	ldr	r3, [r5, r3]
 80101d8:	b92b      	cbnz	r3, 80101e6 <quorem+0x96>
 80101da:	9b01      	ldr	r3, [sp, #4]
 80101dc:	3b04      	subs	r3, #4
 80101de:	429d      	cmp	r5, r3
 80101e0:	461a      	mov	r2, r3
 80101e2:	d32f      	bcc.n	8010244 <quorem+0xf4>
 80101e4:	613c      	str	r4, [r7, #16]
 80101e6:	4638      	mov	r0, r7
 80101e8:	f001 fd12 	bl	8011c10 <__mcmp>
 80101ec:	2800      	cmp	r0, #0
 80101ee:	db25      	blt.n	801023c <quorem+0xec>
 80101f0:	4629      	mov	r1, r5
 80101f2:	2000      	movs	r0, #0
 80101f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80101f8:	f8d1 c000 	ldr.w	ip, [r1]
 80101fc:	fa1f fe82 	uxth.w	lr, r2
 8010200:	fa1f f38c 	uxth.w	r3, ip
 8010204:	eba3 030e 	sub.w	r3, r3, lr
 8010208:	4403      	add	r3, r0
 801020a:	0c12      	lsrs	r2, r2, #16
 801020c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010210:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010214:	b29b      	uxth	r3, r3
 8010216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801021a:	45c1      	cmp	r9, r8
 801021c:	f841 3b04 	str.w	r3, [r1], #4
 8010220:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010224:	d2e6      	bcs.n	80101f4 <quorem+0xa4>
 8010226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801022a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801022e:	b922      	cbnz	r2, 801023a <quorem+0xea>
 8010230:	3b04      	subs	r3, #4
 8010232:	429d      	cmp	r5, r3
 8010234:	461a      	mov	r2, r3
 8010236:	d30b      	bcc.n	8010250 <quorem+0x100>
 8010238:	613c      	str	r4, [r7, #16]
 801023a:	3601      	adds	r6, #1
 801023c:	4630      	mov	r0, r6
 801023e:	b003      	add	sp, #12
 8010240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010244:	6812      	ldr	r2, [r2, #0]
 8010246:	3b04      	subs	r3, #4
 8010248:	2a00      	cmp	r2, #0
 801024a:	d1cb      	bne.n	80101e4 <quorem+0x94>
 801024c:	3c01      	subs	r4, #1
 801024e:	e7c6      	b.n	80101de <quorem+0x8e>
 8010250:	6812      	ldr	r2, [r2, #0]
 8010252:	3b04      	subs	r3, #4
 8010254:	2a00      	cmp	r2, #0
 8010256:	d1ef      	bne.n	8010238 <quorem+0xe8>
 8010258:	3c01      	subs	r4, #1
 801025a:	e7ea      	b.n	8010232 <quorem+0xe2>
 801025c:	2000      	movs	r0, #0
 801025e:	e7ee      	b.n	801023e <quorem+0xee>

08010260 <_dtoa_r>:
 8010260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010264:	69c7      	ldr	r7, [r0, #28]
 8010266:	b097      	sub	sp, #92	@ 0x5c
 8010268:	ed8d 0b04 	vstr	d0, [sp, #16]
 801026c:	ec55 4b10 	vmov	r4, r5, d0
 8010270:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010272:	9107      	str	r1, [sp, #28]
 8010274:	4681      	mov	r9, r0
 8010276:	920c      	str	r2, [sp, #48]	@ 0x30
 8010278:	9311      	str	r3, [sp, #68]	@ 0x44
 801027a:	b97f      	cbnz	r7, 801029c <_dtoa_r+0x3c>
 801027c:	2010      	movs	r0, #16
 801027e:	f001 f943 	bl	8011508 <malloc>
 8010282:	4602      	mov	r2, r0
 8010284:	f8c9 001c 	str.w	r0, [r9, #28]
 8010288:	b920      	cbnz	r0, 8010294 <_dtoa_r+0x34>
 801028a:	4ba9      	ldr	r3, [pc, #676]	@ (8010530 <_dtoa_r+0x2d0>)
 801028c:	21ef      	movs	r1, #239	@ 0xef
 801028e:	48a9      	ldr	r0, [pc, #676]	@ (8010534 <_dtoa_r+0x2d4>)
 8010290:	f7ff ff40 	bl	8010114 <__assert_func>
 8010294:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010298:	6007      	str	r7, [r0, #0]
 801029a:	60c7      	str	r7, [r0, #12]
 801029c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80102a0:	6819      	ldr	r1, [r3, #0]
 80102a2:	b159      	cbz	r1, 80102bc <_dtoa_r+0x5c>
 80102a4:	685a      	ldr	r2, [r3, #4]
 80102a6:	604a      	str	r2, [r1, #4]
 80102a8:	2301      	movs	r3, #1
 80102aa:	4093      	lsls	r3, r2
 80102ac:	608b      	str	r3, [r1, #8]
 80102ae:	4648      	mov	r0, r9
 80102b0:	f001 fa32 	bl	8011718 <_Bfree>
 80102b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80102b8:	2200      	movs	r2, #0
 80102ba:	601a      	str	r2, [r3, #0]
 80102bc:	1e2b      	subs	r3, r5, #0
 80102be:	bfb9      	ittee	lt
 80102c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80102c4:	9305      	strlt	r3, [sp, #20]
 80102c6:	2300      	movge	r3, #0
 80102c8:	6033      	strge	r3, [r6, #0]
 80102ca:	9f05      	ldr	r7, [sp, #20]
 80102cc:	4b9a      	ldr	r3, [pc, #616]	@ (8010538 <_dtoa_r+0x2d8>)
 80102ce:	bfbc      	itt	lt
 80102d0:	2201      	movlt	r2, #1
 80102d2:	6032      	strlt	r2, [r6, #0]
 80102d4:	43bb      	bics	r3, r7
 80102d6:	d112      	bne.n	80102fe <_dtoa_r+0x9e>
 80102d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80102da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80102de:	6013      	str	r3, [r2, #0]
 80102e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80102e4:	4323      	orrs	r3, r4
 80102e6:	f000 855a 	beq.w	8010d9e <_dtoa_r+0xb3e>
 80102ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80102ec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801054c <_dtoa_r+0x2ec>
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	f000 855c 	beq.w	8010dae <_dtoa_r+0xb4e>
 80102f6:	f10a 0303 	add.w	r3, sl, #3
 80102fa:	f000 bd56 	b.w	8010daa <_dtoa_r+0xb4a>
 80102fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010302:	2200      	movs	r2, #0
 8010304:	ec51 0b17 	vmov	r0, r1, d7
 8010308:	2300      	movs	r3, #0
 801030a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801030e:	f7f0 fbeb 	bl	8000ae8 <__aeabi_dcmpeq>
 8010312:	4680      	mov	r8, r0
 8010314:	b158      	cbz	r0, 801032e <_dtoa_r+0xce>
 8010316:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010318:	2301      	movs	r3, #1
 801031a:	6013      	str	r3, [r2, #0]
 801031c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801031e:	b113      	cbz	r3, 8010326 <_dtoa_r+0xc6>
 8010320:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010322:	4b86      	ldr	r3, [pc, #536]	@ (801053c <_dtoa_r+0x2dc>)
 8010324:	6013      	str	r3, [r2, #0]
 8010326:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010550 <_dtoa_r+0x2f0>
 801032a:	f000 bd40 	b.w	8010dae <_dtoa_r+0xb4e>
 801032e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8010332:	aa14      	add	r2, sp, #80	@ 0x50
 8010334:	a915      	add	r1, sp, #84	@ 0x54
 8010336:	4648      	mov	r0, r9
 8010338:	f001 fd8a 	bl	8011e50 <__d2b>
 801033c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010340:	9002      	str	r0, [sp, #8]
 8010342:	2e00      	cmp	r6, #0
 8010344:	d078      	beq.n	8010438 <_dtoa_r+0x1d8>
 8010346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010348:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801034c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010350:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010354:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010358:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801035c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010360:	4619      	mov	r1, r3
 8010362:	2200      	movs	r2, #0
 8010364:	4b76      	ldr	r3, [pc, #472]	@ (8010540 <_dtoa_r+0x2e0>)
 8010366:	f7ef ff9f 	bl	80002a8 <__aeabi_dsub>
 801036a:	a36b      	add	r3, pc, #428	@ (adr r3, 8010518 <_dtoa_r+0x2b8>)
 801036c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010370:	f7f0 f952 	bl	8000618 <__aeabi_dmul>
 8010374:	a36a      	add	r3, pc, #424	@ (adr r3, 8010520 <_dtoa_r+0x2c0>)
 8010376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037a:	f7ef ff97 	bl	80002ac <__adddf3>
 801037e:	4604      	mov	r4, r0
 8010380:	4630      	mov	r0, r6
 8010382:	460d      	mov	r5, r1
 8010384:	f7f0 f8de 	bl	8000544 <__aeabi_i2d>
 8010388:	a367      	add	r3, pc, #412	@ (adr r3, 8010528 <_dtoa_r+0x2c8>)
 801038a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038e:	f7f0 f943 	bl	8000618 <__aeabi_dmul>
 8010392:	4602      	mov	r2, r0
 8010394:	460b      	mov	r3, r1
 8010396:	4620      	mov	r0, r4
 8010398:	4629      	mov	r1, r5
 801039a:	f7ef ff87 	bl	80002ac <__adddf3>
 801039e:	4604      	mov	r4, r0
 80103a0:	460d      	mov	r5, r1
 80103a2:	f7f0 fbe9 	bl	8000b78 <__aeabi_d2iz>
 80103a6:	2200      	movs	r2, #0
 80103a8:	4607      	mov	r7, r0
 80103aa:	2300      	movs	r3, #0
 80103ac:	4620      	mov	r0, r4
 80103ae:	4629      	mov	r1, r5
 80103b0:	f7f0 fba4 	bl	8000afc <__aeabi_dcmplt>
 80103b4:	b140      	cbz	r0, 80103c8 <_dtoa_r+0x168>
 80103b6:	4638      	mov	r0, r7
 80103b8:	f7f0 f8c4 	bl	8000544 <__aeabi_i2d>
 80103bc:	4622      	mov	r2, r4
 80103be:	462b      	mov	r3, r5
 80103c0:	f7f0 fb92 	bl	8000ae8 <__aeabi_dcmpeq>
 80103c4:	b900      	cbnz	r0, 80103c8 <_dtoa_r+0x168>
 80103c6:	3f01      	subs	r7, #1
 80103c8:	2f16      	cmp	r7, #22
 80103ca:	d852      	bhi.n	8010472 <_dtoa_r+0x212>
 80103cc:	4b5d      	ldr	r3, [pc, #372]	@ (8010544 <_dtoa_r+0x2e4>)
 80103ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80103d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80103da:	f7f0 fb8f 	bl	8000afc <__aeabi_dcmplt>
 80103de:	2800      	cmp	r0, #0
 80103e0:	d049      	beq.n	8010476 <_dtoa_r+0x216>
 80103e2:	3f01      	subs	r7, #1
 80103e4:	2300      	movs	r3, #0
 80103e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80103e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80103ea:	1b9b      	subs	r3, r3, r6
 80103ec:	1e5a      	subs	r2, r3, #1
 80103ee:	bf45      	ittet	mi
 80103f0:	f1c3 0301 	rsbmi	r3, r3, #1
 80103f4:	9300      	strmi	r3, [sp, #0]
 80103f6:	2300      	movpl	r3, #0
 80103f8:	2300      	movmi	r3, #0
 80103fa:	9206      	str	r2, [sp, #24]
 80103fc:	bf54      	ite	pl
 80103fe:	9300      	strpl	r3, [sp, #0]
 8010400:	9306      	strmi	r3, [sp, #24]
 8010402:	2f00      	cmp	r7, #0
 8010404:	db39      	blt.n	801047a <_dtoa_r+0x21a>
 8010406:	9b06      	ldr	r3, [sp, #24]
 8010408:	970d      	str	r7, [sp, #52]	@ 0x34
 801040a:	443b      	add	r3, r7
 801040c:	9306      	str	r3, [sp, #24]
 801040e:	2300      	movs	r3, #0
 8010410:	9308      	str	r3, [sp, #32]
 8010412:	9b07      	ldr	r3, [sp, #28]
 8010414:	2b09      	cmp	r3, #9
 8010416:	d863      	bhi.n	80104e0 <_dtoa_r+0x280>
 8010418:	2b05      	cmp	r3, #5
 801041a:	bfc4      	itt	gt
 801041c:	3b04      	subgt	r3, #4
 801041e:	9307      	strgt	r3, [sp, #28]
 8010420:	9b07      	ldr	r3, [sp, #28]
 8010422:	f1a3 0302 	sub.w	r3, r3, #2
 8010426:	bfcc      	ite	gt
 8010428:	2400      	movgt	r4, #0
 801042a:	2401      	movle	r4, #1
 801042c:	2b03      	cmp	r3, #3
 801042e:	d863      	bhi.n	80104f8 <_dtoa_r+0x298>
 8010430:	e8df f003 	tbb	[pc, r3]
 8010434:	2b375452 	.word	0x2b375452
 8010438:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801043c:	441e      	add	r6, r3
 801043e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010442:	2b20      	cmp	r3, #32
 8010444:	bfc1      	itttt	gt
 8010446:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801044a:	409f      	lslgt	r7, r3
 801044c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010450:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010454:	bfd6      	itet	le
 8010456:	f1c3 0320 	rsble	r3, r3, #32
 801045a:	ea47 0003 	orrgt.w	r0, r7, r3
 801045e:	fa04 f003 	lslle.w	r0, r4, r3
 8010462:	f7f0 f85f 	bl	8000524 <__aeabi_ui2d>
 8010466:	2201      	movs	r2, #1
 8010468:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801046c:	3e01      	subs	r6, #1
 801046e:	9212      	str	r2, [sp, #72]	@ 0x48
 8010470:	e776      	b.n	8010360 <_dtoa_r+0x100>
 8010472:	2301      	movs	r3, #1
 8010474:	e7b7      	b.n	80103e6 <_dtoa_r+0x186>
 8010476:	9010      	str	r0, [sp, #64]	@ 0x40
 8010478:	e7b6      	b.n	80103e8 <_dtoa_r+0x188>
 801047a:	9b00      	ldr	r3, [sp, #0]
 801047c:	1bdb      	subs	r3, r3, r7
 801047e:	9300      	str	r3, [sp, #0]
 8010480:	427b      	negs	r3, r7
 8010482:	9308      	str	r3, [sp, #32]
 8010484:	2300      	movs	r3, #0
 8010486:	930d      	str	r3, [sp, #52]	@ 0x34
 8010488:	e7c3      	b.n	8010412 <_dtoa_r+0x1b2>
 801048a:	2301      	movs	r3, #1
 801048c:	9309      	str	r3, [sp, #36]	@ 0x24
 801048e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010490:	eb07 0b03 	add.w	fp, r7, r3
 8010494:	f10b 0301 	add.w	r3, fp, #1
 8010498:	2b01      	cmp	r3, #1
 801049a:	9303      	str	r3, [sp, #12]
 801049c:	bfb8      	it	lt
 801049e:	2301      	movlt	r3, #1
 80104a0:	e006      	b.n	80104b0 <_dtoa_r+0x250>
 80104a2:	2301      	movs	r3, #1
 80104a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80104a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	dd28      	ble.n	80104fe <_dtoa_r+0x29e>
 80104ac:	469b      	mov	fp, r3
 80104ae:	9303      	str	r3, [sp, #12]
 80104b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80104b4:	2100      	movs	r1, #0
 80104b6:	2204      	movs	r2, #4
 80104b8:	f102 0514 	add.w	r5, r2, #20
 80104bc:	429d      	cmp	r5, r3
 80104be:	d926      	bls.n	801050e <_dtoa_r+0x2ae>
 80104c0:	6041      	str	r1, [r0, #4]
 80104c2:	4648      	mov	r0, r9
 80104c4:	f001 f8e8 	bl	8011698 <_Balloc>
 80104c8:	4682      	mov	sl, r0
 80104ca:	2800      	cmp	r0, #0
 80104cc:	d142      	bne.n	8010554 <_dtoa_r+0x2f4>
 80104ce:	4b1e      	ldr	r3, [pc, #120]	@ (8010548 <_dtoa_r+0x2e8>)
 80104d0:	4602      	mov	r2, r0
 80104d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80104d6:	e6da      	b.n	801028e <_dtoa_r+0x2e>
 80104d8:	2300      	movs	r3, #0
 80104da:	e7e3      	b.n	80104a4 <_dtoa_r+0x244>
 80104dc:	2300      	movs	r3, #0
 80104de:	e7d5      	b.n	801048c <_dtoa_r+0x22c>
 80104e0:	2401      	movs	r4, #1
 80104e2:	2300      	movs	r3, #0
 80104e4:	9307      	str	r3, [sp, #28]
 80104e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80104e8:	f04f 3bff 	mov.w	fp, #4294967295
 80104ec:	2200      	movs	r2, #0
 80104ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80104f2:	2312      	movs	r3, #18
 80104f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80104f6:	e7db      	b.n	80104b0 <_dtoa_r+0x250>
 80104f8:	2301      	movs	r3, #1
 80104fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80104fc:	e7f4      	b.n	80104e8 <_dtoa_r+0x288>
 80104fe:	f04f 0b01 	mov.w	fp, #1
 8010502:	f8cd b00c 	str.w	fp, [sp, #12]
 8010506:	465b      	mov	r3, fp
 8010508:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801050c:	e7d0      	b.n	80104b0 <_dtoa_r+0x250>
 801050e:	3101      	adds	r1, #1
 8010510:	0052      	lsls	r2, r2, #1
 8010512:	e7d1      	b.n	80104b8 <_dtoa_r+0x258>
 8010514:	f3af 8000 	nop.w
 8010518:	636f4361 	.word	0x636f4361
 801051c:	3fd287a7 	.word	0x3fd287a7
 8010520:	8b60c8b3 	.word	0x8b60c8b3
 8010524:	3fc68a28 	.word	0x3fc68a28
 8010528:	509f79fb 	.word	0x509f79fb
 801052c:	3fd34413 	.word	0x3fd34413
 8010530:	0806d518 	.word	0x0806d518
 8010534:	0806d66b 	.word	0x0806d66b
 8010538:	7ff00000 	.word	0x7ff00000
 801053c:	0806d7b5 	.word	0x0806d7b5
 8010540:	3ff80000 	.word	0x3ff80000
 8010544:	0806d948 	.word	0x0806d948
 8010548:	0806d6c3 	.word	0x0806d6c3
 801054c:	0806d667 	.word	0x0806d667
 8010550:	0806d7b4 	.word	0x0806d7b4
 8010554:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010558:	6018      	str	r0, [r3, #0]
 801055a:	9b03      	ldr	r3, [sp, #12]
 801055c:	2b0e      	cmp	r3, #14
 801055e:	f200 80a1 	bhi.w	80106a4 <_dtoa_r+0x444>
 8010562:	2c00      	cmp	r4, #0
 8010564:	f000 809e 	beq.w	80106a4 <_dtoa_r+0x444>
 8010568:	2f00      	cmp	r7, #0
 801056a:	dd33      	ble.n	80105d4 <_dtoa_r+0x374>
 801056c:	4b9c      	ldr	r3, [pc, #624]	@ (80107e0 <_dtoa_r+0x580>)
 801056e:	f007 020f 	and.w	r2, r7, #15
 8010572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010576:	ed93 7b00 	vldr	d7, [r3]
 801057a:	05f8      	lsls	r0, r7, #23
 801057c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010580:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010584:	d516      	bpl.n	80105b4 <_dtoa_r+0x354>
 8010586:	4b97      	ldr	r3, [pc, #604]	@ (80107e4 <_dtoa_r+0x584>)
 8010588:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801058c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010590:	f7f0 f96c 	bl	800086c <__aeabi_ddiv>
 8010594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010598:	f004 040f 	and.w	r4, r4, #15
 801059c:	2603      	movs	r6, #3
 801059e:	4d91      	ldr	r5, [pc, #580]	@ (80107e4 <_dtoa_r+0x584>)
 80105a0:	b954      	cbnz	r4, 80105b8 <_dtoa_r+0x358>
 80105a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80105a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105aa:	f7f0 f95f 	bl	800086c <__aeabi_ddiv>
 80105ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105b2:	e028      	b.n	8010606 <_dtoa_r+0x3a6>
 80105b4:	2602      	movs	r6, #2
 80105b6:	e7f2      	b.n	801059e <_dtoa_r+0x33e>
 80105b8:	07e1      	lsls	r1, r4, #31
 80105ba:	d508      	bpl.n	80105ce <_dtoa_r+0x36e>
 80105bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80105c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105c4:	f7f0 f828 	bl	8000618 <__aeabi_dmul>
 80105c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80105cc:	3601      	adds	r6, #1
 80105ce:	1064      	asrs	r4, r4, #1
 80105d0:	3508      	adds	r5, #8
 80105d2:	e7e5      	b.n	80105a0 <_dtoa_r+0x340>
 80105d4:	f000 80af 	beq.w	8010736 <_dtoa_r+0x4d6>
 80105d8:	427c      	negs	r4, r7
 80105da:	4b81      	ldr	r3, [pc, #516]	@ (80107e0 <_dtoa_r+0x580>)
 80105dc:	4d81      	ldr	r5, [pc, #516]	@ (80107e4 <_dtoa_r+0x584>)
 80105de:	f004 020f 	and.w	r2, r4, #15
 80105e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80105ee:	f7f0 f813 	bl	8000618 <__aeabi_dmul>
 80105f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105f6:	1124      	asrs	r4, r4, #4
 80105f8:	2300      	movs	r3, #0
 80105fa:	2602      	movs	r6, #2
 80105fc:	2c00      	cmp	r4, #0
 80105fe:	f040 808f 	bne.w	8010720 <_dtoa_r+0x4c0>
 8010602:	2b00      	cmp	r3, #0
 8010604:	d1d3      	bne.n	80105ae <_dtoa_r+0x34e>
 8010606:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010608:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801060c:	2b00      	cmp	r3, #0
 801060e:	f000 8094 	beq.w	801073a <_dtoa_r+0x4da>
 8010612:	4b75      	ldr	r3, [pc, #468]	@ (80107e8 <_dtoa_r+0x588>)
 8010614:	2200      	movs	r2, #0
 8010616:	4620      	mov	r0, r4
 8010618:	4629      	mov	r1, r5
 801061a:	f7f0 fa6f 	bl	8000afc <__aeabi_dcmplt>
 801061e:	2800      	cmp	r0, #0
 8010620:	f000 808b 	beq.w	801073a <_dtoa_r+0x4da>
 8010624:	9b03      	ldr	r3, [sp, #12]
 8010626:	2b00      	cmp	r3, #0
 8010628:	f000 8087 	beq.w	801073a <_dtoa_r+0x4da>
 801062c:	f1bb 0f00 	cmp.w	fp, #0
 8010630:	dd34      	ble.n	801069c <_dtoa_r+0x43c>
 8010632:	4620      	mov	r0, r4
 8010634:	4b6d      	ldr	r3, [pc, #436]	@ (80107ec <_dtoa_r+0x58c>)
 8010636:	2200      	movs	r2, #0
 8010638:	4629      	mov	r1, r5
 801063a:	f7ef ffed 	bl	8000618 <__aeabi_dmul>
 801063e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010642:	f107 38ff 	add.w	r8, r7, #4294967295
 8010646:	3601      	adds	r6, #1
 8010648:	465c      	mov	r4, fp
 801064a:	4630      	mov	r0, r6
 801064c:	f7ef ff7a 	bl	8000544 <__aeabi_i2d>
 8010650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010654:	f7ef ffe0 	bl	8000618 <__aeabi_dmul>
 8010658:	4b65      	ldr	r3, [pc, #404]	@ (80107f0 <_dtoa_r+0x590>)
 801065a:	2200      	movs	r2, #0
 801065c:	f7ef fe26 	bl	80002ac <__adddf3>
 8010660:	4605      	mov	r5, r0
 8010662:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010666:	2c00      	cmp	r4, #0
 8010668:	d16a      	bne.n	8010740 <_dtoa_r+0x4e0>
 801066a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801066e:	4b61      	ldr	r3, [pc, #388]	@ (80107f4 <_dtoa_r+0x594>)
 8010670:	2200      	movs	r2, #0
 8010672:	f7ef fe19 	bl	80002a8 <__aeabi_dsub>
 8010676:	4602      	mov	r2, r0
 8010678:	460b      	mov	r3, r1
 801067a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801067e:	462a      	mov	r2, r5
 8010680:	4633      	mov	r3, r6
 8010682:	f7f0 fa59 	bl	8000b38 <__aeabi_dcmpgt>
 8010686:	2800      	cmp	r0, #0
 8010688:	f040 8298 	bne.w	8010bbc <_dtoa_r+0x95c>
 801068c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010690:	462a      	mov	r2, r5
 8010692:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010696:	f7f0 fa31 	bl	8000afc <__aeabi_dcmplt>
 801069a:	bb38      	cbnz	r0, 80106ec <_dtoa_r+0x48c>
 801069c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80106a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80106a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	f2c0 8157 	blt.w	801095a <_dtoa_r+0x6fa>
 80106ac:	2f0e      	cmp	r7, #14
 80106ae:	f300 8154 	bgt.w	801095a <_dtoa_r+0x6fa>
 80106b2:	4b4b      	ldr	r3, [pc, #300]	@ (80107e0 <_dtoa_r+0x580>)
 80106b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80106b8:	ed93 7b00 	vldr	d7, [r3]
 80106bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80106be:	2b00      	cmp	r3, #0
 80106c0:	ed8d 7b00 	vstr	d7, [sp]
 80106c4:	f280 80e5 	bge.w	8010892 <_dtoa_r+0x632>
 80106c8:	9b03      	ldr	r3, [sp, #12]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f300 80e1 	bgt.w	8010892 <_dtoa_r+0x632>
 80106d0:	d10c      	bne.n	80106ec <_dtoa_r+0x48c>
 80106d2:	4b48      	ldr	r3, [pc, #288]	@ (80107f4 <_dtoa_r+0x594>)
 80106d4:	2200      	movs	r2, #0
 80106d6:	ec51 0b17 	vmov	r0, r1, d7
 80106da:	f7ef ff9d 	bl	8000618 <__aeabi_dmul>
 80106de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80106e2:	f7f0 fa1f 	bl	8000b24 <__aeabi_dcmpge>
 80106e6:	2800      	cmp	r0, #0
 80106e8:	f000 8266 	beq.w	8010bb8 <_dtoa_r+0x958>
 80106ec:	2400      	movs	r4, #0
 80106ee:	4625      	mov	r5, r4
 80106f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80106f2:	4656      	mov	r6, sl
 80106f4:	ea6f 0803 	mvn.w	r8, r3
 80106f8:	2700      	movs	r7, #0
 80106fa:	4621      	mov	r1, r4
 80106fc:	4648      	mov	r0, r9
 80106fe:	f001 f80b 	bl	8011718 <_Bfree>
 8010702:	2d00      	cmp	r5, #0
 8010704:	f000 80bd 	beq.w	8010882 <_dtoa_r+0x622>
 8010708:	b12f      	cbz	r7, 8010716 <_dtoa_r+0x4b6>
 801070a:	42af      	cmp	r7, r5
 801070c:	d003      	beq.n	8010716 <_dtoa_r+0x4b6>
 801070e:	4639      	mov	r1, r7
 8010710:	4648      	mov	r0, r9
 8010712:	f001 f801 	bl	8011718 <_Bfree>
 8010716:	4629      	mov	r1, r5
 8010718:	4648      	mov	r0, r9
 801071a:	f000 fffd 	bl	8011718 <_Bfree>
 801071e:	e0b0      	b.n	8010882 <_dtoa_r+0x622>
 8010720:	07e2      	lsls	r2, r4, #31
 8010722:	d505      	bpl.n	8010730 <_dtoa_r+0x4d0>
 8010724:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010728:	f7ef ff76 	bl	8000618 <__aeabi_dmul>
 801072c:	3601      	adds	r6, #1
 801072e:	2301      	movs	r3, #1
 8010730:	1064      	asrs	r4, r4, #1
 8010732:	3508      	adds	r5, #8
 8010734:	e762      	b.n	80105fc <_dtoa_r+0x39c>
 8010736:	2602      	movs	r6, #2
 8010738:	e765      	b.n	8010606 <_dtoa_r+0x3a6>
 801073a:	9c03      	ldr	r4, [sp, #12]
 801073c:	46b8      	mov	r8, r7
 801073e:	e784      	b.n	801064a <_dtoa_r+0x3ea>
 8010740:	4b27      	ldr	r3, [pc, #156]	@ (80107e0 <_dtoa_r+0x580>)
 8010742:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010744:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010748:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801074c:	4454      	add	r4, sl
 801074e:	2900      	cmp	r1, #0
 8010750:	d054      	beq.n	80107fc <_dtoa_r+0x59c>
 8010752:	4929      	ldr	r1, [pc, #164]	@ (80107f8 <_dtoa_r+0x598>)
 8010754:	2000      	movs	r0, #0
 8010756:	f7f0 f889 	bl	800086c <__aeabi_ddiv>
 801075a:	4633      	mov	r3, r6
 801075c:	462a      	mov	r2, r5
 801075e:	f7ef fda3 	bl	80002a8 <__aeabi_dsub>
 8010762:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010766:	4656      	mov	r6, sl
 8010768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801076c:	f7f0 fa04 	bl	8000b78 <__aeabi_d2iz>
 8010770:	4605      	mov	r5, r0
 8010772:	f7ef fee7 	bl	8000544 <__aeabi_i2d>
 8010776:	4602      	mov	r2, r0
 8010778:	460b      	mov	r3, r1
 801077a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801077e:	f7ef fd93 	bl	80002a8 <__aeabi_dsub>
 8010782:	3530      	adds	r5, #48	@ 0x30
 8010784:	4602      	mov	r2, r0
 8010786:	460b      	mov	r3, r1
 8010788:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801078c:	f806 5b01 	strb.w	r5, [r6], #1
 8010790:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010794:	f7f0 f9b2 	bl	8000afc <__aeabi_dcmplt>
 8010798:	2800      	cmp	r0, #0
 801079a:	d172      	bne.n	8010882 <_dtoa_r+0x622>
 801079c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80107a0:	4911      	ldr	r1, [pc, #68]	@ (80107e8 <_dtoa_r+0x588>)
 80107a2:	2000      	movs	r0, #0
 80107a4:	f7ef fd80 	bl	80002a8 <__aeabi_dsub>
 80107a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80107ac:	f7f0 f9a6 	bl	8000afc <__aeabi_dcmplt>
 80107b0:	2800      	cmp	r0, #0
 80107b2:	f040 80b4 	bne.w	801091e <_dtoa_r+0x6be>
 80107b6:	42a6      	cmp	r6, r4
 80107b8:	f43f af70 	beq.w	801069c <_dtoa_r+0x43c>
 80107bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80107c0:	4b0a      	ldr	r3, [pc, #40]	@ (80107ec <_dtoa_r+0x58c>)
 80107c2:	2200      	movs	r2, #0
 80107c4:	f7ef ff28 	bl	8000618 <__aeabi_dmul>
 80107c8:	4b08      	ldr	r3, [pc, #32]	@ (80107ec <_dtoa_r+0x58c>)
 80107ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80107ce:	2200      	movs	r2, #0
 80107d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80107d4:	f7ef ff20 	bl	8000618 <__aeabi_dmul>
 80107d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80107dc:	e7c4      	b.n	8010768 <_dtoa_r+0x508>
 80107de:	bf00      	nop
 80107e0:	0806d948 	.word	0x0806d948
 80107e4:	0806d920 	.word	0x0806d920
 80107e8:	3ff00000 	.word	0x3ff00000
 80107ec:	40240000 	.word	0x40240000
 80107f0:	401c0000 	.word	0x401c0000
 80107f4:	40140000 	.word	0x40140000
 80107f8:	3fe00000 	.word	0x3fe00000
 80107fc:	4631      	mov	r1, r6
 80107fe:	4628      	mov	r0, r5
 8010800:	f7ef ff0a 	bl	8000618 <__aeabi_dmul>
 8010804:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010808:	9413      	str	r4, [sp, #76]	@ 0x4c
 801080a:	4656      	mov	r6, sl
 801080c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010810:	f7f0 f9b2 	bl	8000b78 <__aeabi_d2iz>
 8010814:	4605      	mov	r5, r0
 8010816:	f7ef fe95 	bl	8000544 <__aeabi_i2d>
 801081a:	4602      	mov	r2, r0
 801081c:	460b      	mov	r3, r1
 801081e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010822:	f7ef fd41 	bl	80002a8 <__aeabi_dsub>
 8010826:	3530      	adds	r5, #48	@ 0x30
 8010828:	f806 5b01 	strb.w	r5, [r6], #1
 801082c:	4602      	mov	r2, r0
 801082e:	460b      	mov	r3, r1
 8010830:	42a6      	cmp	r6, r4
 8010832:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010836:	f04f 0200 	mov.w	r2, #0
 801083a:	d124      	bne.n	8010886 <_dtoa_r+0x626>
 801083c:	4baf      	ldr	r3, [pc, #700]	@ (8010afc <_dtoa_r+0x89c>)
 801083e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010842:	f7ef fd33 	bl	80002ac <__adddf3>
 8010846:	4602      	mov	r2, r0
 8010848:	460b      	mov	r3, r1
 801084a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801084e:	f7f0 f973 	bl	8000b38 <__aeabi_dcmpgt>
 8010852:	2800      	cmp	r0, #0
 8010854:	d163      	bne.n	801091e <_dtoa_r+0x6be>
 8010856:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801085a:	49a8      	ldr	r1, [pc, #672]	@ (8010afc <_dtoa_r+0x89c>)
 801085c:	2000      	movs	r0, #0
 801085e:	f7ef fd23 	bl	80002a8 <__aeabi_dsub>
 8010862:	4602      	mov	r2, r0
 8010864:	460b      	mov	r3, r1
 8010866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801086a:	f7f0 f947 	bl	8000afc <__aeabi_dcmplt>
 801086e:	2800      	cmp	r0, #0
 8010870:	f43f af14 	beq.w	801069c <_dtoa_r+0x43c>
 8010874:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010876:	1e73      	subs	r3, r6, #1
 8010878:	9313      	str	r3, [sp, #76]	@ 0x4c
 801087a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801087e:	2b30      	cmp	r3, #48	@ 0x30
 8010880:	d0f8      	beq.n	8010874 <_dtoa_r+0x614>
 8010882:	4647      	mov	r7, r8
 8010884:	e03b      	b.n	80108fe <_dtoa_r+0x69e>
 8010886:	4b9e      	ldr	r3, [pc, #632]	@ (8010b00 <_dtoa_r+0x8a0>)
 8010888:	f7ef fec6 	bl	8000618 <__aeabi_dmul>
 801088c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010890:	e7bc      	b.n	801080c <_dtoa_r+0x5ac>
 8010892:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010896:	4656      	mov	r6, sl
 8010898:	e9dd 2300 	ldrd	r2, r3, [sp]
 801089c:	4620      	mov	r0, r4
 801089e:	4629      	mov	r1, r5
 80108a0:	f7ef ffe4 	bl	800086c <__aeabi_ddiv>
 80108a4:	f7f0 f968 	bl	8000b78 <__aeabi_d2iz>
 80108a8:	4680      	mov	r8, r0
 80108aa:	f7ef fe4b 	bl	8000544 <__aeabi_i2d>
 80108ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108b2:	f7ef feb1 	bl	8000618 <__aeabi_dmul>
 80108b6:	4602      	mov	r2, r0
 80108b8:	460b      	mov	r3, r1
 80108ba:	4620      	mov	r0, r4
 80108bc:	4629      	mov	r1, r5
 80108be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80108c2:	f7ef fcf1 	bl	80002a8 <__aeabi_dsub>
 80108c6:	f806 4b01 	strb.w	r4, [r6], #1
 80108ca:	9d03      	ldr	r5, [sp, #12]
 80108cc:	eba6 040a 	sub.w	r4, r6, sl
 80108d0:	42a5      	cmp	r5, r4
 80108d2:	4602      	mov	r2, r0
 80108d4:	460b      	mov	r3, r1
 80108d6:	d133      	bne.n	8010940 <_dtoa_r+0x6e0>
 80108d8:	f7ef fce8 	bl	80002ac <__adddf3>
 80108dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108e0:	4604      	mov	r4, r0
 80108e2:	460d      	mov	r5, r1
 80108e4:	f7f0 f928 	bl	8000b38 <__aeabi_dcmpgt>
 80108e8:	b9c0      	cbnz	r0, 801091c <_dtoa_r+0x6bc>
 80108ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108ee:	4620      	mov	r0, r4
 80108f0:	4629      	mov	r1, r5
 80108f2:	f7f0 f8f9 	bl	8000ae8 <__aeabi_dcmpeq>
 80108f6:	b110      	cbz	r0, 80108fe <_dtoa_r+0x69e>
 80108f8:	f018 0f01 	tst.w	r8, #1
 80108fc:	d10e      	bne.n	801091c <_dtoa_r+0x6bc>
 80108fe:	9902      	ldr	r1, [sp, #8]
 8010900:	4648      	mov	r0, r9
 8010902:	f000 ff09 	bl	8011718 <_Bfree>
 8010906:	2300      	movs	r3, #0
 8010908:	7033      	strb	r3, [r6, #0]
 801090a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801090c:	3701      	adds	r7, #1
 801090e:	601f      	str	r7, [r3, #0]
 8010910:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010912:	2b00      	cmp	r3, #0
 8010914:	f000 824b 	beq.w	8010dae <_dtoa_r+0xb4e>
 8010918:	601e      	str	r6, [r3, #0]
 801091a:	e248      	b.n	8010dae <_dtoa_r+0xb4e>
 801091c:	46b8      	mov	r8, r7
 801091e:	4633      	mov	r3, r6
 8010920:	461e      	mov	r6, r3
 8010922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010926:	2a39      	cmp	r2, #57	@ 0x39
 8010928:	d106      	bne.n	8010938 <_dtoa_r+0x6d8>
 801092a:	459a      	cmp	sl, r3
 801092c:	d1f8      	bne.n	8010920 <_dtoa_r+0x6c0>
 801092e:	2230      	movs	r2, #48	@ 0x30
 8010930:	f108 0801 	add.w	r8, r8, #1
 8010934:	f88a 2000 	strb.w	r2, [sl]
 8010938:	781a      	ldrb	r2, [r3, #0]
 801093a:	3201      	adds	r2, #1
 801093c:	701a      	strb	r2, [r3, #0]
 801093e:	e7a0      	b.n	8010882 <_dtoa_r+0x622>
 8010940:	4b6f      	ldr	r3, [pc, #444]	@ (8010b00 <_dtoa_r+0x8a0>)
 8010942:	2200      	movs	r2, #0
 8010944:	f7ef fe68 	bl	8000618 <__aeabi_dmul>
 8010948:	2200      	movs	r2, #0
 801094a:	2300      	movs	r3, #0
 801094c:	4604      	mov	r4, r0
 801094e:	460d      	mov	r5, r1
 8010950:	f7f0 f8ca 	bl	8000ae8 <__aeabi_dcmpeq>
 8010954:	2800      	cmp	r0, #0
 8010956:	d09f      	beq.n	8010898 <_dtoa_r+0x638>
 8010958:	e7d1      	b.n	80108fe <_dtoa_r+0x69e>
 801095a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801095c:	2a00      	cmp	r2, #0
 801095e:	f000 80ea 	beq.w	8010b36 <_dtoa_r+0x8d6>
 8010962:	9a07      	ldr	r2, [sp, #28]
 8010964:	2a01      	cmp	r2, #1
 8010966:	f300 80cd 	bgt.w	8010b04 <_dtoa_r+0x8a4>
 801096a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801096c:	2a00      	cmp	r2, #0
 801096e:	f000 80c1 	beq.w	8010af4 <_dtoa_r+0x894>
 8010972:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010976:	9c08      	ldr	r4, [sp, #32]
 8010978:	9e00      	ldr	r6, [sp, #0]
 801097a:	9a00      	ldr	r2, [sp, #0]
 801097c:	441a      	add	r2, r3
 801097e:	9200      	str	r2, [sp, #0]
 8010980:	9a06      	ldr	r2, [sp, #24]
 8010982:	2101      	movs	r1, #1
 8010984:	441a      	add	r2, r3
 8010986:	4648      	mov	r0, r9
 8010988:	9206      	str	r2, [sp, #24]
 801098a:	f000 ffc3 	bl	8011914 <__i2b>
 801098e:	4605      	mov	r5, r0
 8010990:	b166      	cbz	r6, 80109ac <_dtoa_r+0x74c>
 8010992:	9b06      	ldr	r3, [sp, #24]
 8010994:	2b00      	cmp	r3, #0
 8010996:	dd09      	ble.n	80109ac <_dtoa_r+0x74c>
 8010998:	42b3      	cmp	r3, r6
 801099a:	9a00      	ldr	r2, [sp, #0]
 801099c:	bfa8      	it	ge
 801099e:	4633      	movge	r3, r6
 80109a0:	1ad2      	subs	r2, r2, r3
 80109a2:	9200      	str	r2, [sp, #0]
 80109a4:	9a06      	ldr	r2, [sp, #24]
 80109a6:	1af6      	subs	r6, r6, r3
 80109a8:	1ad3      	subs	r3, r2, r3
 80109aa:	9306      	str	r3, [sp, #24]
 80109ac:	9b08      	ldr	r3, [sp, #32]
 80109ae:	b30b      	cbz	r3, 80109f4 <_dtoa_r+0x794>
 80109b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f000 80c6 	beq.w	8010b44 <_dtoa_r+0x8e4>
 80109b8:	2c00      	cmp	r4, #0
 80109ba:	f000 80c0 	beq.w	8010b3e <_dtoa_r+0x8de>
 80109be:	4629      	mov	r1, r5
 80109c0:	4622      	mov	r2, r4
 80109c2:	4648      	mov	r0, r9
 80109c4:	f001 f85e 	bl	8011a84 <__pow5mult>
 80109c8:	9a02      	ldr	r2, [sp, #8]
 80109ca:	4601      	mov	r1, r0
 80109cc:	4605      	mov	r5, r0
 80109ce:	4648      	mov	r0, r9
 80109d0:	f000 ffb6 	bl	8011940 <__multiply>
 80109d4:	9902      	ldr	r1, [sp, #8]
 80109d6:	4680      	mov	r8, r0
 80109d8:	4648      	mov	r0, r9
 80109da:	f000 fe9d 	bl	8011718 <_Bfree>
 80109de:	9b08      	ldr	r3, [sp, #32]
 80109e0:	1b1b      	subs	r3, r3, r4
 80109e2:	9308      	str	r3, [sp, #32]
 80109e4:	f000 80b1 	beq.w	8010b4a <_dtoa_r+0x8ea>
 80109e8:	9a08      	ldr	r2, [sp, #32]
 80109ea:	4641      	mov	r1, r8
 80109ec:	4648      	mov	r0, r9
 80109ee:	f001 f849 	bl	8011a84 <__pow5mult>
 80109f2:	9002      	str	r0, [sp, #8]
 80109f4:	2101      	movs	r1, #1
 80109f6:	4648      	mov	r0, r9
 80109f8:	f000 ff8c 	bl	8011914 <__i2b>
 80109fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109fe:	4604      	mov	r4, r0
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f000 81d8 	beq.w	8010db6 <_dtoa_r+0xb56>
 8010a06:	461a      	mov	r2, r3
 8010a08:	4601      	mov	r1, r0
 8010a0a:	4648      	mov	r0, r9
 8010a0c:	f001 f83a 	bl	8011a84 <__pow5mult>
 8010a10:	9b07      	ldr	r3, [sp, #28]
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	4604      	mov	r4, r0
 8010a16:	f300 809f 	bgt.w	8010b58 <_dtoa_r+0x8f8>
 8010a1a:	9b04      	ldr	r3, [sp, #16]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	f040 8097 	bne.w	8010b50 <_dtoa_r+0x8f0>
 8010a22:	9b05      	ldr	r3, [sp, #20]
 8010a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	f040 8093 	bne.w	8010b54 <_dtoa_r+0x8f4>
 8010a2e:	9b05      	ldr	r3, [sp, #20]
 8010a30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010a34:	0d1b      	lsrs	r3, r3, #20
 8010a36:	051b      	lsls	r3, r3, #20
 8010a38:	b133      	cbz	r3, 8010a48 <_dtoa_r+0x7e8>
 8010a3a:	9b00      	ldr	r3, [sp, #0]
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	9300      	str	r3, [sp, #0]
 8010a40:	9b06      	ldr	r3, [sp, #24]
 8010a42:	3301      	adds	r3, #1
 8010a44:	9306      	str	r3, [sp, #24]
 8010a46:	2301      	movs	r3, #1
 8010a48:	9308      	str	r3, [sp, #32]
 8010a4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	f000 81b8 	beq.w	8010dc2 <_dtoa_r+0xb62>
 8010a52:	6923      	ldr	r3, [r4, #16]
 8010a54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010a58:	6918      	ldr	r0, [r3, #16]
 8010a5a:	f000 ff0f 	bl	801187c <__hi0bits>
 8010a5e:	f1c0 0020 	rsb	r0, r0, #32
 8010a62:	9b06      	ldr	r3, [sp, #24]
 8010a64:	4418      	add	r0, r3
 8010a66:	f010 001f 	ands.w	r0, r0, #31
 8010a6a:	f000 8082 	beq.w	8010b72 <_dtoa_r+0x912>
 8010a6e:	f1c0 0320 	rsb	r3, r0, #32
 8010a72:	2b04      	cmp	r3, #4
 8010a74:	dd73      	ble.n	8010b5e <_dtoa_r+0x8fe>
 8010a76:	9b00      	ldr	r3, [sp, #0]
 8010a78:	f1c0 001c 	rsb	r0, r0, #28
 8010a7c:	4403      	add	r3, r0
 8010a7e:	9300      	str	r3, [sp, #0]
 8010a80:	9b06      	ldr	r3, [sp, #24]
 8010a82:	4403      	add	r3, r0
 8010a84:	4406      	add	r6, r0
 8010a86:	9306      	str	r3, [sp, #24]
 8010a88:	9b00      	ldr	r3, [sp, #0]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	dd05      	ble.n	8010a9a <_dtoa_r+0x83a>
 8010a8e:	9902      	ldr	r1, [sp, #8]
 8010a90:	461a      	mov	r2, r3
 8010a92:	4648      	mov	r0, r9
 8010a94:	f001 f850 	bl	8011b38 <__lshift>
 8010a98:	9002      	str	r0, [sp, #8]
 8010a9a:	9b06      	ldr	r3, [sp, #24]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	dd05      	ble.n	8010aac <_dtoa_r+0x84c>
 8010aa0:	4621      	mov	r1, r4
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	4648      	mov	r0, r9
 8010aa6:	f001 f847 	bl	8011b38 <__lshift>
 8010aaa:	4604      	mov	r4, r0
 8010aac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d061      	beq.n	8010b76 <_dtoa_r+0x916>
 8010ab2:	9802      	ldr	r0, [sp, #8]
 8010ab4:	4621      	mov	r1, r4
 8010ab6:	f001 f8ab 	bl	8011c10 <__mcmp>
 8010aba:	2800      	cmp	r0, #0
 8010abc:	da5b      	bge.n	8010b76 <_dtoa_r+0x916>
 8010abe:	2300      	movs	r3, #0
 8010ac0:	9902      	ldr	r1, [sp, #8]
 8010ac2:	220a      	movs	r2, #10
 8010ac4:	4648      	mov	r0, r9
 8010ac6:	f000 fe49 	bl	801175c <__multadd>
 8010aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010acc:	9002      	str	r0, [sp, #8]
 8010ace:	f107 38ff 	add.w	r8, r7, #4294967295
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	f000 8177 	beq.w	8010dc6 <_dtoa_r+0xb66>
 8010ad8:	4629      	mov	r1, r5
 8010ada:	2300      	movs	r3, #0
 8010adc:	220a      	movs	r2, #10
 8010ade:	4648      	mov	r0, r9
 8010ae0:	f000 fe3c 	bl	801175c <__multadd>
 8010ae4:	f1bb 0f00 	cmp.w	fp, #0
 8010ae8:	4605      	mov	r5, r0
 8010aea:	dc6f      	bgt.n	8010bcc <_dtoa_r+0x96c>
 8010aec:	9b07      	ldr	r3, [sp, #28]
 8010aee:	2b02      	cmp	r3, #2
 8010af0:	dc49      	bgt.n	8010b86 <_dtoa_r+0x926>
 8010af2:	e06b      	b.n	8010bcc <_dtoa_r+0x96c>
 8010af4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010af6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010afa:	e73c      	b.n	8010976 <_dtoa_r+0x716>
 8010afc:	3fe00000 	.word	0x3fe00000
 8010b00:	40240000 	.word	0x40240000
 8010b04:	9b03      	ldr	r3, [sp, #12]
 8010b06:	1e5c      	subs	r4, r3, #1
 8010b08:	9b08      	ldr	r3, [sp, #32]
 8010b0a:	42a3      	cmp	r3, r4
 8010b0c:	db09      	blt.n	8010b22 <_dtoa_r+0x8c2>
 8010b0e:	1b1c      	subs	r4, r3, r4
 8010b10:	9b03      	ldr	r3, [sp, #12]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	f6bf af30 	bge.w	8010978 <_dtoa_r+0x718>
 8010b18:	9b00      	ldr	r3, [sp, #0]
 8010b1a:	9a03      	ldr	r2, [sp, #12]
 8010b1c:	1a9e      	subs	r6, r3, r2
 8010b1e:	2300      	movs	r3, #0
 8010b20:	e72b      	b.n	801097a <_dtoa_r+0x71a>
 8010b22:	9b08      	ldr	r3, [sp, #32]
 8010b24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010b26:	9408      	str	r4, [sp, #32]
 8010b28:	1ae3      	subs	r3, r4, r3
 8010b2a:	441a      	add	r2, r3
 8010b2c:	9e00      	ldr	r6, [sp, #0]
 8010b2e:	9b03      	ldr	r3, [sp, #12]
 8010b30:	920d      	str	r2, [sp, #52]	@ 0x34
 8010b32:	2400      	movs	r4, #0
 8010b34:	e721      	b.n	801097a <_dtoa_r+0x71a>
 8010b36:	9c08      	ldr	r4, [sp, #32]
 8010b38:	9e00      	ldr	r6, [sp, #0]
 8010b3a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010b3c:	e728      	b.n	8010990 <_dtoa_r+0x730>
 8010b3e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010b42:	e751      	b.n	80109e8 <_dtoa_r+0x788>
 8010b44:	9a08      	ldr	r2, [sp, #32]
 8010b46:	9902      	ldr	r1, [sp, #8]
 8010b48:	e750      	b.n	80109ec <_dtoa_r+0x78c>
 8010b4a:	f8cd 8008 	str.w	r8, [sp, #8]
 8010b4e:	e751      	b.n	80109f4 <_dtoa_r+0x794>
 8010b50:	2300      	movs	r3, #0
 8010b52:	e779      	b.n	8010a48 <_dtoa_r+0x7e8>
 8010b54:	9b04      	ldr	r3, [sp, #16]
 8010b56:	e777      	b.n	8010a48 <_dtoa_r+0x7e8>
 8010b58:	2300      	movs	r3, #0
 8010b5a:	9308      	str	r3, [sp, #32]
 8010b5c:	e779      	b.n	8010a52 <_dtoa_r+0x7f2>
 8010b5e:	d093      	beq.n	8010a88 <_dtoa_r+0x828>
 8010b60:	9a00      	ldr	r2, [sp, #0]
 8010b62:	331c      	adds	r3, #28
 8010b64:	441a      	add	r2, r3
 8010b66:	9200      	str	r2, [sp, #0]
 8010b68:	9a06      	ldr	r2, [sp, #24]
 8010b6a:	441a      	add	r2, r3
 8010b6c:	441e      	add	r6, r3
 8010b6e:	9206      	str	r2, [sp, #24]
 8010b70:	e78a      	b.n	8010a88 <_dtoa_r+0x828>
 8010b72:	4603      	mov	r3, r0
 8010b74:	e7f4      	b.n	8010b60 <_dtoa_r+0x900>
 8010b76:	9b03      	ldr	r3, [sp, #12]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	46b8      	mov	r8, r7
 8010b7c:	dc20      	bgt.n	8010bc0 <_dtoa_r+0x960>
 8010b7e:	469b      	mov	fp, r3
 8010b80:	9b07      	ldr	r3, [sp, #28]
 8010b82:	2b02      	cmp	r3, #2
 8010b84:	dd1e      	ble.n	8010bc4 <_dtoa_r+0x964>
 8010b86:	f1bb 0f00 	cmp.w	fp, #0
 8010b8a:	f47f adb1 	bne.w	80106f0 <_dtoa_r+0x490>
 8010b8e:	4621      	mov	r1, r4
 8010b90:	465b      	mov	r3, fp
 8010b92:	2205      	movs	r2, #5
 8010b94:	4648      	mov	r0, r9
 8010b96:	f000 fde1 	bl	801175c <__multadd>
 8010b9a:	4601      	mov	r1, r0
 8010b9c:	4604      	mov	r4, r0
 8010b9e:	9802      	ldr	r0, [sp, #8]
 8010ba0:	f001 f836 	bl	8011c10 <__mcmp>
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	f77f ada3 	ble.w	80106f0 <_dtoa_r+0x490>
 8010baa:	4656      	mov	r6, sl
 8010bac:	2331      	movs	r3, #49	@ 0x31
 8010bae:	f806 3b01 	strb.w	r3, [r6], #1
 8010bb2:	f108 0801 	add.w	r8, r8, #1
 8010bb6:	e59f      	b.n	80106f8 <_dtoa_r+0x498>
 8010bb8:	9c03      	ldr	r4, [sp, #12]
 8010bba:	46b8      	mov	r8, r7
 8010bbc:	4625      	mov	r5, r4
 8010bbe:	e7f4      	b.n	8010baa <_dtoa_r+0x94a>
 8010bc0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	f000 8101 	beq.w	8010dce <_dtoa_r+0xb6e>
 8010bcc:	2e00      	cmp	r6, #0
 8010bce:	dd05      	ble.n	8010bdc <_dtoa_r+0x97c>
 8010bd0:	4629      	mov	r1, r5
 8010bd2:	4632      	mov	r2, r6
 8010bd4:	4648      	mov	r0, r9
 8010bd6:	f000 ffaf 	bl	8011b38 <__lshift>
 8010bda:	4605      	mov	r5, r0
 8010bdc:	9b08      	ldr	r3, [sp, #32]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d05c      	beq.n	8010c9c <_dtoa_r+0xa3c>
 8010be2:	6869      	ldr	r1, [r5, #4]
 8010be4:	4648      	mov	r0, r9
 8010be6:	f000 fd57 	bl	8011698 <_Balloc>
 8010bea:	4606      	mov	r6, r0
 8010bec:	b928      	cbnz	r0, 8010bfa <_dtoa_r+0x99a>
 8010bee:	4b82      	ldr	r3, [pc, #520]	@ (8010df8 <_dtoa_r+0xb98>)
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010bf6:	f7ff bb4a 	b.w	801028e <_dtoa_r+0x2e>
 8010bfa:	692a      	ldr	r2, [r5, #16]
 8010bfc:	3202      	adds	r2, #2
 8010bfe:	0092      	lsls	r2, r2, #2
 8010c00:	f105 010c 	add.w	r1, r5, #12
 8010c04:	300c      	adds	r0, #12
 8010c06:	f7ff fa66 	bl	80100d6 <memcpy>
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	4631      	mov	r1, r6
 8010c0e:	4648      	mov	r0, r9
 8010c10:	f000 ff92 	bl	8011b38 <__lshift>
 8010c14:	f10a 0301 	add.w	r3, sl, #1
 8010c18:	9300      	str	r3, [sp, #0]
 8010c1a:	eb0a 030b 	add.w	r3, sl, fp
 8010c1e:	9308      	str	r3, [sp, #32]
 8010c20:	9b04      	ldr	r3, [sp, #16]
 8010c22:	f003 0301 	and.w	r3, r3, #1
 8010c26:	462f      	mov	r7, r5
 8010c28:	9306      	str	r3, [sp, #24]
 8010c2a:	4605      	mov	r5, r0
 8010c2c:	9b00      	ldr	r3, [sp, #0]
 8010c2e:	9802      	ldr	r0, [sp, #8]
 8010c30:	4621      	mov	r1, r4
 8010c32:	f103 3bff 	add.w	fp, r3, #4294967295
 8010c36:	f7ff fa8b 	bl	8010150 <quorem>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	3330      	adds	r3, #48	@ 0x30
 8010c3e:	9003      	str	r0, [sp, #12]
 8010c40:	4639      	mov	r1, r7
 8010c42:	9802      	ldr	r0, [sp, #8]
 8010c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c46:	f000 ffe3 	bl	8011c10 <__mcmp>
 8010c4a:	462a      	mov	r2, r5
 8010c4c:	9004      	str	r0, [sp, #16]
 8010c4e:	4621      	mov	r1, r4
 8010c50:	4648      	mov	r0, r9
 8010c52:	f000 fff9 	bl	8011c48 <__mdiff>
 8010c56:	68c2      	ldr	r2, [r0, #12]
 8010c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c5a:	4606      	mov	r6, r0
 8010c5c:	bb02      	cbnz	r2, 8010ca0 <_dtoa_r+0xa40>
 8010c5e:	4601      	mov	r1, r0
 8010c60:	9802      	ldr	r0, [sp, #8]
 8010c62:	f000 ffd5 	bl	8011c10 <__mcmp>
 8010c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c68:	4602      	mov	r2, r0
 8010c6a:	4631      	mov	r1, r6
 8010c6c:	4648      	mov	r0, r9
 8010c6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010c70:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c72:	f000 fd51 	bl	8011718 <_Bfree>
 8010c76:	9b07      	ldr	r3, [sp, #28]
 8010c78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010c7a:	9e00      	ldr	r6, [sp, #0]
 8010c7c:	ea42 0103 	orr.w	r1, r2, r3
 8010c80:	9b06      	ldr	r3, [sp, #24]
 8010c82:	4319      	orrs	r1, r3
 8010c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c86:	d10d      	bne.n	8010ca4 <_dtoa_r+0xa44>
 8010c88:	2b39      	cmp	r3, #57	@ 0x39
 8010c8a:	d027      	beq.n	8010cdc <_dtoa_r+0xa7c>
 8010c8c:	9a04      	ldr	r2, [sp, #16]
 8010c8e:	2a00      	cmp	r2, #0
 8010c90:	dd01      	ble.n	8010c96 <_dtoa_r+0xa36>
 8010c92:	9b03      	ldr	r3, [sp, #12]
 8010c94:	3331      	adds	r3, #49	@ 0x31
 8010c96:	f88b 3000 	strb.w	r3, [fp]
 8010c9a:	e52e      	b.n	80106fa <_dtoa_r+0x49a>
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	e7b9      	b.n	8010c14 <_dtoa_r+0x9b4>
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	e7e2      	b.n	8010c6a <_dtoa_r+0xa0a>
 8010ca4:	9904      	ldr	r1, [sp, #16]
 8010ca6:	2900      	cmp	r1, #0
 8010ca8:	db04      	blt.n	8010cb4 <_dtoa_r+0xa54>
 8010caa:	9807      	ldr	r0, [sp, #28]
 8010cac:	4301      	orrs	r1, r0
 8010cae:	9806      	ldr	r0, [sp, #24]
 8010cb0:	4301      	orrs	r1, r0
 8010cb2:	d120      	bne.n	8010cf6 <_dtoa_r+0xa96>
 8010cb4:	2a00      	cmp	r2, #0
 8010cb6:	ddee      	ble.n	8010c96 <_dtoa_r+0xa36>
 8010cb8:	9902      	ldr	r1, [sp, #8]
 8010cba:	9300      	str	r3, [sp, #0]
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	4648      	mov	r0, r9
 8010cc0:	f000 ff3a 	bl	8011b38 <__lshift>
 8010cc4:	4621      	mov	r1, r4
 8010cc6:	9002      	str	r0, [sp, #8]
 8010cc8:	f000 ffa2 	bl	8011c10 <__mcmp>
 8010ccc:	2800      	cmp	r0, #0
 8010cce:	9b00      	ldr	r3, [sp, #0]
 8010cd0:	dc02      	bgt.n	8010cd8 <_dtoa_r+0xa78>
 8010cd2:	d1e0      	bne.n	8010c96 <_dtoa_r+0xa36>
 8010cd4:	07da      	lsls	r2, r3, #31
 8010cd6:	d5de      	bpl.n	8010c96 <_dtoa_r+0xa36>
 8010cd8:	2b39      	cmp	r3, #57	@ 0x39
 8010cda:	d1da      	bne.n	8010c92 <_dtoa_r+0xa32>
 8010cdc:	2339      	movs	r3, #57	@ 0x39
 8010cde:	f88b 3000 	strb.w	r3, [fp]
 8010ce2:	4633      	mov	r3, r6
 8010ce4:	461e      	mov	r6, r3
 8010ce6:	3b01      	subs	r3, #1
 8010ce8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010cec:	2a39      	cmp	r2, #57	@ 0x39
 8010cee:	d04e      	beq.n	8010d8e <_dtoa_r+0xb2e>
 8010cf0:	3201      	adds	r2, #1
 8010cf2:	701a      	strb	r2, [r3, #0]
 8010cf4:	e501      	b.n	80106fa <_dtoa_r+0x49a>
 8010cf6:	2a00      	cmp	r2, #0
 8010cf8:	dd03      	ble.n	8010d02 <_dtoa_r+0xaa2>
 8010cfa:	2b39      	cmp	r3, #57	@ 0x39
 8010cfc:	d0ee      	beq.n	8010cdc <_dtoa_r+0xa7c>
 8010cfe:	3301      	adds	r3, #1
 8010d00:	e7c9      	b.n	8010c96 <_dtoa_r+0xa36>
 8010d02:	9a00      	ldr	r2, [sp, #0]
 8010d04:	9908      	ldr	r1, [sp, #32]
 8010d06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010d0a:	428a      	cmp	r2, r1
 8010d0c:	d028      	beq.n	8010d60 <_dtoa_r+0xb00>
 8010d0e:	9902      	ldr	r1, [sp, #8]
 8010d10:	2300      	movs	r3, #0
 8010d12:	220a      	movs	r2, #10
 8010d14:	4648      	mov	r0, r9
 8010d16:	f000 fd21 	bl	801175c <__multadd>
 8010d1a:	42af      	cmp	r7, r5
 8010d1c:	9002      	str	r0, [sp, #8]
 8010d1e:	f04f 0300 	mov.w	r3, #0
 8010d22:	f04f 020a 	mov.w	r2, #10
 8010d26:	4639      	mov	r1, r7
 8010d28:	4648      	mov	r0, r9
 8010d2a:	d107      	bne.n	8010d3c <_dtoa_r+0xadc>
 8010d2c:	f000 fd16 	bl	801175c <__multadd>
 8010d30:	4607      	mov	r7, r0
 8010d32:	4605      	mov	r5, r0
 8010d34:	9b00      	ldr	r3, [sp, #0]
 8010d36:	3301      	adds	r3, #1
 8010d38:	9300      	str	r3, [sp, #0]
 8010d3a:	e777      	b.n	8010c2c <_dtoa_r+0x9cc>
 8010d3c:	f000 fd0e 	bl	801175c <__multadd>
 8010d40:	4629      	mov	r1, r5
 8010d42:	4607      	mov	r7, r0
 8010d44:	2300      	movs	r3, #0
 8010d46:	220a      	movs	r2, #10
 8010d48:	4648      	mov	r0, r9
 8010d4a:	f000 fd07 	bl	801175c <__multadd>
 8010d4e:	4605      	mov	r5, r0
 8010d50:	e7f0      	b.n	8010d34 <_dtoa_r+0xad4>
 8010d52:	f1bb 0f00 	cmp.w	fp, #0
 8010d56:	bfcc      	ite	gt
 8010d58:	465e      	movgt	r6, fp
 8010d5a:	2601      	movle	r6, #1
 8010d5c:	4456      	add	r6, sl
 8010d5e:	2700      	movs	r7, #0
 8010d60:	9902      	ldr	r1, [sp, #8]
 8010d62:	9300      	str	r3, [sp, #0]
 8010d64:	2201      	movs	r2, #1
 8010d66:	4648      	mov	r0, r9
 8010d68:	f000 fee6 	bl	8011b38 <__lshift>
 8010d6c:	4621      	mov	r1, r4
 8010d6e:	9002      	str	r0, [sp, #8]
 8010d70:	f000 ff4e 	bl	8011c10 <__mcmp>
 8010d74:	2800      	cmp	r0, #0
 8010d76:	dcb4      	bgt.n	8010ce2 <_dtoa_r+0xa82>
 8010d78:	d102      	bne.n	8010d80 <_dtoa_r+0xb20>
 8010d7a:	9b00      	ldr	r3, [sp, #0]
 8010d7c:	07db      	lsls	r3, r3, #31
 8010d7e:	d4b0      	bmi.n	8010ce2 <_dtoa_r+0xa82>
 8010d80:	4633      	mov	r3, r6
 8010d82:	461e      	mov	r6, r3
 8010d84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d88:	2a30      	cmp	r2, #48	@ 0x30
 8010d8a:	d0fa      	beq.n	8010d82 <_dtoa_r+0xb22>
 8010d8c:	e4b5      	b.n	80106fa <_dtoa_r+0x49a>
 8010d8e:	459a      	cmp	sl, r3
 8010d90:	d1a8      	bne.n	8010ce4 <_dtoa_r+0xa84>
 8010d92:	2331      	movs	r3, #49	@ 0x31
 8010d94:	f108 0801 	add.w	r8, r8, #1
 8010d98:	f88a 3000 	strb.w	r3, [sl]
 8010d9c:	e4ad      	b.n	80106fa <_dtoa_r+0x49a>
 8010d9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010da0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010dfc <_dtoa_r+0xb9c>
 8010da4:	b11b      	cbz	r3, 8010dae <_dtoa_r+0xb4e>
 8010da6:	f10a 0308 	add.w	r3, sl, #8
 8010daa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010dac:	6013      	str	r3, [r2, #0]
 8010dae:	4650      	mov	r0, sl
 8010db0:	b017      	add	sp, #92	@ 0x5c
 8010db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db6:	9b07      	ldr	r3, [sp, #28]
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	f77f ae2e 	ble.w	8010a1a <_dtoa_r+0x7ba>
 8010dbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010dc0:	9308      	str	r3, [sp, #32]
 8010dc2:	2001      	movs	r0, #1
 8010dc4:	e64d      	b.n	8010a62 <_dtoa_r+0x802>
 8010dc6:	f1bb 0f00 	cmp.w	fp, #0
 8010dca:	f77f aed9 	ble.w	8010b80 <_dtoa_r+0x920>
 8010dce:	4656      	mov	r6, sl
 8010dd0:	9802      	ldr	r0, [sp, #8]
 8010dd2:	4621      	mov	r1, r4
 8010dd4:	f7ff f9bc 	bl	8010150 <quorem>
 8010dd8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010ddc:	f806 3b01 	strb.w	r3, [r6], #1
 8010de0:	eba6 020a 	sub.w	r2, r6, sl
 8010de4:	4593      	cmp	fp, r2
 8010de6:	ddb4      	ble.n	8010d52 <_dtoa_r+0xaf2>
 8010de8:	9902      	ldr	r1, [sp, #8]
 8010dea:	2300      	movs	r3, #0
 8010dec:	220a      	movs	r2, #10
 8010dee:	4648      	mov	r0, r9
 8010df0:	f000 fcb4 	bl	801175c <__multadd>
 8010df4:	9002      	str	r0, [sp, #8]
 8010df6:	e7eb      	b.n	8010dd0 <_dtoa_r+0xb70>
 8010df8:	0806d6c3 	.word	0x0806d6c3
 8010dfc:	0806d65e 	.word	0x0806d65e

08010e00 <_free_r>:
 8010e00:	b538      	push	{r3, r4, r5, lr}
 8010e02:	4605      	mov	r5, r0
 8010e04:	2900      	cmp	r1, #0
 8010e06:	d041      	beq.n	8010e8c <_free_r+0x8c>
 8010e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e0c:	1f0c      	subs	r4, r1, #4
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	bfb8      	it	lt
 8010e12:	18e4      	addlt	r4, r4, r3
 8010e14:	f000 fc34 	bl	8011680 <__malloc_lock>
 8010e18:	4a1d      	ldr	r2, [pc, #116]	@ (8010e90 <_free_r+0x90>)
 8010e1a:	6813      	ldr	r3, [r2, #0]
 8010e1c:	b933      	cbnz	r3, 8010e2c <_free_r+0x2c>
 8010e1e:	6063      	str	r3, [r4, #4]
 8010e20:	6014      	str	r4, [r2, #0]
 8010e22:	4628      	mov	r0, r5
 8010e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e28:	f000 bc30 	b.w	801168c <__malloc_unlock>
 8010e2c:	42a3      	cmp	r3, r4
 8010e2e:	d908      	bls.n	8010e42 <_free_r+0x42>
 8010e30:	6820      	ldr	r0, [r4, #0]
 8010e32:	1821      	adds	r1, r4, r0
 8010e34:	428b      	cmp	r3, r1
 8010e36:	bf01      	itttt	eq
 8010e38:	6819      	ldreq	r1, [r3, #0]
 8010e3a:	685b      	ldreq	r3, [r3, #4]
 8010e3c:	1809      	addeq	r1, r1, r0
 8010e3e:	6021      	streq	r1, [r4, #0]
 8010e40:	e7ed      	b.n	8010e1e <_free_r+0x1e>
 8010e42:	461a      	mov	r2, r3
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	b10b      	cbz	r3, 8010e4c <_free_r+0x4c>
 8010e48:	42a3      	cmp	r3, r4
 8010e4a:	d9fa      	bls.n	8010e42 <_free_r+0x42>
 8010e4c:	6811      	ldr	r1, [r2, #0]
 8010e4e:	1850      	adds	r0, r2, r1
 8010e50:	42a0      	cmp	r0, r4
 8010e52:	d10b      	bne.n	8010e6c <_free_r+0x6c>
 8010e54:	6820      	ldr	r0, [r4, #0]
 8010e56:	4401      	add	r1, r0
 8010e58:	1850      	adds	r0, r2, r1
 8010e5a:	4283      	cmp	r3, r0
 8010e5c:	6011      	str	r1, [r2, #0]
 8010e5e:	d1e0      	bne.n	8010e22 <_free_r+0x22>
 8010e60:	6818      	ldr	r0, [r3, #0]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	6053      	str	r3, [r2, #4]
 8010e66:	4408      	add	r0, r1
 8010e68:	6010      	str	r0, [r2, #0]
 8010e6a:	e7da      	b.n	8010e22 <_free_r+0x22>
 8010e6c:	d902      	bls.n	8010e74 <_free_r+0x74>
 8010e6e:	230c      	movs	r3, #12
 8010e70:	602b      	str	r3, [r5, #0]
 8010e72:	e7d6      	b.n	8010e22 <_free_r+0x22>
 8010e74:	6820      	ldr	r0, [r4, #0]
 8010e76:	1821      	adds	r1, r4, r0
 8010e78:	428b      	cmp	r3, r1
 8010e7a:	bf04      	itt	eq
 8010e7c:	6819      	ldreq	r1, [r3, #0]
 8010e7e:	685b      	ldreq	r3, [r3, #4]
 8010e80:	6063      	str	r3, [r4, #4]
 8010e82:	bf04      	itt	eq
 8010e84:	1809      	addeq	r1, r1, r0
 8010e86:	6021      	streq	r1, [r4, #0]
 8010e88:	6054      	str	r4, [r2, #4]
 8010e8a:	e7ca      	b.n	8010e22 <_free_r+0x22>
 8010e8c:	bd38      	pop	{r3, r4, r5, pc}
 8010e8e:	bf00      	nop
 8010e90:	2001a720 	.word	0x2001a720

08010e94 <rshift>:
 8010e94:	6903      	ldr	r3, [r0, #16]
 8010e96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010e9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010ea2:	f100 0414 	add.w	r4, r0, #20
 8010ea6:	dd45      	ble.n	8010f34 <rshift+0xa0>
 8010ea8:	f011 011f 	ands.w	r1, r1, #31
 8010eac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010eb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010eb4:	d10c      	bne.n	8010ed0 <rshift+0x3c>
 8010eb6:	f100 0710 	add.w	r7, r0, #16
 8010eba:	4629      	mov	r1, r5
 8010ebc:	42b1      	cmp	r1, r6
 8010ebe:	d334      	bcc.n	8010f2a <rshift+0x96>
 8010ec0:	1a9b      	subs	r3, r3, r2
 8010ec2:	009b      	lsls	r3, r3, #2
 8010ec4:	1eea      	subs	r2, r5, #3
 8010ec6:	4296      	cmp	r6, r2
 8010ec8:	bf38      	it	cc
 8010eca:	2300      	movcc	r3, #0
 8010ecc:	4423      	add	r3, r4
 8010ece:	e015      	b.n	8010efc <rshift+0x68>
 8010ed0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010ed4:	f1c1 0820 	rsb	r8, r1, #32
 8010ed8:	40cf      	lsrs	r7, r1
 8010eda:	f105 0e04 	add.w	lr, r5, #4
 8010ede:	46a1      	mov	r9, r4
 8010ee0:	4576      	cmp	r6, lr
 8010ee2:	46f4      	mov	ip, lr
 8010ee4:	d815      	bhi.n	8010f12 <rshift+0x7e>
 8010ee6:	1a9a      	subs	r2, r3, r2
 8010ee8:	0092      	lsls	r2, r2, #2
 8010eea:	3a04      	subs	r2, #4
 8010eec:	3501      	adds	r5, #1
 8010eee:	42ae      	cmp	r6, r5
 8010ef0:	bf38      	it	cc
 8010ef2:	2200      	movcc	r2, #0
 8010ef4:	18a3      	adds	r3, r4, r2
 8010ef6:	50a7      	str	r7, [r4, r2]
 8010ef8:	b107      	cbz	r7, 8010efc <rshift+0x68>
 8010efa:	3304      	adds	r3, #4
 8010efc:	1b1a      	subs	r2, r3, r4
 8010efe:	42a3      	cmp	r3, r4
 8010f00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010f04:	bf08      	it	eq
 8010f06:	2300      	moveq	r3, #0
 8010f08:	6102      	str	r2, [r0, #16]
 8010f0a:	bf08      	it	eq
 8010f0c:	6143      	streq	r3, [r0, #20]
 8010f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f12:	f8dc c000 	ldr.w	ip, [ip]
 8010f16:	fa0c fc08 	lsl.w	ip, ip, r8
 8010f1a:	ea4c 0707 	orr.w	r7, ip, r7
 8010f1e:	f849 7b04 	str.w	r7, [r9], #4
 8010f22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010f26:	40cf      	lsrs	r7, r1
 8010f28:	e7da      	b.n	8010ee0 <rshift+0x4c>
 8010f2a:	f851 cb04 	ldr.w	ip, [r1], #4
 8010f2e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010f32:	e7c3      	b.n	8010ebc <rshift+0x28>
 8010f34:	4623      	mov	r3, r4
 8010f36:	e7e1      	b.n	8010efc <rshift+0x68>

08010f38 <__hexdig_fun>:
 8010f38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010f3c:	2b09      	cmp	r3, #9
 8010f3e:	d802      	bhi.n	8010f46 <__hexdig_fun+0xe>
 8010f40:	3820      	subs	r0, #32
 8010f42:	b2c0      	uxtb	r0, r0
 8010f44:	4770      	bx	lr
 8010f46:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010f4a:	2b05      	cmp	r3, #5
 8010f4c:	d801      	bhi.n	8010f52 <__hexdig_fun+0x1a>
 8010f4e:	3847      	subs	r0, #71	@ 0x47
 8010f50:	e7f7      	b.n	8010f42 <__hexdig_fun+0xa>
 8010f52:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010f56:	2b05      	cmp	r3, #5
 8010f58:	d801      	bhi.n	8010f5e <__hexdig_fun+0x26>
 8010f5a:	3827      	subs	r0, #39	@ 0x27
 8010f5c:	e7f1      	b.n	8010f42 <__hexdig_fun+0xa>
 8010f5e:	2000      	movs	r0, #0
 8010f60:	4770      	bx	lr
	...

08010f64 <__gethex>:
 8010f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f68:	b085      	sub	sp, #20
 8010f6a:	468a      	mov	sl, r1
 8010f6c:	9302      	str	r3, [sp, #8]
 8010f6e:	680b      	ldr	r3, [r1, #0]
 8010f70:	9001      	str	r0, [sp, #4]
 8010f72:	4690      	mov	r8, r2
 8010f74:	1c9c      	adds	r4, r3, #2
 8010f76:	46a1      	mov	r9, r4
 8010f78:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010f7c:	2830      	cmp	r0, #48	@ 0x30
 8010f7e:	d0fa      	beq.n	8010f76 <__gethex+0x12>
 8010f80:	eba9 0303 	sub.w	r3, r9, r3
 8010f84:	f1a3 0b02 	sub.w	fp, r3, #2
 8010f88:	f7ff ffd6 	bl	8010f38 <__hexdig_fun>
 8010f8c:	4605      	mov	r5, r0
 8010f8e:	2800      	cmp	r0, #0
 8010f90:	d168      	bne.n	8011064 <__gethex+0x100>
 8010f92:	49a0      	ldr	r1, [pc, #640]	@ (8011214 <__gethex+0x2b0>)
 8010f94:	2201      	movs	r2, #1
 8010f96:	4648      	mov	r0, r9
 8010f98:	f7fe ff8e 	bl	800feb8 <strncmp>
 8010f9c:	4607      	mov	r7, r0
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	d167      	bne.n	8011072 <__gethex+0x10e>
 8010fa2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010fa6:	4626      	mov	r6, r4
 8010fa8:	f7ff ffc6 	bl	8010f38 <__hexdig_fun>
 8010fac:	2800      	cmp	r0, #0
 8010fae:	d062      	beq.n	8011076 <__gethex+0x112>
 8010fb0:	4623      	mov	r3, r4
 8010fb2:	7818      	ldrb	r0, [r3, #0]
 8010fb4:	2830      	cmp	r0, #48	@ 0x30
 8010fb6:	4699      	mov	r9, r3
 8010fb8:	f103 0301 	add.w	r3, r3, #1
 8010fbc:	d0f9      	beq.n	8010fb2 <__gethex+0x4e>
 8010fbe:	f7ff ffbb 	bl	8010f38 <__hexdig_fun>
 8010fc2:	fab0 f580 	clz	r5, r0
 8010fc6:	096d      	lsrs	r5, r5, #5
 8010fc8:	f04f 0b01 	mov.w	fp, #1
 8010fcc:	464a      	mov	r2, r9
 8010fce:	4616      	mov	r6, r2
 8010fd0:	3201      	adds	r2, #1
 8010fd2:	7830      	ldrb	r0, [r6, #0]
 8010fd4:	f7ff ffb0 	bl	8010f38 <__hexdig_fun>
 8010fd8:	2800      	cmp	r0, #0
 8010fda:	d1f8      	bne.n	8010fce <__gethex+0x6a>
 8010fdc:	498d      	ldr	r1, [pc, #564]	@ (8011214 <__gethex+0x2b0>)
 8010fde:	2201      	movs	r2, #1
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	f7fe ff69 	bl	800feb8 <strncmp>
 8010fe6:	2800      	cmp	r0, #0
 8010fe8:	d13f      	bne.n	801106a <__gethex+0x106>
 8010fea:	b944      	cbnz	r4, 8010ffe <__gethex+0x9a>
 8010fec:	1c74      	adds	r4, r6, #1
 8010fee:	4622      	mov	r2, r4
 8010ff0:	4616      	mov	r6, r2
 8010ff2:	3201      	adds	r2, #1
 8010ff4:	7830      	ldrb	r0, [r6, #0]
 8010ff6:	f7ff ff9f 	bl	8010f38 <__hexdig_fun>
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	d1f8      	bne.n	8010ff0 <__gethex+0x8c>
 8010ffe:	1ba4      	subs	r4, r4, r6
 8011000:	00a7      	lsls	r7, r4, #2
 8011002:	7833      	ldrb	r3, [r6, #0]
 8011004:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011008:	2b50      	cmp	r3, #80	@ 0x50
 801100a:	d13e      	bne.n	801108a <__gethex+0x126>
 801100c:	7873      	ldrb	r3, [r6, #1]
 801100e:	2b2b      	cmp	r3, #43	@ 0x2b
 8011010:	d033      	beq.n	801107a <__gethex+0x116>
 8011012:	2b2d      	cmp	r3, #45	@ 0x2d
 8011014:	d034      	beq.n	8011080 <__gethex+0x11c>
 8011016:	1c71      	adds	r1, r6, #1
 8011018:	2400      	movs	r4, #0
 801101a:	7808      	ldrb	r0, [r1, #0]
 801101c:	f7ff ff8c 	bl	8010f38 <__hexdig_fun>
 8011020:	1e43      	subs	r3, r0, #1
 8011022:	b2db      	uxtb	r3, r3
 8011024:	2b18      	cmp	r3, #24
 8011026:	d830      	bhi.n	801108a <__gethex+0x126>
 8011028:	f1a0 0210 	sub.w	r2, r0, #16
 801102c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011030:	f7ff ff82 	bl	8010f38 <__hexdig_fun>
 8011034:	f100 3cff 	add.w	ip, r0, #4294967295
 8011038:	fa5f fc8c 	uxtb.w	ip, ip
 801103c:	f1bc 0f18 	cmp.w	ip, #24
 8011040:	f04f 030a 	mov.w	r3, #10
 8011044:	d91e      	bls.n	8011084 <__gethex+0x120>
 8011046:	b104      	cbz	r4, 801104a <__gethex+0xe6>
 8011048:	4252      	negs	r2, r2
 801104a:	4417      	add	r7, r2
 801104c:	f8ca 1000 	str.w	r1, [sl]
 8011050:	b1ed      	cbz	r5, 801108e <__gethex+0x12a>
 8011052:	f1bb 0f00 	cmp.w	fp, #0
 8011056:	bf0c      	ite	eq
 8011058:	2506      	moveq	r5, #6
 801105a:	2500      	movne	r5, #0
 801105c:	4628      	mov	r0, r5
 801105e:	b005      	add	sp, #20
 8011060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011064:	2500      	movs	r5, #0
 8011066:	462c      	mov	r4, r5
 8011068:	e7b0      	b.n	8010fcc <__gethex+0x68>
 801106a:	2c00      	cmp	r4, #0
 801106c:	d1c7      	bne.n	8010ffe <__gethex+0x9a>
 801106e:	4627      	mov	r7, r4
 8011070:	e7c7      	b.n	8011002 <__gethex+0x9e>
 8011072:	464e      	mov	r6, r9
 8011074:	462f      	mov	r7, r5
 8011076:	2501      	movs	r5, #1
 8011078:	e7c3      	b.n	8011002 <__gethex+0x9e>
 801107a:	2400      	movs	r4, #0
 801107c:	1cb1      	adds	r1, r6, #2
 801107e:	e7cc      	b.n	801101a <__gethex+0xb6>
 8011080:	2401      	movs	r4, #1
 8011082:	e7fb      	b.n	801107c <__gethex+0x118>
 8011084:	fb03 0002 	mla	r0, r3, r2, r0
 8011088:	e7ce      	b.n	8011028 <__gethex+0xc4>
 801108a:	4631      	mov	r1, r6
 801108c:	e7de      	b.n	801104c <__gethex+0xe8>
 801108e:	eba6 0309 	sub.w	r3, r6, r9
 8011092:	3b01      	subs	r3, #1
 8011094:	4629      	mov	r1, r5
 8011096:	2b07      	cmp	r3, #7
 8011098:	dc0a      	bgt.n	80110b0 <__gethex+0x14c>
 801109a:	9801      	ldr	r0, [sp, #4]
 801109c:	f000 fafc 	bl	8011698 <_Balloc>
 80110a0:	4604      	mov	r4, r0
 80110a2:	b940      	cbnz	r0, 80110b6 <__gethex+0x152>
 80110a4:	4b5c      	ldr	r3, [pc, #368]	@ (8011218 <__gethex+0x2b4>)
 80110a6:	4602      	mov	r2, r0
 80110a8:	21e4      	movs	r1, #228	@ 0xe4
 80110aa:	485c      	ldr	r0, [pc, #368]	@ (801121c <__gethex+0x2b8>)
 80110ac:	f7ff f832 	bl	8010114 <__assert_func>
 80110b0:	3101      	adds	r1, #1
 80110b2:	105b      	asrs	r3, r3, #1
 80110b4:	e7ef      	b.n	8011096 <__gethex+0x132>
 80110b6:	f100 0a14 	add.w	sl, r0, #20
 80110ba:	2300      	movs	r3, #0
 80110bc:	4655      	mov	r5, sl
 80110be:	469b      	mov	fp, r3
 80110c0:	45b1      	cmp	r9, r6
 80110c2:	d337      	bcc.n	8011134 <__gethex+0x1d0>
 80110c4:	f845 bb04 	str.w	fp, [r5], #4
 80110c8:	eba5 050a 	sub.w	r5, r5, sl
 80110cc:	10ad      	asrs	r5, r5, #2
 80110ce:	6125      	str	r5, [r4, #16]
 80110d0:	4658      	mov	r0, fp
 80110d2:	f000 fbd3 	bl	801187c <__hi0bits>
 80110d6:	016d      	lsls	r5, r5, #5
 80110d8:	f8d8 6000 	ldr.w	r6, [r8]
 80110dc:	1a2d      	subs	r5, r5, r0
 80110de:	42b5      	cmp	r5, r6
 80110e0:	dd54      	ble.n	801118c <__gethex+0x228>
 80110e2:	1bad      	subs	r5, r5, r6
 80110e4:	4629      	mov	r1, r5
 80110e6:	4620      	mov	r0, r4
 80110e8:	f000 ff5f 	bl	8011faa <__any_on>
 80110ec:	4681      	mov	r9, r0
 80110ee:	b178      	cbz	r0, 8011110 <__gethex+0x1ac>
 80110f0:	1e6b      	subs	r3, r5, #1
 80110f2:	1159      	asrs	r1, r3, #5
 80110f4:	f003 021f 	and.w	r2, r3, #31
 80110f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80110fc:	f04f 0901 	mov.w	r9, #1
 8011100:	fa09 f202 	lsl.w	r2, r9, r2
 8011104:	420a      	tst	r2, r1
 8011106:	d003      	beq.n	8011110 <__gethex+0x1ac>
 8011108:	454b      	cmp	r3, r9
 801110a:	dc36      	bgt.n	801117a <__gethex+0x216>
 801110c:	f04f 0902 	mov.w	r9, #2
 8011110:	4629      	mov	r1, r5
 8011112:	4620      	mov	r0, r4
 8011114:	f7ff febe 	bl	8010e94 <rshift>
 8011118:	442f      	add	r7, r5
 801111a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801111e:	42bb      	cmp	r3, r7
 8011120:	da42      	bge.n	80111a8 <__gethex+0x244>
 8011122:	9801      	ldr	r0, [sp, #4]
 8011124:	4621      	mov	r1, r4
 8011126:	f000 faf7 	bl	8011718 <_Bfree>
 801112a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801112c:	2300      	movs	r3, #0
 801112e:	6013      	str	r3, [r2, #0]
 8011130:	25a3      	movs	r5, #163	@ 0xa3
 8011132:	e793      	b.n	801105c <__gethex+0xf8>
 8011134:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011138:	2a2e      	cmp	r2, #46	@ 0x2e
 801113a:	d012      	beq.n	8011162 <__gethex+0x1fe>
 801113c:	2b20      	cmp	r3, #32
 801113e:	d104      	bne.n	801114a <__gethex+0x1e6>
 8011140:	f845 bb04 	str.w	fp, [r5], #4
 8011144:	f04f 0b00 	mov.w	fp, #0
 8011148:	465b      	mov	r3, fp
 801114a:	7830      	ldrb	r0, [r6, #0]
 801114c:	9303      	str	r3, [sp, #12]
 801114e:	f7ff fef3 	bl	8010f38 <__hexdig_fun>
 8011152:	9b03      	ldr	r3, [sp, #12]
 8011154:	f000 000f 	and.w	r0, r0, #15
 8011158:	4098      	lsls	r0, r3
 801115a:	ea4b 0b00 	orr.w	fp, fp, r0
 801115e:	3304      	adds	r3, #4
 8011160:	e7ae      	b.n	80110c0 <__gethex+0x15c>
 8011162:	45b1      	cmp	r9, r6
 8011164:	d8ea      	bhi.n	801113c <__gethex+0x1d8>
 8011166:	492b      	ldr	r1, [pc, #172]	@ (8011214 <__gethex+0x2b0>)
 8011168:	9303      	str	r3, [sp, #12]
 801116a:	2201      	movs	r2, #1
 801116c:	4630      	mov	r0, r6
 801116e:	f7fe fea3 	bl	800feb8 <strncmp>
 8011172:	9b03      	ldr	r3, [sp, #12]
 8011174:	2800      	cmp	r0, #0
 8011176:	d1e1      	bne.n	801113c <__gethex+0x1d8>
 8011178:	e7a2      	b.n	80110c0 <__gethex+0x15c>
 801117a:	1ea9      	subs	r1, r5, #2
 801117c:	4620      	mov	r0, r4
 801117e:	f000 ff14 	bl	8011faa <__any_on>
 8011182:	2800      	cmp	r0, #0
 8011184:	d0c2      	beq.n	801110c <__gethex+0x1a8>
 8011186:	f04f 0903 	mov.w	r9, #3
 801118a:	e7c1      	b.n	8011110 <__gethex+0x1ac>
 801118c:	da09      	bge.n	80111a2 <__gethex+0x23e>
 801118e:	1b75      	subs	r5, r6, r5
 8011190:	4621      	mov	r1, r4
 8011192:	9801      	ldr	r0, [sp, #4]
 8011194:	462a      	mov	r2, r5
 8011196:	f000 fccf 	bl	8011b38 <__lshift>
 801119a:	1b7f      	subs	r7, r7, r5
 801119c:	4604      	mov	r4, r0
 801119e:	f100 0a14 	add.w	sl, r0, #20
 80111a2:	f04f 0900 	mov.w	r9, #0
 80111a6:	e7b8      	b.n	801111a <__gethex+0x1b6>
 80111a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80111ac:	42bd      	cmp	r5, r7
 80111ae:	dd6f      	ble.n	8011290 <__gethex+0x32c>
 80111b0:	1bed      	subs	r5, r5, r7
 80111b2:	42ae      	cmp	r6, r5
 80111b4:	dc34      	bgt.n	8011220 <__gethex+0x2bc>
 80111b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80111ba:	2b02      	cmp	r3, #2
 80111bc:	d022      	beq.n	8011204 <__gethex+0x2a0>
 80111be:	2b03      	cmp	r3, #3
 80111c0:	d024      	beq.n	801120c <__gethex+0x2a8>
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	d115      	bne.n	80111f2 <__gethex+0x28e>
 80111c6:	42ae      	cmp	r6, r5
 80111c8:	d113      	bne.n	80111f2 <__gethex+0x28e>
 80111ca:	2e01      	cmp	r6, #1
 80111cc:	d10b      	bne.n	80111e6 <__gethex+0x282>
 80111ce:	9a02      	ldr	r2, [sp, #8]
 80111d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80111d4:	6013      	str	r3, [r2, #0]
 80111d6:	2301      	movs	r3, #1
 80111d8:	6123      	str	r3, [r4, #16]
 80111da:	f8ca 3000 	str.w	r3, [sl]
 80111de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80111e0:	2562      	movs	r5, #98	@ 0x62
 80111e2:	601c      	str	r4, [r3, #0]
 80111e4:	e73a      	b.n	801105c <__gethex+0xf8>
 80111e6:	1e71      	subs	r1, r6, #1
 80111e8:	4620      	mov	r0, r4
 80111ea:	f000 fede 	bl	8011faa <__any_on>
 80111ee:	2800      	cmp	r0, #0
 80111f0:	d1ed      	bne.n	80111ce <__gethex+0x26a>
 80111f2:	9801      	ldr	r0, [sp, #4]
 80111f4:	4621      	mov	r1, r4
 80111f6:	f000 fa8f 	bl	8011718 <_Bfree>
 80111fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111fc:	2300      	movs	r3, #0
 80111fe:	6013      	str	r3, [r2, #0]
 8011200:	2550      	movs	r5, #80	@ 0x50
 8011202:	e72b      	b.n	801105c <__gethex+0xf8>
 8011204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011206:	2b00      	cmp	r3, #0
 8011208:	d1f3      	bne.n	80111f2 <__gethex+0x28e>
 801120a:	e7e0      	b.n	80111ce <__gethex+0x26a>
 801120c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801120e:	2b00      	cmp	r3, #0
 8011210:	d1dd      	bne.n	80111ce <__gethex+0x26a>
 8011212:	e7ee      	b.n	80111f2 <__gethex+0x28e>
 8011214:	0806d587 	.word	0x0806d587
 8011218:	0806d6c3 	.word	0x0806d6c3
 801121c:	0806d6d4 	.word	0x0806d6d4
 8011220:	1e6f      	subs	r7, r5, #1
 8011222:	f1b9 0f00 	cmp.w	r9, #0
 8011226:	d130      	bne.n	801128a <__gethex+0x326>
 8011228:	b127      	cbz	r7, 8011234 <__gethex+0x2d0>
 801122a:	4639      	mov	r1, r7
 801122c:	4620      	mov	r0, r4
 801122e:	f000 febc 	bl	8011faa <__any_on>
 8011232:	4681      	mov	r9, r0
 8011234:	117a      	asrs	r2, r7, #5
 8011236:	2301      	movs	r3, #1
 8011238:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801123c:	f007 071f 	and.w	r7, r7, #31
 8011240:	40bb      	lsls	r3, r7
 8011242:	4213      	tst	r3, r2
 8011244:	4629      	mov	r1, r5
 8011246:	4620      	mov	r0, r4
 8011248:	bf18      	it	ne
 801124a:	f049 0902 	orrne.w	r9, r9, #2
 801124e:	f7ff fe21 	bl	8010e94 <rshift>
 8011252:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011256:	1b76      	subs	r6, r6, r5
 8011258:	2502      	movs	r5, #2
 801125a:	f1b9 0f00 	cmp.w	r9, #0
 801125e:	d047      	beq.n	80112f0 <__gethex+0x38c>
 8011260:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011264:	2b02      	cmp	r3, #2
 8011266:	d015      	beq.n	8011294 <__gethex+0x330>
 8011268:	2b03      	cmp	r3, #3
 801126a:	d017      	beq.n	801129c <__gethex+0x338>
 801126c:	2b01      	cmp	r3, #1
 801126e:	d109      	bne.n	8011284 <__gethex+0x320>
 8011270:	f019 0f02 	tst.w	r9, #2
 8011274:	d006      	beq.n	8011284 <__gethex+0x320>
 8011276:	f8da 3000 	ldr.w	r3, [sl]
 801127a:	ea49 0903 	orr.w	r9, r9, r3
 801127e:	f019 0f01 	tst.w	r9, #1
 8011282:	d10e      	bne.n	80112a2 <__gethex+0x33e>
 8011284:	f045 0510 	orr.w	r5, r5, #16
 8011288:	e032      	b.n	80112f0 <__gethex+0x38c>
 801128a:	f04f 0901 	mov.w	r9, #1
 801128e:	e7d1      	b.n	8011234 <__gethex+0x2d0>
 8011290:	2501      	movs	r5, #1
 8011292:	e7e2      	b.n	801125a <__gethex+0x2f6>
 8011294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011296:	f1c3 0301 	rsb	r3, r3, #1
 801129a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801129c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d0f0      	beq.n	8011284 <__gethex+0x320>
 80112a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80112a6:	f104 0314 	add.w	r3, r4, #20
 80112aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80112ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80112b2:	f04f 0c00 	mov.w	ip, #0
 80112b6:	4618      	mov	r0, r3
 80112b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80112bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80112c0:	d01b      	beq.n	80112fa <__gethex+0x396>
 80112c2:	3201      	adds	r2, #1
 80112c4:	6002      	str	r2, [r0, #0]
 80112c6:	2d02      	cmp	r5, #2
 80112c8:	f104 0314 	add.w	r3, r4, #20
 80112cc:	d13c      	bne.n	8011348 <__gethex+0x3e4>
 80112ce:	f8d8 2000 	ldr.w	r2, [r8]
 80112d2:	3a01      	subs	r2, #1
 80112d4:	42b2      	cmp	r2, r6
 80112d6:	d109      	bne.n	80112ec <__gethex+0x388>
 80112d8:	1171      	asrs	r1, r6, #5
 80112da:	2201      	movs	r2, #1
 80112dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80112e0:	f006 061f 	and.w	r6, r6, #31
 80112e4:	fa02 f606 	lsl.w	r6, r2, r6
 80112e8:	421e      	tst	r6, r3
 80112ea:	d13a      	bne.n	8011362 <__gethex+0x3fe>
 80112ec:	f045 0520 	orr.w	r5, r5, #32
 80112f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112f2:	601c      	str	r4, [r3, #0]
 80112f4:	9b02      	ldr	r3, [sp, #8]
 80112f6:	601f      	str	r7, [r3, #0]
 80112f8:	e6b0      	b.n	801105c <__gethex+0xf8>
 80112fa:	4299      	cmp	r1, r3
 80112fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8011300:	d8d9      	bhi.n	80112b6 <__gethex+0x352>
 8011302:	68a3      	ldr	r3, [r4, #8]
 8011304:	459b      	cmp	fp, r3
 8011306:	db17      	blt.n	8011338 <__gethex+0x3d4>
 8011308:	6861      	ldr	r1, [r4, #4]
 801130a:	9801      	ldr	r0, [sp, #4]
 801130c:	3101      	adds	r1, #1
 801130e:	f000 f9c3 	bl	8011698 <_Balloc>
 8011312:	4681      	mov	r9, r0
 8011314:	b918      	cbnz	r0, 801131e <__gethex+0x3ba>
 8011316:	4b1a      	ldr	r3, [pc, #104]	@ (8011380 <__gethex+0x41c>)
 8011318:	4602      	mov	r2, r0
 801131a:	2184      	movs	r1, #132	@ 0x84
 801131c:	e6c5      	b.n	80110aa <__gethex+0x146>
 801131e:	6922      	ldr	r2, [r4, #16]
 8011320:	3202      	adds	r2, #2
 8011322:	f104 010c 	add.w	r1, r4, #12
 8011326:	0092      	lsls	r2, r2, #2
 8011328:	300c      	adds	r0, #12
 801132a:	f7fe fed4 	bl	80100d6 <memcpy>
 801132e:	4621      	mov	r1, r4
 8011330:	9801      	ldr	r0, [sp, #4]
 8011332:	f000 f9f1 	bl	8011718 <_Bfree>
 8011336:	464c      	mov	r4, r9
 8011338:	6923      	ldr	r3, [r4, #16]
 801133a:	1c5a      	adds	r2, r3, #1
 801133c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011340:	6122      	str	r2, [r4, #16]
 8011342:	2201      	movs	r2, #1
 8011344:	615a      	str	r2, [r3, #20]
 8011346:	e7be      	b.n	80112c6 <__gethex+0x362>
 8011348:	6922      	ldr	r2, [r4, #16]
 801134a:	455a      	cmp	r2, fp
 801134c:	dd0b      	ble.n	8011366 <__gethex+0x402>
 801134e:	2101      	movs	r1, #1
 8011350:	4620      	mov	r0, r4
 8011352:	f7ff fd9f 	bl	8010e94 <rshift>
 8011356:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801135a:	3701      	adds	r7, #1
 801135c:	42bb      	cmp	r3, r7
 801135e:	f6ff aee0 	blt.w	8011122 <__gethex+0x1be>
 8011362:	2501      	movs	r5, #1
 8011364:	e7c2      	b.n	80112ec <__gethex+0x388>
 8011366:	f016 061f 	ands.w	r6, r6, #31
 801136a:	d0fa      	beq.n	8011362 <__gethex+0x3fe>
 801136c:	4453      	add	r3, sl
 801136e:	f1c6 0620 	rsb	r6, r6, #32
 8011372:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011376:	f000 fa81 	bl	801187c <__hi0bits>
 801137a:	42b0      	cmp	r0, r6
 801137c:	dbe7      	blt.n	801134e <__gethex+0x3ea>
 801137e:	e7f0      	b.n	8011362 <__gethex+0x3fe>
 8011380:	0806d6c3 	.word	0x0806d6c3

08011384 <L_shift>:
 8011384:	f1c2 0208 	rsb	r2, r2, #8
 8011388:	0092      	lsls	r2, r2, #2
 801138a:	b570      	push	{r4, r5, r6, lr}
 801138c:	f1c2 0620 	rsb	r6, r2, #32
 8011390:	6843      	ldr	r3, [r0, #4]
 8011392:	6804      	ldr	r4, [r0, #0]
 8011394:	fa03 f506 	lsl.w	r5, r3, r6
 8011398:	432c      	orrs	r4, r5
 801139a:	40d3      	lsrs	r3, r2
 801139c:	6004      	str	r4, [r0, #0]
 801139e:	f840 3f04 	str.w	r3, [r0, #4]!
 80113a2:	4288      	cmp	r0, r1
 80113a4:	d3f4      	bcc.n	8011390 <L_shift+0xc>
 80113a6:	bd70      	pop	{r4, r5, r6, pc}

080113a8 <__match>:
 80113a8:	b530      	push	{r4, r5, lr}
 80113aa:	6803      	ldr	r3, [r0, #0]
 80113ac:	3301      	adds	r3, #1
 80113ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113b2:	b914      	cbnz	r4, 80113ba <__match+0x12>
 80113b4:	6003      	str	r3, [r0, #0]
 80113b6:	2001      	movs	r0, #1
 80113b8:	bd30      	pop	{r4, r5, pc}
 80113ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80113c2:	2d19      	cmp	r5, #25
 80113c4:	bf98      	it	ls
 80113c6:	3220      	addls	r2, #32
 80113c8:	42a2      	cmp	r2, r4
 80113ca:	d0f0      	beq.n	80113ae <__match+0x6>
 80113cc:	2000      	movs	r0, #0
 80113ce:	e7f3      	b.n	80113b8 <__match+0x10>

080113d0 <__hexnan>:
 80113d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d4:	680b      	ldr	r3, [r1, #0]
 80113d6:	6801      	ldr	r1, [r0, #0]
 80113d8:	115e      	asrs	r6, r3, #5
 80113da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80113de:	f013 031f 	ands.w	r3, r3, #31
 80113e2:	b087      	sub	sp, #28
 80113e4:	bf18      	it	ne
 80113e6:	3604      	addne	r6, #4
 80113e8:	2500      	movs	r5, #0
 80113ea:	1f37      	subs	r7, r6, #4
 80113ec:	4682      	mov	sl, r0
 80113ee:	4690      	mov	r8, r2
 80113f0:	9301      	str	r3, [sp, #4]
 80113f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80113f6:	46b9      	mov	r9, r7
 80113f8:	463c      	mov	r4, r7
 80113fa:	9502      	str	r5, [sp, #8]
 80113fc:	46ab      	mov	fp, r5
 80113fe:	784a      	ldrb	r2, [r1, #1]
 8011400:	1c4b      	adds	r3, r1, #1
 8011402:	9303      	str	r3, [sp, #12]
 8011404:	b342      	cbz	r2, 8011458 <__hexnan+0x88>
 8011406:	4610      	mov	r0, r2
 8011408:	9105      	str	r1, [sp, #20]
 801140a:	9204      	str	r2, [sp, #16]
 801140c:	f7ff fd94 	bl	8010f38 <__hexdig_fun>
 8011410:	2800      	cmp	r0, #0
 8011412:	d151      	bne.n	80114b8 <__hexnan+0xe8>
 8011414:	9a04      	ldr	r2, [sp, #16]
 8011416:	9905      	ldr	r1, [sp, #20]
 8011418:	2a20      	cmp	r2, #32
 801141a:	d818      	bhi.n	801144e <__hexnan+0x7e>
 801141c:	9b02      	ldr	r3, [sp, #8]
 801141e:	459b      	cmp	fp, r3
 8011420:	dd13      	ble.n	801144a <__hexnan+0x7a>
 8011422:	454c      	cmp	r4, r9
 8011424:	d206      	bcs.n	8011434 <__hexnan+0x64>
 8011426:	2d07      	cmp	r5, #7
 8011428:	dc04      	bgt.n	8011434 <__hexnan+0x64>
 801142a:	462a      	mov	r2, r5
 801142c:	4649      	mov	r1, r9
 801142e:	4620      	mov	r0, r4
 8011430:	f7ff ffa8 	bl	8011384 <L_shift>
 8011434:	4544      	cmp	r4, r8
 8011436:	d952      	bls.n	80114de <__hexnan+0x10e>
 8011438:	2300      	movs	r3, #0
 801143a:	f1a4 0904 	sub.w	r9, r4, #4
 801143e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011442:	f8cd b008 	str.w	fp, [sp, #8]
 8011446:	464c      	mov	r4, r9
 8011448:	461d      	mov	r5, r3
 801144a:	9903      	ldr	r1, [sp, #12]
 801144c:	e7d7      	b.n	80113fe <__hexnan+0x2e>
 801144e:	2a29      	cmp	r2, #41	@ 0x29
 8011450:	d157      	bne.n	8011502 <__hexnan+0x132>
 8011452:	3102      	adds	r1, #2
 8011454:	f8ca 1000 	str.w	r1, [sl]
 8011458:	f1bb 0f00 	cmp.w	fp, #0
 801145c:	d051      	beq.n	8011502 <__hexnan+0x132>
 801145e:	454c      	cmp	r4, r9
 8011460:	d206      	bcs.n	8011470 <__hexnan+0xa0>
 8011462:	2d07      	cmp	r5, #7
 8011464:	dc04      	bgt.n	8011470 <__hexnan+0xa0>
 8011466:	462a      	mov	r2, r5
 8011468:	4649      	mov	r1, r9
 801146a:	4620      	mov	r0, r4
 801146c:	f7ff ff8a 	bl	8011384 <L_shift>
 8011470:	4544      	cmp	r4, r8
 8011472:	d936      	bls.n	80114e2 <__hexnan+0x112>
 8011474:	f1a8 0204 	sub.w	r2, r8, #4
 8011478:	4623      	mov	r3, r4
 801147a:	f853 1b04 	ldr.w	r1, [r3], #4
 801147e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011482:	429f      	cmp	r7, r3
 8011484:	d2f9      	bcs.n	801147a <__hexnan+0xaa>
 8011486:	1b3b      	subs	r3, r7, r4
 8011488:	f023 0303 	bic.w	r3, r3, #3
 801148c:	3304      	adds	r3, #4
 801148e:	3401      	adds	r4, #1
 8011490:	3e03      	subs	r6, #3
 8011492:	42b4      	cmp	r4, r6
 8011494:	bf88      	it	hi
 8011496:	2304      	movhi	r3, #4
 8011498:	4443      	add	r3, r8
 801149a:	2200      	movs	r2, #0
 801149c:	f843 2b04 	str.w	r2, [r3], #4
 80114a0:	429f      	cmp	r7, r3
 80114a2:	d2fb      	bcs.n	801149c <__hexnan+0xcc>
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	b91b      	cbnz	r3, 80114b0 <__hexnan+0xe0>
 80114a8:	4547      	cmp	r7, r8
 80114aa:	d128      	bne.n	80114fe <__hexnan+0x12e>
 80114ac:	2301      	movs	r3, #1
 80114ae:	603b      	str	r3, [r7, #0]
 80114b0:	2005      	movs	r0, #5
 80114b2:	b007      	add	sp, #28
 80114b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b8:	3501      	adds	r5, #1
 80114ba:	2d08      	cmp	r5, #8
 80114bc:	f10b 0b01 	add.w	fp, fp, #1
 80114c0:	dd06      	ble.n	80114d0 <__hexnan+0x100>
 80114c2:	4544      	cmp	r4, r8
 80114c4:	d9c1      	bls.n	801144a <__hexnan+0x7a>
 80114c6:	2300      	movs	r3, #0
 80114c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80114cc:	2501      	movs	r5, #1
 80114ce:	3c04      	subs	r4, #4
 80114d0:	6822      	ldr	r2, [r4, #0]
 80114d2:	f000 000f 	and.w	r0, r0, #15
 80114d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80114da:	6020      	str	r0, [r4, #0]
 80114dc:	e7b5      	b.n	801144a <__hexnan+0x7a>
 80114de:	2508      	movs	r5, #8
 80114e0:	e7b3      	b.n	801144a <__hexnan+0x7a>
 80114e2:	9b01      	ldr	r3, [sp, #4]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d0dd      	beq.n	80114a4 <__hexnan+0xd4>
 80114e8:	f1c3 0320 	rsb	r3, r3, #32
 80114ec:	f04f 32ff 	mov.w	r2, #4294967295
 80114f0:	40da      	lsrs	r2, r3
 80114f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80114f6:	4013      	ands	r3, r2
 80114f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80114fc:	e7d2      	b.n	80114a4 <__hexnan+0xd4>
 80114fe:	3f04      	subs	r7, #4
 8011500:	e7d0      	b.n	80114a4 <__hexnan+0xd4>
 8011502:	2004      	movs	r0, #4
 8011504:	e7d5      	b.n	80114b2 <__hexnan+0xe2>
	...

08011508 <malloc>:
 8011508:	4b02      	ldr	r3, [pc, #8]	@ (8011514 <malloc+0xc>)
 801150a:	4601      	mov	r1, r0
 801150c:	6818      	ldr	r0, [r3, #0]
 801150e:	f000 b825 	b.w	801155c <_malloc_r>
 8011512:	bf00      	nop
 8011514:	20000280 	.word	0x20000280

08011518 <sbrk_aligned>:
 8011518:	b570      	push	{r4, r5, r6, lr}
 801151a:	4e0f      	ldr	r6, [pc, #60]	@ (8011558 <sbrk_aligned+0x40>)
 801151c:	460c      	mov	r4, r1
 801151e:	6831      	ldr	r1, [r6, #0]
 8011520:	4605      	mov	r5, r0
 8011522:	b911      	cbnz	r1, 801152a <sbrk_aligned+0x12>
 8011524:	f001 fb30 	bl	8012b88 <_sbrk_r>
 8011528:	6030      	str	r0, [r6, #0]
 801152a:	4621      	mov	r1, r4
 801152c:	4628      	mov	r0, r5
 801152e:	f001 fb2b 	bl	8012b88 <_sbrk_r>
 8011532:	1c43      	adds	r3, r0, #1
 8011534:	d103      	bne.n	801153e <sbrk_aligned+0x26>
 8011536:	f04f 34ff 	mov.w	r4, #4294967295
 801153a:	4620      	mov	r0, r4
 801153c:	bd70      	pop	{r4, r5, r6, pc}
 801153e:	1cc4      	adds	r4, r0, #3
 8011540:	f024 0403 	bic.w	r4, r4, #3
 8011544:	42a0      	cmp	r0, r4
 8011546:	d0f8      	beq.n	801153a <sbrk_aligned+0x22>
 8011548:	1a21      	subs	r1, r4, r0
 801154a:	4628      	mov	r0, r5
 801154c:	f001 fb1c 	bl	8012b88 <_sbrk_r>
 8011550:	3001      	adds	r0, #1
 8011552:	d1f2      	bne.n	801153a <sbrk_aligned+0x22>
 8011554:	e7ef      	b.n	8011536 <sbrk_aligned+0x1e>
 8011556:	bf00      	nop
 8011558:	2001a71c 	.word	0x2001a71c

0801155c <_malloc_r>:
 801155c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011560:	1ccd      	adds	r5, r1, #3
 8011562:	f025 0503 	bic.w	r5, r5, #3
 8011566:	3508      	adds	r5, #8
 8011568:	2d0c      	cmp	r5, #12
 801156a:	bf38      	it	cc
 801156c:	250c      	movcc	r5, #12
 801156e:	2d00      	cmp	r5, #0
 8011570:	4606      	mov	r6, r0
 8011572:	db01      	blt.n	8011578 <_malloc_r+0x1c>
 8011574:	42a9      	cmp	r1, r5
 8011576:	d904      	bls.n	8011582 <_malloc_r+0x26>
 8011578:	230c      	movs	r3, #12
 801157a:	6033      	str	r3, [r6, #0]
 801157c:	2000      	movs	r0, #0
 801157e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011582:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011658 <_malloc_r+0xfc>
 8011586:	f000 f87b 	bl	8011680 <__malloc_lock>
 801158a:	f8d8 3000 	ldr.w	r3, [r8]
 801158e:	461c      	mov	r4, r3
 8011590:	bb44      	cbnz	r4, 80115e4 <_malloc_r+0x88>
 8011592:	4629      	mov	r1, r5
 8011594:	4630      	mov	r0, r6
 8011596:	f7ff ffbf 	bl	8011518 <sbrk_aligned>
 801159a:	1c43      	adds	r3, r0, #1
 801159c:	4604      	mov	r4, r0
 801159e:	d158      	bne.n	8011652 <_malloc_r+0xf6>
 80115a0:	f8d8 4000 	ldr.w	r4, [r8]
 80115a4:	4627      	mov	r7, r4
 80115a6:	2f00      	cmp	r7, #0
 80115a8:	d143      	bne.n	8011632 <_malloc_r+0xd6>
 80115aa:	2c00      	cmp	r4, #0
 80115ac:	d04b      	beq.n	8011646 <_malloc_r+0xea>
 80115ae:	6823      	ldr	r3, [r4, #0]
 80115b0:	4639      	mov	r1, r7
 80115b2:	4630      	mov	r0, r6
 80115b4:	eb04 0903 	add.w	r9, r4, r3
 80115b8:	f001 fae6 	bl	8012b88 <_sbrk_r>
 80115bc:	4581      	cmp	r9, r0
 80115be:	d142      	bne.n	8011646 <_malloc_r+0xea>
 80115c0:	6821      	ldr	r1, [r4, #0]
 80115c2:	1a6d      	subs	r5, r5, r1
 80115c4:	4629      	mov	r1, r5
 80115c6:	4630      	mov	r0, r6
 80115c8:	f7ff ffa6 	bl	8011518 <sbrk_aligned>
 80115cc:	3001      	adds	r0, #1
 80115ce:	d03a      	beq.n	8011646 <_malloc_r+0xea>
 80115d0:	6823      	ldr	r3, [r4, #0]
 80115d2:	442b      	add	r3, r5
 80115d4:	6023      	str	r3, [r4, #0]
 80115d6:	f8d8 3000 	ldr.w	r3, [r8]
 80115da:	685a      	ldr	r2, [r3, #4]
 80115dc:	bb62      	cbnz	r2, 8011638 <_malloc_r+0xdc>
 80115de:	f8c8 7000 	str.w	r7, [r8]
 80115e2:	e00f      	b.n	8011604 <_malloc_r+0xa8>
 80115e4:	6822      	ldr	r2, [r4, #0]
 80115e6:	1b52      	subs	r2, r2, r5
 80115e8:	d420      	bmi.n	801162c <_malloc_r+0xd0>
 80115ea:	2a0b      	cmp	r2, #11
 80115ec:	d917      	bls.n	801161e <_malloc_r+0xc2>
 80115ee:	1961      	adds	r1, r4, r5
 80115f0:	42a3      	cmp	r3, r4
 80115f2:	6025      	str	r5, [r4, #0]
 80115f4:	bf18      	it	ne
 80115f6:	6059      	strne	r1, [r3, #4]
 80115f8:	6863      	ldr	r3, [r4, #4]
 80115fa:	bf08      	it	eq
 80115fc:	f8c8 1000 	streq.w	r1, [r8]
 8011600:	5162      	str	r2, [r4, r5]
 8011602:	604b      	str	r3, [r1, #4]
 8011604:	4630      	mov	r0, r6
 8011606:	f000 f841 	bl	801168c <__malloc_unlock>
 801160a:	f104 000b 	add.w	r0, r4, #11
 801160e:	1d23      	adds	r3, r4, #4
 8011610:	f020 0007 	bic.w	r0, r0, #7
 8011614:	1ac2      	subs	r2, r0, r3
 8011616:	bf1c      	itt	ne
 8011618:	1a1b      	subne	r3, r3, r0
 801161a:	50a3      	strne	r3, [r4, r2]
 801161c:	e7af      	b.n	801157e <_malloc_r+0x22>
 801161e:	6862      	ldr	r2, [r4, #4]
 8011620:	42a3      	cmp	r3, r4
 8011622:	bf0c      	ite	eq
 8011624:	f8c8 2000 	streq.w	r2, [r8]
 8011628:	605a      	strne	r2, [r3, #4]
 801162a:	e7eb      	b.n	8011604 <_malloc_r+0xa8>
 801162c:	4623      	mov	r3, r4
 801162e:	6864      	ldr	r4, [r4, #4]
 8011630:	e7ae      	b.n	8011590 <_malloc_r+0x34>
 8011632:	463c      	mov	r4, r7
 8011634:	687f      	ldr	r7, [r7, #4]
 8011636:	e7b6      	b.n	80115a6 <_malloc_r+0x4a>
 8011638:	461a      	mov	r2, r3
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	42a3      	cmp	r3, r4
 801163e:	d1fb      	bne.n	8011638 <_malloc_r+0xdc>
 8011640:	2300      	movs	r3, #0
 8011642:	6053      	str	r3, [r2, #4]
 8011644:	e7de      	b.n	8011604 <_malloc_r+0xa8>
 8011646:	230c      	movs	r3, #12
 8011648:	6033      	str	r3, [r6, #0]
 801164a:	4630      	mov	r0, r6
 801164c:	f000 f81e 	bl	801168c <__malloc_unlock>
 8011650:	e794      	b.n	801157c <_malloc_r+0x20>
 8011652:	6005      	str	r5, [r0, #0]
 8011654:	e7d6      	b.n	8011604 <_malloc_r+0xa8>
 8011656:	bf00      	nop
 8011658:	2001a720 	.word	0x2001a720

0801165c <__ascii_mbtowc>:
 801165c:	b082      	sub	sp, #8
 801165e:	b901      	cbnz	r1, 8011662 <__ascii_mbtowc+0x6>
 8011660:	a901      	add	r1, sp, #4
 8011662:	b142      	cbz	r2, 8011676 <__ascii_mbtowc+0x1a>
 8011664:	b14b      	cbz	r3, 801167a <__ascii_mbtowc+0x1e>
 8011666:	7813      	ldrb	r3, [r2, #0]
 8011668:	600b      	str	r3, [r1, #0]
 801166a:	7812      	ldrb	r2, [r2, #0]
 801166c:	1e10      	subs	r0, r2, #0
 801166e:	bf18      	it	ne
 8011670:	2001      	movne	r0, #1
 8011672:	b002      	add	sp, #8
 8011674:	4770      	bx	lr
 8011676:	4610      	mov	r0, r2
 8011678:	e7fb      	b.n	8011672 <__ascii_mbtowc+0x16>
 801167a:	f06f 0001 	mvn.w	r0, #1
 801167e:	e7f8      	b.n	8011672 <__ascii_mbtowc+0x16>

08011680 <__malloc_lock>:
 8011680:	4801      	ldr	r0, [pc, #4]	@ (8011688 <__malloc_lock+0x8>)
 8011682:	f7fe bd26 	b.w	80100d2 <__retarget_lock_acquire_recursive>
 8011686:	bf00      	nop
 8011688:	2001a718 	.word	0x2001a718

0801168c <__malloc_unlock>:
 801168c:	4801      	ldr	r0, [pc, #4]	@ (8011694 <__malloc_unlock+0x8>)
 801168e:	f7fe bd21 	b.w	80100d4 <__retarget_lock_release_recursive>
 8011692:	bf00      	nop
 8011694:	2001a718 	.word	0x2001a718

08011698 <_Balloc>:
 8011698:	b570      	push	{r4, r5, r6, lr}
 801169a:	69c6      	ldr	r6, [r0, #28]
 801169c:	4604      	mov	r4, r0
 801169e:	460d      	mov	r5, r1
 80116a0:	b976      	cbnz	r6, 80116c0 <_Balloc+0x28>
 80116a2:	2010      	movs	r0, #16
 80116a4:	f7ff ff30 	bl	8011508 <malloc>
 80116a8:	4602      	mov	r2, r0
 80116aa:	61e0      	str	r0, [r4, #28]
 80116ac:	b920      	cbnz	r0, 80116b8 <_Balloc+0x20>
 80116ae:	4b18      	ldr	r3, [pc, #96]	@ (8011710 <_Balloc+0x78>)
 80116b0:	4818      	ldr	r0, [pc, #96]	@ (8011714 <_Balloc+0x7c>)
 80116b2:	216b      	movs	r1, #107	@ 0x6b
 80116b4:	f7fe fd2e 	bl	8010114 <__assert_func>
 80116b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116bc:	6006      	str	r6, [r0, #0]
 80116be:	60c6      	str	r6, [r0, #12]
 80116c0:	69e6      	ldr	r6, [r4, #28]
 80116c2:	68f3      	ldr	r3, [r6, #12]
 80116c4:	b183      	cbz	r3, 80116e8 <_Balloc+0x50>
 80116c6:	69e3      	ldr	r3, [r4, #28]
 80116c8:	68db      	ldr	r3, [r3, #12]
 80116ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80116ce:	b9b8      	cbnz	r0, 8011700 <_Balloc+0x68>
 80116d0:	2101      	movs	r1, #1
 80116d2:	fa01 f605 	lsl.w	r6, r1, r5
 80116d6:	1d72      	adds	r2, r6, #5
 80116d8:	0092      	lsls	r2, r2, #2
 80116da:	4620      	mov	r0, r4
 80116dc:	f001 fa6b 	bl	8012bb6 <_calloc_r>
 80116e0:	b160      	cbz	r0, 80116fc <_Balloc+0x64>
 80116e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80116e6:	e00e      	b.n	8011706 <_Balloc+0x6e>
 80116e8:	2221      	movs	r2, #33	@ 0x21
 80116ea:	2104      	movs	r1, #4
 80116ec:	4620      	mov	r0, r4
 80116ee:	f001 fa62 	bl	8012bb6 <_calloc_r>
 80116f2:	69e3      	ldr	r3, [r4, #28]
 80116f4:	60f0      	str	r0, [r6, #12]
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d1e4      	bne.n	80116c6 <_Balloc+0x2e>
 80116fc:	2000      	movs	r0, #0
 80116fe:	bd70      	pop	{r4, r5, r6, pc}
 8011700:	6802      	ldr	r2, [r0, #0]
 8011702:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011706:	2300      	movs	r3, #0
 8011708:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801170c:	e7f7      	b.n	80116fe <_Balloc+0x66>
 801170e:	bf00      	nop
 8011710:	0806d518 	.word	0x0806d518
 8011714:	0806d734 	.word	0x0806d734

08011718 <_Bfree>:
 8011718:	b570      	push	{r4, r5, r6, lr}
 801171a:	69c6      	ldr	r6, [r0, #28]
 801171c:	4605      	mov	r5, r0
 801171e:	460c      	mov	r4, r1
 8011720:	b976      	cbnz	r6, 8011740 <_Bfree+0x28>
 8011722:	2010      	movs	r0, #16
 8011724:	f7ff fef0 	bl	8011508 <malloc>
 8011728:	4602      	mov	r2, r0
 801172a:	61e8      	str	r0, [r5, #28]
 801172c:	b920      	cbnz	r0, 8011738 <_Bfree+0x20>
 801172e:	4b09      	ldr	r3, [pc, #36]	@ (8011754 <_Bfree+0x3c>)
 8011730:	4809      	ldr	r0, [pc, #36]	@ (8011758 <_Bfree+0x40>)
 8011732:	218f      	movs	r1, #143	@ 0x8f
 8011734:	f7fe fcee 	bl	8010114 <__assert_func>
 8011738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801173c:	6006      	str	r6, [r0, #0]
 801173e:	60c6      	str	r6, [r0, #12]
 8011740:	b13c      	cbz	r4, 8011752 <_Bfree+0x3a>
 8011742:	69eb      	ldr	r3, [r5, #28]
 8011744:	6862      	ldr	r2, [r4, #4]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801174c:	6021      	str	r1, [r4, #0]
 801174e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011752:	bd70      	pop	{r4, r5, r6, pc}
 8011754:	0806d518 	.word	0x0806d518
 8011758:	0806d734 	.word	0x0806d734

0801175c <__multadd>:
 801175c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011760:	690d      	ldr	r5, [r1, #16]
 8011762:	4607      	mov	r7, r0
 8011764:	460c      	mov	r4, r1
 8011766:	461e      	mov	r6, r3
 8011768:	f101 0c14 	add.w	ip, r1, #20
 801176c:	2000      	movs	r0, #0
 801176e:	f8dc 3000 	ldr.w	r3, [ip]
 8011772:	b299      	uxth	r1, r3
 8011774:	fb02 6101 	mla	r1, r2, r1, r6
 8011778:	0c1e      	lsrs	r6, r3, #16
 801177a:	0c0b      	lsrs	r3, r1, #16
 801177c:	fb02 3306 	mla	r3, r2, r6, r3
 8011780:	b289      	uxth	r1, r1
 8011782:	3001      	adds	r0, #1
 8011784:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011788:	4285      	cmp	r5, r0
 801178a:	f84c 1b04 	str.w	r1, [ip], #4
 801178e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011792:	dcec      	bgt.n	801176e <__multadd+0x12>
 8011794:	b30e      	cbz	r6, 80117da <__multadd+0x7e>
 8011796:	68a3      	ldr	r3, [r4, #8]
 8011798:	42ab      	cmp	r3, r5
 801179a:	dc19      	bgt.n	80117d0 <__multadd+0x74>
 801179c:	6861      	ldr	r1, [r4, #4]
 801179e:	4638      	mov	r0, r7
 80117a0:	3101      	adds	r1, #1
 80117a2:	f7ff ff79 	bl	8011698 <_Balloc>
 80117a6:	4680      	mov	r8, r0
 80117a8:	b928      	cbnz	r0, 80117b6 <__multadd+0x5a>
 80117aa:	4602      	mov	r2, r0
 80117ac:	4b0c      	ldr	r3, [pc, #48]	@ (80117e0 <__multadd+0x84>)
 80117ae:	480d      	ldr	r0, [pc, #52]	@ (80117e4 <__multadd+0x88>)
 80117b0:	21ba      	movs	r1, #186	@ 0xba
 80117b2:	f7fe fcaf 	bl	8010114 <__assert_func>
 80117b6:	6922      	ldr	r2, [r4, #16]
 80117b8:	3202      	adds	r2, #2
 80117ba:	f104 010c 	add.w	r1, r4, #12
 80117be:	0092      	lsls	r2, r2, #2
 80117c0:	300c      	adds	r0, #12
 80117c2:	f7fe fc88 	bl	80100d6 <memcpy>
 80117c6:	4621      	mov	r1, r4
 80117c8:	4638      	mov	r0, r7
 80117ca:	f7ff ffa5 	bl	8011718 <_Bfree>
 80117ce:	4644      	mov	r4, r8
 80117d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80117d4:	3501      	adds	r5, #1
 80117d6:	615e      	str	r6, [r3, #20]
 80117d8:	6125      	str	r5, [r4, #16]
 80117da:	4620      	mov	r0, r4
 80117dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117e0:	0806d6c3 	.word	0x0806d6c3
 80117e4:	0806d734 	.word	0x0806d734

080117e8 <__s2b>:
 80117e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117ec:	460c      	mov	r4, r1
 80117ee:	4615      	mov	r5, r2
 80117f0:	461f      	mov	r7, r3
 80117f2:	2209      	movs	r2, #9
 80117f4:	3308      	adds	r3, #8
 80117f6:	4606      	mov	r6, r0
 80117f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80117fc:	2100      	movs	r1, #0
 80117fe:	2201      	movs	r2, #1
 8011800:	429a      	cmp	r2, r3
 8011802:	db09      	blt.n	8011818 <__s2b+0x30>
 8011804:	4630      	mov	r0, r6
 8011806:	f7ff ff47 	bl	8011698 <_Balloc>
 801180a:	b940      	cbnz	r0, 801181e <__s2b+0x36>
 801180c:	4602      	mov	r2, r0
 801180e:	4b19      	ldr	r3, [pc, #100]	@ (8011874 <__s2b+0x8c>)
 8011810:	4819      	ldr	r0, [pc, #100]	@ (8011878 <__s2b+0x90>)
 8011812:	21d3      	movs	r1, #211	@ 0xd3
 8011814:	f7fe fc7e 	bl	8010114 <__assert_func>
 8011818:	0052      	lsls	r2, r2, #1
 801181a:	3101      	adds	r1, #1
 801181c:	e7f0      	b.n	8011800 <__s2b+0x18>
 801181e:	9b08      	ldr	r3, [sp, #32]
 8011820:	6143      	str	r3, [r0, #20]
 8011822:	2d09      	cmp	r5, #9
 8011824:	f04f 0301 	mov.w	r3, #1
 8011828:	6103      	str	r3, [r0, #16]
 801182a:	dd16      	ble.n	801185a <__s2b+0x72>
 801182c:	f104 0909 	add.w	r9, r4, #9
 8011830:	46c8      	mov	r8, r9
 8011832:	442c      	add	r4, r5
 8011834:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011838:	4601      	mov	r1, r0
 801183a:	3b30      	subs	r3, #48	@ 0x30
 801183c:	220a      	movs	r2, #10
 801183e:	4630      	mov	r0, r6
 8011840:	f7ff ff8c 	bl	801175c <__multadd>
 8011844:	45a0      	cmp	r8, r4
 8011846:	d1f5      	bne.n	8011834 <__s2b+0x4c>
 8011848:	f1a5 0408 	sub.w	r4, r5, #8
 801184c:	444c      	add	r4, r9
 801184e:	1b2d      	subs	r5, r5, r4
 8011850:	1963      	adds	r3, r4, r5
 8011852:	42bb      	cmp	r3, r7
 8011854:	db04      	blt.n	8011860 <__s2b+0x78>
 8011856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801185a:	340a      	adds	r4, #10
 801185c:	2509      	movs	r5, #9
 801185e:	e7f6      	b.n	801184e <__s2b+0x66>
 8011860:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011864:	4601      	mov	r1, r0
 8011866:	3b30      	subs	r3, #48	@ 0x30
 8011868:	220a      	movs	r2, #10
 801186a:	4630      	mov	r0, r6
 801186c:	f7ff ff76 	bl	801175c <__multadd>
 8011870:	e7ee      	b.n	8011850 <__s2b+0x68>
 8011872:	bf00      	nop
 8011874:	0806d6c3 	.word	0x0806d6c3
 8011878:	0806d734 	.word	0x0806d734

0801187c <__hi0bits>:
 801187c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011880:	4603      	mov	r3, r0
 8011882:	bf36      	itet	cc
 8011884:	0403      	lslcc	r3, r0, #16
 8011886:	2000      	movcs	r0, #0
 8011888:	2010      	movcc	r0, #16
 801188a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801188e:	bf3c      	itt	cc
 8011890:	021b      	lslcc	r3, r3, #8
 8011892:	3008      	addcc	r0, #8
 8011894:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011898:	bf3c      	itt	cc
 801189a:	011b      	lslcc	r3, r3, #4
 801189c:	3004      	addcc	r0, #4
 801189e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80118a2:	bf3c      	itt	cc
 80118a4:	009b      	lslcc	r3, r3, #2
 80118a6:	3002      	addcc	r0, #2
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	db05      	blt.n	80118b8 <__hi0bits+0x3c>
 80118ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80118b0:	f100 0001 	add.w	r0, r0, #1
 80118b4:	bf08      	it	eq
 80118b6:	2020      	moveq	r0, #32
 80118b8:	4770      	bx	lr

080118ba <__lo0bits>:
 80118ba:	6803      	ldr	r3, [r0, #0]
 80118bc:	4602      	mov	r2, r0
 80118be:	f013 0007 	ands.w	r0, r3, #7
 80118c2:	d00b      	beq.n	80118dc <__lo0bits+0x22>
 80118c4:	07d9      	lsls	r1, r3, #31
 80118c6:	d421      	bmi.n	801190c <__lo0bits+0x52>
 80118c8:	0798      	lsls	r0, r3, #30
 80118ca:	bf49      	itett	mi
 80118cc:	085b      	lsrmi	r3, r3, #1
 80118ce:	089b      	lsrpl	r3, r3, #2
 80118d0:	2001      	movmi	r0, #1
 80118d2:	6013      	strmi	r3, [r2, #0]
 80118d4:	bf5c      	itt	pl
 80118d6:	6013      	strpl	r3, [r2, #0]
 80118d8:	2002      	movpl	r0, #2
 80118da:	4770      	bx	lr
 80118dc:	b299      	uxth	r1, r3
 80118de:	b909      	cbnz	r1, 80118e4 <__lo0bits+0x2a>
 80118e0:	0c1b      	lsrs	r3, r3, #16
 80118e2:	2010      	movs	r0, #16
 80118e4:	b2d9      	uxtb	r1, r3
 80118e6:	b909      	cbnz	r1, 80118ec <__lo0bits+0x32>
 80118e8:	3008      	adds	r0, #8
 80118ea:	0a1b      	lsrs	r3, r3, #8
 80118ec:	0719      	lsls	r1, r3, #28
 80118ee:	bf04      	itt	eq
 80118f0:	091b      	lsreq	r3, r3, #4
 80118f2:	3004      	addeq	r0, #4
 80118f4:	0799      	lsls	r1, r3, #30
 80118f6:	bf04      	itt	eq
 80118f8:	089b      	lsreq	r3, r3, #2
 80118fa:	3002      	addeq	r0, #2
 80118fc:	07d9      	lsls	r1, r3, #31
 80118fe:	d403      	bmi.n	8011908 <__lo0bits+0x4e>
 8011900:	085b      	lsrs	r3, r3, #1
 8011902:	f100 0001 	add.w	r0, r0, #1
 8011906:	d003      	beq.n	8011910 <__lo0bits+0x56>
 8011908:	6013      	str	r3, [r2, #0]
 801190a:	4770      	bx	lr
 801190c:	2000      	movs	r0, #0
 801190e:	4770      	bx	lr
 8011910:	2020      	movs	r0, #32
 8011912:	4770      	bx	lr

08011914 <__i2b>:
 8011914:	b510      	push	{r4, lr}
 8011916:	460c      	mov	r4, r1
 8011918:	2101      	movs	r1, #1
 801191a:	f7ff febd 	bl	8011698 <_Balloc>
 801191e:	4602      	mov	r2, r0
 8011920:	b928      	cbnz	r0, 801192e <__i2b+0x1a>
 8011922:	4b05      	ldr	r3, [pc, #20]	@ (8011938 <__i2b+0x24>)
 8011924:	4805      	ldr	r0, [pc, #20]	@ (801193c <__i2b+0x28>)
 8011926:	f240 1145 	movw	r1, #325	@ 0x145
 801192a:	f7fe fbf3 	bl	8010114 <__assert_func>
 801192e:	2301      	movs	r3, #1
 8011930:	6144      	str	r4, [r0, #20]
 8011932:	6103      	str	r3, [r0, #16]
 8011934:	bd10      	pop	{r4, pc}
 8011936:	bf00      	nop
 8011938:	0806d6c3 	.word	0x0806d6c3
 801193c:	0806d734 	.word	0x0806d734

08011940 <__multiply>:
 8011940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011944:	4617      	mov	r7, r2
 8011946:	690a      	ldr	r2, [r1, #16]
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	429a      	cmp	r2, r3
 801194c:	bfa8      	it	ge
 801194e:	463b      	movge	r3, r7
 8011950:	4689      	mov	r9, r1
 8011952:	bfa4      	itt	ge
 8011954:	460f      	movge	r7, r1
 8011956:	4699      	movge	r9, r3
 8011958:	693d      	ldr	r5, [r7, #16]
 801195a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	6879      	ldr	r1, [r7, #4]
 8011962:	eb05 060a 	add.w	r6, r5, sl
 8011966:	42b3      	cmp	r3, r6
 8011968:	b085      	sub	sp, #20
 801196a:	bfb8      	it	lt
 801196c:	3101      	addlt	r1, #1
 801196e:	f7ff fe93 	bl	8011698 <_Balloc>
 8011972:	b930      	cbnz	r0, 8011982 <__multiply+0x42>
 8011974:	4602      	mov	r2, r0
 8011976:	4b41      	ldr	r3, [pc, #260]	@ (8011a7c <__multiply+0x13c>)
 8011978:	4841      	ldr	r0, [pc, #260]	@ (8011a80 <__multiply+0x140>)
 801197a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801197e:	f7fe fbc9 	bl	8010114 <__assert_func>
 8011982:	f100 0414 	add.w	r4, r0, #20
 8011986:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801198a:	4623      	mov	r3, r4
 801198c:	2200      	movs	r2, #0
 801198e:	4573      	cmp	r3, lr
 8011990:	d320      	bcc.n	80119d4 <__multiply+0x94>
 8011992:	f107 0814 	add.w	r8, r7, #20
 8011996:	f109 0114 	add.w	r1, r9, #20
 801199a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801199e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80119a2:	9302      	str	r3, [sp, #8]
 80119a4:	1beb      	subs	r3, r5, r7
 80119a6:	3b15      	subs	r3, #21
 80119a8:	f023 0303 	bic.w	r3, r3, #3
 80119ac:	3304      	adds	r3, #4
 80119ae:	3715      	adds	r7, #21
 80119b0:	42bd      	cmp	r5, r7
 80119b2:	bf38      	it	cc
 80119b4:	2304      	movcc	r3, #4
 80119b6:	9301      	str	r3, [sp, #4]
 80119b8:	9b02      	ldr	r3, [sp, #8]
 80119ba:	9103      	str	r1, [sp, #12]
 80119bc:	428b      	cmp	r3, r1
 80119be:	d80c      	bhi.n	80119da <__multiply+0x9a>
 80119c0:	2e00      	cmp	r6, #0
 80119c2:	dd03      	ble.n	80119cc <__multiply+0x8c>
 80119c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d055      	beq.n	8011a78 <__multiply+0x138>
 80119cc:	6106      	str	r6, [r0, #16]
 80119ce:	b005      	add	sp, #20
 80119d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d4:	f843 2b04 	str.w	r2, [r3], #4
 80119d8:	e7d9      	b.n	801198e <__multiply+0x4e>
 80119da:	f8b1 a000 	ldrh.w	sl, [r1]
 80119de:	f1ba 0f00 	cmp.w	sl, #0
 80119e2:	d01f      	beq.n	8011a24 <__multiply+0xe4>
 80119e4:	46c4      	mov	ip, r8
 80119e6:	46a1      	mov	r9, r4
 80119e8:	2700      	movs	r7, #0
 80119ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 80119ee:	f8d9 3000 	ldr.w	r3, [r9]
 80119f2:	fa1f fb82 	uxth.w	fp, r2
 80119f6:	b29b      	uxth	r3, r3
 80119f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80119fc:	443b      	add	r3, r7
 80119fe:	f8d9 7000 	ldr.w	r7, [r9]
 8011a02:	0c12      	lsrs	r2, r2, #16
 8011a04:	0c3f      	lsrs	r7, r7, #16
 8011a06:	fb0a 7202 	mla	r2, sl, r2, r7
 8011a0a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a14:	4565      	cmp	r5, ip
 8011a16:	f849 3b04 	str.w	r3, [r9], #4
 8011a1a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011a1e:	d8e4      	bhi.n	80119ea <__multiply+0xaa>
 8011a20:	9b01      	ldr	r3, [sp, #4]
 8011a22:	50e7      	str	r7, [r4, r3]
 8011a24:	9b03      	ldr	r3, [sp, #12]
 8011a26:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011a2a:	3104      	adds	r1, #4
 8011a2c:	f1b9 0f00 	cmp.w	r9, #0
 8011a30:	d020      	beq.n	8011a74 <__multiply+0x134>
 8011a32:	6823      	ldr	r3, [r4, #0]
 8011a34:	4647      	mov	r7, r8
 8011a36:	46a4      	mov	ip, r4
 8011a38:	f04f 0a00 	mov.w	sl, #0
 8011a3c:	f8b7 b000 	ldrh.w	fp, [r7]
 8011a40:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011a44:	fb09 220b 	mla	r2, r9, fp, r2
 8011a48:	4452      	add	r2, sl
 8011a4a:	b29b      	uxth	r3, r3
 8011a4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a50:	f84c 3b04 	str.w	r3, [ip], #4
 8011a54:	f857 3b04 	ldr.w	r3, [r7], #4
 8011a58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011a5c:	f8bc 3000 	ldrh.w	r3, [ip]
 8011a60:	fb09 330a 	mla	r3, r9, sl, r3
 8011a64:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011a68:	42bd      	cmp	r5, r7
 8011a6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011a6e:	d8e5      	bhi.n	8011a3c <__multiply+0xfc>
 8011a70:	9a01      	ldr	r2, [sp, #4]
 8011a72:	50a3      	str	r3, [r4, r2]
 8011a74:	3404      	adds	r4, #4
 8011a76:	e79f      	b.n	80119b8 <__multiply+0x78>
 8011a78:	3e01      	subs	r6, #1
 8011a7a:	e7a1      	b.n	80119c0 <__multiply+0x80>
 8011a7c:	0806d6c3 	.word	0x0806d6c3
 8011a80:	0806d734 	.word	0x0806d734

08011a84 <__pow5mult>:
 8011a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a88:	4615      	mov	r5, r2
 8011a8a:	f012 0203 	ands.w	r2, r2, #3
 8011a8e:	4607      	mov	r7, r0
 8011a90:	460e      	mov	r6, r1
 8011a92:	d007      	beq.n	8011aa4 <__pow5mult+0x20>
 8011a94:	4c25      	ldr	r4, [pc, #148]	@ (8011b2c <__pow5mult+0xa8>)
 8011a96:	3a01      	subs	r2, #1
 8011a98:	2300      	movs	r3, #0
 8011a9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a9e:	f7ff fe5d 	bl	801175c <__multadd>
 8011aa2:	4606      	mov	r6, r0
 8011aa4:	10ad      	asrs	r5, r5, #2
 8011aa6:	d03d      	beq.n	8011b24 <__pow5mult+0xa0>
 8011aa8:	69fc      	ldr	r4, [r7, #28]
 8011aaa:	b97c      	cbnz	r4, 8011acc <__pow5mult+0x48>
 8011aac:	2010      	movs	r0, #16
 8011aae:	f7ff fd2b 	bl	8011508 <malloc>
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	61f8      	str	r0, [r7, #28]
 8011ab6:	b928      	cbnz	r0, 8011ac4 <__pow5mult+0x40>
 8011ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8011b30 <__pow5mult+0xac>)
 8011aba:	481e      	ldr	r0, [pc, #120]	@ (8011b34 <__pow5mult+0xb0>)
 8011abc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011ac0:	f7fe fb28 	bl	8010114 <__assert_func>
 8011ac4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011ac8:	6004      	str	r4, [r0, #0]
 8011aca:	60c4      	str	r4, [r0, #12]
 8011acc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011ad0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ad4:	b94c      	cbnz	r4, 8011aea <__pow5mult+0x66>
 8011ad6:	f240 2171 	movw	r1, #625	@ 0x271
 8011ada:	4638      	mov	r0, r7
 8011adc:	f7ff ff1a 	bl	8011914 <__i2b>
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	f8c8 0008 	str.w	r0, [r8, #8]
 8011ae6:	4604      	mov	r4, r0
 8011ae8:	6003      	str	r3, [r0, #0]
 8011aea:	f04f 0900 	mov.w	r9, #0
 8011aee:	07eb      	lsls	r3, r5, #31
 8011af0:	d50a      	bpl.n	8011b08 <__pow5mult+0x84>
 8011af2:	4631      	mov	r1, r6
 8011af4:	4622      	mov	r2, r4
 8011af6:	4638      	mov	r0, r7
 8011af8:	f7ff ff22 	bl	8011940 <__multiply>
 8011afc:	4631      	mov	r1, r6
 8011afe:	4680      	mov	r8, r0
 8011b00:	4638      	mov	r0, r7
 8011b02:	f7ff fe09 	bl	8011718 <_Bfree>
 8011b06:	4646      	mov	r6, r8
 8011b08:	106d      	asrs	r5, r5, #1
 8011b0a:	d00b      	beq.n	8011b24 <__pow5mult+0xa0>
 8011b0c:	6820      	ldr	r0, [r4, #0]
 8011b0e:	b938      	cbnz	r0, 8011b20 <__pow5mult+0x9c>
 8011b10:	4622      	mov	r2, r4
 8011b12:	4621      	mov	r1, r4
 8011b14:	4638      	mov	r0, r7
 8011b16:	f7ff ff13 	bl	8011940 <__multiply>
 8011b1a:	6020      	str	r0, [r4, #0]
 8011b1c:	f8c0 9000 	str.w	r9, [r0]
 8011b20:	4604      	mov	r4, r0
 8011b22:	e7e4      	b.n	8011aee <__pow5mult+0x6a>
 8011b24:	4630      	mov	r0, r6
 8011b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b2a:	bf00      	nop
 8011b2c:	0806d914 	.word	0x0806d914
 8011b30:	0806d518 	.word	0x0806d518
 8011b34:	0806d734 	.word	0x0806d734

08011b38 <__lshift>:
 8011b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b3c:	460c      	mov	r4, r1
 8011b3e:	6849      	ldr	r1, [r1, #4]
 8011b40:	6923      	ldr	r3, [r4, #16]
 8011b42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011b46:	68a3      	ldr	r3, [r4, #8]
 8011b48:	4607      	mov	r7, r0
 8011b4a:	4691      	mov	r9, r2
 8011b4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b50:	f108 0601 	add.w	r6, r8, #1
 8011b54:	42b3      	cmp	r3, r6
 8011b56:	db0b      	blt.n	8011b70 <__lshift+0x38>
 8011b58:	4638      	mov	r0, r7
 8011b5a:	f7ff fd9d 	bl	8011698 <_Balloc>
 8011b5e:	4605      	mov	r5, r0
 8011b60:	b948      	cbnz	r0, 8011b76 <__lshift+0x3e>
 8011b62:	4602      	mov	r2, r0
 8011b64:	4b28      	ldr	r3, [pc, #160]	@ (8011c08 <__lshift+0xd0>)
 8011b66:	4829      	ldr	r0, [pc, #164]	@ (8011c0c <__lshift+0xd4>)
 8011b68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011b6c:	f7fe fad2 	bl	8010114 <__assert_func>
 8011b70:	3101      	adds	r1, #1
 8011b72:	005b      	lsls	r3, r3, #1
 8011b74:	e7ee      	b.n	8011b54 <__lshift+0x1c>
 8011b76:	2300      	movs	r3, #0
 8011b78:	f100 0114 	add.w	r1, r0, #20
 8011b7c:	f100 0210 	add.w	r2, r0, #16
 8011b80:	4618      	mov	r0, r3
 8011b82:	4553      	cmp	r3, sl
 8011b84:	db33      	blt.n	8011bee <__lshift+0xb6>
 8011b86:	6920      	ldr	r0, [r4, #16]
 8011b88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b8c:	f104 0314 	add.w	r3, r4, #20
 8011b90:	f019 091f 	ands.w	r9, r9, #31
 8011b94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b9c:	d02b      	beq.n	8011bf6 <__lshift+0xbe>
 8011b9e:	f1c9 0e20 	rsb	lr, r9, #32
 8011ba2:	468a      	mov	sl, r1
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	6818      	ldr	r0, [r3, #0]
 8011ba8:	fa00 f009 	lsl.w	r0, r0, r9
 8011bac:	4310      	orrs	r0, r2
 8011bae:	f84a 0b04 	str.w	r0, [sl], #4
 8011bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bb6:	459c      	cmp	ip, r3
 8011bb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8011bbc:	d8f3      	bhi.n	8011ba6 <__lshift+0x6e>
 8011bbe:	ebac 0304 	sub.w	r3, ip, r4
 8011bc2:	3b15      	subs	r3, #21
 8011bc4:	f023 0303 	bic.w	r3, r3, #3
 8011bc8:	3304      	adds	r3, #4
 8011bca:	f104 0015 	add.w	r0, r4, #21
 8011bce:	4560      	cmp	r0, ip
 8011bd0:	bf88      	it	hi
 8011bd2:	2304      	movhi	r3, #4
 8011bd4:	50ca      	str	r2, [r1, r3]
 8011bd6:	b10a      	cbz	r2, 8011bdc <__lshift+0xa4>
 8011bd8:	f108 0602 	add.w	r6, r8, #2
 8011bdc:	3e01      	subs	r6, #1
 8011bde:	4638      	mov	r0, r7
 8011be0:	612e      	str	r6, [r5, #16]
 8011be2:	4621      	mov	r1, r4
 8011be4:	f7ff fd98 	bl	8011718 <_Bfree>
 8011be8:	4628      	mov	r0, r5
 8011bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bee:	f842 0f04 	str.w	r0, [r2, #4]!
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	e7c5      	b.n	8011b82 <__lshift+0x4a>
 8011bf6:	3904      	subs	r1, #4
 8011bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8011c00:	459c      	cmp	ip, r3
 8011c02:	d8f9      	bhi.n	8011bf8 <__lshift+0xc0>
 8011c04:	e7ea      	b.n	8011bdc <__lshift+0xa4>
 8011c06:	bf00      	nop
 8011c08:	0806d6c3 	.word	0x0806d6c3
 8011c0c:	0806d734 	.word	0x0806d734

08011c10 <__mcmp>:
 8011c10:	690a      	ldr	r2, [r1, #16]
 8011c12:	4603      	mov	r3, r0
 8011c14:	6900      	ldr	r0, [r0, #16]
 8011c16:	1a80      	subs	r0, r0, r2
 8011c18:	b530      	push	{r4, r5, lr}
 8011c1a:	d10e      	bne.n	8011c3a <__mcmp+0x2a>
 8011c1c:	3314      	adds	r3, #20
 8011c1e:	3114      	adds	r1, #20
 8011c20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011c24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011c28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011c2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011c30:	4295      	cmp	r5, r2
 8011c32:	d003      	beq.n	8011c3c <__mcmp+0x2c>
 8011c34:	d205      	bcs.n	8011c42 <__mcmp+0x32>
 8011c36:	f04f 30ff 	mov.w	r0, #4294967295
 8011c3a:	bd30      	pop	{r4, r5, pc}
 8011c3c:	42a3      	cmp	r3, r4
 8011c3e:	d3f3      	bcc.n	8011c28 <__mcmp+0x18>
 8011c40:	e7fb      	b.n	8011c3a <__mcmp+0x2a>
 8011c42:	2001      	movs	r0, #1
 8011c44:	e7f9      	b.n	8011c3a <__mcmp+0x2a>
	...

08011c48 <__mdiff>:
 8011c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c4c:	4689      	mov	r9, r1
 8011c4e:	4606      	mov	r6, r0
 8011c50:	4611      	mov	r1, r2
 8011c52:	4648      	mov	r0, r9
 8011c54:	4614      	mov	r4, r2
 8011c56:	f7ff ffdb 	bl	8011c10 <__mcmp>
 8011c5a:	1e05      	subs	r5, r0, #0
 8011c5c:	d112      	bne.n	8011c84 <__mdiff+0x3c>
 8011c5e:	4629      	mov	r1, r5
 8011c60:	4630      	mov	r0, r6
 8011c62:	f7ff fd19 	bl	8011698 <_Balloc>
 8011c66:	4602      	mov	r2, r0
 8011c68:	b928      	cbnz	r0, 8011c76 <__mdiff+0x2e>
 8011c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8011d68 <__mdiff+0x120>)
 8011c6c:	f240 2137 	movw	r1, #567	@ 0x237
 8011c70:	483e      	ldr	r0, [pc, #248]	@ (8011d6c <__mdiff+0x124>)
 8011c72:	f7fe fa4f 	bl	8010114 <__assert_func>
 8011c76:	2301      	movs	r3, #1
 8011c78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c7c:	4610      	mov	r0, r2
 8011c7e:	b003      	add	sp, #12
 8011c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c84:	bfbc      	itt	lt
 8011c86:	464b      	movlt	r3, r9
 8011c88:	46a1      	movlt	r9, r4
 8011c8a:	4630      	mov	r0, r6
 8011c8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011c90:	bfba      	itte	lt
 8011c92:	461c      	movlt	r4, r3
 8011c94:	2501      	movlt	r5, #1
 8011c96:	2500      	movge	r5, #0
 8011c98:	f7ff fcfe 	bl	8011698 <_Balloc>
 8011c9c:	4602      	mov	r2, r0
 8011c9e:	b918      	cbnz	r0, 8011ca8 <__mdiff+0x60>
 8011ca0:	4b31      	ldr	r3, [pc, #196]	@ (8011d68 <__mdiff+0x120>)
 8011ca2:	f240 2145 	movw	r1, #581	@ 0x245
 8011ca6:	e7e3      	b.n	8011c70 <__mdiff+0x28>
 8011ca8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011cac:	6926      	ldr	r6, [r4, #16]
 8011cae:	60c5      	str	r5, [r0, #12]
 8011cb0:	f109 0310 	add.w	r3, r9, #16
 8011cb4:	f109 0514 	add.w	r5, r9, #20
 8011cb8:	f104 0e14 	add.w	lr, r4, #20
 8011cbc:	f100 0b14 	add.w	fp, r0, #20
 8011cc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011cc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011cc8:	9301      	str	r3, [sp, #4]
 8011cca:	46d9      	mov	r9, fp
 8011ccc:	f04f 0c00 	mov.w	ip, #0
 8011cd0:	9b01      	ldr	r3, [sp, #4]
 8011cd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011cd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011cda:	9301      	str	r3, [sp, #4]
 8011cdc:	fa1f f38a 	uxth.w	r3, sl
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	b283      	uxth	r3, r0
 8011ce4:	1acb      	subs	r3, r1, r3
 8011ce6:	0c00      	lsrs	r0, r0, #16
 8011ce8:	4463      	add	r3, ip
 8011cea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011cee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011cf8:	4576      	cmp	r6, lr
 8011cfa:	f849 3b04 	str.w	r3, [r9], #4
 8011cfe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011d02:	d8e5      	bhi.n	8011cd0 <__mdiff+0x88>
 8011d04:	1b33      	subs	r3, r6, r4
 8011d06:	3b15      	subs	r3, #21
 8011d08:	f023 0303 	bic.w	r3, r3, #3
 8011d0c:	3415      	adds	r4, #21
 8011d0e:	3304      	adds	r3, #4
 8011d10:	42a6      	cmp	r6, r4
 8011d12:	bf38      	it	cc
 8011d14:	2304      	movcc	r3, #4
 8011d16:	441d      	add	r5, r3
 8011d18:	445b      	add	r3, fp
 8011d1a:	461e      	mov	r6, r3
 8011d1c:	462c      	mov	r4, r5
 8011d1e:	4544      	cmp	r4, r8
 8011d20:	d30e      	bcc.n	8011d40 <__mdiff+0xf8>
 8011d22:	f108 0103 	add.w	r1, r8, #3
 8011d26:	1b49      	subs	r1, r1, r5
 8011d28:	f021 0103 	bic.w	r1, r1, #3
 8011d2c:	3d03      	subs	r5, #3
 8011d2e:	45a8      	cmp	r8, r5
 8011d30:	bf38      	it	cc
 8011d32:	2100      	movcc	r1, #0
 8011d34:	440b      	add	r3, r1
 8011d36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011d3a:	b191      	cbz	r1, 8011d62 <__mdiff+0x11a>
 8011d3c:	6117      	str	r7, [r2, #16]
 8011d3e:	e79d      	b.n	8011c7c <__mdiff+0x34>
 8011d40:	f854 1b04 	ldr.w	r1, [r4], #4
 8011d44:	46e6      	mov	lr, ip
 8011d46:	0c08      	lsrs	r0, r1, #16
 8011d48:	fa1c fc81 	uxtah	ip, ip, r1
 8011d4c:	4471      	add	r1, lr
 8011d4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011d52:	b289      	uxth	r1, r1
 8011d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011d58:	f846 1b04 	str.w	r1, [r6], #4
 8011d5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011d60:	e7dd      	b.n	8011d1e <__mdiff+0xd6>
 8011d62:	3f01      	subs	r7, #1
 8011d64:	e7e7      	b.n	8011d36 <__mdiff+0xee>
 8011d66:	bf00      	nop
 8011d68:	0806d6c3 	.word	0x0806d6c3
 8011d6c:	0806d734 	.word	0x0806d734

08011d70 <__ulp>:
 8011d70:	b082      	sub	sp, #8
 8011d72:	ed8d 0b00 	vstr	d0, [sp]
 8011d76:	9a01      	ldr	r2, [sp, #4]
 8011d78:	4b0f      	ldr	r3, [pc, #60]	@ (8011db8 <__ulp+0x48>)
 8011d7a:	4013      	ands	r3, r2
 8011d7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	dc08      	bgt.n	8011d96 <__ulp+0x26>
 8011d84:	425b      	negs	r3, r3
 8011d86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011d8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011d8e:	da04      	bge.n	8011d9a <__ulp+0x2a>
 8011d90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011d94:	4113      	asrs	r3, r2
 8011d96:	2200      	movs	r2, #0
 8011d98:	e008      	b.n	8011dac <__ulp+0x3c>
 8011d9a:	f1a2 0314 	sub.w	r3, r2, #20
 8011d9e:	2b1e      	cmp	r3, #30
 8011da0:	bfda      	itte	le
 8011da2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011da6:	40da      	lsrle	r2, r3
 8011da8:	2201      	movgt	r2, #1
 8011daa:	2300      	movs	r3, #0
 8011dac:	4619      	mov	r1, r3
 8011dae:	4610      	mov	r0, r2
 8011db0:	ec41 0b10 	vmov	d0, r0, r1
 8011db4:	b002      	add	sp, #8
 8011db6:	4770      	bx	lr
 8011db8:	7ff00000 	.word	0x7ff00000

08011dbc <__b2d>:
 8011dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc0:	6906      	ldr	r6, [r0, #16]
 8011dc2:	f100 0814 	add.w	r8, r0, #20
 8011dc6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011dca:	1f37      	subs	r7, r6, #4
 8011dcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011dd0:	4610      	mov	r0, r2
 8011dd2:	f7ff fd53 	bl	801187c <__hi0bits>
 8011dd6:	f1c0 0320 	rsb	r3, r0, #32
 8011dda:	280a      	cmp	r0, #10
 8011ddc:	600b      	str	r3, [r1, #0]
 8011dde:	491b      	ldr	r1, [pc, #108]	@ (8011e4c <__b2d+0x90>)
 8011de0:	dc15      	bgt.n	8011e0e <__b2d+0x52>
 8011de2:	f1c0 0c0b 	rsb	ip, r0, #11
 8011de6:	fa22 f30c 	lsr.w	r3, r2, ip
 8011dea:	45b8      	cmp	r8, r7
 8011dec:	ea43 0501 	orr.w	r5, r3, r1
 8011df0:	bf34      	ite	cc
 8011df2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011df6:	2300      	movcs	r3, #0
 8011df8:	3015      	adds	r0, #21
 8011dfa:	fa02 f000 	lsl.w	r0, r2, r0
 8011dfe:	fa23 f30c 	lsr.w	r3, r3, ip
 8011e02:	4303      	orrs	r3, r0
 8011e04:	461c      	mov	r4, r3
 8011e06:	ec45 4b10 	vmov	d0, r4, r5
 8011e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e0e:	45b8      	cmp	r8, r7
 8011e10:	bf3a      	itte	cc
 8011e12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011e16:	f1a6 0708 	subcc.w	r7, r6, #8
 8011e1a:	2300      	movcs	r3, #0
 8011e1c:	380b      	subs	r0, #11
 8011e1e:	d012      	beq.n	8011e46 <__b2d+0x8a>
 8011e20:	f1c0 0120 	rsb	r1, r0, #32
 8011e24:	fa23 f401 	lsr.w	r4, r3, r1
 8011e28:	4082      	lsls	r2, r0
 8011e2a:	4322      	orrs	r2, r4
 8011e2c:	4547      	cmp	r7, r8
 8011e2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011e32:	bf8c      	ite	hi
 8011e34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011e38:	2200      	movls	r2, #0
 8011e3a:	4083      	lsls	r3, r0
 8011e3c:	40ca      	lsrs	r2, r1
 8011e3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011e42:	4313      	orrs	r3, r2
 8011e44:	e7de      	b.n	8011e04 <__b2d+0x48>
 8011e46:	ea42 0501 	orr.w	r5, r2, r1
 8011e4a:	e7db      	b.n	8011e04 <__b2d+0x48>
 8011e4c:	3ff00000 	.word	0x3ff00000

08011e50 <__d2b>:
 8011e50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011e54:	460f      	mov	r7, r1
 8011e56:	2101      	movs	r1, #1
 8011e58:	ec59 8b10 	vmov	r8, r9, d0
 8011e5c:	4616      	mov	r6, r2
 8011e5e:	f7ff fc1b 	bl	8011698 <_Balloc>
 8011e62:	4604      	mov	r4, r0
 8011e64:	b930      	cbnz	r0, 8011e74 <__d2b+0x24>
 8011e66:	4602      	mov	r2, r0
 8011e68:	4b23      	ldr	r3, [pc, #140]	@ (8011ef8 <__d2b+0xa8>)
 8011e6a:	4824      	ldr	r0, [pc, #144]	@ (8011efc <__d2b+0xac>)
 8011e6c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011e70:	f7fe f950 	bl	8010114 <__assert_func>
 8011e74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e7c:	b10d      	cbz	r5, 8011e82 <__d2b+0x32>
 8011e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011e82:	9301      	str	r3, [sp, #4]
 8011e84:	f1b8 0300 	subs.w	r3, r8, #0
 8011e88:	d023      	beq.n	8011ed2 <__d2b+0x82>
 8011e8a:	4668      	mov	r0, sp
 8011e8c:	9300      	str	r3, [sp, #0]
 8011e8e:	f7ff fd14 	bl	80118ba <__lo0bits>
 8011e92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011e96:	b1d0      	cbz	r0, 8011ece <__d2b+0x7e>
 8011e98:	f1c0 0320 	rsb	r3, r0, #32
 8011e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8011ea0:	430b      	orrs	r3, r1
 8011ea2:	40c2      	lsrs	r2, r0
 8011ea4:	6163      	str	r3, [r4, #20]
 8011ea6:	9201      	str	r2, [sp, #4]
 8011ea8:	9b01      	ldr	r3, [sp, #4]
 8011eaa:	61a3      	str	r3, [r4, #24]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	bf0c      	ite	eq
 8011eb0:	2201      	moveq	r2, #1
 8011eb2:	2202      	movne	r2, #2
 8011eb4:	6122      	str	r2, [r4, #16]
 8011eb6:	b1a5      	cbz	r5, 8011ee2 <__d2b+0x92>
 8011eb8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011ebc:	4405      	add	r5, r0
 8011ebe:	603d      	str	r5, [r7, #0]
 8011ec0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011ec4:	6030      	str	r0, [r6, #0]
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	b003      	add	sp, #12
 8011eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ece:	6161      	str	r1, [r4, #20]
 8011ed0:	e7ea      	b.n	8011ea8 <__d2b+0x58>
 8011ed2:	a801      	add	r0, sp, #4
 8011ed4:	f7ff fcf1 	bl	80118ba <__lo0bits>
 8011ed8:	9b01      	ldr	r3, [sp, #4]
 8011eda:	6163      	str	r3, [r4, #20]
 8011edc:	3020      	adds	r0, #32
 8011ede:	2201      	movs	r2, #1
 8011ee0:	e7e8      	b.n	8011eb4 <__d2b+0x64>
 8011ee2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011ee6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011eea:	6038      	str	r0, [r7, #0]
 8011eec:	6918      	ldr	r0, [r3, #16]
 8011eee:	f7ff fcc5 	bl	801187c <__hi0bits>
 8011ef2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ef6:	e7e5      	b.n	8011ec4 <__d2b+0x74>
 8011ef8:	0806d6c3 	.word	0x0806d6c3
 8011efc:	0806d734 	.word	0x0806d734

08011f00 <__ratio>:
 8011f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f04:	b085      	sub	sp, #20
 8011f06:	e9cd 1000 	strd	r1, r0, [sp]
 8011f0a:	a902      	add	r1, sp, #8
 8011f0c:	f7ff ff56 	bl	8011dbc <__b2d>
 8011f10:	9800      	ldr	r0, [sp, #0]
 8011f12:	a903      	add	r1, sp, #12
 8011f14:	ec55 4b10 	vmov	r4, r5, d0
 8011f18:	f7ff ff50 	bl	8011dbc <__b2d>
 8011f1c:	9b01      	ldr	r3, [sp, #4]
 8011f1e:	6919      	ldr	r1, [r3, #16]
 8011f20:	9b00      	ldr	r3, [sp, #0]
 8011f22:	691b      	ldr	r3, [r3, #16]
 8011f24:	1ac9      	subs	r1, r1, r3
 8011f26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011f2a:	1a9b      	subs	r3, r3, r2
 8011f2c:	ec5b ab10 	vmov	sl, fp, d0
 8011f30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	bfce      	itee	gt
 8011f38:	462a      	movgt	r2, r5
 8011f3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011f3e:	465a      	movle	r2, fp
 8011f40:	462f      	mov	r7, r5
 8011f42:	46d9      	mov	r9, fp
 8011f44:	bfcc      	ite	gt
 8011f46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011f4a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011f4e:	464b      	mov	r3, r9
 8011f50:	4652      	mov	r2, sl
 8011f52:	4620      	mov	r0, r4
 8011f54:	4639      	mov	r1, r7
 8011f56:	f7ee fc89 	bl	800086c <__aeabi_ddiv>
 8011f5a:	ec41 0b10 	vmov	d0, r0, r1
 8011f5e:	b005      	add	sp, #20
 8011f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f64 <__copybits>:
 8011f64:	3901      	subs	r1, #1
 8011f66:	b570      	push	{r4, r5, r6, lr}
 8011f68:	1149      	asrs	r1, r1, #5
 8011f6a:	6914      	ldr	r4, [r2, #16]
 8011f6c:	3101      	adds	r1, #1
 8011f6e:	f102 0314 	add.w	r3, r2, #20
 8011f72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011f76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011f7a:	1f05      	subs	r5, r0, #4
 8011f7c:	42a3      	cmp	r3, r4
 8011f7e:	d30c      	bcc.n	8011f9a <__copybits+0x36>
 8011f80:	1aa3      	subs	r3, r4, r2
 8011f82:	3b11      	subs	r3, #17
 8011f84:	f023 0303 	bic.w	r3, r3, #3
 8011f88:	3211      	adds	r2, #17
 8011f8a:	42a2      	cmp	r2, r4
 8011f8c:	bf88      	it	hi
 8011f8e:	2300      	movhi	r3, #0
 8011f90:	4418      	add	r0, r3
 8011f92:	2300      	movs	r3, #0
 8011f94:	4288      	cmp	r0, r1
 8011f96:	d305      	bcc.n	8011fa4 <__copybits+0x40>
 8011f98:	bd70      	pop	{r4, r5, r6, pc}
 8011f9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8011f9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8011fa2:	e7eb      	b.n	8011f7c <__copybits+0x18>
 8011fa4:	f840 3b04 	str.w	r3, [r0], #4
 8011fa8:	e7f4      	b.n	8011f94 <__copybits+0x30>

08011faa <__any_on>:
 8011faa:	f100 0214 	add.w	r2, r0, #20
 8011fae:	6900      	ldr	r0, [r0, #16]
 8011fb0:	114b      	asrs	r3, r1, #5
 8011fb2:	4298      	cmp	r0, r3
 8011fb4:	b510      	push	{r4, lr}
 8011fb6:	db11      	blt.n	8011fdc <__any_on+0x32>
 8011fb8:	dd0a      	ble.n	8011fd0 <__any_on+0x26>
 8011fba:	f011 011f 	ands.w	r1, r1, #31
 8011fbe:	d007      	beq.n	8011fd0 <__any_on+0x26>
 8011fc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011fc4:	fa24 f001 	lsr.w	r0, r4, r1
 8011fc8:	fa00 f101 	lsl.w	r1, r0, r1
 8011fcc:	428c      	cmp	r4, r1
 8011fce:	d10b      	bne.n	8011fe8 <__any_on+0x3e>
 8011fd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	d803      	bhi.n	8011fe0 <__any_on+0x36>
 8011fd8:	2000      	movs	r0, #0
 8011fda:	bd10      	pop	{r4, pc}
 8011fdc:	4603      	mov	r3, r0
 8011fde:	e7f7      	b.n	8011fd0 <__any_on+0x26>
 8011fe0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011fe4:	2900      	cmp	r1, #0
 8011fe6:	d0f5      	beq.n	8011fd4 <__any_on+0x2a>
 8011fe8:	2001      	movs	r0, #1
 8011fea:	e7f6      	b.n	8011fda <__any_on+0x30>

08011fec <__ascii_wctomb>:
 8011fec:	4603      	mov	r3, r0
 8011fee:	4608      	mov	r0, r1
 8011ff0:	b141      	cbz	r1, 8012004 <__ascii_wctomb+0x18>
 8011ff2:	2aff      	cmp	r2, #255	@ 0xff
 8011ff4:	d904      	bls.n	8012000 <__ascii_wctomb+0x14>
 8011ff6:	228a      	movs	r2, #138	@ 0x8a
 8011ff8:	601a      	str	r2, [r3, #0]
 8011ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8011ffe:	4770      	bx	lr
 8012000:	700a      	strb	r2, [r1, #0]
 8012002:	2001      	movs	r0, #1
 8012004:	4770      	bx	lr

08012006 <__ssputs_r>:
 8012006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801200a:	688e      	ldr	r6, [r1, #8]
 801200c:	461f      	mov	r7, r3
 801200e:	42be      	cmp	r6, r7
 8012010:	680b      	ldr	r3, [r1, #0]
 8012012:	4682      	mov	sl, r0
 8012014:	460c      	mov	r4, r1
 8012016:	4690      	mov	r8, r2
 8012018:	d82d      	bhi.n	8012076 <__ssputs_r+0x70>
 801201a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801201e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012022:	d026      	beq.n	8012072 <__ssputs_r+0x6c>
 8012024:	6965      	ldr	r5, [r4, #20]
 8012026:	6909      	ldr	r1, [r1, #16]
 8012028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801202c:	eba3 0901 	sub.w	r9, r3, r1
 8012030:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012034:	1c7b      	adds	r3, r7, #1
 8012036:	444b      	add	r3, r9
 8012038:	106d      	asrs	r5, r5, #1
 801203a:	429d      	cmp	r5, r3
 801203c:	bf38      	it	cc
 801203e:	461d      	movcc	r5, r3
 8012040:	0553      	lsls	r3, r2, #21
 8012042:	d527      	bpl.n	8012094 <__ssputs_r+0x8e>
 8012044:	4629      	mov	r1, r5
 8012046:	f7ff fa89 	bl	801155c <_malloc_r>
 801204a:	4606      	mov	r6, r0
 801204c:	b360      	cbz	r0, 80120a8 <__ssputs_r+0xa2>
 801204e:	6921      	ldr	r1, [r4, #16]
 8012050:	464a      	mov	r2, r9
 8012052:	f7fe f840 	bl	80100d6 <memcpy>
 8012056:	89a3      	ldrh	r3, [r4, #12]
 8012058:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801205c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012060:	81a3      	strh	r3, [r4, #12]
 8012062:	6126      	str	r6, [r4, #16]
 8012064:	6165      	str	r5, [r4, #20]
 8012066:	444e      	add	r6, r9
 8012068:	eba5 0509 	sub.w	r5, r5, r9
 801206c:	6026      	str	r6, [r4, #0]
 801206e:	60a5      	str	r5, [r4, #8]
 8012070:	463e      	mov	r6, r7
 8012072:	42be      	cmp	r6, r7
 8012074:	d900      	bls.n	8012078 <__ssputs_r+0x72>
 8012076:	463e      	mov	r6, r7
 8012078:	6820      	ldr	r0, [r4, #0]
 801207a:	4632      	mov	r2, r6
 801207c:	4641      	mov	r1, r8
 801207e:	f000 fd68 	bl	8012b52 <memmove>
 8012082:	68a3      	ldr	r3, [r4, #8]
 8012084:	1b9b      	subs	r3, r3, r6
 8012086:	60a3      	str	r3, [r4, #8]
 8012088:	6823      	ldr	r3, [r4, #0]
 801208a:	4433      	add	r3, r6
 801208c:	6023      	str	r3, [r4, #0]
 801208e:	2000      	movs	r0, #0
 8012090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012094:	462a      	mov	r2, r5
 8012096:	f000 fda2 	bl	8012bde <_realloc_r>
 801209a:	4606      	mov	r6, r0
 801209c:	2800      	cmp	r0, #0
 801209e:	d1e0      	bne.n	8012062 <__ssputs_r+0x5c>
 80120a0:	6921      	ldr	r1, [r4, #16]
 80120a2:	4650      	mov	r0, sl
 80120a4:	f7fe feac 	bl	8010e00 <_free_r>
 80120a8:	230c      	movs	r3, #12
 80120aa:	f8ca 3000 	str.w	r3, [sl]
 80120ae:	89a3      	ldrh	r3, [r4, #12]
 80120b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120b4:	81a3      	strh	r3, [r4, #12]
 80120b6:	f04f 30ff 	mov.w	r0, #4294967295
 80120ba:	e7e9      	b.n	8012090 <__ssputs_r+0x8a>

080120bc <_svfiprintf_r>:
 80120bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c0:	4698      	mov	r8, r3
 80120c2:	898b      	ldrh	r3, [r1, #12]
 80120c4:	061b      	lsls	r3, r3, #24
 80120c6:	b09d      	sub	sp, #116	@ 0x74
 80120c8:	4607      	mov	r7, r0
 80120ca:	460d      	mov	r5, r1
 80120cc:	4614      	mov	r4, r2
 80120ce:	d510      	bpl.n	80120f2 <_svfiprintf_r+0x36>
 80120d0:	690b      	ldr	r3, [r1, #16]
 80120d2:	b973      	cbnz	r3, 80120f2 <_svfiprintf_r+0x36>
 80120d4:	2140      	movs	r1, #64	@ 0x40
 80120d6:	f7ff fa41 	bl	801155c <_malloc_r>
 80120da:	6028      	str	r0, [r5, #0]
 80120dc:	6128      	str	r0, [r5, #16]
 80120de:	b930      	cbnz	r0, 80120ee <_svfiprintf_r+0x32>
 80120e0:	230c      	movs	r3, #12
 80120e2:	603b      	str	r3, [r7, #0]
 80120e4:	f04f 30ff 	mov.w	r0, #4294967295
 80120e8:	b01d      	add	sp, #116	@ 0x74
 80120ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ee:	2340      	movs	r3, #64	@ 0x40
 80120f0:	616b      	str	r3, [r5, #20]
 80120f2:	2300      	movs	r3, #0
 80120f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80120f6:	2320      	movs	r3, #32
 80120f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80120fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8012100:	2330      	movs	r3, #48	@ 0x30
 8012102:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80122a0 <_svfiprintf_r+0x1e4>
 8012106:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801210a:	f04f 0901 	mov.w	r9, #1
 801210e:	4623      	mov	r3, r4
 8012110:	469a      	mov	sl, r3
 8012112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012116:	b10a      	cbz	r2, 801211c <_svfiprintf_r+0x60>
 8012118:	2a25      	cmp	r2, #37	@ 0x25
 801211a:	d1f9      	bne.n	8012110 <_svfiprintf_r+0x54>
 801211c:	ebba 0b04 	subs.w	fp, sl, r4
 8012120:	d00b      	beq.n	801213a <_svfiprintf_r+0x7e>
 8012122:	465b      	mov	r3, fp
 8012124:	4622      	mov	r2, r4
 8012126:	4629      	mov	r1, r5
 8012128:	4638      	mov	r0, r7
 801212a:	f7ff ff6c 	bl	8012006 <__ssputs_r>
 801212e:	3001      	adds	r0, #1
 8012130:	f000 80a7 	beq.w	8012282 <_svfiprintf_r+0x1c6>
 8012134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012136:	445a      	add	r2, fp
 8012138:	9209      	str	r2, [sp, #36]	@ 0x24
 801213a:	f89a 3000 	ldrb.w	r3, [sl]
 801213e:	2b00      	cmp	r3, #0
 8012140:	f000 809f 	beq.w	8012282 <_svfiprintf_r+0x1c6>
 8012144:	2300      	movs	r3, #0
 8012146:	f04f 32ff 	mov.w	r2, #4294967295
 801214a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801214e:	f10a 0a01 	add.w	sl, sl, #1
 8012152:	9304      	str	r3, [sp, #16]
 8012154:	9307      	str	r3, [sp, #28]
 8012156:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801215a:	931a      	str	r3, [sp, #104]	@ 0x68
 801215c:	4654      	mov	r4, sl
 801215e:	2205      	movs	r2, #5
 8012160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012164:	484e      	ldr	r0, [pc, #312]	@ (80122a0 <_svfiprintf_r+0x1e4>)
 8012166:	f7ee f843 	bl	80001f0 <memchr>
 801216a:	9a04      	ldr	r2, [sp, #16]
 801216c:	b9d8      	cbnz	r0, 80121a6 <_svfiprintf_r+0xea>
 801216e:	06d0      	lsls	r0, r2, #27
 8012170:	bf44      	itt	mi
 8012172:	2320      	movmi	r3, #32
 8012174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012178:	0711      	lsls	r1, r2, #28
 801217a:	bf44      	itt	mi
 801217c:	232b      	movmi	r3, #43	@ 0x2b
 801217e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012182:	f89a 3000 	ldrb.w	r3, [sl]
 8012186:	2b2a      	cmp	r3, #42	@ 0x2a
 8012188:	d015      	beq.n	80121b6 <_svfiprintf_r+0xfa>
 801218a:	9a07      	ldr	r2, [sp, #28]
 801218c:	4654      	mov	r4, sl
 801218e:	2000      	movs	r0, #0
 8012190:	f04f 0c0a 	mov.w	ip, #10
 8012194:	4621      	mov	r1, r4
 8012196:	f811 3b01 	ldrb.w	r3, [r1], #1
 801219a:	3b30      	subs	r3, #48	@ 0x30
 801219c:	2b09      	cmp	r3, #9
 801219e:	d94b      	bls.n	8012238 <_svfiprintf_r+0x17c>
 80121a0:	b1b0      	cbz	r0, 80121d0 <_svfiprintf_r+0x114>
 80121a2:	9207      	str	r2, [sp, #28]
 80121a4:	e014      	b.n	80121d0 <_svfiprintf_r+0x114>
 80121a6:	eba0 0308 	sub.w	r3, r0, r8
 80121aa:	fa09 f303 	lsl.w	r3, r9, r3
 80121ae:	4313      	orrs	r3, r2
 80121b0:	9304      	str	r3, [sp, #16]
 80121b2:	46a2      	mov	sl, r4
 80121b4:	e7d2      	b.n	801215c <_svfiprintf_r+0xa0>
 80121b6:	9b03      	ldr	r3, [sp, #12]
 80121b8:	1d19      	adds	r1, r3, #4
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	9103      	str	r1, [sp, #12]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	bfbb      	ittet	lt
 80121c2:	425b      	neglt	r3, r3
 80121c4:	f042 0202 	orrlt.w	r2, r2, #2
 80121c8:	9307      	strge	r3, [sp, #28]
 80121ca:	9307      	strlt	r3, [sp, #28]
 80121cc:	bfb8      	it	lt
 80121ce:	9204      	strlt	r2, [sp, #16]
 80121d0:	7823      	ldrb	r3, [r4, #0]
 80121d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80121d4:	d10a      	bne.n	80121ec <_svfiprintf_r+0x130>
 80121d6:	7863      	ldrb	r3, [r4, #1]
 80121d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80121da:	d132      	bne.n	8012242 <_svfiprintf_r+0x186>
 80121dc:	9b03      	ldr	r3, [sp, #12]
 80121de:	1d1a      	adds	r2, r3, #4
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	9203      	str	r2, [sp, #12]
 80121e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80121e8:	3402      	adds	r4, #2
 80121ea:	9305      	str	r3, [sp, #20]
 80121ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80122b0 <_svfiprintf_r+0x1f4>
 80121f0:	7821      	ldrb	r1, [r4, #0]
 80121f2:	2203      	movs	r2, #3
 80121f4:	4650      	mov	r0, sl
 80121f6:	f7ed fffb 	bl	80001f0 <memchr>
 80121fa:	b138      	cbz	r0, 801220c <_svfiprintf_r+0x150>
 80121fc:	9b04      	ldr	r3, [sp, #16]
 80121fe:	eba0 000a 	sub.w	r0, r0, sl
 8012202:	2240      	movs	r2, #64	@ 0x40
 8012204:	4082      	lsls	r2, r0
 8012206:	4313      	orrs	r3, r2
 8012208:	3401      	adds	r4, #1
 801220a:	9304      	str	r3, [sp, #16]
 801220c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012210:	4824      	ldr	r0, [pc, #144]	@ (80122a4 <_svfiprintf_r+0x1e8>)
 8012212:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012216:	2206      	movs	r2, #6
 8012218:	f7ed ffea 	bl	80001f0 <memchr>
 801221c:	2800      	cmp	r0, #0
 801221e:	d036      	beq.n	801228e <_svfiprintf_r+0x1d2>
 8012220:	4b21      	ldr	r3, [pc, #132]	@ (80122a8 <_svfiprintf_r+0x1ec>)
 8012222:	bb1b      	cbnz	r3, 801226c <_svfiprintf_r+0x1b0>
 8012224:	9b03      	ldr	r3, [sp, #12]
 8012226:	3307      	adds	r3, #7
 8012228:	f023 0307 	bic.w	r3, r3, #7
 801222c:	3308      	adds	r3, #8
 801222e:	9303      	str	r3, [sp, #12]
 8012230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012232:	4433      	add	r3, r6
 8012234:	9309      	str	r3, [sp, #36]	@ 0x24
 8012236:	e76a      	b.n	801210e <_svfiprintf_r+0x52>
 8012238:	fb0c 3202 	mla	r2, ip, r2, r3
 801223c:	460c      	mov	r4, r1
 801223e:	2001      	movs	r0, #1
 8012240:	e7a8      	b.n	8012194 <_svfiprintf_r+0xd8>
 8012242:	2300      	movs	r3, #0
 8012244:	3401      	adds	r4, #1
 8012246:	9305      	str	r3, [sp, #20]
 8012248:	4619      	mov	r1, r3
 801224a:	f04f 0c0a 	mov.w	ip, #10
 801224e:	4620      	mov	r0, r4
 8012250:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012254:	3a30      	subs	r2, #48	@ 0x30
 8012256:	2a09      	cmp	r2, #9
 8012258:	d903      	bls.n	8012262 <_svfiprintf_r+0x1a6>
 801225a:	2b00      	cmp	r3, #0
 801225c:	d0c6      	beq.n	80121ec <_svfiprintf_r+0x130>
 801225e:	9105      	str	r1, [sp, #20]
 8012260:	e7c4      	b.n	80121ec <_svfiprintf_r+0x130>
 8012262:	fb0c 2101 	mla	r1, ip, r1, r2
 8012266:	4604      	mov	r4, r0
 8012268:	2301      	movs	r3, #1
 801226a:	e7f0      	b.n	801224e <_svfiprintf_r+0x192>
 801226c:	ab03      	add	r3, sp, #12
 801226e:	9300      	str	r3, [sp, #0]
 8012270:	462a      	mov	r2, r5
 8012272:	4b0e      	ldr	r3, [pc, #56]	@ (80122ac <_svfiprintf_r+0x1f0>)
 8012274:	a904      	add	r1, sp, #16
 8012276:	4638      	mov	r0, r7
 8012278:	f7fc feba 	bl	800eff0 <_printf_float>
 801227c:	1c42      	adds	r2, r0, #1
 801227e:	4606      	mov	r6, r0
 8012280:	d1d6      	bne.n	8012230 <_svfiprintf_r+0x174>
 8012282:	89ab      	ldrh	r3, [r5, #12]
 8012284:	065b      	lsls	r3, r3, #25
 8012286:	f53f af2d 	bmi.w	80120e4 <_svfiprintf_r+0x28>
 801228a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801228c:	e72c      	b.n	80120e8 <_svfiprintf_r+0x2c>
 801228e:	ab03      	add	r3, sp, #12
 8012290:	9300      	str	r3, [sp, #0]
 8012292:	462a      	mov	r2, r5
 8012294:	4b05      	ldr	r3, [pc, #20]	@ (80122ac <_svfiprintf_r+0x1f0>)
 8012296:	a904      	add	r1, sp, #16
 8012298:	4638      	mov	r0, r7
 801229a:	f7fd f941 	bl	800f520 <_printf_i>
 801229e:	e7ed      	b.n	801227c <_svfiprintf_r+0x1c0>
 80122a0:	0806d78d 	.word	0x0806d78d
 80122a4:	0806d797 	.word	0x0806d797
 80122a8:	0800eff1 	.word	0x0800eff1
 80122ac:	08012007 	.word	0x08012007
 80122b0:	0806d793 	.word	0x0806d793

080122b4 <_sungetc_r>:
 80122b4:	b538      	push	{r3, r4, r5, lr}
 80122b6:	1c4b      	adds	r3, r1, #1
 80122b8:	4614      	mov	r4, r2
 80122ba:	d103      	bne.n	80122c4 <_sungetc_r+0x10>
 80122bc:	f04f 35ff 	mov.w	r5, #4294967295
 80122c0:	4628      	mov	r0, r5
 80122c2:	bd38      	pop	{r3, r4, r5, pc}
 80122c4:	8993      	ldrh	r3, [r2, #12]
 80122c6:	f023 0320 	bic.w	r3, r3, #32
 80122ca:	8193      	strh	r3, [r2, #12]
 80122cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80122ce:	6852      	ldr	r2, [r2, #4]
 80122d0:	b2cd      	uxtb	r5, r1
 80122d2:	b18b      	cbz	r3, 80122f8 <_sungetc_r+0x44>
 80122d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80122d6:	4293      	cmp	r3, r2
 80122d8:	dd08      	ble.n	80122ec <_sungetc_r+0x38>
 80122da:	6823      	ldr	r3, [r4, #0]
 80122dc:	1e5a      	subs	r2, r3, #1
 80122de:	6022      	str	r2, [r4, #0]
 80122e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80122e4:	6863      	ldr	r3, [r4, #4]
 80122e6:	3301      	adds	r3, #1
 80122e8:	6063      	str	r3, [r4, #4]
 80122ea:	e7e9      	b.n	80122c0 <_sungetc_r+0xc>
 80122ec:	4621      	mov	r1, r4
 80122ee:	f000 fbf6 	bl	8012ade <__submore>
 80122f2:	2800      	cmp	r0, #0
 80122f4:	d0f1      	beq.n	80122da <_sungetc_r+0x26>
 80122f6:	e7e1      	b.n	80122bc <_sungetc_r+0x8>
 80122f8:	6921      	ldr	r1, [r4, #16]
 80122fa:	6823      	ldr	r3, [r4, #0]
 80122fc:	b151      	cbz	r1, 8012314 <_sungetc_r+0x60>
 80122fe:	4299      	cmp	r1, r3
 8012300:	d208      	bcs.n	8012314 <_sungetc_r+0x60>
 8012302:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012306:	42a9      	cmp	r1, r5
 8012308:	d104      	bne.n	8012314 <_sungetc_r+0x60>
 801230a:	3b01      	subs	r3, #1
 801230c:	3201      	adds	r2, #1
 801230e:	6023      	str	r3, [r4, #0]
 8012310:	6062      	str	r2, [r4, #4]
 8012312:	e7d5      	b.n	80122c0 <_sungetc_r+0xc>
 8012314:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8012318:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801231c:	6363      	str	r3, [r4, #52]	@ 0x34
 801231e:	2303      	movs	r3, #3
 8012320:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012322:	4623      	mov	r3, r4
 8012324:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012328:	6023      	str	r3, [r4, #0]
 801232a:	2301      	movs	r3, #1
 801232c:	e7dc      	b.n	80122e8 <_sungetc_r+0x34>

0801232e <__ssrefill_r>:
 801232e:	b510      	push	{r4, lr}
 8012330:	460c      	mov	r4, r1
 8012332:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012334:	b169      	cbz	r1, 8012352 <__ssrefill_r+0x24>
 8012336:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801233a:	4299      	cmp	r1, r3
 801233c:	d001      	beq.n	8012342 <__ssrefill_r+0x14>
 801233e:	f7fe fd5f 	bl	8010e00 <_free_r>
 8012342:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012344:	6063      	str	r3, [r4, #4]
 8012346:	2000      	movs	r0, #0
 8012348:	6360      	str	r0, [r4, #52]	@ 0x34
 801234a:	b113      	cbz	r3, 8012352 <__ssrefill_r+0x24>
 801234c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801234e:	6023      	str	r3, [r4, #0]
 8012350:	bd10      	pop	{r4, pc}
 8012352:	6923      	ldr	r3, [r4, #16]
 8012354:	6023      	str	r3, [r4, #0]
 8012356:	2300      	movs	r3, #0
 8012358:	6063      	str	r3, [r4, #4]
 801235a:	89a3      	ldrh	r3, [r4, #12]
 801235c:	f043 0320 	orr.w	r3, r3, #32
 8012360:	81a3      	strh	r3, [r4, #12]
 8012362:	f04f 30ff 	mov.w	r0, #4294967295
 8012366:	e7f3      	b.n	8012350 <__ssrefill_r+0x22>

08012368 <__ssvfiscanf_r>:
 8012368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801236c:	460c      	mov	r4, r1
 801236e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8012372:	2100      	movs	r1, #0
 8012374:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012378:	49a6      	ldr	r1, [pc, #664]	@ (8012614 <__ssvfiscanf_r+0x2ac>)
 801237a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801237c:	f10d 0804 	add.w	r8, sp, #4
 8012380:	49a5      	ldr	r1, [pc, #660]	@ (8012618 <__ssvfiscanf_r+0x2b0>)
 8012382:	4fa6      	ldr	r7, [pc, #664]	@ (801261c <__ssvfiscanf_r+0x2b4>)
 8012384:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012388:	4606      	mov	r6, r0
 801238a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801238c:	9300      	str	r3, [sp, #0]
 801238e:	f892 9000 	ldrb.w	r9, [r2]
 8012392:	f1b9 0f00 	cmp.w	r9, #0
 8012396:	f000 8158 	beq.w	801264a <__ssvfiscanf_r+0x2e2>
 801239a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801239e:	f013 0308 	ands.w	r3, r3, #8
 80123a2:	f102 0501 	add.w	r5, r2, #1
 80123a6:	d019      	beq.n	80123dc <__ssvfiscanf_r+0x74>
 80123a8:	6863      	ldr	r3, [r4, #4]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	dd0f      	ble.n	80123ce <__ssvfiscanf_r+0x66>
 80123ae:	6823      	ldr	r3, [r4, #0]
 80123b0:	781a      	ldrb	r2, [r3, #0]
 80123b2:	5cba      	ldrb	r2, [r7, r2]
 80123b4:	0712      	lsls	r2, r2, #28
 80123b6:	d401      	bmi.n	80123bc <__ssvfiscanf_r+0x54>
 80123b8:	462a      	mov	r2, r5
 80123ba:	e7e8      	b.n	801238e <__ssvfiscanf_r+0x26>
 80123bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80123be:	3201      	adds	r2, #1
 80123c0:	9245      	str	r2, [sp, #276]	@ 0x114
 80123c2:	6862      	ldr	r2, [r4, #4]
 80123c4:	3301      	adds	r3, #1
 80123c6:	3a01      	subs	r2, #1
 80123c8:	6062      	str	r2, [r4, #4]
 80123ca:	6023      	str	r3, [r4, #0]
 80123cc:	e7ec      	b.n	80123a8 <__ssvfiscanf_r+0x40>
 80123ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80123d0:	4621      	mov	r1, r4
 80123d2:	4630      	mov	r0, r6
 80123d4:	4798      	blx	r3
 80123d6:	2800      	cmp	r0, #0
 80123d8:	d0e9      	beq.n	80123ae <__ssvfiscanf_r+0x46>
 80123da:	e7ed      	b.n	80123b8 <__ssvfiscanf_r+0x50>
 80123dc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80123e0:	f040 8085 	bne.w	80124ee <__ssvfiscanf_r+0x186>
 80123e4:	9341      	str	r3, [sp, #260]	@ 0x104
 80123e6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80123e8:	7853      	ldrb	r3, [r2, #1]
 80123ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80123ec:	bf02      	ittt	eq
 80123ee:	2310      	moveq	r3, #16
 80123f0:	1c95      	addeq	r5, r2, #2
 80123f2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80123f4:	220a      	movs	r2, #10
 80123f6:	46aa      	mov	sl, r5
 80123f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80123fc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012400:	2b09      	cmp	r3, #9
 8012402:	d91e      	bls.n	8012442 <__ssvfiscanf_r+0xda>
 8012404:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8012620 <__ssvfiscanf_r+0x2b8>
 8012408:	2203      	movs	r2, #3
 801240a:	4658      	mov	r0, fp
 801240c:	f7ed fef0 	bl	80001f0 <memchr>
 8012410:	b138      	cbz	r0, 8012422 <__ssvfiscanf_r+0xba>
 8012412:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012414:	eba0 000b 	sub.w	r0, r0, fp
 8012418:	2301      	movs	r3, #1
 801241a:	4083      	lsls	r3, r0
 801241c:	4313      	orrs	r3, r2
 801241e:	9341      	str	r3, [sp, #260]	@ 0x104
 8012420:	4655      	mov	r5, sl
 8012422:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012426:	2b78      	cmp	r3, #120	@ 0x78
 8012428:	d806      	bhi.n	8012438 <__ssvfiscanf_r+0xd0>
 801242a:	2b57      	cmp	r3, #87	@ 0x57
 801242c:	d810      	bhi.n	8012450 <__ssvfiscanf_r+0xe8>
 801242e:	2b25      	cmp	r3, #37	@ 0x25
 8012430:	d05d      	beq.n	80124ee <__ssvfiscanf_r+0x186>
 8012432:	d857      	bhi.n	80124e4 <__ssvfiscanf_r+0x17c>
 8012434:	2b00      	cmp	r3, #0
 8012436:	d075      	beq.n	8012524 <__ssvfiscanf_r+0x1bc>
 8012438:	2303      	movs	r3, #3
 801243a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801243c:	230a      	movs	r3, #10
 801243e:	9342      	str	r3, [sp, #264]	@ 0x108
 8012440:	e088      	b.n	8012554 <__ssvfiscanf_r+0x1ec>
 8012442:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012444:	fb02 1103 	mla	r1, r2, r3, r1
 8012448:	3930      	subs	r1, #48	@ 0x30
 801244a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801244c:	4655      	mov	r5, sl
 801244e:	e7d2      	b.n	80123f6 <__ssvfiscanf_r+0x8e>
 8012450:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012454:	2a20      	cmp	r2, #32
 8012456:	d8ef      	bhi.n	8012438 <__ssvfiscanf_r+0xd0>
 8012458:	a101      	add	r1, pc, #4	@ (adr r1, 8012460 <__ssvfiscanf_r+0xf8>)
 801245a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801245e:	bf00      	nop
 8012460:	08012533 	.word	0x08012533
 8012464:	08012439 	.word	0x08012439
 8012468:	08012439 	.word	0x08012439
 801246c:	0801258d 	.word	0x0801258d
 8012470:	08012439 	.word	0x08012439
 8012474:	08012439 	.word	0x08012439
 8012478:	08012439 	.word	0x08012439
 801247c:	08012439 	.word	0x08012439
 8012480:	08012439 	.word	0x08012439
 8012484:	08012439 	.word	0x08012439
 8012488:	08012439 	.word	0x08012439
 801248c:	080125a3 	.word	0x080125a3
 8012490:	08012589 	.word	0x08012589
 8012494:	080124eb 	.word	0x080124eb
 8012498:	080124eb 	.word	0x080124eb
 801249c:	080124eb 	.word	0x080124eb
 80124a0:	08012439 	.word	0x08012439
 80124a4:	08012545 	.word	0x08012545
 80124a8:	08012439 	.word	0x08012439
 80124ac:	08012439 	.word	0x08012439
 80124b0:	08012439 	.word	0x08012439
 80124b4:	08012439 	.word	0x08012439
 80124b8:	080125b3 	.word	0x080125b3
 80124bc:	0801254d 	.word	0x0801254d
 80124c0:	0801252b 	.word	0x0801252b
 80124c4:	08012439 	.word	0x08012439
 80124c8:	08012439 	.word	0x08012439
 80124cc:	080125af 	.word	0x080125af
 80124d0:	08012439 	.word	0x08012439
 80124d4:	08012589 	.word	0x08012589
 80124d8:	08012439 	.word	0x08012439
 80124dc:	08012439 	.word	0x08012439
 80124e0:	08012533 	.word	0x08012533
 80124e4:	3b45      	subs	r3, #69	@ 0x45
 80124e6:	2b02      	cmp	r3, #2
 80124e8:	d8a6      	bhi.n	8012438 <__ssvfiscanf_r+0xd0>
 80124ea:	2305      	movs	r3, #5
 80124ec:	e031      	b.n	8012552 <__ssvfiscanf_r+0x1ea>
 80124ee:	6863      	ldr	r3, [r4, #4]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	dd0d      	ble.n	8012510 <__ssvfiscanf_r+0x1a8>
 80124f4:	6823      	ldr	r3, [r4, #0]
 80124f6:	781a      	ldrb	r2, [r3, #0]
 80124f8:	454a      	cmp	r2, r9
 80124fa:	f040 80a6 	bne.w	801264a <__ssvfiscanf_r+0x2e2>
 80124fe:	3301      	adds	r3, #1
 8012500:	6862      	ldr	r2, [r4, #4]
 8012502:	6023      	str	r3, [r4, #0]
 8012504:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012506:	3a01      	subs	r2, #1
 8012508:	3301      	adds	r3, #1
 801250a:	6062      	str	r2, [r4, #4]
 801250c:	9345      	str	r3, [sp, #276]	@ 0x114
 801250e:	e753      	b.n	80123b8 <__ssvfiscanf_r+0x50>
 8012510:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012512:	4621      	mov	r1, r4
 8012514:	4630      	mov	r0, r6
 8012516:	4798      	blx	r3
 8012518:	2800      	cmp	r0, #0
 801251a:	d0eb      	beq.n	80124f4 <__ssvfiscanf_r+0x18c>
 801251c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801251e:	2800      	cmp	r0, #0
 8012520:	f040 808b 	bne.w	801263a <__ssvfiscanf_r+0x2d2>
 8012524:	f04f 30ff 	mov.w	r0, #4294967295
 8012528:	e08b      	b.n	8012642 <__ssvfiscanf_r+0x2da>
 801252a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801252c:	f042 0220 	orr.w	r2, r2, #32
 8012530:	9241      	str	r2, [sp, #260]	@ 0x104
 8012532:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012538:	9241      	str	r2, [sp, #260]	@ 0x104
 801253a:	2210      	movs	r2, #16
 801253c:	2b6e      	cmp	r3, #110	@ 0x6e
 801253e:	9242      	str	r2, [sp, #264]	@ 0x108
 8012540:	d902      	bls.n	8012548 <__ssvfiscanf_r+0x1e0>
 8012542:	e005      	b.n	8012550 <__ssvfiscanf_r+0x1e8>
 8012544:	2300      	movs	r3, #0
 8012546:	9342      	str	r3, [sp, #264]	@ 0x108
 8012548:	2303      	movs	r3, #3
 801254a:	e002      	b.n	8012552 <__ssvfiscanf_r+0x1ea>
 801254c:	2308      	movs	r3, #8
 801254e:	9342      	str	r3, [sp, #264]	@ 0x108
 8012550:	2304      	movs	r3, #4
 8012552:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012554:	6863      	ldr	r3, [r4, #4]
 8012556:	2b00      	cmp	r3, #0
 8012558:	dd39      	ble.n	80125ce <__ssvfiscanf_r+0x266>
 801255a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801255c:	0659      	lsls	r1, r3, #25
 801255e:	d404      	bmi.n	801256a <__ssvfiscanf_r+0x202>
 8012560:	6823      	ldr	r3, [r4, #0]
 8012562:	781a      	ldrb	r2, [r3, #0]
 8012564:	5cba      	ldrb	r2, [r7, r2]
 8012566:	0712      	lsls	r2, r2, #28
 8012568:	d438      	bmi.n	80125dc <__ssvfiscanf_r+0x274>
 801256a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801256c:	2b02      	cmp	r3, #2
 801256e:	dc47      	bgt.n	8012600 <__ssvfiscanf_r+0x298>
 8012570:	466b      	mov	r3, sp
 8012572:	4622      	mov	r2, r4
 8012574:	a941      	add	r1, sp, #260	@ 0x104
 8012576:	4630      	mov	r0, r6
 8012578:	f000 f86c 	bl	8012654 <_scanf_chars>
 801257c:	2801      	cmp	r0, #1
 801257e:	d064      	beq.n	801264a <__ssvfiscanf_r+0x2e2>
 8012580:	2802      	cmp	r0, #2
 8012582:	f47f af19 	bne.w	80123b8 <__ssvfiscanf_r+0x50>
 8012586:	e7c9      	b.n	801251c <__ssvfiscanf_r+0x1b4>
 8012588:	220a      	movs	r2, #10
 801258a:	e7d7      	b.n	801253c <__ssvfiscanf_r+0x1d4>
 801258c:	4629      	mov	r1, r5
 801258e:	4640      	mov	r0, r8
 8012590:	f000 fa6c 	bl	8012a6c <__sccl>
 8012594:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801259a:	9341      	str	r3, [sp, #260]	@ 0x104
 801259c:	4605      	mov	r5, r0
 801259e:	2301      	movs	r3, #1
 80125a0:	e7d7      	b.n	8012552 <__ssvfiscanf_r+0x1ea>
 80125a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80125a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125a8:	9341      	str	r3, [sp, #260]	@ 0x104
 80125aa:	2300      	movs	r3, #0
 80125ac:	e7d1      	b.n	8012552 <__ssvfiscanf_r+0x1ea>
 80125ae:	2302      	movs	r3, #2
 80125b0:	e7cf      	b.n	8012552 <__ssvfiscanf_r+0x1ea>
 80125b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80125b4:	06c3      	lsls	r3, r0, #27
 80125b6:	f53f aeff 	bmi.w	80123b8 <__ssvfiscanf_r+0x50>
 80125ba:	9b00      	ldr	r3, [sp, #0]
 80125bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80125be:	1d19      	adds	r1, r3, #4
 80125c0:	9100      	str	r1, [sp, #0]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	07c0      	lsls	r0, r0, #31
 80125c6:	bf4c      	ite	mi
 80125c8:	801a      	strhmi	r2, [r3, #0]
 80125ca:	601a      	strpl	r2, [r3, #0]
 80125cc:	e6f4      	b.n	80123b8 <__ssvfiscanf_r+0x50>
 80125ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80125d0:	4621      	mov	r1, r4
 80125d2:	4630      	mov	r0, r6
 80125d4:	4798      	blx	r3
 80125d6:	2800      	cmp	r0, #0
 80125d8:	d0bf      	beq.n	801255a <__ssvfiscanf_r+0x1f2>
 80125da:	e79f      	b.n	801251c <__ssvfiscanf_r+0x1b4>
 80125dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80125de:	3201      	adds	r2, #1
 80125e0:	9245      	str	r2, [sp, #276]	@ 0x114
 80125e2:	6862      	ldr	r2, [r4, #4]
 80125e4:	3a01      	subs	r2, #1
 80125e6:	2a00      	cmp	r2, #0
 80125e8:	6062      	str	r2, [r4, #4]
 80125ea:	dd02      	ble.n	80125f2 <__ssvfiscanf_r+0x28a>
 80125ec:	3301      	adds	r3, #1
 80125ee:	6023      	str	r3, [r4, #0]
 80125f0:	e7b6      	b.n	8012560 <__ssvfiscanf_r+0x1f8>
 80125f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80125f4:	4621      	mov	r1, r4
 80125f6:	4630      	mov	r0, r6
 80125f8:	4798      	blx	r3
 80125fa:	2800      	cmp	r0, #0
 80125fc:	d0b0      	beq.n	8012560 <__ssvfiscanf_r+0x1f8>
 80125fe:	e78d      	b.n	801251c <__ssvfiscanf_r+0x1b4>
 8012600:	2b04      	cmp	r3, #4
 8012602:	dc0f      	bgt.n	8012624 <__ssvfiscanf_r+0x2bc>
 8012604:	466b      	mov	r3, sp
 8012606:	4622      	mov	r2, r4
 8012608:	a941      	add	r1, sp, #260	@ 0x104
 801260a:	4630      	mov	r0, r6
 801260c:	f000 f87c 	bl	8012708 <_scanf_i>
 8012610:	e7b4      	b.n	801257c <__ssvfiscanf_r+0x214>
 8012612:	bf00      	nop
 8012614:	080122b5 	.word	0x080122b5
 8012618:	0801232f 	.word	0x0801232f
 801261c:	0806d811 	.word	0x0806d811
 8012620:	0806d793 	.word	0x0806d793
 8012624:	4b0a      	ldr	r3, [pc, #40]	@ (8012650 <__ssvfiscanf_r+0x2e8>)
 8012626:	2b00      	cmp	r3, #0
 8012628:	f43f aec6 	beq.w	80123b8 <__ssvfiscanf_r+0x50>
 801262c:	466b      	mov	r3, sp
 801262e:	4622      	mov	r2, r4
 8012630:	a941      	add	r1, sp, #260	@ 0x104
 8012632:	4630      	mov	r0, r6
 8012634:	f7fd f892 	bl	800f75c <_scanf_float>
 8012638:	e7a0      	b.n	801257c <__ssvfiscanf_r+0x214>
 801263a:	89a3      	ldrh	r3, [r4, #12]
 801263c:	065b      	lsls	r3, r3, #25
 801263e:	f53f af71 	bmi.w	8012524 <__ssvfiscanf_r+0x1bc>
 8012642:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8012646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801264a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801264c:	e7f9      	b.n	8012642 <__ssvfiscanf_r+0x2da>
 801264e:	bf00      	nop
 8012650:	0800f75d 	.word	0x0800f75d

08012654 <_scanf_chars>:
 8012654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012658:	4615      	mov	r5, r2
 801265a:	688a      	ldr	r2, [r1, #8]
 801265c:	4680      	mov	r8, r0
 801265e:	460c      	mov	r4, r1
 8012660:	b932      	cbnz	r2, 8012670 <_scanf_chars+0x1c>
 8012662:	698a      	ldr	r2, [r1, #24]
 8012664:	2a00      	cmp	r2, #0
 8012666:	bf14      	ite	ne
 8012668:	f04f 32ff 	movne.w	r2, #4294967295
 801266c:	2201      	moveq	r2, #1
 801266e:	608a      	str	r2, [r1, #8]
 8012670:	6822      	ldr	r2, [r4, #0]
 8012672:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012704 <_scanf_chars+0xb0>
 8012676:	06d1      	lsls	r1, r2, #27
 8012678:	bf5f      	itttt	pl
 801267a:	681a      	ldrpl	r2, [r3, #0]
 801267c:	1d11      	addpl	r1, r2, #4
 801267e:	6019      	strpl	r1, [r3, #0]
 8012680:	6816      	ldrpl	r6, [r2, #0]
 8012682:	2700      	movs	r7, #0
 8012684:	69a0      	ldr	r0, [r4, #24]
 8012686:	b188      	cbz	r0, 80126ac <_scanf_chars+0x58>
 8012688:	2801      	cmp	r0, #1
 801268a:	d107      	bne.n	801269c <_scanf_chars+0x48>
 801268c:	682b      	ldr	r3, [r5, #0]
 801268e:	781a      	ldrb	r2, [r3, #0]
 8012690:	6963      	ldr	r3, [r4, #20]
 8012692:	5c9b      	ldrb	r3, [r3, r2]
 8012694:	b953      	cbnz	r3, 80126ac <_scanf_chars+0x58>
 8012696:	2f00      	cmp	r7, #0
 8012698:	d031      	beq.n	80126fe <_scanf_chars+0xaa>
 801269a:	e022      	b.n	80126e2 <_scanf_chars+0x8e>
 801269c:	2802      	cmp	r0, #2
 801269e:	d120      	bne.n	80126e2 <_scanf_chars+0x8e>
 80126a0:	682b      	ldr	r3, [r5, #0]
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80126a8:	071b      	lsls	r3, r3, #28
 80126aa:	d41a      	bmi.n	80126e2 <_scanf_chars+0x8e>
 80126ac:	6823      	ldr	r3, [r4, #0]
 80126ae:	06da      	lsls	r2, r3, #27
 80126b0:	bf5e      	ittt	pl
 80126b2:	682b      	ldrpl	r3, [r5, #0]
 80126b4:	781b      	ldrbpl	r3, [r3, #0]
 80126b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80126ba:	682a      	ldr	r2, [r5, #0]
 80126bc:	686b      	ldr	r3, [r5, #4]
 80126be:	3201      	adds	r2, #1
 80126c0:	602a      	str	r2, [r5, #0]
 80126c2:	68a2      	ldr	r2, [r4, #8]
 80126c4:	3b01      	subs	r3, #1
 80126c6:	3a01      	subs	r2, #1
 80126c8:	606b      	str	r3, [r5, #4]
 80126ca:	3701      	adds	r7, #1
 80126cc:	60a2      	str	r2, [r4, #8]
 80126ce:	b142      	cbz	r2, 80126e2 <_scanf_chars+0x8e>
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	dcd7      	bgt.n	8012684 <_scanf_chars+0x30>
 80126d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80126d8:	4629      	mov	r1, r5
 80126da:	4640      	mov	r0, r8
 80126dc:	4798      	blx	r3
 80126de:	2800      	cmp	r0, #0
 80126e0:	d0d0      	beq.n	8012684 <_scanf_chars+0x30>
 80126e2:	6823      	ldr	r3, [r4, #0]
 80126e4:	f013 0310 	ands.w	r3, r3, #16
 80126e8:	d105      	bne.n	80126f6 <_scanf_chars+0xa2>
 80126ea:	68e2      	ldr	r2, [r4, #12]
 80126ec:	3201      	adds	r2, #1
 80126ee:	60e2      	str	r2, [r4, #12]
 80126f0:	69a2      	ldr	r2, [r4, #24]
 80126f2:	b102      	cbz	r2, 80126f6 <_scanf_chars+0xa2>
 80126f4:	7033      	strb	r3, [r6, #0]
 80126f6:	6923      	ldr	r3, [r4, #16]
 80126f8:	443b      	add	r3, r7
 80126fa:	6123      	str	r3, [r4, #16]
 80126fc:	2000      	movs	r0, #0
 80126fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012702:	bf00      	nop
 8012704:	0806d811 	.word	0x0806d811

08012708 <_scanf_i>:
 8012708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801270c:	4698      	mov	r8, r3
 801270e:	4b74      	ldr	r3, [pc, #464]	@ (80128e0 <_scanf_i+0x1d8>)
 8012710:	460c      	mov	r4, r1
 8012712:	4682      	mov	sl, r0
 8012714:	4616      	mov	r6, r2
 8012716:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801271a:	b087      	sub	sp, #28
 801271c:	ab03      	add	r3, sp, #12
 801271e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012722:	4b70      	ldr	r3, [pc, #448]	@ (80128e4 <_scanf_i+0x1dc>)
 8012724:	69a1      	ldr	r1, [r4, #24]
 8012726:	4a70      	ldr	r2, [pc, #448]	@ (80128e8 <_scanf_i+0x1e0>)
 8012728:	2903      	cmp	r1, #3
 801272a:	bf08      	it	eq
 801272c:	461a      	moveq	r2, r3
 801272e:	68a3      	ldr	r3, [r4, #8]
 8012730:	9201      	str	r2, [sp, #4]
 8012732:	1e5a      	subs	r2, r3, #1
 8012734:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012738:	bf88      	it	hi
 801273a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801273e:	4627      	mov	r7, r4
 8012740:	bf82      	ittt	hi
 8012742:	eb03 0905 	addhi.w	r9, r3, r5
 8012746:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801274a:	60a3      	strhi	r3, [r4, #8]
 801274c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012750:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012754:	bf98      	it	ls
 8012756:	f04f 0900 	movls.w	r9, #0
 801275a:	6023      	str	r3, [r4, #0]
 801275c:	463d      	mov	r5, r7
 801275e:	f04f 0b00 	mov.w	fp, #0
 8012762:	6831      	ldr	r1, [r6, #0]
 8012764:	ab03      	add	r3, sp, #12
 8012766:	7809      	ldrb	r1, [r1, #0]
 8012768:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801276c:	2202      	movs	r2, #2
 801276e:	f7ed fd3f 	bl	80001f0 <memchr>
 8012772:	b328      	cbz	r0, 80127c0 <_scanf_i+0xb8>
 8012774:	f1bb 0f01 	cmp.w	fp, #1
 8012778:	d159      	bne.n	801282e <_scanf_i+0x126>
 801277a:	6862      	ldr	r2, [r4, #4]
 801277c:	b92a      	cbnz	r2, 801278a <_scanf_i+0x82>
 801277e:	6822      	ldr	r2, [r4, #0]
 8012780:	2108      	movs	r1, #8
 8012782:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012786:	6061      	str	r1, [r4, #4]
 8012788:	6022      	str	r2, [r4, #0]
 801278a:	6822      	ldr	r2, [r4, #0]
 801278c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012790:	6022      	str	r2, [r4, #0]
 8012792:	68a2      	ldr	r2, [r4, #8]
 8012794:	1e51      	subs	r1, r2, #1
 8012796:	60a1      	str	r1, [r4, #8]
 8012798:	b192      	cbz	r2, 80127c0 <_scanf_i+0xb8>
 801279a:	6832      	ldr	r2, [r6, #0]
 801279c:	1c51      	adds	r1, r2, #1
 801279e:	6031      	str	r1, [r6, #0]
 80127a0:	7812      	ldrb	r2, [r2, #0]
 80127a2:	f805 2b01 	strb.w	r2, [r5], #1
 80127a6:	6872      	ldr	r2, [r6, #4]
 80127a8:	3a01      	subs	r2, #1
 80127aa:	2a00      	cmp	r2, #0
 80127ac:	6072      	str	r2, [r6, #4]
 80127ae:	dc07      	bgt.n	80127c0 <_scanf_i+0xb8>
 80127b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80127b4:	4631      	mov	r1, r6
 80127b6:	4650      	mov	r0, sl
 80127b8:	4790      	blx	r2
 80127ba:	2800      	cmp	r0, #0
 80127bc:	f040 8085 	bne.w	80128ca <_scanf_i+0x1c2>
 80127c0:	f10b 0b01 	add.w	fp, fp, #1
 80127c4:	f1bb 0f03 	cmp.w	fp, #3
 80127c8:	d1cb      	bne.n	8012762 <_scanf_i+0x5a>
 80127ca:	6863      	ldr	r3, [r4, #4]
 80127cc:	b90b      	cbnz	r3, 80127d2 <_scanf_i+0xca>
 80127ce:	230a      	movs	r3, #10
 80127d0:	6063      	str	r3, [r4, #4]
 80127d2:	6863      	ldr	r3, [r4, #4]
 80127d4:	4945      	ldr	r1, [pc, #276]	@ (80128ec <_scanf_i+0x1e4>)
 80127d6:	6960      	ldr	r0, [r4, #20]
 80127d8:	1ac9      	subs	r1, r1, r3
 80127da:	f000 f947 	bl	8012a6c <__sccl>
 80127de:	f04f 0b00 	mov.w	fp, #0
 80127e2:	68a3      	ldr	r3, [r4, #8]
 80127e4:	6822      	ldr	r2, [r4, #0]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d03d      	beq.n	8012866 <_scanf_i+0x15e>
 80127ea:	6831      	ldr	r1, [r6, #0]
 80127ec:	6960      	ldr	r0, [r4, #20]
 80127ee:	f891 c000 	ldrb.w	ip, [r1]
 80127f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80127f6:	2800      	cmp	r0, #0
 80127f8:	d035      	beq.n	8012866 <_scanf_i+0x15e>
 80127fa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80127fe:	d124      	bne.n	801284a <_scanf_i+0x142>
 8012800:	0510      	lsls	r0, r2, #20
 8012802:	d522      	bpl.n	801284a <_scanf_i+0x142>
 8012804:	f10b 0b01 	add.w	fp, fp, #1
 8012808:	f1b9 0f00 	cmp.w	r9, #0
 801280c:	d003      	beq.n	8012816 <_scanf_i+0x10e>
 801280e:	3301      	adds	r3, #1
 8012810:	f109 39ff 	add.w	r9, r9, #4294967295
 8012814:	60a3      	str	r3, [r4, #8]
 8012816:	6873      	ldr	r3, [r6, #4]
 8012818:	3b01      	subs	r3, #1
 801281a:	2b00      	cmp	r3, #0
 801281c:	6073      	str	r3, [r6, #4]
 801281e:	dd1b      	ble.n	8012858 <_scanf_i+0x150>
 8012820:	6833      	ldr	r3, [r6, #0]
 8012822:	3301      	adds	r3, #1
 8012824:	6033      	str	r3, [r6, #0]
 8012826:	68a3      	ldr	r3, [r4, #8]
 8012828:	3b01      	subs	r3, #1
 801282a:	60a3      	str	r3, [r4, #8]
 801282c:	e7d9      	b.n	80127e2 <_scanf_i+0xda>
 801282e:	f1bb 0f02 	cmp.w	fp, #2
 8012832:	d1ae      	bne.n	8012792 <_scanf_i+0x8a>
 8012834:	6822      	ldr	r2, [r4, #0]
 8012836:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801283a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801283e:	d1c4      	bne.n	80127ca <_scanf_i+0xc2>
 8012840:	2110      	movs	r1, #16
 8012842:	6061      	str	r1, [r4, #4]
 8012844:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012848:	e7a2      	b.n	8012790 <_scanf_i+0x88>
 801284a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801284e:	6022      	str	r2, [r4, #0]
 8012850:	780b      	ldrb	r3, [r1, #0]
 8012852:	f805 3b01 	strb.w	r3, [r5], #1
 8012856:	e7de      	b.n	8012816 <_scanf_i+0x10e>
 8012858:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801285c:	4631      	mov	r1, r6
 801285e:	4650      	mov	r0, sl
 8012860:	4798      	blx	r3
 8012862:	2800      	cmp	r0, #0
 8012864:	d0df      	beq.n	8012826 <_scanf_i+0x11e>
 8012866:	6823      	ldr	r3, [r4, #0]
 8012868:	05d9      	lsls	r1, r3, #23
 801286a:	d50d      	bpl.n	8012888 <_scanf_i+0x180>
 801286c:	42bd      	cmp	r5, r7
 801286e:	d909      	bls.n	8012884 <_scanf_i+0x17c>
 8012870:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012874:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012878:	4632      	mov	r2, r6
 801287a:	4650      	mov	r0, sl
 801287c:	4798      	blx	r3
 801287e:	f105 39ff 	add.w	r9, r5, #4294967295
 8012882:	464d      	mov	r5, r9
 8012884:	42bd      	cmp	r5, r7
 8012886:	d028      	beq.n	80128da <_scanf_i+0x1d2>
 8012888:	6822      	ldr	r2, [r4, #0]
 801288a:	f012 0210 	ands.w	r2, r2, #16
 801288e:	d113      	bne.n	80128b8 <_scanf_i+0x1b0>
 8012890:	702a      	strb	r2, [r5, #0]
 8012892:	6863      	ldr	r3, [r4, #4]
 8012894:	9e01      	ldr	r6, [sp, #4]
 8012896:	4639      	mov	r1, r7
 8012898:	4650      	mov	r0, sl
 801289a:	47b0      	blx	r6
 801289c:	f8d8 3000 	ldr.w	r3, [r8]
 80128a0:	6821      	ldr	r1, [r4, #0]
 80128a2:	1d1a      	adds	r2, r3, #4
 80128a4:	f8c8 2000 	str.w	r2, [r8]
 80128a8:	f011 0f20 	tst.w	r1, #32
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	d00f      	beq.n	80128d0 <_scanf_i+0x1c8>
 80128b0:	6018      	str	r0, [r3, #0]
 80128b2:	68e3      	ldr	r3, [r4, #12]
 80128b4:	3301      	adds	r3, #1
 80128b6:	60e3      	str	r3, [r4, #12]
 80128b8:	6923      	ldr	r3, [r4, #16]
 80128ba:	1bed      	subs	r5, r5, r7
 80128bc:	445d      	add	r5, fp
 80128be:	442b      	add	r3, r5
 80128c0:	6123      	str	r3, [r4, #16]
 80128c2:	2000      	movs	r0, #0
 80128c4:	b007      	add	sp, #28
 80128c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ca:	f04f 0b00 	mov.w	fp, #0
 80128ce:	e7ca      	b.n	8012866 <_scanf_i+0x15e>
 80128d0:	07ca      	lsls	r2, r1, #31
 80128d2:	bf4c      	ite	mi
 80128d4:	8018      	strhmi	r0, [r3, #0]
 80128d6:	6018      	strpl	r0, [r3, #0]
 80128d8:	e7eb      	b.n	80128b2 <_scanf_i+0x1aa>
 80128da:	2001      	movs	r0, #1
 80128dc:	e7f2      	b.n	80128c4 <_scanf_i+0x1bc>
 80128de:	bf00      	nop
 80128e0:	08013768 	.word	0x08013768
 80128e4:	0800ee99 	.word	0x0800ee99
 80128e8:	08012d19 	.word	0x08012d19
 80128ec:	0806d7ae 	.word	0x0806d7ae

080128f0 <__sflush_r>:
 80128f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80128f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128f8:	0716      	lsls	r6, r2, #28
 80128fa:	4605      	mov	r5, r0
 80128fc:	460c      	mov	r4, r1
 80128fe:	d454      	bmi.n	80129aa <__sflush_r+0xba>
 8012900:	684b      	ldr	r3, [r1, #4]
 8012902:	2b00      	cmp	r3, #0
 8012904:	dc02      	bgt.n	801290c <__sflush_r+0x1c>
 8012906:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012908:	2b00      	cmp	r3, #0
 801290a:	dd48      	ble.n	801299e <__sflush_r+0xae>
 801290c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801290e:	2e00      	cmp	r6, #0
 8012910:	d045      	beq.n	801299e <__sflush_r+0xae>
 8012912:	2300      	movs	r3, #0
 8012914:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012918:	682f      	ldr	r7, [r5, #0]
 801291a:	6a21      	ldr	r1, [r4, #32]
 801291c:	602b      	str	r3, [r5, #0]
 801291e:	d030      	beq.n	8012982 <__sflush_r+0x92>
 8012920:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012922:	89a3      	ldrh	r3, [r4, #12]
 8012924:	0759      	lsls	r1, r3, #29
 8012926:	d505      	bpl.n	8012934 <__sflush_r+0x44>
 8012928:	6863      	ldr	r3, [r4, #4]
 801292a:	1ad2      	subs	r2, r2, r3
 801292c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801292e:	b10b      	cbz	r3, 8012934 <__sflush_r+0x44>
 8012930:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012932:	1ad2      	subs	r2, r2, r3
 8012934:	2300      	movs	r3, #0
 8012936:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012938:	6a21      	ldr	r1, [r4, #32]
 801293a:	4628      	mov	r0, r5
 801293c:	47b0      	blx	r6
 801293e:	1c43      	adds	r3, r0, #1
 8012940:	89a3      	ldrh	r3, [r4, #12]
 8012942:	d106      	bne.n	8012952 <__sflush_r+0x62>
 8012944:	6829      	ldr	r1, [r5, #0]
 8012946:	291d      	cmp	r1, #29
 8012948:	d82b      	bhi.n	80129a2 <__sflush_r+0xb2>
 801294a:	4a2a      	ldr	r2, [pc, #168]	@ (80129f4 <__sflush_r+0x104>)
 801294c:	40ca      	lsrs	r2, r1
 801294e:	07d6      	lsls	r6, r2, #31
 8012950:	d527      	bpl.n	80129a2 <__sflush_r+0xb2>
 8012952:	2200      	movs	r2, #0
 8012954:	6062      	str	r2, [r4, #4]
 8012956:	04d9      	lsls	r1, r3, #19
 8012958:	6922      	ldr	r2, [r4, #16]
 801295a:	6022      	str	r2, [r4, #0]
 801295c:	d504      	bpl.n	8012968 <__sflush_r+0x78>
 801295e:	1c42      	adds	r2, r0, #1
 8012960:	d101      	bne.n	8012966 <__sflush_r+0x76>
 8012962:	682b      	ldr	r3, [r5, #0]
 8012964:	b903      	cbnz	r3, 8012968 <__sflush_r+0x78>
 8012966:	6560      	str	r0, [r4, #84]	@ 0x54
 8012968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801296a:	602f      	str	r7, [r5, #0]
 801296c:	b1b9      	cbz	r1, 801299e <__sflush_r+0xae>
 801296e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012972:	4299      	cmp	r1, r3
 8012974:	d002      	beq.n	801297c <__sflush_r+0x8c>
 8012976:	4628      	mov	r0, r5
 8012978:	f7fe fa42 	bl	8010e00 <_free_r>
 801297c:	2300      	movs	r3, #0
 801297e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012980:	e00d      	b.n	801299e <__sflush_r+0xae>
 8012982:	2301      	movs	r3, #1
 8012984:	4628      	mov	r0, r5
 8012986:	47b0      	blx	r6
 8012988:	4602      	mov	r2, r0
 801298a:	1c50      	adds	r0, r2, #1
 801298c:	d1c9      	bne.n	8012922 <__sflush_r+0x32>
 801298e:	682b      	ldr	r3, [r5, #0]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d0c6      	beq.n	8012922 <__sflush_r+0x32>
 8012994:	2b1d      	cmp	r3, #29
 8012996:	d001      	beq.n	801299c <__sflush_r+0xac>
 8012998:	2b16      	cmp	r3, #22
 801299a:	d11e      	bne.n	80129da <__sflush_r+0xea>
 801299c:	602f      	str	r7, [r5, #0]
 801299e:	2000      	movs	r0, #0
 80129a0:	e022      	b.n	80129e8 <__sflush_r+0xf8>
 80129a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129a6:	b21b      	sxth	r3, r3
 80129a8:	e01b      	b.n	80129e2 <__sflush_r+0xf2>
 80129aa:	690f      	ldr	r7, [r1, #16]
 80129ac:	2f00      	cmp	r7, #0
 80129ae:	d0f6      	beq.n	801299e <__sflush_r+0xae>
 80129b0:	0793      	lsls	r3, r2, #30
 80129b2:	680e      	ldr	r6, [r1, #0]
 80129b4:	bf08      	it	eq
 80129b6:	694b      	ldreq	r3, [r1, #20]
 80129b8:	600f      	str	r7, [r1, #0]
 80129ba:	bf18      	it	ne
 80129bc:	2300      	movne	r3, #0
 80129be:	eba6 0807 	sub.w	r8, r6, r7
 80129c2:	608b      	str	r3, [r1, #8]
 80129c4:	f1b8 0f00 	cmp.w	r8, #0
 80129c8:	dde9      	ble.n	801299e <__sflush_r+0xae>
 80129ca:	6a21      	ldr	r1, [r4, #32]
 80129cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80129ce:	4643      	mov	r3, r8
 80129d0:	463a      	mov	r2, r7
 80129d2:	4628      	mov	r0, r5
 80129d4:	47b0      	blx	r6
 80129d6:	2800      	cmp	r0, #0
 80129d8:	dc08      	bgt.n	80129ec <__sflush_r+0xfc>
 80129da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129e2:	81a3      	strh	r3, [r4, #12]
 80129e4:	f04f 30ff 	mov.w	r0, #4294967295
 80129e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ec:	4407      	add	r7, r0
 80129ee:	eba8 0800 	sub.w	r8, r8, r0
 80129f2:	e7e7      	b.n	80129c4 <__sflush_r+0xd4>
 80129f4:	20400001 	.word	0x20400001

080129f8 <_fflush_r>:
 80129f8:	b538      	push	{r3, r4, r5, lr}
 80129fa:	690b      	ldr	r3, [r1, #16]
 80129fc:	4605      	mov	r5, r0
 80129fe:	460c      	mov	r4, r1
 8012a00:	b913      	cbnz	r3, 8012a08 <_fflush_r+0x10>
 8012a02:	2500      	movs	r5, #0
 8012a04:	4628      	mov	r0, r5
 8012a06:	bd38      	pop	{r3, r4, r5, pc}
 8012a08:	b118      	cbz	r0, 8012a12 <_fflush_r+0x1a>
 8012a0a:	6a03      	ldr	r3, [r0, #32]
 8012a0c:	b90b      	cbnz	r3, 8012a12 <_fflush_r+0x1a>
 8012a0e:	f7fd f93f 	bl	800fc90 <__sinit>
 8012a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d0f3      	beq.n	8012a02 <_fflush_r+0xa>
 8012a1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012a1c:	07d0      	lsls	r0, r2, #31
 8012a1e:	d404      	bmi.n	8012a2a <_fflush_r+0x32>
 8012a20:	0599      	lsls	r1, r3, #22
 8012a22:	d402      	bmi.n	8012a2a <_fflush_r+0x32>
 8012a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a26:	f7fd fb54 	bl	80100d2 <__retarget_lock_acquire_recursive>
 8012a2a:	4628      	mov	r0, r5
 8012a2c:	4621      	mov	r1, r4
 8012a2e:	f7ff ff5f 	bl	80128f0 <__sflush_r>
 8012a32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a34:	07da      	lsls	r2, r3, #31
 8012a36:	4605      	mov	r5, r0
 8012a38:	d4e4      	bmi.n	8012a04 <_fflush_r+0xc>
 8012a3a:	89a3      	ldrh	r3, [r4, #12]
 8012a3c:	059b      	lsls	r3, r3, #22
 8012a3e:	d4e1      	bmi.n	8012a04 <_fflush_r+0xc>
 8012a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a42:	f7fd fb47 	bl	80100d4 <__retarget_lock_release_recursive>
 8012a46:	e7dd      	b.n	8012a04 <_fflush_r+0xc>

08012a48 <fiprintf>:
 8012a48:	b40e      	push	{r1, r2, r3}
 8012a4a:	b503      	push	{r0, r1, lr}
 8012a4c:	4601      	mov	r1, r0
 8012a4e:	ab03      	add	r3, sp, #12
 8012a50:	4805      	ldr	r0, [pc, #20]	@ (8012a68 <fiprintf+0x20>)
 8012a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a56:	6800      	ldr	r0, [r0, #0]
 8012a58:	9301      	str	r3, [sp, #4]
 8012a5a:	f000 f989 	bl	8012d70 <_vfiprintf_r>
 8012a5e:	b002      	add	sp, #8
 8012a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a64:	b003      	add	sp, #12
 8012a66:	4770      	bx	lr
 8012a68:	20000280 	.word	0x20000280

08012a6c <__sccl>:
 8012a6c:	b570      	push	{r4, r5, r6, lr}
 8012a6e:	780b      	ldrb	r3, [r1, #0]
 8012a70:	4604      	mov	r4, r0
 8012a72:	2b5e      	cmp	r3, #94	@ 0x5e
 8012a74:	bf0b      	itete	eq
 8012a76:	784b      	ldrbeq	r3, [r1, #1]
 8012a78:	1c4a      	addne	r2, r1, #1
 8012a7a:	1c8a      	addeq	r2, r1, #2
 8012a7c:	2100      	movne	r1, #0
 8012a7e:	bf08      	it	eq
 8012a80:	2101      	moveq	r1, #1
 8012a82:	3801      	subs	r0, #1
 8012a84:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012a88:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012a8c:	42a8      	cmp	r0, r5
 8012a8e:	d1fb      	bne.n	8012a88 <__sccl+0x1c>
 8012a90:	b90b      	cbnz	r3, 8012a96 <__sccl+0x2a>
 8012a92:	1e50      	subs	r0, r2, #1
 8012a94:	bd70      	pop	{r4, r5, r6, pc}
 8012a96:	f081 0101 	eor.w	r1, r1, #1
 8012a9a:	54e1      	strb	r1, [r4, r3]
 8012a9c:	4610      	mov	r0, r2
 8012a9e:	4602      	mov	r2, r0
 8012aa0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012aa4:	2d2d      	cmp	r5, #45	@ 0x2d
 8012aa6:	d005      	beq.n	8012ab4 <__sccl+0x48>
 8012aa8:	2d5d      	cmp	r5, #93	@ 0x5d
 8012aaa:	d016      	beq.n	8012ada <__sccl+0x6e>
 8012aac:	2d00      	cmp	r5, #0
 8012aae:	d0f1      	beq.n	8012a94 <__sccl+0x28>
 8012ab0:	462b      	mov	r3, r5
 8012ab2:	e7f2      	b.n	8012a9a <__sccl+0x2e>
 8012ab4:	7846      	ldrb	r6, [r0, #1]
 8012ab6:	2e5d      	cmp	r6, #93	@ 0x5d
 8012ab8:	d0fa      	beq.n	8012ab0 <__sccl+0x44>
 8012aba:	42b3      	cmp	r3, r6
 8012abc:	dcf8      	bgt.n	8012ab0 <__sccl+0x44>
 8012abe:	3002      	adds	r0, #2
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	3201      	adds	r2, #1
 8012ac4:	4296      	cmp	r6, r2
 8012ac6:	54a1      	strb	r1, [r4, r2]
 8012ac8:	dcfb      	bgt.n	8012ac2 <__sccl+0x56>
 8012aca:	1af2      	subs	r2, r6, r3
 8012acc:	3a01      	subs	r2, #1
 8012ace:	1c5d      	adds	r5, r3, #1
 8012ad0:	42b3      	cmp	r3, r6
 8012ad2:	bfa8      	it	ge
 8012ad4:	2200      	movge	r2, #0
 8012ad6:	18ab      	adds	r3, r5, r2
 8012ad8:	e7e1      	b.n	8012a9e <__sccl+0x32>
 8012ada:	4610      	mov	r0, r2
 8012adc:	e7da      	b.n	8012a94 <__sccl+0x28>

08012ade <__submore>:
 8012ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ae2:	460c      	mov	r4, r1
 8012ae4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012ae6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012aea:	4299      	cmp	r1, r3
 8012aec:	d11d      	bne.n	8012b2a <__submore+0x4c>
 8012aee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012af2:	f7fe fd33 	bl	801155c <_malloc_r>
 8012af6:	b918      	cbnz	r0, 8012b00 <__submore+0x22>
 8012af8:	f04f 30ff 	mov.w	r0, #4294967295
 8012afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012b04:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012b06:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012b0a:	6360      	str	r0, [r4, #52]	@ 0x34
 8012b0c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012b10:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012b14:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012b18:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012b1c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012b20:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012b24:	6020      	str	r0, [r4, #0]
 8012b26:	2000      	movs	r0, #0
 8012b28:	e7e8      	b.n	8012afc <__submore+0x1e>
 8012b2a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012b2c:	0077      	lsls	r7, r6, #1
 8012b2e:	463a      	mov	r2, r7
 8012b30:	f000 f855 	bl	8012bde <_realloc_r>
 8012b34:	4605      	mov	r5, r0
 8012b36:	2800      	cmp	r0, #0
 8012b38:	d0de      	beq.n	8012af8 <__submore+0x1a>
 8012b3a:	eb00 0806 	add.w	r8, r0, r6
 8012b3e:	4601      	mov	r1, r0
 8012b40:	4632      	mov	r2, r6
 8012b42:	4640      	mov	r0, r8
 8012b44:	f7fd fac7 	bl	80100d6 <memcpy>
 8012b48:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012b4c:	f8c4 8000 	str.w	r8, [r4]
 8012b50:	e7e9      	b.n	8012b26 <__submore+0x48>

08012b52 <memmove>:
 8012b52:	4288      	cmp	r0, r1
 8012b54:	b510      	push	{r4, lr}
 8012b56:	eb01 0402 	add.w	r4, r1, r2
 8012b5a:	d902      	bls.n	8012b62 <memmove+0x10>
 8012b5c:	4284      	cmp	r4, r0
 8012b5e:	4623      	mov	r3, r4
 8012b60:	d807      	bhi.n	8012b72 <memmove+0x20>
 8012b62:	1e43      	subs	r3, r0, #1
 8012b64:	42a1      	cmp	r1, r4
 8012b66:	d008      	beq.n	8012b7a <memmove+0x28>
 8012b68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b70:	e7f8      	b.n	8012b64 <memmove+0x12>
 8012b72:	4402      	add	r2, r0
 8012b74:	4601      	mov	r1, r0
 8012b76:	428a      	cmp	r2, r1
 8012b78:	d100      	bne.n	8012b7c <memmove+0x2a>
 8012b7a:	bd10      	pop	{r4, pc}
 8012b7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b80:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b84:	e7f7      	b.n	8012b76 <memmove+0x24>
	...

08012b88 <_sbrk_r>:
 8012b88:	b538      	push	{r3, r4, r5, lr}
 8012b8a:	4d06      	ldr	r5, [pc, #24]	@ (8012ba4 <_sbrk_r+0x1c>)
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	4604      	mov	r4, r0
 8012b90:	4608      	mov	r0, r1
 8012b92:	602b      	str	r3, [r5, #0]
 8012b94:	f7f0 fdea 	bl	800376c <_sbrk>
 8012b98:	1c43      	adds	r3, r0, #1
 8012b9a:	d102      	bne.n	8012ba2 <_sbrk_r+0x1a>
 8012b9c:	682b      	ldr	r3, [r5, #0]
 8012b9e:	b103      	cbz	r3, 8012ba2 <_sbrk_r+0x1a>
 8012ba0:	6023      	str	r3, [r4, #0]
 8012ba2:	bd38      	pop	{r3, r4, r5, pc}
 8012ba4:	2001a714 	.word	0x2001a714

08012ba8 <abort>:
 8012ba8:	b508      	push	{r3, lr}
 8012baa:	2006      	movs	r0, #6
 8012bac:	f000 fab4 	bl	8013118 <raise>
 8012bb0:	2001      	movs	r0, #1
 8012bb2:	f7f0 fd63 	bl	800367c <_exit>

08012bb6 <_calloc_r>:
 8012bb6:	b570      	push	{r4, r5, r6, lr}
 8012bb8:	fba1 5402 	umull	r5, r4, r1, r2
 8012bbc:	b934      	cbnz	r4, 8012bcc <_calloc_r+0x16>
 8012bbe:	4629      	mov	r1, r5
 8012bc0:	f7fe fccc 	bl	801155c <_malloc_r>
 8012bc4:	4606      	mov	r6, r0
 8012bc6:	b928      	cbnz	r0, 8012bd4 <_calloc_r+0x1e>
 8012bc8:	4630      	mov	r0, r6
 8012bca:	bd70      	pop	{r4, r5, r6, pc}
 8012bcc:	220c      	movs	r2, #12
 8012bce:	6002      	str	r2, [r0, #0]
 8012bd0:	2600      	movs	r6, #0
 8012bd2:	e7f9      	b.n	8012bc8 <_calloc_r+0x12>
 8012bd4:	462a      	mov	r2, r5
 8012bd6:	4621      	mov	r1, r4
 8012bd8:	f7fd f959 	bl	800fe8e <memset>
 8012bdc:	e7f4      	b.n	8012bc8 <_calloc_r+0x12>

08012bde <_realloc_r>:
 8012bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012be2:	4607      	mov	r7, r0
 8012be4:	4614      	mov	r4, r2
 8012be6:	460d      	mov	r5, r1
 8012be8:	b921      	cbnz	r1, 8012bf4 <_realloc_r+0x16>
 8012bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bee:	4611      	mov	r1, r2
 8012bf0:	f7fe bcb4 	b.w	801155c <_malloc_r>
 8012bf4:	b92a      	cbnz	r2, 8012c02 <_realloc_r+0x24>
 8012bf6:	f7fe f903 	bl	8010e00 <_free_r>
 8012bfa:	4625      	mov	r5, r4
 8012bfc:	4628      	mov	r0, r5
 8012bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c02:	f000 faa5 	bl	8013150 <_malloc_usable_size_r>
 8012c06:	4284      	cmp	r4, r0
 8012c08:	4606      	mov	r6, r0
 8012c0a:	d802      	bhi.n	8012c12 <_realloc_r+0x34>
 8012c0c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012c10:	d8f4      	bhi.n	8012bfc <_realloc_r+0x1e>
 8012c12:	4621      	mov	r1, r4
 8012c14:	4638      	mov	r0, r7
 8012c16:	f7fe fca1 	bl	801155c <_malloc_r>
 8012c1a:	4680      	mov	r8, r0
 8012c1c:	b908      	cbnz	r0, 8012c22 <_realloc_r+0x44>
 8012c1e:	4645      	mov	r5, r8
 8012c20:	e7ec      	b.n	8012bfc <_realloc_r+0x1e>
 8012c22:	42b4      	cmp	r4, r6
 8012c24:	4622      	mov	r2, r4
 8012c26:	4629      	mov	r1, r5
 8012c28:	bf28      	it	cs
 8012c2a:	4632      	movcs	r2, r6
 8012c2c:	f7fd fa53 	bl	80100d6 <memcpy>
 8012c30:	4629      	mov	r1, r5
 8012c32:	4638      	mov	r0, r7
 8012c34:	f7fe f8e4 	bl	8010e00 <_free_r>
 8012c38:	e7f1      	b.n	8012c1e <_realloc_r+0x40>
	...

08012c3c <_strtoul_l.isra.0>:
 8012c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c40:	4e34      	ldr	r6, [pc, #208]	@ (8012d14 <_strtoul_l.isra.0+0xd8>)
 8012c42:	4686      	mov	lr, r0
 8012c44:	460d      	mov	r5, r1
 8012c46:	4628      	mov	r0, r5
 8012c48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012c4c:	5d37      	ldrb	r7, [r6, r4]
 8012c4e:	f017 0708 	ands.w	r7, r7, #8
 8012c52:	d1f8      	bne.n	8012c46 <_strtoul_l.isra.0+0xa>
 8012c54:	2c2d      	cmp	r4, #45	@ 0x2d
 8012c56:	d110      	bne.n	8012c7a <_strtoul_l.isra.0+0x3e>
 8012c58:	782c      	ldrb	r4, [r5, #0]
 8012c5a:	2701      	movs	r7, #1
 8012c5c:	1c85      	adds	r5, r0, #2
 8012c5e:	f033 0010 	bics.w	r0, r3, #16
 8012c62:	d115      	bne.n	8012c90 <_strtoul_l.isra.0+0x54>
 8012c64:	2c30      	cmp	r4, #48	@ 0x30
 8012c66:	d10d      	bne.n	8012c84 <_strtoul_l.isra.0+0x48>
 8012c68:	7828      	ldrb	r0, [r5, #0]
 8012c6a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012c6e:	2858      	cmp	r0, #88	@ 0x58
 8012c70:	d108      	bne.n	8012c84 <_strtoul_l.isra.0+0x48>
 8012c72:	786c      	ldrb	r4, [r5, #1]
 8012c74:	3502      	adds	r5, #2
 8012c76:	2310      	movs	r3, #16
 8012c78:	e00a      	b.n	8012c90 <_strtoul_l.isra.0+0x54>
 8012c7a:	2c2b      	cmp	r4, #43	@ 0x2b
 8012c7c:	bf04      	itt	eq
 8012c7e:	782c      	ldrbeq	r4, [r5, #0]
 8012c80:	1c85      	addeq	r5, r0, #2
 8012c82:	e7ec      	b.n	8012c5e <_strtoul_l.isra.0+0x22>
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d1f6      	bne.n	8012c76 <_strtoul_l.isra.0+0x3a>
 8012c88:	2c30      	cmp	r4, #48	@ 0x30
 8012c8a:	bf14      	ite	ne
 8012c8c:	230a      	movne	r3, #10
 8012c8e:	2308      	moveq	r3, #8
 8012c90:	f04f 38ff 	mov.w	r8, #4294967295
 8012c94:	2600      	movs	r6, #0
 8012c96:	fbb8 f8f3 	udiv	r8, r8, r3
 8012c9a:	fb03 f908 	mul.w	r9, r3, r8
 8012c9e:	ea6f 0909 	mvn.w	r9, r9
 8012ca2:	4630      	mov	r0, r6
 8012ca4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012ca8:	f1bc 0f09 	cmp.w	ip, #9
 8012cac:	d810      	bhi.n	8012cd0 <_strtoul_l.isra.0+0x94>
 8012cae:	4664      	mov	r4, ip
 8012cb0:	42a3      	cmp	r3, r4
 8012cb2:	dd1e      	ble.n	8012cf2 <_strtoul_l.isra.0+0xb6>
 8012cb4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012cb8:	d007      	beq.n	8012cca <_strtoul_l.isra.0+0x8e>
 8012cba:	4580      	cmp	r8, r0
 8012cbc:	d316      	bcc.n	8012cec <_strtoul_l.isra.0+0xb0>
 8012cbe:	d101      	bne.n	8012cc4 <_strtoul_l.isra.0+0x88>
 8012cc0:	45a1      	cmp	r9, r4
 8012cc2:	db13      	blt.n	8012cec <_strtoul_l.isra.0+0xb0>
 8012cc4:	fb00 4003 	mla	r0, r0, r3, r4
 8012cc8:	2601      	movs	r6, #1
 8012cca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012cce:	e7e9      	b.n	8012ca4 <_strtoul_l.isra.0+0x68>
 8012cd0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012cd4:	f1bc 0f19 	cmp.w	ip, #25
 8012cd8:	d801      	bhi.n	8012cde <_strtoul_l.isra.0+0xa2>
 8012cda:	3c37      	subs	r4, #55	@ 0x37
 8012cdc:	e7e8      	b.n	8012cb0 <_strtoul_l.isra.0+0x74>
 8012cde:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012ce2:	f1bc 0f19 	cmp.w	ip, #25
 8012ce6:	d804      	bhi.n	8012cf2 <_strtoul_l.isra.0+0xb6>
 8012ce8:	3c57      	subs	r4, #87	@ 0x57
 8012cea:	e7e1      	b.n	8012cb0 <_strtoul_l.isra.0+0x74>
 8012cec:	f04f 36ff 	mov.w	r6, #4294967295
 8012cf0:	e7eb      	b.n	8012cca <_strtoul_l.isra.0+0x8e>
 8012cf2:	1c73      	adds	r3, r6, #1
 8012cf4:	d106      	bne.n	8012d04 <_strtoul_l.isra.0+0xc8>
 8012cf6:	2322      	movs	r3, #34	@ 0x22
 8012cf8:	f8ce 3000 	str.w	r3, [lr]
 8012cfc:	4630      	mov	r0, r6
 8012cfe:	b932      	cbnz	r2, 8012d0e <_strtoul_l.isra.0+0xd2>
 8012d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d04:	b107      	cbz	r7, 8012d08 <_strtoul_l.isra.0+0xcc>
 8012d06:	4240      	negs	r0, r0
 8012d08:	2a00      	cmp	r2, #0
 8012d0a:	d0f9      	beq.n	8012d00 <_strtoul_l.isra.0+0xc4>
 8012d0c:	b106      	cbz	r6, 8012d10 <_strtoul_l.isra.0+0xd4>
 8012d0e:	1e69      	subs	r1, r5, #1
 8012d10:	6011      	str	r1, [r2, #0]
 8012d12:	e7f5      	b.n	8012d00 <_strtoul_l.isra.0+0xc4>
 8012d14:	0806d811 	.word	0x0806d811

08012d18 <_strtoul_r>:
 8012d18:	f7ff bf90 	b.w	8012c3c <_strtoul_l.isra.0>

08012d1c <__sfputc_r>:
 8012d1c:	6893      	ldr	r3, [r2, #8]
 8012d1e:	3b01      	subs	r3, #1
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	b410      	push	{r4}
 8012d24:	6093      	str	r3, [r2, #8]
 8012d26:	da08      	bge.n	8012d3a <__sfputc_r+0x1e>
 8012d28:	6994      	ldr	r4, [r2, #24]
 8012d2a:	42a3      	cmp	r3, r4
 8012d2c:	db01      	blt.n	8012d32 <__sfputc_r+0x16>
 8012d2e:	290a      	cmp	r1, #10
 8012d30:	d103      	bne.n	8012d3a <__sfputc_r+0x1e>
 8012d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d36:	f000 b933 	b.w	8012fa0 <__swbuf_r>
 8012d3a:	6813      	ldr	r3, [r2, #0]
 8012d3c:	1c58      	adds	r0, r3, #1
 8012d3e:	6010      	str	r0, [r2, #0]
 8012d40:	7019      	strb	r1, [r3, #0]
 8012d42:	4608      	mov	r0, r1
 8012d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d48:	4770      	bx	lr

08012d4a <__sfputs_r>:
 8012d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d4c:	4606      	mov	r6, r0
 8012d4e:	460f      	mov	r7, r1
 8012d50:	4614      	mov	r4, r2
 8012d52:	18d5      	adds	r5, r2, r3
 8012d54:	42ac      	cmp	r4, r5
 8012d56:	d101      	bne.n	8012d5c <__sfputs_r+0x12>
 8012d58:	2000      	movs	r0, #0
 8012d5a:	e007      	b.n	8012d6c <__sfputs_r+0x22>
 8012d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d60:	463a      	mov	r2, r7
 8012d62:	4630      	mov	r0, r6
 8012d64:	f7ff ffda 	bl	8012d1c <__sfputc_r>
 8012d68:	1c43      	adds	r3, r0, #1
 8012d6a:	d1f3      	bne.n	8012d54 <__sfputs_r+0xa>
 8012d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012d70 <_vfiprintf_r>:
 8012d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d74:	460d      	mov	r5, r1
 8012d76:	b09d      	sub	sp, #116	@ 0x74
 8012d78:	4614      	mov	r4, r2
 8012d7a:	4698      	mov	r8, r3
 8012d7c:	4606      	mov	r6, r0
 8012d7e:	b118      	cbz	r0, 8012d88 <_vfiprintf_r+0x18>
 8012d80:	6a03      	ldr	r3, [r0, #32]
 8012d82:	b90b      	cbnz	r3, 8012d88 <_vfiprintf_r+0x18>
 8012d84:	f7fc ff84 	bl	800fc90 <__sinit>
 8012d88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d8a:	07d9      	lsls	r1, r3, #31
 8012d8c:	d405      	bmi.n	8012d9a <_vfiprintf_r+0x2a>
 8012d8e:	89ab      	ldrh	r3, [r5, #12]
 8012d90:	059a      	lsls	r2, r3, #22
 8012d92:	d402      	bmi.n	8012d9a <_vfiprintf_r+0x2a>
 8012d94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d96:	f7fd f99c 	bl	80100d2 <__retarget_lock_acquire_recursive>
 8012d9a:	89ab      	ldrh	r3, [r5, #12]
 8012d9c:	071b      	lsls	r3, r3, #28
 8012d9e:	d501      	bpl.n	8012da4 <_vfiprintf_r+0x34>
 8012da0:	692b      	ldr	r3, [r5, #16]
 8012da2:	b99b      	cbnz	r3, 8012dcc <_vfiprintf_r+0x5c>
 8012da4:	4629      	mov	r1, r5
 8012da6:	4630      	mov	r0, r6
 8012da8:	f000 f938 	bl	801301c <__swsetup_r>
 8012dac:	b170      	cbz	r0, 8012dcc <_vfiprintf_r+0x5c>
 8012dae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012db0:	07dc      	lsls	r4, r3, #31
 8012db2:	d504      	bpl.n	8012dbe <_vfiprintf_r+0x4e>
 8012db4:	f04f 30ff 	mov.w	r0, #4294967295
 8012db8:	b01d      	add	sp, #116	@ 0x74
 8012dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dbe:	89ab      	ldrh	r3, [r5, #12]
 8012dc0:	0598      	lsls	r0, r3, #22
 8012dc2:	d4f7      	bmi.n	8012db4 <_vfiprintf_r+0x44>
 8012dc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012dc6:	f7fd f985 	bl	80100d4 <__retarget_lock_release_recursive>
 8012dca:	e7f3      	b.n	8012db4 <_vfiprintf_r+0x44>
 8012dcc:	2300      	movs	r3, #0
 8012dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8012dd0:	2320      	movs	r3, #32
 8012dd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012dd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8012dda:	2330      	movs	r3, #48	@ 0x30
 8012ddc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012f8c <_vfiprintf_r+0x21c>
 8012de0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012de4:	f04f 0901 	mov.w	r9, #1
 8012de8:	4623      	mov	r3, r4
 8012dea:	469a      	mov	sl, r3
 8012dec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012df0:	b10a      	cbz	r2, 8012df6 <_vfiprintf_r+0x86>
 8012df2:	2a25      	cmp	r2, #37	@ 0x25
 8012df4:	d1f9      	bne.n	8012dea <_vfiprintf_r+0x7a>
 8012df6:	ebba 0b04 	subs.w	fp, sl, r4
 8012dfa:	d00b      	beq.n	8012e14 <_vfiprintf_r+0xa4>
 8012dfc:	465b      	mov	r3, fp
 8012dfe:	4622      	mov	r2, r4
 8012e00:	4629      	mov	r1, r5
 8012e02:	4630      	mov	r0, r6
 8012e04:	f7ff ffa1 	bl	8012d4a <__sfputs_r>
 8012e08:	3001      	adds	r0, #1
 8012e0a:	f000 80a7 	beq.w	8012f5c <_vfiprintf_r+0x1ec>
 8012e0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e10:	445a      	add	r2, fp
 8012e12:	9209      	str	r2, [sp, #36]	@ 0x24
 8012e14:	f89a 3000 	ldrb.w	r3, [sl]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	f000 809f 	beq.w	8012f5c <_vfiprintf_r+0x1ec>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	f04f 32ff 	mov.w	r2, #4294967295
 8012e24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e28:	f10a 0a01 	add.w	sl, sl, #1
 8012e2c:	9304      	str	r3, [sp, #16]
 8012e2e:	9307      	str	r3, [sp, #28]
 8012e30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012e34:	931a      	str	r3, [sp, #104]	@ 0x68
 8012e36:	4654      	mov	r4, sl
 8012e38:	2205      	movs	r2, #5
 8012e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e3e:	4853      	ldr	r0, [pc, #332]	@ (8012f8c <_vfiprintf_r+0x21c>)
 8012e40:	f7ed f9d6 	bl	80001f0 <memchr>
 8012e44:	9a04      	ldr	r2, [sp, #16]
 8012e46:	b9d8      	cbnz	r0, 8012e80 <_vfiprintf_r+0x110>
 8012e48:	06d1      	lsls	r1, r2, #27
 8012e4a:	bf44      	itt	mi
 8012e4c:	2320      	movmi	r3, #32
 8012e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e52:	0713      	lsls	r3, r2, #28
 8012e54:	bf44      	itt	mi
 8012e56:	232b      	movmi	r3, #43	@ 0x2b
 8012e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8012e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e62:	d015      	beq.n	8012e90 <_vfiprintf_r+0x120>
 8012e64:	9a07      	ldr	r2, [sp, #28]
 8012e66:	4654      	mov	r4, sl
 8012e68:	2000      	movs	r0, #0
 8012e6a:	f04f 0c0a 	mov.w	ip, #10
 8012e6e:	4621      	mov	r1, r4
 8012e70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e74:	3b30      	subs	r3, #48	@ 0x30
 8012e76:	2b09      	cmp	r3, #9
 8012e78:	d94b      	bls.n	8012f12 <_vfiprintf_r+0x1a2>
 8012e7a:	b1b0      	cbz	r0, 8012eaa <_vfiprintf_r+0x13a>
 8012e7c:	9207      	str	r2, [sp, #28]
 8012e7e:	e014      	b.n	8012eaa <_vfiprintf_r+0x13a>
 8012e80:	eba0 0308 	sub.w	r3, r0, r8
 8012e84:	fa09 f303 	lsl.w	r3, r9, r3
 8012e88:	4313      	orrs	r3, r2
 8012e8a:	9304      	str	r3, [sp, #16]
 8012e8c:	46a2      	mov	sl, r4
 8012e8e:	e7d2      	b.n	8012e36 <_vfiprintf_r+0xc6>
 8012e90:	9b03      	ldr	r3, [sp, #12]
 8012e92:	1d19      	adds	r1, r3, #4
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	9103      	str	r1, [sp, #12]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	bfbb      	ittet	lt
 8012e9c:	425b      	neglt	r3, r3
 8012e9e:	f042 0202 	orrlt.w	r2, r2, #2
 8012ea2:	9307      	strge	r3, [sp, #28]
 8012ea4:	9307      	strlt	r3, [sp, #28]
 8012ea6:	bfb8      	it	lt
 8012ea8:	9204      	strlt	r2, [sp, #16]
 8012eaa:	7823      	ldrb	r3, [r4, #0]
 8012eac:	2b2e      	cmp	r3, #46	@ 0x2e
 8012eae:	d10a      	bne.n	8012ec6 <_vfiprintf_r+0x156>
 8012eb0:	7863      	ldrb	r3, [r4, #1]
 8012eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8012eb4:	d132      	bne.n	8012f1c <_vfiprintf_r+0x1ac>
 8012eb6:	9b03      	ldr	r3, [sp, #12]
 8012eb8:	1d1a      	adds	r2, r3, #4
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	9203      	str	r2, [sp, #12]
 8012ebe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012ec2:	3402      	adds	r4, #2
 8012ec4:	9305      	str	r3, [sp, #20]
 8012ec6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012f9c <_vfiprintf_r+0x22c>
 8012eca:	7821      	ldrb	r1, [r4, #0]
 8012ecc:	2203      	movs	r2, #3
 8012ece:	4650      	mov	r0, sl
 8012ed0:	f7ed f98e 	bl	80001f0 <memchr>
 8012ed4:	b138      	cbz	r0, 8012ee6 <_vfiprintf_r+0x176>
 8012ed6:	9b04      	ldr	r3, [sp, #16]
 8012ed8:	eba0 000a 	sub.w	r0, r0, sl
 8012edc:	2240      	movs	r2, #64	@ 0x40
 8012ede:	4082      	lsls	r2, r0
 8012ee0:	4313      	orrs	r3, r2
 8012ee2:	3401      	adds	r4, #1
 8012ee4:	9304      	str	r3, [sp, #16]
 8012ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eea:	4829      	ldr	r0, [pc, #164]	@ (8012f90 <_vfiprintf_r+0x220>)
 8012eec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012ef0:	2206      	movs	r2, #6
 8012ef2:	f7ed f97d 	bl	80001f0 <memchr>
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	d03f      	beq.n	8012f7a <_vfiprintf_r+0x20a>
 8012efa:	4b26      	ldr	r3, [pc, #152]	@ (8012f94 <_vfiprintf_r+0x224>)
 8012efc:	bb1b      	cbnz	r3, 8012f46 <_vfiprintf_r+0x1d6>
 8012efe:	9b03      	ldr	r3, [sp, #12]
 8012f00:	3307      	adds	r3, #7
 8012f02:	f023 0307 	bic.w	r3, r3, #7
 8012f06:	3308      	adds	r3, #8
 8012f08:	9303      	str	r3, [sp, #12]
 8012f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f0c:	443b      	add	r3, r7
 8012f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f10:	e76a      	b.n	8012de8 <_vfiprintf_r+0x78>
 8012f12:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f16:	460c      	mov	r4, r1
 8012f18:	2001      	movs	r0, #1
 8012f1a:	e7a8      	b.n	8012e6e <_vfiprintf_r+0xfe>
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	3401      	adds	r4, #1
 8012f20:	9305      	str	r3, [sp, #20]
 8012f22:	4619      	mov	r1, r3
 8012f24:	f04f 0c0a 	mov.w	ip, #10
 8012f28:	4620      	mov	r0, r4
 8012f2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f2e:	3a30      	subs	r2, #48	@ 0x30
 8012f30:	2a09      	cmp	r2, #9
 8012f32:	d903      	bls.n	8012f3c <_vfiprintf_r+0x1cc>
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d0c6      	beq.n	8012ec6 <_vfiprintf_r+0x156>
 8012f38:	9105      	str	r1, [sp, #20]
 8012f3a:	e7c4      	b.n	8012ec6 <_vfiprintf_r+0x156>
 8012f3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f40:	4604      	mov	r4, r0
 8012f42:	2301      	movs	r3, #1
 8012f44:	e7f0      	b.n	8012f28 <_vfiprintf_r+0x1b8>
 8012f46:	ab03      	add	r3, sp, #12
 8012f48:	9300      	str	r3, [sp, #0]
 8012f4a:	462a      	mov	r2, r5
 8012f4c:	4b12      	ldr	r3, [pc, #72]	@ (8012f98 <_vfiprintf_r+0x228>)
 8012f4e:	a904      	add	r1, sp, #16
 8012f50:	4630      	mov	r0, r6
 8012f52:	f7fc f84d 	bl	800eff0 <_printf_float>
 8012f56:	4607      	mov	r7, r0
 8012f58:	1c78      	adds	r0, r7, #1
 8012f5a:	d1d6      	bne.n	8012f0a <_vfiprintf_r+0x19a>
 8012f5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012f5e:	07d9      	lsls	r1, r3, #31
 8012f60:	d405      	bmi.n	8012f6e <_vfiprintf_r+0x1fe>
 8012f62:	89ab      	ldrh	r3, [r5, #12]
 8012f64:	059a      	lsls	r2, r3, #22
 8012f66:	d402      	bmi.n	8012f6e <_vfiprintf_r+0x1fe>
 8012f68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012f6a:	f7fd f8b3 	bl	80100d4 <__retarget_lock_release_recursive>
 8012f6e:	89ab      	ldrh	r3, [r5, #12]
 8012f70:	065b      	lsls	r3, r3, #25
 8012f72:	f53f af1f 	bmi.w	8012db4 <_vfiprintf_r+0x44>
 8012f76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012f78:	e71e      	b.n	8012db8 <_vfiprintf_r+0x48>
 8012f7a:	ab03      	add	r3, sp, #12
 8012f7c:	9300      	str	r3, [sp, #0]
 8012f7e:	462a      	mov	r2, r5
 8012f80:	4b05      	ldr	r3, [pc, #20]	@ (8012f98 <_vfiprintf_r+0x228>)
 8012f82:	a904      	add	r1, sp, #16
 8012f84:	4630      	mov	r0, r6
 8012f86:	f7fc facb 	bl	800f520 <_printf_i>
 8012f8a:	e7e4      	b.n	8012f56 <_vfiprintf_r+0x1e6>
 8012f8c:	0806d78d 	.word	0x0806d78d
 8012f90:	0806d797 	.word	0x0806d797
 8012f94:	0800eff1 	.word	0x0800eff1
 8012f98:	08012d4b 	.word	0x08012d4b
 8012f9c:	0806d793 	.word	0x0806d793

08012fa0 <__swbuf_r>:
 8012fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fa2:	460e      	mov	r6, r1
 8012fa4:	4614      	mov	r4, r2
 8012fa6:	4605      	mov	r5, r0
 8012fa8:	b118      	cbz	r0, 8012fb2 <__swbuf_r+0x12>
 8012faa:	6a03      	ldr	r3, [r0, #32]
 8012fac:	b90b      	cbnz	r3, 8012fb2 <__swbuf_r+0x12>
 8012fae:	f7fc fe6f 	bl	800fc90 <__sinit>
 8012fb2:	69a3      	ldr	r3, [r4, #24]
 8012fb4:	60a3      	str	r3, [r4, #8]
 8012fb6:	89a3      	ldrh	r3, [r4, #12]
 8012fb8:	071a      	lsls	r2, r3, #28
 8012fba:	d501      	bpl.n	8012fc0 <__swbuf_r+0x20>
 8012fbc:	6923      	ldr	r3, [r4, #16]
 8012fbe:	b943      	cbnz	r3, 8012fd2 <__swbuf_r+0x32>
 8012fc0:	4621      	mov	r1, r4
 8012fc2:	4628      	mov	r0, r5
 8012fc4:	f000 f82a 	bl	801301c <__swsetup_r>
 8012fc8:	b118      	cbz	r0, 8012fd2 <__swbuf_r+0x32>
 8012fca:	f04f 37ff 	mov.w	r7, #4294967295
 8012fce:	4638      	mov	r0, r7
 8012fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fd2:	6823      	ldr	r3, [r4, #0]
 8012fd4:	6922      	ldr	r2, [r4, #16]
 8012fd6:	1a98      	subs	r0, r3, r2
 8012fd8:	6963      	ldr	r3, [r4, #20]
 8012fda:	b2f6      	uxtb	r6, r6
 8012fdc:	4283      	cmp	r3, r0
 8012fde:	4637      	mov	r7, r6
 8012fe0:	dc05      	bgt.n	8012fee <__swbuf_r+0x4e>
 8012fe2:	4621      	mov	r1, r4
 8012fe4:	4628      	mov	r0, r5
 8012fe6:	f7ff fd07 	bl	80129f8 <_fflush_r>
 8012fea:	2800      	cmp	r0, #0
 8012fec:	d1ed      	bne.n	8012fca <__swbuf_r+0x2a>
 8012fee:	68a3      	ldr	r3, [r4, #8]
 8012ff0:	3b01      	subs	r3, #1
 8012ff2:	60a3      	str	r3, [r4, #8]
 8012ff4:	6823      	ldr	r3, [r4, #0]
 8012ff6:	1c5a      	adds	r2, r3, #1
 8012ff8:	6022      	str	r2, [r4, #0]
 8012ffa:	701e      	strb	r6, [r3, #0]
 8012ffc:	6962      	ldr	r2, [r4, #20]
 8012ffe:	1c43      	adds	r3, r0, #1
 8013000:	429a      	cmp	r2, r3
 8013002:	d004      	beq.n	801300e <__swbuf_r+0x6e>
 8013004:	89a3      	ldrh	r3, [r4, #12]
 8013006:	07db      	lsls	r3, r3, #31
 8013008:	d5e1      	bpl.n	8012fce <__swbuf_r+0x2e>
 801300a:	2e0a      	cmp	r6, #10
 801300c:	d1df      	bne.n	8012fce <__swbuf_r+0x2e>
 801300e:	4621      	mov	r1, r4
 8013010:	4628      	mov	r0, r5
 8013012:	f7ff fcf1 	bl	80129f8 <_fflush_r>
 8013016:	2800      	cmp	r0, #0
 8013018:	d0d9      	beq.n	8012fce <__swbuf_r+0x2e>
 801301a:	e7d6      	b.n	8012fca <__swbuf_r+0x2a>

0801301c <__swsetup_r>:
 801301c:	b538      	push	{r3, r4, r5, lr}
 801301e:	4b29      	ldr	r3, [pc, #164]	@ (80130c4 <__swsetup_r+0xa8>)
 8013020:	4605      	mov	r5, r0
 8013022:	6818      	ldr	r0, [r3, #0]
 8013024:	460c      	mov	r4, r1
 8013026:	b118      	cbz	r0, 8013030 <__swsetup_r+0x14>
 8013028:	6a03      	ldr	r3, [r0, #32]
 801302a:	b90b      	cbnz	r3, 8013030 <__swsetup_r+0x14>
 801302c:	f7fc fe30 	bl	800fc90 <__sinit>
 8013030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013034:	0719      	lsls	r1, r3, #28
 8013036:	d422      	bmi.n	801307e <__swsetup_r+0x62>
 8013038:	06da      	lsls	r2, r3, #27
 801303a:	d407      	bmi.n	801304c <__swsetup_r+0x30>
 801303c:	2209      	movs	r2, #9
 801303e:	602a      	str	r2, [r5, #0]
 8013040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013044:	81a3      	strh	r3, [r4, #12]
 8013046:	f04f 30ff 	mov.w	r0, #4294967295
 801304a:	e033      	b.n	80130b4 <__swsetup_r+0x98>
 801304c:	0758      	lsls	r0, r3, #29
 801304e:	d512      	bpl.n	8013076 <__swsetup_r+0x5a>
 8013050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013052:	b141      	cbz	r1, 8013066 <__swsetup_r+0x4a>
 8013054:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013058:	4299      	cmp	r1, r3
 801305a:	d002      	beq.n	8013062 <__swsetup_r+0x46>
 801305c:	4628      	mov	r0, r5
 801305e:	f7fd fecf 	bl	8010e00 <_free_r>
 8013062:	2300      	movs	r3, #0
 8013064:	6363      	str	r3, [r4, #52]	@ 0x34
 8013066:	89a3      	ldrh	r3, [r4, #12]
 8013068:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801306c:	81a3      	strh	r3, [r4, #12]
 801306e:	2300      	movs	r3, #0
 8013070:	6063      	str	r3, [r4, #4]
 8013072:	6923      	ldr	r3, [r4, #16]
 8013074:	6023      	str	r3, [r4, #0]
 8013076:	89a3      	ldrh	r3, [r4, #12]
 8013078:	f043 0308 	orr.w	r3, r3, #8
 801307c:	81a3      	strh	r3, [r4, #12]
 801307e:	6923      	ldr	r3, [r4, #16]
 8013080:	b94b      	cbnz	r3, 8013096 <__swsetup_r+0x7a>
 8013082:	89a3      	ldrh	r3, [r4, #12]
 8013084:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801308c:	d003      	beq.n	8013096 <__swsetup_r+0x7a>
 801308e:	4621      	mov	r1, r4
 8013090:	4628      	mov	r0, r5
 8013092:	f000 f88b 	bl	80131ac <__smakebuf_r>
 8013096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801309a:	f013 0201 	ands.w	r2, r3, #1
 801309e:	d00a      	beq.n	80130b6 <__swsetup_r+0x9a>
 80130a0:	2200      	movs	r2, #0
 80130a2:	60a2      	str	r2, [r4, #8]
 80130a4:	6962      	ldr	r2, [r4, #20]
 80130a6:	4252      	negs	r2, r2
 80130a8:	61a2      	str	r2, [r4, #24]
 80130aa:	6922      	ldr	r2, [r4, #16]
 80130ac:	b942      	cbnz	r2, 80130c0 <__swsetup_r+0xa4>
 80130ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80130b2:	d1c5      	bne.n	8013040 <__swsetup_r+0x24>
 80130b4:	bd38      	pop	{r3, r4, r5, pc}
 80130b6:	0799      	lsls	r1, r3, #30
 80130b8:	bf58      	it	pl
 80130ba:	6962      	ldrpl	r2, [r4, #20]
 80130bc:	60a2      	str	r2, [r4, #8]
 80130be:	e7f4      	b.n	80130aa <__swsetup_r+0x8e>
 80130c0:	2000      	movs	r0, #0
 80130c2:	e7f7      	b.n	80130b4 <__swsetup_r+0x98>
 80130c4:	20000280 	.word	0x20000280

080130c8 <_raise_r>:
 80130c8:	291f      	cmp	r1, #31
 80130ca:	b538      	push	{r3, r4, r5, lr}
 80130cc:	4605      	mov	r5, r0
 80130ce:	460c      	mov	r4, r1
 80130d0:	d904      	bls.n	80130dc <_raise_r+0x14>
 80130d2:	2316      	movs	r3, #22
 80130d4:	6003      	str	r3, [r0, #0]
 80130d6:	f04f 30ff 	mov.w	r0, #4294967295
 80130da:	bd38      	pop	{r3, r4, r5, pc}
 80130dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80130de:	b112      	cbz	r2, 80130e6 <_raise_r+0x1e>
 80130e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80130e4:	b94b      	cbnz	r3, 80130fa <_raise_r+0x32>
 80130e6:	4628      	mov	r0, r5
 80130e8:	f000 f830 	bl	801314c <_getpid_r>
 80130ec:	4622      	mov	r2, r4
 80130ee:	4601      	mov	r1, r0
 80130f0:	4628      	mov	r0, r5
 80130f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130f6:	f000 b817 	b.w	8013128 <_kill_r>
 80130fa:	2b01      	cmp	r3, #1
 80130fc:	d00a      	beq.n	8013114 <_raise_r+0x4c>
 80130fe:	1c59      	adds	r1, r3, #1
 8013100:	d103      	bne.n	801310a <_raise_r+0x42>
 8013102:	2316      	movs	r3, #22
 8013104:	6003      	str	r3, [r0, #0]
 8013106:	2001      	movs	r0, #1
 8013108:	e7e7      	b.n	80130da <_raise_r+0x12>
 801310a:	2100      	movs	r1, #0
 801310c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013110:	4620      	mov	r0, r4
 8013112:	4798      	blx	r3
 8013114:	2000      	movs	r0, #0
 8013116:	e7e0      	b.n	80130da <_raise_r+0x12>

08013118 <raise>:
 8013118:	4b02      	ldr	r3, [pc, #8]	@ (8013124 <raise+0xc>)
 801311a:	4601      	mov	r1, r0
 801311c:	6818      	ldr	r0, [r3, #0]
 801311e:	f7ff bfd3 	b.w	80130c8 <_raise_r>
 8013122:	bf00      	nop
 8013124:	20000280 	.word	0x20000280

08013128 <_kill_r>:
 8013128:	b538      	push	{r3, r4, r5, lr}
 801312a:	4d07      	ldr	r5, [pc, #28]	@ (8013148 <_kill_r+0x20>)
 801312c:	2300      	movs	r3, #0
 801312e:	4604      	mov	r4, r0
 8013130:	4608      	mov	r0, r1
 8013132:	4611      	mov	r1, r2
 8013134:	602b      	str	r3, [r5, #0]
 8013136:	f7f0 fa91 	bl	800365c <_kill>
 801313a:	1c43      	adds	r3, r0, #1
 801313c:	d102      	bne.n	8013144 <_kill_r+0x1c>
 801313e:	682b      	ldr	r3, [r5, #0]
 8013140:	b103      	cbz	r3, 8013144 <_kill_r+0x1c>
 8013142:	6023      	str	r3, [r4, #0]
 8013144:	bd38      	pop	{r3, r4, r5, pc}
 8013146:	bf00      	nop
 8013148:	2001a714 	.word	0x2001a714

0801314c <_getpid_r>:
 801314c:	f7f0 ba7e 	b.w	800364c <_getpid>

08013150 <_malloc_usable_size_r>:
 8013150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013154:	1f18      	subs	r0, r3, #4
 8013156:	2b00      	cmp	r3, #0
 8013158:	bfbc      	itt	lt
 801315a:	580b      	ldrlt	r3, [r1, r0]
 801315c:	18c0      	addlt	r0, r0, r3
 801315e:	4770      	bx	lr

08013160 <__swhatbuf_r>:
 8013160:	b570      	push	{r4, r5, r6, lr}
 8013162:	460c      	mov	r4, r1
 8013164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013168:	2900      	cmp	r1, #0
 801316a:	b096      	sub	sp, #88	@ 0x58
 801316c:	4615      	mov	r5, r2
 801316e:	461e      	mov	r6, r3
 8013170:	da0d      	bge.n	801318e <__swhatbuf_r+0x2e>
 8013172:	89a3      	ldrh	r3, [r4, #12]
 8013174:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013178:	f04f 0100 	mov.w	r1, #0
 801317c:	bf14      	ite	ne
 801317e:	2340      	movne	r3, #64	@ 0x40
 8013180:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013184:	2000      	movs	r0, #0
 8013186:	6031      	str	r1, [r6, #0]
 8013188:	602b      	str	r3, [r5, #0]
 801318a:	b016      	add	sp, #88	@ 0x58
 801318c:	bd70      	pop	{r4, r5, r6, pc}
 801318e:	466a      	mov	r2, sp
 8013190:	f000 f848 	bl	8013224 <_fstat_r>
 8013194:	2800      	cmp	r0, #0
 8013196:	dbec      	blt.n	8013172 <__swhatbuf_r+0x12>
 8013198:	9901      	ldr	r1, [sp, #4]
 801319a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801319e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80131a2:	4259      	negs	r1, r3
 80131a4:	4159      	adcs	r1, r3
 80131a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80131aa:	e7eb      	b.n	8013184 <__swhatbuf_r+0x24>

080131ac <__smakebuf_r>:
 80131ac:	898b      	ldrh	r3, [r1, #12]
 80131ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80131b0:	079d      	lsls	r5, r3, #30
 80131b2:	4606      	mov	r6, r0
 80131b4:	460c      	mov	r4, r1
 80131b6:	d507      	bpl.n	80131c8 <__smakebuf_r+0x1c>
 80131b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80131bc:	6023      	str	r3, [r4, #0]
 80131be:	6123      	str	r3, [r4, #16]
 80131c0:	2301      	movs	r3, #1
 80131c2:	6163      	str	r3, [r4, #20]
 80131c4:	b003      	add	sp, #12
 80131c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131c8:	ab01      	add	r3, sp, #4
 80131ca:	466a      	mov	r2, sp
 80131cc:	f7ff ffc8 	bl	8013160 <__swhatbuf_r>
 80131d0:	9f00      	ldr	r7, [sp, #0]
 80131d2:	4605      	mov	r5, r0
 80131d4:	4639      	mov	r1, r7
 80131d6:	4630      	mov	r0, r6
 80131d8:	f7fe f9c0 	bl	801155c <_malloc_r>
 80131dc:	b948      	cbnz	r0, 80131f2 <__smakebuf_r+0x46>
 80131de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131e2:	059a      	lsls	r2, r3, #22
 80131e4:	d4ee      	bmi.n	80131c4 <__smakebuf_r+0x18>
 80131e6:	f023 0303 	bic.w	r3, r3, #3
 80131ea:	f043 0302 	orr.w	r3, r3, #2
 80131ee:	81a3      	strh	r3, [r4, #12]
 80131f0:	e7e2      	b.n	80131b8 <__smakebuf_r+0xc>
 80131f2:	89a3      	ldrh	r3, [r4, #12]
 80131f4:	6020      	str	r0, [r4, #0]
 80131f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80131fa:	81a3      	strh	r3, [r4, #12]
 80131fc:	9b01      	ldr	r3, [sp, #4]
 80131fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013202:	b15b      	cbz	r3, 801321c <__smakebuf_r+0x70>
 8013204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013208:	4630      	mov	r0, r6
 801320a:	f000 f81d 	bl	8013248 <_isatty_r>
 801320e:	b128      	cbz	r0, 801321c <__smakebuf_r+0x70>
 8013210:	89a3      	ldrh	r3, [r4, #12]
 8013212:	f023 0303 	bic.w	r3, r3, #3
 8013216:	f043 0301 	orr.w	r3, r3, #1
 801321a:	81a3      	strh	r3, [r4, #12]
 801321c:	89a3      	ldrh	r3, [r4, #12]
 801321e:	431d      	orrs	r5, r3
 8013220:	81a5      	strh	r5, [r4, #12]
 8013222:	e7cf      	b.n	80131c4 <__smakebuf_r+0x18>

08013224 <_fstat_r>:
 8013224:	b538      	push	{r3, r4, r5, lr}
 8013226:	4d07      	ldr	r5, [pc, #28]	@ (8013244 <_fstat_r+0x20>)
 8013228:	2300      	movs	r3, #0
 801322a:	4604      	mov	r4, r0
 801322c:	4608      	mov	r0, r1
 801322e:	4611      	mov	r1, r2
 8013230:	602b      	str	r3, [r5, #0]
 8013232:	f7f0 fa73 	bl	800371c <_fstat>
 8013236:	1c43      	adds	r3, r0, #1
 8013238:	d102      	bne.n	8013240 <_fstat_r+0x1c>
 801323a:	682b      	ldr	r3, [r5, #0]
 801323c:	b103      	cbz	r3, 8013240 <_fstat_r+0x1c>
 801323e:	6023      	str	r3, [r4, #0]
 8013240:	bd38      	pop	{r3, r4, r5, pc}
 8013242:	bf00      	nop
 8013244:	2001a714 	.word	0x2001a714

08013248 <_isatty_r>:
 8013248:	b538      	push	{r3, r4, r5, lr}
 801324a:	4d06      	ldr	r5, [pc, #24]	@ (8013264 <_isatty_r+0x1c>)
 801324c:	2300      	movs	r3, #0
 801324e:	4604      	mov	r4, r0
 8013250:	4608      	mov	r0, r1
 8013252:	602b      	str	r3, [r5, #0]
 8013254:	f7f0 fa72 	bl	800373c <_isatty>
 8013258:	1c43      	adds	r3, r0, #1
 801325a:	d102      	bne.n	8013262 <_isatty_r+0x1a>
 801325c:	682b      	ldr	r3, [r5, #0]
 801325e:	b103      	cbz	r3, 8013262 <_isatty_r+0x1a>
 8013260:	6023      	str	r3, [r4, #0]
 8013262:	bd38      	pop	{r3, r4, r5, pc}
 8013264:	2001a714 	.word	0x2001a714

08013268 <sqrtf>:
 8013268:	b508      	push	{r3, lr}
 801326a:	ed2d 8b02 	vpush	{d8}
 801326e:	eeb0 8a40 	vmov.f32	s16, s0
 8013272:	f000 f817 	bl	80132a4 <__ieee754_sqrtf>
 8013276:	eeb4 8a48 	vcmp.f32	s16, s16
 801327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801327e:	d60c      	bvs.n	801329a <sqrtf+0x32>
 8013280:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80132a0 <sqrtf+0x38>
 8013284:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801328c:	d505      	bpl.n	801329a <sqrtf+0x32>
 801328e:	f7fc fef5 	bl	801007c <__errno>
 8013292:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8013296:	2321      	movs	r3, #33	@ 0x21
 8013298:	6003      	str	r3, [r0, #0]
 801329a:	ecbd 8b02 	vpop	{d8}
 801329e:	bd08      	pop	{r3, pc}
 80132a0:	00000000 	.word	0x00000000

080132a4 <__ieee754_sqrtf>:
 80132a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80132a8:	4770      	bx	lr
	...

080132ac <_init>:
 80132ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ae:	bf00      	nop
 80132b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132b2:	bc08      	pop	{r3}
 80132b4:	469e      	mov	lr, r3
 80132b6:	4770      	bx	lr

080132b8 <_fini>:
 80132b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ba:	bf00      	nop
 80132bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132be:	bc08      	pop	{r3}
 80132c0:	469e      	mov	lr, r3
 80132c2:	4770      	bx	lr
