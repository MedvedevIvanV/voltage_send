
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005418  0800ff80  0800ff80  00010f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015398  08015398  000172c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015398  08015398  00016398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080153a0  080153a0  000172c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080153a0  080153a0  000163a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080153a4  080153a4  000163a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  080153a8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000172c8  2**0
                  CONTENTS
 10 .bss          0001e94c  200002c8  200002c8  000172c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001ec14  2001ec14  000172c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000172c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f8a6  00000000  00000000  000172f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050aa  00000000  00000000  00036b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001920  00000000  00000000  0003bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012bb  00000000  00000000  0003d568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024cfc  00000000  00000000  0003e823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f03b  00000000  00000000  0006351f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce1c9  00000000  00000000  0008255a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  00150723  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f40  00000000  00000000  001507e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00158720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e41  00000000  00000000  00158790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000098  00000000  00000000  001595d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ff64 	.word	0x0800ff64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	0800ff64 	.word	0x0800ff64

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <CalculateCRC32>:
/* USER CODE BEGIN 0 */

/**
  * @brief Расчет CRC32 для проверки целостности данных
  */
uint32_t CalculateCRC32(const uint8_t *data, size_t length) {
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < length; i++) {
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	e01d      	b.n	8001092 <CalculateCRC32+0x52>
        crc ^= data[i];
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	4053      	eors	r3, r2
 8001064:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e00c      	b.n	8001086 <CalculateCRC32+0x46>
            crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	085a      	lsrs	r2, r3, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	4259      	negs	r1, r3
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <CalculateCRC32+0x6c>)
 800107a:	400b      	ands	r3, r1
 800107c:	4053      	eors	r3, r2
 800107e:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3301      	adds	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b07      	cmp	r3, #7
 800108a:	ddef      	ble.n	800106c <CalculateCRC32+0x2c>
    for (size_t i = 0; i < length; i++) {
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	3301      	adds	r3, #1
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d3dd      	bcc.n	8001056 <CalculateCRC32+0x16>
        }
    }
    return ~crc;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	43db      	mvns	r3, r3
}
 800109e:	4618      	mov	r0, r3
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	edb88320 	.word	0xedb88320

080010b0 <LoadParametersFromFlash>:

/**
  * @brief Загрузка параметров из Flash памяти
  */
void LoadParametersFromFlash(void) {
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
    Parameters_t* flash_params = (Parameters_t*)PARAMS_FLASH_ADDRESS;
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <LoadParametersFromFlash+0x5c>)
 80010b8:	607b      	str	r3, [r7, #4]

    // Проверяем контрольную сумму
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)flash_params, sizeof(Parameters_t) - sizeof(uint32_t));
 80010ba:	213c      	movs	r1, #60	@ 0x3c
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffbf 	bl	8001040 <CalculateCRC32>
 80010c2:	6038      	str	r0, [r7, #0]

    if (flash_params->crc == calculated_crc) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d114      	bne.n	80010f8 <LoadParametersFromFlash+0x48>
        // Данные корректны, загружаем их
        params = *flash_params;
 80010ce:	4a10      	ldr	r2, [pc, #64]	@ (8001110 <LoadParametersFromFlash+0x60>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4614      	mov	r4, r2
 80010d4:	461d      	mov	r5, r3
 80010d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        parameters_initialized = true;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <LoadParametersFromFlash+0x64>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
        SendUSBDebugMessage("Parameters loaded from Flash memory");
 80010f0:	4809      	ldr	r0, [pc, #36]	@ (8001118 <LoadParametersFromFlash+0x68>)
 80010f2:	f000 f89f 	bl	8001234 <SendUSBDebugMessage>
    } else {
        // Данные повреждены, используем значения по умолчанию
        InitializeParameters();
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
    }
}
 80010f6:	e004      	b.n	8001102 <LoadParametersFromFlash+0x52>
        InitializeParameters();
 80010f8:	f000 f852 	bl	80011a0 <InitializeParameters>
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
 80010fc:	4807      	ldr	r0, [pc, #28]	@ (800111c <LoadParametersFromFlash+0x6c>)
 80010fe:	f000 f899 	bl	8001234 <SendUSBDebugMessage>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bdb0      	pop	{r4, r5, r7, pc}
 800110a:	bf00      	nop
 800110c:	08080000 	.word	0x08080000
 8001110:	200094a8 	.word	0x200094a8
 8001114:	200094e8 	.word	0x200094e8
 8001118:	0800ff80 	.word	0x0800ff80
 800111c:	0800ffa4 	.word	0x0800ffa4

08001120 <SaveParametersToFlash>:

/**
  * @brief Сохранение параметров в Flash память
  */
void SaveParametersToFlash(void) {
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8001126:	f002 f8e1 	bl	80032ec <HAL_FLASH_Unlock>

    // Рассчитываем контрольную сумму
    params.crc = CalculateCRC32((uint8_t*)&params, sizeof(Parameters_t) - sizeof(uint32_t));
 800112a:	213c      	movs	r1, #60	@ 0x3c
 800112c:	4819      	ldr	r0, [pc, #100]	@ (8001194 <SaveParametersToFlash+0x74>)
 800112e:	f7ff ff87 	bl	8001040 <CalculateCRC32>
 8001132:	4603      	mov	r3, r0
 8001134:	4a17      	ldr	r2, [pc, #92]	@ (8001194 <SaveParametersToFlash+0x74>)
 8001136:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Стираем страницу Flash
    FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 8001138:	2102      	movs	r1, #2
 800113a:	200b      	movs	r0, #11
 800113c:	f002 fa38 	bl	80035b0 <FLASH_Erase_Sector>

    // Записываем данные
    uint32_t* source = (uint32_t*)&params;
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <SaveParametersToFlash+0x74>)
 8001142:	60fb      	str	r3, [r7, #12]
    uint32_t* destination = (uint32_t*)PARAMS_FLASH_ADDRESS;
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <SaveParametersToFlash+0x78>)
 8001146:	60bb      	str	r3, [r7, #8]
    uint32_t words = sizeof(Parameters_t) / sizeof(uint32_t);
 8001148:	2310      	movs	r3, #16
 800114a:	603b      	str	r3, [r7, #0]

    for (uint32_t i = 0; i < words; i++) {
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e013      	b.n	800117a <SaveParametersToFlash+0x5a>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)destination, *source);
 8001152:	68b9      	ldr	r1, [r7, #8]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	461c      	mov	r4, r3
 800115c:	4615      	mov	r5, r2
 800115e:	4622      	mov	r2, r4
 8001160:	462b      	mov	r3, r5
 8001162:	2002      	movs	r0, #2
 8001164:	f002 f870 	bl	8003248 <HAL_FLASH_Program>
        source++;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3304      	adds	r3, #4
 800116c:	60fb      	str	r3, [r7, #12]
        destination++;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3304      	adds	r3, #4
 8001172:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < words; i++) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3301      	adds	r3, #1
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d3e7      	bcc.n	8001152 <SaveParametersToFlash+0x32>
    }

    HAL_FLASH_Lock();
 8001182:	f002 f8d5 	bl	8003330 <HAL_FLASH_Lock>
    SendUSBDebugMessage("Parameters saved to Flash memory");
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <SaveParametersToFlash+0x7c>)
 8001188:	f000 f854 	bl	8001234 <SendUSBDebugMessage>
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}
 8001194:	200094a8 	.word	0x200094a8
 8001198:	08080000 	.word	0x08080000
 800119c:	0800ffd4 	.word	0x0800ffd4

080011a0 <InitializeParameters>:

/**
  * @brief Инициализация параметров значениями по умолчанию
  */
void InitializeParameters(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
    params.start_index = 100;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <InitializeParameters+0x78>)
 80011a6:	2264      	movs	r2, #100	@ 0x64
 80011a8:	601a      	str	r2, [r3, #0]
    params.wave_speed = 3200.0f;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <InitializeParameters+0x78>)
 80011ac:	4a1b      	ldr	r2, [pc, #108]	@ (800121c <InitializeParameters+0x7c>)
 80011ae:	605a      	str	r2, [r3, #4]
    params.first_left_strobe = 20;
 80011b0:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <InitializeParameters+0x78>)
 80011b2:	2214      	movs	r2, #20
 80011b4:	609a      	str	r2, [r3, #8]
    params.first_right_strobe = 120;
 80011b6:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <InitializeParameters+0x78>)
 80011b8:	2278      	movs	r2, #120	@ 0x78
 80011ba:	60da      	str	r2, [r3, #12]
    params.second_left_strobe = 140;
 80011bc:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <InitializeParameters+0x78>)
 80011be:	228c      	movs	r2, #140	@ 0x8c
 80011c0:	611a      	str	r2, [r3, #16]
    params.second_right_strobe = 240;
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <InitializeParameters+0x78>)
 80011c4:	22f0      	movs	r2, #240	@ 0xf0
 80011c6:	615a      	str	r2, [r3, #20]
    params.threshold = 2080.0f;
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <InitializeParameters+0x78>)
 80011ca:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <InitializeParameters+0x80>)
 80011cc:	619a      	str	r2, [r3, #24]
    params.threshold_zero_crossing = 600.0f;
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <InitializeParameters+0x78>)
 80011d0:	4a14      	ldr	r2, [pc, #80]	@ (8001224 <InitializeParameters+0x84>)
 80011d2:	61da      	str	r2, [r3, #28]
    params.probe_length = 400;
 80011d4:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <InitializeParameters+0x78>)
 80011d6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80011da:	621a      	str	r2, [r3, #32]
    params.method = 1;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <InitializeParameters+0x78>)
 80011de:	2201      	movs	r2, #1
 80011e0:	625a      	str	r2, [r3, #36]	@ 0x24
    params.end_index = 400;
 80011e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <InitializeParameters+0x78>)
 80011e4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80011e8:	629a      	str	r2, [r3, #40]	@ 0x28
    params.cycle_number = 10;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <InitializeParameters+0x78>)
 80011ec:	220a      	movs	r2, #10
 80011ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    strncpy(params.sensor_number, "0001", sizeof(params.sensor_number));
 80011f0:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <InitializeParameters+0x78>)
 80011f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <InitializeParameters+0x88>)
 80011f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    params.gain = 1.0f;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <InitializeParameters+0x78>)
 80011fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001202:	639a      	str	r2, [r3, #56]	@ 0x38

    parameters_initialized = true;
 8001204:	4b09      	ldr	r3, [pc, #36]	@ (800122c <InitializeParameters+0x8c>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
    SaveParametersToFlash(); // Сохраняем значения по умолчанию
 800120a:	f7ff ff89 	bl	8001120 <SaveParametersToFlash>
    SendUSBDebugMessage("Parameters initialized with defaults and saved to Flash");
 800120e:	4808      	ldr	r0, [pc, #32]	@ (8001230 <InitializeParameters+0x90>)
 8001210:	f000 f810 	bl	8001234 <SendUSBDebugMessage>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200094a8 	.word	0x200094a8
 800121c:	45480000 	.word	0x45480000
 8001220:	45020000 	.word	0x45020000
 8001224:	44160000 	.word	0x44160000
 8001228:	31303030 	.word	0x31303030
 800122c:	200094e8 	.word	0x200094e8
 8001230:	0800fff8 	.word	0x0800fff8

08001234 <SendUSBDebugMessage>:

/**
  * @brief Отправка отладочного сообщения через USB
  * @param message Текст сообщения
  */
void SendUSBDebugMessage(const char *message) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af02      	add	r7, sp, #8
 800123a:	6078      	str	r0, [r7, #4]
    snprintf(usb_msg, sizeof(usb_msg), "[%lu] %s\r\n", HAL_GetTick(), message);
 800123c:	f001 fdb6 	bl	8002dac <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	4613      	mov	r3, r2
 8001248:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <SendUSBDebugMessage+0x40>)
 800124a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800124e:	480a      	ldr	r0, [pc, #40]	@ (8001278 <SendUSBDebugMessage+0x44>)
 8001250:	f00b ffe8 	bl	800d224 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001254:	4808      	ldr	r0, [pc, #32]	@ (8001278 <SendUSBDebugMessage+0x44>)
 8001256:	f7ff f81b 	bl	8000290 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	b29b      	uxth	r3, r3
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	@ (8001278 <SendUSBDebugMessage+0x44>)
 8001262:	f009 fb81 	bl	800a968 <CDC_Transmit_FS>
    HAL_Delay(10); // Задержка для стабильной работы USB
 8001266:	200a      	movs	r0, #10
 8001268:	f001 fdac 	bl	8002dc4 <HAL_Delay>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	08010030 	.word	0x08010030
 8001278:	200003d8 	.word	0x200003d8

0800127c <ParseParameters>:

/**
  * @brief Парсинг параметров из строки
  * @param params_str Строка с параметрами (после "SETPARAMS=")
  */
void ParseParameters(const char* params_str) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b0d2      	sub	sp, #328	@ 0x148
 8001280:	af00      	add	r7, sp, #0
 8001282:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001286:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800128a:	6018      	str	r0, [r3, #0]
    char buffer[USB_RX_BUFFER_SIZE];
    strncpy(buffer, params_str, sizeof(buffer) - 1);
 800128c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001290:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001294:	f107 000c 	add.w	r0, r7, #12
 8001298:	f240 122b 	movw	r2, #299	@ 0x12b
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	f00c f896 	bl	800d3ce <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 80012a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80012a6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b

    // Загружаем текущие параметры (если еще не инициализированы)
    if (!parameters_initialized) {
 80012b0:	4bbb      	ldr	r3, [pc, #748]	@ (80015a0 <ParseParameters+0x324>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	f083 0301 	eor.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <ParseParameters+0x46>
        LoadParametersFromFlash();
 80012be:	f7ff fef7 	bl	80010b0 <LoadParametersFromFlash>
    }

    char* token = strtok(buffer, "|");
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	49b7      	ldr	r1, [pc, #732]	@ (80015a4 <ParseParameters+0x328>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00c f893 	bl	800d3f4 <strtok>
 80012ce:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144

    while (token != NULL) {
 80012d2:	e152      	b.n	800157a <ParseParameters+0x2fe>
        char* equals_sign = strchr(token, '=');
 80012d4:	213d      	movs	r1, #61	@ 0x3d
 80012d6:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 80012da:	f00c f846 	bl	800d36a <strchr>
 80012de:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
        if (equals_sign != NULL) {
 80012e2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8141 	beq.w	800156e <ParseParameters+0x2f2>
            *equals_sign = '\0'; // Разделяем на имя и значение
 80012ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
            char* param_name = token;
 80012f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80012f8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
            char* param_value = equals_sign + 1;
 80012fc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001300:	3301      	adds	r3, #1
 8001302:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

            // Парсим параметры
            if (strcmp(param_name, "wave_speed") == 0) {
 8001306:	49a8      	ldr	r1, [pc, #672]	@ (80015a8 <ParseParameters+0x32c>)
 8001308:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800130c:	f7fe ff60 	bl	80001d0 <strcmp>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10d      	bne.n	8001332 <ParseParameters+0xb6>
                params.wave_speed = atof(param_value);
 8001316:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800131a:	f00a f94d 	bl	800b5b8 <atof>
 800131e:	ec53 2b10 	vmov	r2, r3, d0
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fc6f 	bl	8000c08 <__aeabi_d2f>
 800132a:	4603      	mov	r3, r0
 800132c:	4a9f      	ldr	r2, [pc, #636]	@ (80015ac <ParseParameters+0x330>)
 800132e:	6053      	str	r3, [r2, #4]
 8001330:	e11d      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "threshold") == 0) {
 8001332:	499f      	ldr	r1, [pc, #636]	@ (80015b0 <ParseParameters+0x334>)
 8001334:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001338:	f7fe ff4a 	bl	80001d0 <strcmp>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <ParseParameters+0xe2>
                params.threshold = atof(param_value);
 8001342:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001346:	f00a f937 	bl	800b5b8 <atof>
 800134a:	ec53 2b10 	vmov	r2, r3, d0
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc59 	bl	8000c08 <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
 8001358:	4a94      	ldr	r2, [pc, #592]	@ (80015ac <ParseParameters+0x330>)
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	e107      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "threshold_zero_crossing") == 0) {
 800135e:	4995      	ldr	r1, [pc, #596]	@ (80015b4 <ParseParameters+0x338>)
 8001360:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001364:	f7fe ff34 	bl	80001d0 <strcmp>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10d      	bne.n	800138a <ParseParameters+0x10e>
                params.threshold_zero_crossing = atof(param_value);
 800136e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001372:	f00a f921 	bl	800b5b8 <atof>
 8001376:	ec53 2b10 	vmov	r2, r3, d0
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fc43 	bl	8000c08 <__aeabi_d2f>
 8001382:	4603      	mov	r3, r0
 8001384:	4a89      	ldr	r2, [pc, #548]	@ (80015ac <ParseParameters+0x330>)
 8001386:	61d3      	str	r3, [r2, #28]
 8001388:	e0f1      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "start_index") == 0) {
 800138a:	498b      	ldr	r1, [pc, #556]	@ (80015b8 <ParseParameters+0x33c>)
 800138c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001390:	f7fe ff1e 	bl	80001d0 <strcmp>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d108      	bne.n	80013ac <ParseParameters+0x130>
                params.start_index = atoi(param_value);
 800139a:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800139e:	f00a f90e 	bl	800b5be <atoi>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b81      	ldr	r3, [pc, #516]	@ (80015ac <ParseParameters+0x330>)
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	e0e0      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "probe_length") == 0) {
 80013ac:	4983      	ldr	r1, [pc, #524]	@ (80015bc <ParseParameters+0x340>)
 80013ae:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013b2:	f7fe ff0d 	bl	80001d0 <strcmp>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d108      	bne.n	80013ce <ParseParameters+0x152>
                params.probe_length = atoi(param_value);
 80013bc:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80013c0:	f00a f8fd 	bl	800b5be <atoi>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b78      	ldr	r3, [pc, #480]	@ (80015ac <ParseParameters+0x330>)
 80013ca:	621a      	str	r2, [r3, #32]
 80013cc:	e0cf      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_left1") == 0) {
 80013ce:	497c      	ldr	r1, [pc, #496]	@ (80015c0 <ParseParameters+0x344>)
 80013d0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013d4:	f7fe fefc 	bl	80001d0 <strcmp>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d108      	bne.n	80013f0 <ParseParameters+0x174>
                params.first_left_strobe = atoi(param_value);
 80013de:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80013e2:	f00a f8ec 	bl	800b5be <atoi>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b70      	ldr	r3, [pc, #448]	@ (80015ac <ParseParameters+0x330>)
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	e0be      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_right1") == 0) {
 80013f0:	4974      	ldr	r1, [pc, #464]	@ (80015c4 <ParseParameters+0x348>)
 80013f2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013f6:	f7fe feeb 	bl	80001d0 <strcmp>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d108      	bne.n	8001412 <ParseParameters+0x196>
                params.first_right_strobe = atoi(param_value);
 8001400:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001404:	f00a f8db 	bl	800b5be <atoi>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	4b67      	ldr	r3, [pc, #412]	@ (80015ac <ParseParameters+0x330>)
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	e0ad      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_left2") == 0) {
 8001412:	496d      	ldr	r1, [pc, #436]	@ (80015c8 <ParseParameters+0x34c>)
 8001414:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001418:	f7fe feda 	bl	80001d0 <strcmp>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d108      	bne.n	8001434 <ParseParameters+0x1b8>
                params.second_left_strobe = atoi(param_value);
 8001422:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001426:	f00a f8ca 	bl	800b5be <atoi>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	4b5f      	ldr	r3, [pc, #380]	@ (80015ac <ParseParameters+0x330>)
 8001430:	611a      	str	r2, [r3, #16]
 8001432:	e09c      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "strobe_right2") == 0) {
 8001434:	4965      	ldr	r1, [pc, #404]	@ (80015cc <ParseParameters+0x350>)
 8001436:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800143a:	f7fe fec9 	bl	80001d0 <strcmp>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d108      	bne.n	8001456 <ParseParameters+0x1da>
                params.second_right_strobe = atoi(param_value);
 8001444:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001448:	f00a f8b9 	bl	800b5be <atoi>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b56      	ldr	r3, [pc, #344]	@ (80015ac <ParseParameters+0x330>)
 8001452:	615a      	str	r2, [r3, #20]
 8001454:	e08b      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "method") == 0) {
 8001456:	495e      	ldr	r1, [pc, #376]	@ (80015d0 <ParseParameters+0x354>)
 8001458:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800145c:	f7fe feb8 	bl	80001d0 <strcmp>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d108      	bne.n	8001478 <ParseParameters+0x1fc>
                params.method = atoi(param_value);
 8001466:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800146a:	f00a f8a8 	bl	800b5be <atoi>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b4e      	ldr	r3, [pc, #312]	@ (80015ac <ParseParameters+0x330>)
 8001474:	625a      	str	r2, [r3, #36]	@ 0x24
 8001476:	e07a      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "end_index") == 0) {
 8001478:	4956      	ldr	r1, [pc, #344]	@ (80015d4 <ParseParameters+0x358>)
 800147a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800147e:	f7fe fea7 	bl	80001d0 <strcmp>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d108      	bne.n	800149a <ParseParameters+0x21e>
                params.end_index = atoi(param_value);
 8001488:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800148c:	f00a f897 	bl	800b5be <atoi>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b45      	ldr	r3, [pc, #276]	@ (80015ac <ParseParameters+0x330>)
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
 8001498:	e069      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "cycle_number") == 0) {
 800149a:	494f      	ldr	r1, [pc, #316]	@ (80015d8 <ParseParameters+0x35c>)
 800149c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80014a0:	f7fe fe96 	bl	80001d0 <strcmp>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d108      	bne.n	80014bc <ParseParameters+0x240>
                params.cycle_number = atoi(param_value);
 80014aa:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80014ae:	f00a f886 	bl	800b5be <atoi>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ac <ParseParameters+0x330>)
 80014b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014ba:	e058      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "sensor_number") == 0) {
 80014bc:	4947      	ldr	r1, [pc, #284]	@ (80015dc <ParseParameters+0x360>)
 80014be:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80014c2:	f7fe fe85 	bl	80001d0 <strcmp>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10a      	bne.n	80014e2 <ParseParameters+0x266>
                strncpy(params.sensor_number, param_value, sizeof(params.sensor_number) - 1);
 80014cc:	2204      	movs	r2, #4
 80014ce:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 80014d2:	4843      	ldr	r0, [pc, #268]	@ (80015e0 <ParseParameters+0x364>)
 80014d4:	f00b ff7b 	bl	800d3ce <strncpy>
                params.sensor_number[sizeof(params.sensor_number) - 1] = '\0';
 80014d8:	4b34      	ldr	r3, [pc, #208]	@ (80015ac <ParseParameters+0x330>)
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80014e0:	e045      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "gain") == 0) {
 80014e2:	4940      	ldr	r1, [pc, #256]	@ (80015e4 <ParseParameters+0x368>)
 80014e4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80014e8:	f7fe fe72 	bl	80001d0 <strcmp>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10d      	bne.n	800150e <ParseParameters+0x292>
                params.gain = atof(param_value);
 80014f2:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80014f6:	f00a f85f 	bl	800b5b8 <atof>
 80014fa:	ec53 2b10 	vmov	r2, r3, d0
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff fb81 	bl	8000c08 <__aeabi_d2f>
 8001506:	4603      	mov	r3, r0
 8001508:	4a28      	ldr	r2, [pc, #160]	@ (80015ac <ParseParameters+0x330>)
 800150a:	6393      	str	r3, [r2, #56]	@ 0x38
 800150c:	e02f      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "start_date") == 0) {
 800150e:	4936      	ldr	r1, [pc, #216]	@ (80015e8 <ParseParameters+0x36c>)
 8001510:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001514:	f7fe fe5c 	bl	80001d0 <strcmp>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10c      	bne.n	8001538 <ParseParameters+0x2bc>
                // Сохраняем start_date во временную переменную (НЕ во Flash)
                strncpy(start_date, param_value, sizeof(start_date) - 1);
 800151e:	2213      	movs	r2, #19
 8001520:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8001524:	4831      	ldr	r0, [pc, #196]	@ (80015ec <ParseParameters+0x370>)
 8001526:	f00b ff52 	bl	800d3ce <strncpy>
                start_date[sizeof(start_date) - 1] = '\0';
 800152a:	4b30      	ldr	r3, [pc, #192]	@ (80015ec <ParseParameters+0x370>)
 800152c:	2200      	movs	r2, #0
 800152e:	74da      	strb	r2, [r3, #19]
                SendUSBDebugMessage("Start date parsed (not saved to Flash)");
 8001530:	482f      	ldr	r0, [pc, #188]	@ (80015f0 <ParseParameters+0x374>)
 8001532:	f7ff fe7f 	bl	8001234 <SendUSBDebugMessage>
 8001536:	e01a      	b.n	800156e <ParseParameters+0x2f2>
            } else if (strcmp(param_name, "period") == 0) {
 8001538:	492e      	ldr	r1, [pc, #184]	@ (80015f4 <ParseParameters+0x378>)
 800153a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800153e:	f7fe fe47 	bl	80001d0 <strcmp>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d112      	bne.n	800156e <ParseParameters+0x2f2>
                // Сохраняем period во временную переменную (НЕ во Flash)
                period = atoi(param_value);
 8001548:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800154c:	f00a f837 	bl	800b5be <atoi>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	4b28      	ldr	r3, [pc, #160]	@ (80015f8 <ParseParameters+0x37c>)
 8001556:	601a      	str	r2, [r3, #0]
                snprintf(usb_msg, sizeof(usb_msg), "Period parsed: %lu (not saved to Flash)", period);
 8001558:	4b27      	ldr	r3, [pc, #156]	@ (80015f8 <ParseParameters+0x37c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a27      	ldr	r2, [pc, #156]	@ (80015fc <ParseParameters+0x380>)
 800155e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001562:	4827      	ldr	r0, [pc, #156]	@ (8001600 <ParseParameters+0x384>)
 8001564:	f00b fe5e 	bl	800d224 <sniprintf>
                SendUSBDebugMessage(usb_msg);
 8001568:	4825      	ldr	r0, [pc, #148]	@ (8001600 <ParseParameters+0x384>)
 800156a:	f7ff fe63 	bl	8001234 <SendUSBDebugMessage>
            }
        }
        token = strtok(NULL, "|");
 800156e:	490d      	ldr	r1, [pc, #52]	@ (80015a4 <ParseParameters+0x328>)
 8001570:	2000      	movs	r0, #0
 8001572:	f00b ff3f 	bl	800d3f4 <strtok>
 8001576:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    while (token != NULL) {
 800157a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800157e:	2b00      	cmp	r3, #0
 8001580:	f47f aea8 	bne.w	80012d4 <ParseParameters+0x58>
    }

    // Сохраняем обновленные параметры в Flash (без start_date и period)
    SaveParametersToFlash();
 8001584:	f7ff fdcc 	bl	8001120 <SaveParametersToFlash>

    // Устанавливаем флаг для запуска расчета
    calculate_thickness_requested = true;
 8001588:	4b1e      	ldr	r3, [pc, #120]	@ (8001604 <ParseParameters+0x388>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
    SendUSBDebugMessage("Parameters parsed and saved successfully - calculation requested");
 800158e:	481e      	ldr	r0, [pc, #120]	@ (8001608 <ParseParameters+0x38c>)
 8001590:	f7ff fe50 	bl	8001234 <SendUSBDebugMessage>
}
 8001594:	bf00      	nop
 8001596:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200094e8 	.word	0x200094e8
 80015a4:	0801003c 	.word	0x0801003c
 80015a8:	08010040 	.word	0x08010040
 80015ac:	200094a8 	.word	0x200094a8
 80015b0:	0801004c 	.word	0x0801004c
 80015b4:	08010058 	.word	0x08010058
 80015b8:	08010070 	.word	0x08010070
 80015bc:	0801007c 	.word	0x0801007c
 80015c0:	0801008c 	.word	0x0801008c
 80015c4:	0801009c 	.word	0x0801009c
 80015c8:	080100ac 	.word	0x080100ac
 80015cc:	080100bc 	.word	0x080100bc
 80015d0:	080100cc 	.word	0x080100cc
 80015d4:	080100d4 	.word	0x080100d4
 80015d8:	080100e0 	.word	0x080100e0
 80015dc:	080100f0 	.word	0x080100f0
 80015e0:	200094d8 	.word	0x200094d8
 80015e4:	08010100 	.word	0x08010100
 80015e8:	08010108 	.word	0x08010108
 80015ec:	200094ec 	.word	0x200094ec
 80015f0:	08010114 	.word	0x08010114
 80015f4:	0801013c 	.word	0x0801013c
 80015f8:	20009500 	.word	0x20009500
 80015fc:	08010144 	.word	0x08010144
 8001600:	200003d8 	.word	0x200003d8
 8001604:	200094e9 	.word	0x200094e9
 8001608:	0801016c 	.word	0x0801016c

0800160c <SendParametersResponse>:

/**
  * @brief Отправка текущих параметров обратно в приложение
  */
void SendParametersResponse(void) {
 800160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001610:	b09d      	sub	sp, #116	@ 0x74
 8001612:	af14      	add	r7, sp, #80	@ 0x50
    if (!parameters_initialized) {
 8001614:	4b3a      	ldr	r3, [pc, #232]	@ (8001700 <SendParametersResponse+0xf4>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	f083 0301 	eor.w	r3, r3, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <SendParametersResponse+0x1e>
        SendUSBDebugMessage("Parameters not initialized yet");
 8001622:	4838      	ldr	r0, [pc, #224]	@ (8001704 <SendParametersResponse+0xf8>)
 8001624:	f7ff fe06 	bl	8001234 <SendUSBDebugMessage>
        return;
 8001628:	e065      	b.n	80016f6 <SendParametersResponse+0xea>
    snprintf(usb_msg, sizeof(usb_msg),
        "wave_speed=%.1f|threshold=%.1f|threshold_zero_crossing=%.1f|"
        "start_index=%lu|probe_length=%lu|strobe_left1=%lu|strobe_right1=%lu|"
        "strobe_left2=%lu|strobe_right2=%lu|method=%lu|end_index=%lu|cycle_number=%lu|"
        "sensor_number=%s|gain=%.1f|start_date=%s|period=%lu\r\n",
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800162a:	4b37      	ldr	r3, [pc, #220]	@ (8001708 <SendParametersResponse+0xfc>)
 800162c:	685b      	ldr	r3, [r3, #4]
    snprintf(usb_msg, sizeof(usb_msg),
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff9a 	bl	8000568 <__aeabi_f2d>
 8001634:	4604      	mov	r4, r0
 8001636:	460d      	mov	r5, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001638:	4b33      	ldr	r3, [pc, #204]	@ (8001708 <SendParametersResponse+0xfc>)
 800163a:	699b      	ldr	r3, [r3, #24]
    snprintf(usb_msg, sizeof(usb_msg),
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff93 	bl	8000568 <__aeabi_f2d>
 8001642:	4680      	mov	r8, r0
 8001644:	4689      	mov	r9, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 8001646:	4b30      	ldr	r3, [pc, #192]	@ (8001708 <SendParametersResponse+0xfc>)
 8001648:	69db      	ldr	r3, [r3, #28]
    snprintf(usb_msg, sizeof(usb_msg),
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff8c 	bl	8000568 <__aeabi_f2d>
 8001650:	4682      	mov	sl, r0
 8001652:	468b      	mov	fp, r1
 8001654:	4b2c      	ldr	r3, [pc, #176]	@ (8001708 <SendParametersResponse+0xfc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	4b2b      	ldr	r3, [pc, #172]	@ (8001708 <SendParametersResponse+0xfc>)
 800165c:	6a1a      	ldr	r2, [r3, #32]
 800165e:	61ba      	str	r2, [r7, #24]
 8001660:	4b29      	ldr	r3, [pc, #164]	@ (8001708 <SendParametersResponse+0xfc>)
 8001662:	6899      	ldr	r1, [r3, #8]
 8001664:	6179      	str	r1, [r7, #20]
 8001666:	4b28      	ldr	r3, [pc, #160]	@ (8001708 <SendParametersResponse+0xfc>)
 8001668:	68d8      	ldr	r0, [r3, #12]
 800166a:	6138      	str	r0, [r7, #16]
 800166c:	4b26      	ldr	r3, [pc, #152]	@ (8001708 <SendParametersResponse+0xfc>)
 800166e:	691e      	ldr	r6, [r3, #16]
 8001670:	60fe      	str	r6, [r7, #12]
 8001672:	4b25      	ldr	r3, [pc, #148]	@ (8001708 <SendParametersResponse+0xfc>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	4b23      	ldr	r3, [pc, #140]	@ (8001708 <SendParametersResponse+0xfc>)
 800167a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <SendParametersResponse+0xfc>)
 8001680:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001682:	6039      	str	r1, [r7, #0]
 8001684:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <SendParametersResponse+0xfc>)
 8001686:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
        params.start_index, params.probe_length, params.first_left_strobe, params.first_right_strobe,
        params.second_left_strobe, params.second_right_strobe, params.method, params.end_index, params.cycle_number,
        params.sensor_number, params.gain, start_date, period);
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <SendParametersResponse+0xfc>)
 800168a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    snprintf(usb_msg, sizeof(usb_msg),
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff6b 	bl	8000568 <__aeabi_f2d>
 8001692:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <SendParametersResponse+0x100>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	9313      	str	r3, [sp, #76]	@ 0x4c
 8001698:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <SendParametersResponse+0x104>)
 800169a:	9312      	str	r3, [sp, #72]	@ 0x48
 800169c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80016a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <SendParametersResponse+0x108>)
 80016a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80016a4:	960e      	str	r6, [sp, #56]	@ 0x38
 80016a6:	6839      	ldr	r1, [r7, #0]
 80016a8:	910d      	str	r1, [sp, #52]	@ 0x34
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	920c      	str	r2, [sp, #48]	@ 0x30
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80016b2:	68fe      	ldr	r6, [r7, #12]
 80016b4:	960a      	str	r6, [sp, #40]	@ 0x28
 80016b6:	6938      	ldr	r0, [r7, #16]
 80016b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80016ba:	6979      	ldr	r1, [r7, #20]
 80016bc:	9108      	str	r1, [sp, #32]
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	9207      	str	r2, [sp, #28]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	9306      	str	r3, [sp, #24]
 80016c6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80016ca:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80016ce:	e9cd 4500 	strd	r4, r5, [sp]
 80016d2:	4a11      	ldr	r2, [pc, #68]	@ (8001718 <SendParametersResponse+0x10c>)
 80016d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016d8:	4810      	ldr	r0, [pc, #64]	@ (800171c <SendParametersResponse+0x110>)
 80016da:	f00b fda3 	bl	800d224 <sniprintf>

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80016de:	480f      	ldr	r0, [pc, #60]	@ (800171c <SendParametersResponse+0x110>)
 80016e0:	f7fe fdd6 	bl	8000290 <strlen>
 80016e4:	4603      	mov	r3, r0
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4619      	mov	r1, r3
 80016ea:	480c      	ldr	r0, [pc, #48]	@ (800171c <SendParametersResponse+0x110>)
 80016ec:	f009 f93c 	bl	800a968 <CDC_Transmit_FS>
    HAL_Delay(10);
 80016f0:	200a      	movs	r0, #10
 80016f2:	f001 fb67 	bl	8002dc4 <HAL_Delay>
}
 80016f6:	3724      	adds	r7, #36	@ 0x24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016fe:	bf00      	nop
 8001700:	200094e8 	.word	0x200094e8
 8001704:	080101b0 	.word	0x080101b0
 8001708:	200094a8 	.word	0x200094a8
 800170c:	20009500 	.word	0x20009500
 8001710:	200094ec 	.word	0x200094ec
 8001714:	200094d8 	.word	0x200094d8
 8001718:	080101d0 	.word	0x080101d0
 800171c:	200003d8 	.word	0x200003d8

08001720 <GenerateStartPulse>:

/**
  * @brief Генерация стартового импульса для ПЛИС
  * @note Импульс длительностью 200 нс на пине PD6
  */
void GenerateStartPulse(void) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
    // Устанавливаем высокий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	2140      	movs	r1, #64	@ 0x40
 800172a:	4812      	ldr	r0, [pc, #72]	@ (8001774 <GenerateStartPulse+0x54>)
 800172c:	f002 f924 	bl	8003978 <HAL_GPIO_WritePin>

    // Задержка для формирования импульса 200 нс
    for(volatile int i = 0; i < 34; i++);
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	e002      	b.n	800173c <GenerateStartPulse+0x1c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3301      	adds	r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b21      	cmp	r3, #33	@ 0x21
 8001740:	ddf9      	ble.n	8001736 <GenerateStartPulse+0x16>

    // Устанавливаем низкий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2140      	movs	r1, #64	@ 0x40
 8001746:	480b      	ldr	r0, [pc, #44]	@ (8001774 <GenerateStartPulse+0x54>)
 8001748:	f002 f916 	bl	8003978 <HAL_GPIO_WritePin>

    // Загружаем параметры из памяти и запускаем расчет
    if (!parameters_initialized) {
 800174c:	4b0a      	ldr	r3, [pc, #40]	@ (8001778 <GenerateStartPulse+0x58>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	f083 0301 	eor.w	r3, r3, #1
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <GenerateStartPulse+0x3e>
        LoadParametersFromFlash();
 800175a:	f7ff fca9 	bl	80010b0 <LoadParametersFromFlash>
    }
    calculate_thickness_requested = true;
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <GenerateStartPulse+0x5c>)
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]

    SendUSBDebugMessage("Start pulse generated and calculation requested");
 8001764:	4806      	ldr	r0, [pc, #24]	@ (8001780 <GenerateStartPulse+0x60>)
 8001766:	f7ff fd65 	bl	8001234 <SendUSBDebugMessage>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40020c00 	.word	0x40020c00
 8001778:	200094e8 	.word	0x200094e8
 800177c:	200094e9 	.word	0x200094e9
 8001780:	080102d4 	.word	0x080102d4

08001784 <ProcessUSBCommand>:

/**
  * @brief Обработка команд от USB
  * @param cmd Полученная команда
  */
void ProcessUSBCommand(uint8_t cmd) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
    switch(cmd) {
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b31      	cmp	r3, #49	@ 0x31
 8001792:	d102      	bne.n	800179a <ProcessUSBCommand+0x16>
        case '1': // Стартовая команда
            GenerateStartPulse();
 8001794:	f7ff ffc4 	bl	8001720 <GenerateStartPulse>
            break;
 8001798:	e003      	b.n	80017a2 <ProcessUSBCommand+0x1e>

        default:
            // Неизвестная команда
            SendUSBDebugMessage("Unknown command received");
 800179a:	4804      	ldr	r0, [pc, #16]	@ (80017ac <ProcessUSBCommand+0x28>)
 800179c:	f7ff fd4a 	bl	8001234 <SendUSBDebugMessage>
            break;
 80017a0:	bf00      	nop
    }
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	08010304 	.word	0x08010304

080017b0 <NormalizeData>:

void NormalizeData(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	f5ad 4d8f 	sub.w	sp, sp, #18304	@ 0x4780
 80017b6:	b098      	sub	sp, #96	@ 0x60
 80017b8:	af00      	add	r7, sp, #0
    arm_mean_f32(normalized_data, DATA_VALUES_COUNT, &mean);
 80017ba:	4a24      	ldr	r2, [pc, #144]	@ (800184c <NormalizeData+0x9c>)
 80017bc:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80017c0:	4823      	ldr	r0, [pc, #140]	@ (8001850 <NormalizeData+0xa0>)
 80017c2:	f009 fd81 	bl	800b2c8 <arm_mean_f32>
    float32_t subtracted_mean[DATA_VALUES_COUNT];
    arm_offset_f32(normalized_data, -mean, subtracted_mean, DATA_VALUES_COUNT);
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <NormalizeData+0x9c>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	eef1 7a67 	vneg.f32	s15, s15
 80017d0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017d4:	3b60      	subs	r3, #96	@ 0x60
 80017d6:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 80017da:	4619      	mov	r1, r3
 80017dc:	eeb0 0a67 	vmov.f32	s0, s15
 80017e0:	481b      	ldr	r0, [pc, #108]	@ (8001850 <NormalizeData+0xa0>)
 80017e2:	f009 fdf5 	bl	800b3d0 <arm_offset_f32>
    arm_std_f32(subtracted_mean, DATA_VALUES_COUNT, &std_dev);
 80017e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017ea:	3b60      	subs	r3, #96	@ 0x60
 80017ec:	4a19      	ldr	r2, [pc, #100]	@ (8001854 <NormalizeData+0xa4>)
 80017ee:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80017f2:	4618      	mov	r0, r3
 80017f4:	f009 fd46 	bl	800b284 <arm_std_f32>

    if (std_dev != 0.0f) {
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <NormalizeData+0xa4>)
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	d012      	beq.n	800182e <NormalizeData+0x7e>
        arm_scale_f32(subtracted_mean, 1.0f/std_dev, normalized_data, DATA_VALUES_COUNT);
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <NormalizeData+0xa4>)
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001816:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800181a:	3b60      	subs	r3, #96	@ 0x60
 800181c:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8001820:	490b      	ldr	r1, [pc, #44]	@ (8001850 <NormalizeData+0xa0>)
 8001822:	eeb0 0a47 	vmov.f32	s0, s14
 8001826:	4618      	mov	r0, r3
 8001828:	f009 fd8c 	bl	800b344 <arm_scale_f32>
    } else {
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
    }
}
 800182c:	e008      	b.n	8001840 <NormalizeData+0x90>
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
 800182e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001832:	3b60      	subs	r3, #96	@ 0x60
 8001834:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8001838:	4905      	ldr	r1, [pc, #20]	@ (8001850 <NormalizeData+0xa0>)
 800183a:	4618      	mov	r0, r3
 800183c:	f009 fcf0 	bl	800b220 <arm_copy_f32>
}
 8001840:	bf00      	nop
 8001842:	f507 478f 	add.w	r7, r7, #18304	@ 0x4780
 8001846:	3760      	adds	r7, #96	@ 0x60
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20009498 	.word	0x20009498
 8001850:	200004d8 	.word	0x200004d8
 8001854:	2000949c 	.word	0x2000949c

08001858 <CalculateAutocorrelation>:

void CalculateAutocorrelation(void) {
 8001858:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e053      	b.n	800190e <CalculateAutocorrelation+0xb6>
        double sum = 0.0;
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        uint32_t count = DATA_VALUES_COUNT - lag;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f5c3 538f 	rsb	r3, r3, #4576	@ 0x11e0
 8001878:	3318      	adds	r3, #24
 800187a:	603b      	str	r3, [r7, #0]

        for (uint32_t i = 0; i < count; i++) {
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	e026      	b.n	80018d0 <CalculateAutocorrelation+0x78>
            sum += (double)normalized_data[i] * (double)normalized_data[i + lag];
 8001882:	4a28      	ldr	r2, [pc, #160]	@ (8001924 <CalculateAutocorrelation+0xcc>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe6b 	bl	8000568 <__aeabi_f2d>
 8001892:	4680      	mov	r8, r0
 8001894:	4689      	mov	r9, r1
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	4413      	add	r3, r2
 800189c:	4a21      	ldr	r2, [pc, #132]	@ (8001924 <CalculateAutocorrelation+0xcc>)
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe5f 	bl	8000568 <__aeabi_f2d>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4640      	mov	r0, r8
 80018b0:	4649      	mov	r1, r9
 80018b2:	f7fe feb1 	bl	8000618 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018be:	f7fe fcf5 	bl	80002ac <__adddf3>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
        for (uint32_t i = 0; i < count; i++) {
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3301      	adds	r3, #1
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d3d4      	bcc.n	8001882 <CalculateAutocorrelation+0x2a>
        }

        autocorrelation_result[lag] = (float32_t)fabs(sum / count);
 80018d8:	6838      	ldr	r0, [r7, #0]
 80018da:	f7fe fe23 	bl	8000524 <__aeabi_ui2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018e6:	f7fe ffc1 	bl	800086c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4614      	mov	r4, r2
 80018f0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7ff f986 	bl	8000c08 <__aeabi_d2f>
 80018fc:	4602      	mov	r2, r0
 80018fe:	490a      	ldr	r1, [pc, #40]	@ (8001928 <CalculateAutocorrelation+0xd0>)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	601a      	str	r2, [r3, #0]
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001914:	4293      	cmp	r3, r2
 8001916:	d9a6      	bls.n	8001866 <CalculateAutocorrelation+0xe>
    }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001924:	200004d8 	.word	0x200004d8
 8001928:	20004cb8 	.word	0x20004cb8

0800192c <FindMaxAutocorrelationIndex>:

uint32_t FindMaxAutocorrelationIndex(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8001932:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <FindMaxAutocorrelationIndex+0x84>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	f083 0301 	eor.w	r3, r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d004      	beq.n	800194a <FindMaxAutocorrelationIndex+0x1e>
        SendUSBDebugMessage("Parameters not initialized for ACF");
 8001940:	481c      	ldr	r0, [pc, #112]	@ (80019b4 <FindMaxAutocorrelationIndex+0x88>)
 8001942:	f7ff fc77 	bl	8001234 <SendUSBDebugMessage>
        return 0;
 8001946:	2300      	movs	r3, #0
 8001948:	e02e      	b.n	80019a8 <FindMaxAutocorrelationIndex+0x7c>
    }

    float32_t max_value = 0.0f;
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
    uint32_t max_idx = params.start_index;
 8001950:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <FindMaxAutocorrelationIndex+0x8c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60bb      	str	r3, [r7, #8]

    // Используем end_index для ограничения диапазона поиска
    uint32_t search_end = (params.end_index < DATA_VALUES_COUNT) ? params.end_index : DATA_VALUES_COUNT - 1;
 8001956:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <FindMaxAutocorrelationIndex+0x8c>)
 8001958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195a:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 800195e:	4293      	cmp	r3, r2
 8001960:	bf28      	it	cs
 8001962:	4613      	movcs	r3, r2
 8001964:	603b      	str	r3, [r7, #0]

    for (uint32_t i = params.start_index; i < search_end; i++) {
 8001966:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <FindMaxAutocorrelationIndex+0x8c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	e017      	b.n	800199e <FindMaxAutocorrelationIndex+0x72>
        if (autocorrelation_result[i] > max_value) {
 800196e:	4a13      	ldr	r2, [pc, #76]	@ (80019bc <FindMaxAutocorrelationIndex+0x90>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ed97 7a03 	vldr	s14, [r7, #12]
 800197e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001986:	d507      	bpl.n	8001998 <FindMaxAutocorrelationIndex+0x6c>
            max_value = autocorrelation_result[i];
 8001988:	4a0c      	ldr	r2, [pc, #48]	@ (80019bc <FindMaxAutocorrelationIndex+0x90>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60fb      	str	r3, [r7, #12]
            max_idx = i;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = params.start_index; i < search_end; i++) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3301      	adds	r3, #1
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d3e3      	bcc.n	800196e <FindMaxAutocorrelationIndex+0x42>
        }
    }

    return max_idx;
 80019a6:	68bb      	ldr	r3, [r7, #8]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200094e8 	.word	0x200094e8
 80019b4:	08010320 	.word	0x08010320
 80019b8:	200094a8 	.word	0x200094a8
 80019bc:	20004cb8 	.word	0x20004cb8

080019c0 <CalculateZeroCrossingThickness>:

/**
  * @brief Расчет толщины методом перехода через ноль
  */
void CalculateZeroCrossingThickness(const float32_t* data) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	@ 0x30
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 80019c8:	4b58      	ldr	r3, [pc, #352]	@ (8001b2c <CalculateZeroCrossingThickness+0x16c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	f083 0301 	eor.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <CalculateZeroCrossingThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for zero crossing");
 80019d6:	4856      	ldr	r0, [pc, #344]	@ (8001b30 <CalculateZeroCrossingThickness+0x170>)
 80019d8:	f7ff fc2c 	bl	8001234 <SendUSBDebugMessage>
        return;
 80019dc:	e0a2      	b.n	8001b24 <CalculateZeroCrossingThickness+0x164>
    }

    // ВАЖНО: вычисляем one_point_mm здесь для методов 1 и 2
    one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency);
 80019de:	4b55      	ldr	r3, [pc, #340]	@ (8001b34 <CalculateZeroCrossingThickness+0x174>)
 80019e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80019e4:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001b38 <CalculateZeroCrossingThickness+0x178>
 80019e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019ec:	4b53      	ldr	r3, [pc, #332]	@ (8001b3c <CalculateZeroCrossingThickness+0x17c>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019fe:	4b50      	ldr	r3, [pc, #320]	@ (8001b40 <CalculateZeroCrossingThickness+0x180>)
 8001a00:	edc3 7a00 	vstr	s15, [r3]

    uint32_t first_above_threshold_index = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t zero_crossing_index = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
    bool found_threshold = false;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	77fb      	strb	r3, [r7, #31]

    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
 8001a14:	e015      	b.n	8001a42 <CalculateZeroCrossingThickness+0x82>
        if (data[i] >= params.threshold_zero_crossing) {
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	ed93 7a00 	vldr	s14, [r3]
 8001a22:	4b44      	ldr	r3, [pc, #272]	@ (8001b34 <CalculateZeroCrossingThickness+0x174>)
 8001a24:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	db04      	blt.n	8001a3c <CalculateZeroCrossingThickness+0x7c>
            first_above_threshold_index = i;
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
            found_threshold = true;
 8001a36:	2301      	movs	r3, #1
 8001a38:	77fb      	strb	r3, [r7, #31]
            break;
 8001a3a:	e007      	b.n	8001a4c <CalculateZeroCrossingThickness+0x8c>
    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d9e4      	bls.n	8001a16 <CalculateZeroCrossingThickness+0x56>
        }
    }

    if (!found_threshold) {
 8001a4c:	7ffb      	ldrb	r3, [r7, #31]
 8001a4e:	f083 0301 	eor.w	r3, r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <CalculateZeroCrossingThickness+0xa0>
        SendUSBDebugMessage("Zero crossing: threshold not found");
 8001a58:	483a      	ldr	r0, [pc, #232]	@ (8001b44 <CalculateZeroCrossingThickness+0x184>)
 8001a5a:	f7ff fbeb 	bl	8001234 <SendUSBDebugMessage>
        return;
 8001a5e:	e061      	b.n	8001b24 <CalculateZeroCrossingThickness+0x164>
    }

    bool sign_positive = (data[first_above_threshold_index] >= 0);
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a74:	bfac      	ite	ge
 8001a76:	2301      	movge	r3, #1
 8001a78:	2300      	movlt	r3, #0
 8001a7a:	74fb      	strb	r3, [r7, #19]
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	e017      	b.n	8001ab4 <CalculateZeroCrossingThickness+0xf4>
        bool current_sign_positive = (data[i] >= 0);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a98:	bfac      	ite	ge
 8001a9a:	2301      	movge	r3, #1
 8001a9c:	2300      	movlt	r3, #0
 8001a9e:	74bb      	strb	r3, [r7, #18]
        if (current_sign_positive != sign_positive) {
 8001aa0:	7cba      	ldrb	r2, [r7, #18]
 8001aa2:	7cfb      	ldrb	r3, [r7, #19]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d002      	beq.n	8001aae <CalculateZeroCrossingThickness+0xee>
            zero_crossing_index = i;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	623b      	str	r3, [r7, #32]
            break;
 8001aac:	e007      	b.n	8001abe <CalculateZeroCrossingThickness+0xfe>
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d9e2      	bls.n	8001a84 <CalculateZeroCrossingThickness+0xc4>
        }
    }

    if (zero_crossing_index == 0) {
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d103      	bne.n	8001acc <CalculateZeroCrossingThickness+0x10c>
        SendUSBDebugMessage("Zero crossing: zero crossing not found");
 8001ac4:	4820      	ldr	r0, [pc, #128]	@ (8001b48 <CalculateZeroCrossingThickness+0x188>)
 8001ac6:	f7ff fbb5 	bl	8001234 <SendUSBDebugMessage>
        return;
 8001aca:	e02b      	b.n	8001b24 <CalculateZeroCrossingThickness+0x164>
    }

    uint32_t final_index = zero_crossing_index + params.probe_length;
 8001acc:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <CalculateZeroCrossingThickness+0x174>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	6a3a      	ldr	r2, [r7, #32]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
    float thickness = final_index / (2.0f * one_point_mm);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ae0:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <CalculateZeroCrossingThickness+0x180>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aee:	edc7 7a02 	vstr	s15, [r7, #8]

    snprintf(usb_msg, sizeof(usb_msg), "Zero_crossing:%.3f\r\n", thickness);
 8001af2:	68b8      	ldr	r0, [r7, #8]
 8001af4:	f7fe fd38 	bl	8000568 <__aeabi_f2d>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	e9cd 2300 	strd	r2, r3, [sp]
 8001b00:	4a12      	ldr	r2, [pc, #72]	@ (8001b4c <CalculateZeroCrossingThickness+0x18c>)
 8001b02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b06:	4812      	ldr	r0, [pc, #72]	@ (8001b50 <CalculateZeroCrossingThickness+0x190>)
 8001b08:	f00b fb8c 	bl	800d224 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001b0c:	4810      	ldr	r0, [pc, #64]	@ (8001b50 <CalculateZeroCrossingThickness+0x190>)
 8001b0e:	f7fe fbbf 	bl	8000290 <strlen>
 8001b12:	4603      	mov	r3, r0
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	4619      	mov	r1, r3
 8001b18:	480d      	ldr	r0, [pc, #52]	@ (8001b50 <CalculateZeroCrossingThickness+0x190>)
 8001b1a:	f008 ff25 	bl	800a968 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001b1e:	200a      	movs	r0, #10
 8001b20:	f001 f950 	bl	8002dc4 <HAL_Delay>
}
 8001b24:	3728      	adds	r7, #40	@ 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200094e8 	.word	0x200094e8
 8001b30:	08010344 	.word	0x08010344
 8001b34:	200094a8 	.word	0x200094a8
 8001b38:	447a0000 	.word	0x447a0000
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	200094a0 	.word	0x200094a0
 8001b44:	08010374 	.word	0x08010374
 8001b48:	08010398 	.word	0x08010398
 8001b4c:	080103c0 	.word	0x080103c0
 8001b50:	200003d8 	.word	0x200003d8

08001b54 <CalculateStrobeThickness>:

/**
  * @brief Расчет толщины методом по стробам
  */
void CalculateStrobeThickness(const float32_t* data) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	@ 0x30
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 8001b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd0 <CalculateStrobeThickness+0x17c>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	f083 0301 	eor.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <CalculateStrobeThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for strobe method");
 8001b6a:	485a      	ldr	r0, [pc, #360]	@ (8001cd4 <CalculateStrobeThickness+0x180>)
 8001b6c:	f7ff fb62 	bl	8001234 <SendUSBDebugMessage>
        return;
 8001b70:	e0ab      	b.n	8001cca <CalculateStrobeThickness+0x176>
    }

    // ВАЖНО: вычисляем one_point_mm здесь для методов 1 и 2
    one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency);
 8001b72:	4b59      	ldr	r3, [pc, #356]	@ (8001cd8 <CalculateStrobeThickness+0x184>)
 8001b74:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b78:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001cdc <CalculateStrobeThickness+0x188>
 8001b7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b80:	4b57      	ldr	r3, [pc, #348]	@ (8001ce0 <CalculateStrobeThickness+0x18c>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b92:	4b54      	ldr	r3, [pc, #336]	@ (8001ce4 <CalculateStrobeThickness+0x190>)
 8001b94:	edc3 7a00 	vstr	s15, [r3]

    float32_t max_value_first = -FLT_MAX;
 8001b98:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t max_index_first = params.first_left_strobe;
 8001b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd8 <CalculateStrobeThickness+0x184>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	623b      	str	r3, [r7, #32]
    float32_t max_value_second = -FLT_MAX;
 8001ba4:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8001ba8:	61fb      	str	r3, [r7, #28]
    uint32_t max_index_second = params.second_left_strobe;
 8001baa:	4b4b      	ldr	r3, [pc, #300]	@ (8001cd8 <CalculateStrobeThickness+0x184>)
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8001bb0:	4b49      	ldr	r3, [pc, #292]	@ (8001cd8 <CalculateStrobeThickness+0x184>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e01c      	b.n	8001bf2 <CalculateStrobeThickness+0x9e>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_first) {
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d814      	bhi.n	8001bec <CalculateStrobeThickness+0x98>
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	d507      	bpl.n	8001bec <CalculateStrobeThickness+0x98>
            max_value_first = data[i];
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
            max_index_first = i;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	623b      	str	r3, [r7, #32]
    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	4b39      	ldr	r3, [pc, #228]	@ (8001cd8 <CalculateStrobeThickness+0x184>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d9dd      	bls.n	8001bb8 <CalculateStrobeThickness+0x64>
        }
    }

    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 8001bfc:	4b36      	ldr	r3, [pc, #216]	@ (8001cd8 <CalculateStrobeThickness+0x184>)
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	e01c      	b.n	8001c3e <CalculateStrobeThickness+0xea>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_second) {
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d814      	bhi.n	8001c38 <CalculateStrobeThickness+0xe4>
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	d507      	bpl.n	8001c38 <CalculateStrobeThickness+0xe4>
            max_value_second = data[i];
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	61fb      	str	r3, [r7, #28]
            max_index_second = i;
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b26      	ldr	r3, [pc, #152]	@ (8001cd8 <CalculateStrobeThickness+0x184>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d9dd      	bls.n	8001c04 <CalculateStrobeThickness+0xb0>
        }
    }

    if (max_value_first == -FLT_MAX || max_value_second == -FLT_MAX) {
 8001c48:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c4c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001ce8 <CalculateStrobeThickness+0x194>
 8001c50:	eef4 7a47 	vcmp.f32	s15, s14
 8001c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c58:	d008      	beq.n	8001c6c <CalculateStrobeThickness+0x118>
 8001c5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c5e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001ce8 <CalculateStrobeThickness+0x194>
 8001c62:	eef4 7a47 	vcmp.f32	s15, s14
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	d103      	bne.n	8001c74 <CalculateStrobeThickness+0x120>
        SendUSBDebugMessage("Strobe method: max values not found");
 8001c6c:	481f      	ldr	r0, [pc, #124]	@ (8001cec <CalculateStrobeThickness+0x198>)
 8001c6e:	f7ff fae1 	bl	8001234 <SendUSBDebugMessage>
        return;
 8001c72:	e02a      	b.n	8001cca <CalculateStrobeThickness+0x176>
    }

    uint32_t index_difference = max_index_second - max_index_first;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	60fb      	str	r3, [r7, #12]
    float thickness = index_difference / (2.0f * one_point_mm);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c86:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <CalculateStrobeThickness+0x190>)
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c94:	edc7 7a02 	vstr	s15, [r7, #8]

    snprintf(usb_msg, sizeof(usb_msg), "Strobe:%.3f\r\n", thickness);
 8001c98:	68b8      	ldr	r0, [r7, #8]
 8001c9a:	f7fe fc65 	bl	8000568 <__aeabi_f2d>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ca6:	4a12      	ldr	r2, [pc, #72]	@ (8001cf0 <CalculateStrobeThickness+0x19c>)
 8001ca8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cac:	4811      	ldr	r0, [pc, #68]	@ (8001cf4 <CalculateStrobeThickness+0x1a0>)
 8001cae:	f00b fab9 	bl	800d224 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001cb2:	4810      	ldr	r0, [pc, #64]	@ (8001cf4 <CalculateStrobeThickness+0x1a0>)
 8001cb4:	f7fe faec 	bl	8000290 <strlen>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480d      	ldr	r0, [pc, #52]	@ (8001cf4 <CalculateStrobeThickness+0x1a0>)
 8001cc0:	f008 fe52 	bl	800a968 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001cc4:	200a      	movs	r0, #10
 8001cc6:	f001 f87d 	bl	8002dc4 <HAL_Delay>
}
 8001cca:	3728      	adds	r7, #40	@ 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200094e8 	.word	0x200094e8
 8001cd4:	080103d8 	.word	0x080103d8
 8001cd8:	200094a8 	.word	0x200094a8
 8001cdc:	447a0000 	.word	0x447a0000
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	200094a0 	.word	0x200094a0
 8001ce8:	ff7fffff 	.word	0xff7fffff
 8001cec:	08010408 	.word	0x08010408
 8001cf0:	0801042c 	.word	0x0801042c
 8001cf4:	200003d8 	.word	0x200003d8

08001cf8 <CalculateAndSendACFThickness>:

/**
  * @brief Расчет толщины автокорреляционным методом и отправка результата по USB
  */
void CalculateAndSendACFThickness(void) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af02      	add	r7, sp, #8
    if (!parameters_initialized) {
 8001cfe:	4b27      	ldr	r3, [pc, #156]	@ (8001d9c <CalculateAndSendACFThickness+0xa4>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	f083 0301 	eor.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <CalculateAndSendACFThickness+0x1c>
        SendUSBDebugMessage("Parameters not initialized for ACF thickness calculation");
 8001d0c:	4824      	ldr	r0, [pc, #144]	@ (8001da0 <CalculateAndSendACFThickness+0xa8>)
 8001d0e:	f7ff fa91 	bl	8001234 <SendUSBDebugMessage>
        return;
 8001d12:	e03f      	b.n	8001d94 <CalculateAndSendACFThickness+0x9c>
    }

    one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency);
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <CalculateAndSendACFThickness+0xac>)
 8001d16:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d1a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001da8 <CalculateAndSendACFThickness+0xb0>
 8001d1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d22:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <CalculateAndSendACFThickness+0xb4>)
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d34:	4b1e      	ldr	r3, [pc, #120]	@ (8001db0 <CalculateAndSendACFThickness+0xb8>)
 8001d36:	edc3 7a00 	vstr	s15, [r3]
    max_index = FindMaxAutocorrelationIndex();
 8001d3a:	f7ff fdf7 	bl	800192c <FindMaxAutocorrelationIndex>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a1c      	ldr	r2, [pc, #112]	@ (8001db4 <CalculateAndSendACFThickness+0xbc>)
 8001d42:	6013      	str	r3, [r2, #0]
    float thickness = max_index / (2.0f * one_point_mm);
 8001d44:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <CalculateAndSendACFThickness+0xbc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	ee07 3a90 	vmov	s15, r3
 8001d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d50:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <CalculateAndSendACFThickness+0xb8>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d5e:	edc7 7a01 	vstr	s15, [r7, #4]

    snprintf(usb_msg, sizeof(usb_msg), "ACF:%.3f\r\n", thickness);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe fc00 	bl	8000568 <__aeabi_f2d>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	e9cd 2300 	strd	r2, r3, [sp]
 8001d70:	4a11      	ldr	r2, [pc, #68]	@ (8001db8 <CalculateAndSendACFThickness+0xc0>)
 8001d72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d76:	4811      	ldr	r0, [pc, #68]	@ (8001dbc <CalculateAndSendACFThickness+0xc4>)
 8001d78:	f00b fa54 	bl	800d224 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001d7c:	480f      	ldr	r0, [pc, #60]	@ (8001dbc <CalculateAndSendACFThickness+0xc4>)
 8001d7e:	f7fe fa87 	bl	8000290 <strlen>
 8001d82:	4603      	mov	r3, r0
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	4619      	mov	r1, r3
 8001d88:	480c      	ldr	r0, [pc, #48]	@ (8001dbc <CalculateAndSendACFThickness+0xc4>)
 8001d8a:	f008 fded 	bl	800a968 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001d8e:	200a      	movs	r0, #10
 8001d90:	f001 f818 	bl	8002dc4 <HAL_Delay>
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200094e8 	.word	0x200094e8
 8001da0:	0801043c 	.word	0x0801043c
 8001da4:	200094a8 	.word	0x200094a8
 8001da8:	447a0000 	.word	0x447a0000
 8001dac:	20000000 	.word	0x20000000
 8001db0:	200094a0 	.word	0x200094a0
 8001db4:	200094a4 	.word	0x200094a4
 8001db8:	08010478 	.word	0x08010478
 8001dbc:	200003d8 	.word	0x200003d8

08001dc0 <PrintMeasurementDataToUSB>:

void PrintMeasurementDataToUSB(void) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0a8      	sub	sp, #160	@ 0xa0
 8001dc4:	af02      	add	r7, sp, #8
    snprintf(usb_msg, sizeof(usb_msg), "Autocorrelation Result [0-%d]:\r\n", DATA_VALUES_COUNT-1);
 8001dc6:	f241 13f7 	movw	r3, #4599	@ 0x11f7
 8001dca:	4a41      	ldr	r2, [pc, #260]	@ (8001ed0 <PrintMeasurementDataToUSB+0x110>)
 8001dcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dd0:	4840      	ldr	r0, [pc, #256]	@ (8001ed4 <PrintMeasurementDataToUSB+0x114>)
 8001dd2:	f00b fa27 	bl	800d224 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001dd6:	483f      	ldr	r0, [pc, #252]	@ (8001ed4 <PrintMeasurementDataToUSB+0x114>)
 8001dd8:	f7fe fa5a 	bl	8000290 <strlen>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4619      	mov	r1, r3
 8001de2:	483c      	ldr	r0, [pc, #240]	@ (8001ed4 <PrintMeasurementDataToUSB+0x114>)
 8001de4:	f008 fdc0 	bl	800a968 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001de8:	200a      	movs	r0, #10
 8001dea:	f000 ffeb 	bl	8002dc4 <HAL_Delay>

    char data_line[128] = "";
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	2280      	movs	r2, #128	@ 0x80
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f00b faaf 	bl	800d35a <memset>
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e02:	e05a      	b.n	8001eba <PrintMeasurementDataToUSB+0xfa>
        char val_str[16];
        snprintf(val_str, sizeof(val_str), "%7.2f ", autocorrelation_result[i]);
 8001e04:	4a34      	ldr	r2, [pc, #208]	@ (8001ed8 <PrintMeasurementDataToUSB+0x118>)
 8001e06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fba9 	bl	8000568 <__aeabi_f2d>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	1d38      	adds	r0, r7, #4
 8001e1c:	e9cd 2300 	strd	r2, r3, [sp]
 8001e20:	4a2e      	ldr	r2, [pc, #184]	@ (8001edc <PrintMeasurementDataToUSB+0x11c>)
 8001e22:	2110      	movs	r1, #16
 8001e24:	f00b f9fe 	bl	800d224 <sniprintf>
        strncat(data_line, val_str, sizeof(data_line) - strlen(data_line) - 1);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fa2f 	bl	8000290 <strlen>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8001e38:	1d39      	adds	r1, r7, #4
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f00b faa0 	bl	800d384 <strncat>

        if ((i+1) % VALUES_PER_LINE == 0 || i == DATA_VALUES_COUNT-1) {
 8001e44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e48:	1c59      	adds	r1, r3, #1
 8001e4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <PrintMeasurementDataToUSB+0x120>)
 8001e4c:	fb83 2301 	smull	r2, r3, r3, r1
 8001e50:	109a      	asrs	r2, r3, #2
 8001e52:	17cb      	asrs	r3, r1, #31
 8001e54:	1ad2      	subs	r2, r2, r3
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	1aca      	subs	r2, r1, r3
 8001e60:	2a00      	cmp	r2, #0
 8001e62:	d005      	beq.n	8001e70 <PrintMeasurementDataToUSB+0xb0>
 8001e64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e68:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d11f      	bne.n	8001eb0 <PrintMeasurementDataToUSB+0xf0>
            strncat(data_line, "\r\n", sizeof(data_line) - strlen(data_line) - 1);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fa0b 	bl	8000290 <strlen>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4917      	ldr	r1, [pc, #92]	@ (8001ee4 <PrintMeasurementDataToUSB+0x124>)
 8001e86:	4618      	mov	r0, r3
 8001e88:	f00b fa7c 	bl	800d384 <strncat>
            CDC_Transmit_FS((uint8_t*)data_line, strlen(data_line));
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe f9fd 	bl	8000290 <strlen>
 8001e96:	4603      	mov	r3, r0
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f008 fd61 	bl	800a968 <CDC_Transmit_FS>
            HAL_Delay(10);
 8001ea6:	200a      	movs	r0, #10
 8001ea8:	f000 ff8c 	bl	8002dc4 <HAL_Delay>
            data_line[0] = '\0';
 8001eac:	2300      	movs	r3, #0
 8001eae:	753b      	strb	r3, [r7, #20]
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 8001eb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001eba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ebe:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	dd9e      	ble.n	8001e04 <PrintMeasurementDataToUSB+0x44>
        }
    }
}
 8001ec6:	bf00      	nop
 8001ec8:	bf00      	nop
 8001eca:	3798      	adds	r7, #152	@ 0x98
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	08010484 	.word	0x08010484
 8001ed4:	200003d8 	.word	0x200003d8
 8001ed8:	20004cb8 	.word	0x20004cb8
 8001edc:	080104a8 	.word	0x080104a8
 8001ee0:	66666667 	.word	0x66666667
 8001ee4:	080104b0 	.word	0x080104b0

08001ee8 <CheckThreshold>:

/**
  * @brief Проверка данных на превышение threshold
  * @return true если данные НЕ превышают порог, false если превышают
  */
bool CheckThreshold(const float32_t* data, uint32_t size) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
    if (!parameters_initialized) {
 8001ef2:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <CheckThreshold+0x64>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	f083 0301 	eor.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <CheckThreshold+0x22>
        SendUSBDebugMessage("Threshold parameter not initialized");
 8001f00:	4813      	ldr	r0, [pc, #76]	@ (8001f50 <CheckThreshold+0x68>)
 8001f02:	f7ff f997 	bl	8001234 <SendUSBDebugMessage>
        return false; // Не пропускаем обработку если параметры не инициализированы
 8001f06:	2300      	movs	r3, #0
 8001f08:	e01c      	b.n	8001f44 <CheckThreshold+0x5c>
    }

    for (uint32_t i = 0; i < size; i++) {
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e014      	b.n	8001f3a <CheckThreshold+0x52>
        if (fabsf(data[i]) > params.threshold) {
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001f20:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <CheckThreshold+0x6c>)
 8001f22:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2e:	dd01      	ble.n	8001f34 <CheckThreshold+0x4c>
            return false; // Обнаружено превышение порога
 8001f30:	2300      	movs	r3, #0
 8001f32:	e007      	b.n	8001f44 <CheckThreshold+0x5c>
    for (uint32_t i = 0; i < size; i++) {
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3301      	adds	r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d3e6      	bcc.n	8001f10 <CheckThreshold+0x28>
        }
    }
    return true; // Все данные ниже порога
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200094e8 	.word	0x200094e8
 8001f50:	080104b4 	.word	0x080104b4
 8001f54:	200094a8 	.word	0x200094a8

08001f58 <AddRandomNoiseAndExtend>:

/**
  * @brief Добавление случайного шума и расширение массива до 10000 точек
  */
void AddRandomNoiseAndExtend(const float32_t* src, float32_t* dest, uint32_t dest_size) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
    // Копируем исходные данные с небольшим случайным шумом
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	e02a      	b.n	8001fc0 <AddRandomNoiseAndExtend+0x68>
        float noise = (rand() % 100 - 50) / 100.0f; // Случайный шум ±0.5
 8001f6a:	f009 fb5b 	bl	800b624 <rand>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <AddRandomNoiseAndExtend+0xd0>)
 8001f72:	fb83 1302 	smull	r1, r3, r3, r2
 8001f76:	1159      	asrs	r1, r3, #5
 8001f78:	17d3      	asrs	r3, r2, #31
 8001f7a:	1acb      	subs	r3, r1, r3
 8001f7c:	2164      	movs	r1, #100	@ 0x64
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	3b32      	subs	r3, #50	@ 0x32
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800202c <AddRandomNoiseAndExtend+0xd4>
 8001f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f96:	edc7 7a05 	vstr	s15, [r7, #20]
        dest[i] = src[i] + noise;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	ed93 7a00 	vldr	s14, [r3]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	4413      	add	r3, r2
 8001fae:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb6:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d9cf      	bls.n	8001f6a <AddRandomNoiseAndExtend+0x12>
    }

    // Дополняем массив до 10000 точек случайными колебаниям
    for (uint32_t i = DATA_VALUES_COUNT; i < dest_size; i++) {
 8001fca:	f241 13f8 	movw	r3, #4600	@ 0x11f8
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	e020      	b.n	8002014 <AddRandomNoiseAndExtend+0xbc>
        dest[i] = (rand() % 2000 - 1000) / 10.0f; // Случайные значения в диапазоне ±100
 8001fd2:	f009 fb27 	bl	800b624 <rand>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <AddRandomNoiseAndExtend+0xd8>)
 8001fda:	fb83 1302 	smull	r1, r3, r3, r2
 8001fde:	11d9      	asrs	r1, r3, #7
 8001fe0:	17d3      	asrs	r3, r2, #31
 8001fe2:	1acb      	subs	r3, r1, r3
 8001fe4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	4413      	add	r3, r2
 8002002:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002006:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800200a:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = DATA_VALUES_COUNT; i < dest_size; i++) {
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	3301      	adds	r3, #1
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	d3da      	bcc.n	8001fd2 <AddRandomNoiseAndExtend+0x7a>
    }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	51eb851f 	.word	0x51eb851f
 800202c:	42c80000 	.word	0x42c80000
 8002030:	10624dd3 	.word	0x10624dd3

08002034 <ProcessCycle>:
/**
  * @brief Обработка одного цикла
  * @param cycle_num Номер текущего цикла
  * @return true если цикл прошел проверку порога, false если нет
  */
bool ProcessCycle(uint32_t cycle_num) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
    // Добавляем шум и расширяем данные
    AddRandomNoiseAndExtend(measurement_data, temp_data, FINAL_DATA_SIZE);
 800203c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002040:	4941      	ldr	r1, [pc, #260]	@ (8002148 <ProcessCycle+0x114>)
 8002042:	4842      	ldr	r0, [pc, #264]	@ (800214c <ProcessCycle+0x118>)
 8002044:	f7ff ff88 	bl	8001f58 <AddRandomNoiseAndExtend>

    // Применяем коэффициент усиления
    if (params.gain != 1.0f) {
 8002048:	4b41      	ldr	r3, [pc, #260]	@ (8002150 <ProcessCycle+0x11c>)
 800204a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800204e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002052:	eef4 7a47 	vcmp.f32	s15, s14
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	d00a      	beq.n	8002072 <ProcessCycle+0x3e>
        arm_scale_f32(temp_data, params.gain, temp_data, FINAL_DATA_SIZE);
 800205c:	4b3c      	ldr	r3, [pc, #240]	@ (8002150 <ProcessCycle+0x11c>)
 800205e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002062:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002066:	4938      	ldr	r1, [pc, #224]	@ (8002148 <ProcessCycle+0x114>)
 8002068:	eeb0 0a67 	vmov.f32	s0, s15
 800206c:	4836      	ldr	r0, [pc, #216]	@ (8002148 <ProcessCycle+0x114>)
 800206e:	f009 f969 	bl	800b344 <arm_scale_f32>
    }

    // Проверяем порог - функция возвращает true если НЕ превысило порог
    bool below_threshold = CheckThreshold(temp_data, FINAL_DATA_SIZE);
 8002072:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002076:	4834      	ldr	r0, [pc, #208]	@ (8002148 <ProcessCycle+0x114>)
 8002078:	f7ff ff36 	bl	8001ee8 <CheckThreshold>
 800207c:	4603      	mov	r3, r0
 800207e:	72fb      	strb	r3, [r7, #11]

    // Отправляем статус цикла по USB (английский текст)
    if (below_threshold) {
 8002080:	7afb      	ldrb	r3, [r7, #11]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d047      	beq.n	8002116 <ProcessCycle+0xe2>
        snprintf(usb_msg, sizeof(usb_msg), "Cycle:%lu - threshold NOT exceeded, data added to averaged array\r\n", cycle_num);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a32      	ldr	r2, [pc, #200]	@ (8002154 <ProcessCycle+0x120>)
 800208a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800208e:	4832      	ldr	r0, [pc, #200]	@ (8002158 <ProcessCycle+0x124>)
 8002090:	f00b f8c8 	bl	800d224 <sniprintf>

        if (successful_cycles == 0) {
 8002094:	4b31      	ldr	r3, [pc, #196]	@ (800215c <ProcessCycle+0x128>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d106      	bne.n	80020aa <ProcessCycle+0x76>
            // Первый успешный цикл - просто копируем данные
            arm_copy_f32(temp_data, final_data, FINAL_DATA_SIZE);
 800209c:	f242 7210 	movw	r2, #10000	@ 0x2710
 80020a0:	492f      	ldr	r1, [pc, #188]	@ (8002160 <ProcessCycle+0x12c>)
 80020a2:	4829      	ldr	r0, [pc, #164]	@ (8002148 <ProcessCycle+0x114>)
 80020a4:	f009 f8bc 	bl	800b220 <arm_copy_f32>
 80020a8:	e02f      	b.n	800210a <ProcessCycle+0xd6>
        } else {
            // Усредняем с предыдущими успешными данными
            for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e027      	b.n	8002100 <ProcessCycle+0xcc>
                final_data[i] = (final_data[i] * successful_cycles + temp_data[i]) / (successful_cycles + 1);
 80020b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002160 <ProcessCycle+0x12c>)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	ed93 7a00 	vldr	s14, [r3]
 80020bc:	4b27      	ldr	r3, [pc, #156]	@ (800215c <ProcessCycle+0x128>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002148 <ProcessCycle+0x114>)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	edd3 7a00 	vldr	s15, [r3]
 80020d8:	ee77 6a27 	vadd.f32	s13, s14, s15
 80020dc:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <ProcessCycle+0x128>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002160 <ProcessCycle+0x12c>)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	edc3 7a00 	vstr	s15, [r3]
            for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3301      	adds	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002106:	4293      	cmp	r3, r2
 8002108:	d9d2      	bls.n	80020b0 <ProcessCycle+0x7c>
            }
        }
        successful_cycles++;
 800210a:	4b14      	ldr	r3, [pc, #80]	@ (800215c <ProcessCycle+0x128>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	4a12      	ldr	r2, [pc, #72]	@ (800215c <ProcessCycle+0x128>)
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e006      	b.n	8002124 <ProcessCycle+0xf0>
    } else {
        snprintf(usb_msg, sizeof(usb_msg), "Cycle:%lu - THRESHOLD EXCEEDED! Array skipped\r\n", cycle_num);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a12      	ldr	r2, [pc, #72]	@ (8002164 <ProcessCycle+0x130>)
 800211a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800211e:	480e      	ldr	r0, [pc, #56]	@ (8002158 <ProcessCycle+0x124>)
 8002120:	f00b f880 	bl	800d224 <sniprintf>
    }

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8002124:	480c      	ldr	r0, [pc, #48]	@ (8002158 <ProcessCycle+0x124>)
 8002126:	f7fe f8b3 	bl	8000290 <strlen>
 800212a:	4603      	mov	r3, r0
 800212c:	b29b      	uxth	r3, r3
 800212e:	4619      	mov	r1, r3
 8002130:	4809      	ldr	r0, [pc, #36]	@ (8002158 <ProcessCycle+0x124>)
 8002132:	f008 fc19 	bl	800a968 <CDC_Transmit_FS>
    HAL_Delay(10);
 8002136:	200a      	movs	r0, #10
 8002138:	f000 fe44 	bl	8002dc4 <HAL_Delay>

    return below_threshold;
 800213c:	7afb      	ldrb	r3, [r7, #11]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20009504 	.word	0x20009504
 800214c:	080106c8 	.word	0x080106c8
 8002150:	200094a8 	.word	0x200094a8
 8002154:	080104d8 	.word	0x080104d8
 8002158:	200003d8 	.word	0x200003d8
 800215c:	2001cd84 	.word	0x2001cd84
 8002160:	20013144 	.word	0x20013144
 8002164:	0801051c 	.word	0x0801051c

08002168 <ProcessDataByMethod>:

/**
  * @brief Обработка данных в зависимости от выбранного метода
  */
void ProcessDataByMethod(void) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af02      	add	r7, sp, #8
    if (!parameters_initialized) {
 800216e:	4b37      	ldr	r3, [pc, #220]	@ (800224c <ProcessDataByMethod+0xe4>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	f083 0301 	eor.w	r3, r3, #1
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <ProcessDataByMethod+0x1c>
        SendUSBDebugMessage("Parameters not initialized");
 800217c:	4834      	ldr	r0, [pc, #208]	@ (8002250 <ProcessDataByMethod+0xe8>)
 800217e:	f7ff f859 	bl	8001234 <SendUSBDebugMessage>
        return;
 8002182:	e060      	b.n	8002246 <ProcessDataByMethod+0xde>
    }

    // Добавляем информацию о сенсоре в отладочное сообщение
    snprintf(usb_msg, sizeof(usb_msg), "Processing data for sensor: %s, gain: %.1f", params.sensor_number, params.gain);
 8002184:	4b33      	ldr	r3, [pc, #204]	@ (8002254 <ProcessDataByMethod+0xec>)
 8002186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe f9ed 	bl	8000568 <__aeabi_f2d>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	e9cd 2300 	strd	r2, r3, [sp]
 8002196:	4b30      	ldr	r3, [pc, #192]	@ (8002258 <ProcessDataByMethod+0xf0>)
 8002198:	4a30      	ldr	r2, [pc, #192]	@ (800225c <ProcessDataByMethod+0xf4>)
 800219a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800219e:	4830      	ldr	r0, [pc, #192]	@ (8002260 <ProcessDataByMethod+0xf8>)
 80021a0:	f00b f840 	bl	800d224 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80021a4:	482e      	ldr	r0, [pc, #184]	@ (8002260 <ProcessDataByMethod+0xf8>)
 80021a6:	f7fe f873 	bl	8000290 <strlen>
 80021aa:	4603      	mov	r3, r0
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	4619      	mov	r1, r3
 80021b0:	482b      	ldr	r0, [pc, #172]	@ (8002260 <ProcessDataByMethod+0xf8>)
 80021b2:	f008 fbd9 	bl	800a968 <CDC_Transmit_FS>
    HAL_Delay(10);
 80021b6:	200a      	movs	r0, #10
 80021b8:	f000 fe04 	bl	8002dc4 <HAL_Delay>

    // Сбрасываем счетчик успешных циклов
    successful_cycles = 0;
 80021bc:	4b29      	ldr	r3, [pc, #164]	@ (8002264 <ProcessDataByMethod+0xfc>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]

    // Выполняем указанное количество циклов
    for (uint32_t cycle = 1; cycle <= params.cycle_number; cycle++) {
 80021c2:	2301      	movs	r3, #1
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	e008      	b.n	80021da <ProcessDataByMethod+0x72>
        ProcessCycle(cycle);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff33 	bl	8002034 <ProcessCycle>
        HAL_Delay(10); // Небольшая задержка между циклами
 80021ce:	200a      	movs	r0, #10
 80021d0:	f000 fdf8 	bl	8002dc4 <HAL_Delay>
    for (uint32_t cycle = 1; cycle <= params.cycle_number; cycle++) {
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3301      	adds	r3, #1
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	4b1e      	ldr	r3, [pc, #120]	@ (8002254 <ProcessDataByMethod+0xec>)
 80021dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d9f1      	bls.n	80021c8 <ProcessDataByMethod+0x60>
    }

    if (successful_cycles == 0) {
 80021e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <ProcessDataByMethod+0xfc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d103      	bne.n	80021f4 <ProcessDataByMethod+0x8c>
        SendUSBDebugMessage("Ни один цикл не прошел проверку порога");
 80021ec:	481e      	ldr	r0, [pc, #120]	@ (8002268 <ProcessDataByMethod+0x100>)
 80021ee:	f7ff f821 	bl	8001234 <SendUSBDebugMessage>
        return;
 80021f2:	e028      	b.n	8002246 <ProcessDataByMethod+0xde>
    }

    SendUSBDebugMessage("Усреднение завершено, начинаем расчет толщины");
 80021f4:	481d      	ldr	r0, [pc, #116]	@ (800226c <ProcessDataByMethod+0x104>)
 80021f6:	f7ff f81d 	bl	8001234 <SendUSBDebugMessage>

    // Используем усредненные данные для расчета толщины
    switch (params.method) {
 80021fa:	4b16      	ldr	r3, [pc, #88]	@ (8002254 <ProcessDataByMethod+0xec>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d019      	beq.n	8002236 <ProcessDataByMethod+0xce>
 8002202:	2b02      	cmp	r3, #2
 8002204:	d81b      	bhi.n	800223e <ProcessDataByMethod+0xd6>
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <ProcessDataByMethod+0xa8>
 800220a:	2b01      	cmp	r3, #1
 800220c:	d00f      	beq.n	800222e <ProcessDataByMethod+0xc6>
 800220e:	e016      	b.n	800223e <ProcessDataByMethod+0xd6>
        case 0: // Автокорреляционный метод
            // Копируем и нормализуем данные для АКФ
            arm_copy_f32(final_data, normalized_data, DATA_VALUES_COUNT);
 8002210:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8002214:	4916      	ldr	r1, [pc, #88]	@ (8002270 <ProcessDataByMethod+0x108>)
 8002216:	4817      	ldr	r0, [pc, #92]	@ (8002274 <ProcessDataByMethod+0x10c>)
 8002218:	f009 f802 	bl	800b220 <arm_copy_f32>
            NormalizeData();
 800221c:	f7ff fac8 	bl	80017b0 <NormalizeData>
            CalculateAutocorrelation();
 8002220:	f7ff fb1a 	bl	8001858 <CalculateAutocorrelation>
            CalculateAndSendACFThickness();
 8002224:	f7ff fd68 	bl	8001cf8 <CalculateAndSendACFThickness>
            PrintMeasurementDataToUSB();
 8002228:	f7ff fdca 	bl	8001dc0 <PrintMeasurementDataToUSB>
            break;
 800222c:	e00b      	b.n	8002246 <ProcessDataByMethod+0xde>

        case 1: // Только метод перехода через ноль
            CalculateZeroCrossingThickness(final_data);
 800222e:	4811      	ldr	r0, [pc, #68]	@ (8002274 <ProcessDataByMethod+0x10c>)
 8002230:	f7ff fbc6 	bl	80019c0 <CalculateZeroCrossingThickness>
            break;
 8002234:	e007      	b.n	8002246 <ProcessDataByMethod+0xde>

        case 2: // Только метод по стробам
            CalculateStrobeThickness(final_data);
 8002236:	480f      	ldr	r0, [pc, #60]	@ (8002274 <ProcessDataByMethod+0x10c>)
 8002238:	f7ff fc8c 	bl	8001b54 <CalculateStrobeThickness>
            break;
 800223c:	e003      	b.n	8002246 <ProcessDataByMethod+0xde>

        default:
            SendUSBDebugMessage("Unknown method specified");
 800223e:	480e      	ldr	r0, [pc, #56]	@ (8002278 <ProcessDataByMethod+0x110>)
 8002240:	f7fe fff8 	bl	8001234 <SendUSBDebugMessage>
            break;
 8002244:	bf00      	nop
    }
}
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200094e8 	.word	0x200094e8
 8002250:	0801054c 	.word	0x0801054c
 8002254:	200094a8 	.word	0x200094a8
 8002258:	200094d8 	.word	0x200094d8
 800225c:	08010568 	.word	0x08010568
 8002260:	200003d8 	.word	0x200003d8
 8002264:	2001cd84 	.word	0x2001cd84
 8002268:	08010594 	.word	0x08010594
 800226c:	080105dc 	.word	0x080105dc
 8002270:	200004d8 	.word	0x200004d8
 8002274:	20013144 	.word	0x20013144
 8002278:	08010634 	.word	0x08010634

0800227c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8002280:	f000 fd2e 	bl	8002ce0 <HAL_Init>
  SystemClock_Config();
 8002284:	f000 f872 	bl	800236c <SystemClock_Config>
  MX_GPIO_Init();
 8002288:	f000 f97c 	bl	8002584 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800228c:	f000 f950 	bl	8002530 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8002290:	f008 fa70 	bl	800a774 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 8002294:	f000 f8d4 	bl	8002440 <MX_DAC_Init>
  MX_TIM3_Init();
 8002298:	f000 f8fc 	bl	8002494 <MX_TIM3_Init>
  MX_FSMC_Init();
 800229c:	f000 fa32 	bl	8002704 <MX_FSMC_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80022a0:	4828      	ldr	r0, [pc, #160]	@ (8002344 <main+0xc8>)
 80022a2:	f003 fb05 	bl	80058b0 <HAL_TIM_Base_Start>
  srand(HAL_GetTick());
 80022a6:	f000 fd81 	bl	8002dac <HAL_GetTick>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f009 f98b 	bl	800b5c8 <srand>

  // Загружаем параметры из энергонезависимой памяти при старте
  HAL_Delay(1000);
 80022b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022b6:	f000 fd85 	bl	8002dc4 <HAL_Delay>
  LoadParametersFromFlash();
 80022ba:	f7fe fef9 	bl	80010b0 <LoadParametersFromFlash>
  HAL_Delay(1000);
 80022be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022c2:	f000 fd7f 	bl	8002dc4 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
      if (new_data_received) {
 80022c6:	4b20      	ldr	r3, [pc, #128]	@ (8002348 <main+0xcc>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d025      	beq.n	800231c <main+0xa0>
          // Проверяем, является ли сообщение командой SETPARAMS
          if (strncmp((char*)usb_rx_buffer, "SETPARAMS=", 10) == 0) {
 80022d0:	220a      	movs	r2, #10
 80022d2:	491e      	ldr	r1, [pc, #120]	@ (800234c <main+0xd0>)
 80022d4:	481e      	ldr	r0, [pc, #120]	@ (8002350 <main+0xd4>)
 80022d6:	f00b f868 	bl	800d3aa <strncmp>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <main+0x72>
              // Парсим параметры
              ParseParameters((char*)usb_rx_buffer + 10);
 80022e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002354 <main+0xd8>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe ffca 	bl	800127c <ParseParameters>

              // Отправляем подтверждение с текущими значениями
              SendParametersResponse();
 80022e8:	f7ff f990 	bl	800160c <SendParametersResponse>
 80022ec:	e00a      	b.n	8002304 <main+0x88>
          }
          else if (strncmp((char*)usb_rx_buffer, "1", 1) == 0) {
 80022ee:	4b18      	ldr	r3, [pc, #96]	@ (8002350 <main+0xd4>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <main+0xdc>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <main+0x88>
              // Обработка команды "1"
              ProcessUSBCommand('1');
 80022fe:	2031      	movs	r0, #49	@ 0x31
 8002300:	f7ff fa40 	bl	8001784 <ProcessUSBCommand>
          }
          // Сбрасываем буфер и флаг
          memset((void*)usb_rx_buffer, 0, USB_RX_BUFFER_SIZE);
 8002304:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002308:	2100      	movs	r1, #0
 800230a:	4811      	ldr	r0, [pc, #68]	@ (8002350 <main+0xd4>)
 800230c:	f00b f825 	bl	800d35a <memset>
          usb_rx_index = 0;
 8002310:	4b12      	ldr	r3, [pc, #72]	@ (800235c <main+0xe0>)
 8002312:	2200      	movs	r2, #0
 8002314:	801a      	strh	r2, [r3, #0]
          new_data_received = 0;
 8002316:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <main+0xcc>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
      }

      // Проверяем, нужно ли выполнить расчет толщин
      if (calculate_thickness_requested && parameters_initialized) {
 800231c:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <main+0xe4>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <main+0xc0>
 8002324:	4b0f      	ldr	r3, [pc, #60]	@ (8002364 <main+0xe8>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <main+0xc0>
          calculate_thickness_requested = false; // Сбрасываем флаг
 800232c:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <main+0xe4>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]

          // Обрабатываем данные с учетом циклов
          ProcessDataByMethod();
 8002332:	f7ff ff19 	bl	8002168 <ProcessDataByMethod>
          SendUSBDebugMessage("Thickness calculation completed");
 8002336:	480c      	ldr	r0, [pc, #48]	@ (8002368 <main+0xec>)
 8002338:	f7fe ff7c 	bl	8001234 <SendUSBDebugMessage>
      }

      HAL_Delay(100);
 800233c:	2064      	movs	r0, #100	@ 0x64
 800233e:	f000 fd41 	bl	8002dc4 <HAL_Delay>
      if (new_data_received) {
 8002342:	e7c0      	b.n	80022c6 <main+0x4a>
 8002344:	200002f8 	.word	0x200002f8
 8002348:	2001d1c2 	.word	0x2001d1c2
 800234c:	08010650 	.word	0x08010650
 8002350:	2001d094 	.word	0x2001d094
 8002354:	2001d09e 	.word	0x2001d09e
 8002358:	0801065c 	.word	0x0801065c
 800235c:	2001d1c0 	.word	0x2001d1c0
 8002360:	200094e9 	.word	0x200094e9
 8002364:	200094e8 	.word	0x200094e8
 8002368:	08010660 	.word	0x08010660

0800236c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b094      	sub	sp, #80	@ 0x50
 8002370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002372:	f107 0320 	add.w	r3, r7, #32
 8002376:	2230      	movs	r2, #48	@ 0x30
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f00a ffed 	bl	800d35a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	4b28      	ldr	r3, [pc, #160]	@ (8002438 <SystemClock_Config+0xcc>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	4a27      	ldr	r2, [pc, #156]	@ (8002438 <SystemClock_Config+0xcc>)
 800239a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239e:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a0:	4b25      	ldr	r3, [pc, #148]	@ (8002438 <SystemClock_Config+0xcc>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ac:	2300      	movs	r3, #0
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	4b22      	ldr	r3, [pc, #136]	@ (800243c <SystemClock_Config+0xd0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a21      	ldr	r2, [pc, #132]	@ (800243c <SystemClock_Config+0xd0>)
 80023b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b1f      	ldr	r3, [pc, #124]	@ (800243c <SystemClock_Config+0xd0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023c8:	2301      	movs	r3, #1
 80023ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d2:	2302      	movs	r3, #2
 80023d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023dc:	2308      	movs	r3, #8
 80023de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80023e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023e6:	2302      	movs	r3, #2
 80023e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023ea:	2307      	movs	r3, #7
 80023ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ee:	f107 0320 	add.w	r3, r7, #32
 80023f2:	4618      	mov	r0, r3
 80023f4:	f002 fd2c 	bl	8004e50 <HAL_RCC_OscConfig>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80023fe:	f000 f9e1 	bl	80027c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002402:	230f      	movs	r3, #15
 8002404:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002406:	2302      	movs	r3, #2
 8002408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800240e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002412:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002414:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002418:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800241a:	f107 030c 	add.w	r3, r7, #12
 800241e:	2105      	movs	r1, #5
 8002420:	4618      	mov	r0, r3
 8002422:	f002 ff8d 	bl	8005340 <HAL_RCC_ClockConfig>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800242c:	f000 f9ca 	bl	80027c4 <Error_Handler>
  }
}
 8002430:	bf00      	nop
 8002432:	3750      	adds	r7, #80	@ 0x50
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	40007000 	.word	0x40007000

08002440 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002446:	463b      	mov	r3, r7
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800244e:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <MX_DAC_Init+0x4c>)
 8002450:	4a0f      	ldr	r2, [pc, #60]	@ (8002490 <MX_DAC_Init+0x50>)
 8002452:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002454:	480d      	ldr	r0, [pc, #52]	@ (800248c <MX_DAC_Init+0x4c>)
 8002456:	f000 fdea 	bl	800302e <HAL_DAC_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002460:	f000 f9b0 	bl	80027c4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002464:	2300      	movs	r3, #0
 8002466:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800246c:	463b      	mov	r3, r7
 800246e:	2200      	movs	r2, #0
 8002470:	4619      	mov	r1, r3
 8002472:	4806      	ldr	r0, [pc, #24]	@ (800248c <MX_DAC_Init+0x4c>)
 8002474:	f000 fdfd 	bl	8003072 <HAL_DAC_ConfigChannel>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800247e:	f000 f9a1 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200002e4 	.word	0x200002e4
 8002490:	40007400 	.word	0x40007400

08002494 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249a:	f107 0308 	add.w	r3, r7, #8
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a8:	463b      	mov	r3, r7
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <MX_TIM3_Init+0x94>)
 80024b2:	4a1e      	ldr	r2, [pc, #120]	@ (800252c <MX_TIM3_Init+0x98>)
 80024b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80024b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002528 <MX_TIM3_Init+0x94>)
 80024b8:	22a7      	movs	r2, #167	@ 0xa7
 80024ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <MX_TIM3_Init+0x94>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024c2:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <MX_TIM3_Init+0x94>)
 80024c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ca:	4b17      	ldr	r3, [pc, #92]	@ (8002528 <MX_TIM3_Init+0x94>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024d0:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <MX_TIM3_Init+0x94>)
 80024d2:	2280      	movs	r2, #128	@ 0x80
 80024d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024d6:	4814      	ldr	r0, [pc, #80]	@ (8002528 <MX_TIM3_Init+0x94>)
 80024d8:	f003 f99a 	bl	8005810 <HAL_TIM_Base_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80024e2:	f000 f96f 	bl	80027c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024ec:	f107 0308 	add.w	r3, r7, #8
 80024f0:	4619      	mov	r1, r3
 80024f2:	480d      	ldr	r0, [pc, #52]	@ (8002528 <MX_TIM3_Init+0x94>)
 80024f4:	f003 fb34 	bl	8005b60 <HAL_TIM_ConfigClockSource>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80024fe:	f000 f961 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800250a:	463b      	mov	r3, r7
 800250c:	4619      	mov	r1, r3
 800250e:	4806      	ldr	r0, [pc, #24]	@ (8002528 <MX_TIM3_Init+0x94>)
 8002510:	f003 fd60 	bl	8005fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800251a:	f000 f953 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200002f8 	.word	0x200002f8
 800252c:	40000400 	.word	0x40000400

08002530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002534:	4b11      	ldr	r3, [pc, #68]	@ (800257c <MX_USART1_UART_Init+0x4c>)
 8002536:	4a12      	ldr	r2, [pc, #72]	@ (8002580 <MX_USART1_UART_Init+0x50>)
 8002538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800253a:	4b10      	ldr	r3, [pc, #64]	@ (800257c <MX_USART1_UART_Init+0x4c>)
 800253c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002542:	4b0e      	ldr	r3, [pc, #56]	@ (800257c <MX_USART1_UART_Init+0x4c>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002548:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <MX_USART1_UART_Init+0x4c>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <MX_USART1_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002554:	4b09      	ldr	r3, [pc, #36]	@ (800257c <MX_USART1_UART_Init+0x4c>)
 8002556:	220c      	movs	r2, #12
 8002558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800255a:	4b08      	ldr	r3, [pc, #32]	@ (800257c <MX_USART1_UART_Init+0x4c>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <MX_USART1_UART_Init+0x4c>)
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	@ (800257c <MX_USART1_UART_Init+0x4c>)
 8002568:	f003 fdc4 	bl	80060f4 <HAL_UART_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002572:	f000 f927 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000340 	.word	0x20000340
 8002580:	40011000 	.word	0x40011000

08002584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08c      	sub	sp, #48	@ 0x30
 8002588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258a:	f107 031c 	add.w	r3, r7, #28
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
 8002598:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	4b54      	ldr	r3, [pc, #336]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	4a53      	ldr	r2, [pc, #332]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 80025a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025aa:	4b51      	ldr	r3, [pc, #324]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	4b4d      	ldr	r3, [pc, #308]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	4a4c      	ldr	r2, [pc, #304]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c6:	4b4a      	ldr	r3, [pc, #296]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	4b46      	ldr	r3, [pc, #280]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	4a45      	ldr	r2, [pc, #276]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 80025dc:	f043 0310 	orr.w	r3, r3, #16
 80025e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e2:	4b43      	ldr	r3, [pc, #268]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b3f      	ldr	r3, [pc, #252]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	4a3e      	ldr	r2, [pc, #248]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fe:	4b3c      	ldr	r3, [pc, #240]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	4b38      	ldr	r3, [pc, #224]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	4a37      	ldr	r2, [pc, #220]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	6313      	str	r3, [r2, #48]	@ 0x30
 800261a:	4b35      	ldr	r3, [pc, #212]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	4b31      	ldr	r3, [pc, #196]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	4a30      	ldr	r2, [pc, #192]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	6313      	str	r3, [r2, #48]	@ 0x30
 8002636:	4b2e      	ldr	r3, [pc, #184]	@ (80026f0 <MX_GPIO_Init+0x16c>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8002642:	2200      	movs	r2, #0
 8002644:	f248 0120 	movw	r1, #32800	@ 0x8020
 8002648:	482a      	ldr	r0, [pc, #168]	@ (80026f4 <MX_GPIO_Init+0x170>)
 800264a:	f001 f995 	bl	8003978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800264e:	2200      	movs	r2, #0
 8002650:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8002654:	4828      	ldr	r0, [pc, #160]	@ (80026f8 <MX_GPIO_Init+0x174>)
 8002656:	f001 f98f 	bl	8003978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 800265a:	2200      	movs	r2, #0
 800265c:	2140      	movs	r1, #64	@ 0x40
 800265e:	4827      	ldr	r0, [pc, #156]	@ (80026fc <MX_GPIO_Init+0x178>)
 8002660:	f001 f98a 	bl	8003978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002664:	2200      	movs	r2, #0
 8002666:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800266a:	4825      	ldr	r0, [pc, #148]	@ (8002700 <MX_GPIO_Init+0x17c>)
 800266c:	f001 f984 	bl	8003978 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8002670:	f248 0320 	movw	r3, #32800	@ 0x8020
 8002674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002676:	2301      	movs	r3, #1
 8002678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267e:	2300      	movs	r3, #0
 8002680:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 031c 	add.w	r3, r7, #28
 8002686:	4619      	mov	r1, r3
 8002688:	481a      	ldr	r0, [pc, #104]	@ (80026f4 <MX_GPIO_Init+0x170>)
 800268a:	f000 ffd9 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800268e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002694:	2301      	movs	r3, #1
 8002696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	4619      	mov	r1, r3
 80026a6:	4814      	ldr	r0, [pc, #80]	@ (80026f8 <MX_GPIO_Init+0x174>)
 80026a8:	f000 ffca 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026ac:	2340      	movs	r3, #64	@ 0x40
 80026ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b0:	2301      	movs	r3, #1
 80026b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026bc:	f107 031c 	add.w	r3, r7, #28
 80026c0:	4619      	mov	r1, r3
 80026c2:	480e      	ldr	r0, [pc, #56]	@ (80026fc <MX_GPIO_Init+0x178>)
 80026c4:	f000 ffbc 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ce:	2301      	movs	r3, #1
 80026d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2300      	movs	r3, #0
 80026d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	4619      	mov	r1, r3
 80026e0:	4807      	ldr	r0, [pc, #28]	@ (8002700 <MX_GPIO_Init+0x17c>)
 80026e2:	f000 ffad 	bl	8003640 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80026e6:	bf00      	nop
 80026e8:	3730      	adds	r7, #48	@ 0x30
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40020800 	.word	0x40020800
 80026fc:	40020c00 	.word	0x40020c00
 8002700:	40020400 	.word	0x40020400

08002704 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
 8002718:	615a      	str	r2, [r3, #20]
 800271a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800271c:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <MX_FSMC_Init+0xb8>)
 800271e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8002722:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002724:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <MX_FSMC_Init+0xb8>)
 8002726:	4a26      	ldr	r2, [pc, #152]	@ (80027c0 <MX_FSMC_Init+0xbc>)
 8002728:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800272a:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <MX_FSMC_Init+0xb8>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8002730:	4b22      	ldr	r3, [pc, #136]	@ (80027bc <MX_FSMC_Init+0xb8>)
 8002732:	2202      	movs	r2, #2
 8002734:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_PSRAM;
 8002736:	4b21      	ldr	r3, [pc, #132]	@ (80027bc <MX_FSMC_Init+0xb8>)
 8002738:	2204      	movs	r2, #4
 800273a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800273c:	4b1f      	ldr	r3, [pc, #124]	@ (80027bc <MX_FSMC_Init+0xb8>)
 800273e:	2210      	movs	r2, #16
 8002740:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002742:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <MX_FSMC_Init+0xb8>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002748:	4b1c      	ldr	r3, [pc, #112]	@ (80027bc <MX_FSMC_Init+0xb8>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800274e:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <MX_FSMC_Init+0xb8>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002754:	4b19      	ldr	r3, [pc, #100]	@ (80027bc <MX_FSMC_Init+0xb8>)
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800275a:	4b18      	ldr	r3, [pc, #96]	@ (80027bc <MX_FSMC_Init+0xb8>)
 800275c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002760:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002762:	4b16      	ldr	r3, [pc, #88]	@ (80027bc <MX_FSMC_Init+0xb8>)
 8002764:	2200      	movs	r2, #0
 8002766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002768:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <MX_FSMC_Init+0xb8>)
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800276e:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <MX_FSMC_Init+0xb8>)
 8002770:	2200      	movs	r2, #0
 8002772:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002774:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <MX_FSMC_Init+0xb8>)
 8002776:	2200      	movs	r2, #0
 8002778:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <MX_FSMC_Init+0xb8>)
 800277c:	2200      	movs	r2, #0
 800277e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002780:	230f      	movs	r3, #15
 8002782:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002784:	230f      	movs	r3, #15
 8002786:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002788:	23ff      	movs	r3, #255	@ 0xff
 800278a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800278c:	230f      	movs	r3, #15
 800278e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002790:	2310      	movs	r3, #16
 8002792:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002794:	2311      	movs	r3, #17
 8002796:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	2200      	movs	r2, #0
 80027a0:	4619      	mov	r1, r3
 80027a2:	4806      	ldr	r0, [pc, #24]	@ (80027bc <MX_FSMC_Init+0xb8>)
 80027a4:	f002 ffec 	bl	8005780 <HAL_SRAM_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80027ae:	f000 f809 	bl	80027c4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80027b2:	bf00      	nop
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000388 	.word	0x20000388
 80027c0:	a0000104 	.word	0xa0000104

080027c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <Error_Handler+0x4>

080027cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	4b10      	ldr	r3, [pc, #64]	@ (8002818 <HAL_MspInit+0x4c>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027da:	4a0f      	ldr	r2, [pc, #60]	@ (8002818 <HAL_MspInit+0x4c>)
 80027dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <HAL_MspInit+0x4c>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	603b      	str	r3, [r7, #0]
 80027f2:	4b09      	ldr	r3, [pc, #36]	@ (8002818 <HAL_MspInit+0x4c>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	4a08      	ldr	r2, [pc, #32]	@ (8002818 <HAL_MspInit+0x4c>)
 80027f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027fe:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <HAL_MspInit+0x4c>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800

0800281c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	@ 0x28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a17      	ldr	r2, [pc, #92]	@ (8002898 <HAL_DAC_MspInit+0x7c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d127      	bne.n	800288e <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	4b16      	ldr	r3, [pc, #88]	@ (800289c <HAL_DAC_MspInit+0x80>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	4a15      	ldr	r2, [pc, #84]	@ (800289c <HAL_DAC_MspInit+0x80>)
 8002848:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800284c:	6413      	str	r3, [r2, #64]	@ 0x40
 800284e:	4b13      	ldr	r3, [pc, #76]	@ (800289c <HAL_DAC_MspInit+0x80>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <HAL_DAC_MspInit+0x80>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	4a0e      	ldr	r2, [pc, #56]	@ (800289c <HAL_DAC_MspInit+0x80>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6313      	str	r3, [r2, #48]	@ 0x30
 800286a:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <HAL_DAC_MspInit+0x80>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002876:	2310      	movs	r3, #16
 8002878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800287a:	2303      	movs	r3, #3
 800287c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	4805      	ldr	r0, [pc, #20]	@ (80028a0 <HAL_DAC_MspInit+0x84>)
 800288a:	f000 fed9 	bl	8003640 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 800288e:	bf00      	nop
 8002890:	3728      	adds	r7, #40	@ 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40007400 	.word	0x40007400
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020000 	.word	0x40020000

080028a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0e      	ldr	r2, [pc, #56]	@ (80028ec <HAL_TIM_Base_MspInit+0x48>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d115      	bne.n	80028e2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b0d      	ldr	r3, [pc, #52]	@ (80028f0 <HAL_TIM_Base_MspInit+0x4c>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	4a0c      	ldr	r2, [pc, #48]	@ (80028f0 <HAL_TIM_Base_MspInit+0x4c>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <HAL_TIM_Base_MspInit+0x4c>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	201d      	movs	r0, #29
 80028d8:	f000 fb73 	bl	8002fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028dc:	201d      	movs	r0, #29
 80028de:	f000 fb8c 	bl	8002ffa <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40023800 	.word	0x40023800

080028f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	@ 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1d      	ldr	r2, [pc, #116]	@ (8002988 <HAL_UART_MspInit+0x94>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d133      	bne.n	800297e <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	4b1c      	ldr	r3, [pc, #112]	@ (800298c <HAL_UART_MspInit+0x98>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	4a1b      	ldr	r2, [pc, #108]	@ (800298c <HAL_UART_MspInit+0x98>)
 8002920:	f043 0310 	orr.w	r3, r3, #16
 8002924:	6453      	str	r3, [r2, #68]	@ 0x44
 8002926:	4b19      	ldr	r3, [pc, #100]	@ (800298c <HAL_UART_MspInit+0x98>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	4b15      	ldr	r3, [pc, #84]	@ (800298c <HAL_UART_MspInit+0x98>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	4a14      	ldr	r2, [pc, #80]	@ (800298c <HAL_UART_MspInit+0x98>)
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	6313      	str	r3, [r2, #48]	@ 0x30
 8002942:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_UART_MspInit+0x98>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800294e:	23c0      	movs	r3, #192	@ 0xc0
 8002950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295a:	2303      	movs	r3, #3
 800295c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800295e:	2307      	movs	r3, #7
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4619      	mov	r1, r3
 8002968:	4809      	ldr	r0, [pc, #36]	@ (8002990 <HAL_UART_MspInit+0x9c>)
 800296a:	f000 fe69 	bl	8003640 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	2025      	movs	r0, #37	@ 0x25
 8002974:	f000 fb25 	bl	8002fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002978:	2025      	movs	r0, #37	@ 0x25
 800297a:	f000 fb3e 	bl	8002ffa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800297e:	bf00      	nop
 8002980:	3728      	adds	r7, #40	@ 0x28
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40011000 	.word	0x40011000
 800298c:	40023800 	.word	0x40023800
 8002990:	40020400 	.word	0x40020400

08002994 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80029a8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a1c <HAL_FSMC_MspInit+0x88>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d131      	bne.n	8002a14 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80029b0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a1c <HAL_FSMC_MspInit+0x88>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	603b      	str	r3, [r7, #0]
 80029ba:	4b19      	ldr	r3, [pc, #100]	@ (8002a20 <HAL_FSMC_MspInit+0x8c>)
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	4a18      	ldr	r2, [pc, #96]	@ (8002a20 <HAL_FSMC_MspInit+0x8c>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6393      	str	r3, [r2, #56]	@ 0x38
 80029c6:	4b16      	ldr	r3, [pc, #88]	@ (8002a20 <HAL_FSMC_MspInit+0x8c>)
 80029c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_DA3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80029d2:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80029d6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e0:	2303      	movs	r3, #3
 80029e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80029e4:	230c      	movs	r3, #12
 80029e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	4619      	mov	r1, r3
 80029ec:	480d      	ldr	r0, [pc, #52]	@ (8002a24 <HAL_FSMC_MspInit+0x90>)
 80029ee:	f000 fe27 	bl	8003640 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80029f2:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 80029f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002a04:	230c      	movs	r3, #12
 8002a06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4806      	ldr	r0, [pc, #24]	@ (8002a28 <HAL_FSMC_MspInit+0x94>)
 8002a0e:	f000 fe17 	bl	8003640 <HAL_GPIO_Init>
 8002a12:	e000      	b.n	8002a16 <HAL_FSMC_MspInit+0x82>
    return;
 8002a14:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	2001cd88 	.word	0x2001cd88
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40020c00 	.word	0x40020c00

08002a2c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002a34:	f7ff ffae 	bl	8002994 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <NMI_Handler+0x4>

08002a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <HardFault_Handler+0x4>

08002a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <MemManage_Handler+0x4>

08002a58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a5c:	bf00      	nop
 8002a5e:	e7fd      	b.n	8002a5c <BusFault_Handler+0x4>

08002a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <UsageFault_Handler+0x4>

08002a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a96:	f000 f975 	bl	8002d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002aa4:	4802      	ldr	r0, [pc, #8]	@ (8002ab0 <TIM3_IRQHandler+0x10>)
 8002aa6:	f002 ff6b 	bl	8005980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200002f8 	.word	0x200002f8

08002ab4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ab8:	4802      	ldr	r0, [pc, #8]	@ (8002ac4 <USART1_IRQHandler+0x10>)
 8002aba:	f003 fb6b 	bl	8006194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000340 	.word	0x20000340

08002ac8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002acc:	4802      	ldr	r0, [pc, #8]	@ (8002ad8 <OTG_FS_IRQHandler+0x10>)
 8002ace:	f001 f8b0 	bl	8003c32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2001e3c4 	.word	0x2001e3c4

08002adc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return 1;
 8002ae0:	2301      	movs	r3, #1
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <_kill>:

int _kill(int pid, int sig)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002af6:	f00a fd23 	bl	800d540 <__errno>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2216      	movs	r2, #22
 8002afe:	601a      	str	r2, [r3, #0]
  return -1;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_exit>:

void _exit (int status)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b14:	f04f 31ff 	mov.w	r1, #4294967295
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ffe7 	bl	8002aec <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b1e:	bf00      	nop
 8002b20:	e7fd      	b.n	8002b1e <_exit+0x12>

08002b22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e00a      	b.n	8002b4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b34:	f3af 8000 	nop.w
 8002b38:	4601      	mov	r1, r0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	60ba      	str	r2, [r7, #8]
 8002b40:	b2ca      	uxtb	r2, r1
 8002b42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	dbf0      	blt.n	8002b34 <_read+0x12>
  }

  return len;
 8002b52:	687b      	ldr	r3, [r7, #4]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	e009      	b.n	8002b82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	60ba      	str	r2, [r7, #8]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	dbf1      	blt.n	8002b6e <_write+0x12>
  }
  return len;
 8002b8a:	687b      	ldr	r3, [r7, #4]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_close>:

int _close(int file)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bbc:	605a      	str	r2, [r3, #4]
  return 0;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <_isatty>:

int _isatty(int file)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bd4:	2301      	movs	r3, #1
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c04:	4a14      	ldr	r2, [pc, #80]	@ (8002c58 <_sbrk+0x5c>)
 8002c06:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <_sbrk+0x60>)
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c10:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c18:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <_sbrk+0x64>)
 8002c1a:	4a12      	ldr	r2, [pc, #72]	@ (8002c64 <_sbrk+0x68>)
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c1e:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <_sbrk+0x64>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d207      	bcs.n	8002c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c2c:	f00a fc88 	bl	800d540 <__errno>
 8002c30:	4603      	mov	r3, r0
 8002c32:	220c      	movs	r2, #12
 8002c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	e009      	b.n	8002c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <_sbrk+0x64>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c42:	4b07      	ldr	r3, [pc, #28]	@ (8002c60 <_sbrk+0x64>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	4a05      	ldr	r2, [pc, #20]	@ (8002c60 <_sbrk+0x64>)
 8002c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20020000 	.word	0x20020000
 8002c5c:	00000400 	.word	0x00000400
 8002c60:	2001cd8c 	.word	0x2001cd8c
 8002c64:	2001ec18 	.word	0x2001ec18

08002c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c6c:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <SystemInit+0x20>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c72:	4a05      	ldr	r2, [pc, #20]	@ (8002c88 <SystemInit+0x20>)
 8002c74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c90:	f7ff ffea 	bl	8002c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c94:	480c      	ldr	r0, [pc, #48]	@ (8002cc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c96:	490d      	ldr	r1, [pc, #52]	@ (8002ccc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c98:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c9c:	e002      	b.n	8002ca4 <LoopCopyDataInit>

08002c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ca2:	3304      	adds	r3, #4

08002ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca8:	d3f9      	bcc.n	8002c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002caa:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cac:	4c0a      	ldr	r4, [pc, #40]	@ (8002cd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb0:	e001      	b.n	8002cb6 <LoopFillZerobss>

08002cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb4:	3204      	adds	r2, #4

08002cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb8:	d3fb      	bcc.n	8002cb2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002cba:	f00a fc47 	bl	800d54c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cbe:	f7ff fadd 	bl	800227c <main>
  bx  lr    
 8002cc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002cc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ccc:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8002cd0:	080153a8 	.word	0x080153a8
  ldr r2, =_sbss
 8002cd4:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8002cd8:	2001ec14 	.word	0x2001ec14

08002cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cdc:	e7fe      	b.n	8002cdc <ADC_IRQHandler>
	...

08002ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d20 <HAL_Init+0x40>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d20 <HAL_Init+0x40>)
 8002cea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <HAL_Init+0x40>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d20 <HAL_Init+0x40>)
 8002cf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cfc:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <HAL_Init+0x40>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a07      	ldr	r2, [pc, #28]	@ (8002d20 <HAL_Init+0x40>)
 8002d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d08:	2003      	movs	r0, #3
 8002d0a:	f000 f94f 	bl	8002fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d0e:	200f      	movs	r0, #15
 8002d10:	f000 f808 	bl	8002d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d14:	f7ff fd5a 	bl	80027cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023c00 	.word	0x40023c00

08002d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d2c:	4b12      	ldr	r3, [pc, #72]	@ (8002d78 <HAL_InitTick+0x54>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b12      	ldr	r3, [pc, #72]	@ (8002d7c <HAL_InitTick+0x58>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	4619      	mov	r1, r3
 8002d36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f967 	bl	8003016 <HAL_SYSTICK_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e00e      	b.n	8002d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b0f      	cmp	r3, #15
 8002d56:	d80a      	bhi.n	8002d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d60:	f000 f92f 	bl	8002fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d64:	4a06      	ldr	r2, [pc, #24]	@ (8002d80 <HAL_InitTick+0x5c>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e000      	b.n	8002d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000004 	.word	0x20000004
 8002d7c:	2000000c 	.word	0x2000000c
 8002d80:	20000008 	.word	0x20000008

08002d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d88:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_IncTick+0x20>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b06      	ldr	r3, [pc, #24]	@ (8002da8 <HAL_IncTick+0x24>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4413      	add	r3, r2
 8002d94:	4a04      	ldr	r2, [pc, #16]	@ (8002da8 <HAL_IncTick+0x24>)
 8002d96:	6013      	str	r3, [r2, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	2000000c 	.word	0x2000000c
 8002da8:	2001cd90 	.word	0x2001cd90

08002dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return uwTick;
 8002db0:	4b03      	ldr	r3, [pc, #12]	@ (8002dc0 <HAL_GetTick+0x14>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	2001cd90 	.word	0x2001cd90

08002dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dcc:	f7ff ffee 	bl	8002dac <HAL_GetTick>
 8002dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d005      	beq.n	8002dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dde:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <HAL_Delay+0x44>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dea:	bf00      	nop
 8002dec:	f7ff ffde 	bl	8002dac <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d8f7      	bhi.n	8002dec <HAL_Delay+0x28>
  {
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	2000000c 	.word	0x2000000c

08002e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <__NVIC_SetPriorityGrouping+0x44>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e3e:	4a04      	ldr	r2, [pc, #16]	@ (8002e50 <__NVIC_SetPriorityGrouping+0x44>)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	60d3      	str	r3, [r2, #12]
}
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e58:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <__NVIC_GetPriorityGrouping+0x18>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	f003 0307 	and.w	r3, r3, #7
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	db0b      	blt.n	8002e9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	f003 021f 	and.w	r2, r3, #31
 8002e88:	4907      	ldr	r1, [pc, #28]	@ (8002ea8 <__NVIC_EnableIRQ+0x38>)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	2001      	movs	r0, #1
 8002e92:	fa00 f202 	lsl.w	r2, r0, r2
 8002e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000e100 	.word	0xe000e100

08002eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	6039      	str	r1, [r7, #0]
 8002eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	db0a      	blt.n	8002ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	490c      	ldr	r1, [pc, #48]	@ (8002ef8 <__NVIC_SetPriority+0x4c>)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	0112      	lsls	r2, r2, #4
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	440b      	add	r3, r1
 8002ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed4:	e00a      	b.n	8002eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4908      	ldr	r1, [pc, #32]	@ (8002efc <__NVIC_SetPriority+0x50>)
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	3b04      	subs	r3, #4
 8002ee4:	0112      	lsls	r2, r2, #4
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	440b      	add	r3, r1
 8002eea:	761a      	strb	r2, [r3, #24]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000e100 	.word	0xe000e100
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	@ 0x24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f1c3 0307 	rsb	r3, r3, #7
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	bf28      	it	cs
 8002f1e:	2304      	movcs	r3, #4
 8002f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d902      	bls.n	8002f30 <NVIC_EncodePriority+0x30>
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3b03      	subs	r3, #3
 8002f2e:	e000      	b.n	8002f32 <NVIC_EncodePriority+0x32>
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	f04f 32ff 	mov.w	r2, #4294967295
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	401a      	ands	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f48:	f04f 31ff 	mov.w	r1, #4294967295
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	43d9      	mvns	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	4313      	orrs	r3, r2
         );
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3724      	adds	r7, #36	@ 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f78:	d301      	bcc.n	8002f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e00f      	b.n	8002f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa8 <SysTick_Config+0x40>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f86:	210f      	movs	r1, #15
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8c:	f7ff ff8e 	bl	8002eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f90:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <SysTick_Config+0x40>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f96:	4b04      	ldr	r3, [pc, #16]	@ (8002fa8 <SysTick_Config+0x40>)
 8002f98:	2207      	movs	r2, #7
 8002f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	e000e010 	.word	0xe000e010

08002fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff29 	bl	8002e0c <__NVIC_SetPriorityGrouping>
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b086      	sub	sp, #24
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	4603      	mov	r3, r0
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd4:	f7ff ff3e 	bl	8002e54 <__NVIC_GetPriorityGrouping>
 8002fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	6978      	ldr	r0, [r7, #20]
 8002fe0:	f7ff ff8e 	bl	8002f00 <NVIC_EncodePriority>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff5d 	bl	8002eac <__NVIC_SetPriority>
}
 8002ff2:	bf00      	nop
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	4603      	mov	r3, r0
 8003002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff31 	bl	8002e70 <__NVIC_EnableIRQ>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff ffa2 	bl	8002f68 <SysTick_Config>
 8003024:	4603      	mov	r3, r0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e014      	b.n	800306a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	791b      	ldrb	r3, [r3, #4]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff fbe3 	bl	800281c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003072:	b480      	push	{r7}
 8003074:	b089      	sub	sp, #36	@ 0x24
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_DAC_ConfigChannel+0x1c>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e042      	b.n	8003118 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	795b      	ldrb	r3, [r3, #5]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_DAC_ConfigChannel+0x2c>
 800309a:	2302      	movs	r3, #2
 800309c:	e03c      	b.n	8003118 <HAL_DAC_ConfigChannel+0xa6>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2202      	movs	r2, #2
 80030a8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6819      	ldr	r1, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	22c0      	movs	r2, #192	@ 0xc0
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43da      	mvns	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	400a      	ands	r2, r1
 8003108:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003116:	7ffb      	ldrb	r3, [r7, #31]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3724      	adds	r7, #36	@ 0x24
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003130:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003132:	f7ff fe3b 	bl	8002dac <HAL_GetTick>
 8003136:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d008      	beq.n	8003156 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2280      	movs	r2, #128	@ 0x80
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e052      	b.n	80031fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0216 	bic.w	r2, r2, #22
 8003164:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003174:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d103      	bne.n	8003186 <HAL_DMA_Abort+0x62>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0208 	bic.w	r2, r2, #8
 8003194:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a6:	e013      	b.n	80031d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a8:	f7ff fe00 	bl	8002dac <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d90c      	bls.n	80031d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2203      	movs	r2, #3
 80031c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e015      	b.n	80031fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e4      	bne.n	80031a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e2:	223f      	movs	r2, #63	@ 0x3f
 80031e4:	409a      	lsls	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d004      	beq.n	8003222 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2280      	movs	r2, #128	@ 0x80
 800321c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e00c      	b.n	800323c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2205      	movs	r2, #5
 8003226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003256:	4b23      	ldr	r3, [pc, #140]	@ (80032e4 <HAL_FLASH_Program+0x9c>)
 8003258:	7e1b      	ldrb	r3, [r3, #24]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_FLASH_Program+0x1a>
 800325e:	2302      	movs	r3, #2
 8003260:	e03b      	b.n	80032da <HAL_FLASH_Program+0x92>
 8003262:	4b20      	ldr	r3, [pc, #128]	@ (80032e4 <HAL_FLASH_Program+0x9c>)
 8003264:	2201      	movs	r2, #1
 8003266:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003268:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800326c:	f000 f870 	bl	8003350 <FLASH_WaitForLastOperation>
 8003270:	4603      	mov	r3, r0
 8003272:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d12b      	bne.n	80032d2 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003280:	783b      	ldrb	r3, [r7, #0]
 8003282:	4619      	mov	r1, r3
 8003284:	68b8      	ldr	r0, [r7, #8]
 8003286:	f000 f91b 	bl	80034c0 <FLASH_Program_Byte>
 800328a:	e016      	b.n	80032ba <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003292:	883b      	ldrh	r3, [r7, #0]
 8003294:	4619      	mov	r1, r3
 8003296:	68b8      	ldr	r0, [r7, #8]
 8003298:	f000 f8ee 	bl	8003478 <FLASH_Program_HalfWord>
 800329c:	e00d      	b.n	80032ba <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d105      	bne.n	80032b0 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4619      	mov	r1, r3
 80032a8:	68b8      	ldr	r0, [r7, #8]
 80032aa:	f000 f8c3 	bl	8003434 <FLASH_Program_Word>
 80032ae:	e004      	b.n	80032ba <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80032b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032b4:	68b8      	ldr	r0, [r7, #8]
 80032b6:	f000 f88b 	bl	80033d0 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032ba:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80032be:	f000 f847 	bl	8003350 <FLASH_WaitForLastOperation>
 80032c2:	4603      	mov	r3, r0
 80032c4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80032c6:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <HAL_FLASH_Program+0xa0>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	4a07      	ldr	r2, [pc, #28]	@ (80032e8 <HAL_FLASH_Program+0xa0>)
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80032d2:	4b04      	ldr	r3, [pc, #16]	@ (80032e4 <HAL_FLASH_Program+0x9c>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	761a      	strb	r2, [r3, #24]

  return status;
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	2001cd94 	.word	0x2001cd94
 80032e8:	40023c00 	.word	0x40023c00

080032ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80032f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <HAL_FLASH_Unlock+0x38>)
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	da0b      	bge.n	8003316 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80032fe:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <HAL_FLASH_Unlock+0x38>)
 8003300:	4a09      	ldr	r2, [pc, #36]	@ (8003328 <HAL_FLASH_Unlock+0x3c>)
 8003302:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003304:	4b07      	ldr	r3, [pc, #28]	@ (8003324 <HAL_FLASH_Unlock+0x38>)
 8003306:	4a09      	ldr	r2, [pc, #36]	@ (800332c <HAL_FLASH_Unlock+0x40>)
 8003308:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800330a:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <HAL_FLASH_Unlock+0x38>)
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	da01      	bge.n	8003316 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003316:	79fb      	ldrb	r3, [r7, #7]
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40023c00 	.word	0x40023c00
 8003328:	45670123 	.word	0x45670123
 800332c:	cdef89ab 	.word	0xcdef89ab

08003330 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003334:	4b05      	ldr	r3, [pc, #20]	@ (800334c <HAL_FLASH_Lock+0x1c>)
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	4a04      	ldr	r2, [pc, #16]	@ (800334c <HAL_FLASH_Lock+0x1c>)
 800333a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800333e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	40023c00 	.word	0x40023c00

08003350 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800335c:	4b1a      	ldr	r3, [pc, #104]	@ (80033c8 <FLASH_WaitForLastOperation+0x78>)
 800335e:	2200      	movs	r2, #0
 8003360:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003362:	f7ff fd23 	bl	8002dac <HAL_GetTick>
 8003366:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8003368:	e010      	b.n	800338c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d00c      	beq.n	800338c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d007      	beq.n	8003388 <FLASH_WaitForLastOperation+0x38>
 8003378:	f7ff fd18 	bl	8002dac <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	d201      	bcs.n	800338c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e019      	b.n	80033c0 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800338c:	4b0f      	ldr	r3, [pc, #60]	@ (80033cc <FLASH_WaitForLastOperation+0x7c>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e8      	bne.n	800336a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <FLASH_WaitForLastOperation+0x7c>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80033a4:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <FLASH_WaitForLastOperation+0x7c>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80033aa:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <FLASH_WaitForLastOperation+0x7c>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80033b6:	f000 f8a5 	bl	8003504 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0

}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	2001cd94 	.word	0x2001cd94
 80033cc:	40023c00 	.word	0x40023c00

080033d0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80033dc:	4b14      	ldr	r3, [pc, #80]	@ (8003430 <FLASH_Program_DoubleWord+0x60>)
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	4a13      	ldr	r2, [pc, #76]	@ (8003430 <FLASH_Program_DoubleWord+0x60>)
 80033e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80033e8:	4b11      	ldr	r3, [pc, #68]	@ (8003430 <FLASH_Program_DoubleWord+0x60>)
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	4a10      	ldr	r2, [pc, #64]	@ (8003430 <FLASH_Program_DoubleWord+0x60>)
 80033ee:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80033f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80033f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003430 <FLASH_Program_DoubleWord+0x60>)
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003430 <FLASH_Program_DoubleWord+0x60>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003406:	f3bf 8f6f 	isb	sy
}
 800340a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 800340c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	000a      	movs	r2, r1
 800341a:	2300      	movs	r3, #0
 800341c:	68f9      	ldr	r1, [r7, #12]
 800341e:	3104      	adds	r1, #4
 8003420:	4613      	mov	r3, r2
 8003422:	600b      	str	r3, [r1, #0]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	40023c00 	.word	0x40023c00

08003434 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800343e:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <FLASH_Program_Word+0x40>)
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	4a0c      	ldr	r2, [pc, #48]	@ (8003474 <FLASH_Program_Word+0x40>)
 8003444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003448:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800344a:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <FLASH_Program_Word+0x40>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	4a09      	ldr	r2, [pc, #36]	@ (8003474 <FLASH_Program_Word+0x40>)
 8003450:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003454:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003456:	4b07      	ldr	r3, [pc, #28]	@ (8003474 <FLASH_Program_Word+0x40>)
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	4a06      	ldr	r2, [pc, #24]	@ (8003474 <FLASH_Program_Word+0x40>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	601a      	str	r2, [r3, #0]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	40023c00 	.word	0x40023c00

08003478 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003484:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <FLASH_Program_HalfWord+0x44>)
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	4a0c      	ldr	r2, [pc, #48]	@ (80034bc <FLASH_Program_HalfWord+0x44>)
 800348a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800348e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003490:	4b0a      	ldr	r3, [pc, #40]	@ (80034bc <FLASH_Program_HalfWord+0x44>)
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	4a09      	ldr	r2, [pc, #36]	@ (80034bc <FLASH_Program_HalfWord+0x44>)
 8003496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800349c:	4b07      	ldr	r3, [pc, #28]	@ (80034bc <FLASH_Program_HalfWord+0x44>)
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	4a06      	ldr	r2, [pc, #24]	@ (80034bc <FLASH_Program_HalfWord+0x44>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	801a      	strh	r2, [r3, #0]
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40023c00 	.word	0x40023c00

080034c0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80034cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <FLASH_Program_Byte+0x40>)
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003500 <FLASH_Program_Byte+0x40>)
 80034d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80034d8:	4b09      	ldr	r3, [pc, #36]	@ (8003500 <FLASH_Program_Byte+0x40>)
 80034da:	4a09      	ldr	r2, [pc, #36]	@ (8003500 <FLASH_Program_Byte+0x40>)
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80034e0:	4b07      	ldr	r3, [pc, #28]	@ (8003500 <FLASH_Program_Byte+0x40>)
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	4a06      	ldr	r2, [pc, #24]	@ (8003500 <FLASH_Program_Byte+0x40>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	701a      	strb	r2, [r3, #0]
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40023c00 	.word	0x40023c00

08003504 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003508:	4b27      	ldr	r3, [pc, #156]	@ (80035a8 <FLASH_SetErrorCode+0xa4>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003514:	4b25      	ldr	r3, [pc, #148]	@ (80035ac <FLASH_SetErrorCode+0xa8>)
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	f043 0310 	orr.w	r3, r3, #16
 800351c:	4a23      	ldr	r2, [pc, #140]	@ (80035ac <FLASH_SetErrorCode+0xa8>)
 800351e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003520:	4b21      	ldr	r3, [pc, #132]	@ (80035a8 <FLASH_SetErrorCode+0xa4>)
 8003522:	2210      	movs	r2, #16
 8003524:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003526:	4b20      	ldr	r3, [pc, #128]	@ (80035a8 <FLASH_SetErrorCode+0xa4>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003532:	4b1e      	ldr	r3, [pc, #120]	@ (80035ac <FLASH_SetErrorCode+0xa8>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f043 0308 	orr.w	r3, r3, #8
 800353a:	4a1c      	ldr	r2, [pc, #112]	@ (80035ac <FLASH_SetErrorCode+0xa8>)
 800353c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800353e:	4b1a      	ldr	r3, [pc, #104]	@ (80035a8 <FLASH_SetErrorCode+0xa4>)
 8003540:	2220      	movs	r2, #32
 8003542:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003544:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <FLASH_SetErrorCode+0xa4>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003550:	4b16      	ldr	r3, [pc, #88]	@ (80035ac <FLASH_SetErrorCode+0xa8>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	f043 0304 	orr.w	r3, r3, #4
 8003558:	4a14      	ldr	r2, [pc, #80]	@ (80035ac <FLASH_SetErrorCode+0xa8>)
 800355a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800355c:	4b12      	ldr	r3, [pc, #72]	@ (80035a8 <FLASH_SetErrorCode+0xa4>)
 800355e:	2240      	movs	r2, #64	@ 0x40
 8003560:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003562:	4b11      	ldr	r3, [pc, #68]	@ (80035a8 <FLASH_SetErrorCode+0xa4>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800356e:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <FLASH_SetErrorCode+0xa8>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f043 0302 	orr.w	r3, r3, #2
 8003576:	4a0d      	ldr	r2, [pc, #52]	@ (80035ac <FLASH_SetErrorCode+0xa8>)
 8003578:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800357a:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <FLASH_SetErrorCode+0xa4>)
 800357c:	2280      	movs	r2, #128	@ 0x80
 800357e:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003580:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <FLASH_SetErrorCode+0xa4>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800358c:	4b07      	ldr	r3, [pc, #28]	@ (80035ac <FLASH_SetErrorCode+0xa8>)
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f043 0320 	orr.w	r3, r3, #32
 8003594:	4a05      	ldr	r2, [pc, #20]	@ (80035ac <FLASH_SetErrorCode+0xa8>)
 8003596:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003598:	4b03      	ldr	r3, [pc, #12]	@ (80035a8 <FLASH_SetErrorCode+0xa4>)
 800359a:	2202      	movs	r2, #2
 800359c:	60da      	str	r2, [r3, #12]
  }
}
 800359e:	bf00      	nop
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40023c00 	.word	0x40023c00
 80035ac:	2001cd94 	.word	0x2001cd94

080035b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	e010      	b.n	80035ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d103      	bne.n	80035da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80035d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e009      	b.n	80035ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d103      	bne.n	80035e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80035e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e002      	b.n	80035ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80035e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035ec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035ee:	4b13      	ldr	r3, [pc, #76]	@ (800363c <FLASH_Erase_Sector+0x8c>)
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	4a12      	ldr	r2, [pc, #72]	@ (800363c <FLASH_Erase_Sector+0x8c>)
 80035f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80035fa:	4b10      	ldr	r3, [pc, #64]	@ (800363c <FLASH_Erase_Sector+0x8c>)
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	490f      	ldr	r1, [pc, #60]	@ (800363c <FLASH_Erase_Sector+0x8c>)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003606:	4b0d      	ldr	r3, [pc, #52]	@ (800363c <FLASH_Erase_Sector+0x8c>)
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	4a0c      	ldr	r2, [pc, #48]	@ (800363c <FLASH_Erase_Sector+0x8c>)
 800360c:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8003610:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003612:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <FLASH_Erase_Sector+0x8c>)
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4313      	orrs	r3, r2
 800361c:	4a07      	ldr	r2, [pc, #28]	@ (800363c <FLASH_Erase_Sector+0x8c>)
 800361e:	f043 0302 	orr.w	r3, r3, #2
 8003622:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003624:	4b05      	ldr	r3, [pc, #20]	@ (800363c <FLASH_Erase_Sector+0x8c>)
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	4a04      	ldr	r2, [pc, #16]	@ (800363c <FLASH_Erase_Sector+0x8c>)
 800362a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800362e:	6113      	str	r3, [r2, #16]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40023c00 	.word	0x40023c00

08003640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	@ 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	e16b      	b.n	8003934 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800365c:	2201      	movs	r2, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	429a      	cmp	r2, r3
 8003676:	f040 815a 	bne.w	800392e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d005      	beq.n	8003692 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800368e:	2b02      	cmp	r3, #2
 8003690:	d130      	bne.n	80036f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	2203      	movs	r2, #3
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036c8:	2201      	movs	r2, #1
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 0201 	and.w	r2, r3, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d017      	beq.n	8003730 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d123      	bne.n	8003784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	08da      	lsrs	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3208      	adds	r2, #8
 8003744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	220f      	movs	r2, #15
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	08da      	lsrs	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3208      	adds	r2, #8
 800377e:	69b9      	ldr	r1, [r7, #24]
 8003780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0203 	and.w	r2, r3, #3
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80b4 	beq.w	800392e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	4b60      	ldr	r3, [pc, #384]	@ (800394c <HAL_GPIO_Init+0x30c>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	4a5f      	ldr	r2, [pc, #380]	@ (800394c <HAL_GPIO_Init+0x30c>)
 80037d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037d6:	4b5d      	ldr	r3, [pc, #372]	@ (800394c <HAL_GPIO_Init+0x30c>)
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003950 <HAL_GPIO_Init+0x310>)
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	3302      	adds	r3, #2
 80037ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	220f      	movs	r2, #15
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a52      	ldr	r2, [pc, #328]	@ (8003954 <HAL_GPIO_Init+0x314>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d02b      	beq.n	8003866 <HAL_GPIO_Init+0x226>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a51      	ldr	r2, [pc, #324]	@ (8003958 <HAL_GPIO_Init+0x318>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d025      	beq.n	8003862 <HAL_GPIO_Init+0x222>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a50      	ldr	r2, [pc, #320]	@ (800395c <HAL_GPIO_Init+0x31c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d01f      	beq.n	800385e <HAL_GPIO_Init+0x21e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a4f      	ldr	r2, [pc, #316]	@ (8003960 <HAL_GPIO_Init+0x320>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d019      	beq.n	800385a <HAL_GPIO_Init+0x21a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a4e      	ldr	r2, [pc, #312]	@ (8003964 <HAL_GPIO_Init+0x324>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d013      	beq.n	8003856 <HAL_GPIO_Init+0x216>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a4d      	ldr	r2, [pc, #308]	@ (8003968 <HAL_GPIO_Init+0x328>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00d      	beq.n	8003852 <HAL_GPIO_Init+0x212>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a4c      	ldr	r2, [pc, #304]	@ (800396c <HAL_GPIO_Init+0x32c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d007      	beq.n	800384e <HAL_GPIO_Init+0x20e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a4b      	ldr	r2, [pc, #300]	@ (8003970 <HAL_GPIO_Init+0x330>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <HAL_GPIO_Init+0x20a>
 8003846:	2307      	movs	r3, #7
 8003848:	e00e      	b.n	8003868 <HAL_GPIO_Init+0x228>
 800384a:	2308      	movs	r3, #8
 800384c:	e00c      	b.n	8003868 <HAL_GPIO_Init+0x228>
 800384e:	2306      	movs	r3, #6
 8003850:	e00a      	b.n	8003868 <HAL_GPIO_Init+0x228>
 8003852:	2305      	movs	r3, #5
 8003854:	e008      	b.n	8003868 <HAL_GPIO_Init+0x228>
 8003856:	2304      	movs	r3, #4
 8003858:	e006      	b.n	8003868 <HAL_GPIO_Init+0x228>
 800385a:	2303      	movs	r3, #3
 800385c:	e004      	b.n	8003868 <HAL_GPIO_Init+0x228>
 800385e:	2302      	movs	r3, #2
 8003860:	e002      	b.n	8003868 <HAL_GPIO_Init+0x228>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_GPIO_Init+0x228>
 8003866:	2300      	movs	r3, #0
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	f002 0203 	and.w	r2, r2, #3
 800386e:	0092      	lsls	r2, r2, #2
 8003870:	4093      	lsls	r3, r2
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003878:	4935      	ldr	r1, [pc, #212]	@ (8003950 <HAL_GPIO_Init+0x310>)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	089b      	lsrs	r3, r3, #2
 800387e:	3302      	adds	r3, #2
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003886:	4b3b      	ldr	r3, [pc, #236]	@ (8003974 <HAL_GPIO_Init+0x334>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038aa:	4a32      	ldr	r2, [pc, #200]	@ (8003974 <HAL_GPIO_Init+0x334>)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038b0:	4b30      	ldr	r3, [pc, #192]	@ (8003974 <HAL_GPIO_Init+0x334>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038d4:	4a27      	ldr	r2, [pc, #156]	@ (8003974 <HAL_GPIO_Init+0x334>)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038da:	4b26      	ldr	r3, [pc, #152]	@ (8003974 <HAL_GPIO_Init+0x334>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003974 <HAL_GPIO_Init+0x334>)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003904:	4b1b      	ldr	r3, [pc, #108]	@ (8003974 <HAL_GPIO_Init+0x334>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003928:	4a12      	ldr	r2, [pc, #72]	@ (8003974 <HAL_GPIO_Init+0x334>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3301      	adds	r3, #1
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	2b0f      	cmp	r3, #15
 8003938:	f67f ae90 	bls.w	800365c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	3724      	adds	r7, #36	@ 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	40013800 	.word	0x40013800
 8003954:	40020000 	.word	0x40020000
 8003958:	40020400 	.word	0x40020400
 800395c:	40020800 	.word	0x40020800
 8003960:	40020c00 	.word	0x40020c00
 8003964:	40021000 	.word	0x40021000
 8003968:	40021400 	.word	0x40021400
 800396c:	40021800 	.word	0x40021800
 8003970:	40021c00 	.word	0x40021c00
 8003974:	40013c00 	.word	0x40013c00

08003978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	807b      	strh	r3, [r7, #2]
 8003984:	4613      	mov	r3, r2
 8003986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003988:	787b      	ldrb	r3, [r7, #1]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800398e:	887a      	ldrh	r2, [r7, #2]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003994:	e003      	b.n	800399e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003996:	887b      	ldrh	r3, [r7, #2]
 8003998:	041a      	lsls	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	619a      	str	r2, [r3, #24]
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af02      	add	r7, sp, #8
 80039b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e101      	b.n	8003bc0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f007 f90e 	bl	800abf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2203      	movs	r2, #3
 80039e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039ea:	d102      	bne.n	80039f2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 fc95 	bl	8007326 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7c1a      	ldrb	r2, [r3, #16]
 8003a04:	f88d 2000 	strb.w	r2, [sp]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a0c:	f003 fb74 	bl	80070f8 <USB_CoreInit>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e0ce      	b.n	8003bc0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2100      	movs	r1, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f003 fc8d 	bl	8007348 <USB_SetCurrentMode>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0bf      	b.n	8003bc0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
 8003a44:	e04a      	b.n	8003adc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3315      	adds	r3, #21
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a5a:	7bfa      	ldrb	r2, [r7, #15]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	3314      	adds	r3, #20
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a6e:	7bfa      	ldrb	r2, [r7, #15]
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	b298      	uxth	r0, r3
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	332e      	adds	r3, #46	@ 0x2e
 8003a82:	4602      	mov	r2, r0
 8003a84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	3318      	adds	r3, #24
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	331c      	adds	r3, #28
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aae:	7bfa      	ldrb	r2, [r7, #15]
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	3320      	adds	r3, #32
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ac2:	7bfa      	ldrb	r2, [r7, #15]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3324      	adds	r3, #36	@ 0x24
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	73fb      	strb	r3, [r7, #15]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	791b      	ldrb	r3, [r3, #4]
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d3af      	bcc.n	8003a46 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	e044      	b.n	8003b76 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b2e:	7bfa      	ldrb	r2, [r7, #15]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b5a:	7bfa      	ldrb	r2, [r7, #15]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	3301      	adds	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	791b      	ldrb	r3, [r3, #4]
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d3b5      	bcc.n	8003aec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7c1a      	ldrb	r2, [r3, #16]
 8003b88:	f88d 2000 	strb.w	r2, [sp]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b90:	f003 fc26 	bl	80073e0 <USB_DevInit>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e00c      	b.n	8003bc0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f004 fc70 	bl	800849e <USB_DevDisconnect>

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_PCD_Start+0x1c>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e022      	b.n	8003c2a <HAL_PCD_Start+0x62>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d009      	beq.n	8003c0c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f003 fb77 	bl	8007304 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f004 fc1e 	bl	800845c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c32:	b590      	push	{r4, r7, lr}
 8003c34:	b08d      	sub	sp, #52	@ 0x34
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f004 fcdc 	bl	8008606 <USB_GetMode>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f040 848c 	bne.w	800456e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f004 fc40 	bl	80084e0 <USB_ReadInterrupts>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8482 	beq.w	800456c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f004 fc2d 	bl	80084e0 <USB_ReadInterrupts>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d107      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f002 0202 	and.w	r2, r2, #2
 8003c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f004 fc1b 	bl	80084e0 <USB_ReadInterrupts>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d161      	bne.n	8003d78 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0210 	bic.w	r2, r2, #16
 8003cc2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f003 020f 	and.w	r2, r3, #15
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003cea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cee:	d124      	bne.n	8003d3a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d035      	beq.n	8003d68 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6a38      	ldr	r0, [r7, #32]
 8003d10:	f004 fa52 	bl	80081b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d20:	441a      	add	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d32:	441a      	add	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	615a      	str	r2, [r3, #20]
 8003d38:	e016      	b.n	8003d68 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003d40:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d44:	d110      	bne.n	8003d68 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6a38      	ldr	r0, [r7, #32]
 8003d52:	f004 fa31 	bl	80081b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d62:	441a      	add	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0210 	orr.w	r2, r2, #16
 8003d76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f004 fbaf 	bl	80084e0 <USB_ReadInterrupts>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d8c:	f040 80a7 	bne.w	8003ede <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f004 fbb4 	bl	8008506 <USB_ReadDevAllOutEpInterrupt>
 8003d9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003da0:	e099      	b.n	8003ed6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 808e 	beq.w	8003eca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f004 fbd8 	bl	800856e <USB_ReadDevOutEPInterrupt>
 8003dbe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00c      	beq.n	8003de4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2301      	movs	r3, #1
 8003dda:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ddc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fea4 	bl	8004b2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00c      	beq.n	8003e08 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 ff7a 	bl	8004cfc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2310      	movs	r3, #16
 8003e22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d030      	beq.n	8003e90 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e36:	2b80      	cmp	r3, #128	@ 0x80
 8003e38:	d109      	bne.n	8003e4e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e4c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	3304      	adds	r3, #4
 8003e62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	78db      	ldrb	r3, [r3, #3]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d108      	bne.n	8003e7e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	4619      	mov	r1, r3
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f006 ffc3 	bl	800ae04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	2320      	movs	r3, #32
 8003eaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ec8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	3301      	adds	r3, #1
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f47f af62 	bne.w	8003da2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f004 fafc 	bl	80084e0 <USB_ReadInterrupts>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ef2:	f040 80db 	bne.w	80040ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f004 fb1d 	bl	800853a <USB_ReadDevAllInEpInterrupt>
 8003f00:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003f06:	e0cd      	b.n	80040a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80c2 	beq.w	8004098 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 fb43 	bl	80085aa <USB_ReadDevInEPInterrupt>
 8003f24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d057      	beq.n	8003fe0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	2201      	movs	r2, #1
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69f9      	ldr	r1, [r7, #28]
 8003f4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f50:	4013      	ands	r3, r2
 8003f52:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f60:	461a      	mov	r2, r3
 8003f62:	2301      	movs	r3, #1
 8003f64:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	799b      	ldrb	r3, [r3, #6]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d132      	bne.n	8003fd4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	3320      	adds	r3, #32
 8003f7e:	6819      	ldr	r1, [r3, #0]
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4403      	add	r3, r0
 8003f8e:	331c      	adds	r3, #28
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4419      	add	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4403      	add	r3, r0
 8003fa2:	3320      	adds	r3, #32
 8003fa4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d113      	bne.n	8003fd4 <HAL_PCD_IRQHandler+0x3a2>
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3324      	adds	r3, #36	@ 0x24
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d108      	bne.n	8003fd4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2101      	movs	r1, #1
 8003fd0:	f004 fb4a 	bl	8008668 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f006 fe8d 	bl	800acfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2308      	movs	r3, #8
 8003ffa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004012:	461a      	mov	r2, r3
 8004014:	2310      	movs	r3, #16
 8004016:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800402e:	461a      	mov	r2, r3
 8004030:	2340      	movs	r3, #64	@ 0x40
 8004032:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d023      	beq.n	8004086 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800403e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004040:	6a38      	ldr	r0, [r7, #32]
 8004042:	f003 fb31 	bl	80076a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	3310      	adds	r3, #16
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	4413      	add	r3, r2
 8004056:	3304      	adds	r3, #4
 8004058:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	78db      	ldrb	r3, [r3, #3]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d108      	bne.n	8004074 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	b2db      	uxtb	r3, r3
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f006 feda 	bl	800ae28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004080:	461a      	mov	r2, r3
 8004082:	2302      	movs	r3, #2
 8004084:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004090:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fcbd 	bl	8004a12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409a:	3301      	adds	r3, #1
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800409e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80040a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f47f af2e 	bne.w	8003f08 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f004 fa15 	bl	80084e0 <USB_ReadInterrupts>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040c0:	d122      	bne.n	8004108 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d108      	bne.n	80040f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040e8:	2100      	movs	r1, #0
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fea4 	bl	8004e38 <HAL_PCDEx_LPM_Callback>
 80040f0:	e002      	b.n	80040f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f006 fe78 	bl	800ade8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f004 f9e7 	bl	80084e0 <USB_ReadInterrupts>
 8004112:	4603      	mov	r3, r0
 8004114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800411c:	d112      	bne.n	8004144 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b01      	cmp	r3, #1
 800412c:	d102      	bne.n	8004134 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f006 fe34 	bl	800ad9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004142:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f004 f9c9 	bl	80084e0 <USB_ReadInterrupts>
 800414e:	4603      	mov	r3, r0
 8004150:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004158:	f040 80b7 	bne.w	80042ca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2110      	movs	r1, #16
 8004176:	4618      	mov	r0, r3
 8004178:	f003 fa96 	bl	80076a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417c:	2300      	movs	r3, #0
 800417e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004180:	e046      	b.n	8004210 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800418e:	461a      	mov	r2, r3
 8004190:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004194:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041a6:	0151      	lsls	r1, r2, #5
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	440a      	add	r2, r1
 80041ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c2:	461a      	mov	r2, r3
 80041c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041da:	0151      	lsls	r1, r2, #5
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	440a      	add	r2, r1
 80041e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004204:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004208:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800420a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420c:	3301      	adds	r3, #1
 800420e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	791b      	ldrb	r3, [r3, #4]
 8004214:	461a      	mov	r2, r3
 8004216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004218:	4293      	cmp	r3, r2
 800421a:	d3b2      	bcc.n	8004182 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800422a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800422e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	7bdb      	ldrb	r3, [r3, #15]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d016      	beq.n	8004266 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800423e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004248:	f043 030b 	orr.w	r3, r3, #11
 800424c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800425e:	f043 030b 	orr.w	r3, r3, #11
 8004262:	6453      	str	r3, [r2, #68]	@ 0x44
 8004264:	e015      	b.n	8004292 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004274:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004278:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800427c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800428c:	f043 030b 	orr.w	r3, r3, #11
 8004290:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042a0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80042a4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042b4:	461a      	mov	r2, r3
 80042b6:	f004 f9d7 	bl	8008668 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695a      	ldr	r2, [r3, #20]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80042c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f004 f906 	bl	80084e0 <USB_ReadInterrupts>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042de:	d123      	bne.n	8004328 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f004 f99c 	bl	8008622 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f003 fa53 	bl	800779a <USB_GetDevSpeed>
 80042f4:	4603      	mov	r3, r0
 80042f6:	461a      	mov	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681c      	ldr	r4, [r3, #0]
 8004300:	f001 fa0a 	bl	8005718 <HAL_RCC_GetHCLKFreq>
 8004304:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800430a:	461a      	mov	r2, r3
 800430c:	4620      	mov	r0, r4
 800430e:	f002 ff57 	bl	80071c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f006 fd19 	bl	800ad4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004326:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f004 f8d7 	bl	80084e0 <USB_ReadInterrupts>
 8004332:	4603      	mov	r3, r0
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d10a      	bne.n	8004352 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f006 fcf6 	bl	800ad2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f002 0208 	and.w	r2, r2, #8
 8004350:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f004 f8c2 	bl	80084e0 <USB_ReadInterrupts>
 800435c:	4603      	mov	r3, r0
 800435e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004362:	2b80      	cmp	r3, #128	@ 0x80
 8004364:	d123      	bne.n	80043ae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004372:	2301      	movs	r3, #1
 8004374:	627b      	str	r3, [r7, #36]	@ 0x24
 8004376:	e014      	b.n	80043a2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d105      	bne.n	800439c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	b2db      	uxtb	r3, r3
 8004394:	4619      	mov	r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fb0a 	bl	80049b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	3301      	adds	r3, #1
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	791b      	ldrb	r3, [r3, #4]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d3e4      	bcc.n	8004378 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f004 f894 	bl	80084e0 <USB_ReadInterrupts>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043c2:	d13c      	bne.n	800443e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043c4:	2301      	movs	r3, #1
 80043c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043c8:	e02b      	b.n	8004422 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	3318      	adds	r3, #24
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d115      	bne.n	800441c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	da12      	bge.n	800441c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043fa:	4613      	mov	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	3317      	adds	r3, #23
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004412:	b2db      	uxtb	r3, r3
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 faca 	bl	80049b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	3301      	adds	r3, #1
 8004420:	627b      	str	r3, [r7, #36]	@ 0x24
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	791b      	ldrb	r3, [r3, #4]
 8004426:	461a      	mov	r2, r3
 8004428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442a:	4293      	cmp	r3, r2
 800442c:	d3cd      	bcc.n	80043ca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695a      	ldr	r2, [r3, #20]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800443c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f004 f84c 	bl	80084e0 <USB_ReadInterrupts>
 8004448:	4603      	mov	r3, r0
 800444a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800444e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004452:	d156      	bne.n	8004502 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004454:	2301      	movs	r3, #1
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
 8004458:	e045      	b.n	80044e6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800446e:	4613      	mov	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d12e      	bne.n	80044e0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004482:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004484:	2b00      	cmp	r3, #0
 8004486:	da2b      	bge.n	80044e0 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	0c1a      	lsrs	r2, r3, #16
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004492:	4053      	eors	r3, r2
 8004494:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004498:	2b00      	cmp	r3, #0
 800449a:	d121      	bne.n	80044e0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80044ae:	2201      	movs	r2, #1
 80044b0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10a      	bne.n	80044e0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044dc:	6053      	str	r3, [r2, #4]
            break;
 80044de:	e008      	b.n	80044f2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e2:	3301      	adds	r3, #1
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	791b      	ldrb	r3, [r3, #4]
 80044ea:	461a      	mov	r2, r3
 80044ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d3b3      	bcc.n	800445a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695a      	ldr	r2, [r3, #20]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f003 ffea 	bl	80084e0 <USB_ReadInterrupts>
 800450c:	4603      	mov	r3, r0
 800450e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004516:	d10a      	bne.n	800452e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f006 fc97 	bl	800ae4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800452c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f003 ffd4 	bl	80084e0 <USB_ReadInterrupts>
 8004538:	4603      	mov	r3, r0
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b04      	cmp	r3, #4
 8004540:	d115      	bne.n	800456e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f006 fc87 	bl	800ae68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	e000      	b.n	800456e <HAL_PCD_IRQHandler+0x93c>
      return;
 800456c:	bf00      	nop
    }
  }
}
 800456e:	3734      	adds	r7, #52	@ 0x34
 8004570:	46bd      	mov	sp, r7
 8004572:	bd90      	pop	{r4, r7, pc}

08004574 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_PCD_SetAddress+0x1a>
 800458a:	2302      	movs	r3, #2
 800458c:	e012      	b.n	80045b4 <HAL_PCD_SetAddress+0x40>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	4611      	mov	r1, r2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f003 ff33 	bl	8008410 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	461a      	mov	r2, r3
 80045ca:	4603      	mov	r3, r0
 80045cc:	70fb      	strb	r3, [r7, #3]
 80045ce:	460b      	mov	r3, r1
 80045d0:	803b      	strh	r3, [r7, #0]
 80045d2:	4613      	mov	r3, r2
 80045d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	da0f      	bge.n	8004602 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	f003 020f 	and.w	r2, r3, #15
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	3310      	adds	r3, #16
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	3304      	adds	r3, #4
 80045f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	705a      	strb	r2, [r3, #1]
 8004600:	e00f      	b.n	8004622 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	f003 020f 	and.w	r2, r3, #15
 8004608:	4613      	mov	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	4413      	add	r3, r2
 8004618:	3304      	adds	r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	b2da      	uxtb	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800462e:	883b      	ldrh	r3, [r7, #0]
 8004630:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	78ba      	ldrb	r2, [r7, #2]
 800463c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	785b      	ldrb	r3, [r3, #1]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004650:	78bb      	ldrb	r3, [r7, #2]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d102      	bne.n	800465c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_PCD_EP_Open+0xae>
 8004666:	2302      	movs	r3, #2
 8004668:	e00e      	b.n	8004688 <HAL_PCD_EP_Open+0xcc>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68f9      	ldr	r1, [r7, #12]
 8004678:	4618      	mov	r0, r3
 800467a:	f003 f8b3 	bl	80077e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004686:	7afb      	ldrb	r3, [r7, #11]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800469c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	da0f      	bge.n	80046c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	f003 020f 	and.w	r2, r3, #15
 80046aa:	4613      	mov	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	3310      	adds	r3, #16
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	4413      	add	r3, r2
 80046b8:	3304      	adds	r3, #4
 80046ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	705a      	strb	r2, [r3, #1]
 80046c2:	e00f      	b.n	80046e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	f003 020f 	and.w	r2, r3, #15
 80046ca:	4613      	mov	r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	3304      	adds	r3, #4
 80046dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_PCD_EP_Close+0x6e>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e00e      	b.n	800471c <HAL_PCD_EP_Close+0x8c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	4618      	mov	r0, r3
 800470e:	f003 f8f1 	bl	80078f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	607a      	str	r2, [r7, #4]
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	460b      	mov	r3, r1
 8004732:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004734:	7afb      	ldrb	r3, [r7, #11]
 8004736:	f003 020f 	and.w	r2, r3, #15
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	3304      	adds	r3, #4
 800474c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2200      	movs	r2, #0
 800475e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2200      	movs	r2, #0
 8004764:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004766:	7afb      	ldrb	r3, [r7, #11]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	b2da      	uxtb	r2, r3
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	799b      	ldrb	r3, [r3, #6]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d102      	bne.n	8004780 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	799b      	ldrb	r3, [r3, #6]
 8004788:	461a      	mov	r2, r3
 800478a:	6979      	ldr	r1, [r7, #20]
 800478c:	f003 f98e 	bl	8007aac <USB_EPStartXfer>

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	460b      	mov	r3, r1
 80047a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	f003 020f 	and.w	r2, r3, #15
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80047bc:	681b      	ldr	r3, [r3, #0]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
 80047d6:	460b      	mov	r3, r1
 80047d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047da:	7afb      	ldrb	r3, [r7, #11]
 80047dc:	f003 020f 	and.w	r2, r3, #15
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	3310      	adds	r3, #16
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	3304      	adds	r3, #4
 80047f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2201      	movs	r2, #1
 8004808:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800480a:	7afb      	ldrb	r3, [r7, #11]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	b2da      	uxtb	r2, r3
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	799b      	ldrb	r3, [r3, #6]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d102      	bne.n	8004824 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	799b      	ldrb	r3, [r3, #6]
 800482c:	461a      	mov	r2, r3
 800482e:	6979      	ldr	r1, [r7, #20]
 8004830:	f003 f93c 	bl	8007aac <USB_EPStartXfer>

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	460b      	mov	r3, r1
 8004848:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	7912      	ldrb	r2, [r2, #4]
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e04f      	b.n	80048fc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800485c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004860:	2b00      	cmp	r3, #0
 8004862:	da0f      	bge.n	8004884 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	f003 020f 	and.w	r2, r3, #15
 800486a:	4613      	mov	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	3310      	adds	r3, #16
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	4413      	add	r3, r2
 8004878:	3304      	adds	r3, #4
 800487a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	705a      	strb	r2, [r3, #1]
 8004882:	e00d      	b.n	80048a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004884:	78fa      	ldrb	r2, [r7, #3]
 8004886:	4613      	mov	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	4413      	add	r3, r2
 8004896:	3304      	adds	r3, #4
 8004898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_PCD_EP_SetStall+0x82>
 80048bc:	2302      	movs	r3, #2
 80048be:	e01d      	b.n	80048fc <HAL_PCD_EP_SetStall+0xbe>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68f9      	ldr	r1, [r7, #12]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f003 fcca 	bl	8008268 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	7999      	ldrb	r1, [r3, #6]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048ec:	461a      	mov	r2, r3
 80048ee:	f003 febb 	bl	8008668 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	7912      	ldrb	r2, [r2, #4]
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e042      	b.n	80049a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004926:	2b00      	cmp	r3, #0
 8004928:	da0f      	bge.n	800494a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	f003 020f 	and.w	r2, r3, #15
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	3310      	adds	r3, #16
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	3304      	adds	r3, #4
 8004940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	705a      	strb	r2, [r3, #1]
 8004948:	e00f      	b.n	800496a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	f003 020f 	and.w	r2, r3, #15
 8004950:	4613      	mov	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	4413      	add	r3, r2
 8004960:	3304      	adds	r3, #4
 8004962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_PCD_EP_ClrStall+0x86>
 8004986:	2302      	movs	r3, #2
 8004988:	e00e      	b.n	80049a8 <HAL_PCD_EP_ClrStall+0xa4>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68f9      	ldr	r1, [r7, #12]
 8004998:	4618      	mov	r0, r3
 800499a:	f003 fcd3 	bl	8008344 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	da0c      	bge.n	80049de <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	f003 020f 	and.w	r2, r3, #15
 80049ca:	4613      	mov	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	3310      	adds	r3, #16
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	4413      	add	r3, r2
 80049d8:	3304      	adds	r3, #4
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e00c      	b.n	80049f8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	f003 020f 	and.w	r2, r3, #15
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	3304      	adds	r3, #4
 80049f6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68f9      	ldr	r1, [r7, #12]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f003 faf2 	bl	8007fe8 <USB_EPStopXfer>
 8004a04:	4603      	mov	r3, r0
 8004a06:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a08:	7afb      	ldrb	r3, [r7, #11]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b08a      	sub	sp, #40	@ 0x28
 8004a16:	af02      	add	r7, sp, #8
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	3310      	adds	r3, #16
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4413      	add	r3, r2
 8004a36:	3304      	adds	r3, #4
 8004a38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d901      	bls.n	8004a4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e06b      	b.n	8004b22 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d902      	bls.n	8004a66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3303      	adds	r3, #3
 8004a6a:	089b      	lsrs	r3, r3, #2
 8004a6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a6e:	e02a      	b.n	8004ac6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d902      	bls.n	8004a8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	3303      	adds	r3, #3
 8004a90:	089b      	lsrs	r3, r3, #2
 8004a92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68d9      	ldr	r1, [r3, #12]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	6978      	ldr	r0, [r7, #20]
 8004aaa:	f003 fb47 	bl	800813c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	441a      	add	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	441a      	add	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d809      	bhi.n	8004af0 <PCD_WriteEmptyTxFifo+0xde>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d203      	bcs.n	8004af0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1bf      	bne.n	8004a70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d811      	bhi.n	8004b20 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	2201      	movs	r2, #1
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	43db      	mvns	r3, r3
 8004b16:	6939      	ldr	r1, [r7, #16]
 8004b18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	333c      	adds	r3, #60	@ 0x3c
 8004b44:	3304      	adds	r3, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	799b      	ldrb	r3, [r3, #6]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d17b      	bne.n	8004c5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d015      	beq.n	8004b98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	4a61      	ldr	r2, [pc, #388]	@ (8004cf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	f240 80b9 	bls.w	8004ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80b3 	beq.w	8004ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b94:	6093      	str	r3, [r2, #8]
 8004b96:	e0a7      	b.n	8004ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bae:	461a      	mov	r2, r3
 8004bb0:	2320      	movs	r3, #32
 8004bb2:	6093      	str	r3, [r2, #8]
 8004bb4:	e098      	b.n	8004ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f040 8093 	bne.w	8004ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	4a4b      	ldr	r2, [pc, #300]	@ (8004cf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d90f      	bls.n	8004bea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be0:	461a      	mov	r2, r3
 8004be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004be6:	6093      	str	r3, [r2, #8]
 8004be8:	e07e      	b.n	8004ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a1a      	ldr	r2, [r3, #32]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	0159      	lsls	r1, r3, #5
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	440b      	add	r3, r1
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c16:	1ad2      	subs	r2, r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d114      	bne.n	8004c4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c34:	461a      	mov	r2, r3
 8004c36:	2101      	movs	r1, #1
 8004c38:	f003 fd16 	bl	8008668 <USB_EP0_OutStart>
 8004c3c:	e006      	b.n	8004c4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	441a      	add	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f006 f836 	bl	800acc4 <HAL_PCD_DataOutStageCallback>
 8004c58:	e046      	b.n	8004ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	4a26      	ldr	r2, [pc, #152]	@ (8004cf8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d124      	bne.n	8004cac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c7e:	6093      	str	r3, [r2, #8]
 8004c80:	e032      	b.n	8004ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c98:	461a      	mov	r2, r3
 8004c9a:	2320      	movs	r3, #32
 8004c9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f006 f80d 	bl	800acc4 <HAL_PCD_DataOutStageCallback>
 8004caa:	e01d      	b.n	8004ce8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d114      	bne.n	8004cdc <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4413      	add	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d108      	bne.n	8004cdc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	f003 fcc6 	bl	8008668 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f005 ffee 	bl	800acc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	4f54300a 	.word	0x4f54300a
 8004cf8:	4f54310a 	.word	0x4f54310a

08004cfc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	333c      	adds	r3, #60	@ 0x3c
 8004d14:	3304      	adds	r3, #4
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4a15      	ldr	r2, [pc, #84]	@ (8004d84 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d90e      	bls.n	8004d50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d009      	beq.n	8004d50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f005 ffa5 	bl	800aca0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4a0a      	ldr	r2, [pc, #40]	@ (8004d84 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d90c      	bls.n	8004d78 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	799b      	ldrb	r3, [r3, #6]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d108      	bne.n	8004d78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d70:	461a      	mov	r2, r3
 8004d72:	2101      	movs	r1, #1
 8004d74:	f003 fc78 	bl	8008668 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	4f54300a 	.word	0x4f54300a

08004d88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
 8004d94:	4613      	mov	r3, r2
 8004d96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d107      	bne.n	8004db6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004da6:	883b      	ldrh	r3, [r7, #0]
 8004da8:	0419      	lsls	r1, r3, #16
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004db4:	e028      	b.n	8004e08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	73fb      	strb	r3, [r7, #15]
 8004dc8:	e00d      	b.n	8004de6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	3340      	adds	r3, #64	@ 0x40
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	0c1b      	lsrs	r3, r3, #16
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4413      	add	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	3301      	adds	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
 8004de6:	7bfa      	ldrb	r2, [r7, #15]
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d3ec      	bcc.n	8004dca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004df0:	883b      	ldrh	r3, [r7, #0]
 8004df2:	0418      	lsls	r0, r3, #16
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6819      	ldr	r1, [r3, #0]
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	4302      	orrs	r2, r0
 8004e00:	3340      	adds	r3, #64	@ 0x40
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	887a      	ldrh	r2, [r7, #2]
 8004e28:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e267      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d075      	beq.n	8004f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e6e:	4b88      	ldr	r3, [pc, #544]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 030c 	and.w	r3, r3, #12
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d00c      	beq.n	8004e94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e7a:	4b85      	ldr	r3, [pc, #532]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d112      	bne.n	8004eac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e86:	4b82      	ldr	r3, [pc, #520]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e92:	d10b      	bne.n	8004eac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e94:	4b7e      	ldr	r3, [pc, #504]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d05b      	beq.n	8004f58 <HAL_RCC_OscConfig+0x108>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d157      	bne.n	8004f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e242      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb4:	d106      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x74>
 8004eb6:	4b76      	ldr	r3, [pc, #472]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a75      	ldr	r2, [pc, #468]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e01d      	b.n	8004f00 <HAL_RCC_OscConfig+0xb0>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ecc:	d10c      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x98>
 8004ece:	4b70      	ldr	r3, [pc, #448]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a6f      	ldr	r2, [pc, #444]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	4b6d      	ldr	r3, [pc, #436]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a6c      	ldr	r2, [pc, #432]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	e00b      	b.n	8004f00 <HAL_RCC_OscConfig+0xb0>
 8004ee8:	4b69      	ldr	r3, [pc, #420]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a68      	ldr	r2, [pc, #416]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	4b66      	ldr	r3, [pc, #408]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a65      	ldr	r2, [pc, #404]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d013      	beq.n	8004f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7fd ff50 	bl	8002dac <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f10:	f7fd ff4c 	bl	8002dac <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b64      	cmp	r3, #100	@ 0x64
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e207      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f22:	4b5b      	ldr	r3, [pc, #364]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0xc0>
 8004f2e:	e014      	b.n	8004f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f30:	f7fd ff3c 	bl	8002dac <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f38:	f7fd ff38 	bl	8002dac <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b64      	cmp	r3, #100	@ 0x64
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e1f3      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f4a:	4b51      	ldr	r3, [pc, #324]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0xe8>
 8004f56:	e000      	b.n	8004f5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d063      	beq.n	800502e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f66:	4b4a      	ldr	r3, [pc, #296]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00b      	beq.n	8004f8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f72:	4b47      	ldr	r3, [pc, #284]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d11c      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f7e:	4b44      	ldr	r3, [pc, #272]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d116      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f8a:	4b41      	ldr	r3, [pc, #260]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x152>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d001      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e1c7      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	4937      	ldr	r1, [pc, #220]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fb6:	e03a      	b.n	800502e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d020      	beq.n	8005002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc0:	4b34      	ldr	r3, [pc, #208]	@ (8005094 <HAL_RCC_OscConfig+0x244>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc6:	f7fd fef1 	bl	8002dac <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fce:	f7fd feed 	bl	8002dac <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e1a8      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0f0      	beq.n	8004fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fec:	4b28      	ldr	r3, [pc, #160]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4925      	ldr	r1, [pc, #148]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	600b      	str	r3, [r1, #0]
 8005000:	e015      	b.n	800502e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005002:	4b24      	ldr	r3, [pc, #144]	@ (8005094 <HAL_RCC_OscConfig+0x244>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fd fed0 	bl	8002dac <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005010:	f7fd fecc 	bl	8002dac <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e187      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005022:	4b1b      	ldr	r3, [pc, #108]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d036      	beq.n	80050a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d016      	beq.n	8005070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005042:	4b15      	ldr	r3, [pc, #84]	@ (8005098 <HAL_RCC_OscConfig+0x248>)
 8005044:	2201      	movs	r2, #1
 8005046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005048:	f7fd feb0 	bl	8002dac <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005050:	f7fd feac 	bl	8002dac <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e167      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005062:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <HAL_RCC_OscConfig+0x240>)
 8005064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0f0      	beq.n	8005050 <HAL_RCC_OscConfig+0x200>
 800506e:	e01b      	b.n	80050a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005070:	4b09      	ldr	r3, [pc, #36]	@ (8005098 <HAL_RCC_OscConfig+0x248>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005076:	f7fd fe99 	bl	8002dac <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800507c:	e00e      	b.n	800509c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800507e:	f7fd fe95 	bl	8002dac <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d907      	bls.n	800509c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e150      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
 8005090:	40023800 	.word	0x40023800
 8005094:	42470000 	.word	0x42470000
 8005098:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800509c:	4b88      	ldr	r3, [pc, #544]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 800509e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1ea      	bne.n	800507e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 8097 	beq.w	80051e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050b6:	2300      	movs	r3, #0
 80050b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ba:	4b81      	ldr	r3, [pc, #516]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10f      	bne.n	80050e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	4b7d      	ldr	r3, [pc, #500]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	4a7c      	ldr	r2, [pc, #496]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 80050d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80050d6:	4b7a      	ldr	r3, [pc, #488]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050de:	60bb      	str	r3, [r7, #8]
 80050e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050e2:	2301      	movs	r3, #1
 80050e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e6:	4b77      	ldr	r3, [pc, #476]	@ (80052c4 <HAL_RCC_OscConfig+0x474>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d118      	bne.n	8005124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050f2:	4b74      	ldr	r3, [pc, #464]	@ (80052c4 <HAL_RCC_OscConfig+0x474>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a73      	ldr	r2, [pc, #460]	@ (80052c4 <HAL_RCC_OscConfig+0x474>)
 80050f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050fe:	f7fd fe55 	bl	8002dac <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005106:	f7fd fe51 	bl	8002dac <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e10c      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005118:	4b6a      	ldr	r3, [pc, #424]	@ (80052c4 <HAL_RCC_OscConfig+0x474>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f0      	beq.n	8005106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d106      	bne.n	800513a <HAL_RCC_OscConfig+0x2ea>
 800512c:	4b64      	ldr	r3, [pc, #400]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005130:	4a63      	ldr	r2, [pc, #396]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	6713      	str	r3, [r2, #112]	@ 0x70
 8005138:	e01c      	b.n	8005174 <HAL_RCC_OscConfig+0x324>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b05      	cmp	r3, #5
 8005140:	d10c      	bne.n	800515c <HAL_RCC_OscConfig+0x30c>
 8005142:	4b5f      	ldr	r3, [pc, #380]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005146:	4a5e      	ldr	r2, [pc, #376]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 8005148:	f043 0304 	orr.w	r3, r3, #4
 800514c:	6713      	str	r3, [r2, #112]	@ 0x70
 800514e:	4b5c      	ldr	r3, [pc, #368]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005152:	4a5b      	ldr	r2, [pc, #364]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	6713      	str	r3, [r2, #112]	@ 0x70
 800515a:	e00b      	b.n	8005174 <HAL_RCC_OscConfig+0x324>
 800515c:	4b58      	ldr	r3, [pc, #352]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005160:	4a57      	ldr	r2, [pc, #348]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 8005162:	f023 0301 	bic.w	r3, r3, #1
 8005166:	6713      	str	r3, [r2, #112]	@ 0x70
 8005168:	4b55      	ldr	r3, [pc, #340]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516c:	4a54      	ldr	r2, [pc, #336]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 800516e:	f023 0304 	bic.w	r3, r3, #4
 8005172:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d015      	beq.n	80051a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517c:	f7fd fe16 	bl	8002dac <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005182:	e00a      	b.n	800519a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005184:	f7fd fe12 	bl	8002dac <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e0cb      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519a:	4b49      	ldr	r3, [pc, #292]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0ee      	beq.n	8005184 <HAL_RCC_OscConfig+0x334>
 80051a6:	e014      	b.n	80051d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a8:	f7fd fe00 	bl	8002dac <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ae:	e00a      	b.n	80051c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b0:	f7fd fdfc 	bl	8002dac <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e0b5      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c6:	4b3e      	ldr	r3, [pc, #248]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1ee      	bne.n	80051b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d105      	bne.n	80051e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d8:	4b39      	ldr	r3, [pc, #228]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 80051da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051dc:	4a38      	ldr	r2, [pc, #224]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 80051de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80a1 	beq.w	8005330 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ee:	4b34      	ldr	r3, [pc, #208]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 030c 	and.w	r3, r3, #12
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d05c      	beq.n	80052b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d141      	bne.n	8005286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005202:	4b31      	ldr	r3, [pc, #196]	@ (80052c8 <HAL_RCC_OscConfig+0x478>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005208:	f7fd fdd0 	bl	8002dac <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005210:	f7fd fdcc 	bl	8002dac <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e087      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005222:	4b27      	ldr	r3, [pc, #156]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69da      	ldr	r2, [r3, #28]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523c:	019b      	lsls	r3, r3, #6
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	3b01      	subs	r3, #1
 8005248:	041b      	lsls	r3, r3, #16
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	061b      	lsls	r3, r3, #24
 8005252:	491b      	ldr	r1, [pc, #108]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 8005254:	4313      	orrs	r3, r2
 8005256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005258:	4b1b      	ldr	r3, [pc, #108]	@ (80052c8 <HAL_RCC_OscConfig+0x478>)
 800525a:	2201      	movs	r2, #1
 800525c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525e:	f7fd fda5 	bl	8002dac <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005264:	e008      	b.n	8005278 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005266:	f7fd fda1 	bl	8002dac <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e05c      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005278:	4b11      	ldr	r3, [pc, #68]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0f0      	beq.n	8005266 <HAL_RCC_OscConfig+0x416>
 8005284:	e054      	b.n	8005330 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005286:	4b10      	ldr	r3, [pc, #64]	@ (80052c8 <HAL_RCC_OscConfig+0x478>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528c:	f7fd fd8e 	bl	8002dac <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005294:	f7fd fd8a 	bl	8002dac <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e045      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a6:	4b06      	ldr	r3, [pc, #24]	@ (80052c0 <HAL_RCC_OscConfig+0x470>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x444>
 80052b2:	e03d      	b.n	8005330 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d107      	bne.n	80052cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e038      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
 80052c0:	40023800 	.word	0x40023800
 80052c4:	40007000 	.word	0x40007000
 80052c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052cc:	4b1b      	ldr	r3, [pc, #108]	@ (800533c <HAL_RCC_OscConfig+0x4ec>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d028      	beq.n	800532c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d121      	bne.n	800532c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d11a      	bne.n	800532c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052fc:	4013      	ands	r3, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005304:	4293      	cmp	r3, r2
 8005306:	d111      	bne.n	800532c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	3b01      	subs	r3, #1
 8005316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005318:	429a      	cmp	r2, r3
 800531a:	d107      	bne.n	800532c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005328:	429a      	cmp	r2, r3
 800532a:	d001      	beq.n	8005330 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e000      	b.n	8005332 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40023800 	.word	0x40023800

08005340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e0cc      	b.n	80054ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005354:	4b68      	ldr	r3, [pc, #416]	@ (80054f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d90c      	bls.n	800537c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005362:	4b65      	ldr	r3, [pc, #404]	@ (80054f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536a:	4b63      	ldr	r3, [pc, #396]	@ (80054f8 <HAL_RCC_ClockConfig+0x1b8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d001      	beq.n	800537c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0b8      	b.n	80054ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d020      	beq.n	80053ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005394:	4b59      	ldr	r3, [pc, #356]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	4a58      	ldr	r2, [pc, #352]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800539e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053ac:	4b53      	ldr	r3, [pc, #332]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	4a52      	ldr	r2, [pc, #328]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b8:	4b50      	ldr	r3, [pc, #320]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	494d      	ldr	r1, [pc, #308]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d044      	beq.n	8005460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d107      	bne.n	80053ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053de:	4b47      	ldr	r3, [pc, #284]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d119      	bne.n	800541e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e07f      	b.n	80054ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d003      	beq.n	80053fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d107      	bne.n	800540e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053fe:	4b3f      	ldr	r3, [pc, #252]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d109      	bne.n	800541e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e06f      	b.n	80054ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540e:	4b3b      	ldr	r3, [pc, #236]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e067      	b.n	80054ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800541e:	4b37      	ldr	r3, [pc, #220]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f023 0203 	bic.w	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	4934      	ldr	r1, [pc, #208]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 800542c:	4313      	orrs	r3, r2
 800542e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005430:	f7fd fcbc 	bl	8002dac <HAL_GetTick>
 8005434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005436:	e00a      	b.n	800544e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005438:	f7fd fcb8 	bl	8002dac <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e04f      	b.n	80054ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544e:	4b2b      	ldr	r3, [pc, #172]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 020c 	and.w	r2, r3, #12
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	429a      	cmp	r2, r3
 800545e:	d1eb      	bne.n	8005438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005460:	4b25      	ldr	r3, [pc, #148]	@ (80054f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d20c      	bcs.n	8005488 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546e:	4b22      	ldr	r3, [pc, #136]	@ (80054f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005476:	4b20      	ldr	r3, [pc, #128]	@ (80054f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d001      	beq.n	8005488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e032      	b.n	80054ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005494:	4b19      	ldr	r3, [pc, #100]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4916      	ldr	r1, [pc, #88]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054b2:	4b12      	ldr	r3, [pc, #72]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	490e      	ldr	r1, [pc, #56]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054c6:	f000 f821 	bl	800550c <HAL_RCC_GetSysClockFreq>
 80054ca:	4602      	mov	r2, r0
 80054cc:	4b0b      	ldr	r3, [pc, #44]	@ (80054fc <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	490a      	ldr	r1, [pc, #40]	@ (8005500 <HAL_RCC_ClockConfig+0x1c0>)
 80054d8:	5ccb      	ldrb	r3, [r1, r3]
 80054da:	fa22 f303 	lsr.w	r3, r2, r3
 80054de:	4a09      	ldr	r2, [pc, #36]	@ (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 80054e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80054e2:	4b09      	ldr	r3, [pc, #36]	@ (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fd fc1c 	bl	8002d24 <HAL_InitTick>

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40023c00 	.word	0x40023c00
 80054fc:	40023800 	.word	0x40023800
 8005500:	08014ea8 	.word	0x08014ea8
 8005504:	20000004 	.word	0x20000004
 8005508:	20000008 	.word	0x20000008

0800550c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800550c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005510:	b094      	sub	sp, #80	@ 0x50
 8005512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005524:	4b79      	ldr	r3, [pc, #484]	@ (800570c <HAL_RCC_GetSysClockFreq+0x200>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 030c 	and.w	r3, r3, #12
 800552c:	2b08      	cmp	r3, #8
 800552e:	d00d      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0x40>
 8005530:	2b08      	cmp	r3, #8
 8005532:	f200 80e1 	bhi.w	80056f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <HAL_RCC_GetSysClockFreq+0x34>
 800553a:	2b04      	cmp	r3, #4
 800553c:	d003      	beq.n	8005546 <HAL_RCC_GetSysClockFreq+0x3a>
 800553e:	e0db      	b.n	80056f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005540:	4b73      	ldr	r3, [pc, #460]	@ (8005710 <HAL_RCC_GetSysClockFreq+0x204>)
 8005542:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005544:	e0db      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005546:	4b73      	ldr	r3, [pc, #460]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x208>)
 8005548:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800554a:	e0d8      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800554c:	4b6f      	ldr	r3, [pc, #444]	@ (800570c <HAL_RCC_GetSysClockFreq+0x200>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005554:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005556:	4b6d      	ldr	r3, [pc, #436]	@ (800570c <HAL_RCC_GetSysClockFreq+0x200>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d063      	beq.n	800562a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005562:	4b6a      	ldr	r3, [pc, #424]	@ (800570c <HAL_RCC_GetSysClockFreq+0x200>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	099b      	lsrs	r3, r3, #6
 8005568:	2200      	movs	r2, #0
 800556a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800556c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800556e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005574:	633b      	str	r3, [r7, #48]	@ 0x30
 8005576:	2300      	movs	r3, #0
 8005578:	637b      	str	r3, [r7, #52]	@ 0x34
 800557a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800557e:	4622      	mov	r2, r4
 8005580:	462b      	mov	r3, r5
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f04f 0100 	mov.w	r1, #0
 800558a:	0159      	lsls	r1, r3, #5
 800558c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005590:	0150      	lsls	r0, r2, #5
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4621      	mov	r1, r4
 8005598:	1a51      	subs	r1, r2, r1
 800559a:	6139      	str	r1, [r7, #16]
 800559c:	4629      	mov	r1, r5
 800559e:	eb63 0301 	sbc.w	r3, r3, r1
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055b0:	4659      	mov	r1, fp
 80055b2:	018b      	lsls	r3, r1, #6
 80055b4:	4651      	mov	r1, sl
 80055b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055ba:	4651      	mov	r1, sl
 80055bc:	018a      	lsls	r2, r1, #6
 80055be:	4651      	mov	r1, sl
 80055c0:	ebb2 0801 	subs.w	r8, r2, r1
 80055c4:	4659      	mov	r1, fp
 80055c6:	eb63 0901 	sbc.w	r9, r3, r1
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055de:	4690      	mov	r8, r2
 80055e0:	4699      	mov	r9, r3
 80055e2:	4623      	mov	r3, r4
 80055e4:	eb18 0303 	adds.w	r3, r8, r3
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	462b      	mov	r3, r5
 80055ec:	eb49 0303 	adc.w	r3, r9, r3
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055fe:	4629      	mov	r1, r5
 8005600:	024b      	lsls	r3, r1, #9
 8005602:	4621      	mov	r1, r4
 8005604:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005608:	4621      	mov	r1, r4
 800560a:	024a      	lsls	r2, r1, #9
 800560c:	4610      	mov	r0, r2
 800560e:	4619      	mov	r1, r3
 8005610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005612:	2200      	movs	r2, #0
 8005614:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005616:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005618:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800561c:	f7fb fb44 	bl	8000ca8 <__aeabi_uldivmod>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4613      	mov	r3, r2
 8005626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005628:	e058      	b.n	80056dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800562a:	4b38      	ldr	r3, [pc, #224]	@ (800570c <HAL_RCC_GetSysClockFreq+0x200>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	099b      	lsrs	r3, r3, #6
 8005630:	2200      	movs	r2, #0
 8005632:	4618      	mov	r0, r3
 8005634:	4611      	mov	r1, r2
 8005636:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800563a:	623b      	str	r3, [r7, #32]
 800563c:	2300      	movs	r3, #0
 800563e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005640:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005644:	4642      	mov	r2, r8
 8005646:	464b      	mov	r3, r9
 8005648:	f04f 0000 	mov.w	r0, #0
 800564c:	f04f 0100 	mov.w	r1, #0
 8005650:	0159      	lsls	r1, r3, #5
 8005652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005656:	0150      	lsls	r0, r2, #5
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4641      	mov	r1, r8
 800565e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005662:	4649      	mov	r1, r9
 8005664:	eb63 0b01 	sbc.w	fp, r3, r1
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005674:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005678:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800567c:	ebb2 040a 	subs.w	r4, r2, sl
 8005680:	eb63 050b 	sbc.w	r5, r3, fp
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	00eb      	lsls	r3, r5, #3
 800568e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005692:	00e2      	lsls	r2, r4, #3
 8005694:	4614      	mov	r4, r2
 8005696:	461d      	mov	r5, r3
 8005698:	4643      	mov	r3, r8
 800569a:	18e3      	adds	r3, r4, r3
 800569c:	603b      	str	r3, [r7, #0]
 800569e:	464b      	mov	r3, r9
 80056a0:	eb45 0303 	adc.w	r3, r5, r3
 80056a4:	607b      	str	r3, [r7, #4]
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056b2:	4629      	mov	r1, r5
 80056b4:	028b      	lsls	r3, r1, #10
 80056b6:	4621      	mov	r1, r4
 80056b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056bc:	4621      	mov	r1, r4
 80056be:	028a      	lsls	r2, r1, #10
 80056c0:	4610      	mov	r0, r2
 80056c2:	4619      	mov	r1, r3
 80056c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056c6:	2200      	movs	r2, #0
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	61fa      	str	r2, [r7, #28]
 80056cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056d0:	f7fb faea 	bl	8000ca8 <__aeabi_uldivmod>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4613      	mov	r3, r2
 80056da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80056dc:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <HAL_RCC_GetSysClockFreq+0x200>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	0c1b      	lsrs	r3, r3, #16
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	3301      	adds	r3, #1
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80056ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056f6:	e002      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056f8:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <HAL_RCC_GetSysClockFreq+0x204>)
 80056fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005700:	4618      	mov	r0, r3
 8005702:	3750      	adds	r7, #80	@ 0x50
 8005704:	46bd      	mov	sp, r7
 8005706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800570a:	bf00      	nop
 800570c:	40023800 	.word	0x40023800
 8005710:	00f42400 	.word	0x00f42400
 8005714:	007a1200 	.word	0x007a1200

08005718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800571c:	4b03      	ldr	r3, [pc, #12]	@ (800572c <HAL_RCC_GetHCLKFreq+0x14>)
 800571e:	681b      	ldr	r3, [r3, #0]
}
 8005720:	4618      	mov	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20000004 	.word	0x20000004

08005730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005734:	f7ff fff0 	bl	8005718 <HAL_RCC_GetHCLKFreq>
 8005738:	4602      	mov	r2, r0
 800573a:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	0a9b      	lsrs	r3, r3, #10
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	4903      	ldr	r1, [pc, #12]	@ (8005754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40023800 	.word	0x40023800
 8005754:	08014eb8 	.word	0x08014eb8

08005758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800575c:	f7ff ffdc 	bl	8005718 <HAL_RCC_GetHCLKFreq>
 8005760:	4602      	mov	r2, r0
 8005762:	4b05      	ldr	r3, [pc, #20]	@ (8005778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	0b5b      	lsrs	r3, r3, #13
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	4903      	ldr	r1, [pc, #12]	@ (800577c <HAL_RCC_GetPCLK2Freq+0x24>)
 800576e:	5ccb      	ldrb	r3, [r1, r3]
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005774:	4618      	mov	r0, r3
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40023800 	.word	0x40023800
 800577c:	08014eb8 	.word	0x08014eb8

08005780 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e038      	b.n	8005808 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f7fd f93e 	bl	8002a2c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3308      	adds	r3, #8
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f001 fbcc 	bl	8006f58 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	461a      	mov	r2, r3
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	f001 fc2e 	bl	800702c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6858      	ldr	r0, [r3, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	f001 fc53 	bl	8007088 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	6892      	ldr	r2, [r2, #8]
 80057ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	6892      	ldr	r2, [r2, #8]
 80057f6:	f041 0101 	orr.w	r1, r1, #1
 80057fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e041      	b.n	80058a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fd f834 	bl	80028a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3304      	adds	r3, #4
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f000 fa80 	bl	8005d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d001      	beq.n	80058c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e046      	b.n	8005956 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a23      	ldr	r2, [pc, #140]	@ (8005964 <HAL_TIM_Base_Start+0xb4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d022      	beq.n	8005920 <HAL_TIM_Base_Start+0x70>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e2:	d01d      	beq.n	8005920 <HAL_TIM_Base_Start+0x70>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005968 <HAL_TIM_Base_Start+0xb8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d018      	beq.n	8005920 <HAL_TIM_Base_Start+0x70>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1e      	ldr	r2, [pc, #120]	@ (800596c <HAL_TIM_Base_Start+0xbc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <HAL_TIM_Base_Start+0x70>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005970 <HAL_TIM_Base_Start+0xc0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00e      	beq.n	8005920 <HAL_TIM_Base_Start+0x70>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1b      	ldr	r2, [pc, #108]	@ (8005974 <HAL_TIM_Base_Start+0xc4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d009      	beq.n	8005920 <HAL_TIM_Base_Start+0x70>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a19      	ldr	r2, [pc, #100]	@ (8005978 <HAL_TIM_Base_Start+0xc8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d004      	beq.n	8005920 <HAL_TIM_Base_Start+0x70>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a18      	ldr	r2, [pc, #96]	@ (800597c <HAL_TIM_Base_Start+0xcc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d111      	bne.n	8005944 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b06      	cmp	r3, #6
 8005930:	d010      	beq.n	8005954 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 0201 	orr.w	r2, r2, #1
 8005940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005942:	e007      	b.n	8005954 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0201 	orr.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40010000 	.word	0x40010000
 8005968:	40000400 	.word	0x40000400
 800596c:	40000800 	.word	0x40000800
 8005970:	40000c00 	.word	0x40000c00
 8005974:	40010400 	.word	0x40010400
 8005978:	40014000 	.word	0x40014000
 800597c:	40001800 	.word	0x40001800

08005980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d020      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01b      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0202 	mvn.w	r2, #2
 80059b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f9a3 	bl	8005d16 <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f995 	bl	8005d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f9a6 	bl	8005d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d020      	beq.n	8005a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01b      	beq.n	8005a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0204 	mvn.w	r2, #4
 8005a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f97d 	bl	8005d16 <HAL_TIM_IC_CaptureCallback>
 8005a1c:	e005      	b.n	8005a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f96f 	bl	8005d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f980 	bl	8005d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d020      	beq.n	8005a7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01b      	beq.n	8005a7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0208 	mvn.w	r2, #8
 8005a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2204      	movs	r2, #4
 8005a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f957 	bl	8005d16 <HAL_TIM_IC_CaptureCallback>
 8005a68:	e005      	b.n	8005a76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f949 	bl	8005d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f95a 	bl	8005d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d020      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01b      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0210 	mvn.w	r2, #16
 8005a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f931 	bl	8005d16 <HAL_TIM_IC_CaptureCallback>
 8005ab4:	e005      	b.n	8005ac2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f923 	bl	8005d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f934 	bl	8005d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00c      	beq.n	8005aec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0201 	mvn.w	r2, #1
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f901 	bl	8005cee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00c      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fae8 	bl	80060e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00c      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d007      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f905 	bl	8005d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0220 	mvn.w	r2, #32
 8005b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 faba 	bl	80060cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_TIM_ConfigClockSource+0x1c>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e0b4      	b.n	8005ce6 <HAL_TIM_ConfigClockSource+0x186>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ba2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bb4:	d03e      	beq.n	8005c34 <HAL_TIM_ConfigClockSource+0xd4>
 8005bb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bba:	f200 8087 	bhi.w	8005ccc <HAL_TIM_ConfigClockSource+0x16c>
 8005bbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bc2:	f000 8086 	beq.w	8005cd2 <HAL_TIM_ConfigClockSource+0x172>
 8005bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bca:	d87f      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x16c>
 8005bcc:	2b70      	cmp	r3, #112	@ 0x70
 8005bce:	d01a      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0xa6>
 8005bd0:	2b70      	cmp	r3, #112	@ 0x70
 8005bd2:	d87b      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x16c>
 8005bd4:	2b60      	cmp	r3, #96	@ 0x60
 8005bd6:	d050      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x11a>
 8005bd8:	2b60      	cmp	r3, #96	@ 0x60
 8005bda:	d877      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x16c>
 8005bdc:	2b50      	cmp	r3, #80	@ 0x50
 8005bde:	d03c      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0xfa>
 8005be0:	2b50      	cmp	r3, #80	@ 0x50
 8005be2:	d873      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x16c>
 8005be4:	2b40      	cmp	r3, #64	@ 0x40
 8005be6:	d058      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x13a>
 8005be8:	2b40      	cmp	r3, #64	@ 0x40
 8005bea:	d86f      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x16c>
 8005bec:	2b30      	cmp	r3, #48	@ 0x30
 8005bee:	d064      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0x15a>
 8005bf0:	2b30      	cmp	r3, #48	@ 0x30
 8005bf2:	d86b      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x16c>
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d060      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0x15a>
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d867      	bhi.n	8005ccc <HAL_TIM_ConfigClockSource+0x16c>
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d05c      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0x15a>
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d05a      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0x15a>
 8005c04:	e062      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c16:	f000 f9bd 	bl	8005f94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	609a      	str	r2, [r3, #8]
      break;
 8005c32:	e04f      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c44:	f000 f9a6 	bl	8005f94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c56:	609a      	str	r2, [r3, #8]
      break;
 8005c58:	e03c      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c66:	461a      	mov	r2, r3
 8005c68:	f000 f91a 	bl	8005ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2150      	movs	r1, #80	@ 0x50
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 f973 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005c78:	e02c      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c86:	461a      	mov	r2, r3
 8005c88:	f000 f939 	bl	8005efe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2160      	movs	r1, #96	@ 0x60
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 f963 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005c98:	e01c      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f000 f8fa 	bl	8005ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2140      	movs	r1, #64	@ 0x40
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 f953 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005cb8:	e00c      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f000 f94a 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005cca:	e003      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd0:	e000      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a43      	ldr	r2, [pc, #268]	@ (8005e74 <TIM_Base_SetConfig+0x120>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d013      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d72:	d00f      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a40      	ldr	r2, [pc, #256]	@ (8005e78 <TIM_Base_SetConfig+0x124>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00b      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e7c <TIM_Base_SetConfig+0x128>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d007      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3e      	ldr	r2, [pc, #248]	@ (8005e80 <TIM_Base_SetConfig+0x12c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d003      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a3d      	ldr	r2, [pc, #244]	@ (8005e84 <TIM_Base_SetConfig+0x130>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d108      	bne.n	8005da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a32      	ldr	r2, [pc, #200]	@ (8005e74 <TIM_Base_SetConfig+0x120>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d02b      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db4:	d027      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2f      	ldr	r2, [pc, #188]	@ (8005e78 <TIM_Base_SetConfig+0x124>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d023      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8005e7c <TIM_Base_SetConfig+0x128>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d01f      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8005e80 <TIM_Base_SetConfig+0x12c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d01b      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8005e84 <TIM_Base_SetConfig+0x130>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d017      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8005e88 <TIM_Base_SetConfig+0x134>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d013      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2a      	ldr	r2, [pc, #168]	@ (8005e8c <TIM_Base_SetConfig+0x138>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00f      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a29      	ldr	r2, [pc, #164]	@ (8005e90 <TIM_Base_SetConfig+0x13c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00b      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a28      	ldr	r2, [pc, #160]	@ (8005e94 <TIM_Base_SetConfig+0x140>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d007      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a27      	ldr	r2, [pc, #156]	@ (8005e98 <TIM_Base_SetConfig+0x144>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d003      	beq.n	8005e06 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a26      	ldr	r2, [pc, #152]	@ (8005e9c <TIM_Base_SetConfig+0x148>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d108      	bne.n	8005e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a0e      	ldr	r2, [pc, #56]	@ (8005e74 <TIM_Base_SetConfig+0x120>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d003      	beq.n	8005e46 <TIM_Base_SetConfig+0xf2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a10      	ldr	r2, [pc, #64]	@ (8005e84 <TIM_Base_SetConfig+0x130>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d103      	bne.n	8005e4e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f043 0204 	orr.w	r2, r3, #4
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]
}
 8005e66:	bf00      	nop
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40000c00 	.word	0x40000c00
 8005e84:	40010400 	.word	0x40010400
 8005e88:	40014000 	.word	0x40014000
 8005e8c:	40014400 	.word	0x40014400
 8005e90:	40014800 	.word	0x40014800
 8005e94:	40001800 	.word	0x40001800
 8005e98:	40001c00 	.word	0x40001c00
 8005e9c:	40002000 	.word	0x40002000

08005ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0201 	bic.w	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 030a 	bic.w	r3, r3, #10
 8005edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b087      	sub	sp, #28
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	f023 0210 	bic.w	r2, r3, #16
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	031b      	lsls	r3, r3, #12
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f043 0307 	orr.w	r3, r3, #7
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	609a      	str	r2, [r3, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	021a      	lsls	r2, r3, #8
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	609a      	str	r2, [r3, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e05a      	b.n	80060a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006012:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4313      	orrs	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a21      	ldr	r2, [pc, #132]	@ (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d022      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006038:	d01d      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1d      	ldr	r2, [pc, #116]	@ (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d018      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1b      	ldr	r2, [pc, #108]	@ (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a1a      	ldr	r2, [pc, #104]	@ (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00e      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a18      	ldr	r2, [pc, #96]	@ (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d009      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a17      	ldr	r2, [pc, #92]	@ (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d004      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a15      	ldr	r2, [pc, #84]	@ (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d10c      	bne.n	8006090 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800607c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	4313      	orrs	r3, r2
 8006086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40010400 	.word	0x40010400
 80060c4:	40014000 	.word	0x40014000
 80060c8:	40001800 	.word	0x40001800

080060cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e042      	b.n	800618c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fc fbea 	bl	80028f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2224      	movs	r2, #36	@ 0x24
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fc99 	bl	8006a70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800614c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695a      	ldr	r2, [r3, #20]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800615c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800616c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b0ba      	sub	sp, #232	@ 0xe8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80061d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10f      	bne.n	80061fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <HAL_UART_IRQHandler+0x66>
 80061e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fb7e 	bl	80068f4 <UART_Receive_IT>
      return;
 80061f8:	e273      	b.n	80066e2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 80de 	beq.w	80063c0 <HAL_UART_IRQHandler+0x22c>
 8006204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d106      	bne.n	800621e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006214:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 80d1 	beq.w	80063c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800621e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00b      	beq.n	8006242 <HAL_UART_IRQHandler+0xae>
 800622a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800622e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623a:	f043 0201 	orr.w	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <HAL_UART_IRQHandler+0xd2>
 800624e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d005      	beq.n	8006266 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625e:	f043 0202 	orr.w	r2, r3, #2
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <HAL_UART_IRQHandler+0xf6>
 8006272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d005      	beq.n	800628a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006282:	f043 0204 	orr.w	r2, r3, #4
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800628a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d011      	beq.n	80062ba <HAL_UART_IRQHandler+0x126>
 8006296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d105      	bne.n	80062ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b2:	f043 0208 	orr.w	r2, r3, #8
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 820a 	beq.w	80066d8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <HAL_UART_IRQHandler+0x14e>
 80062d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fb09 	bl	80068f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ec:	2b40      	cmp	r3, #64	@ 0x40
 80062ee:	bf0c      	ite	eq
 80062f0:	2301      	moveq	r3, #1
 80062f2:	2300      	movne	r3, #0
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d103      	bne.n	800630e <HAL_UART_IRQHandler+0x17a>
 8006306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d04f      	beq.n	80063ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fa14 	bl	800673c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631e:	2b40      	cmp	r3, #64	@ 0x40
 8006320:	d141      	bne.n	80063a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3314      	adds	r3, #20
 8006328:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006338:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800633c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006340:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3314      	adds	r3, #20
 800634a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800634e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006352:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800635a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1d9      	bne.n	8006322 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d013      	beq.n	800639e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637a:	4a8a      	ldr	r2, [pc, #552]	@ (80065a4 <HAL_UART_IRQHandler+0x410>)
 800637c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006382:	4618      	mov	r0, r3
 8006384:	f7fc ff3e 	bl	8003204 <HAL_DMA_Abort_IT>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d016      	beq.n	80063bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006398:	4610      	mov	r0, r2
 800639a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639c:	e00e      	b.n	80063bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f9b6 	bl	8006710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a4:	e00a      	b.n	80063bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f9b2 	bl	8006710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ac:	e006      	b.n	80063bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f9ae 	bl	8006710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80063ba:	e18d      	b.n	80066d8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063bc:	bf00      	nop
    return;
 80063be:	e18b      	b.n	80066d8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	f040 8167 	bne.w	8006698 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 8160 	beq.w	8006698 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80063d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063dc:	f003 0310 	and.w	r3, r3, #16
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 8159 	beq.w	8006698 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063e6:	2300      	movs	r3, #0
 80063e8:	60bb      	str	r3, [r7, #8]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	60bb      	str	r3, [r7, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	60bb      	str	r3, [r7, #8]
 80063fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006406:	2b40      	cmp	r3, #64	@ 0x40
 8006408:	f040 80ce 	bne.w	80065a8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006418:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 80a9 	beq.w	8006574 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800642a:	429a      	cmp	r2, r3
 800642c:	f080 80a2 	bcs.w	8006574 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006436:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006442:	f000 8088 	beq.w	8006556 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	330c      	adds	r3, #12
 800644c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800645c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006464:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	330c      	adds	r3, #12
 800646e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006472:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800647e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800648a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1d9      	bne.n	8006446 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3314      	adds	r3, #20
 8006498:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80064a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064a4:	f023 0301 	bic.w	r3, r3, #1
 80064a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3314      	adds	r3, #20
 80064b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80064b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80064ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80064be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80064c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e1      	bne.n	8006492 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3314      	adds	r3, #20
 80064d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3314      	adds	r3, #20
 80064ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e3      	bne.n	80064ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	330c      	adds	r3, #12
 800651a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800651e:	e853 3f00 	ldrex	r3, [r3]
 8006522:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006524:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006526:	f023 0310 	bic.w	r3, r3, #16
 800652a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	330c      	adds	r3, #12
 8006534:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006538:	65ba      	str	r2, [r7, #88]	@ 0x58
 800653a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800653e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006540:	e841 2300 	strex	r3, r2, [r1]
 8006544:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e3      	bne.n	8006514 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006550:	4618      	mov	r0, r3
 8006552:	f7fc fde7 	bl	8003124 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2202      	movs	r2, #2
 800655a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006564:	b29b      	uxth	r3, r3
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	b29b      	uxth	r3, r3
 800656a:	4619      	mov	r1, r3
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f8d9 	bl	8006724 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006572:	e0b3      	b.n	80066dc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006578:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800657c:	429a      	cmp	r2, r3
 800657e:	f040 80ad 	bne.w	80066dc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800658c:	f040 80a6 	bne.w	80066dc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f8c1 	bl	8006724 <HAL_UARTEx_RxEventCallback>
      return;
 80065a2:	e09b      	b.n	80066dc <HAL_UART_IRQHandler+0x548>
 80065a4:	08006803 	.word	0x08006803
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 808e 	beq.w	80066e0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80065c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8089 	beq.w	80066e0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	330c      	adds	r3, #12
 80065ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80065f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80065f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e3      	bne.n	80065ce <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3314      	adds	r3, #20
 800660c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	623b      	str	r3, [r7, #32]
   return(result);
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	f023 0301 	bic.w	r3, r3, #1
 800661c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3314      	adds	r3, #20
 8006626:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800662a:	633a      	str	r2, [r7, #48]	@ 0x30
 800662c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e3      	bne.n	8006606 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	330c      	adds	r3, #12
 8006652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	60fb      	str	r3, [r7, #12]
   return(result);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0310 	bic.w	r3, r3, #16
 8006662:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006670:	61fa      	str	r2, [r7, #28]
 8006672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	69b9      	ldr	r1, [r7, #24]
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	617b      	str	r3, [r7, #20]
   return(result);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e3      	bne.n	800664c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800668a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f847 	bl	8006724 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006696:	e023      	b.n	80066e0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800669c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d009      	beq.n	80066b8 <HAL_UART_IRQHandler+0x524>
 80066a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f8b7 	bl	8006824 <UART_Transmit_IT>
    return;
 80066b6:	e014      	b.n	80066e2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00e      	beq.n	80066e2 <HAL_UART_IRQHandler+0x54e>
 80066c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f8f7 	bl	80068c4 <UART_EndTransmit_IT>
    return;
 80066d6:	e004      	b.n	80066e2 <HAL_UART_IRQHandler+0x54e>
    return;
 80066d8:	bf00      	nop
 80066da:	e002      	b.n	80066e2 <HAL_UART_IRQHandler+0x54e>
      return;
 80066dc:	bf00      	nop
 80066de:	e000      	b.n	80066e2 <HAL_UART_IRQHandler+0x54e>
      return;
 80066e0:	bf00      	nop
  }
}
 80066e2:	37e8      	adds	r7, #232	@ 0xe8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800673c:	b480      	push	{r7}
 800673e:	b095      	sub	sp, #84	@ 0x54
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	330c      	adds	r3, #12
 800674a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674e:	e853 3f00 	ldrex	r3, [r3]
 8006752:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006756:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800675a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	330c      	adds	r3, #12
 8006762:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006764:	643a      	str	r2, [r7, #64]	@ 0x40
 8006766:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006768:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800676a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800676c:	e841 2300 	strex	r3, r2, [r1]
 8006770:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e5      	bne.n	8006744 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3314      	adds	r3, #20
 800677e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	61fb      	str	r3, [r7, #28]
   return(result);
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f023 0301 	bic.w	r3, r3, #1
 800678e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3314      	adds	r3, #20
 8006796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006798:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800679a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800679e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e5      	bne.n	8006778 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d119      	bne.n	80067e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	330c      	adds	r3, #12
 80067ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f023 0310 	bic.w	r3, r3, #16
 80067ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	330c      	adds	r3, #12
 80067d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067d4:	61ba      	str	r2, [r7, #24]
 80067d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	6979      	ldr	r1, [r7, #20]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	e841 2300 	strex	r3, r2, [r1]
 80067e0:	613b      	str	r3, [r7, #16]
   return(result);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e5      	bne.n	80067b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80067f6:	bf00      	nop
 80067f8:	3754      	adds	r7, #84	@ 0x54
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f7ff ff7a 	bl	8006710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800681c:	bf00      	nop
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b21      	cmp	r3, #33	@ 0x21
 8006836:	d13e      	bne.n	80068b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006840:	d114      	bne.n	800686c <UART_Transmit_IT+0x48>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d110      	bne.n	800686c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	461a      	mov	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800685e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	1c9a      	adds	r2, r3, #2
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	621a      	str	r2, [r3, #32]
 800686a:	e008      	b.n	800687e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	1c59      	adds	r1, r3, #1
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6211      	str	r1, [r2, #32]
 8006876:	781a      	ldrb	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29b      	uxth	r3, r3
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	4619      	mov	r1, r3
 800688c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10f      	bne.n	80068b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	e000      	b.n	80068b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068b6:	2302      	movs	r3, #2
  }
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff feff 	bl	80066e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08c      	sub	sp, #48	@ 0x30
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b22      	cmp	r3, #34	@ 0x22
 800690e:	f040 80aa 	bne.w	8006a66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800691a:	d115      	bne.n	8006948 <UART_Receive_IT+0x54>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d111      	bne.n	8006948 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	b29b      	uxth	r3, r3
 8006932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006936:	b29a      	uxth	r2, r3
 8006938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006940:	1c9a      	adds	r2, r3, #2
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	629a      	str	r2, [r3, #40]	@ 0x28
 8006946:	e024      	b.n	8006992 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006956:	d007      	beq.n	8006968 <UART_Receive_IT+0x74>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <UART_Receive_IT+0x82>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d106      	bne.n	8006976 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	b2da      	uxtb	r2, r3
 8006970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006972:	701a      	strb	r2, [r3, #0]
 8006974:	e008      	b.n	8006988 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006982:	b2da      	uxtb	r2, r3
 8006984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006986:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006996:	b29b      	uxth	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	b29b      	uxth	r3, r3
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	4619      	mov	r1, r3
 80069a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d15d      	bne.n	8006a62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68da      	ldr	r2, [r3, #12]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0220 	bic.w	r2, r2, #32
 80069b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695a      	ldr	r2, [r3, #20]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0201 	bic.w	r2, r2, #1
 80069d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d135      	bne.n	8006a58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	330c      	adds	r3, #12
 80069f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	613b      	str	r3, [r7, #16]
   return(result);
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f023 0310 	bic.w	r3, r3, #16
 8006a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a12:	623a      	str	r2, [r7, #32]
 8006a14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	69f9      	ldr	r1, [r7, #28]
 8006a18:	6a3a      	ldr	r2, [r7, #32]
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e5      	bne.n	80069f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b10      	cmp	r3, #16
 8006a32:	d10a      	bne.n	8006a4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a34:	2300      	movs	r3, #0
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff fe67 	bl	8006724 <HAL_UARTEx_RxEventCallback>
 8006a56:	e002      	b.n	8006a5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff fe4f 	bl	80066fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	e002      	b.n	8006a68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	e000      	b.n	8006a68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006a66:	2302      	movs	r3, #2
  }
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3730      	adds	r7, #48	@ 0x30
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a74:	b0c0      	sub	sp, #256	@ 0x100
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a8c:	68d9      	ldr	r1, [r3, #12]
 8006a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	ea40 0301 	orr.w	r3, r0, r1
 8006a98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ac8:	f021 010c 	bic.w	r1, r1, #12
 8006acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aea:	6999      	ldr	r1, [r3, #24]
 8006aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	ea40 0301 	orr.w	r3, r0, r1
 8006af6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	4b8f      	ldr	r3, [pc, #572]	@ (8006d3c <UART_SetConfig+0x2cc>)
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d005      	beq.n	8006b10 <UART_SetConfig+0xa0>
 8006b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	4b8d      	ldr	r3, [pc, #564]	@ (8006d40 <UART_SetConfig+0x2d0>)
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d104      	bne.n	8006b1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b10:	f7fe fe22 	bl	8005758 <HAL_RCC_GetPCLK2Freq>
 8006b14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006b18:	e003      	b.n	8006b22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b1a:	f7fe fe09 	bl	8005730 <HAL_RCC_GetPCLK1Freq>
 8006b1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b2c:	f040 810c 	bne.w	8006d48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b34:	2200      	movs	r2, #0
 8006b36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006b3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006b42:	4622      	mov	r2, r4
 8006b44:	462b      	mov	r3, r5
 8006b46:	1891      	adds	r1, r2, r2
 8006b48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006b4a:	415b      	adcs	r3, r3
 8006b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006b52:	4621      	mov	r1, r4
 8006b54:	eb12 0801 	adds.w	r8, r2, r1
 8006b58:	4629      	mov	r1, r5
 8006b5a:	eb43 0901 	adc.w	r9, r3, r1
 8006b5e:	f04f 0200 	mov.w	r2, #0
 8006b62:	f04f 0300 	mov.w	r3, #0
 8006b66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b72:	4690      	mov	r8, r2
 8006b74:	4699      	mov	r9, r3
 8006b76:	4623      	mov	r3, r4
 8006b78:	eb18 0303 	adds.w	r3, r8, r3
 8006b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b80:	462b      	mov	r3, r5
 8006b82:	eb49 0303 	adc.w	r3, r9, r3
 8006b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006b9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	18db      	adds	r3, r3, r3
 8006ba2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	eb42 0303 	adc.w	r3, r2, r3
 8006baa:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006bb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006bb4:	f7fa f878 	bl	8000ca8 <__aeabi_uldivmod>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4b61      	ldr	r3, [pc, #388]	@ (8006d44 <UART_SetConfig+0x2d4>)
 8006bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8006bc2:	095b      	lsrs	r3, r3, #5
 8006bc4:	011c      	lsls	r4, r3, #4
 8006bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006bd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006bd8:	4642      	mov	r2, r8
 8006bda:	464b      	mov	r3, r9
 8006bdc:	1891      	adds	r1, r2, r2
 8006bde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006be0:	415b      	adcs	r3, r3
 8006be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006be4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006be8:	4641      	mov	r1, r8
 8006bea:	eb12 0a01 	adds.w	sl, r2, r1
 8006bee:	4649      	mov	r1, r9
 8006bf0:	eb43 0b01 	adc.w	fp, r3, r1
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c08:	4692      	mov	sl, r2
 8006c0a:	469b      	mov	fp, r3
 8006c0c:	4643      	mov	r3, r8
 8006c0e:	eb1a 0303 	adds.w	r3, sl, r3
 8006c12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c16:	464b      	mov	r3, r9
 8006c18:	eb4b 0303 	adc.w	r3, fp, r3
 8006c1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006c30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c34:	460b      	mov	r3, r1
 8006c36:	18db      	adds	r3, r3, r3
 8006c38:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	eb42 0303 	adc.w	r3, r2, r3
 8006c40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006c4a:	f7fa f82d 	bl	8000ca8 <__aeabi_uldivmod>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	4b3b      	ldr	r3, [pc, #236]	@ (8006d44 <UART_SetConfig+0x2d4>)
 8006c56:	fba3 2301 	umull	r2, r3, r3, r1
 8006c5a:	095b      	lsrs	r3, r3, #5
 8006c5c:	2264      	movs	r2, #100	@ 0x64
 8006c5e:	fb02 f303 	mul.w	r3, r2, r3
 8006c62:	1acb      	subs	r3, r1, r3
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006c6a:	4b36      	ldr	r3, [pc, #216]	@ (8006d44 <UART_SetConfig+0x2d4>)
 8006c6c:	fba3 2302 	umull	r2, r3, r3, r2
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006c78:	441c      	add	r4, r3
 8006c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006c88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	464b      	mov	r3, r9
 8006c90:	1891      	adds	r1, r2, r2
 8006c92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c94:	415b      	adcs	r3, r3
 8006c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006c9c:	4641      	mov	r1, r8
 8006c9e:	1851      	adds	r1, r2, r1
 8006ca0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	414b      	adcs	r3, r1
 8006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	f04f 0300 	mov.w	r3, #0
 8006cb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006cb4:	4659      	mov	r1, fp
 8006cb6:	00cb      	lsls	r3, r1, #3
 8006cb8:	4651      	mov	r1, sl
 8006cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cbe:	4651      	mov	r1, sl
 8006cc0:	00ca      	lsls	r2, r1, #3
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4642      	mov	r2, r8
 8006cca:	189b      	adds	r3, r3, r2
 8006ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cd0:	464b      	mov	r3, r9
 8006cd2:	460a      	mov	r2, r1
 8006cd4:	eb42 0303 	adc.w	r3, r2, r3
 8006cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ce8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006cec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	18db      	adds	r3, r3, r3
 8006cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	eb42 0303 	adc.w	r3, r2, r3
 8006cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d06:	f7f9 ffcf 	bl	8000ca8 <__aeabi_uldivmod>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d44 <UART_SetConfig+0x2d4>)
 8006d10:	fba3 1302 	umull	r1, r3, r3, r2
 8006d14:	095b      	lsrs	r3, r3, #5
 8006d16:	2164      	movs	r1, #100	@ 0x64
 8006d18:	fb01 f303 	mul.w	r3, r1, r3
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	3332      	adds	r3, #50	@ 0x32
 8006d22:	4a08      	ldr	r2, [pc, #32]	@ (8006d44 <UART_SetConfig+0x2d4>)
 8006d24:	fba2 2303 	umull	r2, r3, r2, r3
 8006d28:	095b      	lsrs	r3, r3, #5
 8006d2a:	f003 0207 	and.w	r2, r3, #7
 8006d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4422      	add	r2, r4
 8006d36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d38:	e106      	b.n	8006f48 <UART_SetConfig+0x4d8>
 8006d3a:	bf00      	nop
 8006d3c:	40011000 	.word	0x40011000
 8006d40:	40011400 	.word	0x40011400
 8006d44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006d56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006d5a:	4642      	mov	r2, r8
 8006d5c:	464b      	mov	r3, r9
 8006d5e:	1891      	adds	r1, r2, r2
 8006d60:	6239      	str	r1, [r7, #32]
 8006d62:	415b      	adcs	r3, r3
 8006d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d6a:	4641      	mov	r1, r8
 8006d6c:	1854      	adds	r4, r2, r1
 8006d6e:	4649      	mov	r1, r9
 8006d70:	eb43 0501 	adc.w	r5, r3, r1
 8006d74:	f04f 0200 	mov.w	r2, #0
 8006d78:	f04f 0300 	mov.w	r3, #0
 8006d7c:	00eb      	lsls	r3, r5, #3
 8006d7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d82:	00e2      	lsls	r2, r4, #3
 8006d84:	4614      	mov	r4, r2
 8006d86:	461d      	mov	r5, r3
 8006d88:	4643      	mov	r3, r8
 8006d8a:	18e3      	adds	r3, r4, r3
 8006d8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d90:	464b      	mov	r3, r9
 8006d92:	eb45 0303 	adc.w	r3, r5, r3
 8006d96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006da6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006daa:	f04f 0200 	mov.w	r2, #0
 8006dae:	f04f 0300 	mov.w	r3, #0
 8006db2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006db6:	4629      	mov	r1, r5
 8006db8:	008b      	lsls	r3, r1, #2
 8006dba:	4621      	mov	r1, r4
 8006dbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	008a      	lsls	r2, r1, #2
 8006dc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006dc8:	f7f9 ff6e 	bl	8000ca8 <__aeabi_uldivmod>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4b60      	ldr	r3, [pc, #384]	@ (8006f54 <UART_SetConfig+0x4e4>)
 8006dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd6:	095b      	lsrs	r3, r3, #5
 8006dd8:	011c      	lsls	r4, r3, #4
 8006dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006de4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006de8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006dec:	4642      	mov	r2, r8
 8006dee:	464b      	mov	r3, r9
 8006df0:	1891      	adds	r1, r2, r2
 8006df2:	61b9      	str	r1, [r7, #24]
 8006df4:	415b      	adcs	r3, r3
 8006df6:	61fb      	str	r3, [r7, #28]
 8006df8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	1851      	adds	r1, r2, r1
 8006e00:	6139      	str	r1, [r7, #16]
 8006e02:	4649      	mov	r1, r9
 8006e04:	414b      	adcs	r3, r1
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e14:	4659      	mov	r1, fp
 8006e16:	00cb      	lsls	r3, r1, #3
 8006e18:	4651      	mov	r1, sl
 8006e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e1e:	4651      	mov	r1, sl
 8006e20:	00ca      	lsls	r2, r1, #3
 8006e22:	4610      	mov	r0, r2
 8006e24:	4619      	mov	r1, r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	4642      	mov	r2, r8
 8006e2a:	189b      	adds	r3, r3, r2
 8006e2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e30:	464b      	mov	r3, r9
 8006e32:	460a      	mov	r2, r1
 8006e34:	eb42 0303 	adc.w	r3, r2, r3
 8006e38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006e54:	4649      	mov	r1, r9
 8006e56:	008b      	lsls	r3, r1, #2
 8006e58:	4641      	mov	r1, r8
 8006e5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e5e:	4641      	mov	r1, r8
 8006e60:	008a      	lsls	r2, r1, #2
 8006e62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006e66:	f7f9 ff1f 	bl	8000ca8 <__aeabi_uldivmod>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4611      	mov	r1, r2
 8006e70:	4b38      	ldr	r3, [pc, #224]	@ (8006f54 <UART_SetConfig+0x4e4>)
 8006e72:	fba3 2301 	umull	r2, r3, r3, r1
 8006e76:	095b      	lsrs	r3, r3, #5
 8006e78:	2264      	movs	r2, #100	@ 0x64
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
 8006e7e:	1acb      	subs	r3, r1, r3
 8006e80:	011b      	lsls	r3, r3, #4
 8006e82:	3332      	adds	r3, #50	@ 0x32
 8006e84:	4a33      	ldr	r2, [pc, #204]	@ (8006f54 <UART_SetConfig+0x4e4>)
 8006e86:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8a:	095b      	lsrs	r3, r3, #5
 8006e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e90:	441c      	add	r4, r3
 8006e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e96:	2200      	movs	r2, #0
 8006e98:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006e9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ea0:	4642      	mov	r2, r8
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	1891      	adds	r1, r2, r2
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	415b      	adcs	r3, r3
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	1851      	adds	r1, r2, r1
 8006eb4:	6039      	str	r1, [r7, #0]
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	414b      	adcs	r3, r1
 8006eba:	607b      	str	r3, [r7, #4]
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ec8:	4659      	mov	r1, fp
 8006eca:	00cb      	lsls	r3, r1, #3
 8006ecc:	4651      	mov	r1, sl
 8006ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ed2:	4651      	mov	r1, sl
 8006ed4:	00ca      	lsls	r2, r1, #3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4603      	mov	r3, r0
 8006edc:	4642      	mov	r2, r8
 8006ede:	189b      	adds	r3, r3, r2
 8006ee0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	460a      	mov	r2, r1
 8006ee6:	eb42 0303 	adc.w	r3, r2, r3
 8006eea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ef6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	f04f 0300 	mov.w	r3, #0
 8006f00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f04:	4649      	mov	r1, r9
 8006f06:	008b      	lsls	r3, r1, #2
 8006f08:	4641      	mov	r1, r8
 8006f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f0e:	4641      	mov	r1, r8
 8006f10:	008a      	lsls	r2, r1, #2
 8006f12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006f16:	f7f9 fec7 	bl	8000ca8 <__aeabi_uldivmod>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f54 <UART_SetConfig+0x4e4>)
 8006f20:	fba3 1302 	umull	r1, r3, r3, r2
 8006f24:	095b      	lsrs	r3, r3, #5
 8006f26:	2164      	movs	r1, #100	@ 0x64
 8006f28:	fb01 f303 	mul.w	r3, r1, r3
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	3332      	adds	r3, #50	@ 0x32
 8006f32:	4a08      	ldr	r2, [pc, #32]	@ (8006f54 <UART_SetConfig+0x4e4>)
 8006f34:	fba2 2303 	umull	r2, r3, r2, r3
 8006f38:	095b      	lsrs	r3, r3, #5
 8006f3a:	f003 020f 	and.w	r2, r3, #15
 8006f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4422      	add	r2, r4
 8006f46:	609a      	str	r2, [r3, #8]
}
 8006f48:	bf00      	nop
 8006f4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f54:	51eb851f 	.word	0x51eb851f

08006f58 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	f023 0101 	bic.w	r1, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	2b08      	cmp	r3, #8
 8006f80:	d102      	bne.n	8006f88 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006f82:	2340      	movs	r3, #64	@ 0x40
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	e001      	b.n	8006f8c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006f98:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006f9e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006fa4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006faa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006fb0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006fb6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006fbc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8006fc2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006fc8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006fe6:	4b10      	ldr	r3, [pc, #64]	@ (8007028 <FSMC_NORSRAM_Init+0xd0>)
 8006fe8:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ff0:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006ff8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	43db      	mvns	r3, r3
 8007008:	ea02 0103 	and.w	r1, r2, r3
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	4319      	orrs	r1, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	0008fb7f 	.word	0x0008fb7f

0800702c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8007042:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800704a:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8007052:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	3b01      	subs	r3, #1
 800705a:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 800705c:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	3b02      	subs	r3, #2
 8007064:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8007066:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8007072:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800709c:	d11d      	bne.n	80070da <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070a6:	4b13      	ldr	r3, [pc, #76]	@ (80070f4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	6811      	ldr	r1, [r2, #0]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	6852      	ldr	r2, [r2, #4]
 80070b2:	0112      	lsls	r2, r2, #4
 80070b4:	4311      	orrs	r1, r2
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	6892      	ldr	r2, [r2, #8]
 80070ba:	0212      	lsls	r2, r2, #8
 80070bc:	4311      	orrs	r1, r2
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	6992      	ldr	r2, [r2, #24]
 80070c2:	4311      	orrs	r1, r2
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	68d2      	ldr	r2, [r2, #12]
 80070c8:	0412      	lsls	r2, r2, #16
 80070ca:	430a      	orrs	r2, r1
 80070cc:	ea43 0102 	orr.w	r1, r3, r2
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80070d8:	e005      	b.n	80070e6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80070e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	cff00000 	.word	0xcff00000

080070f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070f8:	b084      	sub	sp, #16
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	f107 001c 	add.w	r0, r7, #28
 8007106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800710a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800710e:	2b01      	cmp	r3, #1
 8007110:	d123      	bne.n	800715a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007116:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007126:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800713a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800713e:	2b01      	cmp	r3, #1
 8007140:	d105      	bne.n	800714e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 fae8 	bl	8008724 <USB_CoreReset>
 8007154:	4603      	mov	r3, r0
 8007156:	73fb      	strb	r3, [r7, #15]
 8007158:	e01b      	b.n	8007192 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 fadc 	bl	8008724 <USB_CoreReset>
 800716c:	4603      	mov	r3, r0
 800716e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007170:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007174:	2b00      	cmp	r3, #0
 8007176:	d106      	bne.n	8007186 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800717c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	639a      	str	r2, [r3, #56]	@ 0x38
 8007184:	e005      	b.n	8007192 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007192:	7fbb      	ldrb	r3, [r7, #30]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d10b      	bne.n	80071b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f043 0206 	orr.w	r2, r3, #6
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f043 0220 	orr.w	r2, r3, #32
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071bc:	b004      	add	sp, #16
 80071be:	4770      	bx	lr

080071c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d165      	bne.n	80072a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	4a41      	ldr	r2, [pc, #260]	@ (80072dc <USB_SetTurnaroundTime+0x11c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d906      	bls.n	80071ea <USB_SetTurnaroundTime+0x2a>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4a40      	ldr	r2, [pc, #256]	@ (80072e0 <USB_SetTurnaroundTime+0x120>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d202      	bcs.n	80071ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80071e4:	230f      	movs	r3, #15
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	e062      	b.n	80072b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	4a3c      	ldr	r2, [pc, #240]	@ (80072e0 <USB_SetTurnaroundTime+0x120>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d306      	bcc.n	8007200 <USB_SetTurnaroundTime+0x40>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	4a3b      	ldr	r2, [pc, #236]	@ (80072e4 <USB_SetTurnaroundTime+0x124>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d202      	bcs.n	8007200 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80071fa:	230e      	movs	r3, #14
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	e057      	b.n	80072b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4a38      	ldr	r2, [pc, #224]	@ (80072e4 <USB_SetTurnaroundTime+0x124>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d306      	bcc.n	8007216 <USB_SetTurnaroundTime+0x56>
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4a37      	ldr	r2, [pc, #220]	@ (80072e8 <USB_SetTurnaroundTime+0x128>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d202      	bcs.n	8007216 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007210:	230d      	movs	r3, #13
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	e04c      	b.n	80072b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	4a33      	ldr	r2, [pc, #204]	@ (80072e8 <USB_SetTurnaroundTime+0x128>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d306      	bcc.n	800722c <USB_SetTurnaroundTime+0x6c>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	4a32      	ldr	r2, [pc, #200]	@ (80072ec <USB_SetTurnaroundTime+0x12c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d802      	bhi.n	800722c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007226:	230c      	movs	r3, #12
 8007228:	617b      	str	r3, [r7, #20]
 800722a:	e041      	b.n	80072b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4a2f      	ldr	r2, [pc, #188]	@ (80072ec <USB_SetTurnaroundTime+0x12c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d906      	bls.n	8007242 <USB_SetTurnaroundTime+0x82>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4a2e      	ldr	r2, [pc, #184]	@ (80072f0 <USB_SetTurnaroundTime+0x130>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d802      	bhi.n	8007242 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800723c:	230b      	movs	r3, #11
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	e036      	b.n	80072b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	4a2a      	ldr	r2, [pc, #168]	@ (80072f0 <USB_SetTurnaroundTime+0x130>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d906      	bls.n	8007258 <USB_SetTurnaroundTime+0x98>
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	4a29      	ldr	r2, [pc, #164]	@ (80072f4 <USB_SetTurnaroundTime+0x134>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d802      	bhi.n	8007258 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007252:	230a      	movs	r3, #10
 8007254:	617b      	str	r3, [r7, #20]
 8007256:	e02b      	b.n	80072b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4a26      	ldr	r2, [pc, #152]	@ (80072f4 <USB_SetTurnaroundTime+0x134>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d906      	bls.n	800726e <USB_SetTurnaroundTime+0xae>
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4a25      	ldr	r2, [pc, #148]	@ (80072f8 <USB_SetTurnaroundTime+0x138>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d202      	bcs.n	800726e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007268:	2309      	movs	r3, #9
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	e020      	b.n	80072b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	4a21      	ldr	r2, [pc, #132]	@ (80072f8 <USB_SetTurnaroundTime+0x138>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d306      	bcc.n	8007284 <USB_SetTurnaroundTime+0xc4>
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	4a20      	ldr	r2, [pc, #128]	@ (80072fc <USB_SetTurnaroundTime+0x13c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d802      	bhi.n	8007284 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800727e:	2308      	movs	r3, #8
 8007280:	617b      	str	r3, [r7, #20]
 8007282:	e015      	b.n	80072b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	4a1d      	ldr	r2, [pc, #116]	@ (80072fc <USB_SetTurnaroundTime+0x13c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d906      	bls.n	800729a <USB_SetTurnaroundTime+0xda>
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4a1c      	ldr	r2, [pc, #112]	@ (8007300 <USB_SetTurnaroundTime+0x140>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d202      	bcs.n	800729a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007294:	2307      	movs	r3, #7
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	e00a      	b.n	80072b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800729a:	2306      	movs	r3, #6
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	e007      	b.n	80072b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d102      	bne.n	80072ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80072a6:	2309      	movs	r3, #9
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	e001      	b.n	80072b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80072ac:	2309      	movs	r3, #9
 80072ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	029b      	lsls	r3, r3, #10
 80072c4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80072c8:	431a      	orrs	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	00d8acbf 	.word	0x00d8acbf
 80072e0:	00e4e1c0 	.word	0x00e4e1c0
 80072e4:	00f42400 	.word	0x00f42400
 80072e8:	01067380 	.word	0x01067380
 80072ec:	011a499f 	.word	0x011a499f
 80072f0:	01312cff 	.word	0x01312cff
 80072f4:	014ca43f 	.word	0x014ca43f
 80072f8:	016e3600 	.word	0x016e3600
 80072fc:	01a6ab1f 	.word	0x01a6ab1f
 8007300:	01e84800 	.word	0x01e84800

08007304 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f043 0201 	orr.w	r2, r3, #1
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f023 0201 	bic.w	r2, r3, #1
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d115      	bne.n	8007396 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007376:	200a      	movs	r0, #10
 8007378:	f7fb fd24 	bl	8002dc4 <HAL_Delay>
      ms += 10U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	330a      	adds	r3, #10
 8007380:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 f93f 	bl	8008606 <USB_GetMode>
 8007388:	4603      	mov	r3, r0
 800738a:	2b01      	cmp	r3, #1
 800738c:	d01e      	beq.n	80073cc <USB_SetCurrentMode+0x84>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2bc7      	cmp	r3, #199	@ 0xc7
 8007392:	d9f0      	bls.n	8007376 <USB_SetCurrentMode+0x2e>
 8007394:	e01a      	b.n	80073cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d115      	bne.n	80073c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80073a8:	200a      	movs	r0, #10
 80073aa:	f7fb fd0b 	bl	8002dc4 <HAL_Delay>
      ms += 10U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	330a      	adds	r3, #10
 80073b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 f926 	bl	8008606 <USB_GetMode>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <USB_SetCurrentMode+0x84>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80073c4:	d9f0      	bls.n	80073a8 <USB_SetCurrentMode+0x60>
 80073c6:	e001      	b.n	80073cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e005      	b.n	80073d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2bc8      	cmp	r3, #200	@ 0xc8
 80073d0:	d101      	bne.n	80073d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073e0:	b084      	sub	sp, #16
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b086      	sub	sp, #24
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80073ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073fa:	2300      	movs	r3, #0
 80073fc:	613b      	str	r3, [r7, #16]
 80073fe:	e009      	b.n	8007414 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	3340      	adds	r3, #64	@ 0x40
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	2200      	movs	r2, #0
 800740c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	3301      	adds	r3, #1
 8007412:	613b      	str	r3, [r7, #16]
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	2b0e      	cmp	r3, #14
 8007418:	d9f2      	bls.n	8007400 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800741a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800741e:	2b00      	cmp	r3, #0
 8007420:	d11c      	bne.n	800745c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007430:	f043 0302 	orr.w	r3, r3, #2
 8007434:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007446:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007452:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	639a      	str	r2, [r3, #56]	@ 0x38
 800745a:	e00b      	b.n	8007474 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007460:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800747a:	461a      	mov	r2, r3
 800747c:	2300      	movs	r3, #0
 800747e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007480:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007484:	2b01      	cmp	r3, #1
 8007486:	d10d      	bne.n	80074a4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007488:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800748c:	2b00      	cmp	r3, #0
 800748e:	d104      	bne.n	800749a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007490:	2100      	movs	r1, #0
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f968 	bl	8007768 <USB_SetDevSpeed>
 8007498:	e008      	b.n	80074ac <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800749a:	2101      	movs	r1, #1
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f963 	bl	8007768 <USB_SetDevSpeed>
 80074a2:	e003      	b.n	80074ac <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074a4:	2103      	movs	r1, #3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f95e 	bl	8007768 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074ac:	2110      	movs	r1, #16
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f8fa 	bl	80076a8 <USB_FlushTxFifo>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f924 	bl	800770c <USB_FlushRxFifo>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074d4:	461a      	mov	r2, r3
 80074d6:	2300      	movs	r3, #0
 80074d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e0:	461a      	mov	r2, r3
 80074e2:	2300      	movs	r3, #0
 80074e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ec:	461a      	mov	r2, r3
 80074ee:	2300      	movs	r3, #0
 80074f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074f2:	2300      	movs	r3, #0
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	e043      	b.n	8007580 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800750a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800750e:	d118      	bne.n	8007542 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10a      	bne.n	800752c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4413      	add	r3, r2
 800751e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007522:	461a      	mov	r2, r3
 8007524:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	e013      	b.n	8007554 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007538:	461a      	mov	r2, r3
 800753a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	e008      	b.n	8007554 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800754e:	461a      	mov	r2, r3
 8007550:	2300      	movs	r3, #0
 8007552:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007560:	461a      	mov	r2, r3
 8007562:	2300      	movs	r3, #0
 8007564:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007572:	461a      	mov	r2, r3
 8007574:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007578:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	3301      	adds	r3, #1
 800757e:	613b      	str	r3, [r7, #16]
 8007580:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007584:	461a      	mov	r2, r3
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	4293      	cmp	r3, r2
 800758a:	d3b5      	bcc.n	80074f8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800758c:	2300      	movs	r3, #0
 800758e:	613b      	str	r3, [r7, #16]
 8007590:	e043      	b.n	800761a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075a8:	d118      	bne.n	80075dc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075bc:	461a      	mov	r2, r3
 80075be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	e013      	b.n	80075ee <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075d2:	461a      	mov	r2, r3
 80075d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	e008      	b.n	80075ee <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075e8:	461a      	mov	r2, r3
 80075ea:	2300      	movs	r3, #0
 80075ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075fa:	461a      	mov	r2, r3
 80075fc:	2300      	movs	r3, #0
 80075fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800760c:	461a      	mov	r2, r3
 800760e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007612:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	3301      	adds	r3, #1
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800761e:	461a      	mov	r2, r3
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	4293      	cmp	r3, r2
 8007624:	d3b5      	bcc.n	8007592 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007638:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007646:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007648:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800764c:	2b00      	cmp	r3, #0
 800764e:	d105      	bne.n	800765c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	f043 0210 	orr.w	r2, r3, #16
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	699a      	ldr	r2, [r3, #24]
 8007660:	4b10      	ldr	r3, [pc, #64]	@ (80076a4 <USB_DevInit+0x2c4>)
 8007662:	4313      	orrs	r3, r2
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007668:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	f043 0208 	orr.w	r2, r3, #8
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800767c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007680:	2b01      	cmp	r3, #1
 8007682:	d107      	bne.n	8007694 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800768c:	f043 0304 	orr.w	r3, r3, #4
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007694:	7dfb      	ldrb	r3, [r7, #23]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076a0:	b004      	add	sp, #16
 80076a2:	4770      	bx	lr
 80076a4:	803c3800 	.word	0x803c3800

080076a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3301      	adds	r3, #1
 80076ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076c2:	d901      	bls.n	80076c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e01b      	b.n	8007700 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	daf2      	bge.n	80076b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	019b      	lsls	r3, r3, #6
 80076d8:	f043 0220 	orr.w	r2, r3, #32
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3301      	adds	r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076ec:	d901      	bls.n	80076f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e006      	b.n	8007700 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	d0f0      	beq.n	80076e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3301      	adds	r3, #1
 800771c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007724:	d901      	bls.n	800772a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e018      	b.n	800775c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	daf2      	bge.n	8007718 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2210      	movs	r2, #16
 800773a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3301      	adds	r3, #1
 8007740:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007748:	d901      	bls.n	800774e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e006      	b.n	800775c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f003 0310 	and.w	r3, r3, #16
 8007756:	2b10      	cmp	r3, #16
 8007758:	d0f0      	beq.n	800773c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	68f9      	ldr	r1, [r7, #12]
 8007784:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007788:	4313      	orrs	r3, r2
 800778a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800779a:	b480      	push	{r7}
 800779c:	b087      	sub	sp, #28
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f003 0306 	and.w	r3, r3, #6
 80077b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75fb      	strb	r3, [r7, #23]
 80077be:	e00a      	b.n	80077d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d002      	beq.n	80077cc <USB_GetDevSpeed+0x32>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2b06      	cmp	r3, #6
 80077ca:	d102      	bne.n	80077d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80077cc:	2302      	movs	r3, #2
 80077ce:	75fb      	strb	r3, [r7, #23]
 80077d0:	e001      	b.n	80077d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80077d2:	230f      	movs	r3, #15
 80077d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	371c      	adds	r7, #28
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	785b      	ldrb	r3, [r3, #1]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d13a      	bne.n	8007876 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007806:	69da      	ldr	r2, [r3, #28]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	2101      	movs	r1, #1
 8007812:	fa01 f303 	lsl.w	r3, r1, r3
 8007816:	b29b      	uxth	r3, r3
 8007818:	68f9      	ldr	r1, [r7, #12]
 800781a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800781e:	4313      	orrs	r3, r2
 8007820:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d155      	bne.n	80078e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	791b      	ldrb	r3, [r3, #4]
 8007852:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007854:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	059b      	lsls	r3, r3, #22
 800785a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800785c:	4313      	orrs	r3, r2
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	0151      	lsls	r1, r2, #5
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	440a      	add	r2, r1
 8007866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800786a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800786e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	e036      	b.n	80078e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800787c:	69da      	ldr	r2, [r3, #28]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	f003 030f 	and.w	r3, r3, #15
 8007886:	2101      	movs	r1, #1
 8007888:	fa01 f303 	lsl.w	r3, r1, r3
 800788c:	041b      	lsls	r3, r3, #16
 800788e:	68f9      	ldr	r1, [r7, #12]
 8007890:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007894:	4313      	orrs	r3, r2
 8007896:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d11a      	bne.n	80078e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	791b      	ldrb	r3, [r3, #4]
 80078c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80078ca:	430b      	orrs	r3, r1
 80078cc:	4313      	orrs	r3, r2
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	0151      	lsls	r1, r2, #5
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	440a      	add	r2, r1
 80078d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
	...

080078f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	785b      	ldrb	r3, [r3, #1]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d161      	bne.n	80079d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007922:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007926:	d11f      	bne.n	8007968 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	0151      	lsls	r1, r2, #5
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	440a      	add	r2, r1
 800793e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007942:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007946:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	0151      	lsls	r1, r2, #5
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	440a      	add	r2, r1
 800795e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007962:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007966:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800796e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	f003 030f 	and.w	r3, r3, #15
 8007978:	2101      	movs	r1, #1
 800797a:	fa01 f303 	lsl.w	r3, r1, r3
 800797e:	b29b      	uxth	r3, r3
 8007980:	43db      	mvns	r3, r3
 8007982:	68f9      	ldr	r1, [r7, #12]
 8007984:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007988:	4013      	ands	r3, r2
 800798a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007992:	69da      	ldr	r2, [r3, #28]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	2101      	movs	r1, #1
 800799e:	fa01 f303 	lsl.w	r3, r1, r3
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	43db      	mvns	r3, r3
 80079a6:	68f9      	ldr	r1, [r7, #12]
 80079a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079ac:	4013      	ands	r3, r2
 80079ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	0159      	lsls	r1, r3, #5
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	440b      	add	r3, r1
 80079c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ca:	4619      	mov	r1, r3
 80079cc:	4b35      	ldr	r3, [pc, #212]	@ (8007aa4 <USB_DeactivateEndpoint+0x1b0>)
 80079ce:	4013      	ands	r3, r2
 80079d0:	600b      	str	r3, [r1, #0]
 80079d2:	e060      	b.n	8007a96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079ea:	d11f      	bne.n	8007a2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	0151      	lsls	r1, r2, #5
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	440a      	add	r2, r1
 8007a02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a06:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a42:	041b      	lsls	r3, r3, #16
 8007a44:	43db      	mvns	r3, r3
 8007a46:	68f9      	ldr	r1, [r7, #12]
 8007a48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a56:	69da      	ldr	r2, [r3, #28]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	f003 030f 	and.w	r3, r3, #15
 8007a60:	2101      	movs	r1, #1
 8007a62:	fa01 f303 	lsl.w	r3, r1, r3
 8007a66:	041b      	lsls	r3, r3, #16
 8007a68:	43db      	mvns	r3, r3
 8007a6a:	68f9      	ldr	r1, [r7, #12]
 8007a6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a70:	4013      	ands	r3, r2
 8007a72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	0159      	lsls	r1, r3, #5
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	440b      	add	r3, r1
 8007a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4b05      	ldr	r3, [pc, #20]	@ (8007aa8 <USB_DeactivateEndpoint+0x1b4>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	ec337800 	.word	0xec337800
 8007aa8:	eff37800 	.word	0xeff37800

08007aac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	@ 0x28
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	f040 817f 	bne.w	8007dcc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d132      	bne.n	8007b3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	0151      	lsls	r1, r2, #5
 8007ae8:	69fa      	ldr	r2, [r7, #28]
 8007aea:	440a      	add	r2, r1
 8007aec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007af0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007af4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007af8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	0151      	lsls	r1, r2, #5
 8007b0c:	69fa      	ldr	r2, [r7, #28]
 8007b0e:	440a      	add	r2, r1
 8007b10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	0151      	lsls	r1, r2, #5
 8007b2c:	69fa      	ldr	r2, [r7, #28]
 8007b2e:	440a      	add	r2, r1
 8007b30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b34:	0cdb      	lsrs	r3, r3, #19
 8007b36:	04db      	lsls	r3, r3, #19
 8007b38:	6113      	str	r3, [r2, #16]
 8007b3a:	e097      	b.n	8007c6c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	0151      	lsls	r1, r2, #5
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	440a      	add	r2, r1
 8007b52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b56:	0cdb      	lsrs	r3, r3, #19
 8007b58:	04db      	lsls	r3, r3, #19
 8007b5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b76:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007b7a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007b7e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d11a      	bne.n	8007bbc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	691a      	ldr	r2, [r3, #16]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d903      	bls.n	8007b9a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	689a      	ldr	r2, [r3, #8]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bb8:	6113      	str	r3, [r2, #16]
 8007bba:	e044      	b.n	8007c46 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	691a      	ldr	r2, [r3, #16]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	1e5a      	subs	r2, r3, #1
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	8afb      	ldrh	r3, [r7, #22]
 8007be2:	04d9      	lsls	r1, r3, #19
 8007be4:	4ba4      	ldr	r3, [pc, #656]	@ (8007e78 <USB_EPStartXfer+0x3cc>)
 8007be6:	400b      	ands	r3, r1
 8007be8:	69b9      	ldr	r1, [r7, #24]
 8007bea:	0148      	lsls	r0, r1, #5
 8007bec:	69f9      	ldr	r1, [r7, #28]
 8007bee:	4401      	add	r1, r0
 8007bf0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	791b      	ldrb	r3, [r3, #4]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d122      	bne.n	8007c46 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	0151      	lsls	r1, r2, #5
 8007c12:	69fa      	ldr	r2, [r7, #28]
 8007c14:	440a      	add	r2, r1
 8007c16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c1a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007c1e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c2c:	691a      	ldr	r2, [r3, #16]
 8007c2e:	8afb      	ldrh	r3, [r7, #22]
 8007c30:	075b      	lsls	r3, r3, #29
 8007c32:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007c36:	69b9      	ldr	r1, [r7, #24]
 8007c38:	0148      	lsls	r0, r1, #5
 8007c3a:	69f9      	ldr	r1, [r7, #28]
 8007c3c:	4401      	add	r1, r0
 8007c3e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007c42:	4313      	orrs	r3, r2
 8007c44:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c5c:	69b9      	ldr	r1, [r7, #24]
 8007c5e:	0148      	lsls	r0, r1, #5
 8007c60:	69f9      	ldr	r1, [r7, #28]
 8007c62:	4401      	add	r1, r0
 8007c64:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d14b      	bne.n	8007d0a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d009      	beq.n	8007c8e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c86:	461a      	mov	r2, r3
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	791b      	ldrb	r3, [r3, #4]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d128      	bne.n	8007ce8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d110      	bne.n	8007cc8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	69fa      	ldr	r2, [r7, #28]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	e00f      	b.n	8007ce8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	0151      	lsls	r1, r2, #5
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	440a      	add	r2, r1
 8007cde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ce6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d02:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	e166      	b.n	8007fd8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	0151      	lsls	r1, r2, #5
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	440a      	add	r2, r1
 8007d20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d24:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d28:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	791b      	ldrb	r3, [r3, #4]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d015      	beq.n	8007d5e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 814e 	beq.w	8007fd8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d52:	69f9      	ldr	r1, [r7, #28]
 8007d54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	634b      	str	r3, [r1, #52]	@ 0x34
 8007d5c:	e13c      	b.n	8007fd8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d110      	bne.n	8007d90 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	0151      	lsls	r1, r2, #5
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	440a      	add	r2, r1
 8007d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	e00f      	b.n	8007db0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	0151      	lsls	r1, r2, #5
 8007da2:	69fa      	ldr	r2, [r7, #28]
 8007da4:	440a      	add	r2, r1
 8007da6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	68d9      	ldr	r1, [r3, #12]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	781a      	ldrb	r2, [r3, #0]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	b298      	uxth	r0, r3
 8007dbe:	79fb      	ldrb	r3, [r7, #7]
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 f9b9 	bl	800813c <USB_WritePacket>
 8007dca:	e105      	b.n	8007fd8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	0151      	lsls	r1, r2, #5
 8007dde:	69fa      	ldr	r2, [r7, #28]
 8007de0:	440a      	add	r2, r1
 8007de2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007de6:	0cdb      	lsrs	r3, r3, #19
 8007de8:	04db      	lsls	r3, r3, #19
 8007dea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	0151      	lsls	r1, r2, #5
 8007dfe:	69fa      	ldr	r2, [r7, #28]
 8007e00:	440a      	add	r2, r1
 8007e02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e06:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007e0a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007e0e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d132      	bne.n	8007e7c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e3a:	691a      	ldr	r2, [r3, #16]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e44:	69b9      	ldr	r1, [r7, #24]
 8007e46:	0148      	lsls	r0, r1, #5
 8007e48:	69f9      	ldr	r1, [r7, #28]
 8007e4a:	4401      	add	r1, r0
 8007e4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e50:	4313      	orrs	r3, r2
 8007e52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	0151      	lsls	r1, r2, #5
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	440a      	add	r2, r1
 8007e6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e72:	6113      	str	r3, [r2, #16]
 8007e74:	e062      	b.n	8007f3c <USB_EPStartXfer+0x490>
 8007e76:	bf00      	nop
 8007e78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d123      	bne.n	8007ecc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e90:	691a      	ldr	r2, [r3, #16]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e9a:	69b9      	ldr	r1, [r7, #24]
 8007e9c:	0148      	lsls	r0, r1, #5
 8007e9e:	69f9      	ldr	r1, [r7, #28]
 8007ea0:	4401      	add	r1, r0
 8007ea2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	0151      	lsls	r1, r2, #5
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	440a      	add	r2, r1
 8007ec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ec4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ec8:	6113      	str	r3, [r2, #16]
 8007eca:	e037      	b.n	8007f3c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	691a      	ldr	r2, [r3, #16]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	1e5a      	subs	r2, r3, #1
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	8afa      	ldrh	r2, [r7, #22]
 8007ee8:	fb03 f202 	mul.w	r2, r3, r2
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007efc:	691a      	ldr	r2, [r3, #16]
 8007efe:	8afb      	ldrh	r3, [r7, #22]
 8007f00:	04d9      	lsls	r1, r3, #19
 8007f02:	4b38      	ldr	r3, [pc, #224]	@ (8007fe4 <USB_EPStartXfer+0x538>)
 8007f04:	400b      	ands	r3, r1
 8007f06:	69b9      	ldr	r1, [r7, #24]
 8007f08:	0148      	lsls	r0, r1, #5
 8007f0a:	69f9      	ldr	r1, [r7, #28]
 8007f0c:	4401      	add	r1, r0
 8007f0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f12:	4313      	orrs	r3, r2
 8007f14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f2c:	69b9      	ldr	r1, [r7, #24]
 8007f2e:	0148      	lsls	r0, r1, #5
 8007f30:	69f9      	ldr	r1, [r7, #28]
 8007f32:	4401      	add	r1, r0
 8007f34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007f3c:	79fb      	ldrb	r3, [r7, #7]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d10d      	bne.n	8007f5e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d009      	beq.n	8007f5e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	68d9      	ldr	r1, [r3, #12]
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f5a:	460a      	mov	r2, r1
 8007f5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	791b      	ldrb	r3, [r3, #4]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d128      	bne.n	8007fb8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d110      	bne.n	8007f98 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	0151      	lsls	r1, r2, #5
 8007f88:	69fa      	ldr	r2, [r7, #28]
 8007f8a:	440a      	add	r2, r1
 8007f8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	e00f      	b.n	8007fb8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	0151      	lsls	r1, r2, #5
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	440a      	add	r2, r1
 8007fae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fb6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fd2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007fd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3720      	adds	r7, #32
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	1ff80000 	.word	0x1ff80000

08007fe8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d14a      	bne.n	800809c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800801a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800801e:	f040 8086 	bne.w	800812e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	7812      	ldrb	r2, [r2, #0]
 8008036:	0151      	lsls	r1, r2, #5
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	440a      	add	r2, r1
 800803c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008040:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008044:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	7812      	ldrb	r2, [r2, #0]
 800805a:	0151      	lsls	r1, r2, #5
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	440a      	add	r2, r1
 8008060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008064:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008068:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3301      	adds	r3, #1
 800806e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008076:	4293      	cmp	r3, r2
 8008078:	d902      	bls.n	8008080 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	75fb      	strb	r3, [r7, #23]
          break;
 800807e:	e056      	b.n	800812e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	4413      	add	r3, r2
 800808a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008094:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008098:	d0e7      	beq.n	800806a <USB_EPStopXfer+0x82>
 800809a:	e048      	b.n	800812e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080b4:	d13b      	bne.n	800812e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	7812      	ldrb	r2, [r2, #0]
 80080ca:	0151      	lsls	r1, r2, #5
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	440a      	add	r2, r1
 80080d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80080d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	7812      	ldrb	r2, [r2, #0]
 80080ee:	0151      	lsls	r1, r2, #5
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	440a      	add	r2, r1
 80080f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f242 7210 	movw	r2, #10000	@ 0x2710
 800810a:	4293      	cmp	r3, r2
 800810c:	d902      	bls.n	8008114 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	75fb      	strb	r3, [r7, #23]
          break;
 8008112:	e00c      	b.n	800812e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	4413      	add	r3, r2
 800811e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800812c:	d0e7      	beq.n	80080fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800812e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008130:	4618      	mov	r0, r3
 8008132:	371c      	adds	r7, #28
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800813c:	b480      	push	{r7}
 800813e:	b089      	sub	sp, #36	@ 0x24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4611      	mov	r1, r2
 8008148:	461a      	mov	r2, r3
 800814a:	460b      	mov	r3, r1
 800814c:	71fb      	strb	r3, [r7, #7]
 800814e:	4613      	mov	r3, r2
 8008150:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800815a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800815e:	2b00      	cmp	r3, #0
 8008160:	d123      	bne.n	80081aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008162:	88bb      	ldrh	r3, [r7, #4]
 8008164:	3303      	adds	r3, #3
 8008166:	089b      	lsrs	r3, r3, #2
 8008168:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800816a:	2300      	movs	r3, #0
 800816c:	61bb      	str	r3, [r7, #24]
 800816e:	e018      	b.n	80081a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008170:	79fb      	ldrb	r3, [r7, #7]
 8008172:	031a      	lsls	r2, r3, #12
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	4413      	add	r3, r2
 8008178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800817c:	461a      	mov	r2, r3
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	3301      	adds	r3, #1
 8008188:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	3301      	adds	r3, #1
 800818e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	3301      	adds	r3, #1
 8008194:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	3301      	adds	r3, #1
 800819a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	3301      	adds	r3, #1
 80081a0:	61bb      	str	r3, [r7, #24]
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d3e2      	bcc.n	8008170 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3724      	adds	r7, #36	@ 0x24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b08b      	sub	sp, #44	@ 0x2c
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	4613      	mov	r3, r2
 80081c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80081ce:	88fb      	ldrh	r3, [r7, #6]
 80081d0:	089b      	lsrs	r3, r3, #2
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80081d6:	88fb      	ldrh	r3, [r7, #6]
 80081d8:	f003 0303 	and.w	r3, r3, #3
 80081dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80081de:	2300      	movs	r3, #0
 80081e0:	623b      	str	r3, [r7, #32]
 80081e2:	e014      	b.n	800820e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80081f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f2:	3301      	adds	r3, #1
 80081f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	3301      	adds	r3, #1
 80081fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80081fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fe:	3301      	adds	r3, #1
 8008200:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008204:	3301      	adds	r3, #1
 8008206:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	3301      	adds	r3, #1
 800820c:	623b      	str	r3, [r7, #32]
 800820e:	6a3a      	ldr	r2, [r7, #32]
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	429a      	cmp	r2, r3
 8008214:	d3e6      	bcc.n	80081e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008216:	8bfb      	ldrh	r3, [r7, #30]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d01e      	beq.n	800825a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008226:	461a      	mov	r2, r3
 8008228:	f107 0310 	add.w	r3, r7, #16
 800822c:	6812      	ldr	r2, [r2, #0]
 800822e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	fa22 f303 	lsr.w	r3, r2, r3
 800823c:	b2da      	uxtb	r2, r3
 800823e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008240:	701a      	strb	r2, [r3, #0]
      i++;
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	3301      	adds	r3, #1
 8008246:	623b      	str	r3, [r7, #32]
      pDest++;
 8008248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824a:	3301      	adds	r3, #1
 800824c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800824e:	8bfb      	ldrh	r3, [r7, #30]
 8008250:	3b01      	subs	r3, #1
 8008252:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008254:	8bfb      	ldrh	r3, [r7, #30]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1ea      	bne.n	8008230 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800825a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800825c:	4618      	mov	r0, r3
 800825e:	372c      	adds	r7, #44	@ 0x2c
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d12c      	bne.n	80082de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4413      	add	r3, r2
 800828c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	db12      	blt.n	80082bc <USB_EPSetStall+0x54>
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00f      	beq.n	80082bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	0151      	lsls	r1, r2, #5
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	440a      	add	r2, r1
 80082b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80082ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	0151      	lsls	r1, r2, #5
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	440a      	add	r2, r1
 80082d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80082da:	6013      	str	r3, [r2, #0]
 80082dc:	e02b      	b.n	8008336 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	db12      	blt.n	8008316 <USB_EPSetStall+0xae>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00f      	beq.n	8008316 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	0151      	lsls	r1, r2, #5
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	440a      	add	r2, r1
 800830c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008310:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008314:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	0151      	lsls	r1, r2, #5
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	440a      	add	r2, r1
 800832c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008330:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008334:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	785b      	ldrb	r3, [r3, #1]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d128      	bne.n	80083b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	0151      	lsls	r1, r2, #5
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	440a      	add	r2, r1
 8008376:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800837a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800837e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	791b      	ldrb	r3, [r3, #4]
 8008384:	2b03      	cmp	r3, #3
 8008386:	d003      	beq.n	8008390 <USB_EPClearStall+0x4c>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	791b      	ldrb	r3, [r3, #4]
 800838c:	2b02      	cmp	r3, #2
 800838e:	d138      	bne.n	8008402 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	0151      	lsls	r1, r2, #5
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	440a      	add	r2, r1
 80083a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	e027      	b.n	8008402 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	0151      	lsls	r1, r2, #5
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	440a      	add	r2, r1
 80083c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	791b      	ldrb	r3, [r3, #4]
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d003      	beq.n	80083e2 <USB_EPClearStall+0x9e>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	791b      	ldrb	r3, [r3, #4]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d10f      	bne.n	8008402 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	0151      	lsls	r1, r2, #5
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	440a      	add	r2, r1
 80083f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008400:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800842e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008432:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	011b      	lsls	r3, r3, #4
 8008440:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008444:	68f9      	ldr	r1, [r7, #12]
 8008446:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800844a:	4313      	orrs	r3, r2
 800844c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008476:	f023 0303 	bic.w	r3, r3, #3
 800847a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800848a:	f023 0302 	bic.w	r3, r3, #2
 800848e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800849e:	b480      	push	{r7}
 80084a0:	b085      	sub	sp, #20
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084cc:	f043 0302 	orr.w	r3, r3, #2
 80084d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4013      	ands	r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80084f8:	68fb      	ldr	r3, [r7, #12]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008506:	b480      	push	{r7}
 8008508:	b085      	sub	sp, #20
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	4013      	ands	r3, r2
 8008528:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	0c1b      	lsrs	r3, r3, #16
}
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800853a:	b480      	push	{r7}
 800853c:	b085      	sub	sp, #20
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	4013      	ands	r3, r2
 800855c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	b29b      	uxth	r3, r3
}
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800856e:	b480      	push	{r7}
 8008570:	b085      	sub	sp, #20
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	460b      	mov	r3, r1
 8008578:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	4413      	add	r3, r2
 8008586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	4013      	ands	r3, r2
 800859a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800859c:	68bb      	ldr	r3, [r7, #8]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3714      	adds	r7, #20
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b087      	sub	sp, #28
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	460b      	mov	r3, r1
 80085b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	fa22 f303 	lsr.w	r3, r2, r3
 80085da:	01db      	lsls	r3, r3, #7
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	4013      	ands	r3, r2
 80085f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80085f8:	68bb      	ldr	r3, [r7, #8]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	f003 0301 	and.w	r3, r3, #1
}
 8008616:	4618      	mov	r0, r3
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008622:	b480      	push	{r7}
 8008624:	b085      	sub	sp, #20
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800863c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008640:	f023 0307 	bic.w	r3, r3, #7
 8008644:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008658:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	460b      	mov	r3, r1
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	333c      	adds	r3, #60	@ 0x3c
 800867e:	3304      	adds	r3, #4
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	4a26      	ldr	r2, [pc, #152]	@ (8008720 <USB_EP0_OutStart+0xb8>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d90a      	bls.n	80086a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008698:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800869c:	d101      	bne.n	80086a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	e037      	b.n	8008712 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086a8:	461a      	mov	r2, r3
 80086aa:	2300      	movs	r3, #0
 80086ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086d0:	f043 0318 	orr.w	r3, r3, #24
 80086d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086e4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80086e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80086ea:	7afb      	ldrb	r3, [r7, #11]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d10f      	bne.n	8008710 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086f6:	461a      	mov	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800870a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800870e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	371c      	adds	r7, #28
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	4f54300a 	.word	0x4f54300a

08008724 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	3301      	adds	r3, #1
 8008734:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800873c:	d901      	bls.n	8008742 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e022      	b.n	8008788 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	daf2      	bge.n	8008730 <USB_CoreReset+0xc>

  count = 10U;
 800874a:	230a      	movs	r3, #10
 800874c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800874e:	e002      	b.n	8008756 <USB_CoreReset+0x32>
  {
    count--;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3b01      	subs	r3, #1
 8008754:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1f9      	bne.n	8008750 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	f043 0201 	orr.w	r2, r3, #1
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3301      	adds	r3, #1
 800876c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008774:	d901      	bls.n	800877a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e006      	b.n	8008788 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b01      	cmp	r3, #1
 8008784:	d0f0      	beq.n	8008768 <USB_CoreReset+0x44>

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80087a0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80087a4:	f002 fcf8 	bl	800b198 <USBD_static_malloc>
 80087a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d109      	bne.n	80087c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	32b0      	adds	r2, #176	@ 0xb0
 80087ba:	2100      	movs	r1, #0
 80087bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80087c0:	2302      	movs	r3, #2
 80087c2:	e0d4      	b.n	800896e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80087c4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80087c8:	2100      	movs	r1, #0
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f004 fdc5 	bl	800d35a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	32b0      	adds	r2, #176	@ 0xb0
 80087da:	68f9      	ldr	r1, [r7, #12]
 80087dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	32b0      	adds	r2, #176	@ 0xb0
 80087ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	7c1b      	ldrb	r3, [r3, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d138      	bne.n	800886e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087fc:	4b5e      	ldr	r3, [pc, #376]	@ (8008978 <USBD_CDC_Init+0x1e4>)
 80087fe:	7819      	ldrb	r1, [r3, #0]
 8008800:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008804:	2202      	movs	r2, #2
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f002 fba3 	bl	800af52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800880c:	4b5a      	ldr	r3, [pc, #360]	@ (8008978 <USBD_CDC_Init+0x1e4>)
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	f003 020f 	and.w	r2, r3, #15
 8008814:	6879      	ldr	r1, [r7, #4]
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	440b      	add	r3, r1
 8008820:	3323      	adds	r3, #35	@ 0x23
 8008822:	2201      	movs	r2, #1
 8008824:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008826:	4b55      	ldr	r3, [pc, #340]	@ (800897c <USBD_CDC_Init+0x1e8>)
 8008828:	7819      	ldrb	r1, [r3, #0]
 800882a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800882e:	2202      	movs	r2, #2
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f002 fb8e 	bl	800af52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008836:	4b51      	ldr	r3, [pc, #324]	@ (800897c <USBD_CDC_Init+0x1e8>)
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	f003 020f 	and.w	r2, r3, #15
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	4613      	mov	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800884e:	2201      	movs	r2, #1
 8008850:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008852:	4b4b      	ldr	r3, [pc, #300]	@ (8008980 <USBD_CDC_Init+0x1ec>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	f003 020f 	and.w	r2, r3, #15
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	440b      	add	r3, r1
 8008866:	331c      	adds	r3, #28
 8008868:	2210      	movs	r2, #16
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	e035      	b.n	80088da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800886e:	4b42      	ldr	r3, [pc, #264]	@ (8008978 <USBD_CDC_Init+0x1e4>)
 8008870:	7819      	ldrb	r1, [r3, #0]
 8008872:	2340      	movs	r3, #64	@ 0x40
 8008874:	2202      	movs	r2, #2
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f002 fb6b 	bl	800af52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800887c:	4b3e      	ldr	r3, [pc, #248]	@ (8008978 <USBD_CDC_Init+0x1e4>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	f003 020f 	and.w	r2, r3, #15
 8008884:	6879      	ldr	r1, [r7, #4]
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	440b      	add	r3, r1
 8008890:	3323      	adds	r3, #35	@ 0x23
 8008892:	2201      	movs	r2, #1
 8008894:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008896:	4b39      	ldr	r3, [pc, #228]	@ (800897c <USBD_CDC_Init+0x1e8>)
 8008898:	7819      	ldrb	r1, [r3, #0]
 800889a:	2340      	movs	r3, #64	@ 0x40
 800889c:	2202      	movs	r2, #2
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f002 fb57 	bl	800af52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088a4:	4b35      	ldr	r3, [pc, #212]	@ (800897c <USBD_CDC_Init+0x1e8>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	f003 020f 	and.w	r2, r3, #15
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	440b      	add	r3, r1
 80088b8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80088bc:	2201      	movs	r2, #1
 80088be:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80088c0:	4b2f      	ldr	r3, [pc, #188]	@ (8008980 <USBD_CDC_Init+0x1ec>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	f003 020f 	and.w	r2, r3, #15
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	4613      	mov	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	331c      	adds	r3, #28
 80088d6:	2210      	movs	r2, #16
 80088d8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088da:	4b29      	ldr	r3, [pc, #164]	@ (8008980 <USBD_CDC_Init+0x1ec>)
 80088dc:	7819      	ldrb	r1, [r3, #0]
 80088de:	2308      	movs	r3, #8
 80088e0:	2203      	movs	r2, #3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f002 fb35 	bl	800af52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80088e8:	4b25      	ldr	r3, [pc, #148]	@ (8008980 <USBD_CDC_Init+0x1ec>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	f003 020f 	and.w	r2, r3, #15
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	440b      	add	r3, r1
 80088fc:	3323      	adds	r3, #35	@ 0x23
 80088fe:	2201      	movs	r2, #1
 8008900:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	33b0      	adds	r3, #176	@ 0xb0
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008938:	2302      	movs	r3, #2
 800893a:	e018      	b.n	800896e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	7c1b      	ldrb	r3, [r3, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008944:	4b0d      	ldr	r3, [pc, #52]	@ (800897c <USBD_CDC_Init+0x1e8>)
 8008946:	7819      	ldrb	r1, [r3, #0]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800894e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f002 fbec 	bl	800b130 <USBD_LL_PrepareReceive>
 8008958:	e008      	b.n	800896c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800895a:	4b08      	ldr	r3, [pc, #32]	@ (800897c <USBD_CDC_Init+0x1e8>)
 800895c:	7819      	ldrb	r1, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008964:	2340      	movs	r3, #64	@ 0x40
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f002 fbe2 	bl	800b130 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	20000097 	.word	0x20000097
 800897c:	20000098 	.word	0x20000098
 8008980:	20000099 	.word	0x20000099

08008984 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008990:	4b3a      	ldr	r3, [pc, #232]	@ (8008a7c <USBD_CDC_DeInit+0xf8>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f002 fb01 	bl	800af9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800899c:	4b37      	ldr	r3, [pc, #220]	@ (8008a7c <USBD_CDC_DeInit+0xf8>)
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	f003 020f 	and.w	r2, r3, #15
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	440b      	add	r3, r1
 80089b0:	3323      	adds	r3, #35	@ 0x23
 80089b2:	2200      	movs	r2, #0
 80089b4:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80089b6:	4b32      	ldr	r3, [pc, #200]	@ (8008a80 <USBD_CDC_DeInit+0xfc>)
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f002 faee 	bl	800af9e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80089c2:	4b2f      	ldr	r3, [pc, #188]	@ (8008a80 <USBD_CDC_DeInit+0xfc>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	f003 020f 	and.w	r2, r3, #15
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	440b      	add	r3, r1
 80089d6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80089da:	2200      	movs	r2, #0
 80089dc:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80089de:	4b29      	ldr	r3, [pc, #164]	@ (8008a84 <USBD_CDC_DeInit+0x100>)
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f002 fada 	bl	800af9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80089ea:	4b26      	ldr	r3, [pc, #152]	@ (8008a84 <USBD_CDC_DeInit+0x100>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	f003 020f 	and.w	r2, r3, #15
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	4613      	mov	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	440b      	add	r3, r1
 80089fe:	3323      	adds	r3, #35	@ 0x23
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008a04:	4b1f      	ldr	r3, [pc, #124]	@ (8008a84 <USBD_CDC_DeInit+0x100>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	f003 020f 	and.w	r2, r3, #15
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	440b      	add	r3, r1
 8008a18:	331c      	adds	r3, #28
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	32b0      	adds	r2, #176	@ 0xb0
 8008a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d01f      	beq.n	8008a70 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	33b0      	adds	r3, #176	@ 0xb0
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	32b0      	adds	r2, #176	@ 0xb0
 8008a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f002 fbae 	bl	800b1b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	32b0      	adds	r2, #176	@ 0xb0
 8008a62:	2100      	movs	r1, #0
 8008a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000097 	.word	0x20000097
 8008a80:	20000098 	.word	0x20000098
 8008a84:	20000099 	.word	0x20000099

08008a88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	32b0      	adds	r2, #176	@ 0xb0
 8008a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e0bf      	b.n	8008c38 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d050      	beq.n	8008b66 <USBD_CDC_Setup+0xde>
 8008ac4:	2b20      	cmp	r3, #32
 8008ac6:	f040 80af 	bne.w	8008c28 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	88db      	ldrh	r3, [r3, #6]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d03a      	beq.n	8008b48 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	b25b      	sxtb	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	da1b      	bge.n	8008b14 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	33b0      	adds	r3, #176	@ 0xb0
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008af2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	88d2      	ldrh	r2, [r2, #6]
 8008af8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	88db      	ldrh	r3, [r3, #6]
 8008afe:	2b07      	cmp	r3, #7
 8008b00:	bf28      	it	cs
 8008b02:	2307      	movcs	r3, #7
 8008b04:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	89fa      	ldrh	r2, [r7, #14]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 fda9 	bl	800a664 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008b12:	e090      	b.n	8008c36 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	785a      	ldrb	r2, [r3, #1]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	88db      	ldrh	r3, [r3, #6]
 8008b22:	2b3f      	cmp	r3, #63	@ 0x3f
 8008b24:	d803      	bhi.n	8008b2e <USBD_CDC_Setup+0xa6>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	88db      	ldrh	r3, [r3, #6]
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	e000      	b.n	8008b30 <USBD_CDC_Setup+0xa8>
 8008b2e:	2240      	movs	r2, #64	@ 0x40
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008b36:	6939      	ldr	r1, [r7, #16]
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008b3e:	461a      	mov	r2, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 fdbe 	bl	800a6c2 <USBD_CtlPrepareRx>
      break;
 8008b46:	e076      	b.n	8008c36 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	33b0      	adds	r3, #176	@ 0xb0
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	683a      	ldr	r2, [r7, #0]
 8008b5c:	7850      	ldrb	r0, [r2, #1]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	4798      	blx	r3
      break;
 8008b64:	e067      	b.n	8008c36 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	785b      	ldrb	r3, [r3, #1]
 8008b6a:	2b0b      	cmp	r3, #11
 8008b6c:	d851      	bhi.n	8008c12 <USBD_CDC_Setup+0x18a>
 8008b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b74 <USBD_CDC_Setup+0xec>)
 8008b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b74:	08008ba5 	.word	0x08008ba5
 8008b78:	08008c21 	.word	0x08008c21
 8008b7c:	08008c13 	.word	0x08008c13
 8008b80:	08008c13 	.word	0x08008c13
 8008b84:	08008c13 	.word	0x08008c13
 8008b88:	08008c13 	.word	0x08008c13
 8008b8c:	08008c13 	.word	0x08008c13
 8008b90:	08008c13 	.word	0x08008c13
 8008b94:	08008c13 	.word	0x08008c13
 8008b98:	08008c13 	.word	0x08008c13
 8008b9c:	08008bcf 	.word	0x08008bcf
 8008ba0:	08008bf9 	.word	0x08008bf9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b03      	cmp	r3, #3
 8008bae:	d107      	bne.n	8008bc0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008bb0:	f107 030a 	add.w	r3, r7, #10
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 fd53 	bl	800a664 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bbe:	e032      	b.n	8008c26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008bc0:	6839      	ldr	r1, [r7, #0]
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f001 fcd1 	bl	800a56a <USBD_CtlError>
            ret = USBD_FAIL;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	75fb      	strb	r3, [r7, #23]
          break;
 8008bcc:	e02b      	b.n	8008c26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d107      	bne.n	8008bea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008bda:	f107 030d 	add.w	r3, r7, #13
 8008bde:	2201      	movs	r2, #1
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f001 fd3e 	bl	800a664 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008be8:	e01d      	b.n	8008c26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f001 fcbc 	bl	800a56a <USBD_CtlError>
            ret = USBD_FAIL;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	75fb      	strb	r3, [r7, #23]
          break;
 8008bf6:	e016      	b.n	8008c26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d00f      	beq.n	8008c24 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f001 fcaf 	bl	800a56a <USBD_CtlError>
            ret = USBD_FAIL;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c10:	e008      	b.n	8008c24 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f001 fca8 	bl	800a56a <USBD_CtlError>
          ret = USBD_FAIL;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c1e:	e002      	b.n	8008c26 <USBD_CDC_Setup+0x19e>
          break;
 8008c20:	bf00      	nop
 8008c22:	e008      	b.n	8008c36 <USBD_CDC_Setup+0x1ae>
          break;
 8008c24:	bf00      	nop
      }
      break;
 8008c26:	e006      	b.n	8008c36 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 fc9d 	bl	800a56a <USBD_CtlError>
      ret = USBD_FAIL;
 8008c30:	2303      	movs	r3, #3
 8008c32:	75fb      	strb	r3, [r7, #23]
      break;
 8008c34:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	32b0      	adds	r2, #176	@ 0xb0
 8008c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e065      	b.n	8008d36 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	32b0      	adds	r2, #176	@ 0xb0
 8008c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	f003 020f 	and.w	r2, r3, #15
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	3314      	adds	r3, #20
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d02f      	beq.n	8008cf4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	f003 020f 	and.w	r2, r3, #15
 8008c9a:	6879      	ldr	r1, [r7, #4]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	440b      	add	r3, r1
 8008ca6:	3314      	adds	r3, #20
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	78fb      	ldrb	r3, [r7, #3]
 8008cac:	f003 010f 	and.w	r1, r3, #15
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	440b      	add	r3, r1
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4403      	add	r3, r0
 8008cbc:	331c      	adds	r3, #28
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	fbb2 f1f3 	udiv	r1, r2, r3
 8008cc4:	fb01 f303 	mul.w	r3, r1, r3
 8008cc8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d112      	bne.n	8008cf4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008cce:	78fb      	ldrb	r3, [r7, #3]
 8008cd0:	f003 020f 	and.w	r2, r3, #15
 8008cd4:	6879      	ldr	r1, [r7, #4]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	440b      	add	r3, r1
 8008ce0:	3314      	adds	r3, #20
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ce6:	78f9      	ldrb	r1, [r7, #3]
 8008ce8:	2300      	movs	r3, #0
 8008cea:	2200      	movs	r2, #0
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f002 f9fe 	bl	800b0ee <USBD_LL_Transmit>
 8008cf2:	e01f      	b.n	8008d34 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	33b0      	adds	r3, #176	@ 0xb0
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4413      	add	r3, r2
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d010      	beq.n	8008d34 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	33b0      	adds	r3, #176	@ 0xb0
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008d30:	78fa      	ldrb	r2, [r7, #3]
 8008d32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	460b      	mov	r3, r1
 8008d48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	32b0      	adds	r2, #176	@ 0xb0
 8008d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	32b0      	adds	r2, #176	@ 0xb0
 8008d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d101      	bne.n	8008d70 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e01a      	b.n	8008da6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d70:	78fb      	ldrb	r3, [r7, #3]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f002 f9fc 	bl	800b172 <USBD_LL_GetRxDataSize>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	33b0      	adds	r3, #176	@ 0xb0
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4413      	add	r3, r2
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008da0:	4611      	mov	r1, r2
 8008da2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	32b0      	adds	r2, #176	@ 0xb0
 8008dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e024      	b.n	8008e1a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	33b0      	adds	r3, #176	@ 0xb0
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d019      	beq.n	8008e18 <USBD_CDC_EP0_RxReady+0x6a>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008dea:	2bff      	cmp	r3, #255	@ 0xff
 8008dec:	d014      	beq.n	8008e18 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	33b0      	adds	r3, #176	@ 0xb0
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008e06:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e0e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	22ff      	movs	r2, #255	@ 0xff
 8008e14:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e2c:	2182      	movs	r1, #130	@ 0x82
 8008e2e:	4818      	ldr	r0, [pc, #96]	@ (8008e90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e30:	f000 fd62 	bl	80098f8 <USBD_GetEpDesc>
 8008e34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e36:	2101      	movs	r1, #1
 8008e38:	4815      	ldr	r0, [pc, #84]	@ (8008e90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e3a:	f000 fd5d 	bl	80098f8 <USBD_GetEpDesc>
 8008e3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e40:	2181      	movs	r1, #129	@ 0x81
 8008e42:	4813      	ldr	r0, [pc, #76]	@ (8008e90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e44:	f000 fd58 	bl	80098f8 <USBD_GetEpDesc>
 8008e48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2210      	movs	r2, #16
 8008e54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d006      	beq.n	8008e6a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e64:	711a      	strb	r2, [r3, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d006      	beq.n	8008e7e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e78:	711a      	strb	r2, [r3, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2243      	movs	r2, #67	@ 0x43
 8008e82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e84:	4b02      	ldr	r3, [pc, #8]	@ (8008e90 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3718      	adds	r7, #24
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	20000054 	.word	0x20000054

08008e94 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e9c:	2182      	movs	r1, #130	@ 0x82
 8008e9e:	4818      	ldr	r0, [pc, #96]	@ (8008f00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ea0:	f000 fd2a 	bl	80098f8 <USBD_GetEpDesc>
 8008ea4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	4815      	ldr	r0, [pc, #84]	@ (8008f00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008eaa:	f000 fd25 	bl	80098f8 <USBD_GetEpDesc>
 8008eae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008eb0:	2181      	movs	r1, #129	@ 0x81
 8008eb2:	4813      	ldr	r0, [pc, #76]	@ (8008f00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008eb4:	f000 fd20 	bl	80098f8 <USBD_GetEpDesc>
 8008eb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	2210      	movs	r2, #16
 8008ec4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d006      	beq.n	8008eda <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	711a      	strb	r2, [r3, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f042 0202 	orr.w	r2, r2, #2
 8008ed8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d006      	beq.n	8008eee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	711a      	strb	r2, [r3, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f042 0202 	orr.w	r2, r2, #2
 8008eec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2243      	movs	r2, #67	@ 0x43
 8008ef2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ef4:	4b02      	ldr	r3, [pc, #8]	@ (8008f00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20000054 	.word	0x20000054

08008f04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f0c:	2182      	movs	r1, #130	@ 0x82
 8008f0e:	4818      	ldr	r0, [pc, #96]	@ (8008f70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f10:	f000 fcf2 	bl	80098f8 <USBD_GetEpDesc>
 8008f14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f16:	2101      	movs	r1, #1
 8008f18:	4815      	ldr	r0, [pc, #84]	@ (8008f70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f1a:	f000 fced 	bl	80098f8 <USBD_GetEpDesc>
 8008f1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f20:	2181      	movs	r1, #129	@ 0x81
 8008f22:	4813      	ldr	r0, [pc, #76]	@ (8008f70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f24:	f000 fce8 	bl	80098f8 <USBD_GetEpDesc>
 8008f28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2210      	movs	r2, #16
 8008f34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d006      	beq.n	8008f4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f44:	711a      	strb	r2, [r3, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d006      	beq.n	8008f5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f58:	711a      	strb	r2, [r3, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2243      	movs	r2, #67	@ 0x43
 8008f62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f64:	4b02      	ldr	r3, [pc, #8]	@ (8008f70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20000054 	.word	0x20000054

08008f74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	220a      	movs	r2, #10
 8008f80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008f82:	4b03      	ldr	r3, [pc, #12]	@ (8008f90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	20000010 	.word	0x20000010

08008f94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e009      	b.n	8008fbc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	33b0      	adds	r3, #176	@ 0xb0
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	32b0      	adds	r2, #176	@ 0xb0
 8008fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e008      	b.n	8009000 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	371c      	adds	r7, #28
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	32b0      	adds	r2, #176	@ 0xb0
 8009020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009024:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800902c:	2303      	movs	r3, #3
 800902e:	e004      	b.n	800903a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
	...

08009048 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	32b0      	adds	r2, #176	@ 0xb0
 800905a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009060:	2301      	movs	r3, #1
 8009062:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800906a:	2303      	movs	r3, #3
 800906c:	e025      	b.n	80090ba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009074:	2b00      	cmp	r3, #0
 8009076:	d11f      	bne.n	80090b8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	2201      	movs	r2, #1
 800907c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009080:	4b10      	ldr	r3, [pc, #64]	@ (80090c4 <USBD_CDC_TransmitPacket+0x7c>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	f003 020f 	and.w	r2, r3, #15
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	4613      	mov	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4403      	add	r3, r0
 800909a:	3314      	adds	r3, #20
 800909c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800909e:	4b09      	ldr	r3, [pc, #36]	@ (80090c4 <USBD_CDC_TransmitPacket+0x7c>)
 80090a0:	7819      	ldrb	r1, [r3, #0]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f002 f81d 	bl	800b0ee <USBD_LL_Transmit>

    ret = USBD_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000097 	.word	0x20000097

080090c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	32b0      	adds	r2, #176	@ 0xb0
 80090da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	32b0      	adds	r2, #176	@ 0xb0
 80090ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e018      	b.n	8009128 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	7c1b      	ldrb	r3, [r3, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10a      	bne.n	8009114 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009130 <USBD_CDC_ReceivePacket+0x68>)
 8009100:	7819      	ldrb	r1, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009108:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f002 f80f 	bl	800b130 <USBD_LL_PrepareReceive>
 8009112:	e008      	b.n	8009126 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009114:	4b06      	ldr	r3, [pc, #24]	@ (8009130 <USBD_CDC_ReceivePacket+0x68>)
 8009116:	7819      	ldrb	r1, [r3, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800911e:	2340      	movs	r3, #64	@ 0x40
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f002 f805 	bl	800b130 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	20000098 	.word	0x20000098

08009134 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	4613      	mov	r3, r2
 8009140:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009148:	2303      	movs	r3, #3
 800914a:	e01f      	b.n	800918c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	79fa      	ldrb	r2, [r7, #7]
 800917e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f001 fe7f 	bl	800ae84 <USBD_LL_Init>
 8009186:	4603      	mov	r3, r0
 8009188:	75fb      	strb	r3, [r7, #23]

  return ret;
 800918a:	7dfb      	ldrb	r3, [r7, #23]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e025      	b.n	80091f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	32ae      	adds	r2, #174	@ 0xae
 80091be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00f      	beq.n	80091e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	32ae      	adds	r2, #174	@ 0xae
 80091d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d8:	f107 020e 	add.w	r2, r7, #14
 80091dc:	4610      	mov	r0, r2
 80091de:	4798      	blx	r3
 80091e0:	4602      	mov	r2, r0
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80091ee:	1c5a      	adds	r2, r3, #1
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 fe87 	bl	800af1c <USBD_LL_Start>
 800920e:	4603      	mov	r3, r0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009220:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009222:	4618      	mov	r0, r3
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	460b      	mov	r3, r1
 8009238:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009244:	2b00      	cmp	r3, #0
 8009246:	d009      	beq.n	800925c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	78fa      	ldrb	r2, [r7, #3]
 8009252:	4611      	mov	r1, r2
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	4798      	blx	r3
 8009258:	4603      	mov	r3, r0
 800925a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	460b      	mov	r3, r1
 8009270:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	78fa      	ldrb	r2, [r7, #3]
 8009280:	4611      	mov	r1, r2
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	4798      	blx	r3
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800928c:	2303      	movs	r3, #3
 800928e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f001 f922 	bl	800a4f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80092c0:	461a      	mov	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80092ce:	f003 031f 	and.w	r3, r3, #31
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d01a      	beq.n	800930c <USBD_LL_SetupStage+0x72>
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d822      	bhi.n	8009320 <USBD_LL_SetupStage+0x86>
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <USBD_LL_SetupStage+0x4a>
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d00a      	beq.n	80092f8 <USBD_LL_SetupStage+0x5e>
 80092e2:	e01d      	b.n	8009320 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fb77 	bl	80099e0 <USBD_StdDevReq>
 80092f2:	4603      	mov	r3, r0
 80092f4:	73fb      	strb	r3, [r7, #15]
      break;
 80092f6:	e020      	b.n	800933a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fbdf 	bl	8009ac4 <USBD_StdItfReq>
 8009306:	4603      	mov	r3, r0
 8009308:	73fb      	strb	r3, [r7, #15]
      break;
 800930a:	e016      	b.n	800933a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fc41 	bl	8009b9c <USBD_StdEPReq>
 800931a:	4603      	mov	r3, r0
 800931c:	73fb      	strb	r3, [r7, #15]
      break;
 800931e:	e00c      	b.n	800933a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009326:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800932a:	b2db      	uxtb	r3, r3
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f001 fe54 	bl	800afdc <USBD_LL_StallEP>
 8009334:	4603      	mov	r3, r0
 8009336:	73fb      	strb	r3, [r7, #15]
      break;
 8009338:	bf00      	nop
  }

  return ret;
 800933a:	7bfb      	ldrb	r3, [r7, #15]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	460b      	mov	r3, r1
 800934e:	607a      	str	r2, [r7, #4]
 8009350:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8009356:	7afb      	ldrb	r3, [r7, #11]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d177      	bne.n	800944c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009362:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800936a:	2b03      	cmp	r3, #3
 800936c:	f040 80a1 	bne.w	80094b2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	8992      	ldrh	r2, [r2, #12]
 8009378:	4293      	cmp	r3, r2
 800937a:	d91c      	bls.n	80093b6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	8992      	ldrh	r2, [r2, #12]
 8009384:	1a9a      	subs	r2, r3, r2
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	8992      	ldrh	r2, [r2, #12]
 8009392:	441a      	add	r2, r3
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	6919      	ldr	r1, [r3, #16]
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	899b      	ldrh	r3, [r3, #12]
 80093a0:	461a      	mov	r2, r3
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	4293      	cmp	r3, r2
 80093a8:	bf38      	it	cc
 80093aa:	4613      	movcc	r3, r2
 80093ac:	461a      	mov	r2, r3
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f001 f9a8 	bl	800a704 <USBD_CtlContinueRx>
 80093b4:	e07d      	b.n	80094b2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80093bc:	f003 031f 	and.w	r3, r3, #31
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d014      	beq.n	80093ee <USBD_LL_DataOutStage+0xaa>
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d81d      	bhi.n	8009404 <USBD_LL_DataOutStage+0xc0>
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <USBD_LL_DataOutStage+0x8e>
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d003      	beq.n	80093d8 <USBD_LL_DataOutStage+0x94>
 80093d0:	e018      	b.n	8009404 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	75bb      	strb	r3, [r7, #22]
            break;
 80093d6:	e018      	b.n	800940a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	4619      	mov	r1, r3
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 fa6e 	bl	80098c4 <USBD_CoreFindIF>
 80093e8:	4603      	mov	r3, r0
 80093ea:	75bb      	strb	r3, [r7, #22]
            break;
 80093ec:	e00d      	b.n	800940a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	4619      	mov	r1, r3
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 fa70 	bl	80098de <USBD_CoreFindEP>
 80093fe:	4603      	mov	r3, r0
 8009400:	75bb      	strb	r3, [r7, #22]
            break;
 8009402:	e002      	b.n	800940a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009404:	2300      	movs	r3, #0
 8009406:	75bb      	strb	r3, [r7, #22]
            break;
 8009408:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800940a:	7dbb      	ldrb	r3, [r7, #22]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d119      	bne.n	8009444 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b03      	cmp	r3, #3
 800941a:	d113      	bne.n	8009444 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800941c:	7dba      	ldrb	r2, [r7, #22]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	32ae      	adds	r2, #174	@ 0xae
 8009422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00b      	beq.n	8009444 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800942c:	7dba      	ldrb	r2, [r7, #22]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009434:	7dba      	ldrb	r2, [r7, #22]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	32ae      	adds	r2, #174	@ 0xae
 800943a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f001 f96e 	bl	800a726 <USBD_CtlSendStatus>
 800944a:	e032      	b.n	80094b2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800944c:	7afb      	ldrb	r3, [r7, #11]
 800944e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009452:	b2db      	uxtb	r3, r3
 8009454:	4619      	mov	r1, r3
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 fa41 	bl	80098de <USBD_CoreFindEP>
 800945c:	4603      	mov	r3, r0
 800945e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009460:	7dbb      	ldrb	r3, [r7, #22]
 8009462:	2bff      	cmp	r3, #255	@ 0xff
 8009464:	d025      	beq.n	80094b2 <USBD_LL_DataOutStage+0x16e>
 8009466:	7dbb      	ldrb	r3, [r7, #22]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d122      	bne.n	80094b2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b03      	cmp	r3, #3
 8009476:	d117      	bne.n	80094a8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009478:	7dba      	ldrb	r2, [r7, #22]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	32ae      	adds	r2, #174	@ 0xae
 800947e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00f      	beq.n	80094a8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8009488:	7dba      	ldrb	r2, [r7, #22]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009490:	7dba      	ldrb	r2, [r7, #22]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	32ae      	adds	r2, #174	@ 0xae
 8009496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	7afa      	ldrb	r2, [r7, #11]
 800949e:	4611      	mov	r1, r2
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	4798      	blx	r3
 80094a4:	4603      	mov	r3, r0
 80094a6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80094a8:	7dfb      	ldrb	r3, [r7, #23]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80094ae:	7dfb      	ldrb	r3, [r7, #23]
 80094b0:	e000      	b.n	80094b4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3718      	adds	r7, #24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	460b      	mov	r3, r1
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80094ca:	7afb      	ldrb	r3, [r7, #11]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d178      	bne.n	80095c2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3314      	adds	r3, #20
 80094d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d163      	bne.n	80095a8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	693a      	ldr	r2, [r7, #16]
 80094e6:	8992      	ldrh	r2, [r2, #12]
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d91c      	bls.n	8009526 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	8992      	ldrh	r2, [r2, #12]
 80094f4:	1a9a      	subs	r2, r3, r2
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	8992      	ldrh	r2, [r2, #12]
 8009502:	441a      	add	r2, r3
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	6919      	ldr	r1, [r3, #16]
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	461a      	mov	r2, r3
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f001 f8c4 	bl	800a6a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009518:	2300      	movs	r3, #0
 800951a:	2200      	movs	r2, #0
 800951c:	2100      	movs	r1, #0
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f001 fe06 	bl	800b130 <USBD_LL_PrepareReceive>
 8009524:	e040      	b.n	80095a8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	899b      	ldrh	r3, [r3, #12]
 800952a:	461a      	mov	r2, r3
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	429a      	cmp	r2, r3
 8009532:	d11c      	bne.n	800956e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800953c:	4293      	cmp	r3, r2
 800953e:	d316      	bcc.n	800956e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800954a:	429a      	cmp	r2, r3
 800954c:	d20f      	bcs.n	800956e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800954e:	2200      	movs	r2, #0
 8009550:	2100      	movs	r1, #0
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f001 f8a4 	bl	800a6a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009560:	2300      	movs	r3, #0
 8009562:	2200      	movs	r2, #0
 8009564:	2100      	movs	r1, #0
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f001 fde2 	bl	800b130 <USBD_LL_PrepareReceive>
 800956c:	e01c      	b.n	80095a8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b03      	cmp	r3, #3
 8009578:	d10f      	bne.n	800959a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d009      	beq.n	800959a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800959a:	2180      	movs	r1, #128	@ 0x80
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f001 fd1d 	bl	800afdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f001 f8d2 	bl	800a74c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d03a      	beq.n	8009628 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f7ff fe30 	bl	8009218 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80095c0:	e032      	b.n	8009628 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80095c2:	7afb      	ldrb	r3, [r7, #11]
 80095c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	4619      	mov	r1, r3
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 f986 	bl	80098de <USBD_CoreFindEP>
 80095d2:	4603      	mov	r3, r0
 80095d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	2bff      	cmp	r3, #255	@ 0xff
 80095da:	d025      	beq.n	8009628 <USBD_LL_DataInStage+0x16c>
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d122      	bne.n	8009628 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d11c      	bne.n	8009628 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80095ee:	7dfa      	ldrb	r2, [r7, #23]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	32ae      	adds	r2, #174	@ 0xae
 80095f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d014      	beq.n	8009628 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80095fe:	7dfa      	ldrb	r2, [r7, #23]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009606:	7dfa      	ldrb	r2, [r7, #23]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	32ae      	adds	r2, #174	@ 0xae
 800960c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	7afa      	ldrb	r2, [r7, #11]
 8009614:	4611      	mov	r1, r2
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	4798      	blx	r3
 800961a:	4603      	mov	r3, r0
 800961c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800961e:	7dbb      	ldrb	r3, [r7, #22]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8009624:	7dbb      	ldrb	r3, [r7, #22]
 8009626:	e000      	b.n	800962a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3718      	adds	r7, #24
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800966a:	2b00      	cmp	r3, #0
 800966c:	d014      	beq.n	8009698 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00e      	beq.n	8009698 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	6852      	ldr	r2, [r2, #4]
 8009686:	b2d2      	uxtb	r2, r2
 8009688:	4611      	mov	r1, r2
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	4798      	blx	r3
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009694:	2303      	movs	r3, #3
 8009696:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009698:	2340      	movs	r3, #64	@ 0x40
 800969a:	2200      	movs	r2, #0
 800969c:	2100      	movs	r1, #0
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f001 fc57 	bl	800af52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2240      	movs	r2, #64	@ 0x40
 80096b0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096b4:	2340      	movs	r3, #64	@ 0x40
 80096b6:	2200      	movs	r2, #0
 80096b8:	2180      	movs	r1, #128	@ 0x80
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 fc49 	bl	800af52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2240      	movs	r2, #64	@ 0x40
 80096cc:	841a      	strh	r2, [r3, #32]

  return ret;
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	78fa      	ldrb	r2, [r7, #3]
 80096e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009706:	b2db      	uxtb	r3, r3
 8009708:	2b04      	cmp	r3, #4
 800970a:	d006      	beq.n	800971a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009712:	b2da      	uxtb	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2204      	movs	r2, #4
 800971e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800973e:	b2db      	uxtb	r3, r3
 8009740:	2b04      	cmp	r3, #4
 8009742:	d106      	bne.n	8009752 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800974a:	b2da      	uxtb	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b03      	cmp	r3, #3
 8009772:	d110      	bne.n	8009796 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00b      	beq.n	8009796 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d005      	beq.n	8009796 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	32ae      	adds	r2, #174	@ 0xae
 80097b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80097be:	2303      	movs	r3, #3
 80097c0:	e01c      	b.n	80097fc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b03      	cmp	r3, #3
 80097cc:	d115      	bne.n	80097fa <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	32ae      	adds	r2, #174	@ 0xae
 80097d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00b      	beq.n	80097fa <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	32ae      	adds	r2, #174	@ 0xae
 80097ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	78fa      	ldrb	r2, [r7, #3]
 80097f4:	4611      	mov	r1, r2
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	32ae      	adds	r2, #174	@ 0xae
 800981a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009822:	2303      	movs	r3, #3
 8009824:	e01c      	b.n	8009860 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b03      	cmp	r3, #3
 8009830:	d115      	bne.n	800985e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	32ae      	adds	r2, #174	@ 0xae
 800983c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00b      	beq.n	800985e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	32ae      	adds	r2, #174	@ 0xae
 8009850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009856:	78fa      	ldrb	r2, [r7, #3]
 8009858:	4611      	mov	r1, r2
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00e      	beq.n	80098ba <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	6852      	ldr	r2, [r2, #4]
 80098a8:	b2d2      	uxtb	r2, r2
 80098aa:	4611      	mov	r1, r2
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	4798      	blx	r3
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80098b6:	2303      	movs	r3, #3
 80098b8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	460b      	mov	r3, r1
 80098e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800990c:	2300      	movs	r3, #0
 800990e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	885b      	ldrh	r3, [r3, #2]
 8009914:	b29b      	uxth	r3, r3
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	7812      	ldrb	r2, [r2, #0]
 800991a:	4293      	cmp	r3, r2
 800991c:	d91f      	bls.n	800995e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009924:	e013      	b.n	800994e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009926:	f107 030a 	add.w	r3, r7, #10
 800992a:	4619      	mov	r1, r3
 800992c:	6978      	ldr	r0, [r7, #20]
 800992e:	f000 f81b 	bl	8009968 <USBD_GetNextDesc>
 8009932:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	785b      	ldrb	r3, [r3, #1]
 8009938:	2b05      	cmp	r3, #5
 800993a:	d108      	bne.n	800994e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	789b      	ldrb	r3, [r3, #2]
 8009944:	78fa      	ldrb	r2, [r7, #3]
 8009946:	429a      	cmp	r2, r3
 8009948:	d008      	beq.n	800995c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800994a:	2300      	movs	r3, #0
 800994c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	885b      	ldrh	r3, [r3, #2]
 8009952:	b29a      	uxth	r2, r3
 8009954:	897b      	ldrh	r3, [r7, #10]
 8009956:	429a      	cmp	r2, r3
 8009958:	d8e5      	bhi.n	8009926 <USBD_GetEpDesc+0x2e>
 800995a:	e000      	b.n	800995e <USBD_GetEpDesc+0x66>
          break;
 800995c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800995e:	693b      	ldr	r3, [r7, #16]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	7812      	ldrb	r2, [r2, #0]
 800997e:	4413      	add	r3, r2
 8009980:	b29a      	uxth	r2, r3
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	461a      	mov	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4413      	add	r3, r2
 8009990:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009992:	68fb      	ldr	r3, [r7, #12]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	3301      	adds	r3, #1
 80099b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80099be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80099c2:	021b      	lsls	r3, r3, #8
 80099c4:	b21a      	sxth	r2, r3
 80099c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	b21b      	sxth	r3, r3
 80099ce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80099d0:	89fb      	ldrh	r3, [r7, #14]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	371c      	adds	r7, #28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
	...

080099e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099f6:	2b40      	cmp	r3, #64	@ 0x40
 80099f8:	d005      	beq.n	8009a06 <USBD_StdDevReq+0x26>
 80099fa:	2b40      	cmp	r3, #64	@ 0x40
 80099fc:	d857      	bhi.n	8009aae <USBD_StdDevReq+0xce>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00f      	beq.n	8009a22 <USBD_StdDevReq+0x42>
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	d153      	bne.n	8009aae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	32ae      	adds	r2, #174	@ 0xae
 8009a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	4798      	blx	r3
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a20:	e04a      	b.n	8009ab8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	785b      	ldrb	r3, [r3, #1]
 8009a26:	2b09      	cmp	r3, #9
 8009a28:	d83b      	bhi.n	8009aa2 <USBD_StdDevReq+0xc2>
 8009a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a30 <USBD_StdDevReq+0x50>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009a85 	.word	0x08009a85
 8009a34:	08009a99 	.word	0x08009a99
 8009a38:	08009aa3 	.word	0x08009aa3
 8009a3c:	08009a8f 	.word	0x08009a8f
 8009a40:	08009aa3 	.word	0x08009aa3
 8009a44:	08009a63 	.word	0x08009a63
 8009a48:	08009a59 	.word	0x08009a59
 8009a4c:	08009aa3 	.word	0x08009aa3
 8009a50:	08009a7b 	.word	0x08009a7b
 8009a54:	08009a6d 	.word	0x08009a6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fa3e 	bl	8009edc <USBD_GetDescriptor>
          break;
 8009a60:	e024      	b.n	8009aac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fba3 	bl	800a1b0 <USBD_SetAddress>
          break;
 8009a6a:	e01f      	b.n	8009aac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fbe2 	bl	800a238 <USBD_SetConfig>
 8009a74:	4603      	mov	r3, r0
 8009a76:	73fb      	strb	r3, [r7, #15]
          break;
 8009a78:	e018      	b.n	8009aac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fc85 	bl	800a38c <USBD_GetConfig>
          break;
 8009a82:	e013      	b.n	8009aac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fcb6 	bl	800a3f8 <USBD_GetStatus>
          break;
 8009a8c:	e00e      	b.n	8009aac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fce5 	bl	800a460 <USBD_SetFeature>
          break;
 8009a96:	e009      	b.n	8009aac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fd09 	bl	800a4b2 <USBD_ClrFeature>
          break;
 8009aa0:	e004      	b.n	8009aac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fd60 	bl	800a56a <USBD_CtlError>
          break;
 8009aaa:	bf00      	nop
      }
      break;
 8009aac:	e004      	b.n	8009ab8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fd5a 	bl	800a56a <USBD_CtlError>
      break;
 8009ab6:	bf00      	nop
  }

  return ret;
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop

08009ac4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ada:	2b40      	cmp	r3, #64	@ 0x40
 8009adc:	d005      	beq.n	8009aea <USBD_StdItfReq+0x26>
 8009ade:	2b40      	cmp	r3, #64	@ 0x40
 8009ae0:	d852      	bhi.n	8009b88 <USBD_StdItfReq+0xc4>
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d001      	beq.n	8009aea <USBD_StdItfReq+0x26>
 8009ae6:	2b20      	cmp	r3, #32
 8009ae8:	d14e      	bne.n	8009b88 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	3b01      	subs	r3, #1
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d840      	bhi.n	8009b7a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	889b      	ldrh	r3, [r3, #4]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d836      	bhi.n	8009b70 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	889b      	ldrh	r3, [r3, #4]
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff feda 	bl	80098c4 <USBD_CoreFindIF>
 8009b10:	4603      	mov	r3, r0
 8009b12:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b14:	7bbb      	ldrb	r3, [r7, #14]
 8009b16:	2bff      	cmp	r3, #255	@ 0xff
 8009b18:	d01d      	beq.n	8009b56 <USBD_StdItfReq+0x92>
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d11a      	bne.n	8009b56 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b20:	7bba      	ldrb	r2, [r7, #14]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	32ae      	adds	r2, #174	@ 0xae
 8009b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00f      	beq.n	8009b50 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009b30:	7bba      	ldrb	r2, [r7, #14]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b38:	7bba      	ldrb	r2, [r7, #14]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	32ae      	adds	r2, #174	@ 0xae
 8009b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	6839      	ldr	r1, [r7, #0]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	4798      	blx	r3
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b4e:	e004      	b.n	8009b5a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009b50:	2303      	movs	r3, #3
 8009b52:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b54:	e001      	b.n	8009b5a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009b56:	2303      	movs	r3, #3
 8009b58:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	88db      	ldrh	r3, [r3, #6]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d110      	bne.n	8009b84 <USBD_StdItfReq+0xc0>
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10d      	bne.n	8009b84 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fddc 	bl	800a726 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b6e:	e009      	b.n	8009b84 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fcf9 	bl	800a56a <USBD_CtlError>
          break;
 8009b78:	e004      	b.n	8009b84 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fcf4 	bl	800a56a <USBD_CtlError>
          break;
 8009b82:	e000      	b.n	8009b86 <USBD_StdItfReq+0xc2>
          break;
 8009b84:	bf00      	nop
      }
      break;
 8009b86:	e004      	b.n	8009b92 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fced 	bl	800a56a <USBD_CtlError>
      break;
 8009b90:	bf00      	nop
  }

  return ret;
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	889b      	ldrh	r3, [r3, #4]
 8009bae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bb8:	2b40      	cmp	r3, #64	@ 0x40
 8009bba:	d007      	beq.n	8009bcc <USBD_StdEPReq+0x30>
 8009bbc:	2b40      	cmp	r3, #64	@ 0x40
 8009bbe:	f200 8181 	bhi.w	8009ec4 <USBD_StdEPReq+0x328>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d02a      	beq.n	8009c1c <USBD_StdEPReq+0x80>
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	f040 817c 	bne.w	8009ec4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009bcc:	7bbb      	ldrb	r3, [r7, #14]
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7ff fe84 	bl	80098de <USBD_CoreFindEP>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bda:	7b7b      	ldrb	r3, [r7, #13]
 8009bdc:	2bff      	cmp	r3, #255	@ 0xff
 8009bde:	f000 8176 	beq.w	8009ece <USBD_StdEPReq+0x332>
 8009be2:	7b7b      	ldrb	r3, [r7, #13]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f040 8172 	bne.w	8009ece <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8009bea:	7b7a      	ldrb	r2, [r7, #13]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009bf2:	7b7a      	ldrb	r2, [r7, #13]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	32ae      	adds	r2, #174	@ 0xae
 8009bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 8165 	beq.w	8009ece <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c04:	7b7a      	ldrb	r2, [r7, #13]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	32ae      	adds	r2, #174	@ 0xae
 8009c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	4798      	blx	r3
 8009c16:	4603      	mov	r3, r0
 8009c18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c1a:	e158      	b.n	8009ece <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	785b      	ldrb	r3, [r3, #1]
 8009c20:	2b03      	cmp	r3, #3
 8009c22:	d008      	beq.n	8009c36 <USBD_StdEPReq+0x9a>
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	f300 8147 	bgt.w	8009eb8 <USBD_StdEPReq+0x31c>
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f000 809b 	beq.w	8009d66 <USBD_StdEPReq+0x1ca>
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d03c      	beq.n	8009cae <USBD_StdEPReq+0x112>
 8009c34:	e140      	b.n	8009eb8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d002      	beq.n	8009c48 <USBD_StdEPReq+0xac>
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d016      	beq.n	8009c74 <USBD_StdEPReq+0xd8>
 8009c46:	e02c      	b.n	8009ca2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00d      	beq.n	8009c6a <USBD_StdEPReq+0xce>
 8009c4e:	7bbb      	ldrb	r3, [r7, #14]
 8009c50:	2b80      	cmp	r3, #128	@ 0x80
 8009c52:	d00a      	beq.n	8009c6a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c54:	7bbb      	ldrb	r3, [r7, #14]
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f001 f9bf 	bl	800afdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c5e:	2180      	movs	r1, #128	@ 0x80
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f001 f9bb 	bl	800afdc <USBD_LL_StallEP>
 8009c66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c68:	e020      	b.n	8009cac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fc7c 	bl	800a56a <USBD_CtlError>
              break;
 8009c72:	e01b      	b.n	8009cac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	885b      	ldrh	r3, [r3, #2]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10e      	bne.n	8009c9a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c7c:	7bbb      	ldrb	r3, [r7, #14]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00b      	beq.n	8009c9a <USBD_StdEPReq+0xfe>
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	2b80      	cmp	r3, #128	@ 0x80
 8009c86:	d008      	beq.n	8009c9a <USBD_StdEPReq+0xfe>
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	88db      	ldrh	r3, [r3, #6]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d104      	bne.n	8009c9a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c90:	7bbb      	ldrb	r3, [r7, #14]
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f001 f9a1 	bl	800afdc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fd43 	bl	800a726 <USBD_CtlSendStatus>

              break;
 8009ca0:	e004      	b.n	8009cac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fc60 	bl	800a56a <USBD_CtlError>
              break;
 8009caa:	bf00      	nop
          }
          break;
 8009cac:	e109      	b.n	8009ec2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d002      	beq.n	8009cc0 <USBD_StdEPReq+0x124>
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	d016      	beq.n	8009cec <USBD_StdEPReq+0x150>
 8009cbe:	e04b      	b.n	8009d58 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00d      	beq.n	8009ce2 <USBD_StdEPReq+0x146>
 8009cc6:	7bbb      	ldrb	r3, [r7, #14]
 8009cc8:	2b80      	cmp	r3, #128	@ 0x80
 8009cca:	d00a      	beq.n	8009ce2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f001 f983 	bl	800afdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cd6:	2180      	movs	r1, #128	@ 0x80
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f001 f97f 	bl	800afdc <USBD_LL_StallEP>
 8009cde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ce0:	e040      	b.n	8009d64 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fc40 	bl	800a56a <USBD_CtlError>
              break;
 8009cea:	e03b      	b.n	8009d64 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	885b      	ldrh	r3, [r3, #2]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d136      	bne.n	8009d62 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d004      	beq.n	8009d08 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 f989 	bl	800b01a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fd0c 	bl	800a726 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff fde3 	bl	80098de <USBD_CoreFindEP>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d1c:	7b7b      	ldrb	r3, [r7, #13]
 8009d1e:	2bff      	cmp	r3, #255	@ 0xff
 8009d20:	d01f      	beq.n	8009d62 <USBD_StdEPReq+0x1c6>
 8009d22:	7b7b      	ldrb	r3, [r7, #13]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d11c      	bne.n	8009d62 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d28:	7b7a      	ldrb	r2, [r7, #13]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009d30:	7b7a      	ldrb	r2, [r7, #13]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	32ae      	adds	r2, #174	@ 0xae
 8009d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d010      	beq.n	8009d62 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d40:	7b7a      	ldrb	r2, [r7, #13]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	32ae      	adds	r2, #174	@ 0xae
 8009d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	4798      	blx	r3
 8009d52:	4603      	mov	r3, r0
 8009d54:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009d56:	e004      	b.n	8009d62 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fc05 	bl	800a56a <USBD_CtlError>
              break;
 8009d60:	e000      	b.n	8009d64 <USBD_StdEPReq+0x1c8>
              break;
 8009d62:	bf00      	nop
          }
          break;
 8009d64:	e0ad      	b.n	8009ec2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d002      	beq.n	8009d78 <USBD_StdEPReq+0x1dc>
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d033      	beq.n	8009dde <USBD_StdEPReq+0x242>
 8009d76:	e099      	b.n	8009eac <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d007      	beq.n	8009d8e <USBD_StdEPReq+0x1f2>
 8009d7e:	7bbb      	ldrb	r3, [r7, #14]
 8009d80:	2b80      	cmp	r3, #128	@ 0x80
 8009d82:	d004      	beq.n	8009d8e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fbef 	bl	800a56a <USBD_CtlError>
                break;
 8009d8c:	e093      	b.n	8009eb6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da0b      	bge.n	8009dae <USBD_StdEPReq+0x212>
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	3310      	adds	r3, #16
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	4413      	add	r3, r2
 8009daa:	3304      	adds	r3, #4
 8009dac:	e00b      	b.n	8009dc6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009db4:	4613      	mov	r3, r2
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	330e      	adds	r3, #14
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fc44 	bl	800a664 <USBD_CtlSendData>
              break;
 8009ddc:	e06b      	b.n	8009eb6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009dde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	da11      	bge.n	8009e0a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	f003 020f 	and.w	r2, r3, #15
 8009dec:	6879      	ldr	r1, [r7, #4]
 8009dee:	4613      	mov	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	440b      	add	r3, r1
 8009df8:	3323      	adds	r3, #35	@ 0x23
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d117      	bne.n	8009e30 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fbb1 	bl	800a56a <USBD_CtlError>
                  break;
 8009e08:	e055      	b.n	8009eb6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e0a:	7bbb      	ldrb	r3, [r7, #14]
 8009e0c:	f003 020f 	and.w	r2, r3, #15
 8009e10:	6879      	ldr	r1, [r7, #4]
 8009e12:	4613      	mov	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	440b      	add	r3, r1
 8009e1c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d104      	bne.n	8009e30 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fb9e 	bl	800a56a <USBD_CtlError>
                  break;
 8009e2e:	e042      	b.n	8009eb6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	da0b      	bge.n	8009e50 <USBD_StdEPReq+0x2b4>
 8009e38:	7bbb      	ldrb	r3, [r7, #14]
 8009e3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e3e:	4613      	mov	r3, r2
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	4413      	add	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	3310      	adds	r3, #16
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	e00b      	b.n	8009e68 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
 8009e52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e56:	4613      	mov	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	4413      	add	r3, r2
 8009e66:	3304      	adds	r3, #4
 8009e68:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <USBD_StdEPReq+0x2da>
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	2b80      	cmp	r3, #128	@ 0x80
 8009e74:	d103      	bne.n	8009e7e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	739a      	strb	r2, [r3, #14]
 8009e7c:	e00e      	b.n	8009e9c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009e7e:	7bbb      	ldrb	r3, [r7, #14]
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f001 f8e8 	bl	800b058 <USBD_LL_IsStallEP>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2201      	movs	r2, #1
 8009e92:	739a      	strb	r2, [r3, #14]
 8009e94:	e002      	b.n	8009e9c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	330e      	adds	r3, #14
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fbdd 	bl	800a664 <USBD_CtlSendData>
              break;
 8009eaa:	e004      	b.n	8009eb6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fb5b 	bl	800a56a <USBD_CtlError>
              break;
 8009eb4:	bf00      	nop
          }
          break;
 8009eb6:	e004      	b.n	8009ec2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fb55 	bl	800a56a <USBD_CtlError>
          break;
 8009ec0:	bf00      	nop
      }
      break;
 8009ec2:	e005      	b.n	8009ed0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fb4f 	bl	800a56a <USBD_CtlError>
      break;
 8009ecc:	e000      	b.n	8009ed0 <USBD_StdEPReq+0x334>
      break;
 8009ece:	bf00      	nop
  }

  return ret;
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	885b      	ldrh	r3, [r3, #2]
 8009ef6:	0a1b      	lsrs	r3, r3, #8
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	3b01      	subs	r3, #1
 8009efc:	2b06      	cmp	r3, #6
 8009efe:	f200 8128 	bhi.w	800a152 <USBD_GetDescriptor+0x276>
 8009f02:	a201      	add	r2, pc, #4	@ (adr r2, 8009f08 <USBD_GetDescriptor+0x2c>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f25 	.word	0x08009f25
 8009f0c:	08009f3d 	.word	0x08009f3d
 8009f10:	08009f7d 	.word	0x08009f7d
 8009f14:	0800a153 	.word	0x0800a153
 8009f18:	0800a153 	.word	0x0800a153
 8009f1c:	0800a0f3 	.word	0x0800a0f3
 8009f20:	0800a11f 	.word	0x0800a11f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	7c12      	ldrb	r2, [r2, #16]
 8009f30:	f107 0108 	add.w	r1, r7, #8
 8009f34:	4610      	mov	r0, r2
 8009f36:	4798      	blx	r3
 8009f38:	60f8      	str	r0, [r7, #12]
      break;
 8009f3a:	e112      	b.n	800a162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	7c1b      	ldrb	r3, [r3, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10d      	bne.n	8009f60 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4c:	f107 0208 	add.w	r2, r7, #8
 8009f50:	4610      	mov	r0, r2
 8009f52:	4798      	blx	r3
 8009f54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f5e:	e100      	b.n	800a162 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f68:	f107 0208 	add.w	r2, r7, #8
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4798      	blx	r3
 8009f70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3301      	adds	r3, #1
 8009f76:	2202      	movs	r2, #2
 8009f78:	701a      	strb	r2, [r3, #0]
      break;
 8009f7a:	e0f2      	b.n	800a162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	885b      	ldrh	r3, [r3, #2]
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b05      	cmp	r3, #5
 8009f84:	f200 80ac 	bhi.w	800a0e0 <USBD_GetDescriptor+0x204>
 8009f88:	a201      	add	r2, pc, #4	@ (adr r2, 8009f90 <USBD_GetDescriptor+0xb4>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	08009fa9 	.word	0x08009fa9
 8009f94:	08009fdd 	.word	0x08009fdd
 8009f98:	0800a011 	.word	0x0800a011
 8009f9c:	0800a045 	.word	0x0800a045
 8009fa0:	0800a079 	.word	0x0800a079
 8009fa4:	0800a0ad 	.word	0x0800a0ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	7c12      	ldrb	r2, [r2, #16]
 8009fc0:	f107 0108 	add.w	r1, r7, #8
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	4798      	blx	r3
 8009fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fca:	e091      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 facb 	bl	800a56a <USBD_CtlError>
            err++;
 8009fd4:	7afb      	ldrb	r3, [r7, #11]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009fda:	e089      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00b      	beq.n	800a000 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	7c12      	ldrb	r2, [r2, #16]
 8009ff4:	f107 0108 	add.w	r1, r7, #8
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4798      	blx	r3
 8009ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ffe:	e077      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fab1 	bl	800a56a <USBD_CtlError>
            err++;
 800a008:	7afb      	ldrb	r3, [r7, #11]
 800a00a:	3301      	adds	r3, #1
 800a00c:	72fb      	strb	r3, [r7, #11]
          break;
 800a00e:	e06f      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00b      	beq.n	800a034 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	7c12      	ldrb	r2, [r2, #16]
 800a028:	f107 0108 	add.w	r1, r7, #8
 800a02c:	4610      	mov	r0, r2
 800a02e:	4798      	blx	r3
 800a030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a032:	e05d      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fa97 	bl	800a56a <USBD_CtlError>
            err++;
 800a03c:	7afb      	ldrb	r3, [r7, #11]
 800a03e:	3301      	adds	r3, #1
 800a040:	72fb      	strb	r3, [r7, #11]
          break;
 800a042:	e055      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00b      	beq.n	800a068 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	7c12      	ldrb	r2, [r2, #16]
 800a05c:	f107 0108 	add.w	r1, r7, #8
 800a060:	4610      	mov	r0, r2
 800a062:	4798      	blx	r3
 800a064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a066:	e043      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fa7d 	bl	800a56a <USBD_CtlError>
            err++;
 800a070:	7afb      	ldrb	r3, [r7, #11]
 800a072:	3301      	adds	r3, #1
 800a074:	72fb      	strb	r3, [r7, #11]
          break;
 800a076:	e03b      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00b      	beq.n	800a09c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	7c12      	ldrb	r2, [r2, #16]
 800a090:	f107 0108 	add.w	r1, r7, #8
 800a094:	4610      	mov	r0, r2
 800a096:	4798      	blx	r3
 800a098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a09a:	e029      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fa63 	bl	800a56a <USBD_CtlError>
            err++;
 800a0a4:	7afb      	ldrb	r3, [r7, #11]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0aa:	e021      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00b      	beq.n	800a0d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	7c12      	ldrb	r2, [r2, #16]
 800a0c4:	f107 0108 	add.w	r1, r7, #8
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	4798      	blx	r3
 800a0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ce:	e00f      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fa49 	bl	800a56a <USBD_CtlError>
            err++;
 800a0d8:	7afb      	ldrb	r3, [r7, #11]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0de:	e007      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fa41 	bl	800a56a <USBD_CtlError>
          err++;
 800a0e8:	7afb      	ldrb	r3, [r7, #11]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a0ee:	bf00      	nop
      }
      break;
 800a0f0:	e037      	b.n	800a162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	7c1b      	ldrb	r3, [r3, #16]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d109      	bne.n	800a10e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a102:	f107 0208 	add.w	r2, r7, #8
 800a106:	4610      	mov	r0, r2
 800a108:	4798      	blx	r3
 800a10a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a10c:	e029      	b.n	800a162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fa2a 	bl	800a56a <USBD_CtlError>
        err++;
 800a116:	7afb      	ldrb	r3, [r7, #11]
 800a118:	3301      	adds	r3, #1
 800a11a:	72fb      	strb	r3, [r7, #11]
      break;
 800a11c:	e021      	b.n	800a162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	7c1b      	ldrb	r3, [r3, #16]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10d      	bne.n	800a142 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a12c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a12e:	f107 0208 	add.w	r2, r7, #8
 800a132:	4610      	mov	r0, r2
 800a134:	4798      	blx	r3
 800a136:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3301      	adds	r3, #1
 800a13c:	2207      	movs	r2, #7
 800a13e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a140:	e00f      	b.n	800a162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fa10 	bl	800a56a <USBD_CtlError>
        err++;
 800a14a:	7afb      	ldrb	r3, [r7, #11]
 800a14c:	3301      	adds	r3, #1
 800a14e:	72fb      	strb	r3, [r7, #11]
      break;
 800a150:	e007      	b.n	800a162 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fa08 	bl	800a56a <USBD_CtlError>
      err++;
 800a15a:	7afb      	ldrb	r3, [r7, #11]
 800a15c:	3301      	adds	r3, #1
 800a15e:	72fb      	strb	r3, [r7, #11]
      break;
 800a160:	bf00      	nop
  }

  if (err != 0U)
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d11e      	bne.n	800a1a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	88db      	ldrh	r3, [r3, #6]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d016      	beq.n	800a19e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a170:	893b      	ldrh	r3, [r7, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00e      	beq.n	800a194 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	88da      	ldrh	r2, [r3, #6]
 800a17a:	893b      	ldrh	r3, [r7, #8]
 800a17c:	4293      	cmp	r3, r2
 800a17e:	bf28      	it	cs
 800a180:	4613      	movcs	r3, r2
 800a182:	b29b      	uxth	r3, r3
 800a184:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a186:	893b      	ldrh	r3, [r7, #8]
 800a188:	461a      	mov	r2, r3
 800a18a:	68f9      	ldr	r1, [r7, #12]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 fa69 	bl	800a664 <USBD_CtlSendData>
 800a192:	e009      	b.n	800a1a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f9e7 	bl	800a56a <USBD_CtlError>
 800a19c:	e004      	b.n	800a1a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fac1 	bl	800a726 <USBD_CtlSendStatus>
 800a1a4:	e000      	b.n	800a1a8 <USBD_GetDescriptor+0x2cc>
    return;
 800a1a6:	bf00      	nop
  }
}
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop

0800a1b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	889b      	ldrh	r3, [r3, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d131      	bne.n	800a226 <USBD_SetAddress+0x76>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	88db      	ldrh	r3, [r3, #6]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d12d      	bne.n	800a226 <USBD_SetAddress+0x76>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	885b      	ldrh	r3, [r3, #2]
 800a1ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800a1d0:	d829      	bhi.n	800a226 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	885b      	ldrh	r3, [r3, #2]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d104      	bne.n	800a1f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a1ea:	6839      	ldr	r1, [r7, #0]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f9bc 	bl	800a56a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f2:	e01d      	b.n	800a230 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	7bfa      	ldrb	r2, [r7, #15]
 800a1f8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	4619      	mov	r1, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 ff55 	bl	800b0b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fa8d 	bl	800a726 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d004      	beq.n	800a21c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2202      	movs	r2, #2
 800a216:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a21a:	e009      	b.n	800a230 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a224:	e004      	b.n	800a230 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 f99e 	bl	800a56a <USBD_CtlError>
  }
}
 800a22e:	bf00      	nop
 800a230:	bf00      	nop
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	885b      	ldrh	r3, [r3, #2]
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	4b4e      	ldr	r3, [pc, #312]	@ (800a388 <USBD_SetConfig+0x150>)
 800a24e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a250:	4b4d      	ldr	r3, [pc, #308]	@ (800a388 <USBD_SetConfig+0x150>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d905      	bls.n	800a264 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f985 	bl	800a56a <USBD_CtlError>
    return USBD_FAIL;
 800a260:	2303      	movs	r3, #3
 800a262:	e08c      	b.n	800a37e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d002      	beq.n	800a276 <USBD_SetConfig+0x3e>
 800a270:	2b03      	cmp	r3, #3
 800a272:	d029      	beq.n	800a2c8 <USBD_SetConfig+0x90>
 800a274:	e075      	b.n	800a362 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a276:	4b44      	ldr	r3, [pc, #272]	@ (800a388 <USBD_SetConfig+0x150>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d020      	beq.n	800a2c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a27e:	4b42      	ldr	r3, [pc, #264]	@ (800a388 <USBD_SetConfig+0x150>)
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a288:	4b3f      	ldr	r3, [pc, #252]	@ (800a388 <USBD_SetConfig+0x150>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7fe ffcd 	bl	800922e <USBD_SetClassConfig>
 800a294:	4603      	mov	r3, r0
 800a296:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a298:	7bfb      	ldrb	r3, [r7, #15]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d008      	beq.n	800a2b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f962 	bl	800a56a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2ae:	e065      	b.n	800a37c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fa38 	bl	800a726 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2203      	movs	r2, #3
 800a2ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a2be:	e05d      	b.n	800a37c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fa30 	bl	800a726 <USBD_CtlSendStatus>
      break;
 800a2c6:	e059      	b.n	800a37c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a2c8:	4b2f      	ldr	r3, [pc, #188]	@ (800a388 <USBD_SetConfig+0x150>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d112      	bne.n	800a2f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a2d8:	4b2b      	ldr	r3, [pc, #172]	@ (800a388 <USBD_SetConfig+0x150>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2e2:	4b29      	ldr	r3, [pc, #164]	@ (800a388 <USBD_SetConfig+0x150>)
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7fe ffbc 	bl	8009266 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fa19 	bl	800a726 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2f4:	e042      	b.n	800a37c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a2f6:	4b24      	ldr	r3, [pc, #144]	@ (800a388 <USBD_SetConfig+0x150>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	429a      	cmp	r2, r3
 800a302:	d02a      	beq.n	800a35a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	4619      	mov	r1, r3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7fe ffaa 	bl	8009266 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a312:	4b1d      	ldr	r3, [pc, #116]	@ (800a388 <USBD_SetConfig+0x150>)
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a31c:	4b1a      	ldr	r3, [pc, #104]	@ (800a388 <USBD_SetConfig+0x150>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7fe ff83 	bl	800922e <USBD_SetClassConfig>
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00f      	beq.n	800a352 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f918 	bl	800a56a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7fe ff8f 	bl	8009266 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2202      	movs	r2, #2
 800a34c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a350:	e014      	b.n	800a37c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f9e7 	bl	800a726 <USBD_CtlSendStatus>
      break;
 800a358:	e010      	b.n	800a37c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f9e3 	bl	800a726 <USBD_CtlSendStatus>
      break;
 800a360:	e00c      	b.n	800a37c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 f900 	bl	800a56a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a36a:	4b07      	ldr	r3, [pc, #28]	@ (800a388 <USBD_SetConfig+0x150>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7fe ff78 	bl	8009266 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a376:	2303      	movs	r3, #3
 800a378:	73fb      	strb	r3, [r7, #15]
      break;
 800a37a:	bf00      	nop
  }

  return ret;
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	2001cdb4 	.word	0x2001cdb4

0800a38c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	88db      	ldrh	r3, [r3, #6]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d004      	beq.n	800a3a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f8e2 	bl	800a56a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3a6:	e023      	b.n	800a3f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	dc02      	bgt.n	800a3ba <USBD_GetConfig+0x2e>
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dc03      	bgt.n	800a3c0 <USBD_GetConfig+0x34>
 800a3b8:	e015      	b.n	800a3e6 <USBD_GetConfig+0x5a>
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d00b      	beq.n	800a3d6 <USBD_GetConfig+0x4a>
 800a3be:	e012      	b.n	800a3e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3308      	adds	r3, #8
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f948 	bl	800a664 <USBD_CtlSendData>
        break;
 800a3d4:	e00c      	b.n	800a3f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3304      	adds	r3, #4
 800a3da:	2201      	movs	r2, #1
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f940 	bl	800a664 <USBD_CtlSendData>
        break;
 800a3e4:	e004      	b.n	800a3f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f8be 	bl	800a56a <USBD_CtlError>
        break;
 800a3ee:	bf00      	nop
}
 800a3f0:	bf00      	nop
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	3b01      	subs	r3, #1
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d81e      	bhi.n	800a44e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	88db      	ldrh	r3, [r3, #6]
 800a414:	2b02      	cmp	r3, #2
 800a416:	d004      	beq.n	800a422 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f8a5 	bl	800a56a <USBD_CtlError>
        break;
 800a420:	e01a      	b.n	800a458 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d005      	beq.n	800a43e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	f043 0202 	orr.w	r2, r3, #2
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	330c      	adds	r3, #12
 800a442:	2202      	movs	r2, #2
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f90c 	bl	800a664 <USBD_CtlSendData>
      break;
 800a44c:	e004      	b.n	800a458 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f88a 	bl	800a56a <USBD_CtlError>
      break;
 800a456:	bf00      	nop
  }
}
 800a458:	bf00      	nop
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	885b      	ldrh	r3, [r3, #2]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d107      	bne.n	800a482 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2201      	movs	r2, #1
 800a476:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f953 	bl	800a726 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a480:	e013      	b.n	800a4aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	885b      	ldrh	r3, [r3, #2]
 800a486:	2b02      	cmp	r3, #2
 800a488:	d10b      	bne.n	800a4a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	889b      	ldrh	r3, [r3, #4]
 800a48e:	0a1b      	lsrs	r3, r3, #8
 800a490:	b29b      	uxth	r3, r3
 800a492:	b2da      	uxtb	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f943 	bl	800a726 <USBD_CtlSendStatus>
}
 800a4a0:	e003      	b.n	800a4aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f860 	bl	800a56a <USBD_CtlError>
}
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b082      	sub	sp, #8
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d80b      	bhi.n	800a4e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	885b      	ldrh	r3, [r3, #2]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d10c      	bne.n	800a4ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f923 	bl	800a726 <USBD_CtlSendStatus>
      }
      break;
 800a4e0:	e004      	b.n	800a4ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f840 	bl	800a56a <USBD_CtlError>
      break;
 800a4ea:	e000      	b.n	800a4ee <USBD_ClrFeature+0x3c>
      break;
 800a4ec:	bf00      	nop
  }
}
 800a4ee:	bf00      	nop
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	781a      	ldrb	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	3301      	adds	r3, #1
 800a510:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	781a      	ldrb	r2, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3301      	adds	r3, #1
 800a51e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f7ff fa3d 	bl	80099a0 <SWAPBYTE>
 800a526:	4603      	mov	r3, r0
 800a528:	461a      	mov	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3301      	adds	r3, #1
 800a532:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	3301      	adds	r3, #1
 800a538:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f7ff fa30 	bl	80099a0 <SWAPBYTE>
 800a540:	4603      	mov	r3, r0
 800a542:	461a      	mov	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3301      	adds	r3, #1
 800a54c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	3301      	adds	r3, #1
 800a552:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f7ff fa23 	bl	80099a0 <SWAPBYTE>
 800a55a:	4603      	mov	r3, r0
 800a55c:	461a      	mov	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	80da      	strh	r2, [r3, #6]
}
 800a562:	bf00      	nop
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a574:	2180      	movs	r1, #128	@ 0x80
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fd30 	bl	800afdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a57c:	2100      	movs	r1, #0
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fd2c 	bl	800afdc <USBD_LL_StallEP>
}
 800a584:	bf00      	nop
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a598:	2300      	movs	r3, #0
 800a59a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d042      	beq.n	800a628 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a5a6:	6938      	ldr	r0, [r7, #16]
 800a5a8:	f000 f842 	bl	800a630 <USBD_GetLen>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	005b      	lsls	r3, r3, #1
 800a5b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5b6:	d808      	bhi.n	800a5ca <USBD_GetString+0x3e>
 800a5b8:	6938      	ldr	r0, [r7, #16]
 800a5ba:	f000 f839 	bl	800a630 <USBD_GetLen>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	e001      	b.n	800a5ce <USBD_GetString+0x42>
 800a5ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	7812      	ldrb	r2, [r2, #0]
 800a5dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a5e4:	7dfb      	ldrb	r3, [r7, #23]
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	2203      	movs	r2, #3
 800a5ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a5f4:	e013      	b.n	800a61e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	7812      	ldrb	r2, [r2, #0]
 800a600:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	3301      	adds	r3, #1
 800a606:	613b      	str	r3, [r7, #16]
    idx++;
 800a608:	7dfb      	ldrb	r3, [r7, #23]
 800a60a:	3301      	adds	r3, #1
 800a60c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	4413      	add	r3, r2
 800a614:	2200      	movs	r2, #0
 800a616:	701a      	strb	r2, [r3, #0]
    idx++;
 800a618:	7dfb      	ldrb	r3, [r7, #23]
 800a61a:	3301      	adds	r3, #1
 800a61c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1e7      	bne.n	800a5f6 <USBD_GetString+0x6a>
 800a626:	e000      	b.n	800a62a <USBD_GetString+0x9e>
    return;
 800a628:	bf00      	nop
  }
}
 800a62a:	3718      	adds	r7, #24
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a638:	2300      	movs	r3, #0
 800a63a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a640:	e005      	b.n	800a64e <USBD_GetLen+0x1e>
  {
    len++;
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	3301      	adds	r3, #1
 800a646:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	3301      	adds	r3, #1
 800a64c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1f5      	bne.n	800a642 <USBD_GetLen+0x12>
  }

  return len;
 800a656:	7bfb      	ldrb	r3, [r7, #15]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2202      	movs	r2, #2
 800a674:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	2100      	movs	r1, #0
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f000 fd2c 	bl	800b0ee <USBD_LL_Transmit>

  return USBD_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 fd1b 	bl	800b0ee <USBD_LL_Transmit>

  return USBD_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	60f8      	str	r0, [r7, #12]
 800a6ca:	60b9      	str	r1, [r7, #8]
 800a6cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2203      	movs	r2, #3
 800a6d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f000 fd1b 	bl	800b130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	2100      	movs	r1, #0
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f000 fd0a 	bl	800b130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b082      	sub	sp, #8
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2204      	movs	r2, #4
 800a732:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a736:	2300      	movs	r3, #0
 800a738:	2200      	movs	r2, #0
 800a73a:	2100      	movs	r1, #0
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 fcd6 	bl	800b0ee <USBD_LL_Transmit>

  return USBD_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2205      	movs	r2, #5
 800a758:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a75c:	2300      	movs	r3, #0
 800a75e:	2200      	movs	r2, #0
 800a760:	2100      	movs	r1, #0
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fce4 	bl	800b130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
	...

0800a774 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a778:	2200      	movs	r2, #0
 800a77a:	4912      	ldr	r1, [pc, #72]	@ (800a7c4 <MX_USB_DEVICE_Init+0x50>)
 800a77c:	4812      	ldr	r0, [pc, #72]	@ (800a7c8 <MX_USB_DEVICE_Init+0x54>)
 800a77e:	f7fe fcd9 	bl	8009134 <USBD_Init>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a788:	f7f8 f81c 	bl	80027c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a78c:	490f      	ldr	r1, [pc, #60]	@ (800a7cc <MX_USB_DEVICE_Init+0x58>)
 800a78e:	480e      	ldr	r0, [pc, #56]	@ (800a7c8 <MX_USB_DEVICE_Init+0x54>)
 800a790:	f7fe fd00 	bl	8009194 <USBD_RegisterClass>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a79a:	f7f8 f813 	bl	80027c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a79e:	490c      	ldr	r1, [pc, #48]	@ (800a7d0 <MX_USB_DEVICE_Init+0x5c>)
 800a7a0:	4809      	ldr	r0, [pc, #36]	@ (800a7c8 <MX_USB_DEVICE_Init+0x54>)
 800a7a2:	f7fe fbf7 	bl	8008f94 <USBD_CDC_RegisterInterface>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a7ac:	f7f8 f80a 	bl	80027c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a7b0:	4805      	ldr	r0, [pc, #20]	@ (800a7c8 <MX_USB_DEVICE_Init+0x54>)
 800a7b2:	f7fe fd25 	bl	8009200 <USBD_Start>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7bc:	f7f8 f802 	bl	80027c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7c0:	bf00      	nop
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	200000b0 	.word	0x200000b0
 800a7c8:	2001cdb8 	.word	0x2001cdb8
 800a7cc:	2000001c 	.word	0x2000001c
 800a7d0:	2000009c 	.word	0x2000009c

0800a7d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7d8:	2200      	movs	r2, #0
 800a7da:	4905      	ldr	r1, [pc, #20]	@ (800a7f0 <CDC_Init_FS+0x1c>)
 800a7dc:	4805      	ldr	r0, [pc, #20]	@ (800a7f4 <CDC_Init_FS+0x20>)
 800a7de:	f7fe fbf3 	bl	8008fc8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7e2:	4905      	ldr	r1, [pc, #20]	@ (800a7f8 <CDC_Init_FS+0x24>)
 800a7e4:	4803      	ldr	r0, [pc, #12]	@ (800a7f4 <CDC_Init_FS+0x20>)
 800a7e6:	f7fe fc11 	bl	800900c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	2001d9c4 	.word	0x2001d9c4
 800a7f4:	2001cdb8 	.word	0x2001cdb8
 800a7f8:	2001d1c4 	.word	0x2001d1c4

0800a7fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a800:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a802:	4618      	mov	r0, r3
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	6039      	str	r1, [r7, #0]
 800a816:	71fb      	strb	r3, [r7, #7]
 800a818:	4613      	mov	r3, r2
 800a81a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a81c:	79fb      	ldrb	r3, [r7, #7]
 800a81e:	2b23      	cmp	r3, #35	@ 0x23
 800a820:	d84a      	bhi.n	800a8b8 <CDC_Control_FS+0xac>
 800a822:	a201      	add	r2, pc, #4	@ (adr r2, 800a828 <CDC_Control_FS+0x1c>)
 800a824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a828:	0800a8b9 	.word	0x0800a8b9
 800a82c:	0800a8b9 	.word	0x0800a8b9
 800a830:	0800a8b9 	.word	0x0800a8b9
 800a834:	0800a8b9 	.word	0x0800a8b9
 800a838:	0800a8b9 	.word	0x0800a8b9
 800a83c:	0800a8b9 	.word	0x0800a8b9
 800a840:	0800a8b9 	.word	0x0800a8b9
 800a844:	0800a8b9 	.word	0x0800a8b9
 800a848:	0800a8b9 	.word	0x0800a8b9
 800a84c:	0800a8b9 	.word	0x0800a8b9
 800a850:	0800a8b9 	.word	0x0800a8b9
 800a854:	0800a8b9 	.word	0x0800a8b9
 800a858:	0800a8b9 	.word	0x0800a8b9
 800a85c:	0800a8b9 	.word	0x0800a8b9
 800a860:	0800a8b9 	.word	0x0800a8b9
 800a864:	0800a8b9 	.word	0x0800a8b9
 800a868:	0800a8b9 	.word	0x0800a8b9
 800a86c:	0800a8b9 	.word	0x0800a8b9
 800a870:	0800a8b9 	.word	0x0800a8b9
 800a874:	0800a8b9 	.word	0x0800a8b9
 800a878:	0800a8b9 	.word	0x0800a8b9
 800a87c:	0800a8b9 	.word	0x0800a8b9
 800a880:	0800a8b9 	.word	0x0800a8b9
 800a884:	0800a8b9 	.word	0x0800a8b9
 800a888:	0800a8b9 	.word	0x0800a8b9
 800a88c:	0800a8b9 	.word	0x0800a8b9
 800a890:	0800a8b9 	.word	0x0800a8b9
 800a894:	0800a8b9 	.word	0x0800a8b9
 800a898:	0800a8b9 	.word	0x0800a8b9
 800a89c:	0800a8b9 	.word	0x0800a8b9
 800a8a0:	0800a8b9 	.word	0x0800a8b9
 800a8a4:	0800a8b9 	.word	0x0800a8b9
 800a8a8:	0800a8b9 	.word	0x0800a8b9
 800a8ac:	0800a8b9 	.word	0x0800a8b9
 800a8b0:	0800a8b9 	.word	0x0800a8b9
 800a8b4:	0800a8b9 	.word	0x0800a8b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a8b8:	bf00      	nop
  }

  return (USBD_OK);
 800a8ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a20      	ldr	r2, [pc, #128]	@ (800a958 <CDC_Receive_FS+0x90>)
 800a8d8:	8812      	ldrh	r2, [r2, #0]
 800a8da:	b292      	uxth	r2, r2
 800a8dc:	f5c2 7296 	rsb	r2, r2, #300	@ 0x12c
                            (USB_RX_BUFFER_SIZE - usb_rx_index) : *Len;
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d905      	bls.n	800a8f0 <CDC_Receive_FS+0x28>
 800a8e4:	4b1c      	ldr	r3, [pc, #112]	@ (800a958 <CDC_Receive_FS+0x90>)
 800a8e6:	881b      	ldrh	r3, [r3, #0]
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 800a8ee:	e001      	b.n	800a8f4 <CDC_Receive_FS+0x2c>
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800a8f4:	60fb      	str	r3, [r7, #12]

    memcpy((void*)&usb_rx_buffer[usb_rx_index], Buf, bytes_to_copy);
 800a8f6:	4b18      	ldr	r3, [pc, #96]	@ (800a958 <CDC_Receive_FS+0x90>)
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	4b17      	ldr	r3, [pc, #92]	@ (800a95c <CDC_Receive_FS+0x94>)
 800a900:	4413      	add	r3, r2
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	6879      	ldr	r1, [r7, #4]
 800a906:	4618      	mov	r0, r3
 800a908:	f002 fe47 	bl	800d59a <memcpy>
    usb_rx_index += bytes_to_copy;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	b29a      	uxth	r2, r3
 800a910:	4b11      	ldr	r3, [pc, #68]	@ (800a958 <CDC_Receive_FS+0x90>)
 800a912:	881b      	ldrh	r3, [r3, #0]
 800a914:	b29b      	uxth	r3, r3
 800a916:	4413      	add	r3, r2
 800a918:	b29a      	uxth	r2, r3
 800a91a:	4b0f      	ldr	r3, [pc, #60]	@ (800a958 <CDC_Receive_FS+0x90>)
 800a91c:	801a      	strh	r2, [r3, #0]

    // Проверяем наличие завершающего символа
    if (usb_rx_index > 0 && usb_rx_buffer[usb_rx_index - 1] == '\n') {
 800a91e:	4b0e      	ldr	r3, [pc, #56]	@ (800a958 <CDC_Receive_FS+0x90>)
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	b29b      	uxth	r3, r3
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00b      	beq.n	800a940 <CDC_Receive_FS+0x78>
 800a928:	4b0b      	ldr	r3, [pc, #44]	@ (800a958 <CDC_Receive_FS+0x90>)
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	3b01      	subs	r3, #1
 800a930:	4a0a      	ldr	r2, [pc, #40]	@ (800a95c <CDC_Receive_FS+0x94>)
 800a932:	5cd3      	ldrb	r3, [r2, r3]
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b0a      	cmp	r3, #10
 800a938:	d102      	bne.n	800a940 <CDC_Receive_FS+0x78>
        new_data_received = 1;
 800a93a:	4b09      	ldr	r3, [pc, #36]	@ (800a960 <CDC_Receive_FS+0x98>)
 800a93c:	2201      	movs	r2, #1
 800a93e:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	4808      	ldr	r0, [pc, #32]	@ (800a964 <CDC_Receive_FS+0x9c>)
 800a944:	f7fe fb62 	bl	800900c <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a948:	4806      	ldr	r0, [pc, #24]	@ (800a964 <CDC_Receive_FS+0x9c>)
 800a94a:	f7fe fbbd 	bl	80090c8 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	2001d1c0 	.word	0x2001d1c0
 800a95c:	2001d094 	.word	0x2001d094
 800a960:	2001d1c2 	.word	0x2001d1c2
 800a964:	2001cdb8 	.word	0x2001cdb8

0800a968 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	460b      	mov	r3, r1
 800a972:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a978:	4b0d      	ldr	r3, [pc, #52]	@ (800a9b0 <CDC_Transmit_FS+0x48>)
 800a97a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a97e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e00b      	b.n	800a9a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a98e:	887b      	ldrh	r3, [r7, #2]
 800a990:	461a      	mov	r2, r3
 800a992:	6879      	ldr	r1, [r7, #4]
 800a994:	4806      	ldr	r0, [pc, #24]	@ (800a9b0 <CDC_Transmit_FS+0x48>)
 800a996:	f7fe fb17 	bl	8008fc8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a99a:	4805      	ldr	r0, [pc, #20]	@ (800a9b0 <CDC_Transmit_FS+0x48>)
 800a99c:	f7fe fb54 	bl	8009048 <USBD_CDC_TransmitPacket>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	2001cdb8 	.word	0x2001cdb8

0800a9b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a9c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	371c      	adds	r7, #28
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
	...

0800a9d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	4603      	mov	r3, r0
 800a9e0:	6039      	str	r1, [r7, #0]
 800a9e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	2212      	movs	r2, #18
 800a9e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a9ea:	4b03      	ldr	r3, [pc, #12]	@ (800a9f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr
 800a9f8:	200000cc 	.word	0x200000cc

0800a9fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	4603      	mov	r3, r0
 800aa04:	6039      	str	r1, [r7, #0]
 800aa06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	2204      	movs	r2, #4
 800aa0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa0e:	4b03      	ldr	r3, [pc, #12]	@ (800aa1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	200000e0 	.word	0x200000e0

0800aa20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	4603      	mov	r3, r0
 800aa28:	6039      	str	r1, [r7, #0]
 800aa2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa2c:	79fb      	ldrb	r3, [r7, #7]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d105      	bne.n	800aa3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	4907      	ldr	r1, [pc, #28]	@ (800aa54 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa36:	4808      	ldr	r0, [pc, #32]	@ (800aa58 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa38:	f7ff fda8 	bl	800a58c <USBD_GetString>
 800aa3c:	e004      	b.n	800aa48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	4904      	ldr	r1, [pc, #16]	@ (800aa54 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa42:	4805      	ldr	r0, [pc, #20]	@ (800aa58 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa44:	f7ff fda2 	bl	800a58c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa48:	4b02      	ldr	r3, [pc, #8]	@ (800aa54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	2001e1c4 	.word	0x2001e1c4
 800aa58:	08010680 	.word	0x08010680

0800aa5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	6039      	str	r1, [r7, #0]
 800aa66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa68:	683a      	ldr	r2, [r7, #0]
 800aa6a:	4904      	ldr	r1, [pc, #16]	@ (800aa7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa6c:	4804      	ldr	r0, [pc, #16]	@ (800aa80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa6e:	f7ff fd8d 	bl	800a58c <USBD_GetString>
  return USBD_StrDesc;
 800aa72:	4b02      	ldr	r3, [pc, #8]	@ (800aa7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	2001e1c4 	.word	0x2001e1c4
 800aa80:	08010698 	.word	0x08010698

0800aa84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	6039      	str	r1, [r7, #0]
 800aa8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	221a      	movs	r2, #26
 800aa94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa96:	f000 f843 	bl	800ab20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa9a:	4b02      	ldr	r3, [pc, #8]	@ (800aaa4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	200000e4 	.word	0x200000e4

0800aaa8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	4603      	mov	r3, r0
 800aab0:	6039      	str	r1, [r7, #0]
 800aab2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aab4:	79fb      	ldrb	r3, [r7, #7]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d105      	bne.n	800aac6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	4907      	ldr	r1, [pc, #28]	@ (800aadc <USBD_FS_ConfigStrDescriptor+0x34>)
 800aabe:	4808      	ldr	r0, [pc, #32]	@ (800aae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aac0:	f7ff fd64 	bl	800a58c <USBD_GetString>
 800aac4:	e004      	b.n	800aad0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	4904      	ldr	r1, [pc, #16]	@ (800aadc <USBD_FS_ConfigStrDescriptor+0x34>)
 800aaca:	4805      	ldr	r0, [pc, #20]	@ (800aae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aacc:	f7ff fd5e 	bl	800a58c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aad0:	4b02      	ldr	r3, [pc, #8]	@ (800aadc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	2001e1c4 	.word	0x2001e1c4
 800aae0:	080106ac 	.word	0x080106ac

0800aae4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aaf0:	79fb      	ldrb	r3, [r7, #7]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d105      	bne.n	800ab02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	4907      	ldr	r1, [pc, #28]	@ (800ab18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aafa:	4808      	ldr	r0, [pc, #32]	@ (800ab1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aafc:	f7ff fd46 	bl	800a58c <USBD_GetString>
 800ab00:	e004      	b.n	800ab0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	4904      	ldr	r1, [pc, #16]	@ (800ab18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab06:	4805      	ldr	r0, [pc, #20]	@ (800ab1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab08:	f7ff fd40 	bl	800a58c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab0c:	4b02      	ldr	r3, [pc, #8]	@ (800ab18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	2001e1c4 	.word	0x2001e1c4
 800ab1c:	080106b8 	.word	0x080106b8

0800ab20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab26:	4b0f      	ldr	r3, [pc, #60]	@ (800ab64 <Get_SerialNum+0x44>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab2c:	4b0e      	ldr	r3, [pc, #56]	@ (800ab68 <Get_SerialNum+0x48>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab32:	4b0e      	ldr	r3, [pc, #56]	@ (800ab6c <Get_SerialNum+0x4c>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d009      	beq.n	800ab5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab46:	2208      	movs	r2, #8
 800ab48:	4909      	ldr	r1, [pc, #36]	@ (800ab70 <Get_SerialNum+0x50>)
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f000 f814 	bl	800ab78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab50:	2204      	movs	r2, #4
 800ab52:	4908      	ldr	r1, [pc, #32]	@ (800ab74 <Get_SerialNum+0x54>)
 800ab54:	68b8      	ldr	r0, [r7, #8]
 800ab56:	f000 f80f 	bl	800ab78 <IntToUnicode>
  }
}
 800ab5a:	bf00      	nop
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	1fff7a10 	.word	0x1fff7a10
 800ab68:	1fff7a14 	.word	0x1fff7a14
 800ab6c:	1fff7a18 	.word	0x1fff7a18
 800ab70:	200000e6 	.word	0x200000e6
 800ab74:	200000f6 	.word	0x200000f6

0800ab78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b087      	sub	sp, #28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	4613      	mov	r3, r2
 800ab84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	75fb      	strb	r3, [r7, #23]
 800ab8e:	e027      	b.n	800abe0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	0f1b      	lsrs	r3, r3, #28
 800ab94:	2b09      	cmp	r3, #9
 800ab96:	d80b      	bhi.n	800abb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	0f1b      	lsrs	r3, r3, #28
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	4619      	mov	r1, r3
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	440b      	add	r3, r1
 800aba8:	3230      	adds	r2, #48	@ 0x30
 800abaa:	b2d2      	uxtb	r2, r2
 800abac:	701a      	strb	r2, [r3, #0]
 800abae:	e00a      	b.n	800abc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	0f1b      	lsrs	r3, r3, #28
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	4619      	mov	r1, r3
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	440b      	add	r3, r1
 800abc0:	3237      	adds	r2, #55	@ 0x37
 800abc2:	b2d2      	uxtb	r2, r2
 800abc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	011b      	lsls	r3, r3, #4
 800abca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	3301      	adds	r3, #1
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	4413      	add	r3, r2
 800abd6:	2200      	movs	r2, #0
 800abd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abda:	7dfb      	ldrb	r3, [r7, #23]
 800abdc:	3301      	adds	r3, #1
 800abde:	75fb      	strb	r3, [r7, #23]
 800abe0:	7dfa      	ldrb	r2, [r7, #23]
 800abe2:	79fb      	ldrb	r3, [r7, #7]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d3d3      	bcc.n	800ab90 <IntToUnicode+0x18>
  }
}
 800abe8:	bf00      	nop
 800abea:	bf00      	nop
 800abec:	371c      	adds	r7, #28
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
	...

0800abf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b08a      	sub	sp, #40	@ 0x28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac00:	f107 0314 	add.w	r3, r7, #20
 800ac04:	2200      	movs	r2, #0
 800ac06:	601a      	str	r2, [r3, #0]
 800ac08:	605a      	str	r2, [r3, #4]
 800ac0a:	609a      	str	r2, [r3, #8]
 800ac0c:	60da      	str	r2, [r3, #12]
 800ac0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac18:	d13a      	bne.n	800ac90 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	613b      	str	r3, [r7, #16]
 800ac1e:	4b1e      	ldr	r3, [pc, #120]	@ (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac22:	4a1d      	ldr	r2, [pc, #116]	@ (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac24:	f043 0301 	orr.w	r3, r3, #1
 800ac28:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac2a:	4b1b      	ldr	r3, [pc, #108]	@ (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac2e:	f003 0301 	and.w	r3, r3, #1
 800ac32:	613b      	str	r3, [r7, #16]
 800ac34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ac36:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ac3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac40:	2300      	movs	r3, #0
 800ac42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac44:	2303      	movs	r3, #3
 800ac46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac48:	230a      	movs	r3, #10
 800ac4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac4c:	f107 0314 	add.w	r3, r7, #20
 800ac50:	4619      	mov	r1, r3
 800ac52:	4812      	ldr	r0, [pc, #72]	@ (800ac9c <HAL_PCD_MspInit+0xa4>)
 800ac54:	f7f8 fcf4 	bl	8003640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac58:	4b0f      	ldr	r3, [pc, #60]	@ (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac5c:	4a0e      	ldr	r2, [pc, #56]	@ (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac62:	6353      	str	r3, [r2, #52]	@ 0x34
 800ac64:	2300      	movs	r3, #0
 800ac66:	60fb      	str	r3, [r7, #12]
 800ac68:	4b0b      	ldr	r3, [pc, #44]	@ (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac6c:	4a0a      	ldr	r2, [pc, #40]	@ (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ac72:	6453      	str	r3, [r2, #68]	@ 0x44
 800ac74:	4b08      	ldr	r3, [pc, #32]	@ (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac7c:	60fb      	str	r3, [r7, #12]
 800ac7e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ac80:	2200      	movs	r2, #0
 800ac82:	2100      	movs	r1, #0
 800ac84:	2043      	movs	r0, #67	@ 0x43
 800ac86:	f7f8 f99c 	bl	8002fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac8a:	2043      	movs	r0, #67	@ 0x43
 800ac8c:	f7f8 f9b5 	bl	8002ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac90:	bf00      	nop
 800ac92:	3728      	adds	r7, #40	@ 0x28
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	40023800 	.word	0x40023800
 800ac9c:	40020000 	.word	0x40020000

0800aca0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800acb4:	4619      	mov	r1, r3
 800acb6:	4610      	mov	r0, r2
 800acb8:	f7fe faef 	bl	800929a <USBD_LL_SetupStage>
}
 800acbc:	bf00      	nop
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	460b      	mov	r3, r1
 800acce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800acd6:	78fa      	ldrb	r2, [r7, #3]
 800acd8:	6879      	ldr	r1, [r7, #4]
 800acda:	4613      	mov	r3, r2
 800acdc:	00db      	lsls	r3, r3, #3
 800acde:	4413      	add	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	440b      	add	r3, r1
 800ace4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	78fb      	ldrb	r3, [r7, #3]
 800acec:	4619      	mov	r1, r3
 800acee:	f7fe fb29 	bl	8009344 <USBD_LL_DataOutStage>
}
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	460b      	mov	r3, r1
 800ad04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ad0c:	78fa      	ldrb	r2, [r7, #3]
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	4613      	mov	r3, r2
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	4413      	add	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	440b      	add	r3, r1
 800ad1a:	3320      	adds	r3, #32
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	78fb      	ldrb	r3, [r7, #3]
 800ad20:	4619      	mov	r1, r3
 800ad22:	f7fe fbcb 	bl	80094bc <USBD_LL_DataInStage>
}
 800ad26:	bf00      	nop
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b082      	sub	sp, #8
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe fd0f 	bl	8009760 <USBD_LL_SOF>
}
 800ad42:	bf00      	nop
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad52:	2301      	movs	r3, #1
 800ad54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	79db      	ldrb	r3, [r3, #7]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d102      	bne.n	800ad64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	73fb      	strb	r3, [r7, #15]
 800ad62:	e008      	b.n	800ad76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	79db      	ldrb	r3, [r3, #7]
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d102      	bne.n	800ad72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	73fb      	strb	r3, [r7, #15]
 800ad70:	e001      	b.n	800ad76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ad72:	f7f7 fd27 	bl	80027c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad7c:	7bfa      	ldrb	r2, [r7, #15]
 800ad7e:	4611      	mov	r1, r2
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7fe fca9 	bl	80096d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7fe fc50 	bl	8009632 <USBD_LL_Reset>
}
 800ad92:	bf00      	nop
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
	...

0800ad9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fe fca4 	bl	80096f8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	6812      	ldr	r2, [r2, #0]
 800adbe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800adc2:	f043 0301 	orr.w	r3, r3, #1
 800adc6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	7adb      	ldrb	r3, [r3, #11]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d005      	beq.n	800addc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800add0:	4b04      	ldr	r3, [pc, #16]	@ (800ade4 <HAL_PCD_SuspendCallback+0x48>)
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	4a03      	ldr	r2, [pc, #12]	@ (800ade4 <HAL_PCD_SuspendCallback+0x48>)
 800add6:	f043 0306 	orr.w	r3, r3, #6
 800adda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800addc:	bf00      	nop
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	e000ed00 	.word	0xe000ed00

0800ade8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe fc9a 	bl	8009730 <USBD_LL_Resume>
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae16:	78fa      	ldrb	r2, [r7, #3]
 800ae18:	4611      	mov	r1, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fe fcf2 	bl	8009804 <USBD_LL_IsoOUTIncomplete>
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	460b      	mov	r3, r1
 800ae32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae3a:	78fa      	ldrb	r2, [r7, #3]
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fe fcae 	bl	80097a0 <USBD_LL_IsoINIncomplete>
}
 800ae44:	bf00      	nop
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fe fd04 	bl	8009868 <USBD_LL_DevConnected>
}
 800ae60:	bf00      	nop
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fe fd01 	bl	800987e <USBD_LL_DevDisconnected>
}
 800ae7c:	bf00      	nop
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d13c      	bne.n	800af0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ae94:	4a20      	ldr	r2, [pc, #128]	@ (800af18 <USBD_LL_Init+0x94>)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a1e      	ldr	r2, [pc, #120]	@ (800af18 <USBD_LL_Init+0x94>)
 800aea0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aea4:	4b1c      	ldr	r3, [pc, #112]	@ (800af18 <USBD_LL_Init+0x94>)
 800aea6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800aeaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aeac:	4b1a      	ldr	r3, [pc, #104]	@ (800af18 <USBD_LL_Init+0x94>)
 800aeae:	2204      	movs	r2, #4
 800aeb0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aeb2:	4b19      	ldr	r3, [pc, #100]	@ (800af18 <USBD_LL_Init+0x94>)
 800aeb4:	2202      	movs	r2, #2
 800aeb6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aeb8:	4b17      	ldr	r3, [pc, #92]	@ (800af18 <USBD_LL_Init+0x94>)
 800aeba:	2200      	movs	r2, #0
 800aebc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aebe:	4b16      	ldr	r3, [pc, #88]	@ (800af18 <USBD_LL_Init+0x94>)
 800aec0:	2202      	movs	r2, #2
 800aec2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aec4:	4b14      	ldr	r3, [pc, #80]	@ (800af18 <USBD_LL_Init+0x94>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aeca:	4b13      	ldr	r3, [pc, #76]	@ (800af18 <USBD_LL_Init+0x94>)
 800aecc:	2200      	movs	r2, #0
 800aece:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aed0:	4b11      	ldr	r3, [pc, #68]	@ (800af18 <USBD_LL_Init+0x94>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aed6:	4b10      	ldr	r3, [pc, #64]	@ (800af18 <USBD_LL_Init+0x94>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aedc:	4b0e      	ldr	r3, [pc, #56]	@ (800af18 <USBD_LL_Init+0x94>)
 800aede:	2200      	movs	r2, #0
 800aee0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aee2:	480d      	ldr	r0, [pc, #52]	@ (800af18 <USBD_LL_Init+0x94>)
 800aee4:	f7f8 fd61 	bl	80039aa <HAL_PCD_Init>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aeee:	f7f7 fc69 	bl	80027c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aef2:	2180      	movs	r1, #128	@ 0x80
 800aef4:	4808      	ldr	r0, [pc, #32]	@ (800af18 <USBD_LL_Init+0x94>)
 800aef6:	f7f9 ff8e 	bl	8004e16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aefa:	2240      	movs	r2, #64	@ 0x40
 800aefc:	2100      	movs	r1, #0
 800aefe:	4806      	ldr	r0, [pc, #24]	@ (800af18 <USBD_LL_Init+0x94>)
 800af00:	f7f9 ff42 	bl	8004d88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af04:	2280      	movs	r2, #128	@ 0x80
 800af06:	2101      	movs	r1, #1
 800af08:	4803      	ldr	r0, [pc, #12]	@ (800af18 <USBD_LL_Init+0x94>)
 800af0a:	f7f9 ff3d 	bl	8004d88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	2001e3c4 	.word	0x2001e3c4

0800af1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af32:	4618      	mov	r0, r3
 800af34:	f7f8 fe48 	bl	8003bc8 <HAL_PCD_Start>
 800af38:	4603      	mov	r3, r0
 800af3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	4618      	mov	r0, r3
 800af40:	f000 f942 	bl	800b1c8 <USBD_Get_USB_Status>
 800af44:	4603      	mov	r3, r0
 800af46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af48:	7bbb      	ldrb	r3, [r7, #14]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b084      	sub	sp, #16
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	4608      	mov	r0, r1
 800af5c:	4611      	mov	r1, r2
 800af5e:	461a      	mov	r2, r3
 800af60:	4603      	mov	r3, r0
 800af62:	70fb      	strb	r3, [r7, #3]
 800af64:	460b      	mov	r3, r1
 800af66:	70bb      	strb	r3, [r7, #2]
 800af68:	4613      	mov	r3, r2
 800af6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800af7a:	78bb      	ldrb	r3, [r7, #2]
 800af7c:	883a      	ldrh	r2, [r7, #0]
 800af7e:	78f9      	ldrb	r1, [r7, #3]
 800af80:	f7f9 fb1c 	bl	80045bc <HAL_PCD_EP_Open>
 800af84:	4603      	mov	r3, r0
 800af86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f91c 	bl	800b1c8 <USBD_Get_USB_Status>
 800af90:	4603      	mov	r3, r0
 800af92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af94:	7bbb      	ldrb	r3, [r7, #14]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	460b      	mov	r3, r1
 800afa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afb8:	78fa      	ldrb	r2, [r7, #3]
 800afba:	4611      	mov	r1, r2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7f9 fb67 	bl	8004690 <HAL_PCD_EP_Close>
 800afc2:	4603      	mov	r3, r0
 800afc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 f8fd 	bl	800b1c8 <USBD_Get_USB_Status>
 800afce:	4603      	mov	r3, r0
 800afd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aff6:	78fa      	ldrb	r2, [r7, #3]
 800aff8:	4611      	mov	r1, r2
 800affa:	4618      	mov	r0, r3
 800affc:	f7f9 fc1f 	bl	800483e <HAL_PCD_EP_SetStall>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f8de 	bl	800b1c8 <USBD_Get_USB_Status>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b010:	7bbb      	ldrb	r3, [r7, #14]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	460b      	mov	r3, r1
 800b024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b034:	78fa      	ldrb	r2, [r7, #3]
 800b036:	4611      	mov	r1, r2
 800b038:	4618      	mov	r0, r3
 800b03a:	f7f9 fc63 	bl	8004904 <HAL_PCD_EP_ClrStall>
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b042:	7bfb      	ldrb	r3, [r7, #15]
 800b044:	4618      	mov	r0, r3
 800b046:	f000 f8bf 	bl	800b1c8 <USBD_Get_USB_Status>
 800b04a:	4603      	mov	r3, r0
 800b04c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	460b      	mov	r3, r1
 800b062:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b06a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b06c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b070:	2b00      	cmp	r3, #0
 800b072:	da0b      	bge.n	800b08c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b07a:	68f9      	ldr	r1, [r7, #12]
 800b07c:	4613      	mov	r3, r2
 800b07e:	00db      	lsls	r3, r3, #3
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	440b      	add	r3, r1
 800b086:	3316      	adds	r3, #22
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	e00b      	b.n	800b0a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b08c:	78fb      	ldrb	r3, [r7, #3]
 800b08e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b092:	68f9      	ldr	r1, [r7, #12]
 800b094:	4613      	mov	r3, r2
 800b096:	00db      	lsls	r3, r3, #3
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	440b      	add	r3, r1
 800b09e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b0a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0ca:	78fa      	ldrb	r2, [r7, #3]
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7f9 fa50 	bl	8004574 <HAL_PCD_SetAddress>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 f874 	bl	800b1c8 <USBD_Get_USB_Status>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b086      	sub	sp, #24
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	60f8      	str	r0, [r7, #12]
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	603b      	str	r3, [r7, #0]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0fe:	2300      	movs	r3, #0
 800b100:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b10c:	7af9      	ldrb	r1, [r7, #11]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	f7f9 fb5a 	bl	80047ca <HAL_PCD_EP_Transmit>
 800b116:	4603      	mov	r3, r0
 800b118:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 f853 	bl	800b1c8 <USBD_Get_USB_Status>
 800b122:	4603      	mov	r3, r0
 800b124:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b126:	7dbb      	ldrb	r3, [r7, #22]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	607a      	str	r2, [r7, #4]
 800b13a:	603b      	str	r3, [r7, #0]
 800b13c:	460b      	mov	r3, r1
 800b13e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b14e:	7af9      	ldrb	r1, [r7, #11]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	f7f9 fae6 	bl	8004724 <HAL_PCD_EP_Receive>
 800b158:	4603      	mov	r3, r0
 800b15a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 f832 	bl	800b1c8 <USBD_Get_USB_Status>
 800b164:	4603      	mov	r3, r0
 800b166:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b168:	7dbb      	ldrb	r3, [r7, #22]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3718      	adds	r7, #24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b082      	sub	sp, #8
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	460b      	mov	r3, r1
 800b17c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b184:	78fa      	ldrb	r2, [r7, #3]
 800b186:	4611      	mov	r1, r2
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f9 fb06 	bl	800479a <HAL_PCD_EP_GetRxCount>
 800b18e:	4603      	mov	r3, r0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b1a0:	4b03      	ldr	r3, [pc, #12]	@ (800b1b0 <USBD_static_malloc+0x18>)
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	370c      	adds	r7, #12
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	2001e8a8 	.word	0x2001e8a8

0800b1b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]

}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1d6:	79fb      	ldrb	r3, [r7, #7]
 800b1d8:	2b03      	cmp	r3, #3
 800b1da:	d817      	bhi.n	800b20c <USBD_Get_USB_Status+0x44>
 800b1dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b1e4 <USBD_Get_USB_Status+0x1c>)
 800b1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e2:	bf00      	nop
 800b1e4:	0800b1f5 	.word	0x0800b1f5
 800b1e8:	0800b1fb 	.word	0x0800b1fb
 800b1ec:	0800b201 	.word	0x0800b201
 800b1f0:	0800b207 	.word	0x0800b207
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1f8:	e00b      	b.n	800b212 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b1fe:	e008      	b.n	800b212 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b200:	2301      	movs	r3, #1
 800b202:	73fb      	strb	r3, [r7, #15]
    break;
 800b204:	e005      	b.n	800b212 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b206:	2303      	movs	r3, #3
 800b208:	73fb      	strb	r3, [r7, #15]
    break;
 800b20a:	e002      	b.n	800b212 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b20c:	2303      	movs	r3, #3
 800b20e:	73fb      	strb	r3, [r7, #15]
    break;
 800b210:	bf00      	nop
  }
  return usb_status;
 800b212:	7bfb      	ldrb	r3, [r7, #15]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3714      	adds	r7, #20
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <arm_copy_f32>:
 800b220:	b4f0      	push	{r4, r5, r6, r7}
 800b222:	0897      	lsrs	r7, r2, #2
 800b224:	d01e      	beq.n	800b264 <arm_copy_f32+0x44>
 800b226:	f100 0410 	add.w	r4, r0, #16
 800b22a:	f101 0310 	add.w	r3, r1, #16
 800b22e:	463d      	mov	r5, r7
 800b230:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800b234:	f843 6c10 	str.w	r6, [r3, #-16]
 800b238:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800b23c:	f843 6c0c 	str.w	r6, [r3, #-12]
 800b240:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800b244:	f843 6c08 	str.w	r6, [r3, #-8]
 800b248:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800b24c:	f843 6c04 	str.w	r6, [r3, #-4]
 800b250:	3d01      	subs	r5, #1
 800b252:	f104 0410 	add.w	r4, r4, #16
 800b256:	f103 0310 	add.w	r3, r3, #16
 800b25a:	d1e9      	bne.n	800b230 <arm_copy_f32+0x10>
 800b25c:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800b260:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800b264:	f012 0203 	ands.w	r2, r2, #3
 800b268:	d009      	beq.n	800b27e <arm_copy_f32+0x5e>
 800b26a:	6803      	ldr	r3, [r0, #0]
 800b26c:	600b      	str	r3, [r1, #0]
 800b26e:	3a01      	subs	r2, #1
 800b270:	d005      	beq.n	800b27e <arm_copy_f32+0x5e>
 800b272:	6843      	ldr	r3, [r0, #4]
 800b274:	604b      	str	r3, [r1, #4]
 800b276:	2a01      	cmp	r2, #1
 800b278:	bf1c      	itt	ne
 800b27a:	6883      	ldrne	r3, [r0, #8]
 800b27c:	608b      	strne	r3, [r1, #8]
 800b27e:	bcf0      	pop	{r4, r5, r6, r7}
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop

0800b284 <arm_std_f32>:
 800b284:	b510      	push	{r4, lr}
 800b286:	ed2d 8b02 	vpush	{d8}
 800b28a:	b082      	sub	sp, #8
 800b28c:	4614      	mov	r4, r2
 800b28e:	aa01      	add	r2, sp, #4
 800b290:	f000 f8e4 	bl	800b45c <arm_var_f32>
 800b294:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b298:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a0:	db0c      	blt.n	800b2bc <arm_std_f32+0x38>
 800b2a2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2aa:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b2ae:	d408      	bmi.n	800b2c2 <arm_std_f32+0x3e>
 800b2b0:	ed84 8a00 	vstr	s16, [r4]
 800b2b4:	b002      	add	sp, #8
 800b2b6:	ecbd 8b02 	vpop	{d8}
 800b2ba:	bd10      	pop	{r4, pc}
 800b2bc:	2300      	movs	r3, #0
 800b2be:	6023      	str	r3, [r4, #0]
 800b2c0:	e7f8      	b.n	800b2b4 <arm_std_f32+0x30>
 800b2c2:	f004 fe2d 	bl	800ff20 <sqrtf>
 800b2c6:	e7f3      	b.n	800b2b0 <arm_std_f32+0x2c>

0800b2c8 <arm_mean_f32>:
 800b2c8:	b430      	push	{r4, r5}
 800b2ca:	088d      	lsrs	r5, r1, #2
 800b2cc:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800b340 <arm_mean_f32+0x78>
 800b2d0:	d018      	beq.n	800b304 <arm_mean_f32+0x3c>
 800b2d2:	f100 0310 	add.w	r3, r0, #16
 800b2d6:	462c      	mov	r4, r5
 800b2d8:	ed53 5a04 	vldr	s11, [r3, #-16]
 800b2dc:	ed13 6a03 	vldr	s12, [r3, #-12]
 800b2e0:	ed53 6a02 	vldr	s13, [r3, #-8]
 800b2e4:	ed13 7a01 	vldr	s14, [r3, #-4]
 800b2e8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b2ec:	3c01      	subs	r4, #1
 800b2ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b2f2:	f103 0310 	add.w	r3, r3, #16
 800b2f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2fe:	d1eb      	bne.n	800b2d8 <arm_mean_f32+0x10>
 800b300:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b304:	f011 0303 	ands.w	r3, r1, #3
 800b308:	d00f      	beq.n	800b32a <arm_mean_f32+0x62>
 800b30a:	ed90 7a00 	vldr	s14, [r0]
 800b30e:	3b01      	subs	r3, #1
 800b310:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b314:	d009      	beq.n	800b32a <arm_mean_f32+0x62>
 800b316:	ed90 7a01 	vldr	s14, [r0, #4]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b320:	bf1c      	itt	ne
 800b322:	ed90 7a02 	vldrne	s14, [r0, #8]
 800b326:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800b32a:	ee07 1a10 	vmov	s14, r1
 800b32e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b332:	bc30      	pop	{r4, r5}
 800b334:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b338:	edc2 6a00 	vstr	s13, [r2]
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	00000000 	.word	0x00000000

0800b344 <arm_scale_f32>:
 800b344:	b470      	push	{r4, r5, r6}
 800b346:	0896      	lsrs	r6, r2, #2
 800b348:	d026      	beq.n	800b398 <arm_scale_f32+0x54>
 800b34a:	f100 0410 	add.w	r4, r0, #16
 800b34e:	f101 0310 	add.w	r3, r1, #16
 800b352:	4635      	mov	r5, r6
 800b354:	ed14 6a03 	vldr	s12, [r4, #-12]
 800b358:	ed54 6a02 	vldr	s13, [r4, #-8]
 800b35c:	ed14 7a01 	vldr	s14, [r4, #-4]
 800b360:	ed54 7a04 	vldr	s15, [r4, #-16]
 800b364:	ee20 6a06 	vmul.f32	s12, s0, s12
 800b368:	ee60 6a26 	vmul.f32	s13, s0, s13
 800b36c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b370:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b374:	3d01      	subs	r5, #1
 800b376:	ed03 6a03 	vstr	s12, [r3, #-12]
 800b37a:	ed43 6a02 	vstr	s13, [r3, #-8]
 800b37e:	ed03 7a01 	vstr	s14, [r3, #-4]
 800b382:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b386:	f104 0410 	add.w	r4, r4, #16
 800b38a:	f103 0310 	add.w	r3, r3, #16
 800b38e:	d1e1      	bne.n	800b354 <arm_scale_f32+0x10>
 800b390:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800b394:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800b398:	f012 0203 	ands.w	r2, r2, #3
 800b39c:	d015      	beq.n	800b3ca <arm_scale_f32+0x86>
 800b39e:	edd0 7a00 	vldr	s15, [r0]
 800b3a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b3a6:	3a01      	subs	r2, #1
 800b3a8:	edc1 7a00 	vstr	s15, [r1]
 800b3ac:	d00d      	beq.n	800b3ca <arm_scale_f32+0x86>
 800b3ae:	edd0 7a01 	vldr	s15, [r0, #4]
 800b3b2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b3b6:	2a01      	cmp	r2, #1
 800b3b8:	edc1 7a01 	vstr	s15, [r1, #4]
 800b3bc:	d005      	beq.n	800b3ca <arm_scale_f32+0x86>
 800b3be:	edd0 7a02 	vldr	s15, [r0, #8]
 800b3c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b3c6:	ed81 0a02 	vstr	s0, [r1, #8]
 800b3ca:	bc70      	pop	{r4, r5, r6}
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop

0800b3d0 <arm_offset_f32>:
 800b3d0:	b470      	push	{r4, r5, r6}
 800b3d2:	0896      	lsrs	r6, r2, #2
 800b3d4:	d026      	beq.n	800b424 <arm_offset_f32+0x54>
 800b3d6:	f100 0410 	add.w	r4, r0, #16
 800b3da:	f101 0310 	add.w	r3, r1, #16
 800b3de:	4635      	mov	r5, r6
 800b3e0:	ed54 7a04 	vldr	s15, [r4, #-16]
 800b3e4:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b3e8:	3d01      	subs	r5, #1
 800b3ea:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b3ee:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b3f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b3f6:	f104 0410 	add.w	r4, r4, #16
 800b3fa:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b3fe:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800b402:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b406:	f103 0310 	add.w	r3, r3, #16
 800b40a:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800b40e:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800b412:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b416:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800b41a:	d1e1      	bne.n	800b3e0 <arm_offset_f32+0x10>
 800b41c:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800b420:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800b424:	f012 0203 	ands.w	r2, r2, #3
 800b428:	d015      	beq.n	800b456 <arm_offset_f32+0x86>
 800b42a:	edd0 7a00 	vldr	s15, [r0]
 800b42e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b432:	3a01      	subs	r2, #1
 800b434:	edc1 7a00 	vstr	s15, [r1]
 800b438:	d00d      	beq.n	800b456 <arm_offset_f32+0x86>
 800b43a:	edd0 7a01 	vldr	s15, [r0, #4]
 800b43e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b442:	2a01      	cmp	r2, #1
 800b444:	edc1 7a01 	vstr	s15, [r1, #4]
 800b448:	d005      	beq.n	800b456 <arm_offset_f32+0x86>
 800b44a:	edd0 7a02 	vldr	s15, [r0, #8]
 800b44e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b452:	ed81 0a02 	vstr	s0, [r1, #8]
 800b456:	bc70      	pop	{r4, r5, r6}
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop

0800b45c <arm_var_f32>:
 800b45c:	2901      	cmp	r1, #1
 800b45e:	f240 809a 	bls.w	800b596 <arm_var_f32+0x13a>
 800b462:	b4f0      	push	{r4, r5, r6, r7}
 800b464:	088d      	lsrs	r5, r1, #2
 800b466:	f000 80a0 	beq.w	800b5aa <arm_var_f32+0x14e>
 800b46a:	f100 0310 	add.w	r3, r0, #16
 800b46e:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800b5b4 <arm_var_f32+0x158>
 800b472:	461c      	mov	r4, r3
 800b474:	462e      	mov	r6, r5
 800b476:	ed54 5a04 	vldr	s11, [r4, #-16]
 800b47a:	ed14 6a03 	vldr	s12, [r4, #-12]
 800b47e:	ed54 6a02 	vldr	s13, [r4, #-8]
 800b482:	ed14 7a01 	vldr	s14, [r4, #-4]
 800b486:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b48a:	3e01      	subs	r6, #1
 800b48c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b490:	f104 0410 	add.w	r4, r4, #16
 800b494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b498:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b49c:	d1eb      	bne.n	800b476 <arm_var_f32+0x1a>
 800b49e:	f011 0403 	ands.w	r4, r1, #3
 800b4a2:	ea4f 1705 	mov.w	r7, r5, lsl #4
 800b4a6:	eb00 1605 	add.w	r6, r0, r5, lsl #4
 800b4aa:	d077      	beq.n	800b59c <arm_var_f32+0x140>
 800b4ac:	ed96 7a00 	vldr	s14, [r6]
 800b4b0:	1e63      	subs	r3, r4, #1
 800b4b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b4b6:	d063      	beq.n	800b580 <arm_var_f32+0x124>
 800b4b8:	ed96 7a01 	vldr	s14, [r6, #4]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b4c2:	d05d      	beq.n	800b580 <arm_var_f32+0x124>
 800b4c4:	ed96 7a02 	vldr	s14, [r6, #8]
 800b4c8:	ee06 1a90 	vmov	s13, r1
 800b4cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b4d0:	eef8 4a66 	vcvt.f32.u32	s9, s13
 800b4d4:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800b4d8:	2d00      	cmp	r5, #0
 800b4da:	d059      	beq.n	800b590 <arm_var_f32+0x134>
 800b4dc:	f100 0310 	add.w	r3, r0, #16
 800b4e0:	012f      	lsls	r7, r5, #4
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800b5b4 <arm_var_f32+0x158>
 800b4e8:	ed13 6a04 	vldr	s12, [r3, #-16]
 800b4ec:	ed53 6a03 	vldr	s13, [r3, #-12]
 800b4f0:	ed13 7a02 	vldr	s14, [r3, #-8]
 800b4f4:	ed53 5a01 	vldr	s11, [r3, #-4]
 800b4f8:	ee36 6a45 	vsub.f32	s12, s12, s10
 800b4fc:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800b500:	ee26 6a06 	vmul.f32	s12, s12, s12
 800b504:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800b508:	ee36 6a27 	vadd.f32	s12, s12, s15
 800b50c:	ee77 7a45 	vsub.f32	s15, s14, s10
 800b510:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b514:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b518:	ee35 6ac5 	vsub.f32	s12, s11, s10
 800b51c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b520:	ee26 6a06 	vmul.f32	s12, s12, s12
 800b524:	3901      	subs	r1, #1
 800b526:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b52a:	f103 0310 	add.w	r3, r3, #16
 800b52e:	d1db      	bne.n	800b4e8 <arm_var_f32+0x8c>
 800b530:	4438      	add	r0, r7
 800b532:	b1dc      	cbz	r4, 800b56c <arm_var_f32+0x110>
 800b534:	1e63      	subs	r3, r4, #1
 800b536:	ed90 7a00 	vldr	s14, [r0]
 800b53a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800b53e:	ee27 7a07 	vmul.f32	s14, s14, s14
 800b542:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b546:	b18b      	cbz	r3, 800b56c <arm_var_f32+0x110>
 800b548:	ed90 7a01 	vldr	s14, [r0, #4]
 800b54c:	ee37 7a45 	vsub.f32	s14, s14, s10
 800b550:	2b01      	cmp	r3, #1
 800b552:	ee27 7a07 	vmul.f32	s14, s14, s14
 800b556:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b55a:	d007      	beq.n	800b56c <arm_var_f32+0x110>
 800b55c:	ed90 7a02 	vldr	s14, [r0, #8]
 800b560:	ee37 5a45 	vsub.f32	s10, s14, s10
 800b564:	ee25 5a05 	vmul.f32	s10, s10, s10
 800b568:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b56c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b570:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800b574:	bcf0      	pop	{r4, r5, r6, r7}
 800b576:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b57a:	ed82 7a00 	vstr	s14, [r2]
 800b57e:	4770      	bx	lr
 800b580:	ee07 1a10 	vmov	s14, r1
 800b584:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800b588:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800b58c:	2d00      	cmp	r5, #0
 800b58e:	d1a5      	bne.n	800b4dc <arm_var_f32+0x80>
 800b590:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800b5b4 <arm_var_f32+0x158>
 800b594:	e7cf      	b.n	800b536 <arm_var_f32+0xda>
 800b596:	2300      	movs	r3, #0
 800b598:	6013      	str	r3, [r2, #0]
 800b59a:	4770      	bx	lr
 800b59c:	ee07 1a10 	vmov	s14, r1
 800b5a0:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800b5a4:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800b5a8:	e79b      	b.n	800b4e2 <arm_var_f32+0x86>
 800b5aa:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800b5b4 <arm_var_f32+0x158>
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	460c      	mov	r4, r1
 800b5b2:	e77b      	b.n	800b4ac <arm_var_f32+0x50>
 800b5b4:	00000000 	.word	0x00000000

0800b5b8 <atof>:
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	f000 be7b 	b.w	800c2b4 <strtod>

0800b5be <atoi>:
 800b5be:	220a      	movs	r2, #10
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	f000 beff 	b.w	800c3c4 <strtol>
	...

0800b5c8 <srand>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4b10      	ldr	r3, [pc, #64]	@ (800b60c <srand+0x44>)
 800b5cc:	681d      	ldr	r5, [r3, #0]
 800b5ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	b9b3      	cbnz	r3, 800b602 <srand+0x3a>
 800b5d4:	2018      	movs	r0, #24
 800b5d6:	f003 f9f7 	bl	800e9c8 <malloc>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	6328      	str	r0, [r5, #48]	@ 0x30
 800b5de:	b920      	cbnz	r0, 800b5ea <srand+0x22>
 800b5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b610 <srand+0x48>)
 800b5e2:	480c      	ldr	r0, [pc, #48]	@ (800b614 <srand+0x4c>)
 800b5e4:	2146      	movs	r1, #70	@ 0x46
 800b5e6:	f001 fff5 	bl	800d5d4 <__assert_func>
 800b5ea:	490b      	ldr	r1, [pc, #44]	@ (800b618 <srand+0x50>)
 800b5ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b61c <srand+0x54>)
 800b5ee:	e9c0 1300 	strd	r1, r3, [r0]
 800b5f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b620 <srand+0x58>)
 800b5f4:	6083      	str	r3, [r0, #8]
 800b5f6:	230b      	movs	r3, #11
 800b5f8:	8183      	strh	r3, [r0, #12]
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	2001      	movs	r0, #1
 800b5fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b602:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800b604:	2200      	movs	r2, #0
 800b606:	611c      	str	r4, [r3, #16]
 800b608:	615a      	str	r2, [r3, #20]
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	20000278 	.word	0x20000278
 800b610:	08014ec0 	.word	0x08014ec0
 800b614:	08014ed7 	.word	0x08014ed7
 800b618:	abcd330e 	.word	0xabcd330e
 800b61c:	e66d1234 	.word	0xe66d1234
 800b620:	0005deec 	.word	0x0005deec

0800b624 <rand>:
 800b624:	4b16      	ldr	r3, [pc, #88]	@ (800b680 <rand+0x5c>)
 800b626:	b510      	push	{r4, lr}
 800b628:	681c      	ldr	r4, [r3, #0]
 800b62a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b62c:	b9b3      	cbnz	r3, 800b65c <rand+0x38>
 800b62e:	2018      	movs	r0, #24
 800b630:	f003 f9ca 	bl	800e9c8 <malloc>
 800b634:	4602      	mov	r2, r0
 800b636:	6320      	str	r0, [r4, #48]	@ 0x30
 800b638:	b920      	cbnz	r0, 800b644 <rand+0x20>
 800b63a:	4b12      	ldr	r3, [pc, #72]	@ (800b684 <rand+0x60>)
 800b63c:	4812      	ldr	r0, [pc, #72]	@ (800b688 <rand+0x64>)
 800b63e:	2152      	movs	r1, #82	@ 0x52
 800b640:	f001 ffc8 	bl	800d5d4 <__assert_func>
 800b644:	4911      	ldr	r1, [pc, #68]	@ (800b68c <rand+0x68>)
 800b646:	4b12      	ldr	r3, [pc, #72]	@ (800b690 <rand+0x6c>)
 800b648:	e9c0 1300 	strd	r1, r3, [r0]
 800b64c:	4b11      	ldr	r3, [pc, #68]	@ (800b694 <rand+0x70>)
 800b64e:	6083      	str	r3, [r0, #8]
 800b650:	230b      	movs	r3, #11
 800b652:	8183      	strh	r3, [r0, #12]
 800b654:	2100      	movs	r1, #0
 800b656:	2001      	movs	r0, #1
 800b658:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b65c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b65e:	480e      	ldr	r0, [pc, #56]	@ (800b698 <rand+0x74>)
 800b660:	690b      	ldr	r3, [r1, #16]
 800b662:	694c      	ldr	r4, [r1, #20]
 800b664:	4a0d      	ldr	r2, [pc, #52]	@ (800b69c <rand+0x78>)
 800b666:	4358      	muls	r0, r3
 800b668:	fb02 0004 	mla	r0, r2, r4, r0
 800b66c:	fba3 3202 	umull	r3, r2, r3, r2
 800b670:	3301      	adds	r3, #1
 800b672:	eb40 0002 	adc.w	r0, r0, r2
 800b676:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b67a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b67e:	bd10      	pop	{r4, pc}
 800b680:	20000278 	.word	0x20000278
 800b684:	08014ec0 	.word	0x08014ec0
 800b688:	08014ed7 	.word	0x08014ed7
 800b68c:	abcd330e 	.word	0xabcd330e
 800b690:	e66d1234 	.word	0xe66d1234
 800b694:	0005deec 	.word	0x0005deec
 800b698:	5851f42d 	.word	0x5851f42d
 800b69c:	4c957f2d 	.word	0x4c957f2d

0800b6a0 <sulp>:
 800b6a0:	b570      	push	{r4, r5, r6, lr}
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	460d      	mov	r5, r1
 800b6a6:	ec45 4b10 	vmov	d0, r4, r5
 800b6aa:	4616      	mov	r6, r2
 800b6ac:	f003 fdc0 	bl	800f230 <__ulp>
 800b6b0:	ec51 0b10 	vmov	r0, r1, d0
 800b6b4:	b17e      	cbz	r6, 800b6d6 <sulp+0x36>
 800b6b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b6ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	dd09      	ble.n	800b6d6 <sulp+0x36>
 800b6c2:	051b      	lsls	r3, r3, #20
 800b6c4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b6c8:	2400      	movs	r4, #0
 800b6ca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b6ce:	4622      	mov	r2, r4
 800b6d0:	462b      	mov	r3, r5
 800b6d2:	f7f4 ffa1 	bl	8000618 <__aeabi_dmul>
 800b6d6:	ec41 0b10 	vmov	d0, r0, r1
 800b6da:	bd70      	pop	{r4, r5, r6, pc}
 800b6dc:	0000      	movs	r0, r0
	...

0800b6e0 <_strtod_l>:
 800b6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e4:	b09f      	sub	sp, #124	@ 0x7c
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	921a      	str	r2, [sp, #104]	@ 0x68
 800b6ee:	9005      	str	r0, [sp, #20]
 800b6f0:	f04f 0a00 	mov.w	sl, #0
 800b6f4:	f04f 0b00 	mov.w	fp, #0
 800b6f8:	460a      	mov	r2, r1
 800b6fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6fc:	7811      	ldrb	r1, [r2, #0]
 800b6fe:	292b      	cmp	r1, #43	@ 0x2b
 800b700:	d04a      	beq.n	800b798 <_strtod_l+0xb8>
 800b702:	d838      	bhi.n	800b776 <_strtod_l+0x96>
 800b704:	290d      	cmp	r1, #13
 800b706:	d832      	bhi.n	800b76e <_strtod_l+0x8e>
 800b708:	2908      	cmp	r1, #8
 800b70a:	d832      	bhi.n	800b772 <_strtod_l+0x92>
 800b70c:	2900      	cmp	r1, #0
 800b70e:	d03b      	beq.n	800b788 <_strtod_l+0xa8>
 800b710:	2200      	movs	r2, #0
 800b712:	920e      	str	r2, [sp, #56]	@ 0x38
 800b714:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b716:	782a      	ldrb	r2, [r5, #0]
 800b718:	2a30      	cmp	r2, #48	@ 0x30
 800b71a:	f040 80b2 	bne.w	800b882 <_strtod_l+0x1a2>
 800b71e:	786a      	ldrb	r2, [r5, #1]
 800b720:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b724:	2a58      	cmp	r2, #88	@ 0x58
 800b726:	d16e      	bne.n	800b806 <_strtod_l+0x126>
 800b728:	9302      	str	r3, [sp, #8]
 800b72a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b72c:	9301      	str	r3, [sp, #4]
 800b72e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	4a8f      	ldr	r2, [pc, #572]	@ (800b970 <_strtod_l+0x290>)
 800b734:	9805      	ldr	r0, [sp, #20]
 800b736:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b738:	a919      	add	r1, sp, #100	@ 0x64
 800b73a:	f002 fe73 	bl	800e424 <__gethex>
 800b73e:	f010 060f 	ands.w	r6, r0, #15
 800b742:	4604      	mov	r4, r0
 800b744:	d005      	beq.n	800b752 <_strtod_l+0x72>
 800b746:	2e06      	cmp	r6, #6
 800b748:	d128      	bne.n	800b79c <_strtod_l+0xbc>
 800b74a:	3501      	adds	r5, #1
 800b74c:	2300      	movs	r3, #0
 800b74e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b750:	930e      	str	r3, [sp, #56]	@ 0x38
 800b752:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b754:	2b00      	cmp	r3, #0
 800b756:	f040 858e 	bne.w	800c276 <_strtod_l+0xb96>
 800b75a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b75c:	b1cb      	cbz	r3, 800b792 <_strtod_l+0xb2>
 800b75e:	4652      	mov	r2, sl
 800b760:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b764:	ec43 2b10 	vmov	d0, r2, r3
 800b768:	b01f      	add	sp, #124	@ 0x7c
 800b76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b76e:	2920      	cmp	r1, #32
 800b770:	d1ce      	bne.n	800b710 <_strtod_l+0x30>
 800b772:	3201      	adds	r2, #1
 800b774:	e7c1      	b.n	800b6fa <_strtod_l+0x1a>
 800b776:	292d      	cmp	r1, #45	@ 0x2d
 800b778:	d1ca      	bne.n	800b710 <_strtod_l+0x30>
 800b77a:	2101      	movs	r1, #1
 800b77c:	910e      	str	r1, [sp, #56]	@ 0x38
 800b77e:	1c51      	adds	r1, r2, #1
 800b780:	9119      	str	r1, [sp, #100]	@ 0x64
 800b782:	7852      	ldrb	r2, [r2, #1]
 800b784:	2a00      	cmp	r2, #0
 800b786:	d1c5      	bne.n	800b714 <_strtod_l+0x34>
 800b788:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b78a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f040 8570 	bne.w	800c272 <_strtod_l+0xb92>
 800b792:	4652      	mov	r2, sl
 800b794:	465b      	mov	r3, fp
 800b796:	e7e5      	b.n	800b764 <_strtod_l+0x84>
 800b798:	2100      	movs	r1, #0
 800b79a:	e7ef      	b.n	800b77c <_strtod_l+0x9c>
 800b79c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b79e:	b13a      	cbz	r2, 800b7b0 <_strtod_l+0xd0>
 800b7a0:	2135      	movs	r1, #53	@ 0x35
 800b7a2:	a81c      	add	r0, sp, #112	@ 0x70
 800b7a4:	f003 fe3e 	bl	800f424 <__copybits>
 800b7a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b7aa:	9805      	ldr	r0, [sp, #20]
 800b7ac:	f003 fa14 	bl	800ebd8 <_Bfree>
 800b7b0:	3e01      	subs	r6, #1
 800b7b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b7b4:	2e04      	cmp	r6, #4
 800b7b6:	d806      	bhi.n	800b7c6 <_strtod_l+0xe6>
 800b7b8:	e8df f006 	tbb	[pc, r6]
 800b7bc:	201d0314 	.word	0x201d0314
 800b7c0:	14          	.byte	0x14
 800b7c1:	00          	.byte	0x00
 800b7c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b7c6:	05e1      	lsls	r1, r4, #23
 800b7c8:	bf48      	it	mi
 800b7ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b7ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b7d2:	0d1b      	lsrs	r3, r3, #20
 800b7d4:	051b      	lsls	r3, r3, #20
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1bb      	bne.n	800b752 <_strtod_l+0x72>
 800b7da:	f001 feb1 	bl	800d540 <__errno>
 800b7de:	2322      	movs	r3, #34	@ 0x22
 800b7e0:	6003      	str	r3, [r0, #0]
 800b7e2:	e7b6      	b.n	800b752 <_strtod_l+0x72>
 800b7e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b7e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b7ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b7f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b7f4:	e7e7      	b.n	800b7c6 <_strtod_l+0xe6>
 800b7f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b978 <_strtod_l+0x298>
 800b7fa:	e7e4      	b.n	800b7c6 <_strtod_l+0xe6>
 800b7fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b800:	f04f 3aff 	mov.w	sl, #4294967295
 800b804:	e7df      	b.n	800b7c6 <_strtod_l+0xe6>
 800b806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b808:	1c5a      	adds	r2, r3, #1
 800b80a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b80c:	785b      	ldrb	r3, [r3, #1]
 800b80e:	2b30      	cmp	r3, #48	@ 0x30
 800b810:	d0f9      	beq.n	800b806 <_strtod_l+0x126>
 800b812:	2b00      	cmp	r3, #0
 800b814:	d09d      	beq.n	800b752 <_strtod_l+0x72>
 800b816:	2301      	movs	r3, #1
 800b818:	2700      	movs	r7, #0
 800b81a:	9308      	str	r3, [sp, #32]
 800b81c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b81e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b820:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b822:	46b9      	mov	r9, r7
 800b824:	220a      	movs	r2, #10
 800b826:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b828:	7805      	ldrb	r5, [r0, #0]
 800b82a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b82e:	b2d9      	uxtb	r1, r3
 800b830:	2909      	cmp	r1, #9
 800b832:	d928      	bls.n	800b886 <_strtod_l+0x1a6>
 800b834:	494f      	ldr	r1, [pc, #316]	@ (800b974 <_strtod_l+0x294>)
 800b836:	2201      	movs	r2, #1
 800b838:	f001 fdb7 	bl	800d3aa <strncmp>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	d032      	beq.n	800b8a6 <_strtod_l+0x1c6>
 800b840:	2000      	movs	r0, #0
 800b842:	462a      	mov	r2, r5
 800b844:	900a      	str	r0, [sp, #40]	@ 0x28
 800b846:	464d      	mov	r5, r9
 800b848:	4603      	mov	r3, r0
 800b84a:	2a65      	cmp	r2, #101	@ 0x65
 800b84c:	d001      	beq.n	800b852 <_strtod_l+0x172>
 800b84e:	2a45      	cmp	r2, #69	@ 0x45
 800b850:	d114      	bne.n	800b87c <_strtod_l+0x19c>
 800b852:	b91d      	cbnz	r5, 800b85c <_strtod_l+0x17c>
 800b854:	9a08      	ldr	r2, [sp, #32]
 800b856:	4302      	orrs	r2, r0
 800b858:	d096      	beq.n	800b788 <_strtod_l+0xa8>
 800b85a:	2500      	movs	r5, #0
 800b85c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b85e:	1c62      	adds	r2, r4, #1
 800b860:	9219      	str	r2, [sp, #100]	@ 0x64
 800b862:	7862      	ldrb	r2, [r4, #1]
 800b864:	2a2b      	cmp	r2, #43	@ 0x2b
 800b866:	d07a      	beq.n	800b95e <_strtod_l+0x27e>
 800b868:	2a2d      	cmp	r2, #45	@ 0x2d
 800b86a:	d07e      	beq.n	800b96a <_strtod_l+0x28a>
 800b86c:	f04f 0c00 	mov.w	ip, #0
 800b870:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b874:	2909      	cmp	r1, #9
 800b876:	f240 8085 	bls.w	800b984 <_strtod_l+0x2a4>
 800b87a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b87c:	f04f 0800 	mov.w	r8, #0
 800b880:	e0a5      	b.n	800b9ce <_strtod_l+0x2ee>
 800b882:	2300      	movs	r3, #0
 800b884:	e7c8      	b.n	800b818 <_strtod_l+0x138>
 800b886:	f1b9 0f08 	cmp.w	r9, #8
 800b88a:	bfd8      	it	le
 800b88c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b88e:	f100 0001 	add.w	r0, r0, #1
 800b892:	bfda      	itte	le
 800b894:	fb02 3301 	mlale	r3, r2, r1, r3
 800b898:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b89a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b89e:	f109 0901 	add.w	r9, r9, #1
 800b8a2:	9019      	str	r0, [sp, #100]	@ 0x64
 800b8a4:	e7bf      	b.n	800b826 <_strtod_l+0x146>
 800b8a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8a8:	1c5a      	adds	r2, r3, #1
 800b8aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8ac:	785a      	ldrb	r2, [r3, #1]
 800b8ae:	f1b9 0f00 	cmp.w	r9, #0
 800b8b2:	d03b      	beq.n	800b92c <_strtod_l+0x24c>
 800b8b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b8b6:	464d      	mov	r5, r9
 800b8b8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b8bc:	2b09      	cmp	r3, #9
 800b8be:	d912      	bls.n	800b8e6 <_strtod_l+0x206>
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e7c2      	b.n	800b84a <_strtod_l+0x16a>
 800b8c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8c6:	1c5a      	adds	r2, r3, #1
 800b8c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8ca:	785a      	ldrb	r2, [r3, #1]
 800b8cc:	3001      	adds	r0, #1
 800b8ce:	2a30      	cmp	r2, #48	@ 0x30
 800b8d0:	d0f8      	beq.n	800b8c4 <_strtod_l+0x1e4>
 800b8d2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b8d6:	2b08      	cmp	r3, #8
 800b8d8:	f200 84d2 	bhi.w	800c280 <_strtod_l+0xba0>
 800b8dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8de:	900a      	str	r0, [sp, #40]	@ 0x28
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8e4:	4605      	mov	r5, r0
 800b8e6:	3a30      	subs	r2, #48	@ 0x30
 800b8e8:	f100 0301 	add.w	r3, r0, #1
 800b8ec:	d018      	beq.n	800b920 <_strtod_l+0x240>
 800b8ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8f0:	4419      	add	r1, r3
 800b8f2:	910a      	str	r1, [sp, #40]	@ 0x28
 800b8f4:	462e      	mov	r6, r5
 800b8f6:	f04f 0e0a 	mov.w	lr, #10
 800b8fa:	1c71      	adds	r1, r6, #1
 800b8fc:	eba1 0c05 	sub.w	ip, r1, r5
 800b900:	4563      	cmp	r3, ip
 800b902:	dc15      	bgt.n	800b930 <_strtod_l+0x250>
 800b904:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b908:	182b      	adds	r3, r5, r0
 800b90a:	2b08      	cmp	r3, #8
 800b90c:	f105 0501 	add.w	r5, r5, #1
 800b910:	4405      	add	r5, r0
 800b912:	dc1a      	bgt.n	800b94a <_strtod_l+0x26a>
 800b914:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b916:	230a      	movs	r3, #10
 800b918:	fb03 2301 	mla	r3, r3, r1, r2
 800b91c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b91e:	2300      	movs	r3, #0
 800b920:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b922:	1c51      	adds	r1, r2, #1
 800b924:	9119      	str	r1, [sp, #100]	@ 0x64
 800b926:	7852      	ldrb	r2, [r2, #1]
 800b928:	4618      	mov	r0, r3
 800b92a:	e7c5      	b.n	800b8b8 <_strtod_l+0x1d8>
 800b92c:	4648      	mov	r0, r9
 800b92e:	e7ce      	b.n	800b8ce <_strtod_l+0x1ee>
 800b930:	2e08      	cmp	r6, #8
 800b932:	dc05      	bgt.n	800b940 <_strtod_l+0x260>
 800b934:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b936:	fb0e f606 	mul.w	r6, lr, r6
 800b93a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b93c:	460e      	mov	r6, r1
 800b93e:	e7dc      	b.n	800b8fa <_strtod_l+0x21a>
 800b940:	2910      	cmp	r1, #16
 800b942:	bfd8      	it	le
 800b944:	fb0e f707 	mulle.w	r7, lr, r7
 800b948:	e7f8      	b.n	800b93c <_strtod_l+0x25c>
 800b94a:	2b0f      	cmp	r3, #15
 800b94c:	bfdc      	itt	le
 800b94e:	230a      	movle	r3, #10
 800b950:	fb03 2707 	mlale	r7, r3, r7, r2
 800b954:	e7e3      	b.n	800b91e <_strtod_l+0x23e>
 800b956:	2300      	movs	r3, #0
 800b958:	930a      	str	r3, [sp, #40]	@ 0x28
 800b95a:	2301      	movs	r3, #1
 800b95c:	e77a      	b.n	800b854 <_strtod_l+0x174>
 800b95e:	f04f 0c00 	mov.w	ip, #0
 800b962:	1ca2      	adds	r2, r4, #2
 800b964:	9219      	str	r2, [sp, #100]	@ 0x64
 800b966:	78a2      	ldrb	r2, [r4, #2]
 800b968:	e782      	b.n	800b870 <_strtod_l+0x190>
 800b96a:	f04f 0c01 	mov.w	ip, #1
 800b96e:	e7f8      	b.n	800b962 <_strtod_l+0x282>
 800b970:	0801515c 	.word	0x0801515c
 800b974:	08014f2f 	.word	0x08014f2f
 800b978:	7ff00000 	.word	0x7ff00000
 800b97c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b97e:	1c51      	adds	r1, r2, #1
 800b980:	9119      	str	r1, [sp, #100]	@ 0x64
 800b982:	7852      	ldrb	r2, [r2, #1]
 800b984:	2a30      	cmp	r2, #48	@ 0x30
 800b986:	d0f9      	beq.n	800b97c <_strtod_l+0x29c>
 800b988:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b98c:	2908      	cmp	r1, #8
 800b98e:	f63f af75 	bhi.w	800b87c <_strtod_l+0x19c>
 800b992:	3a30      	subs	r2, #48	@ 0x30
 800b994:	9209      	str	r2, [sp, #36]	@ 0x24
 800b996:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b998:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b99a:	f04f 080a 	mov.w	r8, #10
 800b99e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b9a0:	1c56      	adds	r6, r2, #1
 800b9a2:	9619      	str	r6, [sp, #100]	@ 0x64
 800b9a4:	7852      	ldrb	r2, [r2, #1]
 800b9a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b9aa:	f1be 0f09 	cmp.w	lr, #9
 800b9ae:	d939      	bls.n	800ba24 <_strtod_l+0x344>
 800b9b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b9b2:	1a76      	subs	r6, r6, r1
 800b9b4:	2e08      	cmp	r6, #8
 800b9b6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b9ba:	dc03      	bgt.n	800b9c4 <_strtod_l+0x2e4>
 800b9bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9be:	4588      	cmp	r8, r1
 800b9c0:	bfa8      	it	ge
 800b9c2:	4688      	movge	r8, r1
 800b9c4:	f1bc 0f00 	cmp.w	ip, #0
 800b9c8:	d001      	beq.n	800b9ce <_strtod_l+0x2ee>
 800b9ca:	f1c8 0800 	rsb	r8, r8, #0
 800b9ce:	2d00      	cmp	r5, #0
 800b9d0:	d14e      	bne.n	800ba70 <_strtod_l+0x390>
 800b9d2:	9908      	ldr	r1, [sp, #32]
 800b9d4:	4308      	orrs	r0, r1
 800b9d6:	f47f aebc 	bne.w	800b752 <_strtod_l+0x72>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f47f aed4 	bne.w	800b788 <_strtod_l+0xa8>
 800b9e0:	2a69      	cmp	r2, #105	@ 0x69
 800b9e2:	d028      	beq.n	800ba36 <_strtod_l+0x356>
 800b9e4:	dc25      	bgt.n	800ba32 <_strtod_l+0x352>
 800b9e6:	2a49      	cmp	r2, #73	@ 0x49
 800b9e8:	d025      	beq.n	800ba36 <_strtod_l+0x356>
 800b9ea:	2a4e      	cmp	r2, #78	@ 0x4e
 800b9ec:	f47f aecc 	bne.w	800b788 <_strtod_l+0xa8>
 800b9f0:	499a      	ldr	r1, [pc, #616]	@ (800bc5c <_strtod_l+0x57c>)
 800b9f2:	a819      	add	r0, sp, #100	@ 0x64
 800b9f4:	f002 ff38 	bl	800e868 <__match>
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	f43f aec5 	beq.w	800b788 <_strtod_l+0xa8>
 800b9fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	2b28      	cmp	r3, #40	@ 0x28
 800ba04:	d12e      	bne.n	800ba64 <_strtod_l+0x384>
 800ba06:	4996      	ldr	r1, [pc, #600]	@ (800bc60 <_strtod_l+0x580>)
 800ba08:	aa1c      	add	r2, sp, #112	@ 0x70
 800ba0a:	a819      	add	r0, sp, #100	@ 0x64
 800ba0c:	f002 ff40 	bl	800e890 <__hexnan>
 800ba10:	2805      	cmp	r0, #5
 800ba12:	d127      	bne.n	800ba64 <_strtod_l+0x384>
 800ba14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ba16:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ba1a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ba1e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ba22:	e696      	b.n	800b752 <_strtod_l+0x72>
 800ba24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba26:	fb08 2101 	mla	r1, r8, r1, r2
 800ba2a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ba2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba30:	e7b5      	b.n	800b99e <_strtod_l+0x2be>
 800ba32:	2a6e      	cmp	r2, #110	@ 0x6e
 800ba34:	e7da      	b.n	800b9ec <_strtod_l+0x30c>
 800ba36:	498b      	ldr	r1, [pc, #556]	@ (800bc64 <_strtod_l+0x584>)
 800ba38:	a819      	add	r0, sp, #100	@ 0x64
 800ba3a:	f002 ff15 	bl	800e868 <__match>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	f43f aea2 	beq.w	800b788 <_strtod_l+0xa8>
 800ba44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba46:	4988      	ldr	r1, [pc, #544]	@ (800bc68 <_strtod_l+0x588>)
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	a819      	add	r0, sp, #100	@ 0x64
 800ba4c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ba4e:	f002 ff0b 	bl	800e868 <__match>
 800ba52:	b910      	cbnz	r0, 800ba5a <_strtod_l+0x37a>
 800ba54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba56:	3301      	adds	r3, #1
 800ba58:	9319      	str	r3, [sp, #100]	@ 0x64
 800ba5a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800bc78 <_strtod_l+0x598>
 800ba5e:	f04f 0a00 	mov.w	sl, #0
 800ba62:	e676      	b.n	800b752 <_strtod_l+0x72>
 800ba64:	4881      	ldr	r0, [pc, #516]	@ (800bc6c <_strtod_l+0x58c>)
 800ba66:	f001 fda7 	bl	800d5b8 <nan>
 800ba6a:	ec5b ab10 	vmov	sl, fp, d0
 800ba6e:	e670      	b.n	800b752 <_strtod_l+0x72>
 800ba70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba72:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ba74:	eba8 0303 	sub.w	r3, r8, r3
 800ba78:	f1b9 0f00 	cmp.w	r9, #0
 800ba7c:	bf08      	it	eq
 800ba7e:	46a9      	moveq	r9, r5
 800ba80:	2d10      	cmp	r5, #16
 800ba82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba84:	462c      	mov	r4, r5
 800ba86:	bfa8      	it	ge
 800ba88:	2410      	movge	r4, #16
 800ba8a:	f7f4 fd4b 	bl	8000524 <__aeabi_ui2d>
 800ba8e:	2d09      	cmp	r5, #9
 800ba90:	4682      	mov	sl, r0
 800ba92:	468b      	mov	fp, r1
 800ba94:	dc13      	bgt.n	800babe <_strtod_l+0x3de>
 800ba96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f43f ae5a 	beq.w	800b752 <_strtod_l+0x72>
 800ba9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baa0:	dd78      	ble.n	800bb94 <_strtod_l+0x4b4>
 800baa2:	2b16      	cmp	r3, #22
 800baa4:	dc5f      	bgt.n	800bb66 <_strtod_l+0x486>
 800baa6:	4972      	ldr	r1, [pc, #456]	@ (800bc70 <_strtod_l+0x590>)
 800baa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800baac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bab0:	4652      	mov	r2, sl
 800bab2:	465b      	mov	r3, fp
 800bab4:	f7f4 fdb0 	bl	8000618 <__aeabi_dmul>
 800bab8:	4682      	mov	sl, r0
 800baba:	468b      	mov	fp, r1
 800babc:	e649      	b.n	800b752 <_strtod_l+0x72>
 800babe:	4b6c      	ldr	r3, [pc, #432]	@ (800bc70 <_strtod_l+0x590>)
 800bac0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bac4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bac8:	f7f4 fda6 	bl	8000618 <__aeabi_dmul>
 800bacc:	4682      	mov	sl, r0
 800bace:	4638      	mov	r0, r7
 800bad0:	468b      	mov	fp, r1
 800bad2:	f7f4 fd27 	bl	8000524 <__aeabi_ui2d>
 800bad6:	4602      	mov	r2, r0
 800bad8:	460b      	mov	r3, r1
 800bada:	4650      	mov	r0, sl
 800badc:	4659      	mov	r1, fp
 800bade:	f7f4 fbe5 	bl	80002ac <__adddf3>
 800bae2:	2d0f      	cmp	r5, #15
 800bae4:	4682      	mov	sl, r0
 800bae6:	468b      	mov	fp, r1
 800bae8:	ddd5      	ble.n	800ba96 <_strtod_l+0x3b6>
 800baea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baec:	1b2c      	subs	r4, r5, r4
 800baee:	441c      	add	r4, r3
 800baf0:	2c00      	cmp	r4, #0
 800baf2:	f340 8093 	ble.w	800bc1c <_strtod_l+0x53c>
 800baf6:	f014 030f 	ands.w	r3, r4, #15
 800bafa:	d00a      	beq.n	800bb12 <_strtod_l+0x432>
 800bafc:	495c      	ldr	r1, [pc, #368]	@ (800bc70 <_strtod_l+0x590>)
 800bafe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb02:	4652      	mov	r2, sl
 800bb04:	465b      	mov	r3, fp
 800bb06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb0a:	f7f4 fd85 	bl	8000618 <__aeabi_dmul>
 800bb0e:	4682      	mov	sl, r0
 800bb10:	468b      	mov	fp, r1
 800bb12:	f034 040f 	bics.w	r4, r4, #15
 800bb16:	d073      	beq.n	800bc00 <_strtod_l+0x520>
 800bb18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bb1c:	dd49      	ble.n	800bbb2 <_strtod_l+0x4d2>
 800bb1e:	2400      	movs	r4, #0
 800bb20:	46a0      	mov	r8, r4
 800bb22:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bb24:	46a1      	mov	r9, r4
 800bb26:	9a05      	ldr	r2, [sp, #20]
 800bb28:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800bc78 <_strtod_l+0x598>
 800bb2c:	2322      	movs	r3, #34	@ 0x22
 800bb2e:	6013      	str	r3, [r2, #0]
 800bb30:	f04f 0a00 	mov.w	sl, #0
 800bb34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f43f ae0b 	beq.w	800b752 <_strtod_l+0x72>
 800bb3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb3e:	9805      	ldr	r0, [sp, #20]
 800bb40:	f003 f84a 	bl	800ebd8 <_Bfree>
 800bb44:	9805      	ldr	r0, [sp, #20]
 800bb46:	4649      	mov	r1, r9
 800bb48:	f003 f846 	bl	800ebd8 <_Bfree>
 800bb4c:	9805      	ldr	r0, [sp, #20]
 800bb4e:	4641      	mov	r1, r8
 800bb50:	f003 f842 	bl	800ebd8 <_Bfree>
 800bb54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb56:	9805      	ldr	r0, [sp, #20]
 800bb58:	f003 f83e 	bl	800ebd8 <_Bfree>
 800bb5c:	9805      	ldr	r0, [sp, #20]
 800bb5e:	4621      	mov	r1, r4
 800bb60:	f003 f83a 	bl	800ebd8 <_Bfree>
 800bb64:	e5f5      	b.n	800b752 <_strtod_l+0x72>
 800bb66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	dbbc      	blt.n	800baea <_strtod_l+0x40a>
 800bb70:	4c3f      	ldr	r4, [pc, #252]	@ (800bc70 <_strtod_l+0x590>)
 800bb72:	f1c5 050f 	rsb	r5, r5, #15
 800bb76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bb7a:	4652      	mov	r2, sl
 800bb7c:	465b      	mov	r3, fp
 800bb7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb82:	f7f4 fd49 	bl	8000618 <__aeabi_dmul>
 800bb86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb88:	1b5d      	subs	r5, r3, r5
 800bb8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bb8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bb92:	e78f      	b.n	800bab4 <_strtod_l+0x3d4>
 800bb94:	3316      	adds	r3, #22
 800bb96:	dba8      	blt.n	800baea <_strtod_l+0x40a>
 800bb98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb9a:	eba3 0808 	sub.w	r8, r3, r8
 800bb9e:	4b34      	ldr	r3, [pc, #208]	@ (800bc70 <_strtod_l+0x590>)
 800bba0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bba4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bba8:	4650      	mov	r0, sl
 800bbaa:	4659      	mov	r1, fp
 800bbac:	f7f4 fe5e 	bl	800086c <__aeabi_ddiv>
 800bbb0:	e782      	b.n	800bab8 <_strtod_l+0x3d8>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	4f2f      	ldr	r7, [pc, #188]	@ (800bc74 <_strtod_l+0x594>)
 800bbb6:	1124      	asrs	r4, r4, #4
 800bbb8:	4650      	mov	r0, sl
 800bbba:	4659      	mov	r1, fp
 800bbbc:	461e      	mov	r6, r3
 800bbbe:	2c01      	cmp	r4, #1
 800bbc0:	dc21      	bgt.n	800bc06 <_strtod_l+0x526>
 800bbc2:	b10b      	cbz	r3, 800bbc8 <_strtod_l+0x4e8>
 800bbc4:	4682      	mov	sl, r0
 800bbc6:	468b      	mov	fp, r1
 800bbc8:	492a      	ldr	r1, [pc, #168]	@ (800bc74 <_strtod_l+0x594>)
 800bbca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bbce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bbd2:	4652      	mov	r2, sl
 800bbd4:	465b      	mov	r3, fp
 800bbd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbda:	f7f4 fd1d 	bl	8000618 <__aeabi_dmul>
 800bbde:	4b26      	ldr	r3, [pc, #152]	@ (800bc78 <_strtod_l+0x598>)
 800bbe0:	460a      	mov	r2, r1
 800bbe2:	400b      	ands	r3, r1
 800bbe4:	4925      	ldr	r1, [pc, #148]	@ (800bc7c <_strtod_l+0x59c>)
 800bbe6:	428b      	cmp	r3, r1
 800bbe8:	4682      	mov	sl, r0
 800bbea:	d898      	bhi.n	800bb1e <_strtod_l+0x43e>
 800bbec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bbf0:	428b      	cmp	r3, r1
 800bbf2:	bf86      	itte	hi
 800bbf4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800bc80 <_strtod_l+0x5a0>
 800bbf8:	f04f 3aff 	movhi.w	sl, #4294967295
 800bbfc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bc00:	2300      	movs	r3, #0
 800bc02:	9308      	str	r3, [sp, #32]
 800bc04:	e076      	b.n	800bcf4 <_strtod_l+0x614>
 800bc06:	07e2      	lsls	r2, r4, #31
 800bc08:	d504      	bpl.n	800bc14 <_strtod_l+0x534>
 800bc0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc0e:	f7f4 fd03 	bl	8000618 <__aeabi_dmul>
 800bc12:	2301      	movs	r3, #1
 800bc14:	3601      	adds	r6, #1
 800bc16:	1064      	asrs	r4, r4, #1
 800bc18:	3708      	adds	r7, #8
 800bc1a:	e7d0      	b.n	800bbbe <_strtod_l+0x4de>
 800bc1c:	d0f0      	beq.n	800bc00 <_strtod_l+0x520>
 800bc1e:	4264      	negs	r4, r4
 800bc20:	f014 020f 	ands.w	r2, r4, #15
 800bc24:	d00a      	beq.n	800bc3c <_strtod_l+0x55c>
 800bc26:	4b12      	ldr	r3, [pc, #72]	@ (800bc70 <_strtod_l+0x590>)
 800bc28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc2c:	4650      	mov	r0, sl
 800bc2e:	4659      	mov	r1, fp
 800bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc34:	f7f4 fe1a 	bl	800086c <__aeabi_ddiv>
 800bc38:	4682      	mov	sl, r0
 800bc3a:	468b      	mov	fp, r1
 800bc3c:	1124      	asrs	r4, r4, #4
 800bc3e:	d0df      	beq.n	800bc00 <_strtod_l+0x520>
 800bc40:	2c1f      	cmp	r4, #31
 800bc42:	dd1f      	ble.n	800bc84 <_strtod_l+0x5a4>
 800bc44:	2400      	movs	r4, #0
 800bc46:	46a0      	mov	r8, r4
 800bc48:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bc4a:	46a1      	mov	r9, r4
 800bc4c:	9a05      	ldr	r2, [sp, #20]
 800bc4e:	2322      	movs	r3, #34	@ 0x22
 800bc50:	f04f 0a00 	mov.w	sl, #0
 800bc54:	f04f 0b00 	mov.w	fp, #0
 800bc58:	6013      	str	r3, [r2, #0]
 800bc5a:	e76b      	b.n	800bb34 <_strtod_l+0x454>
 800bc5c:	08014f3e 	.word	0x08014f3e
 800bc60:	08015148 	.word	0x08015148
 800bc64:	08014f36 	.word	0x08014f36
 800bc68:	0801500b 	.word	0x0801500b
 800bc6c:	08015007 	.word	0x08015007
 800bc70:	080152d0 	.word	0x080152d0
 800bc74:	080152a8 	.word	0x080152a8
 800bc78:	7ff00000 	.word	0x7ff00000
 800bc7c:	7ca00000 	.word	0x7ca00000
 800bc80:	7fefffff 	.word	0x7fefffff
 800bc84:	f014 0310 	ands.w	r3, r4, #16
 800bc88:	bf18      	it	ne
 800bc8a:	236a      	movne	r3, #106	@ 0x6a
 800bc8c:	4ea9      	ldr	r6, [pc, #676]	@ (800bf34 <_strtod_l+0x854>)
 800bc8e:	9308      	str	r3, [sp, #32]
 800bc90:	4650      	mov	r0, sl
 800bc92:	4659      	mov	r1, fp
 800bc94:	2300      	movs	r3, #0
 800bc96:	07e7      	lsls	r7, r4, #31
 800bc98:	d504      	bpl.n	800bca4 <_strtod_l+0x5c4>
 800bc9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc9e:	f7f4 fcbb 	bl	8000618 <__aeabi_dmul>
 800bca2:	2301      	movs	r3, #1
 800bca4:	1064      	asrs	r4, r4, #1
 800bca6:	f106 0608 	add.w	r6, r6, #8
 800bcaa:	d1f4      	bne.n	800bc96 <_strtod_l+0x5b6>
 800bcac:	b10b      	cbz	r3, 800bcb2 <_strtod_l+0x5d2>
 800bcae:	4682      	mov	sl, r0
 800bcb0:	468b      	mov	fp, r1
 800bcb2:	9b08      	ldr	r3, [sp, #32]
 800bcb4:	b1b3      	cbz	r3, 800bce4 <_strtod_l+0x604>
 800bcb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bcba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	4659      	mov	r1, fp
 800bcc2:	dd0f      	ble.n	800bce4 <_strtod_l+0x604>
 800bcc4:	2b1f      	cmp	r3, #31
 800bcc6:	dd56      	ble.n	800bd76 <_strtod_l+0x696>
 800bcc8:	2b34      	cmp	r3, #52	@ 0x34
 800bcca:	bfde      	ittt	le
 800bccc:	f04f 33ff 	movle.w	r3, #4294967295
 800bcd0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bcd4:	4093      	lslle	r3, r2
 800bcd6:	f04f 0a00 	mov.w	sl, #0
 800bcda:	bfcc      	ite	gt
 800bcdc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bce0:	ea03 0b01 	andle.w	fp, r3, r1
 800bce4:	2200      	movs	r2, #0
 800bce6:	2300      	movs	r3, #0
 800bce8:	4650      	mov	r0, sl
 800bcea:	4659      	mov	r1, fp
 800bcec:	f7f4 fefc 	bl	8000ae8 <__aeabi_dcmpeq>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d1a7      	bne.n	800bc44 <_strtod_l+0x564>
 800bcf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bcfa:	9805      	ldr	r0, [sp, #20]
 800bcfc:	462b      	mov	r3, r5
 800bcfe:	464a      	mov	r2, r9
 800bd00:	f002 ffd2 	bl	800eca8 <__s2b>
 800bd04:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bd06:	2800      	cmp	r0, #0
 800bd08:	f43f af09 	beq.w	800bb1e <_strtod_l+0x43e>
 800bd0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd10:	2a00      	cmp	r2, #0
 800bd12:	eba3 0308 	sub.w	r3, r3, r8
 800bd16:	bfa8      	it	ge
 800bd18:	2300      	movge	r3, #0
 800bd1a:	9312      	str	r3, [sp, #72]	@ 0x48
 800bd1c:	2400      	movs	r4, #0
 800bd1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bd22:	9316      	str	r3, [sp, #88]	@ 0x58
 800bd24:	46a0      	mov	r8, r4
 800bd26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd28:	9805      	ldr	r0, [sp, #20]
 800bd2a:	6859      	ldr	r1, [r3, #4]
 800bd2c:	f002 ff14 	bl	800eb58 <_Balloc>
 800bd30:	4681      	mov	r9, r0
 800bd32:	2800      	cmp	r0, #0
 800bd34:	f43f aef7 	beq.w	800bb26 <_strtod_l+0x446>
 800bd38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd3a:	691a      	ldr	r2, [r3, #16]
 800bd3c:	3202      	adds	r2, #2
 800bd3e:	f103 010c 	add.w	r1, r3, #12
 800bd42:	0092      	lsls	r2, r2, #2
 800bd44:	300c      	adds	r0, #12
 800bd46:	f001 fc28 	bl	800d59a <memcpy>
 800bd4a:	ec4b ab10 	vmov	d0, sl, fp
 800bd4e:	9805      	ldr	r0, [sp, #20]
 800bd50:	aa1c      	add	r2, sp, #112	@ 0x70
 800bd52:	a91b      	add	r1, sp, #108	@ 0x6c
 800bd54:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bd58:	f003 fada 	bl	800f310 <__d2b>
 800bd5c:	901a      	str	r0, [sp, #104]	@ 0x68
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	f43f aee1 	beq.w	800bb26 <_strtod_l+0x446>
 800bd64:	9805      	ldr	r0, [sp, #20]
 800bd66:	2101      	movs	r1, #1
 800bd68:	f003 f834 	bl	800edd4 <__i2b>
 800bd6c:	4680      	mov	r8, r0
 800bd6e:	b948      	cbnz	r0, 800bd84 <_strtod_l+0x6a4>
 800bd70:	f04f 0800 	mov.w	r8, #0
 800bd74:	e6d7      	b.n	800bb26 <_strtod_l+0x446>
 800bd76:	f04f 32ff 	mov.w	r2, #4294967295
 800bd7a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd7e:	ea03 0a0a 	and.w	sl, r3, sl
 800bd82:	e7af      	b.n	800bce4 <_strtod_l+0x604>
 800bd84:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bd86:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bd88:	2d00      	cmp	r5, #0
 800bd8a:	bfab      	itete	ge
 800bd8c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bd8e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bd90:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bd92:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bd94:	bfac      	ite	ge
 800bd96:	18ef      	addge	r7, r5, r3
 800bd98:	1b5e      	sublt	r6, r3, r5
 800bd9a:	9b08      	ldr	r3, [sp, #32]
 800bd9c:	1aed      	subs	r5, r5, r3
 800bd9e:	4415      	add	r5, r2
 800bda0:	4b65      	ldr	r3, [pc, #404]	@ (800bf38 <_strtod_l+0x858>)
 800bda2:	3d01      	subs	r5, #1
 800bda4:	429d      	cmp	r5, r3
 800bda6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bdaa:	da50      	bge.n	800be4e <_strtod_l+0x76e>
 800bdac:	1b5b      	subs	r3, r3, r5
 800bdae:	2b1f      	cmp	r3, #31
 800bdb0:	eba2 0203 	sub.w	r2, r2, r3
 800bdb4:	f04f 0101 	mov.w	r1, #1
 800bdb8:	dc3d      	bgt.n	800be36 <_strtod_l+0x756>
 800bdba:	fa01 f303 	lsl.w	r3, r1, r3
 800bdbe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	9310      	str	r3, [sp, #64]	@ 0x40
 800bdc4:	18bd      	adds	r5, r7, r2
 800bdc6:	9b08      	ldr	r3, [sp, #32]
 800bdc8:	42af      	cmp	r7, r5
 800bdca:	4416      	add	r6, r2
 800bdcc:	441e      	add	r6, r3
 800bdce:	463b      	mov	r3, r7
 800bdd0:	bfa8      	it	ge
 800bdd2:	462b      	movge	r3, r5
 800bdd4:	42b3      	cmp	r3, r6
 800bdd6:	bfa8      	it	ge
 800bdd8:	4633      	movge	r3, r6
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	bfc2      	ittt	gt
 800bdde:	1aed      	subgt	r5, r5, r3
 800bde0:	1af6      	subgt	r6, r6, r3
 800bde2:	1aff      	subgt	r7, r7, r3
 800bde4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	dd16      	ble.n	800be18 <_strtod_l+0x738>
 800bdea:	4641      	mov	r1, r8
 800bdec:	9805      	ldr	r0, [sp, #20]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	f003 f8a8 	bl	800ef44 <__pow5mult>
 800bdf4:	4680      	mov	r8, r0
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d0ba      	beq.n	800bd70 <_strtod_l+0x690>
 800bdfa:	4601      	mov	r1, r0
 800bdfc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bdfe:	9805      	ldr	r0, [sp, #20]
 800be00:	f002 fffe 	bl	800ee00 <__multiply>
 800be04:	900a      	str	r0, [sp, #40]	@ 0x28
 800be06:	2800      	cmp	r0, #0
 800be08:	f43f ae8d 	beq.w	800bb26 <_strtod_l+0x446>
 800be0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be0e:	9805      	ldr	r0, [sp, #20]
 800be10:	f002 fee2 	bl	800ebd8 <_Bfree>
 800be14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be16:	931a      	str	r3, [sp, #104]	@ 0x68
 800be18:	2d00      	cmp	r5, #0
 800be1a:	dc1d      	bgt.n	800be58 <_strtod_l+0x778>
 800be1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be1e:	2b00      	cmp	r3, #0
 800be20:	dd23      	ble.n	800be6a <_strtod_l+0x78a>
 800be22:	4649      	mov	r1, r9
 800be24:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800be26:	9805      	ldr	r0, [sp, #20]
 800be28:	f003 f88c 	bl	800ef44 <__pow5mult>
 800be2c:	4681      	mov	r9, r0
 800be2e:	b9e0      	cbnz	r0, 800be6a <_strtod_l+0x78a>
 800be30:	f04f 0900 	mov.w	r9, #0
 800be34:	e677      	b.n	800bb26 <_strtod_l+0x446>
 800be36:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800be3a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800be3e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800be42:	35e2      	adds	r5, #226	@ 0xe2
 800be44:	fa01 f305 	lsl.w	r3, r1, r5
 800be48:	9310      	str	r3, [sp, #64]	@ 0x40
 800be4a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800be4c:	e7ba      	b.n	800bdc4 <_strtod_l+0x6e4>
 800be4e:	2300      	movs	r3, #0
 800be50:	9310      	str	r3, [sp, #64]	@ 0x40
 800be52:	2301      	movs	r3, #1
 800be54:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be56:	e7b5      	b.n	800bdc4 <_strtod_l+0x6e4>
 800be58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be5a:	9805      	ldr	r0, [sp, #20]
 800be5c:	462a      	mov	r2, r5
 800be5e:	f003 f8cb 	bl	800eff8 <__lshift>
 800be62:	901a      	str	r0, [sp, #104]	@ 0x68
 800be64:	2800      	cmp	r0, #0
 800be66:	d1d9      	bne.n	800be1c <_strtod_l+0x73c>
 800be68:	e65d      	b.n	800bb26 <_strtod_l+0x446>
 800be6a:	2e00      	cmp	r6, #0
 800be6c:	dd07      	ble.n	800be7e <_strtod_l+0x79e>
 800be6e:	4649      	mov	r1, r9
 800be70:	9805      	ldr	r0, [sp, #20]
 800be72:	4632      	mov	r2, r6
 800be74:	f003 f8c0 	bl	800eff8 <__lshift>
 800be78:	4681      	mov	r9, r0
 800be7a:	2800      	cmp	r0, #0
 800be7c:	d0d8      	beq.n	800be30 <_strtod_l+0x750>
 800be7e:	2f00      	cmp	r7, #0
 800be80:	dd08      	ble.n	800be94 <_strtod_l+0x7b4>
 800be82:	4641      	mov	r1, r8
 800be84:	9805      	ldr	r0, [sp, #20]
 800be86:	463a      	mov	r2, r7
 800be88:	f003 f8b6 	bl	800eff8 <__lshift>
 800be8c:	4680      	mov	r8, r0
 800be8e:	2800      	cmp	r0, #0
 800be90:	f43f ae49 	beq.w	800bb26 <_strtod_l+0x446>
 800be94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be96:	9805      	ldr	r0, [sp, #20]
 800be98:	464a      	mov	r2, r9
 800be9a:	f003 f935 	bl	800f108 <__mdiff>
 800be9e:	4604      	mov	r4, r0
 800bea0:	2800      	cmp	r0, #0
 800bea2:	f43f ae40 	beq.w	800bb26 <_strtod_l+0x446>
 800bea6:	68c3      	ldr	r3, [r0, #12]
 800bea8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800beaa:	2300      	movs	r3, #0
 800beac:	60c3      	str	r3, [r0, #12]
 800beae:	4641      	mov	r1, r8
 800beb0:	f003 f90e 	bl	800f0d0 <__mcmp>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	da45      	bge.n	800bf44 <_strtod_l+0x864>
 800beb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beba:	ea53 030a 	orrs.w	r3, r3, sl
 800bebe:	d16b      	bne.n	800bf98 <_strtod_l+0x8b8>
 800bec0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d167      	bne.n	800bf98 <_strtod_l+0x8b8>
 800bec8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800becc:	0d1b      	lsrs	r3, r3, #20
 800bece:	051b      	lsls	r3, r3, #20
 800bed0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bed4:	d960      	bls.n	800bf98 <_strtod_l+0x8b8>
 800bed6:	6963      	ldr	r3, [r4, #20]
 800bed8:	b913      	cbnz	r3, 800bee0 <_strtod_l+0x800>
 800beda:	6923      	ldr	r3, [r4, #16]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	dd5b      	ble.n	800bf98 <_strtod_l+0x8b8>
 800bee0:	4621      	mov	r1, r4
 800bee2:	2201      	movs	r2, #1
 800bee4:	9805      	ldr	r0, [sp, #20]
 800bee6:	f003 f887 	bl	800eff8 <__lshift>
 800beea:	4641      	mov	r1, r8
 800beec:	4604      	mov	r4, r0
 800beee:	f003 f8ef 	bl	800f0d0 <__mcmp>
 800bef2:	2800      	cmp	r0, #0
 800bef4:	dd50      	ble.n	800bf98 <_strtod_l+0x8b8>
 800bef6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800befa:	9a08      	ldr	r2, [sp, #32]
 800befc:	0d1b      	lsrs	r3, r3, #20
 800befe:	051b      	lsls	r3, r3, #20
 800bf00:	2a00      	cmp	r2, #0
 800bf02:	d06a      	beq.n	800bfda <_strtod_l+0x8fa>
 800bf04:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bf08:	d867      	bhi.n	800bfda <_strtod_l+0x8fa>
 800bf0a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bf0e:	f67f ae9d 	bls.w	800bc4c <_strtod_l+0x56c>
 800bf12:	4b0a      	ldr	r3, [pc, #40]	@ (800bf3c <_strtod_l+0x85c>)
 800bf14:	4650      	mov	r0, sl
 800bf16:	4659      	mov	r1, fp
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f7f4 fb7d 	bl	8000618 <__aeabi_dmul>
 800bf1e:	4b08      	ldr	r3, [pc, #32]	@ (800bf40 <_strtod_l+0x860>)
 800bf20:	400b      	ands	r3, r1
 800bf22:	4682      	mov	sl, r0
 800bf24:	468b      	mov	fp, r1
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f47f ae08 	bne.w	800bb3c <_strtod_l+0x45c>
 800bf2c:	9a05      	ldr	r2, [sp, #20]
 800bf2e:	2322      	movs	r3, #34	@ 0x22
 800bf30:	6013      	str	r3, [r2, #0]
 800bf32:	e603      	b.n	800bb3c <_strtod_l+0x45c>
 800bf34:	08015170 	.word	0x08015170
 800bf38:	fffffc02 	.word	0xfffffc02
 800bf3c:	39500000 	.word	0x39500000
 800bf40:	7ff00000 	.word	0x7ff00000
 800bf44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bf48:	d165      	bne.n	800c016 <_strtod_l+0x936>
 800bf4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bf4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf50:	b35a      	cbz	r2, 800bfaa <_strtod_l+0x8ca>
 800bf52:	4a9f      	ldr	r2, [pc, #636]	@ (800c1d0 <_strtod_l+0xaf0>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d12b      	bne.n	800bfb0 <_strtod_l+0x8d0>
 800bf58:	9b08      	ldr	r3, [sp, #32]
 800bf5a:	4651      	mov	r1, sl
 800bf5c:	b303      	cbz	r3, 800bfa0 <_strtod_l+0x8c0>
 800bf5e:	4b9d      	ldr	r3, [pc, #628]	@ (800c1d4 <_strtod_l+0xaf4>)
 800bf60:	465a      	mov	r2, fp
 800bf62:	4013      	ands	r3, r2
 800bf64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bf68:	f04f 32ff 	mov.w	r2, #4294967295
 800bf6c:	d81b      	bhi.n	800bfa6 <_strtod_l+0x8c6>
 800bf6e:	0d1b      	lsrs	r3, r3, #20
 800bf70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bf74:	fa02 f303 	lsl.w	r3, r2, r3
 800bf78:	4299      	cmp	r1, r3
 800bf7a:	d119      	bne.n	800bfb0 <_strtod_l+0x8d0>
 800bf7c:	4b96      	ldr	r3, [pc, #600]	@ (800c1d8 <_strtod_l+0xaf8>)
 800bf7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d102      	bne.n	800bf8a <_strtod_l+0x8aa>
 800bf84:	3101      	adds	r1, #1
 800bf86:	f43f adce 	beq.w	800bb26 <_strtod_l+0x446>
 800bf8a:	4b92      	ldr	r3, [pc, #584]	@ (800c1d4 <_strtod_l+0xaf4>)
 800bf8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf8e:	401a      	ands	r2, r3
 800bf90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bf94:	f04f 0a00 	mov.w	sl, #0
 800bf98:	9b08      	ldr	r3, [sp, #32]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1b9      	bne.n	800bf12 <_strtod_l+0x832>
 800bf9e:	e5cd      	b.n	800bb3c <_strtod_l+0x45c>
 800bfa0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa4:	e7e8      	b.n	800bf78 <_strtod_l+0x898>
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	e7e6      	b.n	800bf78 <_strtod_l+0x898>
 800bfaa:	ea53 030a 	orrs.w	r3, r3, sl
 800bfae:	d0a2      	beq.n	800bef6 <_strtod_l+0x816>
 800bfb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bfb2:	b1db      	cbz	r3, 800bfec <_strtod_l+0x90c>
 800bfb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bfb6:	4213      	tst	r3, r2
 800bfb8:	d0ee      	beq.n	800bf98 <_strtod_l+0x8b8>
 800bfba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfbc:	9a08      	ldr	r2, [sp, #32]
 800bfbe:	4650      	mov	r0, sl
 800bfc0:	4659      	mov	r1, fp
 800bfc2:	b1bb      	cbz	r3, 800bff4 <_strtod_l+0x914>
 800bfc4:	f7ff fb6c 	bl	800b6a0 <sulp>
 800bfc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfcc:	ec53 2b10 	vmov	r2, r3, d0
 800bfd0:	f7f4 f96c 	bl	80002ac <__adddf3>
 800bfd4:	4682      	mov	sl, r0
 800bfd6:	468b      	mov	fp, r1
 800bfd8:	e7de      	b.n	800bf98 <_strtod_l+0x8b8>
 800bfda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bfde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bfe2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bfe6:	f04f 3aff 	mov.w	sl, #4294967295
 800bfea:	e7d5      	b.n	800bf98 <_strtod_l+0x8b8>
 800bfec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bfee:	ea13 0f0a 	tst.w	r3, sl
 800bff2:	e7e1      	b.n	800bfb8 <_strtod_l+0x8d8>
 800bff4:	f7ff fb54 	bl	800b6a0 <sulp>
 800bff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bffc:	ec53 2b10 	vmov	r2, r3, d0
 800c000:	f7f4 f952 	bl	80002a8 <__aeabi_dsub>
 800c004:	2200      	movs	r2, #0
 800c006:	2300      	movs	r3, #0
 800c008:	4682      	mov	sl, r0
 800c00a:	468b      	mov	fp, r1
 800c00c:	f7f4 fd6c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c010:	2800      	cmp	r0, #0
 800c012:	d0c1      	beq.n	800bf98 <_strtod_l+0x8b8>
 800c014:	e61a      	b.n	800bc4c <_strtod_l+0x56c>
 800c016:	4641      	mov	r1, r8
 800c018:	4620      	mov	r0, r4
 800c01a:	f003 f9d1 	bl	800f3c0 <__ratio>
 800c01e:	ec57 6b10 	vmov	r6, r7, d0
 800c022:	2200      	movs	r2, #0
 800c024:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c028:	4630      	mov	r0, r6
 800c02a:	4639      	mov	r1, r7
 800c02c:	f7f4 fd70 	bl	8000b10 <__aeabi_dcmple>
 800c030:	2800      	cmp	r0, #0
 800c032:	d06f      	beq.n	800c114 <_strtod_l+0xa34>
 800c034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c036:	2b00      	cmp	r3, #0
 800c038:	d17a      	bne.n	800c130 <_strtod_l+0xa50>
 800c03a:	f1ba 0f00 	cmp.w	sl, #0
 800c03e:	d158      	bne.n	800c0f2 <_strtod_l+0xa12>
 800c040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c042:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c046:	2b00      	cmp	r3, #0
 800c048:	d15a      	bne.n	800c100 <_strtod_l+0xa20>
 800c04a:	4b64      	ldr	r3, [pc, #400]	@ (800c1dc <_strtod_l+0xafc>)
 800c04c:	2200      	movs	r2, #0
 800c04e:	4630      	mov	r0, r6
 800c050:	4639      	mov	r1, r7
 800c052:	f7f4 fd53 	bl	8000afc <__aeabi_dcmplt>
 800c056:	2800      	cmp	r0, #0
 800c058:	d159      	bne.n	800c10e <_strtod_l+0xa2e>
 800c05a:	4630      	mov	r0, r6
 800c05c:	4639      	mov	r1, r7
 800c05e:	4b60      	ldr	r3, [pc, #384]	@ (800c1e0 <_strtod_l+0xb00>)
 800c060:	2200      	movs	r2, #0
 800c062:	f7f4 fad9 	bl	8000618 <__aeabi_dmul>
 800c066:	4606      	mov	r6, r0
 800c068:	460f      	mov	r7, r1
 800c06a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c06e:	9606      	str	r6, [sp, #24]
 800c070:	9307      	str	r3, [sp, #28]
 800c072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c076:	4d57      	ldr	r5, [pc, #348]	@ (800c1d4 <_strtod_l+0xaf4>)
 800c078:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c07c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c07e:	401d      	ands	r5, r3
 800c080:	4b58      	ldr	r3, [pc, #352]	@ (800c1e4 <_strtod_l+0xb04>)
 800c082:	429d      	cmp	r5, r3
 800c084:	f040 80b2 	bne.w	800c1ec <_strtod_l+0xb0c>
 800c088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c08a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c08e:	ec4b ab10 	vmov	d0, sl, fp
 800c092:	f003 f8cd 	bl	800f230 <__ulp>
 800c096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c09a:	ec51 0b10 	vmov	r0, r1, d0
 800c09e:	f7f4 fabb 	bl	8000618 <__aeabi_dmul>
 800c0a2:	4652      	mov	r2, sl
 800c0a4:	465b      	mov	r3, fp
 800c0a6:	f7f4 f901 	bl	80002ac <__adddf3>
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4949      	ldr	r1, [pc, #292]	@ (800c1d4 <_strtod_l+0xaf4>)
 800c0ae:	4a4e      	ldr	r2, [pc, #312]	@ (800c1e8 <_strtod_l+0xb08>)
 800c0b0:	4019      	ands	r1, r3
 800c0b2:	4291      	cmp	r1, r2
 800c0b4:	4682      	mov	sl, r0
 800c0b6:	d942      	bls.n	800c13e <_strtod_l+0xa5e>
 800c0b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c0ba:	4b47      	ldr	r3, [pc, #284]	@ (800c1d8 <_strtod_l+0xaf8>)
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d103      	bne.n	800c0c8 <_strtod_l+0x9e8>
 800c0c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	f43f ad2f 	beq.w	800bb26 <_strtod_l+0x446>
 800c0c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c1d8 <_strtod_l+0xaf8>
 800c0cc:	f04f 3aff 	mov.w	sl, #4294967295
 800c0d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c0d2:	9805      	ldr	r0, [sp, #20]
 800c0d4:	f002 fd80 	bl	800ebd8 <_Bfree>
 800c0d8:	9805      	ldr	r0, [sp, #20]
 800c0da:	4649      	mov	r1, r9
 800c0dc:	f002 fd7c 	bl	800ebd8 <_Bfree>
 800c0e0:	9805      	ldr	r0, [sp, #20]
 800c0e2:	4641      	mov	r1, r8
 800c0e4:	f002 fd78 	bl	800ebd8 <_Bfree>
 800c0e8:	9805      	ldr	r0, [sp, #20]
 800c0ea:	4621      	mov	r1, r4
 800c0ec:	f002 fd74 	bl	800ebd8 <_Bfree>
 800c0f0:	e619      	b.n	800bd26 <_strtod_l+0x646>
 800c0f2:	f1ba 0f01 	cmp.w	sl, #1
 800c0f6:	d103      	bne.n	800c100 <_strtod_l+0xa20>
 800c0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f43f ada6 	beq.w	800bc4c <_strtod_l+0x56c>
 800c100:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c1b0 <_strtod_l+0xad0>
 800c104:	4f35      	ldr	r7, [pc, #212]	@ (800c1dc <_strtod_l+0xafc>)
 800c106:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c10a:	2600      	movs	r6, #0
 800c10c:	e7b1      	b.n	800c072 <_strtod_l+0x992>
 800c10e:	4f34      	ldr	r7, [pc, #208]	@ (800c1e0 <_strtod_l+0xb00>)
 800c110:	2600      	movs	r6, #0
 800c112:	e7aa      	b.n	800c06a <_strtod_l+0x98a>
 800c114:	4b32      	ldr	r3, [pc, #200]	@ (800c1e0 <_strtod_l+0xb00>)
 800c116:	4630      	mov	r0, r6
 800c118:	4639      	mov	r1, r7
 800c11a:	2200      	movs	r2, #0
 800c11c:	f7f4 fa7c 	bl	8000618 <__aeabi_dmul>
 800c120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c122:	4606      	mov	r6, r0
 800c124:	460f      	mov	r7, r1
 800c126:	2b00      	cmp	r3, #0
 800c128:	d09f      	beq.n	800c06a <_strtod_l+0x98a>
 800c12a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c12e:	e7a0      	b.n	800c072 <_strtod_l+0x992>
 800c130:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c1b8 <_strtod_l+0xad8>
 800c134:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c138:	ec57 6b17 	vmov	r6, r7, d7
 800c13c:	e799      	b.n	800c072 <_strtod_l+0x992>
 800c13e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c142:	9b08      	ldr	r3, [sp, #32]
 800c144:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d1c1      	bne.n	800c0d0 <_strtod_l+0x9f0>
 800c14c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c150:	0d1b      	lsrs	r3, r3, #20
 800c152:	051b      	lsls	r3, r3, #20
 800c154:	429d      	cmp	r5, r3
 800c156:	d1bb      	bne.n	800c0d0 <_strtod_l+0x9f0>
 800c158:	4630      	mov	r0, r6
 800c15a:	4639      	mov	r1, r7
 800c15c:	f7f4 fdbc 	bl	8000cd8 <__aeabi_d2lz>
 800c160:	f7f4 fa2c 	bl	80005bc <__aeabi_l2d>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4630      	mov	r0, r6
 800c16a:	4639      	mov	r1, r7
 800c16c:	f7f4 f89c 	bl	80002a8 <__aeabi_dsub>
 800c170:	460b      	mov	r3, r1
 800c172:	4602      	mov	r2, r0
 800c174:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c178:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c17e:	ea46 060a 	orr.w	r6, r6, sl
 800c182:	431e      	orrs	r6, r3
 800c184:	d06f      	beq.n	800c266 <_strtod_l+0xb86>
 800c186:	a30e      	add	r3, pc, #56	@ (adr r3, 800c1c0 <_strtod_l+0xae0>)
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	f7f4 fcb6 	bl	8000afc <__aeabi_dcmplt>
 800c190:	2800      	cmp	r0, #0
 800c192:	f47f acd3 	bne.w	800bb3c <_strtod_l+0x45c>
 800c196:	a30c      	add	r3, pc, #48	@ (adr r3, 800c1c8 <_strtod_l+0xae8>)
 800c198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1a0:	f7f4 fcca 	bl	8000b38 <__aeabi_dcmpgt>
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	d093      	beq.n	800c0d0 <_strtod_l+0x9f0>
 800c1a8:	e4c8      	b.n	800bb3c <_strtod_l+0x45c>
 800c1aa:	bf00      	nop
 800c1ac:	f3af 8000 	nop.w
 800c1b0:	00000000 	.word	0x00000000
 800c1b4:	bff00000 	.word	0xbff00000
 800c1b8:	00000000 	.word	0x00000000
 800c1bc:	3ff00000 	.word	0x3ff00000
 800c1c0:	94a03595 	.word	0x94a03595
 800c1c4:	3fdfffff 	.word	0x3fdfffff
 800c1c8:	35afe535 	.word	0x35afe535
 800c1cc:	3fe00000 	.word	0x3fe00000
 800c1d0:	000fffff 	.word	0x000fffff
 800c1d4:	7ff00000 	.word	0x7ff00000
 800c1d8:	7fefffff 	.word	0x7fefffff
 800c1dc:	3ff00000 	.word	0x3ff00000
 800c1e0:	3fe00000 	.word	0x3fe00000
 800c1e4:	7fe00000 	.word	0x7fe00000
 800c1e8:	7c9fffff 	.word	0x7c9fffff
 800c1ec:	9b08      	ldr	r3, [sp, #32]
 800c1ee:	b323      	cbz	r3, 800c23a <_strtod_l+0xb5a>
 800c1f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c1f4:	d821      	bhi.n	800c23a <_strtod_l+0xb5a>
 800c1f6:	a328      	add	r3, pc, #160	@ (adr r3, 800c298 <_strtod_l+0xbb8>)
 800c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	4639      	mov	r1, r7
 800c200:	f7f4 fc86 	bl	8000b10 <__aeabi_dcmple>
 800c204:	b1a0      	cbz	r0, 800c230 <_strtod_l+0xb50>
 800c206:	4639      	mov	r1, r7
 800c208:	4630      	mov	r0, r6
 800c20a:	f7f4 fcdd 	bl	8000bc8 <__aeabi_d2uiz>
 800c20e:	2801      	cmp	r0, #1
 800c210:	bf38      	it	cc
 800c212:	2001      	movcc	r0, #1
 800c214:	f7f4 f986 	bl	8000524 <__aeabi_ui2d>
 800c218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c21a:	4606      	mov	r6, r0
 800c21c:	460f      	mov	r7, r1
 800c21e:	b9fb      	cbnz	r3, 800c260 <_strtod_l+0xb80>
 800c220:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c224:	9014      	str	r0, [sp, #80]	@ 0x50
 800c226:	9315      	str	r3, [sp, #84]	@ 0x54
 800c228:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c22c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c230:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c232:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c236:	1b5b      	subs	r3, r3, r5
 800c238:	9311      	str	r3, [sp, #68]	@ 0x44
 800c23a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c23e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c242:	f002 fff5 	bl	800f230 <__ulp>
 800c246:	4650      	mov	r0, sl
 800c248:	ec53 2b10 	vmov	r2, r3, d0
 800c24c:	4659      	mov	r1, fp
 800c24e:	f7f4 f9e3 	bl	8000618 <__aeabi_dmul>
 800c252:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c256:	f7f4 f829 	bl	80002ac <__adddf3>
 800c25a:	4682      	mov	sl, r0
 800c25c:	468b      	mov	fp, r1
 800c25e:	e770      	b.n	800c142 <_strtod_l+0xa62>
 800c260:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c264:	e7e0      	b.n	800c228 <_strtod_l+0xb48>
 800c266:	a30e      	add	r3, pc, #56	@ (adr r3, 800c2a0 <_strtod_l+0xbc0>)
 800c268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26c:	f7f4 fc46 	bl	8000afc <__aeabi_dcmplt>
 800c270:	e798      	b.n	800c1a4 <_strtod_l+0xac4>
 800c272:	2300      	movs	r3, #0
 800c274:	930e      	str	r3, [sp, #56]	@ 0x38
 800c276:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c27a:	6013      	str	r3, [r2, #0]
 800c27c:	f7ff ba6d 	b.w	800b75a <_strtod_l+0x7a>
 800c280:	2a65      	cmp	r2, #101	@ 0x65
 800c282:	f43f ab68 	beq.w	800b956 <_strtod_l+0x276>
 800c286:	2a45      	cmp	r2, #69	@ 0x45
 800c288:	f43f ab65 	beq.w	800b956 <_strtod_l+0x276>
 800c28c:	2301      	movs	r3, #1
 800c28e:	f7ff bba0 	b.w	800b9d2 <_strtod_l+0x2f2>
 800c292:	bf00      	nop
 800c294:	f3af 8000 	nop.w
 800c298:	ffc00000 	.word	0xffc00000
 800c29c:	41dfffff 	.word	0x41dfffff
 800c2a0:	94a03595 	.word	0x94a03595
 800c2a4:	3fcfffff 	.word	0x3fcfffff

0800c2a8 <_strtod_r>:
 800c2a8:	4b01      	ldr	r3, [pc, #4]	@ (800c2b0 <_strtod_r+0x8>)
 800c2aa:	f7ff ba19 	b.w	800b6e0 <_strtod_l>
 800c2ae:	bf00      	nop
 800c2b0:	2000010c 	.word	0x2000010c

0800c2b4 <strtod>:
 800c2b4:	460a      	mov	r2, r1
 800c2b6:	4601      	mov	r1, r0
 800c2b8:	4802      	ldr	r0, [pc, #8]	@ (800c2c4 <strtod+0x10>)
 800c2ba:	4b03      	ldr	r3, [pc, #12]	@ (800c2c8 <strtod+0x14>)
 800c2bc:	6800      	ldr	r0, [r0, #0]
 800c2be:	f7ff ba0f 	b.w	800b6e0 <_strtod_l>
 800c2c2:	bf00      	nop
 800c2c4:	20000278 	.word	0x20000278
 800c2c8:	2000010c 	.word	0x2000010c

0800c2cc <_strtol_l.isra.0>:
 800c2cc:	2b24      	cmp	r3, #36	@ 0x24
 800c2ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d2:	4686      	mov	lr, r0
 800c2d4:	4690      	mov	r8, r2
 800c2d6:	d801      	bhi.n	800c2dc <_strtol_l.isra.0+0x10>
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d106      	bne.n	800c2ea <_strtol_l.isra.0+0x1e>
 800c2dc:	f001 f930 	bl	800d540 <__errno>
 800c2e0:	2316      	movs	r3, #22
 800c2e2:	6003      	str	r3, [r0, #0]
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ea:	4834      	ldr	r0, [pc, #208]	@ (800c3bc <_strtol_l.isra.0+0xf0>)
 800c2ec:	460d      	mov	r5, r1
 800c2ee:	462a      	mov	r2, r5
 800c2f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2f4:	5d06      	ldrb	r6, [r0, r4]
 800c2f6:	f016 0608 	ands.w	r6, r6, #8
 800c2fa:	d1f8      	bne.n	800c2ee <_strtol_l.isra.0+0x22>
 800c2fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800c2fe:	d110      	bne.n	800c322 <_strtol_l.isra.0+0x56>
 800c300:	782c      	ldrb	r4, [r5, #0]
 800c302:	2601      	movs	r6, #1
 800c304:	1c95      	adds	r5, r2, #2
 800c306:	f033 0210 	bics.w	r2, r3, #16
 800c30a:	d115      	bne.n	800c338 <_strtol_l.isra.0+0x6c>
 800c30c:	2c30      	cmp	r4, #48	@ 0x30
 800c30e:	d10d      	bne.n	800c32c <_strtol_l.isra.0+0x60>
 800c310:	782a      	ldrb	r2, [r5, #0]
 800c312:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c316:	2a58      	cmp	r2, #88	@ 0x58
 800c318:	d108      	bne.n	800c32c <_strtol_l.isra.0+0x60>
 800c31a:	786c      	ldrb	r4, [r5, #1]
 800c31c:	3502      	adds	r5, #2
 800c31e:	2310      	movs	r3, #16
 800c320:	e00a      	b.n	800c338 <_strtol_l.isra.0+0x6c>
 800c322:	2c2b      	cmp	r4, #43	@ 0x2b
 800c324:	bf04      	itt	eq
 800c326:	782c      	ldrbeq	r4, [r5, #0]
 800c328:	1c95      	addeq	r5, r2, #2
 800c32a:	e7ec      	b.n	800c306 <_strtol_l.isra.0+0x3a>
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d1f6      	bne.n	800c31e <_strtol_l.isra.0+0x52>
 800c330:	2c30      	cmp	r4, #48	@ 0x30
 800c332:	bf14      	ite	ne
 800c334:	230a      	movne	r3, #10
 800c336:	2308      	moveq	r3, #8
 800c338:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c33c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c340:	2200      	movs	r2, #0
 800c342:	fbbc f9f3 	udiv	r9, ip, r3
 800c346:	4610      	mov	r0, r2
 800c348:	fb03 ca19 	mls	sl, r3, r9, ip
 800c34c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c350:	2f09      	cmp	r7, #9
 800c352:	d80f      	bhi.n	800c374 <_strtol_l.isra.0+0xa8>
 800c354:	463c      	mov	r4, r7
 800c356:	42a3      	cmp	r3, r4
 800c358:	dd1b      	ble.n	800c392 <_strtol_l.isra.0+0xc6>
 800c35a:	1c57      	adds	r7, r2, #1
 800c35c:	d007      	beq.n	800c36e <_strtol_l.isra.0+0xa2>
 800c35e:	4581      	cmp	r9, r0
 800c360:	d314      	bcc.n	800c38c <_strtol_l.isra.0+0xc0>
 800c362:	d101      	bne.n	800c368 <_strtol_l.isra.0+0x9c>
 800c364:	45a2      	cmp	sl, r4
 800c366:	db11      	blt.n	800c38c <_strtol_l.isra.0+0xc0>
 800c368:	fb00 4003 	mla	r0, r0, r3, r4
 800c36c:	2201      	movs	r2, #1
 800c36e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c372:	e7eb      	b.n	800c34c <_strtol_l.isra.0+0x80>
 800c374:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c378:	2f19      	cmp	r7, #25
 800c37a:	d801      	bhi.n	800c380 <_strtol_l.isra.0+0xb4>
 800c37c:	3c37      	subs	r4, #55	@ 0x37
 800c37e:	e7ea      	b.n	800c356 <_strtol_l.isra.0+0x8a>
 800c380:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c384:	2f19      	cmp	r7, #25
 800c386:	d804      	bhi.n	800c392 <_strtol_l.isra.0+0xc6>
 800c388:	3c57      	subs	r4, #87	@ 0x57
 800c38a:	e7e4      	b.n	800c356 <_strtol_l.isra.0+0x8a>
 800c38c:	f04f 32ff 	mov.w	r2, #4294967295
 800c390:	e7ed      	b.n	800c36e <_strtol_l.isra.0+0xa2>
 800c392:	1c53      	adds	r3, r2, #1
 800c394:	d108      	bne.n	800c3a8 <_strtol_l.isra.0+0xdc>
 800c396:	2322      	movs	r3, #34	@ 0x22
 800c398:	f8ce 3000 	str.w	r3, [lr]
 800c39c:	4660      	mov	r0, ip
 800c39e:	f1b8 0f00 	cmp.w	r8, #0
 800c3a2:	d0a0      	beq.n	800c2e6 <_strtol_l.isra.0+0x1a>
 800c3a4:	1e69      	subs	r1, r5, #1
 800c3a6:	e006      	b.n	800c3b6 <_strtol_l.isra.0+0xea>
 800c3a8:	b106      	cbz	r6, 800c3ac <_strtol_l.isra.0+0xe0>
 800c3aa:	4240      	negs	r0, r0
 800c3ac:	f1b8 0f00 	cmp.w	r8, #0
 800c3b0:	d099      	beq.n	800c2e6 <_strtol_l.isra.0+0x1a>
 800c3b2:	2a00      	cmp	r2, #0
 800c3b4:	d1f6      	bne.n	800c3a4 <_strtol_l.isra.0+0xd8>
 800c3b6:	f8c8 1000 	str.w	r1, [r8]
 800c3ba:	e794      	b.n	800c2e6 <_strtol_l.isra.0+0x1a>
 800c3bc:	08015199 	.word	0x08015199

0800c3c0 <_strtol_r>:
 800c3c0:	f7ff bf84 	b.w	800c2cc <_strtol_l.isra.0>

0800c3c4 <strtol>:
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	460a      	mov	r2, r1
 800c3c8:	4601      	mov	r1, r0
 800c3ca:	4802      	ldr	r0, [pc, #8]	@ (800c3d4 <strtol+0x10>)
 800c3cc:	6800      	ldr	r0, [r0, #0]
 800c3ce:	f7ff bf7d 	b.w	800c2cc <_strtol_l.isra.0>
 800c3d2:	bf00      	nop
 800c3d4:	20000278 	.word	0x20000278

0800c3d8 <__cvt>:
 800c3d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3dc:	ec57 6b10 	vmov	r6, r7, d0
 800c3e0:	2f00      	cmp	r7, #0
 800c3e2:	460c      	mov	r4, r1
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	463b      	mov	r3, r7
 800c3e8:	bfbb      	ittet	lt
 800c3ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c3ee:	461f      	movlt	r7, r3
 800c3f0:	2300      	movge	r3, #0
 800c3f2:	232d      	movlt	r3, #45	@ 0x2d
 800c3f4:	700b      	strb	r3, [r1, #0]
 800c3f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c3fc:	4691      	mov	r9, r2
 800c3fe:	f023 0820 	bic.w	r8, r3, #32
 800c402:	bfbc      	itt	lt
 800c404:	4632      	movlt	r2, r6
 800c406:	4616      	movlt	r6, r2
 800c408:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c40c:	d005      	beq.n	800c41a <__cvt+0x42>
 800c40e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c412:	d100      	bne.n	800c416 <__cvt+0x3e>
 800c414:	3401      	adds	r4, #1
 800c416:	2102      	movs	r1, #2
 800c418:	e000      	b.n	800c41c <__cvt+0x44>
 800c41a:	2103      	movs	r1, #3
 800c41c:	ab03      	add	r3, sp, #12
 800c41e:	9301      	str	r3, [sp, #4]
 800c420:	ab02      	add	r3, sp, #8
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	ec47 6b10 	vmov	d0, r6, r7
 800c428:	4653      	mov	r3, sl
 800c42a:	4622      	mov	r2, r4
 800c42c:	f001 f978 	bl	800d720 <_dtoa_r>
 800c430:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c434:	4605      	mov	r5, r0
 800c436:	d119      	bne.n	800c46c <__cvt+0x94>
 800c438:	f019 0f01 	tst.w	r9, #1
 800c43c:	d00e      	beq.n	800c45c <__cvt+0x84>
 800c43e:	eb00 0904 	add.w	r9, r0, r4
 800c442:	2200      	movs	r2, #0
 800c444:	2300      	movs	r3, #0
 800c446:	4630      	mov	r0, r6
 800c448:	4639      	mov	r1, r7
 800c44a:	f7f4 fb4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800c44e:	b108      	cbz	r0, 800c454 <__cvt+0x7c>
 800c450:	f8cd 900c 	str.w	r9, [sp, #12]
 800c454:	2230      	movs	r2, #48	@ 0x30
 800c456:	9b03      	ldr	r3, [sp, #12]
 800c458:	454b      	cmp	r3, r9
 800c45a:	d31e      	bcc.n	800c49a <__cvt+0xc2>
 800c45c:	9b03      	ldr	r3, [sp, #12]
 800c45e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c460:	1b5b      	subs	r3, r3, r5
 800c462:	4628      	mov	r0, r5
 800c464:	6013      	str	r3, [r2, #0]
 800c466:	b004      	add	sp, #16
 800c468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c46c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c470:	eb00 0904 	add.w	r9, r0, r4
 800c474:	d1e5      	bne.n	800c442 <__cvt+0x6a>
 800c476:	7803      	ldrb	r3, [r0, #0]
 800c478:	2b30      	cmp	r3, #48	@ 0x30
 800c47a:	d10a      	bne.n	800c492 <__cvt+0xba>
 800c47c:	2200      	movs	r2, #0
 800c47e:	2300      	movs	r3, #0
 800c480:	4630      	mov	r0, r6
 800c482:	4639      	mov	r1, r7
 800c484:	f7f4 fb30 	bl	8000ae8 <__aeabi_dcmpeq>
 800c488:	b918      	cbnz	r0, 800c492 <__cvt+0xba>
 800c48a:	f1c4 0401 	rsb	r4, r4, #1
 800c48e:	f8ca 4000 	str.w	r4, [sl]
 800c492:	f8da 3000 	ldr.w	r3, [sl]
 800c496:	4499      	add	r9, r3
 800c498:	e7d3      	b.n	800c442 <__cvt+0x6a>
 800c49a:	1c59      	adds	r1, r3, #1
 800c49c:	9103      	str	r1, [sp, #12]
 800c49e:	701a      	strb	r2, [r3, #0]
 800c4a0:	e7d9      	b.n	800c456 <__cvt+0x7e>

0800c4a2 <__exponent>:
 800c4a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4a4:	2900      	cmp	r1, #0
 800c4a6:	bfba      	itte	lt
 800c4a8:	4249      	neglt	r1, r1
 800c4aa:	232d      	movlt	r3, #45	@ 0x2d
 800c4ac:	232b      	movge	r3, #43	@ 0x2b
 800c4ae:	2909      	cmp	r1, #9
 800c4b0:	7002      	strb	r2, [r0, #0]
 800c4b2:	7043      	strb	r3, [r0, #1]
 800c4b4:	dd29      	ble.n	800c50a <__exponent+0x68>
 800c4b6:	f10d 0307 	add.w	r3, sp, #7
 800c4ba:	461d      	mov	r5, r3
 800c4bc:	270a      	movs	r7, #10
 800c4be:	461a      	mov	r2, r3
 800c4c0:	fbb1 f6f7 	udiv	r6, r1, r7
 800c4c4:	fb07 1416 	mls	r4, r7, r6, r1
 800c4c8:	3430      	adds	r4, #48	@ 0x30
 800c4ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c4ce:	460c      	mov	r4, r1
 800c4d0:	2c63      	cmp	r4, #99	@ 0x63
 800c4d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4d6:	4631      	mov	r1, r6
 800c4d8:	dcf1      	bgt.n	800c4be <__exponent+0x1c>
 800c4da:	3130      	adds	r1, #48	@ 0x30
 800c4dc:	1e94      	subs	r4, r2, #2
 800c4de:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c4e2:	1c41      	adds	r1, r0, #1
 800c4e4:	4623      	mov	r3, r4
 800c4e6:	42ab      	cmp	r3, r5
 800c4e8:	d30a      	bcc.n	800c500 <__exponent+0x5e>
 800c4ea:	f10d 0309 	add.w	r3, sp, #9
 800c4ee:	1a9b      	subs	r3, r3, r2
 800c4f0:	42ac      	cmp	r4, r5
 800c4f2:	bf88      	it	hi
 800c4f4:	2300      	movhi	r3, #0
 800c4f6:	3302      	adds	r3, #2
 800c4f8:	4403      	add	r3, r0
 800c4fa:	1a18      	subs	r0, r3, r0
 800c4fc:	b003      	add	sp, #12
 800c4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c500:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c504:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c508:	e7ed      	b.n	800c4e6 <__exponent+0x44>
 800c50a:	2330      	movs	r3, #48	@ 0x30
 800c50c:	3130      	adds	r1, #48	@ 0x30
 800c50e:	7083      	strb	r3, [r0, #2]
 800c510:	70c1      	strb	r1, [r0, #3]
 800c512:	1d03      	adds	r3, r0, #4
 800c514:	e7f1      	b.n	800c4fa <__exponent+0x58>
	...

0800c518 <_printf_float>:
 800c518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51c:	b08d      	sub	sp, #52	@ 0x34
 800c51e:	460c      	mov	r4, r1
 800c520:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c524:	4616      	mov	r6, r2
 800c526:	461f      	mov	r7, r3
 800c528:	4605      	mov	r5, r0
 800c52a:	f000 ffbf 	bl	800d4ac <_localeconv_r>
 800c52e:	6803      	ldr	r3, [r0, #0]
 800c530:	9304      	str	r3, [sp, #16]
 800c532:	4618      	mov	r0, r3
 800c534:	f7f3 feac 	bl	8000290 <strlen>
 800c538:	2300      	movs	r3, #0
 800c53a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c53c:	f8d8 3000 	ldr.w	r3, [r8]
 800c540:	9005      	str	r0, [sp, #20]
 800c542:	3307      	adds	r3, #7
 800c544:	f023 0307 	bic.w	r3, r3, #7
 800c548:	f103 0208 	add.w	r2, r3, #8
 800c54c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c550:	f8d4 b000 	ldr.w	fp, [r4]
 800c554:	f8c8 2000 	str.w	r2, [r8]
 800c558:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c55c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c560:	9307      	str	r3, [sp, #28]
 800c562:	f8cd 8018 	str.w	r8, [sp, #24]
 800c566:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c56a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c56e:	4b9c      	ldr	r3, [pc, #624]	@ (800c7e0 <_printf_float+0x2c8>)
 800c570:	f04f 32ff 	mov.w	r2, #4294967295
 800c574:	f7f4 faea 	bl	8000b4c <__aeabi_dcmpun>
 800c578:	bb70      	cbnz	r0, 800c5d8 <_printf_float+0xc0>
 800c57a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c57e:	4b98      	ldr	r3, [pc, #608]	@ (800c7e0 <_printf_float+0x2c8>)
 800c580:	f04f 32ff 	mov.w	r2, #4294967295
 800c584:	f7f4 fac4 	bl	8000b10 <__aeabi_dcmple>
 800c588:	bb30      	cbnz	r0, 800c5d8 <_printf_float+0xc0>
 800c58a:	2200      	movs	r2, #0
 800c58c:	2300      	movs	r3, #0
 800c58e:	4640      	mov	r0, r8
 800c590:	4649      	mov	r1, r9
 800c592:	f7f4 fab3 	bl	8000afc <__aeabi_dcmplt>
 800c596:	b110      	cbz	r0, 800c59e <_printf_float+0x86>
 800c598:	232d      	movs	r3, #45	@ 0x2d
 800c59a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c59e:	4a91      	ldr	r2, [pc, #580]	@ (800c7e4 <_printf_float+0x2cc>)
 800c5a0:	4b91      	ldr	r3, [pc, #580]	@ (800c7e8 <_printf_float+0x2d0>)
 800c5a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c5a6:	bf8c      	ite	hi
 800c5a8:	4690      	movhi	r8, r2
 800c5aa:	4698      	movls	r8, r3
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	6123      	str	r3, [r4, #16]
 800c5b0:	f02b 0304 	bic.w	r3, fp, #4
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	f04f 0900 	mov.w	r9, #0
 800c5ba:	9700      	str	r7, [sp, #0]
 800c5bc:	4633      	mov	r3, r6
 800c5be:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c5c0:	4621      	mov	r1, r4
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	f000 f9d2 	bl	800c96c <_printf_common>
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	f040 808d 	bne.w	800c6e8 <_printf_float+0x1d0>
 800c5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d2:	b00d      	add	sp, #52	@ 0x34
 800c5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d8:	4642      	mov	r2, r8
 800c5da:	464b      	mov	r3, r9
 800c5dc:	4640      	mov	r0, r8
 800c5de:	4649      	mov	r1, r9
 800c5e0:	f7f4 fab4 	bl	8000b4c <__aeabi_dcmpun>
 800c5e4:	b140      	cbz	r0, 800c5f8 <_printf_float+0xe0>
 800c5e6:	464b      	mov	r3, r9
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	bfbc      	itt	lt
 800c5ec:	232d      	movlt	r3, #45	@ 0x2d
 800c5ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c5f2:	4a7e      	ldr	r2, [pc, #504]	@ (800c7ec <_printf_float+0x2d4>)
 800c5f4:	4b7e      	ldr	r3, [pc, #504]	@ (800c7f0 <_printf_float+0x2d8>)
 800c5f6:	e7d4      	b.n	800c5a2 <_printf_float+0x8a>
 800c5f8:	6863      	ldr	r3, [r4, #4]
 800c5fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c5fe:	9206      	str	r2, [sp, #24]
 800c600:	1c5a      	adds	r2, r3, #1
 800c602:	d13b      	bne.n	800c67c <_printf_float+0x164>
 800c604:	2306      	movs	r3, #6
 800c606:	6063      	str	r3, [r4, #4]
 800c608:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c60c:	2300      	movs	r3, #0
 800c60e:	6022      	str	r2, [r4, #0]
 800c610:	9303      	str	r3, [sp, #12]
 800c612:	ab0a      	add	r3, sp, #40	@ 0x28
 800c614:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c618:	ab09      	add	r3, sp, #36	@ 0x24
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	6861      	ldr	r1, [r4, #4]
 800c61e:	ec49 8b10 	vmov	d0, r8, r9
 800c622:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c626:	4628      	mov	r0, r5
 800c628:	f7ff fed6 	bl	800c3d8 <__cvt>
 800c62c:	9b06      	ldr	r3, [sp, #24]
 800c62e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c630:	2b47      	cmp	r3, #71	@ 0x47
 800c632:	4680      	mov	r8, r0
 800c634:	d129      	bne.n	800c68a <_printf_float+0x172>
 800c636:	1cc8      	adds	r0, r1, #3
 800c638:	db02      	blt.n	800c640 <_printf_float+0x128>
 800c63a:	6863      	ldr	r3, [r4, #4]
 800c63c:	4299      	cmp	r1, r3
 800c63e:	dd41      	ble.n	800c6c4 <_printf_float+0x1ac>
 800c640:	f1aa 0a02 	sub.w	sl, sl, #2
 800c644:	fa5f fa8a 	uxtb.w	sl, sl
 800c648:	3901      	subs	r1, #1
 800c64a:	4652      	mov	r2, sl
 800c64c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c650:	9109      	str	r1, [sp, #36]	@ 0x24
 800c652:	f7ff ff26 	bl	800c4a2 <__exponent>
 800c656:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c658:	1813      	adds	r3, r2, r0
 800c65a:	2a01      	cmp	r2, #1
 800c65c:	4681      	mov	r9, r0
 800c65e:	6123      	str	r3, [r4, #16]
 800c660:	dc02      	bgt.n	800c668 <_printf_float+0x150>
 800c662:	6822      	ldr	r2, [r4, #0]
 800c664:	07d2      	lsls	r2, r2, #31
 800c666:	d501      	bpl.n	800c66c <_printf_float+0x154>
 800c668:	3301      	adds	r3, #1
 800c66a:	6123      	str	r3, [r4, #16]
 800c66c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c670:	2b00      	cmp	r3, #0
 800c672:	d0a2      	beq.n	800c5ba <_printf_float+0xa2>
 800c674:	232d      	movs	r3, #45	@ 0x2d
 800c676:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c67a:	e79e      	b.n	800c5ba <_printf_float+0xa2>
 800c67c:	9a06      	ldr	r2, [sp, #24]
 800c67e:	2a47      	cmp	r2, #71	@ 0x47
 800c680:	d1c2      	bne.n	800c608 <_printf_float+0xf0>
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1c0      	bne.n	800c608 <_printf_float+0xf0>
 800c686:	2301      	movs	r3, #1
 800c688:	e7bd      	b.n	800c606 <_printf_float+0xee>
 800c68a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c68e:	d9db      	bls.n	800c648 <_printf_float+0x130>
 800c690:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c694:	d118      	bne.n	800c6c8 <_printf_float+0x1b0>
 800c696:	2900      	cmp	r1, #0
 800c698:	6863      	ldr	r3, [r4, #4]
 800c69a:	dd0b      	ble.n	800c6b4 <_printf_float+0x19c>
 800c69c:	6121      	str	r1, [r4, #16]
 800c69e:	b913      	cbnz	r3, 800c6a6 <_printf_float+0x18e>
 800c6a0:	6822      	ldr	r2, [r4, #0]
 800c6a2:	07d0      	lsls	r0, r2, #31
 800c6a4:	d502      	bpl.n	800c6ac <_printf_float+0x194>
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	440b      	add	r3, r1
 800c6aa:	6123      	str	r3, [r4, #16]
 800c6ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c6ae:	f04f 0900 	mov.w	r9, #0
 800c6b2:	e7db      	b.n	800c66c <_printf_float+0x154>
 800c6b4:	b913      	cbnz	r3, 800c6bc <_printf_float+0x1a4>
 800c6b6:	6822      	ldr	r2, [r4, #0]
 800c6b8:	07d2      	lsls	r2, r2, #31
 800c6ba:	d501      	bpl.n	800c6c0 <_printf_float+0x1a8>
 800c6bc:	3302      	adds	r3, #2
 800c6be:	e7f4      	b.n	800c6aa <_printf_float+0x192>
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e7f2      	b.n	800c6aa <_printf_float+0x192>
 800c6c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c6c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6ca:	4299      	cmp	r1, r3
 800c6cc:	db05      	blt.n	800c6da <_printf_float+0x1c2>
 800c6ce:	6823      	ldr	r3, [r4, #0]
 800c6d0:	6121      	str	r1, [r4, #16]
 800c6d2:	07d8      	lsls	r0, r3, #31
 800c6d4:	d5ea      	bpl.n	800c6ac <_printf_float+0x194>
 800c6d6:	1c4b      	adds	r3, r1, #1
 800c6d8:	e7e7      	b.n	800c6aa <_printf_float+0x192>
 800c6da:	2900      	cmp	r1, #0
 800c6dc:	bfd4      	ite	le
 800c6de:	f1c1 0202 	rsble	r2, r1, #2
 800c6e2:	2201      	movgt	r2, #1
 800c6e4:	4413      	add	r3, r2
 800c6e6:	e7e0      	b.n	800c6aa <_printf_float+0x192>
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	055a      	lsls	r2, r3, #21
 800c6ec:	d407      	bmi.n	800c6fe <_printf_float+0x1e6>
 800c6ee:	6923      	ldr	r3, [r4, #16]
 800c6f0:	4642      	mov	r2, r8
 800c6f2:	4631      	mov	r1, r6
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	47b8      	blx	r7
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	d12b      	bne.n	800c754 <_printf_float+0x23c>
 800c6fc:	e767      	b.n	800c5ce <_printf_float+0xb6>
 800c6fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c702:	f240 80dd 	bls.w	800c8c0 <_printf_float+0x3a8>
 800c706:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c70a:	2200      	movs	r2, #0
 800c70c:	2300      	movs	r3, #0
 800c70e:	f7f4 f9eb 	bl	8000ae8 <__aeabi_dcmpeq>
 800c712:	2800      	cmp	r0, #0
 800c714:	d033      	beq.n	800c77e <_printf_float+0x266>
 800c716:	4a37      	ldr	r2, [pc, #220]	@ (800c7f4 <_printf_float+0x2dc>)
 800c718:	2301      	movs	r3, #1
 800c71a:	4631      	mov	r1, r6
 800c71c:	4628      	mov	r0, r5
 800c71e:	47b8      	blx	r7
 800c720:	3001      	adds	r0, #1
 800c722:	f43f af54 	beq.w	800c5ce <_printf_float+0xb6>
 800c726:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c72a:	4543      	cmp	r3, r8
 800c72c:	db02      	blt.n	800c734 <_printf_float+0x21c>
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	07d8      	lsls	r0, r3, #31
 800c732:	d50f      	bpl.n	800c754 <_printf_float+0x23c>
 800c734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c738:	4631      	mov	r1, r6
 800c73a:	4628      	mov	r0, r5
 800c73c:	47b8      	blx	r7
 800c73e:	3001      	adds	r0, #1
 800c740:	f43f af45 	beq.w	800c5ce <_printf_float+0xb6>
 800c744:	f04f 0900 	mov.w	r9, #0
 800c748:	f108 38ff 	add.w	r8, r8, #4294967295
 800c74c:	f104 0a1a 	add.w	sl, r4, #26
 800c750:	45c8      	cmp	r8, r9
 800c752:	dc09      	bgt.n	800c768 <_printf_float+0x250>
 800c754:	6823      	ldr	r3, [r4, #0]
 800c756:	079b      	lsls	r3, r3, #30
 800c758:	f100 8103 	bmi.w	800c962 <_printf_float+0x44a>
 800c75c:	68e0      	ldr	r0, [r4, #12]
 800c75e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c760:	4298      	cmp	r0, r3
 800c762:	bfb8      	it	lt
 800c764:	4618      	movlt	r0, r3
 800c766:	e734      	b.n	800c5d2 <_printf_float+0xba>
 800c768:	2301      	movs	r3, #1
 800c76a:	4652      	mov	r2, sl
 800c76c:	4631      	mov	r1, r6
 800c76e:	4628      	mov	r0, r5
 800c770:	47b8      	blx	r7
 800c772:	3001      	adds	r0, #1
 800c774:	f43f af2b 	beq.w	800c5ce <_printf_float+0xb6>
 800c778:	f109 0901 	add.w	r9, r9, #1
 800c77c:	e7e8      	b.n	800c750 <_printf_float+0x238>
 800c77e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c780:	2b00      	cmp	r3, #0
 800c782:	dc39      	bgt.n	800c7f8 <_printf_float+0x2e0>
 800c784:	4a1b      	ldr	r2, [pc, #108]	@ (800c7f4 <_printf_float+0x2dc>)
 800c786:	2301      	movs	r3, #1
 800c788:	4631      	mov	r1, r6
 800c78a:	4628      	mov	r0, r5
 800c78c:	47b8      	blx	r7
 800c78e:	3001      	adds	r0, #1
 800c790:	f43f af1d 	beq.w	800c5ce <_printf_float+0xb6>
 800c794:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c798:	ea59 0303 	orrs.w	r3, r9, r3
 800c79c:	d102      	bne.n	800c7a4 <_printf_float+0x28c>
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	07d9      	lsls	r1, r3, #31
 800c7a2:	d5d7      	bpl.n	800c754 <_printf_float+0x23c>
 800c7a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7a8:	4631      	mov	r1, r6
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	47b8      	blx	r7
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	f43f af0d 	beq.w	800c5ce <_printf_float+0xb6>
 800c7b4:	f04f 0a00 	mov.w	sl, #0
 800c7b8:	f104 0b1a 	add.w	fp, r4, #26
 800c7bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7be:	425b      	negs	r3, r3
 800c7c0:	4553      	cmp	r3, sl
 800c7c2:	dc01      	bgt.n	800c7c8 <_printf_float+0x2b0>
 800c7c4:	464b      	mov	r3, r9
 800c7c6:	e793      	b.n	800c6f0 <_printf_float+0x1d8>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	465a      	mov	r2, fp
 800c7cc:	4631      	mov	r1, r6
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	47b8      	blx	r7
 800c7d2:	3001      	adds	r0, #1
 800c7d4:	f43f aefb 	beq.w	800c5ce <_printf_float+0xb6>
 800c7d8:	f10a 0a01 	add.w	sl, sl, #1
 800c7dc:	e7ee      	b.n	800c7bc <_printf_float+0x2a4>
 800c7de:	bf00      	nop
 800c7e0:	7fefffff 	.word	0x7fefffff
 800c7e4:	08014f35 	.word	0x08014f35
 800c7e8:	08014f31 	.word	0x08014f31
 800c7ec:	08014f3d 	.word	0x08014f3d
 800c7f0:	08014f39 	.word	0x08014f39
 800c7f4:	08014f41 	.word	0x08014f41
 800c7f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c7fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c7fe:	4553      	cmp	r3, sl
 800c800:	bfa8      	it	ge
 800c802:	4653      	movge	r3, sl
 800c804:	2b00      	cmp	r3, #0
 800c806:	4699      	mov	r9, r3
 800c808:	dc36      	bgt.n	800c878 <_printf_float+0x360>
 800c80a:	f04f 0b00 	mov.w	fp, #0
 800c80e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c812:	f104 021a 	add.w	r2, r4, #26
 800c816:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c818:	9306      	str	r3, [sp, #24]
 800c81a:	eba3 0309 	sub.w	r3, r3, r9
 800c81e:	455b      	cmp	r3, fp
 800c820:	dc31      	bgt.n	800c886 <_printf_float+0x36e>
 800c822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c824:	459a      	cmp	sl, r3
 800c826:	dc3a      	bgt.n	800c89e <_printf_float+0x386>
 800c828:	6823      	ldr	r3, [r4, #0]
 800c82a:	07da      	lsls	r2, r3, #31
 800c82c:	d437      	bmi.n	800c89e <_printf_float+0x386>
 800c82e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c830:	ebaa 0903 	sub.w	r9, sl, r3
 800c834:	9b06      	ldr	r3, [sp, #24]
 800c836:	ebaa 0303 	sub.w	r3, sl, r3
 800c83a:	4599      	cmp	r9, r3
 800c83c:	bfa8      	it	ge
 800c83e:	4699      	movge	r9, r3
 800c840:	f1b9 0f00 	cmp.w	r9, #0
 800c844:	dc33      	bgt.n	800c8ae <_printf_float+0x396>
 800c846:	f04f 0800 	mov.w	r8, #0
 800c84a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c84e:	f104 0b1a 	add.w	fp, r4, #26
 800c852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c854:	ebaa 0303 	sub.w	r3, sl, r3
 800c858:	eba3 0309 	sub.w	r3, r3, r9
 800c85c:	4543      	cmp	r3, r8
 800c85e:	f77f af79 	ble.w	800c754 <_printf_float+0x23c>
 800c862:	2301      	movs	r3, #1
 800c864:	465a      	mov	r2, fp
 800c866:	4631      	mov	r1, r6
 800c868:	4628      	mov	r0, r5
 800c86a:	47b8      	blx	r7
 800c86c:	3001      	adds	r0, #1
 800c86e:	f43f aeae 	beq.w	800c5ce <_printf_float+0xb6>
 800c872:	f108 0801 	add.w	r8, r8, #1
 800c876:	e7ec      	b.n	800c852 <_printf_float+0x33a>
 800c878:	4642      	mov	r2, r8
 800c87a:	4631      	mov	r1, r6
 800c87c:	4628      	mov	r0, r5
 800c87e:	47b8      	blx	r7
 800c880:	3001      	adds	r0, #1
 800c882:	d1c2      	bne.n	800c80a <_printf_float+0x2f2>
 800c884:	e6a3      	b.n	800c5ce <_printf_float+0xb6>
 800c886:	2301      	movs	r3, #1
 800c888:	4631      	mov	r1, r6
 800c88a:	4628      	mov	r0, r5
 800c88c:	9206      	str	r2, [sp, #24]
 800c88e:	47b8      	blx	r7
 800c890:	3001      	adds	r0, #1
 800c892:	f43f ae9c 	beq.w	800c5ce <_printf_float+0xb6>
 800c896:	9a06      	ldr	r2, [sp, #24]
 800c898:	f10b 0b01 	add.w	fp, fp, #1
 800c89c:	e7bb      	b.n	800c816 <_printf_float+0x2fe>
 800c89e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8a2:	4631      	mov	r1, r6
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	47b8      	blx	r7
 800c8a8:	3001      	adds	r0, #1
 800c8aa:	d1c0      	bne.n	800c82e <_printf_float+0x316>
 800c8ac:	e68f      	b.n	800c5ce <_printf_float+0xb6>
 800c8ae:	9a06      	ldr	r2, [sp, #24]
 800c8b0:	464b      	mov	r3, r9
 800c8b2:	4442      	add	r2, r8
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	47b8      	blx	r7
 800c8ba:	3001      	adds	r0, #1
 800c8bc:	d1c3      	bne.n	800c846 <_printf_float+0x32e>
 800c8be:	e686      	b.n	800c5ce <_printf_float+0xb6>
 800c8c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c8c4:	f1ba 0f01 	cmp.w	sl, #1
 800c8c8:	dc01      	bgt.n	800c8ce <_printf_float+0x3b6>
 800c8ca:	07db      	lsls	r3, r3, #31
 800c8cc:	d536      	bpl.n	800c93c <_printf_float+0x424>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	4642      	mov	r2, r8
 800c8d2:	4631      	mov	r1, r6
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	47b8      	blx	r7
 800c8d8:	3001      	adds	r0, #1
 800c8da:	f43f ae78 	beq.w	800c5ce <_printf_float+0xb6>
 800c8de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8e2:	4631      	mov	r1, r6
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	47b8      	blx	r7
 800c8e8:	3001      	adds	r0, #1
 800c8ea:	f43f ae70 	beq.w	800c5ce <_printf_float+0xb6>
 800c8ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8fa:	f7f4 f8f5 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8fe:	b9c0      	cbnz	r0, 800c932 <_printf_float+0x41a>
 800c900:	4653      	mov	r3, sl
 800c902:	f108 0201 	add.w	r2, r8, #1
 800c906:	4631      	mov	r1, r6
 800c908:	4628      	mov	r0, r5
 800c90a:	47b8      	blx	r7
 800c90c:	3001      	adds	r0, #1
 800c90e:	d10c      	bne.n	800c92a <_printf_float+0x412>
 800c910:	e65d      	b.n	800c5ce <_printf_float+0xb6>
 800c912:	2301      	movs	r3, #1
 800c914:	465a      	mov	r2, fp
 800c916:	4631      	mov	r1, r6
 800c918:	4628      	mov	r0, r5
 800c91a:	47b8      	blx	r7
 800c91c:	3001      	adds	r0, #1
 800c91e:	f43f ae56 	beq.w	800c5ce <_printf_float+0xb6>
 800c922:	f108 0801 	add.w	r8, r8, #1
 800c926:	45d0      	cmp	r8, sl
 800c928:	dbf3      	blt.n	800c912 <_printf_float+0x3fa>
 800c92a:	464b      	mov	r3, r9
 800c92c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c930:	e6df      	b.n	800c6f2 <_printf_float+0x1da>
 800c932:	f04f 0800 	mov.w	r8, #0
 800c936:	f104 0b1a 	add.w	fp, r4, #26
 800c93a:	e7f4      	b.n	800c926 <_printf_float+0x40e>
 800c93c:	2301      	movs	r3, #1
 800c93e:	4642      	mov	r2, r8
 800c940:	e7e1      	b.n	800c906 <_printf_float+0x3ee>
 800c942:	2301      	movs	r3, #1
 800c944:	464a      	mov	r2, r9
 800c946:	4631      	mov	r1, r6
 800c948:	4628      	mov	r0, r5
 800c94a:	47b8      	blx	r7
 800c94c:	3001      	adds	r0, #1
 800c94e:	f43f ae3e 	beq.w	800c5ce <_printf_float+0xb6>
 800c952:	f108 0801 	add.w	r8, r8, #1
 800c956:	68e3      	ldr	r3, [r4, #12]
 800c958:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c95a:	1a5b      	subs	r3, r3, r1
 800c95c:	4543      	cmp	r3, r8
 800c95e:	dcf0      	bgt.n	800c942 <_printf_float+0x42a>
 800c960:	e6fc      	b.n	800c75c <_printf_float+0x244>
 800c962:	f04f 0800 	mov.w	r8, #0
 800c966:	f104 0919 	add.w	r9, r4, #25
 800c96a:	e7f4      	b.n	800c956 <_printf_float+0x43e>

0800c96c <_printf_common>:
 800c96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c970:	4616      	mov	r6, r2
 800c972:	4698      	mov	r8, r3
 800c974:	688a      	ldr	r2, [r1, #8]
 800c976:	690b      	ldr	r3, [r1, #16]
 800c978:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c97c:	4293      	cmp	r3, r2
 800c97e:	bfb8      	it	lt
 800c980:	4613      	movlt	r3, r2
 800c982:	6033      	str	r3, [r6, #0]
 800c984:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c988:	4607      	mov	r7, r0
 800c98a:	460c      	mov	r4, r1
 800c98c:	b10a      	cbz	r2, 800c992 <_printf_common+0x26>
 800c98e:	3301      	adds	r3, #1
 800c990:	6033      	str	r3, [r6, #0]
 800c992:	6823      	ldr	r3, [r4, #0]
 800c994:	0699      	lsls	r1, r3, #26
 800c996:	bf42      	ittt	mi
 800c998:	6833      	ldrmi	r3, [r6, #0]
 800c99a:	3302      	addmi	r3, #2
 800c99c:	6033      	strmi	r3, [r6, #0]
 800c99e:	6825      	ldr	r5, [r4, #0]
 800c9a0:	f015 0506 	ands.w	r5, r5, #6
 800c9a4:	d106      	bne.n	800c9b4 <_printf_common+0x48>
 800c9a6:	f104 0a19 	add.w	sl, r4, #25
 800c9aa:	68e3      	ldr	r3, [r4, #12]
 800c9ac:	6832      	ldr	r2, [r6, #0]
 800c9ae:	1a9b      	subs	r3, r3, r2
 800c9b0:	42ab      	cmp	r3, r5
 800c9b2:	dc26      	bgt.n	800ca02 <_printf_common+0x96>
 800c9b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c9b8:	6822      	ldr	r2, [r4, #0]
 800c9ba:	3b00      	subs	r3, #0
 800c9bc:	bf18      	it	ne
 800c9be:	2301      	movne	r3, #1
 800c9c0:	0692      	lsls	r2, r2, #26
 800c9c2:	d42b      	bmi.n	800ca1c <_printf_common+0xb0>
 800c9c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c9c8:	4641      	mov	r1, r8
 800c9ca:	4638      	mov	r0, r7
 800c9cc:	47c8      	blx	r9
 800c9ce:	3001      	adds	r0, #1
 800c9d0:	d01e      	beq.n	800ca10 <_printf_common+0xa4>
 800c9d2:	6823      	ldr	r3, [r4, #0]
 800c9d4:	6922      	ldr	r2, [r4, #16]
 800c9d6:	f003 0306 	and.w	r3, r3, #6
 800c9da:	2b04      	cmp	r3, #4
 800c9dc:	bf02      	ittt	eq
 800c9de:	68e5      	ldreq	r5, [r4, #12]
 800c9e0:	6833      	ldreq	r3, [r6, #0]
 800c9e2:	1aed      	subeq	r5, r5, r3
 800c9e4:	68a3      	ldr	r3, [r4, #8]
 800c9e6:	bf0c      	ite	eq
 800c9e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9ec:	2500      	movne	r5, #0
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	bfc4      	itt	gt
 800c9f2:	1a9b      	subgt	r3, r3, r2
 800c9f4:	18ed      	addgt	r5, r5, r3
 800c9f6:	2600      	movs	r6, #0
 800c9f8:	341a      	adds	r4, #26
 800c9fa:	42b5      	cmp	r5, r6
 800c9fc:	d11a      	bne.n	800ca34 <_printf_common+0xc8>
 800c9fe:	2000      	movs	r0, #0
 800ca00:	e008      	b.n	800ca14 <_printf_common+0xa8>
 800ca02:	2301      	movs	r3, #1
 800ca04:	4652      	mov	r2, sl
 800ca06:	4641      	mov	r1, r8
 800ca08:	4638      	mov	r0, r7
 800ca0a:	47c8      	blx	r9
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	d103      	bne.n	800ca18 <_printf_common+0xac>
 800ca10:	f04f 30ff 	mov.w	r0, #4294967295
 800ca14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca18:	3501      	adds	r5, #1
 800ca1a:	e7c6      	b.n	800c9aa <_printf_common+0x3e>
 800ca1c:	18e1      	adds	r1, r4, r3
 800ca1e:	1c5a      	adds	r2, r3, #1
 800ca20:	2030      	movs	r0, #48	@ 0x30
 800ca22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ca26:	4422      	add	r2, r4
 800ca28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ca2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ca30:	3302      	adds	r3, #2
 800ca32:	e7c7      	b.n	800c9c4 <_printf_common+0x58>
 800ca34:	2301      	movs	r3, #1
 800ca36:	4622      	mov	r2, r4
 800ca38:	4641      	mov	r1, r8
 800ca3a:	4638      	mov	r0, r7
 800ca3c:	47c8      	blx	r9
 800ca3e:	3001      	adds	r0, #1
 800ca40:	d0e6      	beq.n	800ca10 <_printf_common+0xa4>
 800ca42:	3601      	adds	r6, #1
 800ca44:	e7d9      	b.n	800c9fa <_printf_common+0x8e>
	...

0800ca48 <_printf_i>:
 800ca48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca4c:	7e0f      	ldrb	r7, [r1, #24]
 800ca4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ca50:	2f78      	cmp	r7, #120	@ 0x78
 800ca52:	4691      	mov	r9, r2
 800ca54:	4680      	mov	r8, r0
 800ca56:	460c      	mov	r4, r1
 800ca58:	469a      	mov	sl, r3
 800ca5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca5e:	d807      	bhi.n	800ca70 <_printf_i+0x28>
 800ca60:	2f62      	cmp	r7, #98	@ 0x62
 800ca62:	d80a      	bhi.n	800ca7a <_printf_i+0x32>
 800ca64:	2f00      	cmp	r7, #0
 800ca66:	f000 80d1 	beq.w	800cc0c <_printf_i+0x1c4>
 800ca6a:	2f58      	cmp	r7, #88	@ 0x58
 800ca6c:	f000 80b8 	beq.w	800cbe0 <_printf_i+0x198>
 800ca70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca78:	e03a      	b.n	800caf0 <_printf_i+0xa8>
 800ca7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca7e:	2b15      	cmp	r3, #21
 800ca80:	d8f6      	bhi.n	800ca70 <_printf_i+0x28>
 800ca82:	a101      	add	r1, pc, #4	@ (adr r1, 800ca88 <_printf_i+0x40>)
 800ca84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca88:	0800cae1 	.word	0x0800cae1
 800ca8c:	0800caf5 	.word	0x0800caf5
 800ca90:	0800ca71 	.word	0x0800ca71
 800ca94:	0800ca71 	.word	0x0800ca71
 800ca98:	0800ca71 	.word	0x0800ca71
 800ca9c:	0800ca71 	.word	0x0800ca71
 800caa0:	0800caf5 	.word	0x0800caf5
 800caa4:	0800ca71 	.word	0x0800ca71
 800caa8:	0800ca71 	.word	0x0800ca71
 800caac:	0800ca71 	.word	0x0800ca71
 800cab0:	0800ca71 	.word	0x0800ca71
 800cab4:	0800cbf3 	.word	0x0800cbf3
 800cab8:	0800cb1f 	.word	0x0800cb1f
 800cabc:	0800cbad 	.word	0x0800cbad
 800cac0:	0800ca71 	.word	0x0800ca71
 800cac4:	0800ca71 	.word	0x0800ca71
 800cac8:	0800cc15 	.word	0x0800cc15
 800cacc:	0800ca71 	.word	0x0800ca71
 800cad0:	0800cb1f 	.word	0x0800cb1f
 800cad4:	0800ca71 	.word	0x0800ca71
 800cad8:	0800ca71 	.word	0x0800ca71
 800cadc:	0800cbb5 	.word	0x0800cbb5
 800cae0:	6833      	ldr	r3, [r6, #0]
 800cae2:	1d1a      	adds	r2, r3, #4
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6032      	str	r2, [r6, #0]
 800cae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800caec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800caf0:	2301      	movs	r3, #1
 800caf2:	e09c      	b.n	800cc2e <_printf_i+0x1e6>
 800caf4:	6833      	ldr	r3, [r6, #0]
 800caf6:	6820      	ldr	r0, [r4, #0]
 800caf8:	1d19      	adds	r1, r3, #4
 800cafa:	6031      	str	r1, [r6, #0]
 800cafc:	0606      	lsls	r6, r0, #24
 800cafe:	d501      	bpl.n	800cb04 <_printf_i+0xbc>
 800cb00:	681d      	ldr	r5, [r3, #0]
 800cb02:	e003      	b.n	800cb0c <_printf_i+0xc4>
 800cb04:	0645      	lsls	r5, r0, #25
 800cb06:	d5fb      	bpl.n	800cb00 <_printf_i+0xb8>
 800cb08:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cb0c:	2d00      	cmp	r5, #0
 800cb0e:	da03      	bge.n	800cb18 <_printf_i+0xd0>
 800cb10:	232d      	movs	r3, #45	@ 0x2d
 800cb12:	426d      	negs	r5, r5
 800cb14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb18:	4858      	ldr	r0, [pc, #352]	@ (800cc7c <_printf_i+0x234>)
 800cb1a:	230a      	movs	r3, #10
 800cb1c:	e011      	b.n	800cb42 <_printf_i+0xfa>
 800cb1e:	6821      	ldr	r1, [r4, #0]
 800cb20:	6833      	ldr	r3, [r6, #0]
 800cb22:	0608      	lsls	r0, r1, #24
 800cb24:	f853 5b04 	ldr.w	r5, [r3], #4
 800cb28:	d402      	bmi.n	800cb30 <_printf_i+0xe8>
 800cb2a:	0649      	lsls	r1, r1, #25
 800cb2c:	bf48      	it	mi
 800cb2e:	b2ad      	uxthmi	r5, r5
 800cb30:	2f6f      	cmp	r7, #111	@ 0x6f
 800cb32:	4852      	ldr	r0, [pc, #328]	@ (800cc7c <_printf_i+0x234>)
 800cb34:	6033      	str	r3, [r6, #0]
 800cb36:	bf14      	ite	ne
 800cb38:	230a      	movne	r3, #10
 800cb3a:	2308      	moveq	r3, #8
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cb42:	6866      	ldr	r6, [r4, #4]
 800cb44:	60a6      	str	r6, [r4, #8]
 800cb46:	2e00      	cmp	r6, #0
 800cb48:	db05      	blt.n	800cb56 <_printf_i+0x10e>
 800cb4a:	6821      	ldr	r1, [r4, #0]
 800cb4c:	432e      	orrs	r6, r5
 800cb4e:	f021 0104 	bic.w	r1, r1, #4
 800cb52:	6021      	str	r1, [r4, #0]
 800cb54:	d04b      	beq.n	800cbee <_printf_i+0x1a6>
 800cb56:	4616      	mov	r6, r2
 800cb58:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb5c:	fb03 5711 	mls	r7, r3, r1, r5
 800cb60:	5dc7      	ldrb	r7, [r0, r7]
 800cb62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb66:	462f      	mov	r7, r5
 800cb68:	42bb      	cmp	r3, r7
 800cb6a:	460d      	mov	r5, r1
 800cb6c:	d9f4      	bls.n	800cb58 <_printf_i+0x110>
 800cb6e:	2b08      	cmp	r3, #8
 800cb70:	d10b      	bne.n	800cb8a <_printf_i+0x142>
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	07df      	lsls	r7, r3, #31
 800cb76:	d508      	bpl.n	800cb8a <_printf_i+0x142>
 800cb78:	6923      	ldr	r3, [r4, #16]
 800cb7a:	6861      	ldr	r1, [r4, #4]
 800cb7c:	4299      	cmp	r1, r3
 800cb7e:	bfde      	ittt	le
 800cb80:	2330      	movle	r3, #48	@ 0x30
 800cb82:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb86:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb8a:	1b92      	subs	r2, r2, r6
 800cb8c:	6122      	str	r2, [r4, #16]
 800cb8e:	f8cd a000 	str.w	sl, [sp]
 800cb92:	464b      	mov	r3, r9
 800cb94:	aa03      	add	r2, sp, #12
 800cb96:	4621      	mov	r1, r4
 800cb98:	4640      	mov	r0, r8
 800cb9a:	f7ff fee7 	bl	800c96c <_printf_common>
 800cb9e:	3001      	adds	r0, #1
 800cba0:	d14a      	bne.n	800cc38 <_printf_i+0x1f0>
 800cba2:	f04f 30ff 	mov.w	r0, #4294967295
 800cba6:	b004      	add	sp, #16
 800cba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbac:	6823      	ldr	r3, [r4, #0]
 800cbae:	f043 0320 	orr.w	r3, r3, #32
 800cbb2:	6023      	str	r3, [r4, #0]
 800cbb4:	4832      	ldr	r0, [pc, #200]	@ (800cc80 <_printf_i+0x238>)
 800cbb6:	2778      	movs	r7, #120	@ 0x78
 800cbb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cbbc:	6823      	ldr	r3, [r4, #0]
 800cbbe:	6831      	ldr	r1, [r6, #0]
 800cbc0:	061f      	lsls	r7, r3, #24
 800cbc2:	f851 5b04 	ldr.w	r5, [r1], #4
 800cbc6:	d402      	bmi.n	800cbce <_printf_i+0x186>
 800cbc8:	065f      	lsls	r7, r3, #25
 800cbca:	bf48      	it	mi
 800cbcc:	b2ad      	uxthmi	r5, r5
 800cbce:	6031      	str	r1, [r6, #0]
 800cbd0:	07d9      	lsls	r1, r3, #31
 800cbd2:	bf44      	itt	mi
 800cbd4:	f043 0320 	orrmi.w	r3, r3, #32
 800cbd8:	6023      	strmi	r3, [r4, #0]
 800cbda:	b11d      	cbz	r5, 800cbe4 <_printf_i+0x19c>
 800cbdc:	2310      	movs	r3, #16
 800cbde:	e7ad      	b.n	800cb3c <_printf_i+0xf4>
 800cbe0:	4826      	ldr	r0, [pc, #152]	@ (800cc7c <_printf_i+0x234>)
 800cbe2:	e7e9      	b.n	800cbb8 <_printf_i+0x170>
 800cbe4:	6823      	ldr	r3, [r4, #0]
 800cbe6:	f023 0320 	bic.w	r3, r3, #32
 800cbea:	6023      	str	r3, [r4, #0]
 800cbec:	e7f6      	b.n	800cbdc <_printf_i+0x194>
 800cbee:	4616      	mov	r6, r2
 800cbf0:	e7bd      	b.n	800cb6e <_printf_i+0x126>
 800cbf2:	6833      	ldr	r3, [r6, #0]
 800cbf4:	6825      	ldr	r5, [r4, #0]
 800cbf6:	6961      	ldr	r1, [r4, #20]
 800cbf8:	1d18      	adds	r0, r3, #4
 800cbfa:	6030      	str	r0, [r6, #0]
 800cbfc:	062e      	lsls	r6, r5, #24
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	d501      	bpl.n	800cc06 <_printf_i+0x1be>
 800cc02:	6019      	str	r1, [r3, #0]
 800cc04:	e002      	b.n	800cc0c <_printf_i+0x1c4>
 800cc06:	0668      	lsls	r0, r5, #25
 800cc08:	d5fb      	bpl.n	800cc02 <_printf_i+0x1ba>
 800cc0a:	8019      	strh	r1, [r3, #0]
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	6123      	str	r3, [r4, #16]
 800cc10:	4616      	mov	r6, r2
 800cc12:	e7bc      	b.n	800cb8e <_printf_i+0x146>
 800cc14:	6833      	ldr	r3, [r6, #0]
 800cc16:	1d1a      	adds	r2, r3, #4
 800cc18:	6032      	str	r2, [r6, #0]
 800cc1a:	681e      	ldr	r6, [r3, #0]
 800cc1c:	6862      	ldr	r2, [r4, #4]
 800cc1e:	2100      	movs	r1, #0
 800cc20:	4630      	mov	r0, r6
 800cc22:	f7f3 fae5 	bl	80001f0 <memchr>
 800cc26:	b108      	cbz	r0, 800cc2c <_printf_i+0x1e4>
 800cc28:	1b80      	subs	r0, r0, r6
 800cc2a:	6060      	str	r0, [r4, #4]
 800cc2c:	6863      	ldr	r3, [r4, #4]
 800cc2e:	6123      	str	r3, [r4, #16]
 800cc30:	2300      	movs	r3, #0
 800cc32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc36:	e7aa      	b.n	800cb8e <_printf_i+0x146>
 800cc38:	6923      	ldr	r3, [r4, #16]
 800cc3a:	4632      	mov	r2, r6
 800cc3c:	4649      	mov	r1, r9
 800cc3e:	4640      	mov	r0, r8
 800cc40:	47d0      	blx	sl
 800cc42:	3001      	adds	r0, #1
 800cc44:	d0ad      	beq.n	800cba2 <_printf_i+0x15a>
 800cc46:	6823      	ldr	r3, [r4, #0]
 800cc48:	079b      	lsls	r3, r3, #30
 800cc4a:	d413      	bmi.n	800cc74 <_printf_i+0x22c>
 800cc4c:	68e0      	ldr	r0, [r4, #12]
 800cc4e:	9b03      	ldr	r3, [sp, #12]
 800cc50:	4298      	cmp	r0, r3
 800cc52:	bfb8      	it	lt
 800cc54:	4618      	movlt	r0, r3
 800cc56:	e7a6      	b.n	800cba6 <_printf_i+0x15e>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	4632      	mov	r2, r6
 800cc5c:	4649      	mov	r1, r9
 800cc5e:	4640      	mov	r0, r8
 800cc60:	47d0      	blx	sl
 800cc62:	3001      	adds	r0, #1
 800cc64:	d09d      	beq.n	800cba2 <_printf_i+0x15a>
 800cc66:	3501      	adds	r5, #1
 800cc68:	68e3      	ldr	r3, [r4, #12]
 800cc6a:	9903      	ldr	r1, [sp, #12]
 800cc6c:	1a5b      	subs	r3, r3, r1
 800cc6e:	42ab      	cmp	r3, r5
 800cc70:	dcf2      	bgt.n	800cc58 <_printf_i+0x210>
 800cc72:	e7eb      	b.n	800cc4c <_printf_i+0x204>
 800cc74:	2500      	movs	r5, #0
 800cc76:	f104 0619 	add.w	r6, r4, #25
 800cc7a:	e7f5      	b.n	800cc68 <_printf_i+0x220>
 800cc7c:	08014f43 	.word	0x08014f43
 800cc80:	08014f54 	.word	0x08014f54

0800cc84 <_scanf_float>:
 800cc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc88:	b087      	sub	sp, #28
 800cc8a:	4691      	mov	r9, r2
 800cc8c:	9303      	str	r3, [sp, #12]
 800cc8e:	688b      	ldr	r3, [r1, #8]
 800cc90:	1e5a      	subs	r2, r3, #1
 800cc92:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cc96:	bf81      	itttt	hi
 800cc98:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cc9c:	eb03 0b05 	addhi.w	fp, r3, r5
 800cca0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cca4:	608b      	strhi	r3, [r1, #8]
 800cca6:	680b      	ldr	r3, [r1, #0]
 800cca8:	460a      	mov	r2, r1
 800ccaa:	f04f 0500 	mov.w	r5, #0
 800ccae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ccb2:	f842 3b1c 	str.w	r3, [r2], #28
 800ccb6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ccba:	4680      	mov	r8, r0
 800ccbc:	460c      	mov	r4, r1
 800ccbe:	bf98      	it	ls
 800ccc0:	f04f 0b00 	movls.w	fp, #0
 800ccc4:	9201      	str	r2, [sp, #4]
 800ccc6:	4616      	mov	r6, r2
 800ccc8:	46aa      	mov	sl, r5
 800ccca:	462f      	mov	r7, r5
 800cccc:	9502      	str	r5, [sp, #8]
 800ccce:	68a2      	ldr	r2, [r4, #8]
 800ccd0:	b15a      	cbz	r2, 800ccea <_scanf_float+0x66>
 800ccd2:	f8d9 3000 	ldr.w	r3, [r9]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	2b4e      	cmp	r3, #78	@ 0x4e
 800ccda:	d863      	bhi.n	800cda4 <_scanf_float+0x120>
 800ccdc:	2b40      	cmp	r3, #64	@ 0x40
 800ccde:	d83b      	bhi.n	800cd58 <_scanf_float+0xd4>
 800cce0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cce4:	b2c8      	uxtb	r0, r1
 800cce6:	280e      	cmp	r0, #14
 800cce8:	d939      	bls.n	800cd5e <_scanf_float+0xda>
 800ccea:	b11f      	cbz	r7, 800ccf4 <_scanf_float+0x70>
 800ccec:	6823      	ldr	r3, [r4, #0]
 800ccee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ccf2:	6023      	str	r3, [r4, #0]
 800ccf4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ccf8:	f1ba 0f01 	cmp.w	sl, #1
 800ccfc:	f200 8114 	bhi.w	800cf28 <_scanf_float+0x2a4>
 800cd00:	9b01      	ldr	r3, [sp, #4]
 800cd02:	429e      	cmp	r6, r3
 800cd04:	f200 8105 	bhi.w	800cf12 <_scanf_float+0x28e>
 800cd08:	2001      	movs	r0, #1
 800cd0a:	b007      	add	sp, #28
 800cd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd10:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cd14:	2a0d      	cmp	r2, #13
 800cd16:	d8e8      	bhi.n	800ccea <_scanf_float+0x66>
 800cd18:	a101      	add	r1, pc, #4	@ (adr r1, 800cd20 <_scanf_float+0x9c>)
 800cd1a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cd1e:	bf00      	nop
 800cd20:	0800ce69 	.word	0x0800ce69
 800cd24:	0800cceb 	.word	0x0800cceb
 800cd28:	0800cceb 	.word	0x0800cceb
 800cd2c:	0800cceb 	.word	0x0800cceb
 800cd30:	0800cec5 	.word	0x0800cec5
 800cd34:	0800ce9f 	.word	0x0800ce9f
 800cd38:	0800cceb 	.word	0x0800cceb
 800cd3c:	0800cceb 	.word	0x0800cceb
 800cd40:	0800ce77 	.word	0x0800ce77
 800cd44:	0800cceb 	.word	0x0800cceb
 800cd48:	0800cceb 	.word	0x0800cceb
 800cd4c:	0800cceb 	.word	0x0800cceb
 800cd50:	0800cceb 	.word	0x0800cceb
 800cd54:	0800ce33 	.word	0x0800ce33
 800cd58:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cd5c:	e7da      	b.n	800cd14 <_scanf_float+0x90>
 800cd5e:	290e      	cmp	r1, #14
 800cd60:	d8c3      	bhi.n	800ccea <_scanf_float+0x66>
 800cd62:	a001      	add	r0, pc, #4	@ (adr r0, 800cd68 <_scanf_float+0xe4>)
 800cd64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cd68:	0800ce23 	.word	0x0800ce23
 800cd6c:	0800cceb 	.word	0x0800cceb
 800cd70:	0800ce23 	.word	0x0800ce23
 800cd74:	0800ceb3 	.word	0x0800ceb3
 800cd78:	0800cceb 	.word	0x0800cceb
 800cd7c:	0800cdc5 	.word	0x0800cdc5
 800cd80:	0800ce09 	.word	0x0800ce09
 800cd84:	0800ce09 	.word	0x0800ce09
 800cd88:	0800ce09 	.word	0x0800ce09
 800cd8c:	0800ce09 	.word	0x0800ce09
 800cd90:	0800ce09 	.word	0x0800ce09
 800cd94:	0800ce09 	.word	0x0800ce09
 800cd98:	0800ce09 	.word	0x0800ce09
 800cd9c:	0800ce09 	.word	0x0800ce09
 800cda0:	0800ce09 	.word	0x0800ce09
 800cda4:	2b6e      	cmp	r3, #110	@ 0x6e
 800cda6:	d809      	bhi.n	800cdbc <_scanf_float+0x138>
 800cda8:	2b60      	cmp	r3, #96	@ 0x60
 800cdaa:	d8b1      	bhi.n	800cd10 <_scanf_float+0x8c>
 800cdac:	2b54      	cmp	r3, #84	@ 0x54
 800cdae:	d07b      	beq.n	800cea8 <_scanf_float+0x224>
 800cdb0:	2b59      	cmp	r3, #89	@ 0x59
 800cdb2:	d19a      	bne.n	800ccea <_scanf_float+0x66>
 800cdb4:	2d07      	cmp	r5, #7
 800cdb6:	d198      	bne.n	800ccea <_scanf_float+0x66>
 800cdb8:	2508      	movs	r5, #8
 800cdba:	e02f      	b.n	800ce1c <_scanf_float+0x198>
 800cdbc:	2b74      	cmp	r3, #116	@ 0x74
 800cdbe:	d073      	beq.n	800cea8 <_scanf_float+0x224>
 800cdc0:	2b79      	cmp	r3, #121	@ 0x79
 800cdc2:	e7f6      	b.n	800cdb2 <_scanf_float+0x12e>
 800cdc4:	6821      	ldr	r1, [r4, #0]
 800cdc6:	05c8      	lsls	r0, r1, #23
 800cdc8:	d51e      	bpl.n	800ce08 <_scanf_float+0x184>
 800cdca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cdce:	6021      	str	r1, [r4, #0]
 800cdd0:	3701      	adds	r7, #1
 800cdd2:	f1bb 0f00 	cmp.w	fp, #0
 800cdd6:	d003      	beq.n	800cde0 <_scanf_float+0x15c>
 800cdd8:	3201      	adds	r2, #1
 800cdda:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cdde:	60a2      	str	r2, [r4, #8]
 800cde0:	68a3      	ldr	r3, [r4, #8]
 800cde2:	3b01      	subs	r3, #1
 800cde4:	60a3      	str	r3, [r4, #8]
 800cde6:	6923      	ldr	r3, [r4, #16]
 800cde8:	3301      	adds	r3, #1
 800cdea:	6123      	str	r3, [r4, #16]
 800cdec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f8c9 3004 	str.w	r3, [r9, #4]
 800cdf8:	f340 8082 	ble.w	800cf00 <_scanf_float+0x27c>
 800cdfc:	f8d9 3000 	ldr.w	r3, [r9]
 800ce00:	3301      	adds	r3, #1
 800ce02:	f8c9 3000 	str.w	r3, [r9]
 800ce06:	e762      	b.n	800ccce <_scanf_float+0x4a>
 800ce08:	eb1a 0105 	adds.w	r1, sl, r5
 800ce0c:	f47f af6d 	bne.w	800ccea <_scanf_float+0x66>
 800ce10:	6822      	ldr	r2, [r4, #0]
 800ce12:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ce16:	6022      	str	r2, [r4, #0]
 800ce18:	460d      	mov	r5, r1
 800ce1a:	468a      	mov	sl, r1
 800ce1c:	f806 3b01 	strb.w	r3, [r6], #1
 800ce20:	e7de      	b.n	800cde0 <_scanf_float+0x15c>
 800ce22:	6822      	ldr	r2, [r4, #0]
 800ce24:	0610      	lsls	r0, r2, #24
 800ce26:	f57f af60 	bpl.w	800ccea <_scanf_float+0x66>
 800ce2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ce2e:	6022      	str	r2, [r4, #0]
 800ce30:	e7f4      	b.n	800ce1c <_scanf_float+0x198>
 800ce32:	f1ba 0f00 	cmp.w	sl, #0
 800ce36:	d10c      	bne.n	800ce52 <_scanf_float+0x1ce>
 800ce38:	b977      	cbnz	r7, 800ce58 <_scanf_float+0x1d4>
 800ce3a:	6822      	ldr	r2, [r4, #0]
 800ce3c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ce40:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ce44:	d108      	bne.n	800ce58 <_scanf_float+0x1d4>
 800ce46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ce4a:	6022      	str	r2, [r4, #0]
 800ce4c:	f04f 0a01 	mov.w	sl, #1
 800ce50:	e7e4      	b.n	800ce1c <_scanf_float+0x198>
 800ce52:	f1ba 0f02 	cmp.w	sl, #2
 800ce56:	d050      	beq.n	800cefa <_scanf_float+0x276>
 800ce58:	2d01      	cmp	r5, #1
 800ce5a:	d002      	beq.n	800ce62 <_scanf_float+0x1de>
 800ce5c:	2d04      	cmp	r5, #4
 800ce5e:	f47f af44 	bne.w	800ccea <_scanf_float+0x66>
 800ce62:	3501      	adds	r5, #1
 800ce64:	b2ed      	uxtb	r5, r5
 800ce66:	e7d9      	b.n	800ce1c <_scanf_float+0x198>
 800ce68:	f1ba 0f01 	cmp.w	sl, #1
 800ce6c:	f47f af3d 	bne.w	800ccea <_scanf_float+0x66>
 800ce70:	f04f 0a02 	mov.w	sl, #2
 800ce74:	e7d2      	b.n	800ce1c <_scanf_float+0x198>
 800ce76:	b975      	cbnz	r5, 800ce96 <_scanf_float+0x212>
 800ce78:	2f00      	cmp	r7, #0
 800ce7a:	f47f af37 	bne.w	800ccec <_scanf_float+0x68>
 800ce7e:	6822      	ldr	r2, [r4, #0]
 800ce80:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ce84:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ce88:	f040 8103 	bne.w	800d092 <_scanf_float+0x40e>
 800ce8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ce90:	6022      	str	r2, [r4, #0]
 800ce92:	2501      	movs	r5, #1
 800ce94:	e7c2      	b.n	800ce1c <_scanf_float+0x198>
 800ce96:	2d03      	cmp	r5, #3
 800ce98:	d0e3      	beq.n	800ce62 <_scanf_float+0x1de>
 800ce9a:	2d05      	cmp	r5, #5
 800ce9c:	e7df      	b.n	800ce5e <_scanf_float+0x1da>
 800ce9e:	2d02      	cmp	r5, #2
 800cea0:	f47f af23 	bne.w	800ccea <_scanf_float+0x66>
 800cea4:	2503      	movs	r5, #3
 800cea6:	e7b9      	b.n	800ce1c <_scanf_float+0x198>
 800cea8:	2d06      	cmp	r5, #6
 800ceaa:	f47f af1e 	bne.w	800ccea <_scanf_float+0x66>
 800ceae:	2507      	movs	r5, #7
 800ceb0:	e7b4      	b.n	800ce1c <_scanf_float+0x198>
 800ceb2:	6822      	ldr	r2, [r4, #0]
 800ceb4:	0591      	lsls	r1, r2, #22
 800ceb6:	f57f af18 	bpl.w	800ccea <_scanf_float+0x66>
 800ceba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cebe:	6022      	str	r2, [r4, #0]
 800cec0:	9702      	str	r7, [sp, #8]
 800cec2:	e7ab      	b.n	800ce1c <_scanf_float+0x198>
 800cec4:	6822      	ldr	r2, [r4, #0]
 800cec6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ceca:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cece:	d005      	beq.n	800cedc <_scanf_float+0x258>
 800ced0:	0550      	lsls	r0, r2, #21
 800ced2:	f57f af0a 	bpl.w	800ccea <_scanf_float+0x66>
 800ced6:	2f00      	cmp	r7, #0
 800ced8:	f000 80db 	beq.w	800d092 <_scanf_float+0x40e>
 800cedc:	0591      	lsls	r1, r2, #22
 800cede:	bf58      	it	pl
 800cee0:	9902      	ldrpl	r1, [sp, #8]
 800cee2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cee6:	bf58      	it	pl
 800cee8:	1a79      	subpl	r1, r7, r1
 800ceea:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ceee:	bf58      	it	pl
 800cef0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cef4:	6022      	str	r2, [r4, #0]
 800cef6:	2700      	movs	r7, #0
 800cef8:	e790      	b.n	800ce1c <_scanf_float+0x198>
 800cefa:	f04f 0a03 	mov.w	sl, #3
 800cefe:	e78d      	b.n	800ce1c <_scanf_float+0x198>
 800cf00:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cf04:	4649      	mov	r1, r9
 800cf06:	4640      	mov	r0, r8
 800cf08:	4798      	blx	r3
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	f43f aedf 	beq.w	800ccce <_scanf_float+0x4a>
 800cf10:	e6eb      	b.n	800ccea <_scanf_float+0x66>
 800cf12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf1a:	464a      	mov	r2, r9
 800cf1c:	4640      	mov	r0, r8
 800cf1e:	4798      	blx	r3
 800cf20:	6923      	ldr	r3, [r4, #16]
 800cf22:	3b01      	subs	r3, #1
 800cf24:	6123      	str	r3, [r4, #16]
 800cf26:	e6eb      	b.n	800cd00 <_scanf_float+0x7c>
 800cf28:	1e6b      	subs	r3, r5, #1
 800cf2a:	2b06      	cmp	r3, #6
 800cf2c:	d824      	bhi.n	800cf78 <_scanf_float+0x2f4>
 800cf2e:	2d02      	cmp	r5, #2
 800cf30:	d836      	bhi.n	800cfa0 <_scanf_float+0x31c>
 800cf32:	9b01      	ldr	r3, [sp, #4]
 800cf34:	429e      	cmp	r6, r3
 800cf36:	f67f aee7 	bls.w	800cd08 <_scanf_float+0x84>
 800cf3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf42:	464a      	mov	r2, r9
 800cf44:	4640      	mov	r0, r8
 800cf46:	4798      	blx	r3
 800cf48:	6923      	ldr	r3, [r4, #16]
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	6123      	str	r3, [r4, #16]
 800cf4e:	e7f0      	b.n	800cf32 <_scanf_float+0x2ae>
 800cf50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf54:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cf58:	464a      	mov	r2, r9
 800cf5a:	4640      	mov	r0, r8
 800cf5c:	4798      	blx	r3
 800cf5e:	6923      	ldr	r3, [r4, #16]
 800cf60:	3b01      	subs	r3, #1
 800cf62:	6123      	str	r3, [r4, #16]
 800cf64:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf68:	fa5f fa8a 	uxtb.w	sl, sl
 800cf6c:	f1ba 0f02 	cmp.w	sl, #2
 800cf70:	d1ee      	bne.n	800cf50 <_scanf_float+0x2cc>
 800cf72:	3d03      	subs	r5, #3
 800cf74:	b2ed      	uxtb	r5, r5
 800cf76:	1b76      	subs	r6, r6, r5
 800cf78:	6823      	ldr	r3, [r4, #0]
 800cf7a:	05da      	lsls	r2, r3, #23
 800cf7c:	d530      	bpl.n	800cfe0 <_scanf_float+0x35c>
 800cf7e:	055b      	lsls	r3, r3, #21
 800cf80:	d511      	bpl.n	800cfa6 <_scanf_float+0x322>
 800cf82:	9b01      	ldr	r3, [sp, #4]
 800cf84:	429e      	cmp	r6, r3
 800cf86:	f67f aebf 	bls.w	800cd08 <_scanf_float+0x84>
 800cf8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf92:	464a      	mov	r2, r9
 800cf94:	4640      	mov	r0, r8
 800cf96:	4798      	blx	r3
 800cf98:	6923      	ldr	r3, [r4, #16]
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	6123      	str	r3, [r4, #16]
 800cf9e:	e7f0      	b.n	800cf82 <_scanf_float+0x2fe>
 800cfa0:	46aa      	mov	sl, r5
 800cfa2:	46b3      	mov	fp, r6
 800cfa4:	e7de      	b.n	800cf64 <_scanf_float+0x2e0>
 800cfa6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cfaa:	6923      	ldr	r3, [r4, #16]
 800cfac:	2965      	cmp	r1, #101	@ 0x65
 800cfae:	f103 33ff 	add.w	r3, r3, #4294967295
 800cfb2:	f106 35ff 	add.w	r5, r6, #4294967295
 800cfb6:	6123      	str	r3, [r4, #16]
 800cfb8:	d00c      	beq.n	800cfd4 <_scanf_float+0x350>
 800cfba:	2945      	cmp	r1, #69	@ 0x45
 800cfbc:	d00a      	beq.n	800cfd4 <_scanf_float+0x350>
 800cfbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cfc2:	464a      	mov	r2, r9
 800cfc4:	4640      	mov	r0, r8
 800cfc6:	4798      	blx	r3
 800cfc8:	6923      	ldr	r3, [r4, #16]
 800cfca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	1eb5      	subs	r5, r6, #2
 800cfd2:	6123      	str	r3, [r4, #16]
 800cfd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cfd8:	464a      	mov	r2, r9
 800cfda:	4640      	mov	r0, r8
 800cfdc:	4798      	blx	r3
 800cfde:	462e      	mov	r6, r5
 800cfe0:	6822      	ldr	r2, [r4, #0]
 800cfe2:	f012 0210 	ands.w	r2, r2, #16
 800cfe6:	d001      	beq.n	800cfec <_scanf_float+0x368>
 800cfe8:	2000      	movs	r0, #0
 800cfea:	e68e      	b.n	800cd0a <_scanf_float+0x86>
 800cfec:	7032      	strb	r2, [r6, #0]
 800cfee:	6823      	ldr	r3, [r4, #0]
 800cff0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cff8:	d125      	bne.n	800d046 <_scanf_float+0x3c2>
 800cffa:	9b02      	ldr	r3, [sp, #8]
 800cffc:	429f      	cmp	r7, r3
 800cffe:	d00a      	beq.n	800d016 <_scanf_float+0x392>
 800d000:	1bda      	subs	r2, r3, r7
 800d002:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d006:	429e      	cmp	r6, r3
 800d008:	bf28      	it	cs
 800d00a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d00e:	4922      	ldr	r1, [pc, #136]	@ (800d098 <_scanf_float+0x414>)
 800d010:	4630      	mov	r0, r6
 800d012:	f000 f93d 	bl	800d290 <siprintf>
 800d016:	9901      	ldr	r1, [sp, #4]
 800d018:	2200      	movs	r2, #0
 800d01a:	4640      	mov	r0, r8
 800d01c:	f7ff f944 	bl	800c2a8 <_strtod_r>
 800d020:	9b03      	ldr	r3, [sp, #12]
 800d022:	6821      	ldr	r1, [r4, #0]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f011 0f02 	tst.w	r1, #2
 800d02a:	ec57 6b10 	vmov	r6, r7, d0
 800d02e:	f103 0204 	add.w	r2, r3, #4
 800d032:	d015      	beq.n	800d060 <_scanf_float+0x3dc>
 800d034:	9903      	ldr	r1, [sp, #12]
 800d036:	600a      	str	r2, [r1, #0]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	e9c3 6700 	strd	r6, r7, [r3]
 800d03e:	68e3      	ldr	r3, [r4, #12]
 800d040:	3301      	adds	r3, #1
 800d042:	60e3      	str	r3, [r4, #12]
 800d044:	e7d0      	b.n	800cfe8 <_scanf_float+0x364>
 800d046:	9b04      	ldr	r3, [sp, #16]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d0e4      	beq.n	800d016 <_scanf_float+0x392>
 800d04c:	9905      	ldr	r1, [sp, #20]
 800d04e:	230a      	movs	r3, #10
 800d050:	3101      	adds	r1, #1
 800d052:	4640      	mov	r0, r8
 800d054:	f7ff f9b4 	bl	800c3c0 <_strtol_r>
 800d058:	9b04      	ldr	r3, [sp, #16]
 800d05a:	9e05      	ldr	r6, [sp, #20]
 800d05c:	1ac2      	subs	r2, r0, r3
 800d05e:	e7d0      	b.n	800d002 <_scanf_float+0x37e>
 800d060:	f011 0f04 	tst.w	r1, #4
 800d064:	9903      	ldr	r1, [sp, #12]
 800d066:	600a      	str	r2, [r1, #0]
 800d068:	d1e6      	bne.n	800d038 <_scanf_float+0x3b4>
 800d06a:	681d      	ldr	r5, [r3, #0]
 800d06c:	4632      	mov	r2, r6
 800d06e:	463b      	mov	r3, r7
 800d070:	4630      	mov	r0, r6
 800d072:	4639      	mov	r1, r7
 800d074:	f7f3 fd6a 	bl	8000b4c <__aeabi_dcmpun>
 800d078:	b128      	cbz	r0, 800d086 <_scanf_float+0x402>
 800d07a:	4808      	ldr	r0, [pc, #32]	@ (800d09c <_scanf_float+0x418>)
 800d07c:	f000 faa4 	bl	800d5c8 <nanf>
 800d080:	ed85 0a00 	vstr	s0, [r5]
 800d084:	e7db      	b.n	800d03e <_scanf_float+0x3ba>
 800d086:	4630      	mov	r0, r6
 800d088:	4639      	mov	r1, r7
 800d08a:	f7f3 fdbd 	bl	8000c08 <__aeabi_d2f>
 800d08e:	6028      	str	r0, [r5, #0]
 800d090:	e7d5      	b.n	800d03e <_scanf_float+0x3ba>
 800d092:	2700      	movs	r7, #0
 800d094:	e62e      	b.n	800ccf4 <_scanf_float+0x70>
 800d096:	bf00      	nop
 800d098:	08014f65 	.word	0x08014f65
 800d09c:	08015007 	.word	0x08015007

0800d0a0 <std>:
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	b510      	push	{r4, lr}
 800d0a4:	4604      	mov	r4, r0
 800d0a6:	e9c0 3300 	strd	r3, r3, [r0]
 800d0aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0ae:	6083      	str	r3, [r0, #8]
 800d0b0:	8181      	strh	r1, [r0, #12]
 800d0b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d0b4:	81c2      	strh	r2, [r0, #14]
 800d0b6:	6183      	str	r3, [r0, #24]
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	2208      	movs	r2, #8
 800d0bc:	305c      	adds	r0, #92	@ 0x5c
 800d0be:	f000 f94c 	bl	800d35a <memset>
 800d0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d0f8 <std+0x58>)
 800d0c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d0c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d0fc <std+0x5c>)
 800d0c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d100 <std+0x60>)
 800d0cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d104 <std+0x64>)
 800d0d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d108 <std+0x68>)
 800d0d4:	6224      	str	r4, [r4, #32]
 800d0d6:	429c      	cmp	r4, r3
 800d0d8:	d006      	beq.n	800d0e8 <std+0x48>
 800d0da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d0de:	4294      	cmp	r4, r2
 800d0e0:	d002      	beq.n	800d0e8 <std+0x48>
 800d0e2:	33d0      	adds	r3, #208	@ 0xd0
 800d0e4:	429c      	cmp	r4, r3
 800d0e6:	d105      	bne.n	800d0f4 <std+0x54>
 800d0e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0f0:	f000 ba50 	b.w	800d594 <__retarget_lock_init_recursive>
 800d0f4:	bd10      	pop	{r4, pc}
 800d0f6:	bf00      	nop
 800d0f8:	0800d2d5 	.word	0x0800d2d5
 800d0fc:	0800d2f7 	.word	0x0800d2f7
 800d100:	0800d32f 	.word	0x0800d32f
 800d104:	0800d353 	.word	0x0800d353
 800d108:	2001eac8 	.word	0x2001eac8

0800d10c <stdio_exit_handler>:
 800d10c:	4a02      	ldr	r2, [pc, #8]	@ (800d118 <stdio_exit_handler+0xc>)
 800d10e:	4903      	ldr	r1, [pc, #12]	@ (800d11c <stdio_exit_handler+0x10>)
 800d110:	4803      	ldr	r0, [pc, #12]	@ (800d120 <stdio_exit_handler+0x14>)
 800d112:	f000 b869 	b.w	800d1e8 <_fwalk_sglue>
 800d116:	bf00      	nop
 800d118:	20000100 	.word	0x20000100
 800d11c:	0800f87d 	.word	0x0800f87d
 800d120:	2000027c 	.word	0x2000027c

0800d124 <cleanup_stdio>:
 800d124:	6841      	ldr	r1, [r0, #4]
 800d126:	4b0c      	ldr	r3, [pc, #48]	@ (800d158 <cleanup_stdio+0x34>)
 800d128:	4299      	cmp	r1, r3
 800d12a:	b510      	push	{r4, lr}
 800d12c:	4604      	mov	r4, r0
 800d12e:	d001      	beq.n	800d134 <cleanup_stdio+0x10>
 800d130:	f002 fba4 	bl	800f87c <_fflush_r>
 800d134:	68a1      	ldr	r1, [r4, #8]
 800d136:	4b09      	ldr	r3, [pc, #36]	@ (800d15c <cleanup_stdio+0x38>)
 800d138:	4299      	cmp	r1, r3
 800d13a:	d002      	beq.n	800d142 <cleanup_stdio+0x1e>
 800d13c:	4620      	mov	r0, r4
 800d13e:	f002 fb9d 	bl	800f87c <_fflush_r>
 800d142:	68e1      	ldr	r1, [r4, #12]
 800d144:	4b06      	ldr	r3, [pc, #24]	@ (800d160 <cleanup_stdio+0x3c>)
 800d146:	4299      	cmp	r1, r3
 800d148:	d004      	beq.n	800d154 <cleanup_stdio+0x30>
 800d14a:	4620      	mov	r0, r4
 800d14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d150:	f002 bb94 	b.w	800f87c <_fflush_r>
 800d154:	bd10      	pop	{r4, pc}
 800d156:	bf00      	nop
 800d158:	2001eac8 	.word	0x2001eac8
 800d15c:	2001eb30 	.word	0x2001eb30
 800d160:	2001eb98 	.word	0x2001eb98

0800d164 <global_stdio_init.part.0>:
 800d164:	b510      	push	{r4, lr}
 800d166:	4b0b      	ldr	r3, [pc, #44]	@ (800d194 <global_stdio_init.part.0+0x30>)
 800d168:	4c0b      	ldr	r4, [pc, #44]	@ (800d198 <global_stdio_init.part.0+0x34>)
 800d16a:	4a0c      	ldr	r2, [pc, #48]	@ (800d19c <global_stdio_init.part.0+0x38>)
 800d16c:	601a      	str	r2, [r3, #0]
 800d16e:	4620      	mov	r0, r4
 800d170:	2200      	movs	r2, #0
 800d172:	2104      	movs	r1, #4
 800d174:	f7ff ff94 	bl	800d0a0 <std>
 800d178:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d17c:	2201      	movs	r2, #1
 800d17e:	2109      	movs	r1, #9
 800d180:	f7ff ff8e 	bl	800d0a0 <std>
 800d184:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d188:	2202      	movs	r2, #2
 800d18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d18e:	2112      	movs	r1, #18
 800d190:	f7ff bf86 	b.w	800d0a0 <std>
 800d194:	2001ec00 	.word	0x2001ec00
 800d198:	2001eac8 	.word	0x2001eac8
 800d19c:	0800d10d 	.word	0x0800d10d

0800d1a0 <__sfp_lock_acquire>:
 800d1a0:	4801      	ldr	r0, [pc, #4]	@ (800d1a8 <__sfp_lock_acquire+0x8>)
 800d1a2:	f000 b9f8 	b.w	800d596 <__retarget_lock_acquire_recursive>
 800d1a6:	bf00      	nop
 800d1a8:	2001ec09 	.word	0x2001ec09

0800d1ac <__sfp_lock_release>:
 800d1ac:	4801      	ldr	r0, [pc, #4]	@ (800d1b4 <__sfp_lock_release+0x8>)
 800d1ae:	f000 b9f3 	b.w	800d598 <__retarget_lock_release_recursive>
 800d1b2:	bf00      	nop
 800d1b4:	2001ec09 	.word	0x2001ec09

0800d1b8 <__sinit>:
 800d1b8:	b510      	push	{r4, lr}
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	f7ff fff0 	bl	800d1a0 <__sfp_lock_acquire>
 800d1c0:	6a23      	ldr	r3, [r4, #32]
 800d1c2:	b11b      	cbz	r3, 800d1cc <__sinit+0x14>
 800d1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1c8:	f7ff bff0 	b.w	800d1ac <__sfp_lock_release>
 800d1cc:	4b04      	ldr	r3, [pc, #16]	@ (800d1e0 <__sinit+0x28>)
 800d1ce:	6223      	str	r3, [r4, #32]
 800d1d0:	4b04      	ldr	r3, [pc, #16]	@ (800d1e4 <__sinit+0x2c>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1f5      	bne.n	800d1c4 <__sinit+0xc>
 800d1d8:	f7ff ffc4 	bl	800d164 <global_stdio_init.part.0>
 800d1dc:	e7f2      	b.n	800d1c4 <__sinit+0xc>
 800d1de:	bf00      	nop
 800d1e0:	0800d125 	.word	0x0800d125
 800d1e4:	2001ec00 	.word	0x2001ec00

0800d1e8 <_fwalk_sglue>:
 800d1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1ec:	4607      	mov	r7, r0
 800d1ee:	4688      	mov	r8, r1
 800d1f0:	4614      	mov	r4, r2
 800d1f2:	2600      	movs	r6, #0
 800d1f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1f8:	f1b9 0901 	subs.w	r9, r9, #1
 800d1fc:	d505      	bpl.n	800d20a <_fwalk_sglue+0x22>
 800d1fe:	6824      	ldr	r4, [r4, #0]
 800d200:	2c00      	cmp	r4, #0
 800d202:	d1f7      	bne.n	800d1f4 <_fwalk_sglue+0xc>
 800d204:	4630      	mov	r0, r6
 800d206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d20a:	89ab      	ldrh	r3, [r5, #12]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d907      	bls.n	800d220 <_fwalk_sglue+0x38>
 800d210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d214:	3301      	adds	r3, #1
 800d216:	d003      	beq.n	800d220 <_fwalk_sglue+0x38>
 800d218:	4629      	mov	r1, r5
 800d21a:	4638      	mov	r0, r7
 800d21c:	47c0      	blx	r8
 800d21e:	4306      	orrs	r6, r0
 800d220:	3568      	adds	r5, #104	@ 0x68
 800d222:	e7e9      	b.n	800d1f8 <_fwalk_sglue+0x10>

0800d224 <sniprintf>:
 800d224:	b40c      	push	{r2, r3}
 800d226:	b530      	push	{r4, r5, lr}
 800d228:	4b18      	ldr	r3, [pc, #96]	@ (800d28c <sniprintf+0x68>)
 800d22a:	1e0c      	subs	r4, r1, #0
 800d22c:	681d      	ldr	r5, [r3, #0]
 800d22e:	b09d      	sub	sp, #116	@ 0x74
 800d230:	da08      	bge.n	800d244 <sniprintf+0x20>
 800d232:	238b      	movs	r3, #139	@ 0x8b
 800d234:	602b      	str	r3, [r5, #0]
 800d236:	f04f 30ff 	mov.w	r0, #4294967295
 800d23a:	b01d      	add	sp, #116	@ 0x74
 800d23c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d240:	b002      	add	sp, #8
 800d242:	4770      	bx	lr
 800d244:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d248:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d24c:	f04f 0300 	mov.w	r3, #0
 800d250:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d252:	bf14      	ite	ne
 800d254:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d258:	4623      	moveq	r3, r4
 800d25a:	9304      	str	r3, [sp, #16]
 800d25c:	9307      	str	r3, [sp, #28]
 800d25e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d262:	9002      	str	r0, [sp, #8]
 800d264:	9006      	str	r0, [sp, #24]
 800d266:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d26a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d26c:	ab21      	add	r3, sp, #132	@ 0x84
 800d26e:	a902      	add	r1, sp, #8
 800d270:	4628      	mov	r0, r5
 800d272:	9301      	str	r3, [sp, #4]
 800d274:	f002 f982 	bl	800f57c <_svfiprintf_r>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	bfbc      	itt	lt
 800d27c:	238b      	movlt	r3, #139	@ 0x8b
 800d27e:	602b      	strlt	r3, [r5, #0]
 800d280:	2c00      	cmp	r4, #0
 800d282:	d0da      	beq.n	800d23a <sniprintf+0x16>
 800d284:	9b02      	ldr	r3, [sp, #8]
 800d286:	2200      	movs	r2, #0
 800d288:	701a      	strb	r2, [r3, #0]
 800d28a:	e7d6      	b.n	800d23a <sniprintf+0x16>
 800d28c:	20000278 	.word	0x20000278

0800d290 <siprintf>:
 800d290:	b40e      	push	{r1, r2, r3}
 800d292:	b510      	push	{r4, lr}
 800d294:	b09d      	sub	sp, #116	@ 0x74
 800d296:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d298:	9002      	str	r0, [sp, #8]
 800d29a:	9006      	str	r0, [sp, #24]
 800d29c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d2a0:	480a      	ldr	r0, [pc, #40]	@ (800d2cc <siprintf+0x3c>)
 800d2a2:	9107      	str	r1, [sp, #28]
 800d2a4:	9104      	str	r1, [sp, #16]
 800d2a6:	490a      	ldr	r1, [pc, #40]	@ (800d2d0 <siprintf+0x40>)
 800d2a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ac:	9105      	str	r1, [sp, #20]
 800d2ae:	2400      	movs	r4, #0
 800d2b0:	a902      	add	r1, sp, #8
 800d2b2:	6800      	ldr	r0, [r0, #0]
 800d2b4:	9301      	str	r3, [sp, #4]
 800d2b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d2b8:	f002 f960 	bl	800f57c <_svfiprintf_r>
 800d2bc:	9b02      	ldr	r3, [sp, #8]
 800d2be:	701c      	strb	r4, [r3, #0]
 800d2c0:	b01d      	add	sp, #116	@ 0x74
 800d2c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2c6:	b003      	add	sp, #12
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	20000278 	.word	0x20000278
 800d2d0:	ffff0208 	.word	0xffff0208

0800d2d4 <__sread>:
 800d2d4:	b510      	push	{r4, lr}
 800d2d6:	460c      	mov	r4, r1
 800d2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2dc:	f000 f90c 	bl	800d4f8 <_read_r>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	bfab      	itete	ge
 800d2e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d2e6:	89a3      	ldrhlt	r3, [r4, #12]
 800d2e8:	181b      	addge	r3, r3, r0
 800d2ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d2ee:	bfac      	ite	ge
 800d2f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d2f2:	81a3      	strhlt	r3, [r4, #12]
 800d2f4:	bd10      	pop	{r4, pc}

0800d2f6 <__swrite>:
 800d2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2fa:	461f      	mov	r7, r3
 800d2fc:	898b      	ldrh	r3, [r1, #12]
 800d2fe:	05db      	lsls	r3, r3, #23
 800d300:	4605      	mov	r5, r0
 800d302:	460c      	mov	r4, r1
 800d304:	4616      	mov	r6, r2
 800d306:	d505      	bpl.n	800d314 <__swrite+0x1e>
 800d308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d30c:	2302      	movs	r3, #2
 800d30e:	2200      	movs	r2, #0
 800d310:	f000 f8e0 	bl	800d4d4 <_lseek_r>
 800d314:	89a3      	ldrh	r3, [r4, #12]
 800d316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d31a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d31e:	81a3      	strh	r3, [r4, #12]
 800d320:	4632      	mov	r2, r6
 800d322:	463b      	mov	r3, r7
 800d324:	4628      	mov	r0, r5
 800d326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d32a:	f000 b8f7 	b.w	800d51c <_write_r>

0800d32e <__sseek>:
 800d32e:	b510      	push	{r4, lr}
 800d330:	460c      	mov	r4, r1
 800d332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d336:	f000 f8cd 	bl	800d4d4 <_lseek_r>
 800d33a:	1c43      	adds	r3, r0, #1
 800d33c:	89a3      	ldrh	r3, [r4, #12]
 800d33e:	bf15      	itete	ne
 800d340:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d342:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d346:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d34a:	81a3      	strheq	r3, [r4, #12]
 800d34c:	bf18      	it	ne
 800d34e:	81a3      	strhne	r3, [r4, #12]
 800d350:	bd10      	pop	{r4, pc}

0800d352 <__sclose>:
 800d352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d356:	f000 b8ad 	b.w	800d4b4 <_close_r>

0800d35a <memset>:
 800d35a:	4402      	add	r2, r0
 800d35c:	4603      	mov	r3, r0
 800d35e:	4293      	cmp	r3, r2
 800d360:	d100      	bne.n	800d364 <memset+0xa>
 800d362:	4770      	bx	lr
 800d364:	f803 1b01 	strb.w	r1, [r3], #1
 800d368:	e7f9      	b.n	800d35e <memset+0x4>

0800d36a <strchr>:
 800d36a:	b2c9      	uxtb	r1, r1
 800d36c:	4603      	mov	r3, r0
 800d36e:	4618      	mov	r0, r3
 800d370:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d374:	b112      	cbz	r2, 800d37c <strchr+0x12>
 800d376:	428a      	cmp	r2, r1
 800d378:	d1f9      	bne.n	800d36e <strchr+0x4>
 800d37a:	4770      	bx	lr
 800d37c:	2900      	cmp	r1, #0
 800d37e:	bf18      	it	ne
 800d380:	2000      	movne	r0, #0
 800d382:	4770      	bx	lr

0800d384 <strncat>:
 800d384:	b530      	push	{r4, r5, lr}
 800d386:	4604      	mov	r4, r0
 800d388:	7825      	ldrb	r5, [r4, #0]
 800d38a:	4623      	mov	r3, r4
 800d38c:	3401      	adds	r4, #1
 800d38e:	2d00      	cmp	r5, #0
 800d390:	d1fa      	bne.n	800d388 <strncat+0x4>
 800d392:	3a01      	subs	r2, #1
 800d394:	d304      	bcc.n	800d3a0 <strncat+0x1c>
 800d396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d39a:	f803 4b01 	strb.w	r4, [r3], #1
 800d39e:	b904      	cbnz	r4, 800d3a2 <strncat+0x1e>
 800d3a0:	bd30      	pop	{r4, r5, pc}
 800d3a2:	2a00      	cmp	r2, #0
 800d3a4:	d1f5      	bne.n	800d392 <strncat+0xe>
 800d3a6:	701a      	strb	r2, [r3, #0]
 800d3a8:	e7f3      	b.n	800d392 <strncat+0xe>

0800d3aa <strncmp>:
 800d3aa:	b510      	push	{r4, lr}
 800d3ac:	b16a      	cbz	r2, 800d3ca <strncmp+0x20>
 800d3ae:	3901      	subs	r1, #1
 800d3b0:	1884      	adds	r4, r0, r2
 800d3b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d103      	bne.n	800d3c6 <strncmp+0x1c>
 800d3be:	42a0      	cmp	r0, r4
 800d3c0:	d001      	beq.n	800d3c6 <strncmp+0x1c>
 800d3c2:	2a00      	cmp	r2, #0
 800d3c4:	d1f5      	bne.n	800d3b2 <strncmp+0x8>
 800d3c6:	1ad0      	subs	r0, r2, r3
 800d3c8:	bd10      	pop	{r4, pc}
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	e7fc      	b.n	800d3c8 <strncmp+0x1e>

0800d3ce <strncpy>:
 800d3ce:	b510      	push	{r4, lr}
 800d3d0:	3901      	subs	r1, #1
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	b132      	cbz	r2, 800d3e4 <strncpy+0x16>
 800d3d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d3da:	f803 4b01 	strb.w	r4, [r3], #1
 800d3de:	3a01      	subs	r2, #1
 800d3e0:	2c00      	cmp	r4, #0
 800d3e2:	d1f7      	bne.n	800d3d4 <strncpy+0x6>
 800d3e4:	441a      	add	r2, r3
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d100      	bne.n	800d3ee <strncpy+0x20>
 800d3ec:	bd10      	pop	{r4, pc}
 800d3ee:	f803 1b01 	strb.w	r1, [r3], #1
 800d3f2:	e7f9      	b.n	800d3e8 <strncpy+0x1a>

0800d3f4 <strtok>:
 800d3f4:	4b16      	ldr	r3, [pc, #88]	@ (800d450 <strtok+0x5c>)
 800d3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3fa:	681f      	ldr	r7, [r3, #0]
 800d3fc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800d3fe:	4605      	mov	r5, r0
 800d400:	460e      	mov	r6, r1
 800d402:	b9ec      	cbnz	r4, 800d440 <strtok+0x4c>
 800d404:	2050      	movs	r0, #80	@ 0x50
 800d406:	f001 fadf 	bl	800e9c8 <malloc>
 800d40a:	4602      	mov	r2, r0
 800d40c:	6478      	str	r0, [r7, #68]	@ 0x44
 800d40e:	b920      	cbnz	r0, 800d41a <strtok+0x26>
 800d410:	4b10      	ldr	r3, [pc, #64]	@ (800d454 <strtok+0x60>)
 800d412:	4811      	ldr	r0, [pc, #68]	@ (800d458 <strtok+0x64>)
 800d414:	215b      	movs	r1, #91	@ 0x5b
 800d416:	f000 f8dd 	bl	800d5d4 <__assert_func>
 800d41a:	e9c0 4400 	strd	r4, r4, [r0]
 800d41e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d422:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d426:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800d42a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800d42e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800d432:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800d436:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800d43a:	6184      	str	r4, [r0, #24]
 800d43c:	7704      	strb	r4, [r0, #28]
 800d43e:	6244      	str	r4, [r0, #36]	@ 0x24
 800d440:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d442:	4631      	mov	r1, r6
 800d444:	4628      	mov	r0, r5
 800d446:	2301      	movs	r3, #1
 800d448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d44c:	f000 b806 	b.w	800d45c <__strtok_r>
 800d450:	20000278 	.word	0x20000278
 800d454:	08014ec0 	.word	0x08014ec0
 800d458:	08014f6a 	.word	0x08014f6a

0800d45c <__strtok_r>:
 800d45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d45e:	4604      	mov	r4, r0
 800d460:	b908      	cbnz	r0, 800d466 <__strtok_r+0xa>
 800d462:	6814      	ldr	r4, [r2, #0]
 800d464:	b144      	cbz	r4, 800d478 <__strtok_r+0x1c>
 800d466:	4620      	mov	r0, r4
 800d468:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d46c:	460f      	mov	r7, r1
 800d46e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d472:	b91e      	cbnz	r6, 800d47c <__strtok_r+0x20>
 800d474:	b965      	cbnz	r5, 800d490 <__strtok_r+0x34>
 800d476:	6015      	str	r5, [r2, #0]
 800d478:	2000      	movs	r0, #0
 800d47a:	e005      	b.n	800d488 <__strtok_r+0x2c>
 800d47c:	42b5      	cmp	r5, r6
 800d47e:	d1f6      	bne.n	800d46e <__strtok_r+0x12>
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1f0      	bne.n	800d466 <__strtok_r+0xa>
 800d484:	6014      	str	r4, [r2, #0]
 800d486:	7003      	strb	r3, [r0, #0]
 800d488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d48a:	461c      	mov	r4, r3
 800d48c:	e00c      	b.n	800d4a8 <__strtok_r+0x4c>
 800d48e:	b91d      	cbnz	r5, 800d498 <__strtok_r+0x3c>
 800d490:	4627      	mov	r7, r4
 800d492:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d496:	460e      	mov	r6, r1
 800d498:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d49c:	42ab      	cmp	r3, r5
 800d49e:	d1f6      	bne.n	800d48e <__strtok_r+0x32>
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d0f2      	beq.n	800d48a <__strtok_r+0x2e>
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	703b      	strb	r3, [r7, #0]
 800d4a8:	6014      	str	r4, [r2, #0]
 800d4aa:	e7ed      	b.n	800d488 <__strtok_r+0x2c>

0800d4ac <_localeconv_r>:
 800d4ac:	4800      	ldr	r0, [pc, #0]	@ (800d4b0 <_localeconv_r+0x4>)
 800d4ae:	4770      	bx	lr
 800d4b0:	200001fc 	.word	0x200001fc

0800d4b4 <_close_r>:
 800d4b4:	b538      	push	{r3, r4, r5, lr}
 800d4b6:	4d06      	ldr	r5, [pc, #24]	@ (800d4d0 <_close_r+0x1c>)
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	4608      	mov	r0, r1
 800d4be:	602b      	str	r3, [r5, #0]
 800d4c0:	f7f5 fb68 	bl	8002b94 <_close>
 800d4c4:	1c43      	adds	r3, r0, #1
 800d4c6:	d102      	bne.n	800d4ce <_close_r+0x1a>
 800d4c8:	682b      	ldr	r3, [r5, #0]
 800d4ca:	b103      	cbz	r3, 800d4ce <_close_r+0x1a>
 800d4cc:	6023      	str	r3, [r4, #0]
 800d4ce:	bd38      	pop	{r3, r4, r5, pc}
 800d4d0:	2001ec04 	.word	0x2001ec04

0800d4d4 <_lseek_r>:
 800d4d4:	b538      	push	{r3, r4, r5, lr}
 800d4d6:	4d07      	ldr	r5, [pc, #28]	@ (800d4f4 <_lseek_r+0x20>)
 800d4d8:	4604      	mov	r4, r0
 800d4da:	4608      	mov	r0, r1
 800d4dc:	4611      	mov	r1, r2
 800d4de:	2200      	movs	r2, #0
 800d4e0:	602a      	str	r2, [r5, #0]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	f7f5 fb7d 	bl	8002be2 <_lseek>
 800d4e8:	1c43      	adds	r3, r0, #1
 800d4ea:	d102      	bne.n	800d4f2 <_lseek_r+0x1e>
 800d4ec:	682b      	ldr	r3, [r5, #0]
 800d4ee:	b103      	cbz	r3, 800d4f2 <_lseek_r+0x1e>
 800d4f0:	6023      	str	r3, [r4, #0]
 800d4f2:	bd38      	pop	{r3, r4, r5, pc}
 800d4f4:	2001ec04 	.word	0x2001ec04

0800d4f8 <_read_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	4d07      	ldr	r5, [pc, #28]	@ (800d518 <_read_r+0x20>)
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	4608      	mov	r0, r1
 800d500:	4611      	mov	r1, r2
 800d502:	2200      	movs	r2, #0
 800d504:	602a      	str	r2, [r5, #0]
 800d506:	461a      	mov	r2, r3
 800d508:	f7f5 fb0b 	bl	8002b22 <_read>
 800d50c:	1c43      	adds	r3, r0, #1
 800d50e:	d102      	bne.n	800d516 <_read_r+0x1e>
 800d510:	682b      	ldr	r3, [r5, #0]
 800d512:	b103      	cbz	r3, 800d516 <_read_r+0x1e>
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	bd38      	pop	{r3, r4, r5, pc}
 800d518:	2001ec04 	.word	0x2001ec04

0800d51c <_write_r>:
 800d51c:	b538      	push	{r3, r4, r5, lr}
 800d51e:	4d07      	ldr	r5, [pc, #28]	@ (800d53c <_write_r+0x20>)
 800d520:	4604      	mov	r4, r0
 800d522:	4608      	mov	r0, r1
 800d524:	4611      	mov	r1, r2
 800d526:	2200      	movs	r2, #0
 800d528:	602a      	str	r2, [r5, #0]
 800d52a:	461a      	mov	r2, r3
 800d52c:	f7f5 fb16 	bl	8002b5c <_write>
 800d530:	1c43      	adds	r3, r0, #1
 800d532:	d102      	bne.n	800d53a <_write_r+0x1e>
 800d534:	682b      	ldr	r3, [r5, #0]
 800d536:	b103      	cbz	r3, 800d53a <_write_r+0x1e>
 800d538:	6023      	str	r3, [r4, #0]
 800d53a:	bd38      	pop	{r3, r4, r5, pc}
 800d53c:	2001ec04 	.word	0x2001ec04

0800d540 <__errno>:
 800d540:	4b01      	ldr	r3, [pc, #4]	@ (800d548 <__errno+0x8>)
 800d542:	6818      	ldr	r0, [r3, #0]
 800d544:	4770      	bx	lr
 800d546:	bf00      	nop
 800d548:	20000278 	.word	0x20000278

0800d54c <__libc_init_array>:
 800d54c:	b570      	push	{r4, r5, r6, lr}
 800d54e:	4d0d      	ldr	r5, [pc, #52]	@ (800d584 <__libc_init_array+0x38>)
 800d550:	4c0d      	ldr	r4, [pc, #52]	@ (800d588 <__libc_init_array+0x3c>)
 800d552:	1b64      	subs	r4, r4, r5
 800d554:	10a4      	asrs	r4, r4, #2
 800d556:	2600      	movs	r6, #0
 800d558:	42a6      	cmp	r6, r4
 800d55a:	d109      	bne.n	800d570 <__libc_init_array+0x24>
 800d55c:	4d0b      	ldr	r5, [pc, #44]	@ (800d58c <__libc_init_array+0x40>)
 800d55e:	4c0c      	ldr	r4, [pc, #48]	@ (800d590 <__libc_init_array+0x44>)
 800d560:	f002 fd00 	bl	800ff64 <_init>
 800d564:	1b64      	subs	r4, r4, r5
 800d566:	10a4      	asrs	r4, r4, #2
 800d568:	2600      	movs	r6, #0
 800d56a:	42a6      	cmp	r6, r4
 800d56c:	d105      	bne.n	800d57a <__libc_init_array+0x2e>
 800d56e:	bd70      	pop	{r4, r5, r6, pc}
 800d570:	f855 3b04 	ldr.w	r3, [r5], #4
 800d574:	4798      	blx	r3
 800d576:	3601      	adds	r6, #1
 800d578:	e7ee      	b.n	800d558 <__libc_init_array+0xc>
 800d57a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d57e:	4798      	blx	r3
 800d580:	3601      	adds	r6, #1
 800d582:	e7f2      	b.n	800d56a <__libc_init_array+0x1e>
 800d584:	080153a0 	.word	0x080153a0
 800d588:	080153a0 	.word	0x080153a0
 800d58c:	080153a0 	.word	0x080153a0
 800d590:	080153a4 	.word	0x080153a4

0800d594 <__retarget_lock_init_recursive>:
 800d594:	4770      	bx	lr

0800d596 <__retarget_lock_acquire_recursive>:
 800d596:	4770      	bx	lr

0800d598 <__retarget_lock_release_recursive>:
 800d598:	4770      	bx	lr

0800d59a <memcpy>:
 800d59a:	440a      	add	r2, r1
 800d59c:	4291      	cmp	r1, r2
 800d59e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d5a2:	d100      	bne.n	800d5a6 <memcpy+0xc>
 800d5a4:	4770      	bx	lr
 800d5a6:	b510      	push	{r4, lr}
 800d5a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5b0:	4291      	cmp	r1, r2
 800d5b2:	d1f9      	bne.n	800d5a8 <memcpy+0xe>
 800d5b4:	bd10      	pop	{r4, pc}
	...

0800d5b8 <nan>:
 800d5b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d5c0 <nan+0x8>
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	00000000 	.word	0x00000000
 800d5c4:	7ff80000 	.word	0x7ff80000

0800d5c8 <nanf>:
 800d5c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d5d0 <nanf+0x8>
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop
 800d5d0:	7fc00000 	.word	0x7fc00000

0800d5d4 <__assert_func>:
 800d5d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5d6:	4614      	mov	r4, r2
 800d5d8:	461a      	mov	r2, r3
 800d5da:	4b09      	ldr	r3, [pc, #36]	@ (800d600 <__assert_func+0x2c>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4605      	mov	r5, r0
 800d5e0:	68d8      	ldr	r0, [r3, #12]
 800d5e2:	b14c      	cbz	r4, 800d5f8 <__assert_func+0x24>
 800d5e4:	4b07      	ldr	r3, [pc, #28]	@ (800d604 <__assert_func+0x30>)
 800d5e6:	9100      	str	r1, [sp, #0]
 800d5e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5ec:	4906      	ldr	r1, [pc, #24]	@ (800d608 <__assert_func+0x34>)
 800d5ee:	462b      	mov	r3, r5
 800d5f0:	f002 f96c 	bl	800f8cc <fiprintf>
 800d5f4:	f002 f9a6 	bl	800f944 <abort>
 800d5f8:	4b04      	ldr	r3, [pc, #16]	@ (800d60c <__assert_func+0x38>)
 800d5fa:	461c      	mov	r4, r3
 800d5fc:	e7f3      	b.n	800d5e6 <__assert_func+0x12>
 800d5fe:	bf00      	nop
 800d600:	20000278 	.word	0x20000278
 800d604:	08014fcc 	.word	0x08014fcc
 800d608:	08014fd9 	.word	0x08014fd9
 800d60c:	08015007 	.word	0x08015007

0800d610 <quorem>:
 800d610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d614:	6903      	ldr	r3, [r0, #16]
 800d616:	690c      	ldr	r4, [r1, #16]
 800d618:	42a3      	cmp	r3, r4
 800d61a:	4607      	mov	r7, r0
 800d61c:	db7e      	blt.n	800d71c <quorem+0x10c>
 800d61e:	3c01      	subs	r4, #1
 800d620:	f101 0814 	add.w	r8, r1, #20
 800d624:	00a3      	lsls	r3, r4, #2
 800d626:	f100 0514 	add.w	r5, r0, #20
 800d62a:	9300      	str	r3, [sp, #0]
 800d62c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d630:	9301      	str	r3, [sp, #4]
 800d632:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d636:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d63a:	3301      	adds	r3, #1
 800d63c:	429a      	cmp	r2, r3
 800d63e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d642:	fbb2 f6f3 	udiv	r6, r2, r3
 800d646:	d32e      	bcc.n	800d6a6 <quorem+0x96>
 800d648:	f04f 0a00 	mov.w	sl, #0
 800d64c:	46c4      	mov	ip, r8
 800d64e:	46ae      	mov	lr, r5
 800d650:	46d3      	mov	fp, sl
 800d652:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d656:	b298      	uxth	r0, r3
 800d658:	fb06 a000 	mla	r0, r6, r0, sl
 800d65c:	0c02      	lsrs	r2, r0, #16
 800d65e:	0c1b      	lsrs	r3, r3, #16
 800d660:	fb06 2303 	mla	r3, r6, r3, r2
 800d664:	f8de 2000 	ldr.w	r2, [lr]
 800d668:	b280      	uxth	r0, r0
 800d66a:	b292      	uxth	r2, r2
 800d66c:	1a12      	subs	r2, r2, r0
 800d66e:	445a      	add	r2, fp
 800d670:	f8de 0000 	ldr.w	r0, [lr]
 800d674:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d678:	b29b      	uxth	r3, r3
 800d67a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d67e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d682:	b292      	uxth	r2, r2
 800d684:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d688:	45e1      	cmp	r9, ip
 800d68a:	f84e 2b04 	str.w	r2, [lr], #4
 800d68e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d692:	d2de      	bcs.n	800d652 <quorem+0x42>
 800d694:	9b00      	ldr	r3, [sp, #0]
 800d696:	58eb      	ldr	r3, [r5, r3]
 800d698:	b92b      	cbnz	r3, 800d6a6 <quorem+0x96>
 800d69a:	9b01      	ldr	r3, [sp, #4]
 800d69c:	3b04      	subs	r3, #4
 800d69e:	429d      	cmp	r5, r3
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	d32f      	bcc.n	800d704 <quorem+0xf4>
 800d6a4:	613c      	str	r4, [r7, #16]
 800d6a6:	4638      	mov	r0, r7
 800d6a8:	f001 fd12 	bl	800f0d0 <__mcmp>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	db25      	blt.n	800d6fc <quorem+0xec>
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6b8:	f8d1 c000 	ldr.w	ip, [r1]
 800d6bc:	fa1f fe82 	uxth.w	lr, r2
 800d6c0:	fa1f f38c 	uxth.w	r3, ip
 800d6c4:	eba3 030e 	sub.w	r3, r3, lr
 800d6c8:	4403      	add	r3, r0
 800d6ca:	0c12      	lsrs	r2, r2, #16
 800d6cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d6d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6da:	45c1      	cmp	r9, r8
 800d6dc:	f841 3b04 	str.w	r3, [r1], #4
 800d6e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d6e4:	d2e6      	bcs.n	800d6b4 <quorem+0xa4>
 800d6e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6ee:	b922      	cbnz	r2, 800d6fa <quorem+0xea>
 800d6f0:	3b04      	subs	r3, #4
 800d6f2:	429d      	cmp	r5, r3
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	d30b      	bcc.n	800d710 <quorem+0x100>
 800d6f8:	613c      	str	r4, [r7, #16]
 800d6fa:	3601      	adds	r6, #1
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	b003      	add	sp, #12
 800d700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d704:	6812      	ldr	r2, [r2, #0]
 800d706:	3b04      	subs	r3, #4
 800d708:	2a00      	cmp	r2, #0
 800d70a:	d1cb      	bne.n	800d6a4 <quorem+0x94>
 800d70c:	3c01      	subs	r4, #1
 800d70e:	e7c6      	b.n	800d69e <quorem+0x8e>
 800d710:	6812      	ldr	r2, [r2, #0]
 800d712:	3b04      	subs	r3, #4
 800d714:	2a00      	cmp	r2, #0
 800d716:	d1ef      	bne.n	800d6f8 <quorem+0xe8>
 800d718:	3c01      	subs	r4, #1
 800d71a:	e7ea      	b.n	800d6f2 <quorem+0xe2>
 800d71c:	2000      	movs	r0, #0
 800d71e:	e7ee      	b.n	800d6fe <quorem+0xee>

0800d720 <_dtoa_r>:
 800d720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d724:	69c7      	ldr	r7, [r0, #28]
 800d726:	b097      	sub	sp, #92	@ 0x5c
 800d728:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d72c:	ec55 4b10 	vmov	r4, r5, d0
 800d730:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d732:	9107      	str	r1, [sp, #28]
 800d734:	4681      	mov	r9, r0
 800d736:	920c      	str	r2, [sp, #48]	@ 0x30
 800d738:	9311      	str	r3, [sp, #68]	@ 0x44
 800d73a:	b97f      	cbnz	r7, 800d75c <_dtoa_r+0x3c>
 800d73c:	2010      	movs	r0, #16
 800d73e:	f001 f943 	bl	800e9c8 <malloc>
 800d742:	4602      	mov	r2, r0
 800d744:	f8c9 001c 	str.w	r0, [r9, #28]
 800d748:	b920      	cbnz	r0, 800d754 <_dtoa_r+0x34>
 800d74a:	4ba9      	ldr	r3, [pc, #676]	@ (800d9f0 <_dtoa_r+0x2d0>)
 800d74c:	21ef      	movs	r1, #239	@ 0xef
 800d74e:	48a9      	ldr	r0, [pc, #676]	@ (800d9f4 <_dtoa_r+0x2d4>)
 800d750:	f7ff ff40 	bl	800d5d4 <__assert_func>
 800d754:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d758:	6007      	str	r7, [r0, #0]
 800d75a:	60c7      	str	r7, [r0, #12]
 800d75c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d760:	6819      	ldr	r1, [r3, #0]
 800d762:	b159      	cbz	r1, 800d77c <_dtoa_r+0x5c>
 800d764:	685a      	ldr	r2, [r3, #4]
 800d766:	604a      	str	r2, [r1, #4]
 800d768:	2301      	movs	r3, #1
 800d76a:	4093      	lsls	r3, r2
 800d76c:	608b      	str	r3, [r1, #8]
 800d76e:	4648      	mov	r0, r9
 800d770:	f001 fa32 	bl	800ebd8 <_Bfree>
 800d774:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d778:	2200      	movs	r2, #0
 800d77a:	601a      	str	r2, [r3, #0]
 800d77c:	1e2b      	subs	r3, r5, #0
 800d77e:	bfb9      	ittee	lt
 800d780:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d784:	9305      	strlt	r3, [sp, #20]
 800d786:	2300      	movge	r3, #0
 800d788:	6033      	strge	r3, [r6, #0]
 800d78a:	9f05      	ldr	r7, [sp, #20]
 800d78c:	4b9a      	ldr	r3, [pc, #616]	@ (800d9f8 <_dtoa_r+0x2d8>)
 800d78e:	bfbc      	itt	lt
 800d790:	2201      	movlt	r2, #1
 800d792:	6032      	strlt	r2, [r6, #0]
 800d794:	43bb      	bics	r3, r7
 800d796:	d112      	bne.n	800d7be <_dtoa_r+0x9e>
 800d798:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d79a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d79e:	6013      	str	r3, [r2, #0]
 800d7a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d7a4:	4323      	orrs	r3, r4
 800d7a6:	f000 855a 	beq.w	800e25e <_dtoa_r+0xb3e>
 800d7aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d7ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800da0c <_dtoa_r+0x2ec>
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	f000 855c 	beq.w	800e26e <_dtoa_r+0xb4e>
 800d7b6:	f10a 0303 	add.w	r3, sl, #3
 800d7ba:	f000 bd56 	b.w	800e26a <_dtoa_r+0xb4a>
 800d7be:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	ec51 0b17 	vmov	r0, r1, d7
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d7ce:	f7f3 f98b 	bl	8000ae8 <__aeabi_dcmpeq>
 800d7d2:	4680      	mov	r8, r0
 800d7d4:	b158      	cbz	r0, 800d7ee <_dtoa_r+0xce>
 800d7d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d7d8:	2301      	movs	r3, #1
 800d7da:	6013      	str	r3, [r2, #0]
 800d7dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d7de:	b113      	cbz	r3, 800d7e6 <_dtoa_r+0xc6>
 800d7e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d7e2:	4b86      	ldr	r3, [pc, #536]	@ (800d9fc <_dtoa_r+0x2dc>)
 800d7e4:	6013      	str	r3, [r2, #0]
 800d7e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800da10 <_dtoa_r+0x2f0>
 800d7ea:	f000 bd40 	b.w	800e26e <_dtoa_r+0xb4e>
 800d7ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d7f2:	aa14      	add	r2, sp, #80	@ 0x50
 800d7f4:	a915      	add	r1, sp, #84	@ 0x54
 800d7f6:	4648      	mov	r0, r9
 800d7f8:	f001 fd8a 	bl	800f310 <__d2b>
 800d7fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d800:	9002      	str	r0, [sp, #8]
 800d802:	2e00      	cmp	r6, #0
 800d804:	d078      	beq.n	800d8f8 <_dtoa_r+0x1d8>
 800d806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d808:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d80c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d810:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d814:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d818:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d81c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d820:	4619      	mov	r1, r3
 800d822:	2200      	movs	r2, #0
 800d824:	4b76      	ldr	r3, [pc, #472]	@ (800da00 <_dtoa_r+0x2e0>)
 800d826:	f7f2 fd3f 	bl	80002a8 <__aeabi_dsub>
 800d82a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d9d8 <_dtoa_r+0x2b8>)
 800d82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d830:	f7f2 fef2 	bl	8000618 <__aeabi_dmul>
 800d834:	a36a      	add	r3, pc, #424	@ (adr r3, 800d9e0 <_dtoa_r+0x2c0>)
 800d836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83a:	f7f2 fd37 	bl	80002ac <__adddf3>
 800d83e:	4604      	mov	r4, r0
 800d840:	4630      	mov	r0, r6
 800d842:	460d      	mov	r5, r1
 800d844:	f7f2 fe7e 	bl	8000544 <__aeabi_i2d>
 800d848:	a367      	add	r3, pc, #412	@ (adr r3, 800d9e8 <_dtoa_r+0x2c8>)
 800d84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84e:	f7f2 fee3 	bl	8000618 <__aeabi_dmul>
 800d852:	4602      	mov	r2, r0
 800d854:	460b      	mov	r3, r1
 800d856:	4620      	mov	r0, r4
 800d858:	4629      	mov	r1, r5
 800d85a:	f7f2 fd27 	bl	80002ac <__adddf3>
 800d85e:	4604      	mov	r4, r0
 800d860:	460d      	mov	r5, r1
 800d862:	f7f3 f989 	bl	8000b78 <__aeabi_d2iz>
 800d866:	2200      	movs	r2, #0
 800d868:	4607      	mov	r7, r0
 800d86a:	2300      	movs	r3, #0
 800d86c:	4620      	mov	r0, r4
 800d86e:	4629      	mov	r1, r5
 800d870:	f7f3 f944 	bl	8000afc <__aeabi_dcmplt>
 800d874:	b140      	cbz	r0, 800d888 <_dtoa_r+0x168>
 800d876:	4638      	mov	r0, r7
 800d878:	f7f2 fe64 	bl	8000544 <__aeabi_i2d>
 800d87c:	4622      	mov	r2, r4
 800d87e:	462b      	mov	r3, r5
 800d880:	f7f3 f932 	bl	8000ae8 <__aeabi_dcmpeq>
 800d884:	b900      	cbnz	r0, 800d888 <_dtoa_r+0x168>
 800d886:	3f01      	subs	r7, #1
 800d888:	2f16      	cmp	r7, #22
 800d88a:	d852      	bhi.n	800d932 <_dtoa_r+0x212>
 800d88c:	4b5d      	ldr	r3, [pc, #372]	@ (800da04 <_dtoa_r+0x2e4>)
 800d88e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d896:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d89a:	f7f3 f92f 	bl	8000afc <__aeabi_dcmplt>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d049      	beq.n	800d936 <_dtoa_r+0x216>
 800d8a2:	3f01      	subs	r7, #1
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d8a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d8aa:	1b9b      	subs	r3, r3, r6
 800d8ac:	1e5a      	subs	r2, r3, #1
 800d8ae:	bf45      	ittet	mi
 800d8b0:	f1c3 0301 	rsbmi	r3, r3, #1
 800d8b4:	9300      	strmi	r3, [sp, #0]
 800d8b6:	2300      	movpl	r3, #0
 800d8b8:	2300      	movmi	r3, #0
 800d8ba:	9206      	str	r2, [sp, #24]
 800d8bc:	bf54      	ite	pl
 800d8be:	9300      	strpl	r3, [sp, #0]
 800d8c0:	9306      	strmi	r3, [sp, #24]
 800d8c2:	2f00      	cmp	r7, #0
 800d8c4:	db39      	blt.n	800d93a <_dtoa_r+0x21a>
 800d8c6:	9b06      	ldr	r3, [sp, #24]
 800d8c8:	970d      	str	r7, [sp, #52]	@ 0x34
 800d8ca:	443b      	add	r3, r7
 800d8cc:	9306      	str	r3, [sp, #24]
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	9308      	str	r3, [sp, #32]
 800d8d2:	9b07      	ldr	r3, [sp, #28]
 800d8d4:	2b09      	cmp	r3, #9
 800d8d6:	d863      	bhi.n	800d9a0 <_dtoa_r+0x280>
 800d8d8:	2b05      	cmp	r3, #5
 800d8da:	bfc4      	itt	gt
 800d8dc:	3b04      	subgt	r3, #4
 800d8de:	9307      	strgt	r3, [sp, #28]
 800d8e0:	9b07      	ldr	r3, [sp, #28]
 800d8e2:	f1a3 0302 	sub.w	r3, r3, #2
 800d8e6:	bfcc      	ite	gt
 800d8e8:	2400      	movgt	r4, #0
 800d8ea:	2401      	movle	r4, #1
 800d8ec:	2b03      	cmp	r3, #3
 800d8ee:	d863      	bhi.n	800d9b8 <_dtoa_r+0x298>
 800d8f0:	e8df f003 	tbb	[pc, r3]
 800d8f4:	2b375452 	.word	0x2b375452
 800d8f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d8fc:	441e      	add	r6, r3
 800d8fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d902:	2b20      	cmp	r3, #32
 800d904:	bfc1      	itttt	gt
 800d906:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d90a:	409f      	lslgt	r7, r3
 800d90c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d910:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d914:	bfd6      	itet	le
 800d916:	f1c3 0320 	rsble	r3, r3, #32
 800d91a:	ea47 0003 	orrgt.w	r0, r7, r3
 800d91e:	fa04 f003 	lslle.w	r0, r4, r3
 800d922:	f7f2 fdff 	bl	8000524 <__aeabi_ui2d>
 800d926:	2201      	movs	r2, #1
 800d928:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d92c:	3e01      	subs	r6, #1
 800d92e:	9212      	str	r2, [sp, #72]	@ 0x48
 800d930:	e776      	b.n	800d820 <_dtoa_r+0x100>
 800d932:	2301      	movs	r3, #1
 800d934:	e7b7      	b.n	800d8a6 <_dtoa_r+0x186>
 800d936:	9010      	str	r0, [sp, #64]	@ 0x40
 800d938:	e7b6      	b.n	800d8a8 <_dtoa_r+0x188>
 800d93a:	9b00      	ldr	r3, [sp, #0]
 800d93c:	1bdb      	subs	r3, r3, r7
 800d93e:	9300      	str	r3, [sp, #0]
 800d940:	427b      	negs	r3, r7
 800d942:	9308      	str	r3, [sp, #32]
 800d944:	2300      	movs	r3, #0
 800d946:	930d      	str	r3, [sp, #52]	@ 0x34
 800d948:	e7c3      	b.n	800d8d2 <_dtoa_r+0x1b2>
 800d94a:	2301      	movs	r3, #1
 800d94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d94e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d950:	eb07 0b03 	add.w	fp, r7, r3
 800d954:	f10b 0301 	add.w	r3, fp, #1
 800d958:	2b01      	cmp	r3, #1
 800d95a:	9303      	str	r3, [sp, #12]
 800d95c:	bfb8      	it	lt
 800d95e:	2301      	movlt	r3, #1
 800d960:	e006      	b.n	800d970 <_dtoa_r+0x250>
 800d962:	2301      	movs	r3, #1
 800d964:	9309      	str	r3, [sp, #36]	@ 0x24
 800d966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d968:	2b00      	cmp	r3, #0
 800d96a:	dd28      	ble.n	800d9be <_dtoa_r+0x29e>
 800d96c:	469b      	mov	fp, r3
 800d96e:	9303      	str	r3, [sp, #12]
 800d970:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d974:	2100      	movs	r1, #0
 800d976:	2204      	movs	r2, #4
 800d978:	f102 0514 	add.w	r5, r2, #20
 800d97c:	429d      	cmp	r5, r3
 800d97e:	d926      	bls.n	800d9ce <_dtoa_r+0x2ae>
 800d980:	6041      	str	r1, [r0, #4]
 800d982:	4648      	mov	r0, r9
 800d984:	f001 f8e8 	bl	800eb58 <_Balloc>
 800d988:	4682      	mov	sl, r0
 800d98a:	2800      	cmp	r0, #0
 800d98c:	d142      	bne.n	800da14 <_dtoa_r+0x2f4>
 800d98e:	4b1e      	ldr	r3, [pc, #120]	@ (800da08 <_dtoa_r+0x2e8>)
 800d990:	4602      	mov	r2, r0
 800d992:	f240 11af 	movw	r1, #431	@ 0x1af
 800d996:	e6da      	b.n	800d74e <_dtoa_r+0x2e>
 800d998:	2300      	movs	r3, #0
 800d99a:	e7e3      	b.n	800d964 <_dtoa_r+0x244>
 800d99c:	2300      	movs	r3, #0
 800d99e:	e7d5      	b.n	800d94c <_dtoa_r+0x22c>
 800d9a0:	2401      	movs	r4, #1
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	9307      	str	r3, [sp, #28]
 800d9a6:	9409      	str	r4, [sp, #36]	@ 0x24
 800d9a8:	f04f 3bff 	mov.w	fp, #4294967295
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f8cd b00c 	str.w	fp, [sp, #12]
 800d9b2:	2312      	movs	r3, #18
 800d9b4:	920c      	str	r2, [sp, #48]	@ 0x30
 800d9b6:	e7db      	b.n	800d970 <_dtoa_r+0x250>
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9bc:	e7f4      	b.n	800d9a8 <_dtoa_r+0x288>
 800d9be:	f04f 0b01 	mov.w	fp, #1
 800d9c2:	f8cd b00c 	str.w	fp, [sp, #12]
 800d9c6:	465b      	mov	r3, fp
 800d9c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d9cc:	e7d0      	b.n	800d970 <_dtoa_r+0x250>
 800d9ce:	3101      	adds	r1, #1
 800d9d0:	0052      	lsls	r2, r2, #1
 800d9d2:	e7d1      	b.n	800d978 <_dtoa_r+0x258>
 800d9d4:	f3af 8000 	nop.w
 800d9d8:	636f4361 	.word	0x636f4361
 800d9dc:	3fd287a7 	.word	0x3fd287a7
 800d9e0:	8b60c8b3 	.word	0x8b60c8b3
 800d9e4:	3fc68a28 	.word	0x3fc68a28
 800d9e8:	509f79fb 	.word	0x509f79fb
 800d9ec:	3fd34413 	.word	0x3fd34413
 800d9f0:	08014ec0 	.word	0x08014ec0
 800d9f4:	08015015 	.word	0x08015015
 800d9f8:	7ff00000 	.word	0x7ff00000
 800d9fc:	08014f42 	.word	0x08014f42
 800da00:	3ff80000 	.word	0x3ff80000
 800da04:	080152d0 	.word	0x080152d0
 800da08:	0801506d 	.word	0x0801506d
 800da0c:	08015011 	.word	0x08015011
 800da10:	08014f41 	.word	0x08014f41
 800da14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800da18:	6018      	str	r0, [r3, #0]
 800da1a:	9b03      	ldr	r3, [sp, #12]
 800da1c:	2b0e      	cmp	r3, #14
 800da1e:	f200 80a1 	bhi.w	800db64 <_dtoa_r+0x444>
 800da22:	2c00      	cmp	r4, #0
 800da24:	f000 809e 	beq.w	800db64 <_dtoa_r+0x444>
 800da28:	2f00      	cmp	r7, #0
 800da2a:	dd33      	ble.n	800da94 <_dtoa_r+0x374>
 800da2c:	4b9c      	ldr	r3, [pc, #624]	@ (800dca0 <_dtoa_r+0x580>)
 800da2e:	f007 020f 	and.w	r2, r7, #15
 800da32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da36:	ed93 7b00 	vldr	d7, [r3]
 800da3a:	05f8      	lsls	r0, r7, #23
 800da3c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800da40:	ea4f 1427 	mov.w	r4, r7, asr #4
 800da44:	d516      	bpl.n	800da74 <_dtoa_r+0x354>
 800da46:	4b97      	ldr	r3, [pc, #604]	@ (800dca4 <_dtoa_r+0x584>)
 800da48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800da4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da50:	f7f2 ff0c 	bl	800086c <__aeabi_ddiv>
 800da54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da58:	f004 040f 	and.w	r4, r4, #15
 800da5c:	2603      	movs	r6, #3
 800da5e:	4d91      	ldr	r5, [pc, #580]	@ (800dca4 <_dtoa_r+0x584>)
 800da60:	b954      	cbnz	r4, 800da78 <_dtoa_r+0x358>
 800da62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800da66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da6a:	f7f2 feff 	bl	800086c <__aeabi_ddiv>
 800da6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da72:	e028      	b.n	800dac6 <_dtoa_r+0x3a6>
 800da74:	2602      	movs	r6, #2
 800da76:	e7f2      	b.n	800da5e <_dtoa_r+0x33e>
 800da78:	07e1      	lsls	r1, r4, #31
 800da7a:	d508      	bpl.n	800da8e <_dtoa_r+0x36e>
 800da7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800da80:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da84:	f7f2 fdc8 	bl	8000618 <__aeabi_dmul>
 800da88:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800da8c:	3601      	adds	r6, #1
 800da8e:	1064      	asrs	r4, r4, #1
 800da90:	3508      	adds	r5, #8
 800da92:	e7e5      	b.n	800da60 <_dtoa_r+0x340>
 800da94:	f000 80af 	beq.w	800dbf6 <_dtoa_r+0x4d6>
 800da98:	427c      	negs	r4, r7
 800da9a:	4b81      	ldr	r3, [pc, #516]	@ (800dca0 <_dtoa_r+0x580>)
 800da9c:	4d81      	ldr	r5, [pc, #516]	@ (800dca4 <_dtoa_r+0x584>)
 800da9e:	f004 020f 	and.w	r2, r4, #15
 800daa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800daa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800daae:	f7f2 fdb3 	bl	8000618 <__aeabi_dmul>
 800dab2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dab6:	1124      	asrs	r4, r4, #4
 800dab8:	2300      	movs	r3, #0
 800daba:	2602      	movs	r6, #2
 800dabc:	2c00      	cmp	r4, #0
 800dabe:	f040 808f 	bne.w	800dbe0 <_dtoa_r+0x4c0>
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d1d3      	bne.n	800da6e <_dtoa_r+0x34e>
 800dac6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dac8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f000 8094 	beq.w	800dbfa <_dtoa_r+0x4da>
 800dad2:	4b75      	ldr	r3, [pc, #468]	@ (800dca8 <_dtoa_r+0x588>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	4620      	mov	r0, r4
 800dad8:	4629      	mov	r1, r5
 800dada:	f7f3 f80f 	bl	8000afc <__aeabi_dcmplt>
 800dade:	2800      	cmp	r0, #0
 800dae0:	f000 808b 	beq.w	800dbfa <_dtoa_r+0x4da>
 800dae4:	9b03      	ldr	r3, [sp, #12]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f000 8087 	beq.w	800dbfa <_dtoa_r+0x4da>
 800daec:	f1bb 0f00 	cmp.w	fp, #0
 800daf0:	dd34      	ble.n	800db5c <_dtoa_r+0x43c>
 800daf2:	4620      	mov	r0, r4
 800daf4:	4b6d      	ldr	r3, [pc, #436]	@ (800dcac <_dtoa_r+0x58c>)
 800daf6:	2200      	movs	r2, #0
 800daf8:	4629      	mov	r1, r5
 800dafa:	f7f2 fd8d 	bl	8000618 <__aeabi_dmul>
 800dafe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db02:	f107 38ff 	add.w	r8, r7, #4294967295
 800db06:	3601      	adds	r6, #1
 800db08:	465c      	mov	r4, fp
 800db0a:	4630      	mov	r0, r6
 800db0c:	f7f2 fd1a 	bl	8000544 <__aeabi_i2d>
 800db10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db14:	f7f2 fd80 	bl	8000618 <__aeabi_dmul>
 800db18:	4b65      	ldr	r3, [pc, #404]	@ (800dcb0 <_dtoa_r+0x590>)
 800db1a:	2200      	movs	r2, #0
 800db1c:	f7f2 fbc6 	bl	80002ac <__adddf3>
 800db20:	4605      	mov	r5, r0
 800db22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800db26:	2c00      	cmp	r4, #0
 800db28:	d16a      	bne.n	800dc00 <_dtoa_r+0x4e0>
 800db2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db2e:	4b61      	ldr	r3, [pc, #388]	@ (800dcb4 <_dtoa_r+0x594>)
 800db30:	2200      	movs	r2, #0
 800db32:	f7f2 fbb9 	bl	80002a8 <__aeabi_dsub>
 800db36:	4602      	mov	r2, r0
 800db38:	460b      	mov	r3, r1
 800db3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800db3e:	462a      	mov	r2, r5
 800db40:	4633      	mov	r3, r6
 800db42:	f7f2 fff9 	bl	8000b38 <__aeabi_dcmpgt>
 800db46:	2800      	cmp	r0, #0
 800db48:	f040 8298 	bne.w	800e07c <_dtoa_r+0x95c>
 800db4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db50:	462a      	mov	r2, r5
 800db52:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800db56:	f7f2 ffd1 	bl	8000afc <__aeabi_dcmplt>
 800db5a:	bb38      	cbnz	r0, 800dbac <_dtoa_r+0x48c>
 800db5c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800db60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800db64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800db66:	2b00      	cmp	r3, #0
 800db68:	f2c0 8157 	blt.w	800de1a <_dtoa_r+0x6fa>
 800db6c:	2f0e      	cmp	r7, #14
 800db6e:	f300 8154 	bgt.w	800de1a <_dtoa_r+0x6fa>
 800db72:	4b4b      	ldr	r3, [pc, #300]	@ (800dca0 <_dtoa_r+0x580>)
 800db74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800db78:	ed93 7b00 	vldr	d7, [r3]
 800db7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db7e:	2b00      	cmp	r3, #0
 800db80:	ed8d 7b00 	vstr	d7, [sp]
 800db84:	f280 80e5 	bge.w	800dd52 <_dtoa_r+0x632>
 800db88:	9b03      	ldr	r3, [sp, #12]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f300 80e1 	bgt.w	800dd52 <_dtoa_r+0x632>
 800db90:	d10c      	bne.n	800dbac <_dtoa_r+0x48c>
 800db92:	4b48      	ldr	r3, [pc, #288]	@ (800dcb4 <_dtoa_r+0x594>)
 800db94:	2200      	movs	r2, #0
 800db96:	ec51 0b17 	vmov	r0, r1, d7
 800db9a:	f7f2 fd3d 	bl	8000618 <__aeabi_dmul>
 800db9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dba2:	f7f2 ffbf 	bl	8000b24 <__aeabi_dcmpge>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	f000 8266 	beq.w	800e078 <_dtoa_r+0x958>
 800dbac:	2400      	movs	r4, #0
 800dbae:	4625      	mov	r5, r4
 800dbb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbb2:	4656      	mov	r6, sl
 800dbb4:	ea6f 0803 	mvn.w	r8, r3
 800dbb8:	2700      	movs	r7, #0
 800dbba:	4621      	mov	r1, r4
 800dbbc:	4648      	mov	r0, r9
 800dbbe:	f001 f80b 	bl	800ebd8 <_Bfree>
 800dbc2:	2d00      	cmp	r5, #0
 800dbc4:	f000 80bd 	beq.w	800dd42 <_dtoa_r+0x622>
 800dbc8:	b12f      	cbz	r7, 800dbd6 <_dtoa_r+0x4b6>
 800dbca:	42af      	cmp	r7, r5
 800dbcc:	d003      	beq.n	800dbd6 <_dtoa_r+0x4b6>
 800dbce:	4639      	mov	r1, r7
 800dbd0:	4648      	mov	r0, r9
 800dbd2:	f001 f801 	bl	800ebd8 <_Bfree>
 800dbd6:	4629      	mov	r1, r5
 800dbd8:	4648      	mov	r0, r9
 800dbda:	f000 fffd 	bl	800ebd8 <_Bfree>
 800dbde:	e0b0      	b.n	800dd42 <_dtoa_r+0x622>
 800dbe0:	07e2      	lsls	r2, r4, #31
 800dbe2:	d505      	bpl.n	800dbf0 <_dtoa_r+0x4d0>
 800dbe4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dbe8:	f7f2 fd16 	bl	8000618 <__aeabi_dmul>
 800dbec:	3601      	adds	r6, #1
 800dbee:	2301      	movs	r3, #1
 800dbf0:	1064      	asrs	r4, r4, #1
 800dbf2:	3508      	adds	r5, #8
 800dbf4:	e762      	b.n	800dabc <_dtoa_r+0x39c>
 800dbf6:	2602      	movs	r6, #2
 800dbf8:	e765      	b.n	800dac6 <_dtoa_r+0x3a6>
 800dbfa:	9c03      	ldr	r4, [sp, #12]
 800dbfc:	46b8      	mov	r8, r7
 800dbfe:	e784      	b.n	800db0a <_dtoa_r+0x3ea>
 800dc00:	4b27      	ldr	r3, [pc, #156]	@ (800dca0 <_dtoa_r+0x580>)
 800dc02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc0c:	4454      	add	r4, sl
 800dc0e:	2900      	cmp	r1, #0
 800dc10:	d054      	beq.n	800dcbc <_dtoa_r+0x59c>
 800dc12:	4929      	ldr	r1, [pc, #164]	@ (800dcb8 <_dtoa_r+0x598>)
 800dc14:	2000      	movs	r0, #0
 800dc16:	f7f2 fe29 	bl	800086c <__aeabi_ddiv>
 800dc1a:	4633      	mov	r3, r6
 800dc1c:	462a      	mov	r2, r5
 800dc1e:	f7f2 fb43 	bl	80002a8 <__aeabi_dsub>
 800dc22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dc26:	4656      	mov	r6, sl
 800dc28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc2c:	f7f2 ffa4 	bl	8000b78 <__aeabi_d2iz>
 800dc30:	4605      	mov	r5, r0
 800dc32:	f7f2 fc87 	bl	8000544 <__aeabi_i2d>
 800dc36:	4602      	mov	r2, r0
 800dc38:	460b      	mov	r3, r1
 800dc3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc3e:	f7f2 fb33 	bl	80002a8 <__aeabi_dsub>
 800dc42:	3530      	adds	r5, #48	@ 0x30
 800dc44:	4602      	mov	r2, r0
 800dc46:	460b      	mov	r3, r1
 800dc48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dc4c:	f806 5b01 	strb.w	r5, [r6], #1
 800dc50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dc54:	f7f2 ff52 	bl	8000afc <__aeabi_dcmplt>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d172      	bne.n	800dd42 <_dtoa_r+0x622>
 800dc5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc60:	4911      	ldr	r1, [pc, #68]	@ (800dca8 <_dtoa_r+0x588>)
 800dc62:	2000      	movs	r0, #0
 800dc64:	f7f2 fb20 	bl	80002a8 <__aeabi_dsub>
 800dc68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dc6c:	f7f2 ff46 	bl	8000afc <__aeabi_dcmplt>
 800dc70:	2800      	cmp	r0, #0
 800dc72:	f040 80b4 	bne.w	800ddde <_dtoa_r+0x6be>
 800dc76:	42a6      	cmp	r6, r4
 800dc78:	f43f af70 	beq.w	800db5c <_dtoa_r+0x43c>
 800dc7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dc80:	4b0a      	ldr	r3, [pc, #40]	@ (800dcac <_dtoa_r+0x58c>)
 800dc82:	2200      	movs	r2, #0
 800dc84:	f7f2 fcc8 	bl	8000618 <__aeabi_dmul>
 800dc88:	4b08      	ldr	r3, [pc, #32]	@ (800dcac <_dtoa_r+0x58c>)
 800dc8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dc8e:	2200      	movs	r2, #0
 800dc90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc94:	f7f2 fcc0 	bl	8000618 <__aeabi_dmul>
 800dc98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc9c:	e7c4      	b.n	800dc28 <_dtoa_r+0x508>
 800dc9e:	bf00      	nop
 800dca0:	080152d0 	.word	0x080152d0
 800dca4:	080152a8 	.word	0x080152a8
 800dca8:	3ff00000 	.word	0x3ff00000
 800dcac:	40240000 	.word	0x40240000
 800dcb0:	401c0000 	.word	0x401c0000
 800dcb4:	40140000 	.word	0x40140000
 800dcb8:	3fe00000 	.word	0x3fe00000
 800dcbc:	4631      	mov	r1, r6
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	f7f2 fcaa 	bl	8000618 <__aeabi_dmul>
 800dcc4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dcc8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800dcca:	4656      	mov	r6, sl
 800dccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcd0:	f7f2 ff52 	bl	8000b78 <__aeabi_d2iz>
 800dcd4:	4605      	mov	r5, r0
 800dcd6:	f7f2 fc35 	bl	8000544 <__aeabi_i2d>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	460b      	mov	r3, r1
 800dcde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dce2:	f7f2 fae1 	bl	80002a8 <__aeabi_dsub>
 800dce6:	3530      	adds	r5, #48	@ 0x30
 800dce8:	f806 5b01 	strb.w	r5, [r6], #1
 800dcec:	4602      	mov	r2, r0
 800dcee:	460b      	mov	r3, r1
 800dcf0:	42a6      	cmp	r6, r4
 800dcf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dcf6:	f04f 0200 	mov.w	r2, #0
 800dcfa:	d124      	bne.n	800dd46 <_dtoa_r+0x626>
 800dcfc:	4baf      	ldr	r3, [pc, #700]	@ (800dfbc <_dtoa_r+0x89c>)
 800dcfe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dd02:	f7f2 fad3 	bl	80002ac <__adddf3>
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd0e:	f7f2 ff13 	bl	8000b38 <__aeabi_dcmpgt>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d163      	bne.n	800ddde <_dtoa_r+0x6be>
 800dd16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dd1a:	49a8      	ldr	r1, [pc, #672]	@ (800dfbc <_dtoa_r+0x89c>)
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	f7f2 fac3 	bl	80002a8 <__aeabi_dsub>
 800dd22:	4602      	mov	r2, r0
 800dd24:	460b      	mov	r3, r1
 800dd26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd2a:	f7f2 fee7 	bl	8000afc <__aeabi_dcmplt>
 800dd2e:	2800      	cmp	r0, #0
 800dd30:	f43f af14 	beq.w	800db5c <_dtoa_r+0x43c>
 800dd34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800dd36:	1e73      	subs	r3, r6, #1
 800dd38:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd3e:	2b30      	cmp	r3, #48	@ 0x30
 800dd40:	d0f8      	beq.n	800dd34 <_dtoa_r+0x614>
 800dd42:	4647      	mov	r7, r8
 800dd44:	e03b      	b.n	800ddbe <_dtoa_r+0x69e>
 800dd46:	4b9e      	ldr	r3, [pc, #632]	@ (800dfc0 <_dtoa_r+0x8a0>)
 800dd48:	f7f2 fc66 	bl	8000618 <__aeabi_dmul>
 800dd4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd50:	e7bc      	b.n	800dccc <_dtoa_r+0x5ac>
 800dd52:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dd56:	4656      	mov	r6, sl
 800dd58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	4629      	mov	r1, r5
 800dd60:	f7f2 fd84 	bl	800086c <__aeabi_ddiv>
 800dd64:	f7f2 ff08 	bl	8000b78 <__aeabi_d2iz>
 800dd68:	4680      	mov	r8, r0
 800dd6a:	f7f2 fbeb 	bl	8000544 <__aeabi_i2d>
 800dd6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd72:	f7f2 fc51 	bl	8000618 <__aeabi_dmul>
 800dd76:	4602      	mov	r2, r0
 800dd78:	460b      	mov	r3, r1
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dd82:	f7f2 fa91 	bl	80002a8 <__aeabi_dsub>
 800dd86:	f806 4b01 	strb.w	r4, [r6], #1
 800dd8a:	9d03      	ldr	r5, [sp, #12]
 800dd8c:	eba6 040a 	sub.w	r4, r6, sl
 800dd90:	42a5      	cmp	r5, r4
 800dd92:	4602      	mov	r2, r0
 800dd94:	460b      	mov	r3, r1
 800dd96:	d133      	bne.n	800de00 <_dtoa_r+0x6e0>
 800dd98:	f7f2 fa88 	bl	80002ac <__adddf3>
 800dd9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dda0:	4604      	mov	r4, r0
 800dda2:	460d      	mov	r5, r1
 800dda4:	f7f2 fec8 	bl	8000b38 <__aeabi_dcmpgt>
 800dda8:	b9c0      	cbnz	r0, 800dddc <_dtoa_r+0x6bc>
 800ddaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddae:	4620      	mov	r0, r4
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	f7f2 fe99 	bl	8000ae8 <__aeabi_dcmpeq>
 800ddb6:	b110      	cbz	r0, 800ddbe <_dtoa_r+0x69e>
 800ddb8:	f018 0f01 	tst.w	r8, #1
 800ddbc:	d10e      	bne.n	800dddc <_dtoa_r+0x6bc>
 800ddbe:	9902      	ldr	r1, [sp, #8]
 800ddc0:	4648      	mov	r0, r9
 800ddc2:	f000 ff09 	bl	800ebd8 <_Bfree>
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	7033      	strb	r3, [r6, #0]
 800ddca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ddcc:	3701      	adds	r7, #1
 800ddce:	601f      	str	r7, [r3, #0]
 800ddd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	f000 824b 	beq.w	800e26e <_dtoa_r+0xb4e>
 800ddd8:	601e      	str	r6, [r3, #0]
 800ddda:	e248      	b.n	800e26e <_dtoa_r+0xb4e>
 800dddc:	46b8      	mov	r8, r7
 800ddde:	4633      	mov	r3, r6
 800dde0:	461e      	mov	r6, r3
 800dde2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dde6:	2a39      	cmp	r2, #57	@ 0x39
 800dde8:	d106      	bne.n	800ddf8 <_dtoa_r+0x6d8>
 800ddea:	459a      	cmp	sl, r3
 800ddec:	d1f8      	bne.n	800dde0 <_dtoa_r+0x6c0>
 800ddee:	2230      	movs	r2, #48	@ 0x30
 800ddf0:	f108 0801 	add.w	r8, r8, #1
 800ddf4:	f88a 2000 	strb.w	r2, [sl]
 800ddf8:	781a      	ldrb	r2, [r3, #0]
 800ddfa:	3201      	adds	r2, #1
 800ddfc:	701a      	strb	r2, [r3, #0]
 800ddfe:	e7a0      	b.n	800dd42 <_dtoa_r+0x622>
 800de00:	4b6f      	ldr	r3, [pc, #444]	@ (800dfc0 <_dtoa_r+0x8a0>)
 800de02:	2200      	movs	r2, #0
 800de04:	f7f2 fc08 	bl	8000618 <__aeabi_dmul>
 800de08:	2200      	movs	r2, #0
 800de0a:	2300      	movs	r3, #0
 800de0c:	4604      	mov	r4, r0
 800de0e:	460d      	mov	r5, r1
 800de10:	f7f2 fe6a 	bl	8000ae8 <__aeabi_dcmpeq>
 800de14:	2800      	cmp	r0, #0
 800de16:	d09f      	beq.n	800dd58 <_dtoa_r+0x638>
 800de18:	e7d1      	b.n	800ddbe <_dtoa_r+0x69e>
 800de1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de1c:	2a00      	cmp	r2, #0
 800de1e:	f000 80ea 	beq.w	800dff6 <_dtoa_r+0x8d6>
 800de22:	9a07      	ldr	r2, [sp, #28]
 800de24:	2a01      	cmp	r2, #1
 800de26:	f300 80cd 	bgt.w	800dfc4 <_dtoa_r+0x8a4>
 800de2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800de2c:	2a00      	cmp	r2, #0
 800de2e:	f000 80c1 	beq.w	800dfb4 <_dtoa_r+0x894>
 800de32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800de36:	9c08      	ldr	r4, [sp, #32]
 800de38:	9e00      	ldr	r6, [sp, #0]
 800de3a:	9a00      	ldr	r2, [sp, #0]
 800de3c:	441a      	add	r2, r3
 800de3e:	9200      	str	r2, [sp, #0]
 800de40:	9a06      	ldr	r2, [sp, #24]
 800de42:	2101      	movs	r1, #1
 800de44:	441a      	add	r2, r3
 800de46:	4648      	mov	r0, r9
 800de48:	9206      	str	r2, [sp, #24]
 800de4a:	f000 ffc3 	bl	800edd4 <__i2b>
 800de4e:	4605      	mov	r5, r0
 800de50:	b166      	cbz	r6, 800de6c <_dtoa_r+0x74c>
 800de52:	9b06      	ldr	r3, [sp, #24]
 800de54:	2b00      	cmp	r3, #0
 800de56:	dd09      	ble.n	800de6c <_dtoa_r+0x74c>
 800de58:	42b3      	cmp	r3, r6
 800de5a:	9a00      	ldr	r2, [sp, #0]
 800de5c:	bfa8      	it	ge
 800de5e:	4633      	movge	r3, r6
 800de60:	1ad2      	subs	r2, r2, r3
 800de62:	9200      	str	r2, [sp, #0]
 800de64:	9a06      	ldr	r2, [sp, #24]
 800de66:	1af6      	subs	r6, r6, r3
 800de68:	1ad3      	subs	r3, r2, r3
 800de6a:	9306      	str	r3, [sp, #24]
 800de6c:	9b08      	ldr	r3, [sp, #32]
 800de6e:	b30b      	cbz	r3, 800deb4 <_dtoa_r+0x794>
 800de70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de72:	2b00      	cmp	r3, #0
 800de74:	f000 80c6 	beq.w	800e004 <_dtoa_r+0x8e4>
 800de78:	2c00      	cmp	r4, #0
 800de7a:	f000 80c0 	beq.w	800dffe <_dtoa_r+0x8de>
 800de7e:	4629      	mov	r1, r5
 800de80:	4622      	mov	r2, r4
 800de82:	4648      	mov	r0, r9
 800de84:	f001 f85e 	bl	800ef44 <__pow5mult>
 800de88:	9a02      	ldr	r2, [sp, #8]
 800de8a:	4601      	mov	r1, r0
 800de8c:	4605      	mov	r5, r0
 800de8e:	4648      	mov	r0, r9
 800de90:	f000 ffb6 	bl	800ee00 <__multiply>
 800de94:	9902      	ldr	r1, [sp, #8]
 800de96:	4680      	mov	r8, r0
 800de98:	4648      	mov	r0, r9
 800de9a:	f000 fe9d 	bl	800ebd8 <_Bfree>
 800de9e:	9b08      	ldr	r3, [sp, #32]
 800dea0:	1b1b      	subs	r3, r3, r4
 800dea2:	9308      	str	r3, [sp, #32]
 800dea4:	f000 80b1 	beq.w	800e00a <_dtoa_r+0x8ea>
 800dea8:	9a08      	ldr	r2, [sp, #32]
 800deaa:	4641      	mov	r1, r8
 800deac:	4648      	mov	r0, r9
 800deae:	f001 f849 	bl	800ef44 <__pow5mult>
 800deb2:	9002      	str	r0, [sp, #8]
 800deb4:	2101      	movs	r1, #1
 800deb6:	4648      	mov	r0, r9
 800deb8:	f000 ff8c 	bl	800edd4 <__i2b>
 800debc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800debe:	4604      	mov	r4, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	f000 81d8 	beq.w	800e276 <_dtoa_r+0xb56>
 800dec6:	461a      	mov	r2, r3
 800dec8:	4601      	mov	r1, r0
 800deca:	4648      	mov	r0, r9
 800decc:	f001 f83a 	bl	800ef44 <__pow5mult>
 800ded0:	9b07      	ldr	r3, [sp, #28]
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	4604      	mov	r4, r0
 800ded6:	f300 809f 	bgt.w	800e018 <_dtoa_r+0x8f8>
 800deda:	9b04      	ldr	r3, [sp, #16]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f040 8097 	bne.w	800e010 <_dtoa_r+0x8f0>
 800dee2:	9b05      	ldr	r3, [sp, #20]
 800dee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f040 8093 	bne.w	800e014 <_dtoa_r+0x8f4>
 800deee:	9b05      	ldr	r3, [sp, #20]
 800def0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800def4:	0d1b      	lsrs	r3, r3, #20
 800def6:	051b      	lsls	r3, r3, #20
 800def8:	b133      	cbz	r3, 800df08 <_dtoa_r+0x7e8>
 800defa:	9b00      	ldr	r3, [sp, #0]
 800defc:	3301      	adds	r3, #1
 800defe:	9300      	str	r3, [sp, #0]
 800df00:	9b06      	ldr	r3, [sp, #24]
 800df02:	3301      	adds	r3, #1
 800df04:	9306      	str	r3, [sp, #24]
 800df06:	2301      	movs	r3, #1
 800df08:	9308      	str	r3, [sp, #32]
 800df0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f000 81b8 	beq.w	800e282 <_dtoa_r+0xb62>
 800df12:	6923      	ldr	r3, [r4, #16]
 800df14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df18:	6918      	ldr	r0, [r3, #16]
 800df1a:	f000 ff0f 	bl	800ed3c <__hi0bits>
 800df1e:	f1c0 0020 	rsb	r0, r0, #32
 800df22:	9b06      	ldr	r3, [sp, #24]
 800df24:	4418      	add	r0, r3
 800df26:	f010 001f 	ands.w	r0, r0, #31
 800df2a:	f000 8082 	beq.w	800e032 <_dtoa_r+0x912>
 800df2e:	f1c0 0320 	rsb	r3, r0, #32
 800df32:	2b04      	cmp	r3, #4
 800df34:	dd73      	ble.n	800e01e <_dtoa_r+0x8fe>
 800df36:	9b00      	ldr	r3, [sp, #0]
 800df38:	f1c0 001c 	rsb	r0, r0, #28
 800df3c:	4403      	add	r3, r0
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	9b06      	ldr	r3, [sp, #24]
 800df42:	4403      	add	r3, r0
 800df44:	4406      	add	r6, r0
 800df46:	9306      	str	r3, [sp, #24]
 800df48:	9b00      	ldr	r3, [sp, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	dd05      	ble.n	800df5a <_dtoa_r+0x83a>
 800df4e:	9902      	ldr	r1, [sp, #8]
 800df50:	461a      	mov	r2, r3
 800df52:	4648      	mov	r0, r9
 800df54:	f001 f850 	bl	800eff8 <__lshift>
 800df58:	9002      	str	r0, [sp, #8]
 800df5a:	9b06      	ldr	r3, [sp, #24]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	dd05      	ble.n	800df6c <_dtoa_r+0x84c>
 800df60:	4621      	mov	r1, r4
 800df62:	461a      	mov	r2, r3
 800df64:	4648      	mov	r0, r9
 800df66:	f001 f847 	bl	800eff8 <__lshift>
 800df6a:	4604      	mov	r4, r0
 800df6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d061      	beq.n	800e036 <_dtoa_r+0x916>
 800df72:	9802      	ldr	r0, [sp, #8]
 800df74:	4621      	mov	r1, r4
 800df76:	f001 f8ab 	bl	800f0d0 <__mcmp>
 800df7a:	2800      	cmp	r0, #0
 800df7c:	da5b      	bge.n	800e036 <_dtoa_r+0x916>
 800df7e:	2300      	movs	r3, #0
 800df80:	9902      	ldr	r1, [sp, #8]
 800df82:	220a      	movs	r2, #10
 800df84:	4648      	mov	r0, r9
 800df86:	f000 fe49 	bl	800ec1c <__multadd>
 800df8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df8c:	9002      	str	r0, [sp, #8]
 800df8e:	f107 38ff 	add.w	r8, r7, #4294967295
 800df92:	2b00      	cmp	r3, #0
 800df94:	f000 8177 	beq.w	800e286 <_dtoa_r+0xb66>
 800df98:	4629      	mov	r1, r5
 800df9a:	2300      	movs	r3, #0
 800df9c:	220a      	movs	r2, #10
 800df9e:	4648      	mov	r0, r9
 800dfa0:	f000 fe3c 	bl	800ec1c <__multadd>
 800dfa4:	f1bb 0f00 	cmp.w	fp, #0
 800dfa8:	4605      	mov	r5, r0
 800dfaa:	dc6f      	bgt.n	800e08c <_dtoa_r+0x96c>
 800dfac:	9b07      	ldr	r3, [sp, #28]
 800dfae:	2b02      	cmp	r3, #2
 800dfb0:	dc49      	bgt.n	800e046 <_dtoa_r+0x926>
 800dfb2:	e06b      	b.n	800e08c <_dtoa_r+0x96c>
 800dfb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dfb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dfba:	e73c      	b.n	800de36 <_dtoa_r+0x716>
 800dfbc:	3fe00000 	.word	0x3fe00000
 800dfc0:	40240000 	.word	0x40240000
 800dfc4:	9b03      	ldr	r3, [sp, #12]
 800dfc6:	1e5c      	subs	r4, r3, #1
 800dfc8:	9b08      	ldr	r3, [sp, #32]
 800dfca:	42a3      	cmp	r3, r4
 800dfcc:	db09      	blt.n	800dfe2 <_dtoa_r+0x8c2>
 800dfce:	1b1c      	subs	r4, r3, r4
 800dfd0:	9b03      	ldr	r3, [sp, #12]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	f6bf af30 	bge.w	800de38 <_dtoa_r+0x718>
 800dfd8:	9b00      	ldr	r3, [sp, #0]
 800dfda:	9a03      	ldr	r2, [sp, #12]
 800dfdc:	1a9e      	subs	r6, r3, r2
 800dfde:	2300      	movs	r3, #0
 800dfe0:	e72b      	b.n	800de3a <_dtoa_r+0x71a>
 800dfe2:	9b08      	ldr	r3, [sp, #32]
 800dfe4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dfe6:	9408      	str	r4, [sp, #32]
 800dfe8:	1ae3      	subs	r3, r4, r3
 800dfea:	441a      	add	r2, r3
 800dfec:	9e00      	ldr	r6, [sp, #0]
 800dfee:	9b03      	ldr	r3, [sp, #12]
 800dff0:	920d      	str	r2, [sp, #52]	@ 0x34
 800dff2:	2400      	movs	r4, #0
 800dff4:	e721      	b.n	800de3a <_dtoa_r+0x71a>
 800dff6:	9c08      	ldr	r4, [sp, #32]
 800dff8:	9e00      	ldr	r6, [sp, #0]
 800dffa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800dffc:	e728      	b.n	800de50 <_dtoa_r+0x730>
 800dffe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e002:	e751      	b.n	800dea8 <_dtoa_r+0x788>
 800e004:	9a08      	ldr	r2, [sp, #32]
 800e006:	9902      	ldr	r1, [sp, #8]
 800e008:	e750      	b.n	800deac <_dtoa_r+0x78c>
 800e00a:	f8cd 8008 	str.w	r8, [sp, #8]
 800e00e:	e751      	b.n	800deb4 <_dtoa_r+0x794>
 800e010:	2300      	movs	r3, #0
 800e012:	e779      	b.n	800df08 <_dtoa_r+0x7e8>
 800e014:	9b04      	ldr	r3, [sp, #16]
 800e016:	e777      	b.n	800df08 <_dtoa_r+0x7e8>
 800e018:	2300      	movs	r3, #0
 800e01a:	9308      	str	r3, [sp, #32]
 800e01c:	e779      	b.n	800df12 <_dtoa_r+0x7f2>
 800e01e:	d093      	beq.n	800df48 <_dtoa_r+0x828>
 800e020:	9a00      	ldr	r2, [sp, #0]
 800e022:	331c      	adds	r3, #28
 800e024:	441a      	add	r2, r3
 800e026:	9200      	str	r2, [sp, #0]
 800e028:	9a06      	ldr	r2, [sp, #24]
 800e02a:	441a      	add	r2, r3
 800e02c:	441e      	add	r6, r3
 800e02e:	9206      	str	r2, [sp, #24]
 800e030:	e78a      	b.n	800df48 <_dtoa_r+0x828>
 800e032:	4603      	mov	r3, r0
 800e034:	e7f4      	b.n	800e020 <_dtoa_r+0x900>
 800e036:	9b03      	ldr	r3, [sp, #12]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	46b8      	mov	r8, r7
 800e03c:	dc20      	bgt.n	800e080 <_dtoa_r+0x960>
 800e03e:	469b      	mov	fp, r3
 800e040:	9b07      	ldr	r3, [sp, #28]
 800e042:	2b02      	cmp	r3, #2
 800e044:	dd1e      	ble.n	800e084 <_dtoa_r+0x964>
 800e046:	f1bb 0f00 	cmp.w	fp, #0
 800e04a:	f47f adb1 	bne.w	800dbb0 <_dtoa_r+0x490>
 800e04e:	4621      	mov	r1, r4
 800e050:	465b      	mov	r3, fp
 800e052:	2205      	movs	r2, #5
 800e054:	4648      	mov	r0, r9
 800e056:	f000 fde1 	bl	800ec1c <__multadd>
 800e05a:	4601      	mov	r1, r0
 800e05c:	4604      	mov	r4, r0
 800e05e:	9802      	ldr	r0, [sp, #8]
 800e060:	f001 f836 	bl	800f0d0 <__mcmp>
 800e064:	2800      	cmp	r0, #0
 800e066:	f77f ada3 	ble.w	800dbb0 <_dtoa_r+0x490>
 800e06a:	4656      	mov	r6, sl
 800e06c:	2331      	movs	r3, #49	@ 0x31
 800e06e:	f806 3b01 	strb.w	r3, [r6], #1
 800e072:	f108 0801 	add.w	r8, r8, #1
 800e076:	e59f      	b.n	800dbb8 <_dtoa_r+0x498>
 800e078:	9c03      	ldr	r4, [sp, #12]
 800e07a:	46b8      	mov	r8, r7
 800e07c:	4625      	mov	r5, r4
 800e07e:	e7f4      	b.n	800e06a <_dtoa_r+0x94a>
 800e080:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e086:	2b00      	cmp	r3, #0
 800e088:	f000 8101 	beq.w	800e28e <_dtoa_r+0xb6e>
 800e08c:	2e00      	cmp	r6, #0
 800e08e:	dd05      	ble.n	800e09c <_dtoa_r+0x97c>
 800e090:	4629      	mov	r1, r5
 800e092:	4632      	mov	r2, r6
 800e094:	4648      	mov	r0, r9
 800e096:	f000 ffaf 	bl	800eff8 <__lshift>
 800e09a:	4605      	mov	r5, r0
 800e09c:	9b08      	ldr	r3, [sp, #32]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d05c      	beq.n	800e15c <_dtoa_r+0xa3c>
 800e0a2:	6869      	ldr	r1, [r5, #4]
 800e0a4:	4648      	mov	r0, r9
 800e0a6:	f000 fd57 	bl	800eb58 <_Balloc>
 800e0aa:	4606      	mov	r6, r0
 800e0ac:	b928      	cbnz	r0, 800e0ba <_dtoa_r+0x99a>
 800e0ae:	4b82      	ldr	r3, [pc, #520]	@ (800e2b8 <_dtoa_r+0xb98>)
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e0b6:	f7ff bb4a 	b.w	800d74e <_dtoa_r+0x2e>
 800e0ba:	692a      	ldr	r2, [r5, #16]
 800e0bc:	3202      	adds	r2, #2
 800e0be:	0092      	lsls	r2, r2, #2
 800e0c0:	f105 010c 	add.w	r1, r5, #12
 800e0c4:	300c      	adds	r0, #12
 800e0c6:	f7ff fa68 	bl	800d59a <memcpy>
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	4631      	mov	r1, r6
 800e0ce:	4648      	mov	r0, r9
 800e0d0:	f000 ff92 	bl	800eff8 <__lshift>
 800e0d4:	f10a 0301 	add.w	r3, sl, #1
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	eb0a 030b 	add.w	r3, sl, fp
 800e0de:	9308      	str	r3, [sp, #32]
 800e0e0:	9b04      	ldr	r3, [sp, #16]
 800e0e2:	f003 0301 	and.w	r3, r3, #1
 800e0e6:	462f      	mov	r7, r5
 800e0e8:	9306      	str	r3, [sp, #24]
 800e0ea:	4605      	mov	r5, r0
 800e0ec:	9b00      	ldr	r3, [sp, #0]
 800e0ee:	9802      	ldr	r0, [sp, #8]
 800e0f0:	4621      	mov	r1, r4
 800e0f2:	f103 3bff 	add.w	fp, r3, #4294967295
 800e0f6:	f7ff fa8b 	bl	800d610 <quorem>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	3330      	adds	r3, #48	@ 0x30
 800e0fe:	9003      	str	r0, [sp, #12]
 800e100:	4639      	mov	r1, r7
 800e102:	9802      	ldr	r0, [sp, #8]
 800e104:	9309      	str	r3, [sp, #36]	@ 0x24
 800e106:	f000 ffe3 	bl	800f0d0 <__mcmp>
 800e10a:	462a      	mov	r2, r5
 800e10c:	9004      	str	r0, [sp, #16]
 800e10e:	4621      	mov	r1, r4
 800e110:	4648      	mov	r0, r9
 800e112:	f000 fff9 	bl	800f108 <__mdiff>
 800e116:	68c2      	ldr	r2, [r0, #12]
 800e118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e11a:	4606      	mov	r6, r0
 800e11c:	bb02      	cbnz	r2, 800e160 <_dtoa_r+0xa40>
 800e11e:	4601      	mov	r1, r0
 800e120:	9802      	ldr	r0, [sp, #8]
 800e122:	f000 ffd5 	bl	800f0d0 <__mcmp>
 800e126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e128:	4602      	mov	r2, r0
 800e12a:	4631      	mov	r1, r6
 800e12c:	4648      	mov	r0, r9
 800e12e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e130:	9309      	str	r3, [sp, #36]	@ 0x24
 800e132:	f000 fd51 	bl	800ebd8 <_Bfree>
 800e136:	9b07      	ldr	r3, [sp, #28]
 800e138:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e13a:	9e00      	ldr	r6, [sp, #0]
 800e13c:	ea42 0103 	orr.w	r1, r2, r3
 800e140:	9b06      	ldr	r3, [sp, #24]
 800e142:	4319      	orrs	r1, r3
 800e144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e146:	d10d      	bne.n	800e164 <_dtoa_r+0xa44>
 800e148:	2b39      	cmp	r3, #57	@ 0x39
 800e14a:	d027      	beq.n	800e19c <_dtoa_r+0xa7c>
 800e14c:	9a04      	ldr	r2, [sp, #16]
 800e14e:	2a00      	cmp	r2, #0
 800e150:	dd01      	ble.n	800e156 <_dtoa_r+0xa36>
 800e152:	9b03      	ldr	r3, [sp, #12]
 800e154:	3331      	adds	r3, #49	@ 0x31
 800e156:	f88b 3000 	strb.w	r3, [fp]
 800e15a:	e52e      	b.n	800dbba <_dtoa_r+0x49a>
 800e15c:	4628      	mov	r0, r5
 800e15e:	e7b9      	b.n	800e0d4 <_dtoa_r+0x9b4>
 800e160:	2201      	movs	r2, #1
 800e162:	e7e2      	b.n	800e12a <_dtoa_r+0xa0a>
 800e164:	9904      	ldr	r1, [sp, #16]
 800e166:	2900      	cmp	r1, #0
 800e168:	db04      	blt.n	800e174 <_dtoa_r+0xa54>
 800e16a:	9807      	ldr	r0, [sp, #28]
 800e16c:	4301      	orrs	r1, r0
 800e16e:	9806      	ldr	r0, [sp, #24]
 800e170:	4301      	orrs	r1, r0
 800e172:	d120      	bne.n	800e1b6 <_dtoa_r+0xa96>
 800e174:	2a00      	cmp	r2, #0
 800e176:	ddee      	ble.n	800e156 <_dtoa_r+0xa36>
 800e178:	9902      	ldr	r1, [sp, #8]
 800e17a:	9300      	str	r3, [sp, #0]
 800e17c:	2201      	movs	r2, #1
 800e17e:	4648      	mov	r0, r9
 800e180:	f000 ff3a 	bl	800eff8 <__lshift>
 800e184:	4621      	mov	r1, r4
 800e186:	9002      	str	r0, [sp, #8]
 800e188:	f000 ffa2 	bl	800f0d0 <__mcmp>
 800e18c:	2800      	cmp	r0, #0
 800e18e:	9b00      	ldr	r3, [sp, #0]
 800e190:	dc02      	bgt.n	800e198 <_dtoa_r+0xa78>
 800e192:	d1e0      	bne.n	800e156 <_dtoa_r+0xa36>
 800e194:	07da      	lsls	r2, r3, #31
 800e196:	d5de      	bpl.n	800e156 <_dtoa_r+0xa36>
 800e198:	2b39      	cmp	r3, #57	@ 0x39
 800e19a:	d1da      	bne.n	800e152 <_dtoa_r+0xa32>
 800e19c:	2339      	movs	r3, #57	@ 0x39
 800e19e:	f88b 3000 	strb.w	r3, [fp]
 800e1a2:	4633      	mov	r3, r6
 800e1a4:	461e      	mov	r6, r3
 800e1a6:	3b01      	subs	r3, #1
 800e1a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e1ac:	2a39      	cmp	r2, #57	@ 0x39
 800e1ae:	d04e      	beq.n	800e24e <_dtoa_r+0xb2e>
 800e1b0:	3201      	adds	r2, #1
 800e1b2:	701a      	strb	r2, [r3, #0]
 800e1b4:	e501      	b.n	800dbba <_dtoa_r+0x49a>
 800e1b6:	2a00      	cmp	r2, #0
 800e1b8:	dd03      	ble.n	800e1c2 <_dtoa_r+0xaa2>
 800e1ba:	2b39      	cmp	r3, #57	@ 0x39
 800e1bc:	d0ee      	beq.n	800e19c <_dtoa_r+0xa7c>
 800e1be:	3301      	adds	r3, #1
 800e1c0:	e7c9      	b.n	800e156 <_dtoa_r+0xa36>
 800e1c2:	9a00      	ldr	r2, [sp, #0]
 800e1c4:	9908      	ldr	r1, [sp, #32]
 800e1c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e1ca:	428a      	cmp	r2, r1
 800e1cc:	d028      	beq.n	800e220 <_dtoa_r+0xb00>
 800e1ce:	9902      	ldr	r1, [sp, #8]
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	220a      	movs	r2, #10
 800e1d4:	4648      	mov	r0, r9
 800e1d6:	f000 fd21 	bl	800ec1c <__multadd>
 800e1da:	42af      	cmp	r7, r5
 800e1dc:	9002      	str	r0, [sp, #8]
 800e1de:	f04f 0300 	mov.w	r3, #0
 800e1e2:	f04f 020a 	mov.w	r2, #10
 800e1e6:	4639      	mov	r1, r7
 800e1e8:	4648      	mov	r0, r9
 800e1ea:	d107      	bne.n	800e1fc <_dtoa_r+0xadc>
 800e1ec:	f000 fd16 	bl	800ec1c <__multadd>
 800e1f0:	4607      	mov	r7, r0
 800e1f2:	4605      	mov	r5, r0
 800e1f4:	9b00      	ldr	r3, [sp, #0]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	e777      	b.n	800e0ec <_dtoa_r+0x9cc>
 800e1fc:	f000 fd0e 	bl	800ec1c <__multadd>
 800e200:	4629      	mov	r1, r5
 800e202:	4607      	mov	r7, r0
 800e204:	2300      	movs	r3, #0
 800e206:	220a      	movs	r2, #10
 800e208:	4648      	mov	r0, r9
 800e20a:	f000 fd07 	bl	800ec1c <__multadd>
 800e20e:	4605      	mov	r5, r0
 800e210:	e7f0      	b.n	800e1f4 <_dtoa_r+0xad4>
 800e212:	f1bb 0f00 	cmp.w	fp, #0
 800e216:	bfcc      	ite	gt
 800e218:	465e      	movgt	r6, fp
 800e21a:	2601      	movle	r6, #1
 800e21c:	4456      	add	r6, sl
 800e21e:	2700      	movs	r7, #0
 800e220:	9902      	ldr	r1, [sp, #8]
 800e222:	9300      	str	r3, [sp, #0]
 800e224:	2201      	movs	r2, #1
 800e226:	4648      	mov	r0, r9
 800e228:	f000 fee6 	bl	800eff8 <__lshift>
 800e22c:	4621      	mov	r1, r4
 800e22e:	9002      	str	r0, [sp, #8]
 800e230:	f000 ff4e 	bl	800f0d0 <__mcmp>
 800e234:	2800      	cmp	r0, #0
 800e236:	dcb4      	bgt.n	800e1a2 <_dtoa_r+0xa82>
 800e238:	d102      	bne.n	800e240 <_dtoa_r+0xb20>
 800e23a:	9b00      	ldr	r3, [sp, #0]
 800e23c:	07db      	lsls	r3, r3, #31
 800e23e:	d4b0      	bmi.n	800e1a2 <_dtoa_r+0xa82>
 800e240:	4633      	mov	r3, r6
 800e242:	461e      	mov	r6, r3
 800e244:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e248:	2a30      	cmp	r2, #48	@ 0x30
 800e24a:	d0fa      	beq.n	800e242 <_dtoa_r+0xb22>
 800e24c:	e4b5      	b.n	800dbba <_dtoa_r+0x49a>
 800e24e:	459a      	cmp	sl, r3
 800e250:	d1a8      	bne.n	800e1a4 <_dtoa_r+0xa84>
 800e252:	2331      	movs	r3, #49	@ 0x31
 800e254:	f108 0801 	add.w	r8, r8, #1
 800e258:	f88a 3000 	strb.w	r3, [sl]
 800e25c:	e4ad      	b.n	800dbba <_dtoa_r+0x49a>
 800e25e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e260:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e2bc <_dtoa_r+0xb9c>
 800e264:	b11b      	cbz	r3, 800e26e <_dtoa_r+0xb4e>
 800e266:	f10a 0308 	add.w	r3, sl, #8
 800e26a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e26c:	6013      	str	r3, [r2, #0]
 800e26e:	4650      	mov	r0, sl
 800e270:	b017      	add	sp, #92	@ 0x5c
 800e272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e276:	9b07      	ldr	r3, [sp, #28]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	f77f ae2e 	ble.w	800deda <_dtoa_r+0x7ba>
 800e27e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e280:	9308      	str	r3, [sp, #32]
 800e282:	2001      	movs	r0, #1
 800e284:	e64d      	b.n	800df22 <_dtoa_r+0x802>
 800e286:	f1bb 0f00 	cmp.w	fp, #0
 800e28a:	f77f aed9 	ble.w	800e040 <_dtoa_r+0x920>
 800e28e:	4656      	mov	r6, sl
 800e290:	9802      	ldr	r0, [sp, #8]
 800e292:	4621      	mov	r1, r4
 800e294:	f7ff f9bc 	bl	800d610 <quorem>
 800e298:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e29c:	f806 3b01 	strb.w	r3, [r6], #1
 800e2a0:	eba6 020a 	sub.w	r2, r6, sl
 800e2a4:	4593      	cmp	fp, r2
 800e2a6:	ddb4      	ble.n	800e212 <_dtoa_r+0xaf2>
 800e2a8:	9902      	ldr	r1, [sp, #8]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	220a      	movs	r2, #10
 800e2ae:	4648      	mov	r0, r9
 800e2b0:	f000 fcb4 	bl	800ec1c <__multadd>
 800e2b4:	9002      	str	r0, [sp, #8]
 800e2b6:	e7eb      	b.n	800e290 <_dtoa_r+0xb70>
 800e2b8:	0801506d 	.word	0x0801506d
 800e2bc:	08015008 	.word	0x08015008

0800e2c0 <_free_r>:
 800e2c0:	b538      	push	{r3, r4, r5, lr}
 800e2c2:	4605      	mov	r5, r0
 800e2c4:	2900      	cmp	r1, #0
 800e2c6:	d041      	beq.n	800e34c <_free_r+0x8c>
 800e2c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2cc:	1f0c      	subs	r4, r1, #4
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	bfb8      	it	lt
 800e2d2:	18e4      	addlt	r4, r4, r3
 800e2d4:	f000 fc34 	bl	800eb40 <__malloc_lock>
 800e2d8:	4a1d      	ldr	r2, [pc, #116]	@ (800e350 <_free_r+0x90>)
 800e2da:	6813      	ldr	r3, [r2, #0]
 800e2dc:	b933      	cbnz	r3, 800e2ec <_free_r+0x2c>
 800e2de:	6063      	str	r3, [r4, #4]
 800e2e0:	6014      	str	r4, [r2, #0]
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2e8:	f000 bc30 	b.w	800eb4c <__malloc_unlock>
 800e2ec:	42a3      	cmp	r3, r4
 800e2ee:	d908      	bls.n	800e302 <_free_r+0x42>
 800e2f0:	6820      	ldr	r0, [r4, #0]
 800e2f2:	1821      	adds	r1, r4, r0
 800e2f4:	428b      	cmp	r3, r1
 800e2f6:	bf01      	itttt	eq
 800e2f8:	6819      	ldreq	r1, [r3, #0]
 800e2fa:	685b      	ldreq	r3, [r3, #4]
 800e2fc:	1809      	addeq	r1, r1, r0
 800e2fe:	6021      	streq	r1, [r4, #0]
 800e300:	e7ed      	b.n	800e2de <_free_r+0x1e>
 800e302:	461a      	mov	r2, r3
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	b10b      	cbz	r3, 800e30c <_free_r+0x4c>
 800e308:	42a3      	cmp	r3, r4
 800e30a:	d9fa      	bls.n	800e302 <_free_r+0x42>
 800e30c:	6811      	ldr	r1, [r2, #0]
 800e30e:	1850      	adds	r0, r2, r1
 800e310:	42a0      	cmp	r0, r4
 800e312:	d10b      	bne.n	800e32c <_free_r+0x6c>
 800e314:	6820      	ldr	r0, [r4, #0]
 800e316:	4401      	add	r1, r0
 800e318:	1850      	adds	r0, r2, r1
 800e31a:	4283      	cmp	r3, r0
 800e31c:	6011      	str	r1, [r2, #0]
 800e31e:	d1e0      	bne.n	800e2e2 <_free_r+0x22>
 800e320:	6818      	ldr	r0, [r3, #0]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	6053      	str	r3, [r2, #4]
 800e326:	4408      	add	r0, r1
 800e328:	6010      	str	r0, [r2, #0]
 800e32a:	e7da      	b.n	800e2e2 <_free_r+0x22>
 800e32c:	d902      	bls.n	800e334 <_free_r+0x74>
 800e32e:	230c      	movs	r3, #12
 800e330:	602b      	str	r3, [r5, #0]
 800e332:	e7d6      	b.n	800e2e2 <_free_r+0x22>
 800e334:	6820      	ldr	r0, [r4, #0]
 800e336:	1821      	adds	r1, r4, r0
 800e338:	428b      	cmp	r3, r1
 800e33a:	bf04      	itt	eq
 800e33c:	6819      	ldreq	r1, [r3, #0]
 800e33e:	685b      	ldreq	r3, [r3, #4]
 800e340:	6063      	str	r3, [r4, #4]
 800e342:	bf04      	itt	eq
 800e344:	1809      	addeq	r1, r1, r0
 800e346:	6021      	streq	r1, [r4, #0]
 800e348:	6054      	str	r4, [r2, #4]
 800e34a:	e7ca      	b.n	800e2e2 <_free_r+0x22>
 800e34c:	bd38      	pop	{r3, r4, r5, pc}
 800e34e:	bf00      	nop
 800e350:	2001ec10 	.word	0x2001ec10

0800e354 <rshift>:
 800e354:	6903      	ldr	r3, [r0, #16]
 800e356:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e35a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e35e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e362:	f100 0414 	add.w	r4, r0, #20
 800e366:	dd45      	ble.n	800e3f4 <rshift+0xa0>
 800e368:	f011 011f 	ands.w	r1, r1, #31
 800e36c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e370:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e374:	d10c      	bne.n	800e390 <rshift+0x3c>
 800e376:	f100 0710 	add.w	r7, r0, #16
 800e37a:	4629      	mov	r1, r5
 800e37c:	42b1      	cmp	r1, r6
 800e37e:	d334      	bcc.n	800e3ea <rshift+0x96>
 800e380:	1a9b      	subs	r3, r3, r2
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	1eea      	subs	r2, r5, #3
 800e386:	4296      	cmp	r6, r2
 800e388:	bf38      	it	cc
 800e38a:	2300      	movcc	r3, #0
 800e38c:	4423      	add	r3, r4
 800e38e:	e015      	b.n	800e3bc <rshift+0x68>
 800e390:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e394:	f1c1 0820 	rsb	r8, r1, #32
 800e398:	40cf      	lsrs	r7, r1
 800e39a:	f105 0e04 	add.w	lr, r5, #4
 800e39e:	46a1      	mov	r9, r4
 800e3a0:	4576      	cmp	r6, lr
 800e3a2:	46f4      	mov	ip, lr
 800e3a4:	d815      	bhi.n	800e3d2 <rshift+0x7e>
 800e3a6:	1a9a      	subs	r2, r3, r2
 800e3a8:	0092      	lsls	r2, r2, #2
 800e3aa:	3a04      	subs	r2, #4
 800e3ac:	3501      	adds	r5, #1
 800e3ae:	42ae      	cmp	r6, r5
 800e3b0:	bf38      	it	cc
 800e3b2:	2200      	movcc	r2, #0
 800e3b4:	18a3      	adds	r3, r4, r2
 800e3b6:	50a7      	str	r7, [r4, r2]
 800e3b8:	b107      	cbz	r7, 800e3bc <rshift+0x68>
 800e3ba:	3304      	adds	r3, #4
 800e3bc:	1b1a      	subs	r2, r3, r4
 800e3be:	42a3      	cmp	r3, r4
 800e3c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e3c4:	bf08      	it	eq
 800e3c6:	2300      	moveq	r3, #0
 800e3c8:	6102      	str	r2, [r0, #16]
 800e3ca:	bf08      	it	eq
 800e3cc:	6143      	streq	r3, [r0, #20]
 800e3ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3d2:	f8dc c000 	ldr.w	ip, [ip]
 800e3d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800e3da:	ea4c 0707 	orr.w	r7, ip, r7
 800e3de:	f849 7b04 	str.w	r7, [r9], #4
 800e3e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e3e6:	40cf      	lsrs	r7, r1
 800e3e8:	e7da      	b.n	800e3a0 <rshift+0x4c>
 800e3ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800e3ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800e3f2:	e7c3      	b.n	800e37c <rshift+0x28>
 800e3f4:	4623      	mov	r3, r4
 800e3f6:	e7e1      	b.n	800e3bc <rshift+0x68>

0800e3f8 <__hexdig_fun>:
 800e3f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e3fc:	2b09      	cmp	r3, #9
 800e3fe:	d802      	bhi.n	800e406 <__hexdig_fun+0xe>
 800e400:	3820      	subs	r0, #32
 800e402:	b2c0      	uxtb	r0, r0
 800e404:	4770      	bx	lr
 800e406:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e40a:	2b05      	cmp	r3, #5
 800e40c:	d801      	bhi.n	800e412 <__hexdig_fun+0x1a>
 800e40e:	3847      	subs	r0, #71	@ 0x47
 800e410:	e7f7      	b.n	800e402 <__hexdig_fun+0xa>
 800e412:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e416:	2b05      	cmp	r3, #5
 800e418:	d801      	bhi.n	800e41e <__hexdig_fun+0x26>
 800e41a:	3827      	subs	r0, #39	@ 0x27
 800e41c:	e7f1      	b.n	800e402 <__hexdig_fun+0xa>
 800e41e:	2000      	movs	r0, #0
 800e420:	4770      	bx	lr
	...

0800e424 <__gethex>:
 800e424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e428:	b085      	sub	sp, #20
 800e42a:	468a      	mov	sl, r1
 800e42c:	9302      	str	r3, [sp, #8]
 800e42e:	680b      	ldr	r3, [r1, #0]
 800e430:	9001      	str	r0, [sp, #4]
 800e432:	4690      	mov	r8, r2
 800e434:	1c9c      	adds	r4, r3, #2
 800e436:	46a1      	mov	r9, r4
 800e438:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e43c:	2830      	cmp	r0, #48	@ 0x30
 800e43e:	d0fa      	beq.n	800e436 <__gethex+0x12>
 800e440:	eba9 0303 	sub.w	r3, r9, r3
 800e444:	f1a3 0b02 	sub.w	fp, r3, #2
 800e448:	f7ff ffd6 	bl	800e3f8 <__hexdig_fun>
 800e44c:	4605      	mov	r5, r0
 800e44e:	2800      	cmp	r0, #0
 800e450:	d168      	bne.n	800e524 <__gethex+0x100>
 800e452:	49a0      	ldr	r1, [pc, #640]	@ (800e6d4 <__gethex+0x2b0>)
 800e454:	2201      	movs	r2, #1
 800e456:	4648      	mov	r0, r9
 800e458:	f7fe ffa7 	bl	800d3aa <strncmp>
 800e45c:	4607      	mov	r7, r0
 800e45e:	2800      	cmp	r0, #0
 800e460:	d167      	bne.n	800e532 <__gethex+0x10e>
 800e462:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e466:	4626      	mov	r6, r4
 800e468:	f7ff ffc6 	bl	800e3f8 <__hexdig_fun>
 800e46c:	2800      	cmp	r0, #0
 800e46e:	d062      	beq.n	800e536 <__gethex+0x112>
 800e470:	4623      	mov	r3, r4
 800e472:	7818      	ldrb	r0, [r3, #0]
 800e474:	2830      	cmp	r0, #48	@ 0x30
 800e476:	4699      	mov	r9, r3
 800e478:	f103 0301 	add.w	r3, r3, #1
 800e47c:	d0f9      	beq.n	800e472 <__gethex+0x4e>
 800e47e:	f7ff ffbb 	bl	800e3f8 <__hexdig_fun>
 800e482:	fab0 f580 	clz	r5, r0
 800e486:	096d      	lsrs	r5, r5, #5
 800e488:	f04f 0b01 	mov.w	fp, #1
 800e48c:	464a      	mov	r2, r9
 800e48e:	4616      	mov	r6, r2
 800e490:	3201      	adds	r2, #1
 800e492:	7830      	ldrb	r0, [r6, #0]
 800e494:	f7ff ffb0 	bl	800e3f8 <__hexdig_fun>
 800e498:	2800      	cmp	r0, #0
 800e49a:	d1f8      	bne.n	800e48e <__gethex+0x6a>
 800e49c:	498d      	ldr	r1, [pc, #564]	@ (800e6d4 <__gethex+0x2b0>)
 800e49e:	2201      	movs	r2, #1
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	f7fe ff82 	bl	800d3aa <strncmp>
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	d13f      	bne.n	800e52a <__gethex+0x106>
 800e4aa:	b944      	cbnz	r4, 800e4be <__gethex+0x9a>
 800e4ac:	1c74      	adds	r4, r6, #1
 800e4ae:	4622      	mov	r2, r4
 800e4b0:	4616      	mov	r6, r2
 800e4b2:	3201      	adds	r2, #1
 800e4b4:	7830      	ldrb	r0, [r6, #0]
 800e4b6:	f7ff ff9f 	bl	800e3f8 <__hexdig_fun>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	d1f8      	bne.n	800e4b0 <__gethex+0x8c>
 800e4be:	1ba4      	subs	r4, r4, r6
 800e4c0:	00a7      	lsls	r7, r4, #2
 800e4c2:	7833      	ldrb	r3, [r6, #0]
 800e4c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e4c8:	2b50      	cmp	r3, #80	@ 0x50
 800e4ca:	d13e      	bne.n	800e54a <__gethex+0x126>
 800e4cc:	7873      	ldrb	r3, [r6, #1]
 800e4ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800e4d0:	d033      	beq.n	800e53a <__gethex+0x116>
 800e4d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800e4d4:	d034      	beq.n	800e540 <__gethex+0x11c>
 800e4d6:	1c71      	adds	r1, r6, #1
 800e4d8:	2400      	movs	r4, #0
 800e4da:	7808      	ldrb	r0, [r1, #0]
 800e4dc:	f7ff ff8c 	bl	800e3f8 <__hexdig_fun>
 800e4e0:	1e43      	subs	r3, r0, #1
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	2b18      	cmp	r3, #24
 800e4e6:	d830      	bhi.n	800e54a <__gethex+0x126>
 800e4e8:	f1a0 0210 	sub.w	r2, r0, #16
 800e4ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e4f0:	f7ff ff82 	bl	800e3f8 <__hexdig_fun>
 800e4f4:	f100 3cff 	add.w	ip, r0, #4294967295
 800e4f8:	fa5f fc8c 	uxtb.w	ip, ip
 800e4fc:	f1bc 0f18 	cmp.w	ip, #24
 800e500:	f04f 030a 	mov.w	r3, #10
 800e504:	d91e      	bls.n	800e544 <__gethex+0x120>
 800e506:	b104      	cbz	r4, 800e50a <__gethex+0xe6>
 800e508:	4252      	negs	r2, r2
 800e50a:	4417      	add	r7, r2
 800e50c:	f8ca 1000 	str.w	r1, [sl]
 800e510:	b1ed      	cbz	r5, 800e54e <__gethex+0x12a>
 800e512:	f1bb 0f00 	cmp.w	fp, #0
 800e516:	bf0c      	ite	eq
 800e518:	2506      	moveq	r5, #6
 800e51a:	2500      	movne	r5, #0
 800e51c:	4628      	mov	r0, r5
 800e51e:	b005      	add	sp, #20
 800e520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e524:	2500      	movs	r5, #0
 800e526:	462c      	mov	r4, r5
 800e528:	e7b0      	b.n	800e48c <__gethex+0x68>
 800e52a:	2c00      	cmp	r4, #0
 800e52c:	d1c7      	bne.n	800e4be <__gethex+0x9a>
 800e52e:	4627      	mov	r7, r4
 800e530:	e7c7      	b.n	800e4c2 <__gethex+0x9e>
 800e532:	464e      	mov	r6, r9
 800e534:	462f      	mov	r7, r5
 800e536:	2501      	movs	r5, #1
 800e538:	e7c3      	b.n	800e4c2 <__gethex+0x9e>
 800e53a:	2400      	movs	r4, #0
 800e53c:	1cb1      	adds	r1, r6, #2
 800e53e:	e7cc      	b.n	800e4da <__gethex+0xb6>
 800e540:	2401      	movs	r4, #1
 800e542:	e7fb      	b.n	800e53c <__gethex+0x118>
 800e544:	fb03 0002 	mla	r0, r3, r2, r0
 800e548:	e7ce      	b.n	800e4e8 <__gethex+0xc4>
 800e54a:	4631      	mov	r1, r6
 800e54c:	e7de      	b.n	800e50c <__gethex+0xe8>
 800e54e:	eba6 0309 	sub.w	r3, r6, r9
 800e552:	3b01      	subs	r3, #1
 800e554:	4629      	mov	r1, r5
 800e556:	2b07      	cmp	r3, #7
 800e558:	dc0a      	bgt.n	800e570 <__gethex+0x14c>
 800e55a:	9801      	ldr	r0, [sp, #4]
 800e55c:	f000 fafc 	bl	800eb58 <_Balloc>
 800e560:	4604      	mov	r4, r0
 800e562:	b940      	cbnz	r0, 800e576 <__gethex+0x152>
 800e564:	4b5c      	ldr	r3, [pc, #368]	@ (800e6d8 <__gethex+0x2b4>)
 800e566:	4602      	mov	r2, r0
 800e568:	21e4      	movs	r1, #228	@ 0xe4
 800e56a:	485c      	ldr	r0, [pc, #368]	@ (800e6dc <__gethex+0x2b8>)
 800e56c:	f7ff f832 	bl	800d5d4 <__assert_func>
 800e570:	3101      	adds	r1, #1
 800e572:	105b      	asrs	r3, r3, #1
 800e574:	e7ef      	b.n	800e556 <__gethex+0x132>
 800e576:	f100 0a14 	add.w	sl, r0, #20
 800e57a:	2300      	movs	r3, #0
 800e57c:	4655      	mov	r5, sl
 800e57e:	469b      	mov	fp, r3
 800e580:	45b1      	cmp	r9, r6
 800e582:	d337      	bcc.n	800e5f4 <__gethex+0x1d0>
 800e584:	f845 bb04 	str.w	fp, [r5], #4
 800e588:	eba5 050a 	sub.w	r5, r5, sl
 800e58c:	10ad      	asrs	r5, r5, #2
 800e58e:	6125      	str	r5, [r4, #16]
 800e590:	4658      	mov	r0, fp
 800e592:	f000 fbd3 	bl	800ed3c <__hi0bits>
 800e596:	016d      	lsls	r5, r5, #5
 800e598:	f8d8 6000 	ldr.w	r6, [r8]
 800e59c:	1a2d      	subs	r5, r5, r0
 800e59e:	42b5      	cmp	r5, r6
 800e5a0:	dd54      	ble.n	800e64c <__gethex+0x228>
 800e5a2:	1bad      	subs	r5, r5, r6
 800e5a4:	4629      	mov	r1, r5
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	f000 ff5f 	bl	800f46a <__any_on>
 800e5ac:	4681      	mov	r9, r0
 800e5ae:	b178      	cbz	r0, 800e5d0 <__gethex+0x1ac>
 800e5b0:	1e6b      	subs	r3, r5, #1
 800e5b2:	1159      	asrs	r1, r3, #5
 800e5b4:	f003 021f 	and.w	r2, r3, #31
 800e5b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e5bc:	f04f 0901 	mov.w	r9, #1
 800e5c0:	fa09 f202 	lsl.w	r2, r9, r2
 800e5c4:	420a      	tst	r2, r1
 800e5c6:	d003      	beq.n	800e5d0 <__gethex+0x1ac>
 800e5c8:	454b      	cmp	r3, r9
 800e5ca:	dc36      	bgt.n	800e63a <__gethex+0x216>
 800e5cc:	f04f 0902 	mov.w	r9, #2
 800e5d0:	4629      	mov	r1, r5
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	f7ff febe 	bl	800e354 <rshift>
 800e5d8:	442f      	add	r7, r5
 800e5da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e5de:	42bb      	cmp	r3, r7
 800e5e0:	da42      	bge.n	800e668 <__gethex+0x244>
 800e5e2:	9801      	ldr	r0, [sp, #4]
 800e5e4:	4621      	mov	r1, r4
 800e5e6:	f000 faf7 	bl	800ebd8 <_Bfree>
 800e5ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	6013      	str	r3, [r2, #0]
 800e5f0:	25a3      	movs	r5, #163	@ 0xa3
 800e5f2:	e793      	b.n	800e51c <__gethex+0xf8>
 800e5f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e5f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800e5fa:	d012      	beq.n	800e622 <__gethex+0x1fe>
 800e5fc:	2b20      	cmp	r3, #32
 800e5fe:	d104      	bne.n	800e60a <__gethex+0x1e6>
 800e600:	f845 bb04 	str.w	fp, [r5], #4
 800e604:	f04f 0b00 	mov.w	fp, #0
 800e608:	465b      	mov	r3, fp
 800e60a:	7830      	ldrb	r0, [r6, #0]
 800e60c:	9303      	str	r3, [sp, #12]
 800e60e:	f7ff fef3 	bl	800e3f8 <__hexdig_fun>
 800e612:	9b03      	ldr	r3, [sp, #12]
 800e614:	f000 000f 	and.w	r0, r0, #15
 800e618:	4098      	lsls	r0, r3
 800e61a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e61e:	3304      	adds	r3, #4
 800e620:	e7ae      	b.n	800e580 <__gethex+0x15c>
 800e622:	45b1      	cmp	r9, r6
 800e624:	d8ea      	bhi.n	800e5fc <__gethex+0x1d8>
 800e626:	492b      	ldr	r1, [pc, #172]	@ (800e6d4 <__gethex+0x2b0>)
 800e628:	9303      	str	r3, [sp, #12]
 800e62a:	2201      	movs	r2, #1
 800e62c:	4630      	mov	r0, r6
 800e62e:	f7fe febc 	bl	800d3aa <strncmp>
 800e632:	9b03      	ldr	r3, [sp, #12]
 800e634:	2800      	cmp	r0, #0
 800e636:	d1e1      	bne.n	800e5fc <__gethex+0x1d8>
 800e638:	e7a2      	b.n	800e580 <__gethex+0x15c>
 800e63a:	1ea9      	subs	r1, r5, #2
 800e63c:	4620      	mov	r0, r4
 800e63e:	f000 ff14 	bl	800f46a <__any_on>
 800e642:	2800      	cmp	r0, #0
 800e644:	d0c2      	beq.n	800e5cc <__gethex+0x1a8>
 800e646:	f04f 0903 	mov.w	r9, #3
 800e64a:	e7c1      	b.n	800e5d0 <__gethex+0x1ac>
 800e64c:	da09      	bge.n	800e662 <__gethex+0x23e>
 800e64e:	1b75      	subs	r5, r6, r5
 800e650:	4621      	mov	r1, r4
 800e652:	9801      	ldr	r0, [sp, #4]
 800e654:	462a      	mov	r2, r5
 800e656:	f000 fccf 	bl	800eff8 <__lshift>
 800e65a:	1b7f      	subs	r7, r7, r5
 800e65c:	4604      	mov	r4, r0
 800e65e:	f100 0a14 	add.w	sl, r0, #20
 800e662:	f04f 0900 	mov.w	r9, #0
 800e666:	e7b8      	b.n	800e5da <__gethex+0x1b6>
 800e668:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e66c:	42bd      	cmp	r5, r7
 800e66e:	dd6f      	ble.n	800e750 <__gethex+0x32c>
 800e670:	1bed      	subs	r5, r5, r7
 800e672:	42ae      	cmp	r6, r5
 800e674:	dc34      	bgt.n	800e6e0 <__gethex+0x2bc>
 800e676:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e67a:	2b02      	cmp	r3, #2
 800e67c:	d022      	beq.n	800e6c4 <__gethex+0x2a0>
 800e67e:	2b03      	cmp	r3, #3
 800e680:	d024      	beq.n	800e6cc <__gethex+0x2a8>
 800e682:	2b01      	cmp	r3, #1
 800e684:	d115      	bne.n	800e6b2 <__gethex+0x28e>
 800e686:	42ae      	cmp	r6, r5
 800e688:	d113      	bne.n	800e6b2 <__gethex+0x28e>
 800e68a:	2e01      	cmp	r6, #1
 800e68c:	d10b      	bne.n	800e6a6 <__gethex+0x282>
 800e68e:	9a02      	ldr	r2, [sp, #8]
 800e690:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e694:	6013      	str	r3, [r2, #0]
 800e696:	2301      	movs	r3, #1
 800e698:	6123      	str	r3, [r4, #16]
 800e69a:	f8ca 3000 	str.w	r3, [sl]
 800e69e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6a0:	2562      	movs	r5, #98	@ 0x62
 800e6a2:	601c      	str	r4, [r3, #0]
 800e6a4:	e73a      	b.n	800e51c <__gethex+0xf8>
 800e6a6:	1e71      	subs	r1, r6, #1
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f000 fede 	bl	800f46a <__any_on>
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	d1ed      	bne.n	800e68e <__gethex+0x26a>
 800e6b2:	9801      	ldr	r0, [sp, #4]
 800e6b4:	4621      	mov	r1, r4
 800e6b6:	f000 fa8f 	bl	800ebd8 <_Bfree>
 800e6ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6bc:	2300      	movs	r3, #0
 800e6be:	6013      	str	r3, [r2, #0]
 800e6c0:	2550      	movs	r5, #80	@ 0x50
 800e6c2:	e72b      	b.n	800e51c <__gethex+0xf8>
 800e6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1f3      	bne.n	800e6b2 <__gethex+0x28e>
 800e6ca:	e7e0      	b.n	800e68e <__gethex+0x26a>
 800e6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1dd      	bne.n	800e68e <__gethex+0x26a>
 800e6d2:	e7ee      	b.n	800e6b2 <__gethex+0x28e>
 800e6d4:	08014f2f 	.word	0x08014f2f
 800e6d8:	0801506d 	.word	0x0801506d
 800e6dc:	0801507e 	.word	0x0801507e
 800e6e0:	1e6f      	subs	r7, r5, #1
 800e6e2:	f1b9 0f00 	cmp.w	r9, #0
 800e6e6:	d130      	bne.n	800e74a <__gethex+0x326>
 800e6e8:	b127      	cbz	r7, 800e6f4 <__gethex+0x2d0>
 800e6ea:	4639      	mov	r1, r7
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f000 febc 	bl	800f46a <__any_on>
 800e6f2:	4681      	mov	r9, r0
 800e6f4:	117a      	asrs	r2, r7, #5
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e6fc:	f007 071f 	and.w	r7, r7, #31
 800e700:	40bb      	lsls	r3, r7
 800e702:	4213      	tst	r3, r2
 800e704:	4629      	mov	r1, r5
 800e706:	4620      	mov	r0, r4
 800e708:	bf18      	it	ne
 800e70a:	f049 0902 	orrne.w	r9, r9, #2
 800e70e:	f7ff fe21 	bl	800e354 <rshift>
 800e712:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e716:	1b76      	subs	r6, r6, r5
 800e718:	2502      	movs	r5, #2
 800e71a:	f1b9 0f00 	cmp.w	r9, #0
 800e71e:	d047      	beq.n	800e7b0 <__gethex+0x38c>
 800e720:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e724:	2b02      	cmp	r3, #2
 800e726:	d015      	beq.n	800e754 <__gethex+0x330>
 800e728:	2b03      	cmp	r3, #3
 800e72a:	d017      	beq.n	800e75c <__gethex+0x338>
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d109      	bne.n	800e744 <__gethex+0x320>
 800e730:	f019 0f02 	tst.w	r9, #2
 800e734:	d006      	beq.n	800e744 <__gethex+0x320>
 800e736:	f8da 3000 	ldr.w	r3, [sl]
 800e73a:	ea49 0903 	orr.w	r9, r9, r3
 800e73e:	f019 0f01 	tst.w	r9, #1
 800e742:	d10e      	bne.n	800e762 <__gethex+0x33e>
 800e744:	f045 0510 	orr.w	r5, r5, #16
 800e748:	e032      	b.n	800e7b0 <__gethex+0x38c>
 800e74a:	f04f 0901 	mov.w	r9, #1
 800e74e:	e7d1      	b.n	800e6f4 <__gethex+0x2d0>
 800e750:	2501      	movs	r5, #1
 800e752:	e7e2      	b.n	800e71a <__gethex+0x2f6>
 800e754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e756:	f1c3 0301 	rsb	r3, r3, #1
 800e75a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d0f0      	beq.n	800e744 <__gethex+0x320>
 800e762:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e766:	f104 0314 	add.w	r3, r4, #20
 800e76a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e76e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e772:	f04f 0c00 	mov.w	ip, #0
 800e776:	4618      	mov	r0, r3
 800e778:	f853 2b04 	ldr.w	r2, [r3], #4
 800e77c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e780:	d01b      	beq.n	800e7ba <__gethex+0x396>
 800e782:	3201      	adds	r2, #1
 800e784:	6002      	str	r2, [r0, #0]
 800e786:	2d02      	cmp	r5, #2
 800e788:	f104 0314 	add.w	r3, r4, #20
 800e78c:	d13c      	bne.n	800e808 <__gethex+0x3e4>
 800e78e:	f8d8 2000 	ldr.w	r2, [r8]
 800e792:	3a01      	subs	r2, #1
 800e794:	42b2      	cmp	r2, r6
 800e796:	d109      	bne.n	800e7ac <__gethex+0x388>
 800e798:	1171      	asrs	r1, r6, #5
 800e79a:	2201      	movs	r2, #1
 800e79c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e7a0:	f006 061f 	and.w	r6, r6, #31
 800e7a4:	fa02 f606 	lsl.w	r6, r2, r6
 800e7a8:	421e      	tst	r6, r3
 800e7aa:	d13a      	bne.n	800e822 <__gethex+0x3fe>
 800e7ac:	f045 0520 	orr.w	r5, r5, #32
 800e7b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7b2:	601c      	str	r4, [r3, #0]
 800e7b4:	9b02      	ldr	r3, [sp, #8]
 800e7b6:	601f      	str	r7, [r3, #0]
 800e7b8:	e6b0      	b.n	800e51c <__gethex+0xf8>
 800e7ba:	4299      	cmp	r1, r3
 800e7bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800e7c0:	d8d9      	bhi.n	800e776 <__gethex+0x352>
 800e7c2:	68a3      	ldr	r3, [r4, #8]
 800e7c4:	459b      	cmp	fp, r3
 800e7c6:	db17      	blt.n	800e7f8 <__gethex+0x3d4>
 800e7c8:	6861      	ldr	r1, [r4, #4]
 800e7ca:	9801      	ldr	r0, [sp, #4]
 800e7cc:	3101      	adds	r1, #1
 800e7ce:	f000 f9c3 	bl	800eb58 <_Balloc>
 800e7d2:	4681      	mov	r9, r0
 800e7d4:	b918      	cbnz	r0, 800e7de <__gethex+0x3ba>
 800e7d6:	4b1a      	ldr	r3, [pc, #104]	@ (800e840 <__gethex+0x41c>)
 800e7d8:	4602      	mov	r2, r0
 800e7da:	2184      	movs	r1, #132	@ 0x84
 800e7dc:	e6c5      	b.n	800e56a <__gethex+0x146>
 800e7de:	6922      	ldr	r2, [r4, #16]
 800e7e0:	3202      	adds	r2, #2
 800e7e2:	f104 010c 	add.w	r1, r4, #12
 800e7e6:	0092      	lsls	r2, r2, #2
 800e7e8:	300c      	adds	r0, #12
 800e7ea:	f7fe fed6 	bl	800d59a <memcpy>
 800e7ee:	4621      	mov	r1, r4
 800e7f0:	9801      	ldr	r0, [sp, #4]
 800e7f2:	f000 f9f1 	bl	800ebd8 <_Bfree>
 800e7f6:	464c      	mov	r4, r9
 800e7f8:	6923      	ldr	r3, [r4, #16]
 800e7fa:	1c5a      	adds	r2, r3, #1
 800e7fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e800:	6122      	str	r2, [r4, #16]
 800e802:	2201      	movs	r2, #1
 800e804:	615a      	str	r2, [r3, #20]
 800e806:	e7be      	b.n	800e786 <__gethex+0x362>
 800e808:	6922      	ldr	r2, [r4, #16]
 800e80a:	455a      	cmp	r2, fp
 800e80c:	dd0b      	ble.n	800e826 <__gethex+0x402>
 800e80e:	2101      	movs	r1, #1
 800e810:	4620      	mov	r0, r4
 800e812:	f7ff fd9f 	bl	800e354 <rshift>
 800e816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e81a:	3701      	adds	r7, #1
 800e81c:	42bb      	cmp	r3, r7
 800e81e:	f6ff aee0 	blt.w	800e5e2 <__gethex+0x1be>
 800e822:	2501      	movs	r5, #1
 800e824:	e7c2      	b.n	800e7ac <__gethex+0x388>
 800e826:	f016 061f 	ands.w	r6, r6, #31
 800e82a:	d0fa      	beq.n	800e822 <__gethex+0x3fe>
 800e82c:	4453      	add	r3, sl
 800e82e:	f1c6 0620 	rsb	r6, r6, #32
 800e832:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e836:	f000 fa81 	bl	800ed3c <__hi0bits>
 800e83a:	42b0      	cmp	r0, r6
 800e83c:	dbe7      	blt.n	800e80e <__gethex+0x3ea>
 800e83e:	e7f0      	b.n	800e822 <__gethex+0x3fe>
 800e840:	0801506d 	.word	0x0801506d

0800e844 <L_shift>:
 800e844:	f1c2 0208 	rsb	r2, r2, #8
 800e848:	0092      	lsls	r2, r2, #2
 800e84a:	b570      	push	{r4, r5, r6, lr}
 800e84c:	f1c2 0620 	rsb	r6, r2, #32
 800e850:	6843      	ldr	r3, [r0, #4]
 800e852:	6804      	ldr	r4, [r0, #0]
 800e854:	fa03 f506 	lsl.w	r5, r3, r6
 800e858:	432c      	orrs	r4, r5
 800e85a:	40d3      	lsrs	r3, r2
 800e85c:	6004      	str	r4, [r0, #0]
 800e85e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e862:	4288      	cmp	r0, r1
 800e864:	d3f4      	bcc.n	800e850 <L_shift+0xc>
 800e866:	bd70      	pop	{r4, r5, r6, pc}

0800e868 <__match>:
 800e868:	b530      	push	{r4, r5, lr}
 800e86a:	6803      	ldr	r3, [r0, #0]
 800e86c:	3301      	adds	r3, #1
 800e86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e872:	b914      	cbnz	r4, 800e87a <__match+0x12>
 800e874:	6003      	str	r3, [r0, #0]
 800e876:	2001      	movs	r0, #1
 800e878:	bd30      	pop	{r4, r5, pc}
 800e87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e87e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e882:	2d19      	cmp	r5, #25
 800e884:	bf98      	it	ls
 800e886:	3220      	addls	r2, #32
 800e888:	42a2      	cmp	r2, r4
 800e88a:	d0f0      	beq.n	800e86e <__match+0x6>
 800e88c:	2000      	movs	r0, #0
 800e88e:	e7f3      	b.n	800e878 <__match+0x10>

0800e890 <__hexnan>:
 800e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e894:	680b      	ldr	r3, [r1, #0]
 800e896:	6801      	ldr	r1, [r0, #0]
 800e898:	115e      	asrs	r6, r3, #5
 800e89a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e89e:	f013 031f 	ands.w	r3, r3, #31
 800e8a2:	b087      	sub	sp, #28
 800e8a4:	bf18      	it	ne
 800e8a6:	3604      	addne	r6, #4
 800e8a8:	2500      	movs	r5, #0
 800e8aa:	1f37      	subs	r7, r6, #4
 800e8ac:	4682      	mov	sl, r0
 800e8ae:	4690      	mov	r8, r2
 800e8b0:	9301      	str	r3, [sp, #4]
 800e8b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e8b6:	46b9      	mov	r9, r7
 800e8b8:	463c      	mov	r4, r7
 800e8ba:	9502      	str	r5, [sp, #8]
 800e8bc:	46ab      	mov	fp, r5
 800e8be:	784a      	ldrb	r2, [r1, #1]
 800e8c0:	1c4b      	adds	r3, r1, #1
 800e8c2:	9303      	str	r3, [sp, #12]
 800e8c4:	b342      	cbz	r2, 800e918 <__hexnan+0x88>
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	9105      	str	r1, [sp, #20]
 800e8ca:	9204      	str	r2, [sp, #16]
 800e8cc:	f7ff fd94 	bl	800e3f8 <__hexdig_fun>
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	d151      	bne.n	800e978 <__hexnan+0xe8>
 800e8d4:	9a04      	ldr	r2, [sp, #16]
 800e8d6:	9905      	ldr	r1, [sp, #20]
 800e8d8:	2a20      	cmp	r2, #32
 800e8da:	d818      	bhi.n	800e90e <__hexnan+0x7e>
 800e8dc:	9b02      	ldr	r3, [sp, #8]
 800e8de:	459b      	cmp	fp, r3
 800e8e0:	dd13      	ble.n	800e90a <__hexnan+0x7a>
 800e8e2:	454c      	cmp	r4, r9
 800e8e4:	d206      	bcs.n	800e8f4 <__hexnan+0x64>
 800e8e6:	2d07      	cmp	r5, #7
 800e8e8:	dc04      	bgt.n	800e8f4 <__hexnan+0x64>
 800e8ea:	462a      	mov	r2, r5
 800e8ec:	4649      	mov	r1, r9
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	f7ff ffa8 	bl	800e844 <L_shift>
 800e8f4:	4544      	cmp	r4, r8
 800e8f6:	d952      	bls.n	800e99e <__hexnan+0x10e>
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	f1a4 0904 	sub.w	r9, r4, #4
 800e8fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800e902:	f8cd b008 	str.w	fp, [sp, #8]
 800e906:	464c      	mov	r4, r9
 800e908:	461d      	mov	r5, r3
 800e90a:	9903      	ldr	r1, [sp, #12]
 800e90c:	e7d7      	b.n	800e8be <__hexnan+0x2e>
 800e90e:	2a29      	cmp	r2, #41	@ 0x29
 800e910:	d157      	bne.n	800e9c2 <__hexnan+0x132>
 800e912:	3102      	adds	r1, #2
 800e914:	f8ca 1000 	str.w	r1, [sl]
 800e918:	f1bb 0f00 	cmp.w	fp, #0
 800e91c:	d051      	beq.n	800e9c2 <__hexnan+0x132>
 800e91e:	454c      	cmp	r4, r9
 800e920:	d206      	bcs.n	800e930 <__hexnan+0xa0>
 800e922:	2d07      	cmp	r5, #7
 800e924:	dc04      	bgt.n	800e930 <__hexnan+0xa0>
 800e926:	462a      	mov	r2, r5
 800e928:	4649      	mov	r1, r9
 800e92a:	4620      	mov	r0, r4
 800e92c:	f7ff ff8a 	bl	800e844 <L_shift>
 800e930:	4544      	cmp	r4, r8
 800e932:	d936      	bls.n	800e9a2 <__hexnan+0x112>
 800e934:	f1a8 0204 	sub.w	r2, r8, #4
 800e938:	4623      	mov	r3, r4
 800e93a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e93e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e942:	429f      	cmp	r7, r3
 800e944:	d2f9      	bcs.n	800e93a <__hexnan+0xaa>
 800e946:	1b3b      	subs	r3, r7, r4
 800e948:	f023 0303 	bic.w	r3, r3, #3
 800e94c:	3304      	adds	r3, #4
 800e94e:	3401      	adds	r4, #1
 800e950:	3e03      	subs	r6, #3
 800e952:	42b4      	cmp	r4, r6
 800e954:	bf88      	it	hi
 800e956:	2304      	movhi	r3, #4
 800e958:	4443      	add	r3, r8
 800e95a:	2200      	movs	r2, #0
 800e95c:	f843 2b04 	str.w	r2, [r3], #4
 800e960:	429f      	cmp	r7, r3
 800e962:	d2fb      	bcs.n	800e95c <__hexnan+0xcc>
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	b91b      	cbnz	r3, 800e970 <__hexnan+0xe0>
 800e968:	4547      	cmp	r7, r8
 800e96a:	d128      	bne.n	800e9be <__hexnan+0x12e>
 800e96c:	2301      	movs	r3, #1
 800e96e:	603b      	str	r3, [r7, #0]
 800e970:	2005      	movs	r0, #5
 800e972:	b007      	add	sp, #28
 800e974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e978:	3501      	adds	r5, #1
 800e97a:	2d08      	cmp	r5, #8
 800e97c:	f10b 0b01 	add.w	fp, fp, #1
 800e980:	dd06      	ble.n	800e990 <__hexnan+0x100>
 800e982:	4544      	cmp	r4, r8
 800e984:	d9c1      	bls.n	800e90a <__hexnan+0x7a>
 800e986:	2300      	movs	r3, #0
 800e988:	f844 3c04 	str.w	r3, [r4, #-4]
 800e98c:	2501      	movs	r5, #1
 800e98e:	3c04      	subs	r4, #4
 800e990:	6822      	ldr	r2, [r4, #0]
 800e992:	f000 000f 	and.w	r0, r0, #15
 800e996:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e99a:	6020      	str	r0, [r4, #0]
 800e99c:	e7b5      	b.n	800e90a <__hexnan+0x7a>
 800e99e:	2508      	movs	r5, #8
 800e9a0:	e7b3      	b.n	800e90a <__hexnan+0x7a>
 800e9a2:	9b01      	ldr	r3, [sp, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d0dd      	beq.n	800e964 <__hexnan+0xd4>
 800e9a8:	f1c3 0320 	rsb	r3, r3, #32
 800e9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e9b0:	40da      	lsrs	r2, r3
 800e9b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e9b6:	4013      	ands	r3, r2
 800e9b8:	f846 3c04 	str.w	r3, [r6, #-4]
 800e9bc:	e7d2      	b.n	800e964 <__hexnan+0xd4>
 800e9be:	3f04      	subs	r7, #4
 800e9c0:	e7d0      	b.n	800e964 <__hexnan+0xd4>
 800e9c2:	2004      	movs	r0, #4
 800e9c4:	e7d5      	b.n	800e972 <__hexnan+0xe2>
	...

0800e9c8 <malloc>:
 800e9c8:	4b02      	ldr	r3, [pc, #8]	@ (800e9d4 <malloc+0xc>)
 800e9ca:	4601      	mov	r1, r0
 800e9cc:	6818      	ldr	r0, [r3, #0]
 800e9ce:	f000 b825 	b.w	800ea1c <_malloc_r>
 800e9d2:	bf00      	nop
 800e9d4:	20000278 	.word	0x20000278

0800e9d8 <sbrk_aligned>:
 800e9d8:	b570      	push	{r4, r5, r6, lr}
 800e9da:	4e0f      	ldr	r6, [pc, #60]	@ (800ea18 <sbrk_aligned+0x40>)
 800e9dc:	460c      	mov	r4, r1
 800e9de:	6831      	ldr	r1, [r6, #0]
 800e9e0:	4605      	mov	r5, r0
 800e9e2:	b911      	cbnz	r1, 800e9ea <sbrk_aligned+0x12>
 800e9e4:	f000 ff9e 	bl	800f924 <_sbrk_r>
 800e9e8:	6030      	str	r0, [r6, #0]
 800e9ea:	4621      	mov	r1, r4
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	f000 ff99 	bl	800f924 <_sbrk_r>
 800e9f2:	1c43      	adds	r3, r0, #1
 800e9f4:	d103      	bne.n	800e9fe <sbrk_aligned+0x26>
 800e9f6:	f04f 34ff 	mov.w	r4, #4294967295
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	bd70      	pop	{r4, r5, r6, pc}
 800e9fe:	1cc4      	adds	r4, r0, #3
 800ea00:	f024 0403 	bic.w	r4, r4, #3
 800ea04:	42a0      	cmp	r0, r4
 800ea06:	d0f8      	beq.n	800e9fa <sbrk_aligned+0x22>
 800ea08:	1a21      	subs	r1, r4, r0
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	f000 ff8a 	bl	800f924 <_sbrk_r>
 800ea10:	3001      	adds	r0, #1
 800ea12:	d1f2      	bne.n	800e9fa <sbrk_aligned+0x22>
 800ea14:	e7ef      	b.n	800e9f6 <sbrk_aligned+0x1e>
 800ea16:	bf00      	nop
 800ea18:	2001ec0c 	.word	0x2001ec0c

0800ea1c <_malloc_r>:
 800ea1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea20:	1ccd      	adds	r5, r1, #3
 800ea22:	f025 0503 	bic.w	r5, r5, #3
 800ea26:	3508      	adds	r5, #8
 800ea28:	2d0c      	cmp	r5, #12
 800ea2a:	bf38      	it	cc
 800ea2c:	250c      	movcc	r5, #12
 800ea2e:	2d00      	cmp	r5, #0
 800ea30:	4606      	mov	r6, r0
 800ea32:	db01      	blt.n	800ea38 <_malloc_r+0x1c>
 800ea34:	42a9      	cmp	r1, r5
 800ea36:	d904      	bls.n	800ea42 <_malloc_r+0x26>
 800ea38:	230c      	movs	r3, #12
 800ea3a:	6033      	str	r3, [r6, #0]
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eb18 <_malloc_r+0xfc>
 800ea46:	f000 f87b 	bl	800eb40 <__malloc_lock>
 800ea4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ea4e:	461c      	mov	r4, r3
 800ea50:	bb44      	cbnz	r4, 800eaa4 <_malloc_r+0x88>
 800ea52:	4629      	mov	r1, r5
 800ea54:	4630      	mov	r0, r6
 800ea56:	f7ff ffbf 	bl	800e9d8 <sbrk_aligned>
 800ea5a:	1c43      	adds	r3, r0, #1
 800ea5c:	4604      	mov	r4, r0
 800ea5e:	d158      	bne.n	800eb12 <_malloc_r+0xf6>
 800ea60:	f8d8 4000 	ldr.w	r4, [r8]
 800ea64:	4627      	mov	r7, r4
 800ea66:	2f00      	cmp	r7, #0
 800ea68:	d143      	bne.n	800eaf2 <_malloc_r+0xd6>
 800ea6a:	2c00      	cmp	r4, #0
 800ea6c:	d04b      	beq.n	800eb06 <_malloc_r+0xea>
 800ea6e:	6823      	ldr	r3, [r4, #0]
 800ea70:	4639      	mov	r1, r7
 800ea72:	4630      	mov	r0, r6
 800ea74:	eb04 0903 	add.w	r9, r4, r3
 800ea78:	f000 ff54 	bl	800f924 <_sbrk_r>
 800ea7c:	4581      	cmp	r9, r0
 800ea7e:	d142      	bne.n	800eb06 <_malloc_r+0xea>
 800ea80:	6821      	ldr	r1, [r4, #0]
 800ea82:	1a6d      	subs	r5, r5, r1
 800ea84:	4629      	mov	r1, r5
 800ea86:	4630      	mov	r0, r6
 800ea88:	f7ff ffa6 	bl	800e9d8 <sbrk_aligned>
 800ea8c:	3001      	adds	r0, #1
 800ea8e:	d03a      	beq.n	800eb06 <_malloc_r+0xea>
 800ea90:	6823      	ldr	r3, [r4, #0]
 800ea92:	442b      	add	r3, r5
 800ea94:	6023      	str	r3, [r4, #0]
 800ea96:	f8d8 3000 	ldr.w	r3, [r8]
 800ea9a:	685a      	ldr	r2, [r3, #4]
 800ea9c:	bb62      	cbnz	r2, 800eaf8 <_malloc_r+0xdc>
 800ea9e:	f8c8 7000 	str.w	r7, [r8]
 800eaa2:	e00f      	b.n	800eac4 <_malloc_r+0xa8>
 800eaa4:	6822      	ldr	r2, [r4, #0]
 800eaa6:	1b52      	subs	r2, r2, r5
 800eaa8:	d420      	bmi.n	800eaec <_malloc_r+0xd0>
 800eaaa:	2a0b      	cmp	r2, #11
 800eaac:	d917      	bls.n	800eade <_malloc_r+0xc2>
 800eaae:	1961      	adds	r1, r4, r5
 800eab0:	42a3      	cmp	r3, r4
 800eab2:	6025      	str	r5, [r4, #0]
 800eab4:	bf18      	it	ne
 800eab6:	6059      	strne	r1, [r3, #4]
 800eab8:	6863      	ldr	r3, [r4, #4]
 800eaba:	bf08      	it	eq
 800eabc:	f8c8 1000 	streq.w	r1, [r8]
 800eac0:	5162      	str	r2, [r4, r5]
 800eac2:	604b      	str	r3, [r1, #4]
 800eac4:	4630      	mov	r0, r6
 800eac6:	f000 f841 	bl	800eb4c <__malloc_unlock>
 800eaca:	f104 000b 	add.w	r0, r4, #11
 800eace:	1d23      	adds	r3, r4, #4
 800ead0:	f020 0007 	bic.w	r0, r0, #7
 800ead4:	1ac2      	subs	r2, r0, r3
 800ead6:	bf1c      	itt	ne
 800ead8:	1a1b      	subne	r3, r3, r0
 800eada:	50a3      	strne	r3, [r4, r2]
 800eadc:	e7af      	b.n	800ea3e <_malloc_r+0x22>
 800eade:	6862      	ldr	r2, [r4, #4]
 800eae0:	42a3      	cmp	r3, r4
 800eae2:	bf0c      	ite	eq
 800eae4:	f8c8 2000 	streq.w	r2, [r8]
 800eae8:	605a      	strne	r2, [r3, #4]
 800eaea:	e7eb      	b.n	800eac4 <_malloc_r+0xa8>
 800eaec:	4623      	mov	r3, r4
 800eaee:	6864      	ldr	r4, [r4, #4]
 800eaf0:	e7ae      	b.n	800ea50 <_malloc_r+0x34>
 800eaf2:	463c      	mov	r4, r7
 800eaf4:	687f      	ldr	r7, [r7, #4]
 800eaf6:	e7b6      	b.n	800ea66 <_malloc_r+0x4a>
 800eaf8:	461a      	mov	r2, r3
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	42a3      	cmp	r3, r4
 800eafe:	d1fb      	bne.n	800eaf8 <_malloc_r+0xdc>
 800eb00:	2300      	movs	r3, #0
 800eb02:	6053      	str	r3, [r2, #4]
 800eb04:	e7de      	b.n	800eac4 <_malloc_r+0xa8>
 800eb06:	230c      	movs	r3, #12
 800eb08:	6033      	str	r3, [r6, #0]
 800eb0a:	4630      	mov	r0, r6
 800eb0c:	f000 f81e 	bl	800eb4c <__malloc_unlock>
 800eb10:	e794      	b.n	800ea3c <_malloc_r+0x20>
 800eb12:	6005      	str	r5, [r0, #0]
 800eb14:	e7d6      	b.n	800eac4 <_malloc_r+0xa8>
 800eb16:	bf00      	nop
 800eb18:	2001ec10 	.word	0x2001ec10

0800eb1c <__ascii_mbtowc>:
 800eb1c:	b082      	sub	sp, #8
 800eb1e:	b901      	cbnz	r1, 800eb22 <__ascii_mbtowc+0x6>
 800eb20:	a901      	add	r1, sp, #4
 800eb22:	b142      	cbz	r2, 800eb36 <__ascii_mbtowc+0x1a>
 800eb24:	b14b      	cbz	r3, 800eb3a <__ascii_mbtowc+0x1e>
 800eb26:	7813      	ldrb	r3, [r2, #0]
 800eb28:	600b      	str	r3, [r1, #0]
 800eb2a:	7812      	ldrb	r2, [r2, #0]
 800eb2c:	1e10      	subs	r0, r2, #0
 800eb2e:	bf18      	it	ne
 800eb30:	2001      	movne	r0, #1
 800eb32:	b002      	add	sp, #8
 800eb34:	4770      	bx	lr
 800eb36:	4610      	mov	r0, r2
 800eb38:	e7fb      	b.n	800eb32 <__ascii_mbtowc+0x16>
 800eb3a:	f06f 0001 	mvn.w	r0, #1
 800eb3e:	e7f8      	b.n	800eb32 <__ascii_mbtowc+0x16>

0800eb40 <__malloc_lock>:
 800eb40:	4801      	ldr	r0, [pc, #4]	@ (800eb48 <__malloc_lock+0x8>)
 800eb42:	f7fe bd28 	b.w	800d596 <__retarget_lock_acquire_recursive>
 800eb46:	bf00      	nop
 800eb48:	2001ec08 	.word	0x2001ec08

0800eb4c <__malloc_unlock>:
 800eb4c:	4801      	ldr	r0, [pc, #4]	@ (800eb54 <__malloc_unlock+0x8>)
 800eb4e:	f7fe bd23 	b.w	800d598 <__retarget_lock_release_recursive>
 800eb52:	bf00      	nop
 800eb54:	2001ec08 	.word	0x2001ec08

0800eb58 <_Balloc>:
 800eb58:	b570      	push	{r4, r5, r6, lr}
 800eb5a:	69c6      	ldr	r6, [r0, #28]
 800eb5c:	4604      	mov	r4, r0
 800eb5e:	460d      	mov	r5, r1
 800eb60:	b976      	cbnz	r6, 800eb80 <_Balloc+0x28>
 800eb62:	2010      	movs	r0, #16
 800eb64:	f7ff ff30 	bl	800e9c8 <malloc>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	61e0      	str	r0, [r4, #28]
 800eb6c:	b920      	cbnz	r0, 800eb78 <_Balloc+0x20>
 800eb6e:	4b18      	ldr	r3, [pc, #96]	@ (800ebd0 <_Balloc+0x78>)
 800eb70:	4818      	ldr	r0, [pc, #96]	@ (800ebd4 <_Balloc+0x7c>)
 800eb72:	216b      	movs	r1, #107	@ 0x6b
 800eb74:	f7fe fd2e 	bl	800d5d4 <__assert_func>
 800eb78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb7c:	6006      	str	r6, [r0, #0]
 800eb7e:	60c6      	str	r6, [r0, #12]
 800eb80:	69e6      	ldr	r6, [r4, #28]
 800eb82:	68f3      	ldr	r3, [r6, #12]
 800eb84:	b183      	cbz	r3, 800eba8 <_Balloc+0x50>
 800eb86:	69e3      	ldr	r3, [r4, #28]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb8e:	b9b8      	cbnz	r0, 800ebc0 <_Balloc+0x68>
 800eb90:	2101      	movs	r1, #1
 800eb92:	fa01 f605 	lsl.w	r6, r1, r5
 800eb96:	1d72      	adds	r2, r6, #5
 800eb98:	0092      	lsls	r2, r2, #2
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f000 fed9 	bl	800f952 <_calloc_r>
 800eba0:	b160      	cbz	r0, 800ebbc <_Balloc+0x64>
 800eba2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eba6:	e00e      	b.n	800ebc6 <_Balloc+0x6e>
 800eba8:	2221      	movs	r2, #33	@ 0x21
 800ebaa:	2104      	movs	r1, #4
 800ebac:	4620      	mov	r0, r4
 800ebae:	f000 fed0 	bl	800f952 <_calloc_r>
 800ebb2:	69e3      	ldr	r3, [r4, #28]
 800ebb4:	60f0      	str	r0, [r6, #12]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d1e4      	bne.n	800eb86 <_Balloc+0x2e>
 800ebbc:	2000      	movs	r0, #0
 800ebbe:	bd70      	pop	{r4, r5, r6, pc}
 800ebc0:	6802      	ldr	r2, [r0, #0]
 800ebc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ebcc:	e7f7      	b.n	800ebbe <_Balloc+0x66>
 800ebce:	bf00      	nop
 800ebd0:	08014ec0 	.word	0x08014ec0
 800ebd4:	080150de 	.word	0x080150de

0800ebd8 <_Bfree>:
 800ebd8:	b570      	push	{r4, r5, r6, lr}
 800ebda:	69c6      	ldr	r6, [r0, #28]
 800ebdc:	4605      	mov	r5, r0
 800ebde:	460c      	mov	r4, r1
 800ebe0:	b976      	cbnz	r6, 800ec00 <_Bfree+0x28>
 800ebe2:	2010      	movs	r0, #16
 800ebe4:	f7ff fef0 	bl	800e9c8 <malloc>
 800ebe8:	4602      	mov	r2, r0
 800ebea:	61e8      	str	r0, [r5, #28]
 800ebec:	b920      	cbnz	r0, 800ebf8 <_Bfree+0x20>
 800ebee:	4b09      	ldr	r3, [pc, #36]	@ (800ec14 <_Bfree+0x3c>)
 800ebf0:	4809      	ldr	r0, [pc, #36]	@ (800ec18 <_Bfree+0x40>)
 800ebf2:	218f      	movs	r1, #143	@ 0x8f
 800ebf4:	f7fe fcee 	bl	800d5d4 <__assert_func>
 800ebf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ebfc:	6006      	str	r6, [r0, #0]
 800ebfe:	60c6      	str	r6, [r0, #12]
 800ec00:	b13c      	cbz	r4, 800ec12 <_Bfree+0x3a>
 800ec02:	69eb      	ldr	r3, [r5, #28]
 800ec04:	6862      	ldr	r2, [r4, #4]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec0c:	6021      	str	r1, [r4, #0]
 800ec0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec12:	bd70      	pop	{r4, r5, r6, pc}
 800ec14:	08014ec0 	.word	0x08014ec0
 800ec18:	080150de 	.word	0x080150de

0800ec1c <__multadd>:
 800ec1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec20:	690d      	ldr	r5, [r1, #16]
 800ec22:	4607      	mov	r7, r0
 800ec24:	460c      	mov	r4, r1
 800ec26:	461e      	mov	r6, r3
 800ec28:	f101 0c14 	add.w	ip, r1, #20
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	f8dc 3000 	ldr.w	r3, [ip]
 800ec32:	b299      	uxth	r1, r3
 800ec34:	fb02 6101 	mla	r1, r2, r1, r6
 800ec38:	0c1e      	lsrs	r6, r3, #16
 800ec3a:	0c0b      	lsrs	r3, r1, #16
 800ec3c:	fb02 3306 	mla	r3, r2, r6, r3
 800ec40:	b289      	uxth	r1, r1
 800ec42:	3001      	adds	r0, #1
 800ec44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ec48:	4285      	cmp	r5, r0
 800ec4a:	f84c 1b04 	str.w	r1, [ip], #4
 800ec4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ec52:	dcec      	bgt.n	800ec2e <__multadd+0x12>
 800ec54:	b30e      	cbz	r6, 800ec9a <__multadd+0x7e>
 800ec56:	68a3      	ldr	r3, [r4, #8]
 800ec58:	42ab      	cmp	r3, r5
 800ec5a:	dc19      	bgt.n	800ec90 <__multadd+0x74>
 800ec5c:	6861      	ldr	r1, [r4, #4]
 800ec5e:	4638      	mov	r0, r7
 800ec60:	3101      	adds	r1, #1
 800ec62:	f7ff ff79 	bl	800eb58 <_Balloc>
 800ec66:	4680      	mov	r8, r0
 800ec68:	b928      	cbnz	r0, 800ec76 <__multadd+0x5a>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	4b0c      	ldr	r3, [pc, #48]	@ (800eca0 <__multadd+0x84>)
 800ec6e:	480d      	ldr	r0, [pc, #52]	@ (800eca4 <__multadd+0x88>)
 800ec70:	21ba      	movs	r1, #186	@ 0xba
 800ec72:	f7fe fcaf 	bl	800d5d4 <__assert_func>
 800ec76:	6922      	ldr	r2, [r4, #16]
 800ec78:	3202      	adds	r2, #2
 800ec7a:	f104 010c 	add.w	r1, r4, #12
 800ec7e:	0092      	lsls	r2, r2, #2
 800ec80:	300c      	adds	r0, #12
 800ec82:	f7fe fc8a 	bl	800d59a <memcpy>
 800ec86:	4621      	mov	r1, r4
 800ec88:	4638      	mov	r0, r7
 800ec8a:	f7ff ffa5 	bl	800ebd8 <_Bfree>
 800ec8e:	4644      	mov	r4, r8
 800ec90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec94:	3501      	adds	r5, #1
 800ec96:	615e      	str	r6, [r3, #20]
 800ec98:	6125      	str	r5, [r4, #16]
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eca0:	0801506d 	.word	0x0801506d
 800eca4:	080150de 	.word	0x080150de

0800eca8 <__s2b>:
 800eca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecac:	460c      	mov	r4, r1
 800ecae:	4615      	mov	r5, r2
 800ecb0:	461f      	mov	r7, r3
 800ecb2:	2209      	movs	r2, #9
 800ecb4:	3308      	adds	r3, #8
 800ecb6:	4606      	mov	r6, r0
 800ecb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800ecbc:	2100      	movs	r1, #0
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	db09      	blt.n	800ecd8 <__s2b+0x30>
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f7ff ff47 	bl	800eb58 <_Balloc>
 800ecca:	b940      	cbnz	r0, 800ecde <__s2b+0x36>
 800eccc:	4602      	mov	r2, r0
 800ecce:	4b19      	ldr	r3, [pc, #100]	@ (800ed34 <__s2b+0x8c>)
 800ecd0:	4819      	ldr	r0, [pc, #100]	@ (800ed38 <__s2b+0x90>)
 800ecd2:	21d3      	movs	r1, #211	@ 0xd3
 800ecd4:	f7fe fc7e 	bl	800d5d4 <__assert_func>
 800ecd8:	0052      	lsls	r2, r2, #1
 800ecda:	3101      	adds	r1, #1
 800ecdc:	e7f0      	b.n	800ecc0 <__s2b+0x18>
 800ecde:	9b08      	ldr	r3, [sp, #32]
 800ece0:	6143      	str	r3, [r0, #20]
 800ece2:	2d09      	cmp	r5, #9
 800ece4:	f04f 0301 	mov.w	r3, #1
 800ece8:	6103      	str	r3, [r0, #16]
 800ecea:	dd16      	ble.n	800ed1a <__s2b+0x72>
 800ecec:	f104 0909 	add.w	r9, r4, #9
 800ecf0:	46c8      	mov	r8, r9
 800ecf2:	442c      	add	r4, r5
 800ecf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ecf8:	4601      	mov	r1, r0
 800ecfa:	3b30      	subs	r3, #48	@ 0x30
 800ecfc:	220a      	movs	r2, #10
 800ecfe:	4630      	mov	r0, r6
 800ed00:	f7ff ff8c 	bl	800ec1c <__multadd>
 800ed04:	45a0      	cmp	r8, r4
 800ed06:	d1f5      	bne.n	800ecf4 <__s2b+0x4c>
 800ed08:	f1a5 0408 	sub.w	r4, r5, #8
 800ed0c:	444c      	add	r4, r9
 800ed0e:	1b2d      	subs	r5, r5, r4
 800ed10:	1963      	adds	r3, r4, r5
 800ed12:	42bb      	cmp	r3, r7
 800ed14:	db04      	blt.n	800ed20 <__s2b+0x78>
 800ed16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed1a:	340a      	adds	r4, #10
 800ed1c:	2509      	movs	r5, #9
 800ed1e:	e7f6      	b.n	800ed0e <__s2b+0x66>
 800ed20:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ed24:	4601      	mov	r1, r0
 800ed26:	3b30      	subs	r3, #48	@ 0x30
 800ed28:	220a      	movs	r2, #10
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	f7ff ff76 	bl	800ec1c <__multadd>
 800ed30:	e7ee      	b.n	800ed10 <__s2b+0x68>
 800ed32:	bf00      	nop
 800ed34:	0801506d 	.word	0x0801506d
 800ed38:	080150de 	.word	0x080150de

0800ed3c <__hi0bits>:
 800ed3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ed40:	4603      	mov	r3, r0
 800ed42:	bf36      	itet	cc
 800ed44:	0403      	lslcc	r3, r0, #16
 800ed46:	2000      	movcs	r0, #0
 800ed48:	2010      	movcc	r0, #16
 800ed4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ed4e:	bf3c      	itt	cc
 800ed50:	021b      	lslcc	r3, r3, #8
 800ed52:	3008      	addcc	r0, #8
 800ed54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed58:	bf3c      	itt	cc
 800ed5a:	011b      	lslcc	r3, r3, #4
 800ed5c:	3004      	addcc	r0, #4
 800ed5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed62:	bf3c      	itt	cc
 800ed64:	009b      	lslcc	r3, r3, #2
 800ed66:	3002      	addcc	r0, #2
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	db05      	blt.n	800ed78 <__hi0bits+0x3c>
 800ed6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ed70:	f100 0001 	add.w	r0, r0, #1
 800ed74:	bf08      	it	eq
 800ed76:	2020      	moveq	r0, #32
 800ed78:	4770      	bx	lr

0800ed7a <__lo0bits>:
 800ed7a:	6803      	ldr	r3, [r0, #0]
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	f013 0007 	ands.w	r0, r3, #7
 800ed82:	d00b      	beq.n	800ed9c <__lo0bits+0x22>
 800ed84:	07d9      	lsls	r1, r3, #31
 800ed86:	d421      	bmi.n	800edcc <__lo0bits+0x52>
 800ed88:	0798      	lsls	r0, r3, #30
 800ed8a:	bf49      	itett	mi
 800ed8c:	085b      	lsrmi	r3, r3, #1
 800ed8e:	089b      	lsrpl	r3, r3, #2
 800ed90:	2001      	movmi	r0, #1
 800ed92:	6013      	strmi	r3, [r2, #0]
 800ed94:	bf5c      	itt	pl
 800ed96:	6013      	strpl	r3, [r2, #0]
 800ed98:	2002      	movpl	r0, #2
 800ed9a:	4770      	bx	lr
 800ed9c:	b299      	uxth	r1, r3
 800ed9e:	b909      	cbnz	r1, 800eda4 <__lo0bits+0x2a>
 800eda0:	0c1b      	lsrs	r3, r3, #16
 800eda2:	2010      	movs	r0, #16
 800eda4:	b2d9      	uxtb	r1, r3
 800eda6:	b909      	cbnz	r1, 800edac <__lo0bits+0x32>
 800eda8:	3008      	adds	r0, #8
 800edaa:	0a1b      	lsrs	r3, r3, #8
 800edac:	0719      	lsls	r1, r3, #28
 800edae:	bf04      	itt	eq
 800edb0:	091b      	lsreq	r3, r3, #4
 800edb2:	3004      	addeq	r0, #4
 800edb4:	0799      	lsls	r1, r3, #30
 800edb6:	bf04      	itt	eq
 800edb8:	089b      	lsreq	r3, r3, #2
 800edba:	3002      	addeq	r0, #2
 800edbc:	07d9      	lsls	r1, r3, #31
 800edbe:	d403      	bmi.n	800edc8 <__lo0bits+0x4e>
 800edc0:	085b      	lsrs	r3, r3, #1
 800edc2:	f100 0001 	add.w	r0, r0, #1
 800edc6:	d003      	beq.n	800edd0 <__lo0bits+0x56>
 800edc8:	6013      	str	r3, [r2, #0]
 800edca:	4770      	bx	lr
 800edcc:	2000      	movs	r0, #0
 800edce:	4770      	bx	lr
 800edd0:	2020      	movs	r0, #32
 800edd2:	4770      	bx	lr

0800edd4 <__i2b>:
 800edd4:	b510      	push	{r4, lr}
 800edd6:	460c      	mov	r4, r1
 800edd8:	2101      	movs	r1, #1
 800edda:	f7ff febd 	bl	800eb58 <_Balloc>
 800edde:	4602      	mov	r2, r0
 800ede0:	b928      	cbnz	r0, 800edee <__i2b+0x1a>
 800ede2:	4b05      	ldr	r3, [pc, #20]	@ (800edf8 <__i2b+0x24>)
 800ede4:	4805      	ldr	r0, [pc, #20]	@ (800edfc <__i2b+0x28>)
 800ede6:	f240 1145 	movw	r1, #325	@ 0x145
 800edea:	f7fe fbf3 	bl	800d5d4 <__assert_func>
 800edee:	2301      	movs	r3, #1
 800edf0:	6144      	str	r4, [r0, #20]
 800edf2:	6103      	str	r3, [r0, #16]
 800edf4:	bd10      	pop	{r4, pc}
 800edf6:	bf00      	nop
 800edf8:	0801506d 	.word	0x0801506d
 800edfc:	080150de 	.word	0x080150de

0800ee00 <__multiply>:
 800ee00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee04:	4617      	mov	r7, r2
 800ee06:	690a      	ldr	r2, [r1, #16]
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	bfa8      	it	ge
 800ee0e:	463b      	movge	r3, r7
 800ee10:	4689      	mov	r9, r1
 800ee12:	bfa4      	itt	ge
 800ee14:	460f      	movge	r7, r1
 800ee16:	4699      	movge	r9, r3
 800ee18:	693d      	ldr	r5, [r7, #16]
 800ee1a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	6879      	ldr	r1, [r7, #4]
 800ee22:	eb05 060a 	add.w	r6, r5, sl
 800ee26:	42b3      	cmp	r3, r6
 800ee28:	b085      	sub	sp, #20
 800ee2a:	bfb8      	it	lt
 800ee2c:	3101      	addlt	r1, #1
 800ee2e:	f7ff fe93 	bl	800eb58 <_Balloc>
 800ee32:	b930      	cbnz	r0, 800ee42 <__multiply+0x42>
 800ee34:	4602      	mov	r2, r0
 800ee36:	4b41      	ldr	r3, [pc, #260]	@ (800ef3c <__multiply+0x13c>)
 800ee38:	4841      	ldr	r0, [pc, #260]	@ (800ef40 <__multiply+0x140>)
 800ee3a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ee3e:	f7fe fbc9 	bl	800d5d4 <__assert_func>
 800ee42:	f100 0414 	add.w	r4, r0, #20
 800ee46:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ee4a:	4623      	mov	r3, r4
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	4573      	cmp	r3, lr
 800ee50:	d320      	bcc.n	800ee94 <__multiply+0x94>
 800ee52:	f107 0814 	add.w	r8, r7, #20
 800ee56:	f109 0114 	add.w	r1, r9, #20
 800ee5a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ee5e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ee62:	9302      	str	r3, [sp, #8]
 800ee64:	1beb      	subs	r3, r5, r7
 800ee66:	3b15      	subs	r3, #21
 800ee68:	f023 0303 	bic.w	r3, r3, #3
 800ee6c:	3304      	adds	r3, #4
 800ee6e:	3715      	adds	r7, #21
 800ee70:	42bd      	cmp	r5, r7
 800ee72:	bf38      	it	cc
 800ee74:	2304      	movcc	r3, #4
 800ee76:	9301      	str	r3, [sp, #4]
 800ee78:	9b02      	ldr	r3, [sp, #8]
 800ee7a:	9103      	str	r1, [sp, #12]
 800ee7c:	428b      	cmp	r3, r1
 800ee7e:	d80c      	bhi.n	800ee9a <__multiply+0x9a>
 800ee80:	2e00      	cmp	r6, #0
 800ee82:	dd03      	ble.n	800ee8c <__multiply+0x8c>
 800ee84:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d055      	beq.n	800ef38 <__multiply+0x138>
 800ee8c:	6106      	str	r6, [r0, #16]
 800ee8e:	b005      	add	sp, #20
 800ee90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee94:	f843 2b04 	str.w	r2, [r3], #4
 800ee98:	e7d9      	b.n	800ee4e <__multiply+0x4e>
 800ee9a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ee9e:	f1ba 0f00 	cmp.w	sl, #0
 800eea2:	d01f      	beq.n	800eee4 <__multiply+0xe4>
 800eea4:	46c4      	mov	ip, r8
 800eea6:	46a1      	mov	r9, r4
 800eea8:	2700      	movs	r7, #0
 800eeaa:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eeae:	f8d9 3000 	ldr.w	r3, [r9]
 800eeb2:	fa1f fb82 	uxth.w	fp, r2
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	fb0a 330b 	mla	r3, sl, fp, r3
 800eebc:	443b      	add	r3, r7
 800eebe:	f8d9 7000 	ldr.w	r7, [r9]
 800eec2:	0c12      	lsrs	r2, r2, #16
 800eec4:	0c3f      	lsrs	r7, r7, #16
 800eec6:	fb0a 7202 	mla	r2, sl, r2, r7
 800eeca:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800eece:	b29b      	uxth	r3, r3
 800eed0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eed4:	4565      	cmp	r5, ip
 800eed6:	f849 3b04 	str.w	r3, [r9], #4
 800eeda:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800eede:	d8e4      	bhi.n	800eeaa <__multiply+0xaa>
 800eee0:	9b01      	ldr	r3, [sp, #4]
 800eee2:	50e7      	str	r7, [r4, r3]
 800eee4:	9b03      	ldr	r3, [sp, #12]
 800eee6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eeea:	3104      	adds	r1, #4
 800eeec:	f1b9 0f00 	cmp.w	r9, #0
 800eef0:	d020      	beq.n	800ef34 <__multiply+0x134>
 800eef2:	6823      	ldr	r3, [r4, #0]
 800eef4:	4647      	mov	r7, r8
 800eef6:	46a4      	mov	ip, r4
 800eef8:	f04f 0a00 	mov.w	sl, #0
 800eefc:	f8b7 b000 	ldrh.w	fp, [r7]
 800ef00:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ef04:	fb09 220b 	mla	r2, r9, fp, r2
 800ef08:	4452      	add	r2, sl
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef10:	f84c 3b04 	str.w	r3, [ip], #4
 800ef14:	f857 3b04 	ldr.w	r3, [r7], #4
 800ef18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef1c:	f8bc 3000 	ldrh.w	r3, [ip]
 800ef20:	fb09 330a 	mla	r3, r9, sl, r3
 800ef24:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ef28:	42bd      	cmp	r5, r7
 800ef2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef2e:	d8e5      	bhi.n	800eefc <__multiply+0xfc>
 800ef30:	9a01      	ldr	r2, [sp, #4]
 800ef32:	50a3      	str	r3, [r4, r2]
 800ef34:	3404      	adds	r4, #4
 800ef36:	e79f      	b.n	800ee78 <__multiply+0x78>
 800ef38:	3e01      	subs	r6, #1
 800ef3a:	e7a1      	b.n	800ee80 <__multiply+0x80>
 800ef3c:	0801506d 	.word	0x0801506d
 800ef40:	080150de 	.word	0x080150de

0800ef44 <__pow5mult>:
 800ef44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef48:	4615      	mov	r5, r2
 800ef4a:	f012 0203 	ands.w	r2, r2, #3
 800ef4e:	4607      	mov	r7, r0
 800ef50:	460e      	mov	r6, r1
 800ef52:	d007      	beq.n	800ef64 <__pow5mult+0x20>
 800ef54:	4c25      	ldr	r4, [pc, #148]	@ (800efec <__pow5mult+0xa8>)
 800ef56:	3a01      	subs	r2, #1
 800ef58:	2300      	movs	r3, #0
 800ef5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ef5e:	f7ff fe5d 	bl	800ec1c <__multadd>
 800ef62:	4606      	mov	r6, r0
 800ef64:	10ad      	asrs	r5, r5, #2
 800ef66:	d03d      	beq.n	800efe4 <__pow5mult+0xa0>
 800ef68:	69fc      	ldr	r4, [r7, #28]
 800ef6a:	b97c      	cbnz	r4, 800ef8c <__pow5mult+0x48>
 800ef6c:	2010      	movs	r0, #16
 800ef6e:	f7ff fd2b 	bl	800e9c8 <malloc>
 800ef72:	4602      	mov	r2, r0
 800ef74:	61f8      	str	r0, [r7, #28]
 800ef76:	b928      	cbnz	r0, 800ef84 <__pow5mult+0x40>
 800ef78:	4b1d      	ldr	r3, [pc, #116]	@ (800eff0 <__pow5mult+0xac>)
 800ef7a:	481e      	ldr	r0, [pc, #120]	@ (800eff4 <__pow5mult+0xb0>)
 800ef7c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ef80:	f7fe fb28 	bl	800d5d4 <__assert_func>
 800ef84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef88:	6004      	str	r4, [r0, #0]
 800ef8a:	60c4      	str	r4, [r0, #12]
 800ef8c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ef90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef94:	b94c      	cbnz	r4, 800efaa <__pow5mult+0x66>
 800ef96:	f240 2171 	movw	r1, #625	@ 0x271
 800ef9a:	4638      	mov	r0, r7
 800ef9c:	f7ff ff1a 	bl	800edd4 <__i2b>
 800efa0:	2300      	movs	r3, #0
 800efa2:	f8c8 0008 	str.w	r0, [r8, #8]
 800efa6:	4604      	mov	r4, r0
 800efa8:	6003      	str	r3, [r0, #0]
 800efaa:	f04f 0900 	mov.w	r9, #0
 800efae:	07eb      	lsls	r3, r5, #31
 800efb0:	d50a      	bpl.n	800efc8 <__pow5mult+0x84>
 800efb2:	4631      	mov	r1, r6
 800efb4:	4622      	mov	r2, r4
 800efb6:	4638      	mov	r0, r7
 800efb8:	f7ff ff22 	bl	800ee00 <__multiply>
 800efbc:	4631      	mov	r1, r6
 800efbe:	4680      	mov	r8, r0
 800efc0:	4638      	mov	r0, r7
 800efc2:	f7ff fe09 	bl	800ebd8 <_Bfree>
 800efc6:	4646      	mov	r6, r8
 800efc8:	106d      	asrs	r5, r5, #1
 800efca:	d00b      	beq.n	800efe4 <__pow5mult+0xa0>
 800efcc:	6820      	ldr	r0, [r4, #0]
 800efce:	b938      	cbnz	r0, 800efe0 <__pow5mult+0x9c>
 800efd0:	4622      	mov	r2, r4
 800efd2:	4621      	mov	r1, r4
 800efd4:	4638      	mov	r0, r7
 800efd6:	f7ff ff13 	bl	800ee00 <__multiply>
 800efda:	6020      	str	r0, [r4, #0]
 800efdc:	f8c0 9000 	str.w	r9, [r0]
 800efe0:	4604      	mov	r4, r0
 800efe2:	e7e4      	b.n	800efae <__pow5mult+0x6a>
 800efe4:	4630      	mov	r0, r6
 800efe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efea:	bf00      	nop
 800efec:	0801529c 	.word	0x0801529c
 800eff0:	08014ec0 	.word	0x08014ec0
 800eff4:	080150de 	.word	0x080150de

0800eff8 <__lshift>:
 800eff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800effc:	460c      	mov	r4, r1
 800effe:	6849      	ldr	r1, [r1, #4]
 800f000:	6923      	ldr	r3, [r4, #16]
 800f002:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f006:	68a3      	ldr	r3, [r4, #8]
 800f008:	4607      	mov	r7, r0
 800f00a:	4691      	mov	r9, r2
 800f00c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f010:	f108 0601 	add.w	r6, r8, #1
 800f014:	42b3      	cmp	r3, r6
 800f016:	db0b      	blt.n	800f030 <__lshift+0x38>
 800f018:	4638      	mov	r0, r7
 800f01a:	f7ff fd9d 	bl	800eb58 <_Balloc>
 800f01e:	4605      	mov	r5, r0
 800f020:	b948      	cbnz	r0, 800f036 <__lshift+0x3e>
 800f022:	4602      	mov	r2, r0
 800f024:	4b28      	ldr	r3, [pc, #160]	@ (800f0c8 <__lshift+0xd0>)
 800f026:	4829      	ldr	r0, [pc, #164]	@ (800f0cc <__lshift+0xd4>)
 800f028:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f02c:	f7fe fad2 	bl	800d5d4 <__assert_func>
 800f030:	3101      	adds	r1, #1
 800f032:	005b      	lsls	r3, r3, #1
 800f034:	e7ee      	b.n	800f014 <__lshift+0x1c>
 800f036:	2300      	movs	r3, #0
 800f038:	f100 0114 	add.w	r1, r0, #20
 800f03c:	f100 0210 	add.w	r2, r0, #16
 800f040:	4618      	mov	r0, r3
 800f042:	4553      	cmp	r3, sl
 800f044:	db33      	blt.n	800f0ae <__lshift+0xb6>
 800f046:	6920      	ldr	r0, [r4, #16]
 800f048:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f04c:	f104 0314 	add.w	r3, r4, #20
 800f050:	f019 091f 	ands.w	r9, r9, #31
 800f054:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f058:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f05c:	d02b      	beq.n	800f0b6 <__lshift+0xbe>
 800f05e:	f1c9 0e20 	rsb	lr, r9, #32
 800f062:	468a      	mov	sl, r1
 800f064:	2200      	movs	r2, #0
 800f066:	6818      	ldr	r0, [r3, #0]
 800f068:	fa00 f009 	lsl.w	r0, r0, r9
 800f06c:	4310      	orrs	r0, r2
 800f06e:	f84a 0b04 	str.w	r0, [sl], #4
 800f072:	f853 2b04 	ldr.w	r2, [r3], #4
 800f076:	459c      	cmp	ip, r3
 800f078:	fa22 f20e 	lsr.w	r2, r2, lr
 800f07c:	d8f3      	bhi.n	800f066 <__lshift+0x6e>
 800f07e:	ebac 0304 	sub.w	r3, ip, r4
 800f082:	3b15      	subs	r3, #21
 800f084:	f023 0303 	bic.w	r3, r3, #3
 800f088:	3304      	adds	r3, #4
 800f08a:	f104 0015 	add.w	r0, r4, #21
 800f08e:	4560      	cmp	r0, ip
 800f090:	bf88      	it	hi
 800f092:	2304      	movhi	r3, #4
 800f094:	50ca      	str	r2, [r1, r3]
 800f096:	b10a      	cbz	r2, 800f09c <__lshift+0xa4>
 800f098:	f108 0602 	add.w	r6, r8, #2
 800f09c:	3e01      	subs	r6, #1
 800f09e:	4638      	mov	r0, r7
 800f0a0:	612e      	str	r6, [r5, #16]
 800f0a2:	4621      	mov	r1, r4
 800f0a4:	f7ff fd98 	bl	800ebd8 <_Bfree>
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	e7c5      	b.n	800f042 <__lshift+0x4a>
 800f0b6:	3904      	subs	r1, #4
 800f0b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f0c0:	459c      	cmp	ip, r3
 800f0c2:	d8f9      	bhi.n	800f0b8 <__lshift+0xc0>
 800f0c4:	e7ea      	b.n	800f09c <__lshift+0xa4>
 800f0c6:	bf00      	nop
 800f0c8:	0801506d 	.word	0x0801506d
 800f0cc:	080150de 	.word	0x080150de

0800f0d0 <__mcmp>:
 800f0d0:	690a      	ldr	r2, [r1, #16]
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	6900      	ldr	r0, [r0, #16]
 800f0d6:	1a80      	subs	r0, r0, r2
 800f0d8:	b530      	push	{r4, r5, lr}
 800f0da:	d10e      	bne.n	800f0fa <__mcmp+0x2a>
 800f0dc:	3314      	adds	r3, #20
 800f0de:	3114      	adds	r1, #20
 800f0e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f0e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f0e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f0ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f0f0:	4295      	cmp	r5, r2
 800f0f2:	d003      	beq.n	800f0fc <__mcmp+0x2c>
 800f0f4:	d205      	bcs.n	800f102 <__mcmp+0x32>
 800f0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0fa:	bd30      	pop	{r4, r5, pc}
 800f0fc:	42a3      	cmp	r3, r4
 800f0fe:	d3f3      	bcc.n	800f0e8 <__mcmp+0x18>
 800f100:	e7fb      	b.n	800f0fa <__mcmp+0x2a>
 800f102:	2001      	movs	r0, #1
 800f104:	e7f9      	b.n	800f0fa <__mcmp+0x2a>
	...

0800f108 <__mdiff>:
 800f108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f10c:	4689      	mov	r9, r1
 800f10e:	4606      	mov	r6, r0
 800f110:	4611      	mov	r1, r2
 800f112:	4648      	mov	r0, r9
 800f114:	4614      	mov	r4, r2
 800f116:	f7ff ffdb 	bl	800f0d0 <__mcmp>
 800f11a:	1e05      	subs	r5, r0, #0
 800f11c:	d112      	bne.n	800f144 <__mdiff+0x3c>
 800f11e:	4629      	mov	r1, r5
 800f120:	4630      	mov	r0, r6
 800f122:	f7ff fd19 	bl	800eb58 <_Balloc>
 800f126:	4602      	mov	r2, r0
 800f128:	b928      	cbnz	r0, 800f136 <__mdiff+0x2e>
 800f12a:	4b3f      	ldr	r3, [pc, #252]	@ (800f228 <__mdiff+0x120>)
 800f12c:	f240 2137 	movw	r1, #567	@ 0x237
 800f130:	483e      	ldr	r0, [pc, #248]	@ (800f22c <__mdiff+0x124>)
 800f132:	f7fe fa4f 	bl	800d5d4 <__assert_func>
 800f136:	2301      	movs	r3, #1
 800f138:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f13c:	4610      	mov	r0, r2
 800f13e:	b003      	add	sp, #12
 800f140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f144:	bfbc      	itt	lt
 800f146:	464b      	movlt	r3, r9
 800f148:	46a1      	movlt	r9, r4
 800f14a:	4630      	mov	r0, r6
 800f14c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f150:	bfba      	itte	lt
 800f152:	461c      	movlt	r4, r3
 800f154:	2501      	movlt	r5, #1
 800f156:	2500      	movge	r5, #0
 800f158:	f7ff fcfe 	bl	800eb58 <_Balloc>
 800f15c:	4602      	mov	r2, r0
 800f15e:	b918      	cbnz	r0, 800f168 <__mdiff+0x60>
 800f160:	4b31      	ldr	r3, [pc, #196]	@ (800f228 <__mdiff+0x120>)
 800f162:	f240 2145 	movw	r1, #581	@ 0x245
 800f166:	e7e3      	b.n	800f130 <__mdiff+0x28>
 800f168:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f16c:	6926      	ldr	r6, [r4, #16]
 800f16e:	60c5      	str	r5, [r0, #12]
 800f170:	f109 0310 	add.w	r3, r9, #16
 800f174:	f109 0514 	add.w	r5, r9, #20
 800f178:	f104 0e14 	add.w	lr, r4, #20
 800f17c:	f100 0b14 	add.w	fp, r0, #20
 800f180:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f184:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f188:	9301      	str	r3, [sp, #4]
 800f18a:	46d9      	mov	r9, fp
 800f18c:	f04f 0c00 	mov.w	ip, #0
 800f190:	9b01      	ldr	r3, [sp, #4]
 800f192:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f196:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f19a:	9301      	str	r3, [sp, #4]
 800f19c:	fa1f f38a 	uxth.w	r3, sl
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	b283      	uxth	r3, r0
 800f1a4:	1acb      	subs	r3, r1, r3
 800f1a6:	0c00      	lsrs	r0, r0, #16
 800f1a8:	4463      	add	r3, ip
 800f1aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f1ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f1b8:	4576      	cmp	r6, lr
 800f1ba:	f849 3b04 	str.w	r3, [r9], #4
 800f1be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f1c2:	d8e5      	bhi.n	800f190 <__mdiff+0x88>
 800f1c4:	1b33      	subs	r3, r6, r4
 800f1c6:	3b15      	subs	r3, #21
 800f1c8:	f023 0303 	bic.w	r3, r3, #3
 800f1cc:	3415      	adds	r4, #21
 800f1ce:	3304      	adds	r3, #4
 800f1d0:	42a6      	cmp	r6, r4
 800f1d2:	bf38      	it	cc
 800f1d4:	2304      	movcc	r3, #4
 800f1d6:	441d      	add	r5, r3
 800f1d8:	445b      	add	r3, fp
 800f1da:	461e      	mov	r6, r3
 800f1dc:	462c      	mov	r4, r5
 800f1de:	4544      	cmp	r4, r8
 800f1e0:	d30e      	bcc.n	800f200 <__mdiff+0xf8>
 800f1e2:	f108 0103 	add.w	r1, r8, #3
 800f1e6:	1b49      	subs	r1, r1, r5
 800f1e8:	f021 0103 	bic.w	r1, r1, #3
 800f1ec:	3d03      	subs	r5, #3
 800f1ee:	45a8      	cmp	r8, r5
 800f1f0:	bf38      	it	cc
 800f1f2:	2100      	movcc	r1, #0
 800f1f4:	440b      	add	r3, r1
 800f1f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f1fa:	b191      	cbz	r1, 800f222 <__mdiff+0x11a>
 800f1fc:	6117      	str	r7, [r2, #16]
 800f1fe:	e79d      	b.n	800f13c <__mdiff+0x34>
 800f200:	f854 1b04 	ldr.w	r1, [r4], #4
 800f204:	46e6      	mov	lr, ip
 800f206:	0c08      	lsrs	r0, r1, #16
 800f208:	fa1c fc81 	uxtah	ip, ip, r1
 800f20c:	4471      	add	r1, lr
 800f20e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f212:	b289      	uxth	r1, r1
 800f214:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f218:	f846 1b04 	str.w	r1, [r6], #4
 800f21c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f220:	e7dd      	b.n	800f1de <__mdiff+0xd6>
 800f222:	3f01      	subs	r7, #1
 800f224:	e7e7      	b.n	800f1f6 <__mdiff+0xee>
 800f226:	bf00      	nop
 800f228:	0801506d 	.word	0x0801506d
 800f22c:	080150de 	.word	0x080150de

0800f230 <__ulp>:
 800f230:	b082      	sub	sp, #8
 800f232:	ed8d 0b00 	vstr	d0, [sp]
 800f236:	9a01      	ldr	r2, [sp, #4]
 800f238:	4b0f      	ldr	r3, [pc, #60]	@ (800f278 <__ulp+0x48>)
 800f23a:	4013      	ands	r3, r2
 800f23c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f240:	2b00      	cmp	r3, #0
 800f242:	dc08      	bgt.n	800f256 <__ulp+0x26>
 800f244:	425b      	negs	r3, r3
 800f246:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f24a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f24e:	da04      	bge.n	800f25a <__ulp+0x2a>
 800f250:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f254:	4113      	asrs	r3, r2
 800f256:	2200      	movs	r2, #0
 800f258:	e008      	b.n	800f26c <__ulp+0x3c>
 800f25a:	f1a2 0314 	sub.w	r3, r2, #20
 800f25e:	2b1e      	cmp	r3, #30
 800f260:	bfda      	itte	le
 800f262:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f266:	40da      	lsrle	r2, r3
 800f268:	2201      	movgt	r2, #1
 800f26a:	2300      	movs	r3, #0
 800f26c:	4619      	mov	r1, r3
 800f26e:	4610      	mov	r0, r2
 800f270:	ec41 0b10 	vmov	d0, r0, r1
 800f274:	b002      	add	sp, #8
 800f276:	4770      	bx	lr
 800f278:	7ff00000 	.word	0x7ff00000

0800f27c <__b2d>:
 800f27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f280:	6906      	ldr	r6, [r0, #16]
 800f282:	f100 0814 	add.w	r8, r0, #20
 800f286:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f28a:	1f37      	subs	r7, r6, #4
 800f28c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f290:	4610      	mov	r0, r2
 800f292:	f7ff fd53 	bl	800ed3c <__hi0bits>
 800f296:	f1c0 0320 	rsb	r3, r0, #32
 800f29a:	280a      	cmp	r0, #10
 800f29c:	600b      	str	r3, [r1, #0]
 800f29e:	491b      	ldr	r1, [pc, #108]	@ (800f30c <__b2d+0x90>)
 800f2a0:	dc15      	bgt.n	800f2ce <__b2d+0x52>
 800f2a2:	f1c0 0c0b 	rsb	ip, r0, #11
 800f2a6:	fa22 f30c 	lsr.w	r3, r2, ip
 800f2aa:	45b8      	cmp	r8, r7
 800f2ac:	ea43 0501 	orr.w	r5, r3, r1
 800f2b0:	bf34      	ite	cc
 800f2b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f2b6:	2300      	movcs	r3, #0
 800f2b8:	3015      	adds	r0, #21
 800f2ba:	fa02 f000 	lsl.w	r0, r2, r0
 800f2be:	fa23 f30c 	lsr.w	r3, r3, ip
 800f2c2:	4303      	orrs	r3, r0
 800f2c4:	461c      	mov	r4, r3
 800f2c6:	ec45 4b10 	vmov	d0, r4, r5
 800f2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2ce:	45b8      	cmp	r8, r7
 800f2d0:	bf3a      	itte	cc
 800f2d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f2d6:	f1a6 0708 	subcc.w	r7, r6, #8
 800f2da:	2300      	movcs	r3, #0
 800f2dc:	380b      	subs	r0, #11
 800f2de:	d012      	beq.n	800f306 <__b2d+0x8a>
 800f2e0:	f1c0 0120 	rsb	r1, r0, #32
 800f2e4:	fa23 f401 	lsr.w	r4, r3, r1
 800f2e8:	4082      	lsls	r2, r0
 800f2ea:	4322      	orrs	r2, r4
 800f2ec:	4547      	cmp	r7, r8
 800f2ee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f2f2:	bf8c      	ite	hi
 800f2f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f2f8:	2200      	movls	r2, #0
 800f2fa:	4083      	lsls	r3, r0
 800f2fc:	40ca      	lsrs	r2, r1
 800f2fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f302:	4313      	orrs	r3, r2
 800f304:	e7de      	b.n	800f2c4 <__b2d+0x48>
 800f306:	ea42 0501 	orr.w	r5, r2, r1
 800f30a:	e7db      	b.n	800f2c4 <__b2d+0x48>
 800f30c:	3ff00000 	.word	0x3ff00000

0800f310 <__d2b>:
 800f310:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f314:	460f      	mov	r7, r1
 800f316:	2101      	movs	r1, #1
 800f318:	ec59 8b10 	vmov	r8, r9, d0
 800f31c:	4616      	mov	r6, r2
 800f31e:	f7ff fc1b 	bl	800eb58 <_Balloc>
 800f322:	4604      	mov	r4, r0
 800f324:	b930      	cbnz	r0, 800f334 <__d2b+0x24>
 800f326:	4602      	mov	r2, r0
 800f328:	4b23      	ldr	r3, [pc, #140]	@ (800f3b8 <__d2b+0xa8>)
 800f32a:	4824      	ldr	r0, [pc, #144]	@ (800f3bc <__d2b+0xac>)
 800f32c:	f240 310f 	movw	r1, #783	@ 0x30f
 800f330:	f7fe f950 	bl	800d5d4 <__assert_func>
 800f334:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f338:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f33c:	b10d      	cbz	r5, 800f342 <__d2b+0x32>
 800f33e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f342:	9301      	str	r3, [sp, #4]
 800f344:	f1b8 0300 	subs.w	r3, r8, #0
 800f348:	d023      	beq.n	800f392 <__d2b+0x82>
 800f34a:	4668      	mov	r0, sp
 800f34c:	9300      	str	r3, [sp, #0]
 800f34e:	f7ff fd14 	bl	800ed7a <__lo0bits>
 800f352:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f356:	b1d0      	cbz	r0, 800f38e <__d2b+0x7e>
 800f358:	f1c0 0320 	rsb	r3, r0, #32
 800f35c:	fa02 f303 	lsl.w	r3, r2, r3
 800f360:	430b      	orrs	r3, r1
 800f362:	40c2      	lsrs	r2, r0
 800f364:	6163      	str	r3, [r4, #20]
 800f366:	9201      	str	r2, [sp, #4]
 800f368:	9b01      	ldr	r3, [sp, #4]
 800f36a:	61a3      	str	r3, [r4, #24]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	bf0c      	ite	eq
 800f370:	2201      	moveq	r2, #1
 800f372:	2202      	movne	r2, #2
 800f374:	6122      	str	r2, [r4, #16]
 800f376:	b1a5      	cbz	r5, 800f3a2 <__d2b+0x92>
 800f378:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f37c:	4405      	add	r5, r0
 800f37e:	603d      	str	r5, [r7, #0]
 800f380:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f384:	6030      	str	r0, [r6, #0]
 800f386:	4620      	mov	r0, r4
 800f388:	b003      	add	sp, #12
 800f38a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f38e:	6161      	str	r1, [r4, #20]
 800f390:	e7ea      	b.n	800f368 <__d2b+0x58>
 800f392:	a801      	add	r0, sp, #4
 800f394:	f7ff fcf1 	bl	800ed7a <__lo0bits>
 800f398:	9b01      	ldr	r3, [sp, #4]
 800f39a:	6163      	str	r3, [r4, #20]
 800f39c:	3020      	adds	r0, #32
 800f39e:	2201      	movs	r2, #1
 800f3a0:	e7e8      	b.n	800f374 <__d2b+0x64>
 800f3a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f3a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f3aa:	6038      	str	r0, [r7, #0]
 800f3ac:	6918      	ldr	r0, [r3, #16]
 800f3ae:	f7ff fcc5 	bl	800ed3c <__hi0bits>
 800f3b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f3b6:	e7e5      	b.n	800f384 <__d2b+0x74>
 800f3b8:	0801506d 	.word	0x0801506d
 800f3bc:	080150de 	.word	0x080150de

0800f3c0 <__ratio>:
 800f3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c4:	b085      	sub	sp, #20
 800f3c6:	e9cd 1000 	strd	r1, r0, [sp]
 800f3ca:	a902      	add	r1, sp, #8
 800f3cc:	f7ff ff56 	bl	800f27c <__b2d>
 800f3d0:	9800      	ldr	r0, [sp, #0]
 800f3d2:	a903      	add	r1, sp, #12
 800f3d4:	ec55 4b10 	vmov	r4, r5, d0
 800f3d8:	f7ff ff50 	bl	800f27c <__b2d>
 800f3dc:	9b01      	ldr	r3, [sp, #4]
 800f3de:	6919      	ldr	r1, [r3, #16]
 800f3e0:	9b00      	ldr	r3, [sp, #0]
 800f3e2:	691b      	ldr	r3, [r3, #16]
 800f3e4:	1ac9      	subs	r1, r1, r3
 800f3e6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f3ea:	1a9b      	subs	r3, r3, r2
 800f3ec:	ec5b ab10 	vmov	sl, fp, d0
 800f3f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	bfce      	itee	gt
 800f3f8:	462a      	movgt	r2, r5
 800f3fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f3fe:	465a      	movle	r2, fp
 800f400:	462f      	mov	r7, r5
 800f402:	46d9      	mov	r9, fp
 800f404:	bfcc      	ite	gt
 800f406:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f40a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f40e:	464b      	mov	r3, r9
 800f410:	4652      	mov	r2, sl
 800f412:	4620      	mov	r0, r4
 800f414:	4639      	mov	r1, r7
 800f416:	f7f1 fa29 	bl	800086c <__aeabi_ddiv>
 800f41a:	ec41 0b10 	vmov	d0, r0, r1
 800f41e:	b005      	add	sp, #20
 800f420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f424 <__copybits>:
 800f424:	3901      	subs	r1, #1
 800f426:	b570      	push	{r4, r5, r6, lr}
 800f428:	1149      	asrs	r1, r1, #5
 800f42a:	6914      	ldr	r4, [r2, #16]
 800f42c:	3101      	adds	r1, #1
 800f42e:	f102 0314 	add.w	r3, r2, #20
 800f432:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f436:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f43a:	1f05      	subs	r5, r0, #4
 800f43c:	42a3      	cmp	r3, r4
 800f43e:	d30c      	bcc.n	800f45a <__copybits+0x36>
 800f440:	1aa3      	subs	r3, r4, r2
 800f442:	3b11      	subs	r3, #17
 800f444:	f023 0303 	bic.w	r3, r3, #3
 800f448:	3211      	adds	r2, #17
 800f44a:	42a2      	cmp	r2, r4
 800f44c:	bf88      	it	hi
 800f44e:	2300      	movhi	r3, #0
 800f450:	4418      	add	r0, r3
 800f452:	2300      	movs	r3, #0
 800f454:	4288      	cmp	r0, r1
 800f456:	d305      	bcc.n	800f464 <__copybits+0x40>
 800f458:	bd70      	pop	{r4, r5, r6, pc}
 800f45a:	f853 6b04 	ldr.w	r6, [r3], #4
 800f45e:	f845 6f04 	str.w	r6, [r5, #4]!
 800f462:	e7eb      	b.n	800f43c <__copybits+0x18>
 800f464:	f840 3b04 	str.w	r3, [r0], #4
 800f468:	e7f4      	b.n	800f454 <__copybits+0x30>

0800f46a <__any_on>:
 800f46a:	f100 0214 	add.w	r2, r0, #20
 800f46e:	6900      	ldr	r0, [r0, #16]
 800f470:	114b      	asrs	r3, r1, #5
 800f472:	4298      	cmp	r0, r3
 800f474:	b510      	push	{r4, lr}
 800f476:	db11      	blt.n	800f49c <__any_on+0x32>
 800f478:	dd0a      	ble.n	800f490 <__any_on+0x26>
 800f47a:	f011 011f 	ands.w	r1, r1, #31
 800f47e:	d007      	beq.n	800f490 <__any_on+0x26>
 800f480:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f484:	fa24 f001 	lsr.w	r0, r4, r1
 800f488:	fa00 f101 	lsl.w	r1, r0, r1
 800f48c:	428c      	cmp	r4, r1
 800f48e:	d10b      	bne.n	800f4a8 <__any_on+0x3e>
 800f490:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f494:	4293      	cmp	r3, r2
 800f496:	d803      	bhi.n	800f4a0 <__any_on+0x36>
 800f498:	2000      	movs	r0, #0
 800f49a:	bd10      	pop	{r4, pc}
 800f49c:	4603      	mov	r3, r0
 800f49e:	e7f7      	b.n	800f490 <__any_on+0x26>
 800f4a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f4a4:	2900      	cmp	r1, #0
 800f4a6:	d0f5      	beq.n	800f494 <__any_on+0x2a>
 800f4a8:	2001      	movs	r0, #1
 800f4aa:	e7f6      	b.n	800f49a <__any_on+0x30>

0800f4ac <__ascii_wctomb>:
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	4608      	mov	r0, r1
 800f4b0:	b141      	cbz	r1, 800f4c4 <__ascii_wctomb+0x18>
 800f4b2:	2aff      	cmp	r2, #255	@ 0xff
 800f4b4:	d904      	bls.n	800f4c0 <__ascii_wctomb+0x14>
 800f4b6:	228a      	movs	r2, #138	@ 0x8a
 800f4b8:	601a      	str	r2, [r3, #0]
 800f4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f4be:	4770      	bx	lr
 800f4c0:	700a      	strb	r2, [r1, #0]
 800f4c2:	2001      	movs	r0, #1
 800f4c4:	4770      	bx	lr

0800f4c6 <__ssputs_r>:
 800f4c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4ca:	688e      	ldr	r6, [r1, #8]
 800f4cc:	461f      	mov	r7, r3
 800f4ce:	42be      	cmp	r6, r7
 800f4d0:	680b      	ldr	r3, [r1, #0]
 800f4d2:	4682      	mov	sl, r0
 800f4d4:	460c      	mov	r4, r1
 800f4d6:	4690      	mov	r8, r2
 800f4d8:	d82d      	bhi.n	800f536 <__ssputs_r+0x70>
 800f4da:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f4de:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f4e2:	d026      	beq.n	800f532 <__ssputs_r+0x6c>
 800f4e4:	6965      	ldr	r5, [r4, #20]
 800f4e6:	6909      	ldr	r1, [r1, #16]
 800f4e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4ec:	eba3 0901 	sub.w	r9, r3, r1
 800f4f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f4f4:	1c7b      	adds	r3, r7, #1
 800f4f6:	444b      	add	r3, r9
 800f4f8:	106d      	asrs	r5, r5, #1
 800f4fa:	429d      	cmp	r5, r3
 800f4fc:	bf38      	it	cc
 800f4fe:	461d      	movcc	r5, r3
 800f500:	0553      	lsls	r3, r2, #21
 800f502:	d527      	bpl.n	800f554 <__ssputs_r+0x8e>
 800f504:	4629      	mov	r1, r5
 800f506:	f7ff fa89 	bl	800ea1c <_malloc_r>
 800f50a:	4606      	mov	r6, r0
 800f50c:	b360      	cbz	r0, 800f568 <__ssputs_r+0xa2>
 800f50e:	6921      	ldr	r1, [r4, #16]
 800f510:	464a      	mov	r2, r9
 800f512:	f7fe f842 	bl	800d59a <memcpy>
 800f516:	89a3      	ldrh	r3, [r4, #12]
 800f518:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f51c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f520:	81a3      	strh	r3, [r4, #12]
 800f522:	6126      	str	r6, [r4, #16]
 800f524:	6165      	str	r5, [r4, #20]
 800f526:	444e      	add	r6, r9
 800f528:	eba5 0509 	sub.w	r5, r5, r9
 800f52c:	6026      	str	r6, [r4, #0]
 800f52e:	60a5      	str	r5, [r4, #8]
 800f530:	463e      	mov	r6, r7
 800f532:	42be      	cmp	r6, r7
 800f534:	d900      	bls.n	800f538 <__ssputs_r+0x72>
 800f536:	463e      	mov	r6, r7
 800f538:	6820      	ldr	r0, [r4, #0]
 800f53a:	4632      	mov	r2, r6
 800f53c:	4641      	mov	r1, r8
 800f53e:	f000 f9d7 	bl	800f8f0 <memmove>
 800f542:	68a3      	ldr	r3, [r4, #8]
 800f544:	1b9b      	subs	r3, r3, r6
 800f546:	60a3      	str	r3, [r4, #8]
 800f548:	6823      	ldr	r3, [r4, #0]
 800f54a:	4433      	add	r3, r6
 800f54c:	6023      	str	r3, [r4, #0]
 800f54e:	2000      	movs	r0, #0
 800f550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f554:	462a      	mov	r2, r5
 800f556:	f000 fa10 	bl	800f97a <_realloc_r>
 800f55a:	4606      	mov	r6, r0
 800f55c:	2800      	cmp	r0, #0
 800f55e:	d1e0      	bne.n	800f522 <__ssputs_r+0x5c>
 800f560:	6921      	ldr	r1, [r4, #16]
 800f562:	4650      	mov	r0, sl
 800f564:	f7fe feac 	bl	800e2c0 <_free_r>
 800f568:	230c      	movs	r3, #12
 800f56a:	f8ca 3000 	str.w	r3, [sl]
 800f56e:	89a3      	ldrh	r3, [r4, #12]
 800f570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f574:	81a3      	strh	r3, [r4, #12]
 800f576:	f04f 30ff 	mov.w	r0, #4294967295
 800f57a:	e7e9      	b.n	800f550 <__ssputs_r+0x8a>

0800f57c <_svfiprintf_r>:
 800f57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f580:	4698      	mov	r8, r3
 800f582:	898b      	ldrh	r3, [r1, #12]
 800f584:	061b      	lsls	r3, r3, #24
 800f586:	b09d      	sub	sp, #116	@ 0x74
 800f588:	4607      	mov	r7, r0
 800f58a:	460d      	mov	r5, r1
 800f58c:	4614      	mov	r4, r2
 800f58e:	d510      	bpl.n	800f5b2 <_svfiprintf_r+0x36>
 800f590:	690b      	ldr	r3, [r1, #16]
 800f592:	b973      	cbnz	r3, 800f5b2 <_svfiprintf_r+0x36>
 800f594:	2140      	movs	r1, #64	@ 0x40
 800f596:	f7ff fa41 	bl	800ea1c <_malloc_r>
 800f59a:	6028      	str	r0, [r5, #0]
 800f59c:	6128      	str	r0, [r5, #16]
 800f59e:	b930      	cbnz	r0, 800f5ae <_svfiprintf_r+0x32>
 800f5a0:	230c      	movs	r3, #12
 800f5a2:	603b      	str	r3, [r7, #0]
 800f5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a8:	b01d      	add	sp, #116	@ 0x74
 800f5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ae:	2340      	movs	r3, #64	@ 0x40
 800f5b0:	616b      	str	r3, [r5, #20]
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5b6:	2320      	movs	r3, #32
 800f5b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5c0:	2330      	movs	r3, #48	@ 0x30
 800f5c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f760 <_svfiprintf_r+0x1e4>
 800f5c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f5ca:	f04f 0901 	mov.w	r9, #1
 800f5ce:	4623      	mov	r3, r4
 800f5d0:	469a      	mov	sl, r3
 800f5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5d6:	b10a      	cbz	r2, 800f5dc <_svfiprintf_r+0x60>
 800f5d8:	2a25      	cmp	r2, #37	@ 0x25
 800f5da:	d1f9      	bne.n	800f5d0 <_svfiprintf_r+0x54>
 800f5dc:	ebba 0b04 	subs.w	fp, sl, r4
 800f5e0:	d00b      	beq.n	800f5fa <_svfiprintf_r+0x7e>
 800f5e2:	465b      	mov	r3, fp
 800f5e4:	4622      	mov	r2, r4
 800f5e6:	4629      	mov	r1, r5
 800f5e8:	4638      	mov	r0, r7
 800f5ea:	f7ff ff6c 	bl	800f4c6 <__ssputs_r>
 800f5ee:	3001      	adds	r0, #1
 800f5f0:	f000 80a7 	beq.w	800f742 <_svfiprintf_r+0x1c6>
 800f5f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5f6:	445a      	add	r2, fp
 800f5f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	f000 809f 	beq.w	800f742 <_svfiprintf_r+0x1c6>
 800f604:	2300      	movs	r3, #0
 800f606:	f04f 32ff 	mov.w	r2, #4294967295
 800f60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f60e:	f10a 0a01 	add.w	sl, sl, #1
 800f612:	9304      	str	r3, [sp, #16]
 800f614:	9307      	str	r3, [sp, #28]
 800f616:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f61a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f61c:	4654      	mov	r4, sl
 800f61e:	2205      	movs	r2, #5
 800f620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f624:	484e      	ldr	r0, [pc, #312]	@ (800f760 <_svfiprintf_r+0x1e4>)
 800f626:	f7f0 fde3 	bl	80001f0 <memchr>
 800f62a:	9a04      	ldr	r2, [sp, #16]
 800f62c:	b9d8      	cbnz	r0, 800f666 <_svfiprintf_r+0xea>
 800f62e:	06d0      	lsls	r0, r2, #27
 800f630:	bf44      	itt	mi
 800f632:	2320      	movmi	r3, #32
 800f634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f638:	0711      	lsls	r1, r2, #28
 800f63a:	bf44      	itt	mi
 800f63c:	232b      	movmi	r3, #43	@ 0x2b
 800f63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f642:	f89a 3000 	ldrb.w	r3, [sl]
 800f646:	2b2a      	cmp	r3, #42	@ 0x2a
 800f648:	d015      	beq.n	800f676 <_svfiprintf_r+0xfa>
 800f64a:	9a07      	ldr	r2, [sp, #28]
 800f64c:	4654      	mov	r4, sl
 800f64e:	2000      	movs	r0, #0
 800f650:	f04f 0c0a 	mov.w	ip, #10
 800f654:	4621      	mov	r1, r4
 800f656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f65a:	3b30      	subs	r3, #48	@ 0x30
 800f65c:	2b09      	cmp	r3, #9
 800f65e:	d94b      	bls.n	800f6f8 <_svfiprintf_r+0x17c>
 800f660:	b1b0      	cbz	r0, 800f690 <_svfiprintf_r+0x114>
 800f662:	9207      	str	r2, [sp, #28]
 800f664:	e014      	b.n	800f690 <_svfiprintf_r+0x114>
 800f666:	eba0 0308 	sub.w	r3, r0, r8
 800f66a:	fa09 f303 	lsl.w	r3, r9, r3
 800f66e:	4313      	orrs	r3, r2
 800f670:	9304      	str	r3, [sp, #16]
 800f672:	46a2      	mov	sl, r4
 800f674:	e7d2      	b.n	800f61c <_svfiprintf_r+0xa0>
 800f676:	9b03      	ldr	r3, [sp, #12]
 800f678:	1d19      	adds	r1, r3, #4
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	9103      	str	r1, [sp, #12]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	bfbb      	ittet	lt
 800f682:	425b      	neglt	r3, r3
 800f684:	f042 0202 	orrlt.w	r2, r2, #2
 800f688:	9307      	strge	r3, [sp, #28]
 800f68a:	9307      	strlt	r3, [sp, #28]
 800f68c:	bfb8      	it	lt
 800f68e:	9204      	strlt	r2, [sp, #16]
 800f690:	7823      	ldrb	r3, [r4, #0]
 800f692:	2b2e      	cmp	r3, #46	@ 0x2e
 800f694:	d10a      	bne.n	800f6ac <_svfiprintf_r+0x130>
 800f696:	7863      	ldrb	r3, [r4, #1]
 800f698:	2b2a      	cmp	r3, #42	@ 0x2a
 800f69a:	d132      	bne.n	800f702 <_svfiprintf_r+0x186>
 800f69c:	9b03      	ldr	r3, [sp, #12]
 800f69e:	1d1a      	adds	r2, r3, #4
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	9203      	str	r2, [sp, #12]
 800f6a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f6a8:	3402      	adds	r4, #2
 800f6aa:	9305      	str	r3, [sp, #20]
 800f6ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f770 <_svfiprintf_r+0x1f4>
 800f6b0:	7821      	ldrb	r1, [r4, #0]
 800f6b2:	2203      	movs	r2, #3
 800f6b4:	4650      	mov	r0, sl
 800f6b6:	f7f0 fd9b 	bl	80001f0 <memchr>
 800f6ba:	b138      	cbz	r0, 800f6cc <_svfiprintf_r+0x150>
 800f6bc:	9b04      	ldr	r3, [sp, #16]
 800f6be:	eba0 000a 	sub.w	r0, r0, sl
 800f6c2:	2240      	movs	r2, #64	@ 0x40
 800f6c4:	4082      	lsls	r2, r0
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	3401      	adds	r4, #1
 800f6ca:	9304      	str	r3, [sp, #16]
 800f6cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6d0:	4824      	ldr	r0, [pc, #144]	@ (800f764 <_svfiprintf_r+0x1e8>)
 800f6d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f6d6:	2206      	movs	r2, #6
 800f6d8:	f7f0 fd8a 	bl	80001f0 <memchr>
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	d036      	beq.n	800f74e <_svfiprintf_r+0x1d2>
 800f6e0:	4b21      	ldr	r3, [pc, #132]	@ (800f768 <_svfiprintf_r+0x1ec>)
 800f6e2:	bb1b      	cbnz	r3, 800f72c <_svfiprintf_r+0x1b0>
 800f6e4:	9b03      	ldr	r3, [sp, #12]
 800f6e6:	3307      	adds	r3, #7
 800f6e8:	f023 0307 	bic.w	r3, r3, #7
 800f6ec:	3308      	adds	r3, #8
 800f6ee:	9303      	str	r3, [sp, #12]
 800f6f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6f2:	4433      	add	r3, r6
 800f6f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6f6:	e76a      	b.n	800f5ce <_svfiprintf_r+0x52>
 800f6f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6fc:	460c      	mov	r4, r1
 800f6fe:	2001      	movs	r0, #1
 800f700:	e7a8      	b.n	800f654 <_svfiprintf_r+0xd8>
 800f702:	2300      	movs	r3, #0
 800f704:	3401      	adds	r4, #1
 800f706:	9305      	str	r3, [sp, #20]
 800f708:	4619      	mov	r1, r3
 800f70a:	f04f 0c0a 	mov.w	ip, #10
 800f70e:	4620      	mov	r0, r4
 800f710:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f714:	3a30      	subs	r2, #48	@ 0x30
 800f716:	2a09      	cmp	r2, #9
 800f718:	d903      	bls.n	800f722 <_svfiprintf_r+0x1a6>
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d0c6      	beq.n	800f6ac <_svfiprintf_r+0x130>
 800f71e:	9105      	str	r1, [sp, #20]
 800f720:	e7c4      	b.n	800f6ac <_svfiprintf_r+0x130>
 800f722:	fb0c 2101 	mla	r1, ip, r1, r2
 800f726:	4604      	mov	r4, r0
 800f728:	2301      	movs	r3, #1
 800f72a:	e7f0      	b.n	800f70e <_svfiprintf_r+0x192>
 800f72c:	ab03      	add	r3, sp, #12
 800f72e:	9300      	str	r3, [sp, #0]
 800f730:	462a      	mov	r2, r5
 800f732:	4b0e      	ldr	r3, [pc, #56]	@ (800f76c <_svfiprintf_r+0x1f0>)
 800f734:	a904      	add	r1, sp, #16
 800f736:	4638      	mov	r0, r7
 800f738:	f7fc feee 	bl	800c518 <_printf_float>
 800f73c:	1c42      	adds	r2, r0, #1
 800f73e:	4606      	mov	r6, r0
 800f740:	d1d6      	bne.n	800f6f0 <_svfiprintf_r+0x174>
 800f742:	89ab      	ldrh	r3, [r5, #12]
 800f744:	065b      	lsls	r3, r3, #25
 800f746:	f53f af2d 	bmi.w	800f5a4 <_svfiprintf_r+0x28>
 800f74a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f74c:	e72c      	b.n	800f5a8 <_svfiprintf_r+0x2c>
 800f74e:	ab03      	add	r3, sp, #12
 800f750:	9300      	str	r3, [sp, #0]
 800f752:	462a      	mov	r2, r5
 800f754:	4b05      	ldr	r3, [pc, #20]	@ (800f76c <_svfiprintf_r+0x1f0>)
 800f756:	a904      	add	r1, sp, #16
 800f758:	4638      	mov	r0, r7
 800f75a:	f7fd f975 	bl	800ca48 <_printf_i>
 800f75e:	e7ed      	b.n	800f73c <_svfiprintf_r+0x1c0>
 800f760:	08015137 	.word	0x08015137
 800f764:	08015141 	.word	0x08015141
 800f768:	0800c519 	.word	0x0800c519
 800f76c:	0800f4c7 	.word	0x0800f4c7
 800f770:	0801513d 	.word	0x0801513d

0800f774 <__sflush_r>:
 800f774:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f77c:	0716      	lsls	r6, r2, #28
 800f77e:	4605      	mov	r5, r0
 800f780:	460c      	mov	r4, r1
 800f782:	d454      	bmi.n	800f82e <__sflush_r+0xba>
 800f784:	684b      	ldr	r3, [r1, #4]
 800f786:	2b00      	cmp	r3, #0
 800f788:	dc02      	bgt.n	800f790 <__sflush_r+0x1c>
 800f78a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	dd48      	ble.n	800f822 <__sflush_r+0xae>
 800f790:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f792:	2e00      	cmp	r6, #0
 800f794:	d045      	beq.n	800f822 <__sflush_r+0xae>
 800f796:	2300      	movs	r3, #0
 800f798:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f79c:	682f      	ldr	r7, [r5, #0]
 800f79e:	6a21      	ldr	r1, [r4, #32]
 800f7a0:	602b      	str	r3, [r5, #0]
 800f7a2:	d030      	beq.n	800f806 <__sflush_r+0x92>
 800f7a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f7a6:	89a3      	ldrh	r3, [r4, #12]
 800f7a8:	0759      	lsls	r1, r3, #29
 800f7aa:	d505      	bpl.n	800f7b8 <__sflush_r+0x44>
 800f7ac:	6863      	ldr	r3, [r4, #4]
 800f7ae:	1ad2      	subs	r2, r2, r3
 800f7b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f7b2:	b10b      	cbz	r3, 800f7b8 <__sflush_r+0x44>
 800f7b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f7b6:	1ad2      	subs	r2, r2, r3
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f7bc:	6a21      	ldr	r1, [r4, #32]
 800f7be:	4628      	mov	r0, r5
 800f7c0:	47b0      	blx	r6
 800f7c2:	1c43      	adds	r3, r0, #1
 800f7c4:	89a3      	ldrh	r3, [r4, #12]
 800f7c6:	d106      	bne.n	800f7d6 <__sflush_r+0x62>
 800f7c8:	6829      	ldr	r1, [r5, #0]
 800f7ca:	291d      	cmp	r1, #29
 800f7cc:	d82b      	bhi.n	800f826 <__sflush_r+0xb2>
 800f7ce:	4a2a      	ldr	r2, [pc, #168]	@ (800f878 <__sflush_r+0x104>)
 800f7d0:	40ca      	lsrs	r2, r1
 800f7d2:	07d6      	lsls	r6, r2, #31
 800f7d4:	d527      	bpl.n	800f826 <__sflush_r+0xb2>
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	6062      	str	r2, [r4, #4]
 800f7da:	04d9      	lsls	r1, r3, #19
 800f7dc:	6922      	ldr	r2, [r4, #16]
 800f7de:	6022      	str	r2, [r4, #0]
 800f7e0:	d504      	bpl.n	800f7ec <__sflush_r+0x78>
 800f7e2:	1c42      	adds	r2, r0, #1
 800f7e4:	d101      	bne.n	800f7ea <__sflush_r+0x76>
 800f7e6:	682b      	ldr	r3, [r5, #0]
 800f7e8:	b903      	cbnz	r3, 800f7ec <__sflush_r+0x78>
 800f7ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800f7ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f7ee:	602f      	str	r7, [r5, #0]
 800f7f0:	b1b9      	cbz	r1, 800f822 <__sflush_r+0xae>
 800f7f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f7f6:	4299      	cmp	r1, r3
 800f7f8:	d002      	beq.n	800f800 <__sflush_r+0x8c>
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	f7fe fd60 	bl	800e2c0 <_free_r>
 800f800:	2300      	movs	r3, #0
 800f802:	6363      	str	r3, [r4, #52]	@ 0x34
 800f804:	e00d      	b.n	800f822 <__sflush_r+0xae>
 800f806:	2301      	movs	r3, #1
 800f808:	4628      	mov	r0, r5
 800f80a:	47b0      	blx	r6
 800f80c:	4602      	mov	r2, r0
 800f80e:	1c50      	adds	r0, r2, #1
 800f810:	d1c9      	bne.n	800f7a6 <__sflush_r+0x32>
 800f812:	682b      	ldr	r3, [r5, #0]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d0c6      	beq.n	800f7a6 <__sflush_r+0x32>
 800f818:	2b1d      	cmp	r3, #29
 800f81a:	d001      	beq.n	800f820 <__sflush_r+0xac>
 800f81c:	2b16      	cmp	r3, #22
 800f81e:	d11e      	bne.n	800f85e <__sflush_r+0xea>
 800f820:	602f      	str	r7, [r5, #0]
 800f822:	2000      	movs	r0, #0
 800f824:	e022      	b.n	800f86c <__sflush_r+0xf8>
 800f826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f82a:	b21b      	sxth	r3, r3
 800f82c:	e01b      	b.n	800f866 <__sflush_r+0xf2>
 800f82e:	690f      	ldr	r7, [r1, #16]
 800f830:	2f00      	cmp	r7, #0
 800f832:	d0f6      	beq.n	800f822 <__sflush_r+0xae>
 800f834:	0793      	lsls	r3, r2, #30
 800f836:	680e      	ldr	r6, [r1, #0]
 800f838:	bf08      	it	eq
 800f83a:	694b      	ldreq	r3, [r1, #20]
 800f83c:	600f      	str	r7, [r1, #0]
 800f83e:	bf18      	it	ne
 800f840:	2300      	movne	r3, #0
 800f842:	eba6 0807 	sub.w	r8, r6, r7
 800f846:	608b      	str	r3, [r1, #8]
 800f848:	f1b8 0f00 	cmp.w	r8, #0
 800f84c:	dde9      	ble.n	800f822 <__sflush_r+0xae>
 800f84e:	6a21      	ldr	r1, [r4, #32]
 800f850:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f852:	4643      	mov	r3, r8
 800f854:	463a      	mov	r2, r7
 800f856:	4628      	mov	r0, r5
 800f858:	47b0      	blx	r6
 800f85a:	2800      	cmp	r0, #0
 800f85c:	dc08      	bgt.n	800f870 <__sflush_r+0xfc>
 800f85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f866:	81a3      	strh	r3, [r4, #12]
 800f868:	f04f 30ff 	mov.w	r0, #4294967295
 800f86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f870:	4407      	add	r7, r0
 800f872:	eba8 0800 	sub.w	r8, r8, r0
 800f876:	e7e7      	b.n	800f848 <__sflush_r+0xd4>
 800f878:	20400001 	.word	0x20400001

0800f87c <_fflush_r>:
 800f87c:	b538      	push	{r3, r4, r5, lr}
 800f87e:	690b      	ldr	r3, [r1, #16]
 800f880:	4605      	mov	r5, r0
 800f882:	460c      	mov	r4, r1
 800f884:	b913      	cbnz	r3, 800f88c <_fflush_r+0x10>
 800f886:	2500      	movs	r5, #0
 800f888:	4628      	mov	r0, r5
 800f88a:	bd38      	pop	{r3, r4, r5, pc}
 800f88c:	b118      	cbz	r0, 800f896 <_fflush_r+0x1a>
 800f88e:	6a03      	ldr	r3, [r0, #32]
 800f890:	b90b      	cbnz	r3, 800f896 <_fflush_r+0x1a>
 800f892:	f7fd fc91 	bl	800d1b8 <__sinit>
 800f896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d0f3      	beq.n	800f886 <_fflush_r+0xa>
 800f89e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f8a0:	07d0      	lsls	r0, r2, #31
 800f8a2:	d404      	bmi.n	800f8ae <_fflush_r+0x32>
 800f8a4:	0599      	lsls	r1, r3, #22
 800f8a6:	d402      	bmi.n	800f8ae <_fflush_r+0x32>
 800f8a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8aa:	f7fd fe74 	bl	800d596 <__retarget_lock_acquire_recursive>
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	4621      	mov	r1, r4
 800f8b2:	f7ff ff5f 	bl	800f774 <__sflush_r>
 800f8b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f8b8:	07da      	lsls	r2, r3, #31
 800f8ba:	4605      	mov	r5, r0
 800f8bc:	d4e4      	bmi.n	800f888 <_fflush_r+0xc>
 800f8be:	89a3      	ldrh	r3, [r4, #12]
 800f8c0:	059b      	lsls	r3, r3, #22
 800f8c2:	d4e1      	bmi.n	800f888 <_fflush_r+0xc>
 800f8c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8c6:	f7fd fe67 	bl	800d598 <__retarget_lock_release_recursive>
 800f8ca:	e7dd      	b.n	800f888 <_fflush_r+0xc>

0800f8cc <fiprintf>:
 800f8cc:	b40e      	push	{r1, r2, r3}
 800f8ce:	b503      	push	{r0, r1, lr}
 800f8d0:	4601      	mov	r1, r0
 800f8d2:	ab03      	add	r3, sp, #12
 800f8d4:	4805      	ldr	r0, [pc, #20]	@ (800f8ec <fiprintf+0x20>)
 800f8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8da:	6800      	ldr	r0, [r0, #0]
 800f8dc:	9301      	str	r3, [sp, #4]
 800f8de:	f000 f8a3 	bl	800fa28 <_vfiprintf_r>
 800f8e2:	b002      	add	sp, #8
 800f8e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8e8:	b003      	add	sp, #12
 800f8ea:	4770      	bx	lr
 800f8ec:	20000278 	.word	0x20000278

0800f8f0 <memmove>:
 800f8f0:	4288      	cmp	r0, r1
 800f8f2:	b510      	push	{r4, lr}
 800f8f4:	eb01 0402 	add.w	r4, r1, r2
 800f8f8:	d902      	bls.n	800f900 <memmove+0x10>
 800f8fa:	4284      	cmp	r4, r0
 800f8fc:	4623      	mov	r3, r4
 800f8fe:	d807      	bhi.n	800f910 <memmove+0x20>
 800f900:	1e43      	subs	r3, r0, #1
 800f902:	42a1      	cmp	r1, r4
 800f904:	d008      	beq.n	800f918 <memmove+0x28>
 800f906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f90a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f90e:	e7f8      	b.n	800f902 <memmove+0x12>
 800f910:	4402      	add	r2, r0
 800f912:	4601      	mov	r1, r0
 800f914:	428a      	cmp	r2, r1
 800f916:	d100      	bne.n	800f91a <memmove+0x2a>
 800f918:	bd10      	pop	{r4, pc}
 800f91a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f91e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f922:	e7f7      	b.n	800f914 <memmove+0x24>

0800f924 <_sbrk_r>:
 800f924:	b538      	push	{r3, r4, r5, lr}
 800f926:	4d06      	ldr	r5, [pc, #24]	@ (800f940 <_sbrk_r+0x1c>)
 800f928:	2300      	movs	r3, #0
 800f92a:	4604      	mov	r4, r0
 800f92c:	4608      	mov	r0, r1
 800f92e:	602b      	str	r3, [r5, #0]
 800f930:	f7f3 f964 	bl	8002bfc <_sbrk>
 800f934:	1c43      	adds	r3, r0, #1
 800f936:	d102      	bne.n	800f93e <_sbrk_r+0x1a>
 800f938:	682b      	ldr	r3, [r5, #0]
 800f93a:	b103      	cbz	r3, 800f93e <_sbrk_r+0x1a>
 800f93c:	6023      	str	r3, [r4, #0]
 800f93e:	bd38      	pop	{r3, r4, r5, pc}
 800f940:	2001ec04 	.word	0x2001ec04

0800f944 <abort>:
 800f944:	b508      	push	{r3, lr}
 800f946:	2006      	movs	r0, #6
 800f948:	f000 fa42 	bl	800fdd0 <raise>
 800f94c:	2001      	movs	r0, #1
 800f94e:	f7f3 f8dd 	bl	8002b0c <_exit>

0800f952 <_calloc_r>:
 800f952:	b570      	push	{r4, r5, r6, lr}
 800f954:	fba1 5402 	umull	r5, r4, r1, r2
 800f958:	b934      	cbnz	r4, 800f968 <_calloc_r+0x16>
 800f95a:	4629      	mov	r1, r5
 800f95c:	f7ff f85e 	bl	800ea1c <_malloc_r>
 800f960:	4606      	mov	r6, r0
 800f962:	b928      	cbnz	r0, 800f970 <_calloc_r+0x1e>
 800f964:	4630      	mov	r0, r6
 800f966:	bd70      	pop	{r4, r5, r6, pc}
 800f968:	220c      	movs	r2, #12
 800f96a:	6002      	str	r2, [r0, #0]
 800f96c:	2600      	movs	r6, #0
 800f96e:	e7f9      	b.n	800f964 <_calloc_r+0x12>
 800f970:	462a      	mov	r2, r5
 800f972:	4621      	mov	r1, r4
 800f974:	f7fd fcf1 	bl	800d35a <memset>
 800f978:	e7f4      	b.n	800f964 <_calloc_r+0x12>

0800f97a <_realloc_r>:
 800f97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f97e:	4607      	mov	r7, r0
 800f980:	4614      	mov	r4, r2
 800f982:	460d      	mov	r5, r1
 800f984:	b921      	cbnz	r1, 800f990 <_realloc_r+0x16>
 800f986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f98a:	4611      	mov	r1, r2
 800f98c:	f7ff b846 	b.w	800ea1c <_malloc_r>
 800f990:	b92a      	cbnz	r2, 800f99e <_realloc_r+0x24>
 800f992:	f7fe fc95 	bl	800e2c0 <_free_r>
 800f996:	4625      	mov	r5, r4
 800f998:	4628      	mov	r0, r5
 800f99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f99e:	f000 fa33 	bl	800fe08 <_malloc_usable_size_r>
 800f9a2:	4284      	cmp	r4, r0
 800f9a4:	4606      	mov	r6, r0
 800f9a6:	d802      	bhi.n	800f9ae <_realloc_r+0x34>
 800f9a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f9ac:	d8f4      	bhi.n	800f998 <_realloc_r+0x1e>
 800f9ae:	4621      	mov	r1, r4
 800f9b0:	4638      	mov	r0, r7
 800f9b2:	f7ff f833 	bl	800ea1c <_malloc_r>
 800f9b6:	4680      	mov	r8, r0
 800f9b8:	b908      	cbnz	r0, 800f9be <_realloc_r+0x44>
 800f9ba:	4645      	mov	r5, r8
 800f9bc:	e7ec      	b.n	800f998 <_realloc_r+0x1e>
 800f9be:	42b4      	cmp	r4, r6
 800f9c0:	4622      	mov	r2, r4
 800f9c2:	4629      	mov	r1, r5
 800f9c4:	bf28      	it	cs
 800f9c6:	4632      	movcs	r2, r6
 800f9c8:	f7fd fde7 	bl	800d59a <memcpy>
 800f9cc:	4629      	mov	r1, r5
 800f9ce:	4638      	mov	r0, r7
 800f9d0:	f7fe fc76 	bl	800e2c0 <_free_r>
 800f9d4:	e7f1      	b.n	800f9ba <_realloc_r+0x40>

0800f9d6 <__sfputc_r>:
 800f9d6:	6893      	ldr	r3, [r2, #8]
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	b410      	push	{r4}
 800f9de:	6093      	str	r3, [r2, #8]
 800f9e0:	da08      	bge.n	800f9f4 <__sfputc_r+0x1e>
 800f9e2:	6994      	ldr	r4, [r2, #24]
 800f9e4:	42a3      	cmp	r3, r4
 800f9e6:	db01      	blt.n	800f9ec <__sfputc_r+0x16>
 800f9e8:	290a      	cmp	r1, #10
 800f9ea:	d103      	bne.n	800f9f4 <__sfputc_r+0x1e>
 800f9ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9f0:	f000 b932 	b.w	800fc58 <__swbuf_r>
 800f9f4:	6813      	ldr	r3, [r2, #0]
 800f9f6:	1c58      	adds	r0, r3, #1
 800f9f8:	6010      	str	r0, [r2, #0]
 800f9fa:	7019      	strb	r1, [r3, #0]
 800f9fc:	4608      	mov	r0, r1
 800f9fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa02:	4770      	bx	lr

0800fa04 <__sfputs_r>:
 800fa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa06:	4606      	mov	r6, r0
 800fa08:	460f      	mov	r7, r1
 800fa0a:	4614      	mov	r4, r2
 800fa0c:	18d5      	adds	r5, r2, r3
 800fa0e:	42ac      	cmp	r4, r5
 800fa10:	d101      	bne.n	800fa16 <__sfputs_r+0x12>
 800fa12:	2000      	movs	r0, #0
 800fa14:	e007      	b.n	800fa26 <__sfputs_r+0x22>
 800fa16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa1a:	463a      	mov	r2, r7
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	f7ff ffda 	bl	800f9d6 <__sfputc_r>
 800fa22:	1c43      	adds	r3, r0, #1
 800fa24:	d1f3      	bne.n	800fa0e <__sfputs_r+0xa>
 800fa26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa28 <_vfiprintf_r>:
 800fa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa2c:	460d      	mov	r5, r1
 800fa2e:	b09d      	sub	sp, #116	@ 0x74
 800fa30:	4614      	mov	r4, r2
 800fa32:	4698      	mov	r8, r3
 800fa34:	4606      	mov	r6, r0
 800fa36:	b118      	cbz	r0, 800fa40 <_vfiprintf_r+0x18>
 800fa38:	6a03      	ldr	r3, [r0, #32]
 800fa3a:	b90b      	cbnz	r3, 800fa40 <_vfiprintf_r+0x18>
 800fa3c:	f7fd fbbc 	bl	800d1b8 <__sinit>
 800fa40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa42:	07d9      	lsls	r1, r3, #31
 800fa44:	d405      	bmi.n	800fa52 <_vfiprintf_r+0x2a>
 800fa46:	89ab      	ldrh	r3, [r5, #12]
 800fa48:	059a      	lsls	r2, r3, #22
 800fa4a:	d402      	bmi.n	800fa52 <_vfiprintf_r+0x2a>
 800fa4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa4e:	f7fd fda2 	bl	800d596 <__retarget_lock_acquire_recursive>
 800fa52:	89ab      	ldrh	r3, [r5, #12]
 800fa54:	071b      	lsls	r3, r3, #28
 800fa56:	d501      	bpl.n	800fa5c <_vfiprintf_r+0x34>
 800fa58:	692b      	ldr	r3, [r5, #16]
 800fa5a:	b99b      	cbnz	r3, 800fa84 <_vfiprintf_r+0x5c>
 800fa5c:	4629      	mov	r1, r5
 800fa5e:	4630      	mov	r0, r6
 800fa60:	f000 f938 	bl	800fcd4 <__swsetup_r>
 800fa64:	b170      	cbz	r0, 800fa84 <_vfiprintf_r+0x5c>
 800fa66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa68:	07dc      	lsls	r4, r3, #31
 800fa6a:	d504      	bpl.n	800fa76 <_vfiprintf_r+0x4e>
 800fa6c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa70:	b01d      	add	sp, #116	@ 0x74
 800fa72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa76:	89ab      	ldrh	r3, [r5, #12]
 800fa78:	0598      	lsls	r0, r3, #22
 800fa7a:	d4f7      	bmi.n	800fa6c <_vfiprintf_r+0x44>
 800fa7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa7e:	f7fd fd8b 	bl	800d598 <__retarget_lock_release_recursive>
 800fa82:	e7f3      	b.n	800fa6c <_vfiprintf_r+0x44>
 800fa84:	2300      	movs	r3, #0
 800fa86:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa88:	2320      	movs	r3, #32
 800fa8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa92:	2330      	movs	r3, #48	@ 0x30
 800fa94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fc44 <_vfiprintf_r+0x21c>
 800fa98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa9c:	f04f 0901 	mov.w	r9, #1
 800faa0:	4623      	mov	r3, r4
 800faa2:	469a      	mov	sl, r3
 800faa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800faa8:	b10a      	cbz	r2, 800faae <_vfiprintf_r+0x86>
 800faaa:	2a25      	cmp	r2, #37	@ 0x25
 800faac:	d1f9      	bne.n	800faa2 <_vfiprintf_r+0x7a>
 800faae:	ebba 0b04 	subs.w	fp, sl, r4
 800fab2:	d00b      	beq.n	800facc <_vfiprintf_r+0xa4>
 800fab4:	465b      	mov	r3, fp
 800fab6:	4622      	mov	r2, r4
 800fab8:	4629      	mov	r1, r5
 800faba:	4630      	mov	r0, r6
 800fabc:	f7ff ffa2 	bl	800fa04 <__sfputs_r>
 800fac0:	3001      	adds	r0, #1
 800fac2:	f000 80a7 	beq.w	800fc14 <_vfiprintf_r+0x1ec>
 800fac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fac8:	445a      	add	r2, fp
 800faca:	9209      	str	r2, [sp, #36]	@ 0x24
 800facc:	f89a 3000 	ldrb.w	r3, [sl]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	f000 809f 	beq.w	800fc14 <_vfiprintf_r+0x1ec>
 800fad6:	2300      	movs	r3, #0
 800fad8:	f04f 32ff 	mov.w	r2, #4294967295
 800fadc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fae0:	f10a 0a01 	add.w	sl, sl, #1
 800fae4:	9304      	str	r3, [sp, #16]
 800fae6:	9307      	str	r3, [sp, #28]
 800fae8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800faec:	931a      	str	r3, [sp, #104]	@ 0x68
 800faee:	4654      	mov	r4, sl
 800faf0:	2205      	movs	r2, #5
 800faf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faf6:	4853      	ldr	r0, [pc, #332]	@ (800fc44 <_vfiprintf_r+0x21c>)
 800faf8:	f7f0 fb7a 	bl	80001f0 <memchr>
 800fafc:	9a04      	ldr	r2, [sp, #16]
 800fafe:	b9d8      	cbnz	r0, 800fb38 <_vfiprintf_r+0x110>
 800fb00:	06d1      	lsls	r1, r2, #27
 800fb02:	bf44      	itt	mi
 800fb04:	2320      	movmi	r3, #32
 800fb06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb0a:	0713      	lsls	r3, r2, #28
 800fb0c:	bf44      	itt	mi
 800fb0e:	232b      	movmi	r3, #43	@ 0x2b
 800fb10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb14:	f89a 3000 	ldrb.w	r3, [sl]
 800fb18:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb1a:	d015      	beq.n	800fb48 <_vfiprintf_r+0x120>
 800fb1c:	9a07      	ldr	r2, [sp, #28]
 800fb1e:	4654      	mov	r4, sl
 800fb20:	2000      	movs	r0, #0
 800fb22:	f04f 0c0a 	mov.w	ip, #10
 800fb26:	4621      	mov	r1, r4
 800fb28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb2c:	3b30      	subs	r3, #48	@ 0x30
 800fb2e:	2b09      	cmp	r3, #9
 800fb30:	d94b      	bls.n	800fbca <_vfiprintf_r+0x1a2>
 800fb32:	b1b0      	cbz	r0, 800fb62 <_vfiprintf_r+0x13a>
 800fb34:	9207      	str	r2, [sp, #28]
 800fb36:	e014      	b.n	800fb62 <_vfiprintf_r+0x13a>
 800fb38:	eba0 0308 	sub.w	r3, r0, r8
 800fb3c:	fa09 f303 	lsl.w	r3, r9, r3
 800fb40:	4313      	orrs	r3, r2
 800fb42:	9304      	str	r3, [sp, #16]
 800fb44:	46a2      	mov	sl, r4
 800fb46:	e7d2      	b.n	800faee <_vfiprintf_r+0xc6>
 800fb48:	9b03      	ldr	r3, [sp, #12]
 800fb4a:	1d19      	adds	r1, r3, #4
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	9103      	str	r1, [sp, #12]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	bfbb      	ittet	lt
 800fb54:	425b      	neglt	r3, r3
 800fb56:	f042 0202 	orrlt.w	r2, r2, #2
 800fb5a:	9307      	strge	r3, [sp, #28]
 800fb5c:	9307      	strlt	r3, [sp, #28]
 800fb5e:	bfb8      	it	lt
 800fb60:	9204      	strlt	r2, [sp, #16]
 800fb62:	7823      	ldrb	r3, [r4, #0]
 800fb64:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb66:	d10a      	bne.n	800fb7e <_vfiprintf_r+0x156>
 800fb68:	7863      	ldrb	r3, [r4, #1]
 800fb6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb6c:	d132      	bne.n	800fbd4 <_vfiprintf_r+0x1ac>
 800fb6e:	9b03      	ldr	r3, [sp, #12]
 800fb70:	1d1a      	adds	r2, r3, #4
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	9203      	str	r2, [sp, #12]
 800fb76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb7a:	3402      	adds	r4, #2
 800fb7c:	9305      	str	r3, [sp, #20]
 800fb7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fc54 <_vfiprintf_r+0x22c>
 800fb82:	7821      	ldrb	r1, [r4, #0]
 800fb84:	2203      	movs	r2, #3
 800fb86:	4650      	mov	r0, sl
 800fb88:	f7f0 fb32 	bl	80001f0 <memchr>
 800fb8c:	b138      	cbz	r0, 800fb9e <_vfiprintf_r+0x176>
 800fb8e:	9b04      	ldr	r3, [sp, #16]
 800fb90:	eba0 000a 	sub.w	r0, r0, sl
 800fb94:	2240      	movs	r2, #64	@ 0x40
 800fb96:	4082      	lsls	r2, r0
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	3401      	adds	r4, #1
 800fb9c:	9304      	str	r3, [sp, #16]
 800fb9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fba2:	4829      	ldr	r0, [pc, #164]	@ (800fc48 <_vfiprintf_r+0x220>)
 800fba4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fba8:	2206      	movs	r2, #6
 800fbaa:	f7f0 fb21 	bl	80001f0 <memchr>
 800fbae:	2800      	cmp	r0, #0
 800fbb0:	d03f      	beq.n	800fc32 <_vfiprintf_r+0x20a>
 800fbb2:	4b26      	ldr	r3, [pc, #152]	@ (800fc4c <_vfiprintf_r+0x224>)
 800fbb4:	bb1b      	cbnz	r3, 800fbfe <_vfiprintf_r+0x1d6>
 800fbb6:	9b03      	ldr	r3, [sp, #12]
 800fbb8:	3307      	adds	r3, #7
 800fbba:	f023 0307 	bic.w	r3, r3, #7
 800fbbe:	3308      	adds	r3, #8
 800fbc0:	9303      	str	r3, [sp, #12]
 800fbc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbc4:	443b      	add	r3, r7
 800fbc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbc8:	e76a      	b.n	800faa0 <_vfiprintf_r+0x78>
 800fbca:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbce:	460c      	mov	r4, r1
 800fbd0:	2001      	movs	r0, #1
 800fbd2:	e7a8      	b.n	800fb26 <_vfiprintf_r+0xfe>
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	3401      	adds	r4, #1
 800fbd8:	9305      	str	r3, [sp, #20]
 800fbda:	4619      	mov	r1, r3
 800fbdc:	f04f 0c0a 	mov.w	ip, #10
 800fbe0:	4620      	mov	r0, r4
 800fbe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbe6:	3a30      	subs	r2, #48	@ 0x30
 800fbe8:	2a09      	cmp	r2, #9
 800fbea:	d903      	bls.n	800fbf4 <_vfiprintf_r+0x1cc>
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d0c6      	beq.n	800fb7e <_vfiprintf_r+0x156>
 800fbf0:	9105      	str	r1, [sp, #20]
 800fbf2:	e7c4      	b.n	800fb7e <_vfiprintf_r+0x156>
 800fbf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	e7f0      	b.n	800fbe0 <_vfiprintf_r+0x1b8>
 800fbfe:	ab03      	add	r3, sp, #12
 800fc00:	9300      	str	r3, [sp, #0]
 800fc02:	462a      	mov	r2, r5
 800fc04:	4b12      	ldr	r3, [pc, #72]	@ (800fc50 <_vfiprintf_r+0x228>)
 800fc06:	a904      	add	r1, sp, #16
 800fc08:	4630      	mov	r0, r6
 800fc0a:	f7fc fc85 	bl	800c518 <_printf_float>
 800fc0e:	4607      	mov	r7, r0
 800fc10:	1c78      	adds	r0, r7, #1
 800fc12:	d1d6      	bne.n	800fbc2 <_vfiprintf_r+0x19a>
 800fc14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc16:	07d9      	lsls	r1, r3, #31
 800fc18:	d405      	bmi.n	800fc26 <_vfiprintf_r+0x1fe>
 800fc1a:	89ab      	ldrh	r3, [r5, #12]
 800fc1c:	059a      	lsls	r2, r3, #22
 800fc1e:	d402      	bmi.n	800fc26 <_vfiprintf_r+0x1fe>
 800fc20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc22:	f7fd fcb9 	bl	800d598 <__retarget_lock_release_recursive>
 800fc26:	89ab      	ldrh	r3, [r5, #12]
 800fc28:	065b      	lsls	r3, r3, #25
 800fc2a:	f53f af1f 	bmi.w	800fa6c <_vfiprintf_r+0x44>
 800fc2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc30:	e71e      	b.n	800fa70 <_vfiprintf_r+0x48>
 800fc32:	ab03      	add	r3, sp, #12
 800fc34:	9300      	str	r3, [sp, #0]
 800fc36:	462a      	mov	r2, r5
 800fc38:	4b05      	ldr	r3, [pc, #20]	@ (800fc50 <_vfiprintf_r+0x228>)
 800fc3a:	a904      	add	r1, sp, #16
 800fc3c:	4630      	mov	r0, r6
 800fc3e:	f7fc ff03 	bl	800ca48 <_printf_i>
 800fc42:	e7e4      	b.n	800fc0e <_vfiprintf_r+0x1e6>
 800fc44:	08015137 	.word	0x08015137
 800fc48:	08015141 	.word	0x08015141
 800fc4c:	0800c519 	.word	0x0800c519
 800fc50:	0800fa05 	.word	0x0800fa05
 800fc54:	0801513d 	.word	0x0801513d

0800fc58 <__swbuf_r>:
 800fc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc5a:	460e      	mov	r6, r1
 800fc5c:	4614      	mov	r4, r2
 800fc5e:	4605      	mov	r5, r0
 800fc60:	b118      	cbz	r0, 800fc6a <__swbuf_r+0x12>
 800fc62:	6a03      	ldr	r3, [r0, #32]
 800fc64:	b90b      	cbnz	r3, 800fc6a <__swbuf_r+0x12>
 800fc66:	f7fd faa7 	bl	800d1b8 <__sinit>
 800fc6a:	69a3      	ldr	r3, [r4, #24]
 800fc6c:	60a3      	str	r3, [r4, #8]
 800fc6e:	89a3      	ldrh	r3, [r4, #12]
 800fc70:	071a      	lsls	r2, r3, #28
 800fc72:	d501      	bpl.n	800fc78 <__swbuf_r+0x20>
 800fc74:	6923      	ldr	r3, [r4, #16]
 800fc76:	b943      	cbnz	r3, 800fc8a <__swbuf_r+0x32>
 800fc78:	4621      	mov	r1, r4
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	f000 f82a 	bl	800fcd4 <__swsetup_r>
 800fc80:	b118      	cbz	r0, 800fc8a <__swbuf_r+0x32>
 800fc82:	f04f 37ff 	mov.w	r7, #4294967295
 800fc86:	4638      	mov	r0, r7
 800fc88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc8a:	6823      	ldr	r3, [r4, #0]
 800fc8c:	6922      	ldr	r2, [r4, #16]
 800fc8e:	1a98      	subs	r0, r3, r2
 800fc90:	6963      	ldr	r3, [r4, #20]
 800fc92:	b2f6      	uxtb	r6, r6
 800fc94:	4283      	cmp	r3, r0
 800fc96:	4637      	mov	r7, r6
 800fc98:	dc05      	bgt.n	800fca6 <__swbuf_r+0x4e>
 800fc9a:	4621      	mov	r1, r4
 800fc9c:	4628      	mov	r0, r5
 800fc9e:	f7ff fded 	bl	800f87c <_fflush_r>
 800fca2:	2800      	cmp	r0, #0
 800fca4:	d1ed      	bne.n	800fc82 <__swbuf_r+0x2a>
 800fca6:	68a3      	ldr	r3, [r4, #8]
 800fca8:	3b01      	subs	r3, #1
 800fcaa:	60a3      	str	r3, [r4, #8]
 800fcac:	6823      	ldr	r3, [r4, #0]
 800fcae:	1c5a      	adds	r2, r3, #1
 800fcb0:	6022      	str	r2, [r4, #0]
 800fcb2:	701e      	strb	r6, [r3, #0]
 800fcb4:	6962      	ldr	r2, [r4, #20]
 800fcb6:	1c43      	adds	r3, r0, #1
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d004      	beq.n	800fcc6 <__swbuf_r+0x6e>
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	07db      	lsls	r3, r3, #31
 800fcc0:	d5e1      	bpl.n	800fc86 <__swbuf_r+0x2e>
 800fcc2:	2e0a      	cmp	r6, #10
 800fcc4:	d1df      	bne.n	800fc86 <__swbuf_r+0x2e>
 800fcc6:	4621      	mov	r1, r4
 800fcc8:	4628      	mov	r0, r5
 800fcca:	f7ff fdd7 	bl	800f87c <_fflush_r>
 800fcce:	2800      	cmp	r0, #0
 800fcd0:	d0d9      	beq.n	800fc86 <__swbuf_r+0x2e>
 800fcd2:	e7d6      	b.n	800fc82 <__swbuf_r+0x2a>

0800fcd4 <__swsetup_r>:
 800fcd4:	b538      	push	{r3, r4, r5, lr}
 800fcd6:	4b29      	ldr	r3, [pc, #164]	@ (800fd7c <__swsetup_r+0xa8>)
 800fcd8:	4605      	mov	r5, r0
 800fcda:	6818      	ldr	r0, [r3, #0]
 800fcdc:	460c      	mov	r4, r1
 800fcde:	b118      	cbz	r0, 800fce8 <__swsetup_r+0x14>
 800fce0:	6a03      	ldr	r3, [r0, #32]
 800fce2:	b90b      	cbnz	r3, 800fce8 <__swsetup_r+0x14>
 800fce4:	f7fd fa68 	bl	800d1b8 <__sinit>
 800fce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcec:	0719      	lsls	r1, r3, #28
 800fcee:	d422      	bmi.n	800fd36 <__swsetup_r+0x62>
 800fcf0:	06da      	lsls	r2, r3, #27
 800fcf2:	d407      	bmi.n	800fd04 <__swsetup_r+0x30>
 800fcf4:	2209      	movs	r2, #9
 800fcf6:	602a      	str	r2, [r5, #0]
 800fcf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcfc:	81a3      	strh	r3, [r4, #12]
 800fcfe:	f04f 30ff 	mov.w	r0, #4294967295
 800fd02:	e033      	b.n	800fd6c <__swsetup_r+0x98>
 800fd04:	0758      	lsls	r0, r3, #29
 800fd06:	d512      	bpl.n	800fd2e <__swsetup_r+0x5a>
 800fd08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd0a:	b141      	cbz	r1, 800fd1e <__swsetup_r+0x4a>
 800fd0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fd10:	4299      	cmp	r1, r3
 800fd12:	d002      	beq.n	800fd1a <__swsetup_r+0x46>
 800fd14:	4628      	mov	r0, r5
 800fd16:	f7fe fad3 	bl	800e2c0 <_free_r>
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd1e:	89a3      	ldrh	r3, [r4, #12]
 800fd20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fd24:	81a3      	strh	r3, [r4, #12]
 800fd26:	2300      	movs	r3, #0
 800fd28:	6063      	str	r3, [r4, #4]
 800fd2a:	6923      	ldr	r3, [r4, #16]
 800fd2c:	6023      	str	r3, [r4, #0]
 800fd2e:	89a3      	ldrh	r3, [r4, #12]
 800fd30:	f043 0308 	orr.w	r3, r3, #8
 800fd34:	81a3      	strh	r3, [r4, #12]
 800fd36:	6923      	ldr	r3, [r4, #16]
 800fd38:	b94b      	cbnz	r3, 800fd4e <__swsetup_r+0x7a>
 800fd3a:	89a3      	ldrh	r3, [r4, #12]
 800fd3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fd40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd44:	d003      	beq.n	800fd4e <__swsetup_r+0x7a>
 800fd46:	4621      	mov	r1, r4
 800fd48:	4628      	mov	r0, r5
 800fd4a:	f000 f88b 	bl	800fe64 <__smakebuf_r>
 800fd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd52:	f013 0201 	ands.w	r2, r3, #1
 800fd56:	d00a      	beq.n	800fd6e <__swsetup_r+0x9a>
 800fd58:	2200      	movs	r2, #0
 800fd5a:	60a2      	str	r2, [r4, #8]
 800fd5c:	6962      	ldr	r2, [r4, #20]
 800fd5e:	4252      	negs	r2, r2
 800fd60:	61a2      	str	r2, [r4, #24]
 800fd62:	6922      	ldr	r2, [r4, #16]
 800fd64:	b942      	cbnz	r2, 800fd78 <__swsetup_r+0xa4>
 800fd66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fd6a:	d1c5      	bne.n	800fcf8 <__swsetup_r+0x24>
 800fd6c:	bd38      	pop	{r3, r4, r5, pc}
 800fd6e:	0799      	lsls	r1, r3, #30
 800fd70:	bf58      	it	pl
 800fd72:	6962      	ldrpl	r2, [r4, #20]
 800fd74:	60a2      	str	r2, [r4, #8]
 800fd76:	e7f4      	b.n	800fd62 <__swsetup_r+0x8e>
 800fd78:	2000      	movs	r0, #0
 800fd7a:	e7f7      	b.n	800fd6c <__swsetup_r+0x98>
 800fd7c:	20000278 	.word	0x20000278

0800fd80 <_raise_r>:
 800fd80:	291f      	cmp	r1, #31
 800fd82:	b538      	push	{r3, r4, r5, lr}
 800fd84:	4605      	mov	r5, r0
 800fd86:	460c      	mov	r4, r1
 800fd88:	d904      	bls.n	800fd94 <_raise_r+0x14>
 800fd8a:	2316      	movs	r3, #22
 800fd8c:	6003      	str	r3, [r0, #0]
 800fd8e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd92:	bd38      	pop	{r3, r4, r5, pc}
 800fd94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fd96:	b112      	cbz	r2, 800fd9e <_raise_r+0x1e>
 800fd98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd9c:	b94b      	cbnz	r3, 800fdb2 <_raise_r+0x32>
 800fd9e:	4628      	mov	r0, r5
 800fda0:	f000 f830 	bl	800fe04 <_getpid_r>
 800fda4:	4622      	mov	r2, r4
 800fda6:	4601      	mov	r1, r0
 800fda8:	4628      	mov	r0, r5
 800fdaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdae:	f000 b817 	b.w	800fde0 <_kill_r>
 800fdb2:	2b01      	cmp	r3, #1
 800fdb4:	d00a      	beq.n	800fdcc <_raise_r+0x4c>
 800fdb6:	1c59      	adds	r1, r3, #1
 800fdb8:	d103      	bne.n	800fdc2 <_raise_r+0x42>
 800fdba:	2316      	movs	r3, #22
 800fdbc:	6003      	str	r3, [r0, #0]
 800fdbe:	2001      	movs	r0, #1
 800fdc0:	e7e7      	b.n	800fd92 <_raise_r+0x12>
 800fdc2:	2100      	movs	r1, #0
 800fdc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fdc8:	4620      	mov	r0, r4
 800fdca:	4798      	blx	r3
 800fdcc:	2000      	movs	r0, #0
 800fdce:	e7e0      	b.n	800fd92 <_raise_r+0x12>

0800fdd0 <raise>:
 800fdd0:	4b02      	ldr	r3, [pc, #8]	@ (800fddc <raise+0xc>)
 800fdd2:	4601      	mov	r1, r0
 800fdd4:	6818      	ldr	r0, [r3, #0]
 800fdd6:	f7ff bfd3 	b.w	800fd80 <_raise_r>
 800fdda:	bf00      	nop
 800fddc:	20000278 	.word	0x20000278

0800fde0 <_kill_r>:
 800fde0:	b538      	push	{r3, r4, r5, lr}
 800fde2:	4d07      	ldr	r5, [pc, #28]	@ (800fe00 <_kill_r+0x20>)
 800fde4:	2300      	movs	r3, #0
 800fde6:	4604      	mov	r4, r0
 800fde8:	4608      	mov	r0, r1
 800fdea:	4611      	mov	r1, r2
 800fdec:	602b      	str	r3, [r5, #0]
 800fdee:	f7f2 fe7d 	bl	8002aec <_kill>
 800fdf2:	1c43      	adds	r3, r0, #1
 800fdf4:	d102      	bne.n	800fdfc <_kill_r+0x1c>
 800fdf6:	682b      	ldr	r3, [r5, #0]
 800fdf8:	b103      	cbz	r3, 800fdfc <_kill_r+0x1c>
 800fdfa:	6023      	str	r3, [r4, #0]
 800fdfc:	bd38      	pop	{r3, r4, r5, pc}
 800fdfe:	bf00      	nop
 800fe00:	2001ec04 	.word	0x2001ec04

0800fe04 <_getpid_r>:
 800fe04:	f7f2 be6a 	b.w	8002adc <_getpid>

0800fe08 <_malloc_usable_size_r>:
 800fe08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe0c:	1f18      	subs	r0, r3, #4
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	bfbc      	itt	lt
 800fe12:	580b      	ldrlt	r3, [r1, r0]
 800fe14:	18c0      	addlt	r0, r0, r3
 800fe16:	4770      	bx	lr

0800fe18 <__swhatbuf_r>:
 800fe18:	b570      	push	{r4, r5, r6, lr}
 800fe1a:	460c      	mov	r4, r1
 800fe1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe20:	2900      	cmp	r1, #0
 800fe22:	b096      	sub	sp, #88	@ 0x58
 800fe24:	4615      	mov	r5, r2
 800fe26:	461e      	mov	r6, r3
 800fe28:	da0d      	bge.n	800fe46 <__swhatbuf_r+0x2e>
 800fe2a:	89a3      	ldrh	r3, [r4, #12]
 800fe2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fe30:	f04f 0100 	mov.w	r1, #0
 800fe34:	bf14      	ite	ne
 800fe36:	2340      	movne	r3, #64	@ 0x40
 800fe38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fe3c:	2000      	movs	r0, #0
 800fe3e:	6031      	str	r1, [r6, #0]
 800fe40:	602b      	str	r3, [r5, #0]
 800fe42:	b016      	add	sp, #88	@ 0x58
 800fe44:	bd70      	pop	{r4, r5, r6, pc}
 800fe46:	466a      	mov	r2, sp
 800fe48:	f000 f848 	bl	800fedc <_fstat_r>
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	dbec      	blt.n	800fe2a <__swhatbuf_r+0x12>
 800fe50:	9901      	ldr	r1, [sp, #4]
 800fe52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fe56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fe5a:	4259      	negs	r1, r3
 800fe5c:	4159      	adcs	r1, r3
 800fe5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe62:	e7eb      	b.n	800fe3c <__swhatbuf_r+0x24>

0800fe64 <__smakebuf_r>:
 800fe64:	898b      	ldrh	r3, [r1, #12]
 800fe66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe68:	079d      	lsls	r5, r3, #30
 800fe6a:	4606      	mov	r6, r0
 800fe6c:	460c      	mov	r4, r1
 800fe6e:	d507      	bpl.n	800fe80 <__smakebuf_r+0x1c>
 800fe70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fe74:	6023      	str	r3, [r4, #0]
 800fe76:	6123      	str	r3, [r4, #16]
 800fe78:	2301      	movs	r3, #1
 800fe7a:	6163      	str	r3, [r4, #20]
 800fe7c:	b003      	add	sp, #12
 800fe7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe80:	ab01      	add	r3, sp, #4
 800fe82:	466a      	mov	r2, sp
 800fe84:	f7ff ffc8 	bl	800fe18 <__swhatbuf_r>
 800fe88:	9f00      	ldr	r7, [sp, #0]
 800fe8a:	4605      	mov	r5, r0
 800fe8c:	4639      	mov	r1, r7
 800fe8e:	4630      	mov	r0, r6
 800fe90:	f7fe fdc4 	bl	800ea1c <_malloc_r>
 800fe94:	b948      	cbnz	r0, 800feaa <__smakebuf_r+0x46>
 800fe96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe9a:	059a      	lsls	r2, r3, #22
 800fe9c:	d4ee      	bmi.n	800fe7c <__smakebuf_r+0x18>
 800fe9e:	f023 0303 	bic.w	r3, r3, #3
 800fea2:	f043 0302 	orr.w	r3, r3, #2
 800fea6:	81a3      	strh	r3, [r4, #12]
 800fea8:	e7e2      	b.n	800fe70 <__smakebuf_r+0xc>
 800feaa:	89a3      	ldrh	r3, [r4, #12]
 800feac:	6020      	str	r0, [r4, #0]
 800feae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800feb2:	81a3      	strh	r3, [r4, #12]
 800feb4:	9b01      	ldr	r3, [sp, #4]
 800feb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800feba:	b15b      	cbz	r3, 800fed4 <__smakebuf_r+0x70>
 800febc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fec0:	4630      	mov	r0, r6
 800fec2:	f000 f81d 	bl	800ff00 <_isatty_r>
 800fec6:	b128      	cbz	r0, 800fed4 <__smakebuf_r+0x70>
 800fec8:	89a3      	ldrh	r3, [r4, #12]
 800feca:	f023 0303 	bic.w	r3, r3, #3
 800fece:	f043 0301 	orr.w	r3, r3, #1
 800fed2:	81a3      	strh	r3, [r4, #12]
 800fed4:	89a3      	ldrh	r3, [r4, #12]
 800fed6:	431d      	orrs	r5, r3
 800fed8:	81a5      	strh	r5, [r4, #12]
 800feda:	e7cf      	b.n	800fe7c <__smakebuf_r+0x18>

0800fedc <_fstat_r>:
 800fedc:	b538      	push	{r3, r4, r5, lr}
 800fede:	4d07      	ldr	r5, [pc, #28]	@ (800fefc <_fstat_r+0x20>)
 800fee0:	2300      	movs	r3, #0
 800fee2:	4604      	mov	r4, r0
 800fee4:	4608      	mov	r0, r1
 800fee6:	4611      	mov	r1, r2
 800fee8:	602b      	str	r3, [r5, #0]
 800feea:	f7f2 fe5f 	bl	8002bac <_fstat>
 800feee:	1c43      	adds	r3, r0, #1
 800fef0:	d102      	bne.n	800fef8 <_fstat_r+0x1c>
 800fef2:	682b      	ldr	r3, [r5, #0]
 800fef4:	b103      	cbz	r3, 800fef8 <_fstat_r+0x1c>
 800fef6:	6023      	str	r3, [r4, #0]
 800fef8:	bd38      	pop	{r3, r4, r5, pc}
 800fefa:	bf00      	nop
 800fefc:	2001ec04 	.word	0x2001ec04

0800ff00 <_isatty_r>:
 800ff00:	b538      	push	{r3, r4, r5, lr}
 800ff02:	4d06      	ldr	r5, [pc, #24]	@ (800ff1c <_isatty_r+0x1c>)
 800ff04:	2300      	movs	r3, #0
 800ff06:	4604      	mov	r4, r0
 800ff08:	4608      	mov	r0, r1
 800ff0a:	602b      	str	r3, [r5, #0]
 800ff0c:	f7f2 fe5e 	bl	8002bcc <_isatty>
 800ff10:	1c43      	adds	r3, r0, #1
 800ff12:	d102      	bne.n	800ff1a <_isatty_r+0x1a>
 800ff14:	682b      	ldr	r3, [r5, #0]
 800ff16:	b103      	cbz	r3, 800ff1a <_isatty_r+0x1a>
 800ff18:	6023      	str	r3, [r4, #0]
 800ff1a:	bd38      	pop	{r3, r4, r5, pc}
 800ff1c:	2001ec04 	.word	0x2001ec04

0800ff20 <sqrtf>:
 800ff20:	b508      	push	{r3, lr}
 800ff22:	ed2d 8b02 	vpush	{d8}
 800ff26:	eeb0 8a40 	vmov.f32	s16, s0
 800ff2a:	f000 f817 	bl	800ff5c <__ieee754_sqrtf>
 800ff2e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ff32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff36:	d60c      	bvs.n	800ff52 <sqrtf+0x32>
 800ff38:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ff58 <sqrtf+0x38>
 800ff3c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ff40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff44:	d505      	bpl.n	800ff52 <sqrtf+0x32>
 800ff46:	f7fd fafb 	bl	800d540 <__errno>
 800ff4a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ff4e:	2321      	movs	r3, #33	@ 0x21
 800ff50:	6003      	str	r3, [r0, #0]
 800ff52:	ecbd 8b02 	vpop	{d8}
 800ff56:	bd08      	pop	{r3, pc}
 800ff58:	00000000 	.word	0x00000000

0800ff5c <__ieee754_sqrtf>:
 800ff5c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ff60:	4770      	bx	lr
	...

0800ff64 <_init>:
 800ff64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff66:	bf00      	nop
 800ff68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff6a:	bc08      	pop	{r3}
 800ff6c:	469e      	mov	lr, r3
 800ff6e:	4770      	bx	lr

0800ff70 <_fini>:
 800ff70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff72:	bf00      	nop
 800ff74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff76:	bc08      	pop	{r3}
 800ff78:	469e      	mov	lr, r3
 800ff7a:	4770      	bx	lr
