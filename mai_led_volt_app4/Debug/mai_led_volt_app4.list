
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc44  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005340  0800fdd8  0800fdd8  00010dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015118  08015118  000172c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015118  08015118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015120  08015120  000172c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015120  08015120  00016120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015124  08015124  00016124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  08015128  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000172c8  2**0
                  CONTENTS
 10 .bss          0001e8fc  200002c8  200002c8  000172c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001ebc4  2001ebc4  000172c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000172c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f835  00000000  00000000  000172f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050aa  00000000  00000000  00036b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001920  00000000  00000000  0003bbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ba  00000000  00000000  0003d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024cfc  00000000  00000000  0003e7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001efb5  00000000  00000000  000634ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce1a4  00000000  00000000  00082463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  00150607  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f38  00000000  00000000  001506c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  001585fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e41  00000000  00000000  0015866c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000098  00000000  00000000  001594ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fdbc 	.word	0x0800fdbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	0800fdbc 	.word	0x0800fdbc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <CalculateCRC32>:
/* USER CODE BEGIN 0 */

/**
  * @brief Расчет CRC32 для проверки целостности данных
  */
uint32_t CalculateCRC32(const uint8_t *data, size_t length) {
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < length; i++) {
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	e01d      	b.n	8001092 <CalculateCRC32+0x52>
        crc ^= data[i];
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	4053      	eors	r3, r2
 8001064:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e00c      	b.n	8001086 <CalculateCRC32+0x46>
            crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	085a      	lsrs	r2, r3, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	4259      	negs	r1, r3
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <CalculateCRC32+0x6c>)
 800107a:	400b      	ands	r3, r1
 800107c:	4053      	eors	r3, r2
 800107e:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3301      	adds	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b07      	cmp	r3, #7
 800108a:	ddef      	ble.n	800106c <CalculateCRC32+0x2c>
    for (size_t i = 0; i < length; i++) {
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	3301      	adds	r3, #1
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d3dd      	bcc.n	8001056 <CalculateCRC32+0x16>
        }
    }
    return ~crc;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	43db      	mvns	r3, r3
}
 800109e:	4618      	mov	r0, r3
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	edb88320 	.word	0xedb88320

080010b0 <LoadParametersFromFlash>:

/**
  * @brief Загрузка параметров из Flash памяти
  */
void LoadParametersFromFlash(void) {
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
    Parameters_t* flash_params = (Parameters_t*)PARAMS_FLASH_ADDRESS;
 80010b6:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <LoadParametersFromFlash+0x58>)
 80010b8:	607b      	str	r3, [r7, #4]

    // Проверяем контрольную сумму
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)flash_params, sizeof(Parameters_t) - sizeof(uint32_t));
 80010ba:	2130      	movs	r1, #48	@ 0x30
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffbf 	bl	8001040 <CalculateCRC32>
 80010c2:	6038      	str	r0, [r7, #0]

    if (flash_params->crc == calculated_crc) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d112      	bne.n	80010f4 <LoadParametersFromFlash+0x44>
        // Данные корректны, загружаем их
        params = *flash_params;
 80010ce:	4a0f      	ldr	r2, [pc, #60]	@ (800110c <LoadParametersFromFlash+0x5c>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4614      	mov	r4, r2
 80010d4:	461d      	mov	r5, r3
 80010d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	6023      	str	r3, [r4, #0]
        parameters_initialized = true;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <LoadParametersFromFlash+0x60>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
        SendUSBDebugMessage("Parameters loaded from Flash memory");
 80010ec:	4809      	ldr	r0, [pc, #36]	@ (8001114 <LoadParametersFromFlash+0x64>)
 80010ee:	f000 f893 	bl	8001218 <SendUSBDebugMessage>
    } else {
        // Данные повреждены, используем значения по умолчанию
        InitializeParameters();
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
    }
}
 80010f2:	e004      	b.n	80010fe <LoadParametersFromFlash+0x4e>
        InitializeParameters();
 80010f4:	f000 f852 	bl	800119c <InitializeParameters>
        SendUSBDebugMessage("Flash data corrupted, using default parameters");
 80010f8:	4807      	ldr	r0, [pc, #28]	@ (8001118 <LoadParametersFromFlash+0x68>)
 80010fa:	f000 f88d 	bl	8001218 <SendUSBDebugMessage>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bdb0      	pop	{r4, r5, r7, pc}
 8001106:	bf00      	nop
 8001108:	08080000 	.word	0x08080000
 800110c:	200094a8 	.word	0x200094a8
 8001110:	200094dc 	.word	0x200094dc
 8001114:	0800fdd8 	.word	0x0800fdd8
 8001118:	0800fdfc 	.word	0x0800fdfc

0800111c <SaveParametersToFlash>:

/**
  * @brief Сохранение параметров в Flash память
  */
void SaveParametersToFlash(void) {
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8001122:	f002 f811 	bl	8003148 <HAL_FLASH_Unlock>

    // Рассчитываем контрольную сумму
    params.crc = CalculateCRC32((uint8_t*)&params, sizeof(Parameters_t) - sizeof(uint32_t));
 8001126:	2130      	movs	r1, #48	@ 0x30
 8001128:	4819      	ldr	r0, [pc, #100]	@ (8001190 <SaveParametersToFlash+0x74>)
 800112a:	f7ff ff89 	bl	8001040 <CalculateCRC32>
 800112e:	4603      	mov	r3, r0
 8001130:	4a17      	ldr	r2, [pc, #92]	@ (8001190 <SaveParametersToFlash+0x74>)
 8001132:	6313      	str	r3, [r2, #48]	@ 0x30

    // Стираем страницу Flash
    FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 8001134:	2102      	movs	r1, #2
 8001136:	200b      	movs	r0, #11
 8001138:	f002 f968 	bl	800340c <FLASH_Erase_Sector>

    // Записываем данные
    uint32_t* source = (uint32_t*)&params;
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <SaveParametersToFlash+0x74>)
 800113e:	60fb      	str	r3, [r7, #12]
    uint32_t* destination = (uint32_t*)PARAMS_FLASH_ADDRESS;
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <SaveParametersToFlash+0x78>)
 8001142:	60bb      	str	r3, [r7, #8]
    uint32_t words = sizeof(Parameters_t) / sizeof(uint32_t);
 8001144:	230d      	movs	r3, #13
 8001146:	603b      	str	r3, [r7, #0]

    for (uint32_t i = 0; i < words; i++) {
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	e013      	b.n	8001176 <SaveParametersToFlash+0x5a>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)destination, *source);
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2200      	movs	r2, #0
 8001156:	461c      	mov	r4, r3
 8001158:	4615      	mov	r5, r2
 800115a:	4622      	mov	r2, r4
 800115c:	462b      	mov	r3, r5
 800115e:	2002      	movs	r0, #2
 8001160:	f001 ffa0 	bl	80030a4 <HAL_FLASH_Program>
        source++;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3304      	adds	r3, #4
 8001168:	60fb      	str	r3, [r7, #12]
        destination++;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3304      	adds	r3, #4
 800116e:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < words; i++) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d3e7      	bcc.n	800114e <SaveParametersToFlash+0x32>
    }

    HAL_FLASH_Lock();
 800117e:	f002 f805 	bl	800318c <HAL_FLASH_Lock>
    SendUSBDebugMessage("Parameters saved to Flash memory");
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <SaveParametersToFlash+0x7c>)
 8001184:	f000 f848 	bl	8001218 <SendUSBDebugMessage>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bdb0      	pop	{r4, r5, r7, pc}
 8001190:	200094a8 	.word	0x200094a8
 8001194:	08080000 	.word	0x08080000
 8001198:	0800fe2c 	.word	0x0800fe2c

0800119c <InitializeParameters>:

/**
  * @brief Инициализация параметров значениями по умолчанию
  */
void InitializeParameters(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
    params.start_index = 100;
 80011a0:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <InitializeParameters+0x64>)
 80011a2:	2264      	movs	r2, #100	@ 0x64
 80011a4:	601a      	str	r2, [r3, #0]
    params.wave_speed = 3200.0f;
 80011a6:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <InitializeParameters+0x64>)
 80011a8:	4a16      	ldr	r2, [pc, #88]	@ (8001204 <InitializeParameters+0x68>)
 80011aa:	605a      	str	r2, [r3, #4]
    params.first_left_strobe = 20;
 80011ac:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <InitializeParameters+0x64>)
 80011ae:	2214      	movs	r2, #20
 80011b0:	609a      	str	r2, [r3, #8]
    params.first_right_strobe = 120;
 80011b2:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <InitializeParameters+0x64>)
 80011b4:	2278      	movs	r2, #120	@ 0x78
 80011b6:	60da      	str	r2, [r3, #12]
    params.second_left_strobe = 140;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <InitializeParameters+0x64>)
 80011ba:	228c      	movs	r2, #140	@ 0x8c
 80011bc:	611a      	str	r2, [r3, #16]
    params.second_right_strobe = 240;
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <InitializeParameters+0x64>)
 80011c0:	22f0      	movs	r2, #240	@ 0xf0
 80011c2:	615a      	str	r2, [r3, #20]
    params.threshold = 2080.0f;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <InitializeParameters+0x64>)
 80011c6:	4a10      	ldr	r2, [pc, #64]	@ (8001208 <InitializeParameters+0x6c>)
 80011c8:	619a      	str	r2, [r3, #24]
    params.threshold_zero_crossing = 600.0f;
 80011ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <InitializeParameters+0x64>)
 80011cc:	4a0f      	ldr	r2, [pc, #60]	@ (800120c <InitializeParameters+0x70>)
 80011ce:	61da      	str	r2, [r3, #28]
    params.probe_length = 400;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <InitializeParameters+0x64>)
 80011d2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80011d6:	621a      	str	r2, [r3, #32]
    params.method = 1;
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <InitializeParameters+0x64>)
 80011da:	2201      	movs	r2, #1
 80011dc:	625a      	str	r2, [r3, #36]	@ 0x24
    params.end_index = 400;
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <InitializeParameters+0x64>)
 80011e0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80011e4:	629a      	str	r2, [r3, #40]	@ 0x28
    params.cycle_number = 10;
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <InitializeParameters+0x64>)
 80011e8:	220a      	movs	r2, #10
 80011ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    parameters_initialized = true;
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <InitializeParameters+0x74>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
    SaveParametersToFlash(); // Сохраняем значения по умолчанию
 80011f2:	f7ff ff93 	bl	800111c <SaveParametersToFlash>
    SendUSBDebugMessage("Parameters initialized with defaults and saved to Flash");
 80011f6:	4807      	ldr	r0, [pc, #28]	@ (8001214 <InitializeParameters+0x78>)
 80011f8:	f000 f80e 	bl	8001218 <SendUSBDebugMessage>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200094a8 	.word	0x200094a8
 8001204:	45480000 	.word	0x45480000
 8001208:	45020000 	.word	0x45020000
 800120c:	44160000 	.word	0x44160000
 8001210:	200094dc 	.word	0x200094dc
 8001214:	0800fe50 	.word	0x0800fe50

08001218 <SendUSBDebugMessage>:

/**
  * @brief Отправка отладочного сообщения через USB
  * @param message Текст сообщения
  */
void SendUSBDebugMessage(const char *message) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af02      	add	r7, sp, #8
 800121e:	6078      	str	r0, [r7, #4]
    snprintf(usb_msg, sizeof(usb_msg), "[%lu] %s\r\n", HAL_GetTick(), message);
 8001220:	f001 fcf2 	bl	8002c08 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4613      	mov	r3, r2
 800122c:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <SendUSBDebugMessage+0x40>)
 800122e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001232:	480a      	ldr	r0, [pc, #40]	@ (800125c <SendUSBDebugMessage+0x44>)
 8001234:	f00b ff22 	bl	800d07c <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001238:	4808      	ldr	r0, [pc, #32]	@ (800125c <SendUSBDebugMessage+0x44>)
 800123a:	f7ff f829 	bl	8000290 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	b29b      	uxth	r3, r3
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	@ (800125c <SendUSBDebugMessage+0x44>)
 8001246:	f009 fabd 	bl	800a7c4 <CDC_Transmit_FS>
    HAL_Delay(10); // Задержка для стабильной работы USB
 800124a:	200a      	movs	r0, #10
 800124c:	f001 fce8 	bl	8002c20 <HAL_Delay>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	0800fe88 	.word	0x0800fe88
 800125c:	200003d8 	.word	0x200003d8

08001260 <ParseParameters>:

/**
  * @brief Парсинг параметров из строки
  * @param params_str Строка с параметрами (после "SETPARAMS=")
  */
void ParseParameters(const char* params_str) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b0c6      	sub	sp, #280	@ 0x118
 8001264:	af00      	add	r7, sp, #0
 8001266:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800126a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800126e:	6018      	str	r0, [r3, #0]
    char buffer[USB_RX_BUFFER_SIZE];
    strncpy(buffer, params_str, sizeof(buffer) - 1);
 8001270:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001274:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001278:	f107 0008 	add.w	r0, r7, #8
 800127c:	22ff      	movs	r2, #255	@ 0xff
 800127e:	6819      	ldr	r1, [r3, #0]
 8001280:	f00b ffd1 	bl	800d226 <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 8001284:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001288:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800128c:	2200      	movs	r2, #0
 800128e:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    // Загружаем текущие параметры (если еще не инициализированы)
    if (!parameters_initialized) {
 8001292:	4b8e      	ldr	r3, [pc, #568]	@ (80014cc <ParseParameters+0x26c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	f083 0301 	eor.w	r3, r3, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <ParseParameters+0x44>
        LoadParametersFromFlash();
 80012a0:	f7ff ff06 	bl	80010b0 <LoadParametersFromFlash>
    }

    char* token = strtok(buffer, "|");
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	4989      	ldr	r1, [pc, #548]	@ (80014d0 <ParseParameters+0x270>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f00b ffce 	bl	800d24c <strtok>
 80012b0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (token != NULL) {
 80012b4:	e0f8      	b.n	80014a8 <ParseParameters+0x248>
        char* equals_sign = strchr(token, '=');
 80012b6:	213d      	movs	r1, #61	@ 0x3d
 80012b8:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80012bc:	f00b ff81 	bl	800d1c2 <strchr>
 80012c0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
        if (equals_sign != NULL) {
 80012c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80e7 	beq.w	800149c <ParseParameters+0x23c>
            *equals_sign = '\0'; // Разделяем на имя и значение
 80012ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
            char* param_name = token;
 80012d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            char* param_value = equals_sign + 1;
 80012de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80012e2:	3301      	adds	r3, #1
 80012e4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

            // Парсим параметры
            if (strcmp(param_name, "wave_speed") == 0) {
 80012e8:	497a      	ldr	r1, [pc, #488]	@ (80014d4 <ParseParameters+0x274>)
 80012ea:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80012ee:	f7fe ff6f 	bl	80001d0 <strcmp>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10d      	bne.n	8001314 <ParseParameters+0xb4>
                params.wave_speed = atof(param_value);
 80012f8:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80012fc:	f00a f88a 	bl	800b414 <atof>
 8001300:	ec53 2b10 	vmov	r2, r3, d0
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc7e 	bl	8000c08 <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	4a72      	ldr	r2, [pc, #456]	@ (80014d8 <ParseParameters+0x278>)
 8001310:	6053      	str	r3, [r2, #4]
 8001312:	e0c3      	b.n	800149c <ParseParameters+0x23c>
            } else if (strcmp(param_name, "threshold") == 0) {
 8001314:	4971      	ldr	r1, [pc, #452]	@ (80014dc <ParseParameters+0x27c>)
 8001316:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800131a:	f7fe ff59 	bl	80001d0 <strcmp>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10d      	bne.n	8001340 <ParseParameters+0xe0>
                params.threshold = atof(param_value);
 8001324:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001328:	f00a f874 	bl	800b414 <atof>
 800132c:	ec53 2b10 	vmov	r2, r3, d0
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc68 	bl	8000c08 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	4a67      	ldr	r2, [pc, #412]	@ (80014d8 <ParseParameters+0x278>)
 800133c:	6193      	str	r3, [r2, #24]
 800133e:	e0ad      	b.n	800149c <ParseParameters+0x23c>
            } else if (strcmp(param_name, "threshold_zero_crossing") == 0) {
 8001340:	4967      	ldr	r1, [pc, #412]	@ (80014e0 <ParseParameters+0x280>)
 8001342:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001346:	f7fe ff43 	bl	80001d0 <strcmp>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10d      	bne.n	800136c <ParseParameters+0x10c>
                params.threshold_zero_crossing = atof(param_value);
 8001350:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001354:	f00a f85e 	bl	800b414 <atof>
 8001358:	ec53 2b10 	vmov	r2, r3, d0
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fc52 	bl	8000c08 <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	4a5c      	ldr	r2, [pc, #368]	@ (80014d8 <ParseParameters+0x278>)
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	e097      	b.n	800149c <ParseParameters+0x23c>
            } else if (strcmp(param_name, "start_index") == 0) {
 800136c:	495d      	ldr	r1, [pc, #372]	@ (80014e4 <ParseParameters+0x284>)
 800136e:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001372:	f7fe ff2d 	bl	80001d0 <strcmp>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d108      	bne.n	800138e <ParseParameters+0x12e>
                params.start_index = atoi(param_value);
 800137c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001380:	f00a f84b 	bl	800b41a <atoi>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <ParseParameters+0x278>)
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e086      	b.n	800149c <ParseParameters+0x23c>
            } else if (strcmp(param_name, "probe_length") == 0) {
 800138e:	4956      	ldr	r1, [pc, #344]	@ (80014e8 <ParseParameters+0x288>)
 8001390:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001394:	f7fe ff1c 	bl	80001d0 <strcmp>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d108      	bne.n	80013b0 <ParseParameters+0x150>
                params.probe_length = atoi(param_value);
 800139e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80013a2:	f00a f83a 	bl	800b41a <atoi>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b4b      	ldr	r3, [pc, #300]	@ (80014d8 <ParseParameters+0x278>)
 80013ac:	621a      	str	r2, [r3, #32]
 80013ae:	e075      	b.n	800149c <ParseParameters+0x23c>
            } else if (strcmp(param_name, "strobe_left1") == 0) {
 80013b0:	494e      	ldr	r1, [pc, #312]	@ (80014ec <ParseParameters+0x28c>)
 80013b2:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80013b6:	f7fe ff0b 	bl	80001d0 <strcmp>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d108      	bne.n	80013d2 <ParseParameters+0x172>
                params.first_left_strobe = atoi(param_value);
 80013c0:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80013c4:	f00a f829 	bl	800b41a <atoi>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b42      	ldr	r3, [pc, #264]	@ (80014d8 <ParseParameters+0x278>)
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	e064      	b.n	800149c <ParseParameters+0x23c>
            } else if (strcmp(param_name, "strobe_right1") == 0) {
 80013d2:	4947      	ldr	r1, [pc, #284]	@ (80014f0 <ParseParameters+0x290>)
 80013d4:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80013d8:	f7fe fefa 	bl	80001d0 <strcmp>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d108      	bne.n	80013f4 <ParseParameters+0x194>
                params.first_right_strobe = atoi(param_value);
 80013e2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80013e6:	f00a f818 	bl	800b41a <atoi>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b3a      	ldr	r3, [pc, #232]	@ (80014d8 <ParseParameters+0x278>)
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	e053      	b.n	800149c <ParseParameters+0x23c>
            } else if (strcmp(param_name, "strobe_left2") == 0) {
 80013f4:	493f      	ldr	r1, [pc, #252]	@ (80014f4 <ParseParameters+0x294>)
 80013f6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80013fa:	f7fe fee9 	bl	80001d0 <strcmp>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d108      	bne.n	8001416 <ParseParameters+0x1b6>
                params.second_left_strobe = atoi(param_value);
 8001404:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001408:	f00a f807 	bl	800b41a <atoi>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <ParseParameters+0x278>)
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	e042      	b.n	800149c <ParseParameters+0x23c>
            } else if (strcmp(param_name, "strobe_right2") == 0) {
 8001416:	4938      	ldr	r1, [pc, #224]	@ (80014f8 <ParseParameters+0x298>)
 8001418:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800141c:	f7fe fed8 	bl	80001d0 <strcmp>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d108      	bne.n	8001438 <ParseParameters+0x1d8>
                params.second_right_strobe = atoi(param_value);
 8001426:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800142a:	f009 fff6 	bl	800b41a <atoi>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b29      	ldr	r3, [pc, #164]	@ (80014d8 <ParseParameters+0x278>)
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	e031      	b.n	800149c <ParseParameters+0x23c>
            } else if (strcmp(param_name, "method") == 0) {
 8001438:	4930      	ldr	r1, [pc, #192]	@ (80014fc <ParseParameters+0x29c>)
 800143a:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800143e:	f7fe fec7 	bl	80001d0 <strcmp>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d108      	bne.n	800145a <ParseParameters+0x1fa>
                params.method = atoi(param_value);
 8001448:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800144c:	f009 ffe5 	bl	800b41a <atoi>
 8001450:	4603      	mov	r3, r0
 8001452:	461a      	mov	r2, r3
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <ParseParameters+0x278>)
 8001456:	625a      	str	r2, [r3, #36]	@ 0x24
 8001458:	e020      	b.n	800149c <ParseParameters+0x23c>
            } else if (strcmp(param_name, "end_index") == 0) {
 800145a:	4929      	ldr	r1, [pc, #164]	@ (8001500 <ParseParameters+0x2a0>)
 800145c:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001460:	f7fe feb6 	bl	80001d0 <strcmp>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d108      	bne.n	800147c <ParseParameters+0x21c>
                params.end_index = atoi(param_value);
 800146a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800146e:	f009 ffd4 	bl	800b41a <atoi>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <ParseParameters+0x278>)
 8001478:	629a      	str	r2, [r3, #40]	@ 0x28
 800147a:	e00f      	b.n	800149c <ParseParameters+0x23c>
            } else if (strcmp(param_name, "cycle_number") == 0) {
 800147c:	4921      	ldr	r1, [pc, #132]	@ (8001504 <ParseParameters+0x2a4>)
 800147e:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001482:	f7fe fea5 	bl	80001d0 <strcmp>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d107      	bne.n	800149c <ParseParameters+0x23c>
                params.cycle_number = atoi(param_value);
 800148c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001490:	f009 ffc3 	bl	800b41a <atoi>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <ParseParameters+0x278>)
 800149a:	62da      	str	r2, [r3, #44]	@ 0x2c
            }
        }
        token = strtok(NULL, "|");
 800149c:	490c      	ldr	r1, [pc, #48]	@ (80014d0 <ParseParameters+0x270>)
 800149e:	2000      	movs	r0, #0
 80014a0:	f00b fed4 	bl	800d24c <strtok>
 80014a4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    while (token != NULL) {
 80014a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f47f af02 	bne.w	80012b6 <ParseParameters+0x56>
    }

    // Сохраняем обновленные параметры в Flash
    SaveParametersToFlash();
 80014b2:	f7ff fe33 	bl	800111c <SaveParametersToFlash>

    // Устанавливаем флаг для запуска расчета
    calculate_thickness_requested = true;
 80014b6:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <ParseParameters+0x2a8>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
    SendUSBDebugMessage("Parameters parsed and saved successfully - calculation requested");
 80014bc:	4813      	ldr	r0, [pc, #76]	@ (800150c <ParseParameters+0x2ac>)
 80014be:	f7ff feab 	bl	8001218 <SendUSBDebugMessage>
}
 80014c2:	bf00      	nop
 80014c4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200094dc 	.word	0x200094dc
 80014d0:	0800fe94 	.word	0x0800fe94
 80014d4:	0800fe98 	.word	0x0800fe98
 80014d8:	200094a8 	.word	0x200094a8
 80014dc:	0800fea4 	.word	0x0800fea4
 80014e0:	0800feb0 	.word	0x0800feb0
 80014e4:	0800fec8 	.word	0x0800fec8
 80014e8:	0800fed4 	.word	0x0800fed4
 80014ec:	0800fee4 	.word	0x0800fee4
 80014f0:	0800fef4 	.word	0x0800fef4
 80014f4:	0800ff04 	.word	0x0800ff04
 80014f8:	0800ff14 	.word	0x0800ff14
 80014fc:	0800ff24 	.word	0x0800ff24
 8001500:	0800ff2c 	.word	0x0800ff2c
 8001504:	0800ff38 	.word	0x0800ff38
 8001508:	200094dd 	.word	0x200094dd
 800150c:	0800ff48 	.word	0x0800ff48

08001510 <SendParametersResponse>:

/**
  * @brief Отправка текущих параметров обратно в приложение
  */
void SendParametersResponse(void) {
 8001510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001514:	b097      	sub	sp, #92	@ 0x5c
 8001516:	af10      	add	r7, sp, #64	@ 0x40
    if (!parameters_initialized) {
 8001518:	4b30      	ldr	r3, [pc, #192]	@ (80015dc <SendParametersResponse+0xcc>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	f083 0301 	eor.w	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <SendParametersResponse+0x1e>
        SendUSBDebugMessage("Parameters not initialized yet");
 8001526:	482e      	ldr	r0, [pc, #184]	@ (80015e0 <SendParametersResponse+0xd0>)
 8001528:	f7ff fe76 	bl	8001218 <SendUSBDebugMessage>
        return;
 800152c:	e051      	b.n	80015d2 <SendParametersResponse+0xc2>

    snprintf(usb_msg, sizeof(usb_msg),
        "wave_speed=%.1f|threshold=%.1f|threshold_zero_crossing=%.1f|"
        "start_index=%lu|probe_length=%lu|strobe_left1=%lu|strobe_right1=%lu|"
        "strobe_left2=%lu|strobe_right2=%lu|method=%lu|end_index=%lu|cycle_number=%lu\r\n",
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800152e:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <SendParametersResponse+0xd4>)
 8001530:	685b      	ldr	r3, [r3, #4]
    snprintf(usb_msg, sizeof(usb_msg),
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f818 	bl	8000568 <__aeabi_f2d>
 8001538:	4604      	mov	r4, r0
 800153a:	460d      	mov	r5, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800153c:	4b29      	ldr	r3, [pc, #164]	@ (80015e4 <SendParametersResponse+0xd4>)
 800153e:	699b      	ldr	r3, [r3, #24]
    snprintf(usb_msg, sizeof(usb_msg),
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f811 	bl	8000568 <__aeabi_f2d>
 8001546:	4680      	mov	r8, r0
 8001548:	4689      	mov	r9, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800154a:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <SendParametersResponse+0xd4>)
 800154c:	69db      	ldr	r3, [r3, #28]
    snprintf(usb_msg, sizeof(usb_msg),
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f80a 	bl	8000568 <__aeabi_f2d>
 8001554:	4b23      	ldr	r3, [pc, #140]	@ (80015e4 <SendParametersResponse+0xd4>)
 8001556:	681e      	ldr	r6, [r3, #0]
 8001558:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <SendParametersResponse+0xd4>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	4b21      	ldr	r3, [pc, #132]	@ (80015e4 <SendParametersResponse+0xd4>)
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	613a      	str	r2, [r7, #16]
 8001564:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <SendParametersResponse+0xd4>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <SendParametersResponse+0xd4>)
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	60ba      	str	r2, [r7, #8]
 8001570:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <SendParametersResponse+0xd4>)
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <SendParametersResponse+0xd4>)
 8001578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800157a:	603a      	str	r2, [r7, #0]
 800157c:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <SendParametersResponse+0xd4>)
 800157e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001580:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <SendParametersResponse+0xd4>)
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	930e      	str	r3, [sp, #56]	@ 0x38
 8001586:	920d      	str	r2, [sp, #52]	@ 0x34
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	920c      	str	r2, [sp, #48]	@ 0x30
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	920a      	str	r2, [sp, #40]	@ 0x28
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	9309      	str	r3, [sp, #36]	@ 0x24
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	9208      	str	r2, [sp, #32]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	9307      	str	r3, [sp, #28]
 80015a0:	9606      	str	r6, [sp, #24]
 80015a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80015a6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015aa:	e9cd 4500 	strd	r4, r5, [sp]
 80015ae:	4a0e      	ldr	r2, [pc, #56]	@ (80015e8 <SendParametersResponse+0xd8>)
 80015b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015b4:	480d      	ldr	r0, [pc, #52]	@ (80015ec <SendParametersResponse+0xdc>)
 80015b6:	f00b fd61 	bl	800d07c <sniprintf>
        params.start_index, params.probe_length, params.first_left_strobe, params.first_right_strobe,
        params.second_left_strobe, params.second_right_strobe, params.method, params.end_index, params.cycle_number);

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80015ba:	480c      	ldr	r0, [pc, #48]	@ (80015ec <SendParametersResponse+0xdc>)
 80015bc:	f7fe fe68 	bl	8000290 <strlen>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4619      	mov	r1, r3
 80015c6:	4809      	ldr	r0, [pc, #36]	@ (80015ec <SendParametersResponse+0xdc>)
 80015c8:	f009 f8fc 	bl	800a7c4 <CDC_Transmit_FS>
    HAL_Delay(10);
 80015cc:	200a      	movs	r0, #10
 80015ce:	f001 fb27 	bl	8002c20 <HAL_Delay>
}
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015da:	bf00      	nop
 80015dc:	200094dc 	.word	0x200094dc
 80015e0:	0800ff8c 	.word	0x0800ff8c
 80015e4:	200094a8 	.word	0x200094a8
 80015e8:	0800ffac 	.word	0x0800ffac
 80015ec:	200003d8 	.word	0x200003d8

080015f0 <GenerateStartPulse>:

/**
  * @brief Генерация стартового импульса для ПЛИС
  * @note Импульс длительностью 200 нс на пине PD6
  */
void GenerateStartPulse(void) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
    // Устанавливаем высокий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	2140      	movs	r1, #64	@ 0x40
 80015fa:	4812      	ldr	r0, [pc, #72]	@ (8001644 <GenerateStartPulse+0x54>)
 80015fc:	f002 f8ea 	bl	80037d4 <HAL_GPIO_WritePin>

    // Задержка для формирования импульса 200 нс
    for(volatile int i = 0; i < 34; i++);
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	e002      	b.n	800160c <GenerateStartPulse+0x1c>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3301      	adds	r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b21      	cmp	r3, #33	@ 0x21
 8001610:	ddf9      	ble.n	8001606 <GenerateStartPulse+0x16>

    // Устанавливаем низкий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	2140      	movs	r1, #64	@ 0x40
 8001616:	480b      	ldr	r0, [pc, #44]	@ (8001644 <GenerateStartPulse+0x54>)
 8001618:	f002 f8dc 	bl	80037d4 <HAL_GPIO_WritePin>

    // Загружаем параметры из памяти и запускаем расчет
    if (!parameters_initialized) {
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <GenerateStartPulse+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f083 0301 	eor.w	r3, r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <GenerateStartPulse+0x3e>
        LoadParametersFromFlash();
 800162a:	f7ff fd41 	bl	80010b0 <LoadParametersFromFlash>
    }
    calculate_thickness_requested = true;
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <GenerateStartPulse+0x5c>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]

    SendUSBDebugMessage("Start pulse generated and calculation requested");
 8001634:	4806      	ldr	r0, [pc, #24]	@ (8001650 <GenerateStartPulse+0x60>)
 8001636:	f7ff fdef 	bl	8001218 <SendUSBDebugMessage>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40020c00 	.word	0x40020c00
 8001648:	200094dc 	.word	0x200094dc
 800164c:	200094dd 	.word	0x200094dd
 8001650:	0801007c 	.word	0x0801007c

08001654 <ProcessUSBCommand>:

/**
  * @brief Обработка команд от USB
  * @param cmd Полученная команда
  */
void ProcessUSBCommand(uint8_t cmd) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
    switch(cmd) {
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b31      	cmp	r3, #49	@ 0x31
 8001662:	d102      	bne.n	800166a <ProcessUSBCommand+0x16>
        case '1': // Стартовая команда
            GenerateStartPulse();
 8001664:	f7ff ffc4 	bl	80015f0 <GenerateStartPulse>
            break;
 8001668:	e003      	b.n	8001672 <ProcessUSBCommand+0x1e>

        default:
            // Неизвестная команда
            SendUSBDebugMessage("Unknown command received");
 800166a:	4804      	ldr	r0, [pc, #16]	@ (800167c <ProcessUSBCommand+0x28>)
 800166c:	f7ff fdd4 	bl	8001218 <SendUSBDebugMessage>
            break;
 8001670:	bf00      	nop
    }
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	080100ac 	.word	0x080100ac

08001680 <NormalizeData>:

void NormalizeData(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	f5ad 4d8f 	sub.w	sp, sp, #18304	@ 0x4780
 8001686:	b098      	sub	sp, #96	@ 0x60
 8001688:	af00      	add	r7, sp, #0
    arm_mean_f32(normalized_data, DATA_VALUES_COUNT, &mean);
 800168a:	4a24      	ldr	r2, [pc, #144]	@ (800171c <NormalizeData+0x9c>)
 800168c:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 8001690:	4823      	ldr	r0, [pc, #140]	@ (8001720 <NormalizeData+0xa0>)
 8001692:	f009 fd47 	bl	800b124 <arm_mean_f32>
    float32_t subtracted_mean[DATA_VALUES_COUNT];
    arm_offset_f32(normalized_data, -mean, subtracted_mean, DATA_VALUES_COUNT);
 8001696:	4b21      	ldr	r3, [pc, #132]	@ (800171c <NormalizeData+0x9c>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	eef1 7a67 	vneg.f32	s15, s15
 80016a0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016a4:	3b60      	subs	r3, #96	@ 0x60
 80016a6:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 80016aa:	4619      	mov	r1, r3
 80016ac:	eeb0 0a67 	vmov.f32	s0, s15
 80016b0:	481b      	ldr	r0, [pc, #108]	@ (8001720 <NormalizeData+0xa0>)
 80016b2:	f009 fdbb 	bl	800b22c <arm_offset_f32>
    arm_std_f32(subtracted_mean, DATA_VALUES_COUNT, &std_dev);
 80016b6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016ba:	3b60      	subs	r3, #96	@ 0x60
 80016bc:	4a19      	ldr	r2, [pc, #100]	@ (8001724 <NormalizeData+0xa4>)
 80016be:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80016c2:	4618      	mov	r0, r3
 80016c4:	f009 fd0c 	bl	800b0e0 <arm_std_f32>

    if (std_dev != 0.0f) {
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <NormalizeData+0xa4>)
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d6:	d012      	beq.n	80016fe <NormalizeData+0x7e>
        arm_scale_f32(subtracted_mean, 1.0f/std_dev, normalized_data, DATA_VALUES_COUNT);
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <NormalizeData+0xa4>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016ea:	3b60      	subs	r3, #96	@ 0x60
 80016ec:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 80016f0:	490b      	ldr	r1, [pc, #44]	@ (8001720 <NormalizeData+0xa0>)
 80016f2:	eeb0 0a47 	vmov.f32	s0, s14
 80016f6:	4618      	mov	r0, r3
 80016f8:	f009 fd52 	bl	800b1a0 <arm_scale_f32>
    } else {
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
    }
}
 80016fc:	e008      	b.n	8001710 <NormalizeData+0x90>
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
 80016fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001702:	3b60      	subs	r3, #96	@ 0x60
 8001704:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8001708:	4905      	ldr	r1, [pc, #20]	@ (8001720 <NormalizeData+0xa0>)
 800170a:	4618      	mov	r0, r3
 800170c:	f009 fcb6 	bl	800b07c <arm_copy_f32>
}
 8001710:	bf00      	nop
 8001712:	f507 478f 	add.w	r7, r7, #18304	@ 0x4780
 8001716:	3760      	adds	r7, #96	@ 0x60
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20009498 	.word	0x20009498
 8001720:	200004d8 	.word	0x200004d8
 8001724:	2000949c 	.word	0x2000949c

08001728 <CalculateAutocorrelation>:

void CalculateAutocorrelation(void) {
 8001728:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e053      	b.n	80017de <CalculateAutocorrelation+0xb6>
        double sum = 0.0;
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        uint32_t count = DATA_VALUES_COUNT - lag;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f5c3 538f 	rsb	r3, r3, #4576	@ 0x11e0
 8001748:	3318      	adds	r3, #24
 800174a:	603b      	str	r3, [r7, #0]

        for (uint32_t i = 0; i < count; i++) {
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	e026      	b.n	80017a0 <CalculateAutocorrelation+0x78>
            sum += (double)normalized_data[i] * (double)normalized_data[i + lag];
 8001752:	4a28      	ldr	r2, [pc, #160]	@ (80017f4 <CalculateAutocorrelation+0xcc>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe ff03 	bl	8000568 <__aeabi_f2d>
 8001762:	4680      	mov	r8, r0
 8001764:	4689      	mov	r9, r1
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	4413      	add	r3, r2
 800176c:	4a21      	ldr	r2, [pc, #132]	@ (80017f4 <CalculateAutocorrelation+0xcc>)
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fef7 	bl	8000568 <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4640      	mov	r0, r8
 8001780:	4649      	mov	r1, r9
 8001782:	f7fe ff49 	bl	8000618 <__aeabi_dmul>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800178e:	f7fe fd8d 	bl	80002ac <__adddf3>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	e9c7 2302 	strd	r2, r3, [r7, #8]
        for (uint32_t i = 0; i < count; i++) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3301      	adds	r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d3d4      	bcc.n	8001752 <CalculateAutocorrelation+0x2a>
        }

        autocorrelation_result[lag] = (float32_t)fabs(sum / count);
 80017a8:	6838      	ldr	r0, [r7, #0]
 80017aa:	f7fe febb 	bl	8000524 <__aeabi_ui2d>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017b6:	f7ff f859 	bl	800086c <__aeabi_ddiv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4614      	mov	r4, r2
 80017c0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80017c4:	4620      	mov	r0, r4
 80017c6:	4629      	mov	r1, r5
 80017c8:	f7ff fa1e 	bl	8000c08 <__aeabi_d2f>
 80017cc:	4602      	mov	r2, r0
 80017ce:	490a      	ldr	r1, [pc, #40]	@ (80017f8 <CalculateAutocorrelation+0xd0>)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	601a      	str	r2, [r3, #0]
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3301      	adds	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d9a6      	bls.n	8001736 <CalculateAutocorrelation+0xe>
    }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017f4:	200004d8 	.word	0x200004d8
 80017f8:	20004cb8 	.word	0x20004cb8

080017fc <FindMaxAutocorrelationIndex>:

uint32_t FindMaxAutocorrelationIndex(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8001802:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <FindMaxAutocorrelationIndex+0x84>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	f083 0301 	eor.w	r3, r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <FindMaxAutocorrelationIndex+0x1e>
        SendUSBDebugMessage("Parameters not initialized for ACF");
 8001810:	481c      	ldr	r0, [pc, #112]	@ (8001884 <FindMaxAutocorrelationIndex+0x88>)
 8001812:	f7ff fd01 	bl	8001218 <SendUSBDebugMessage>
        return 0;
 8001816:	2300      	movs	r3, #0
 8001818:	e02e      	b.n	8001878 <FindMaxAutocorrelationIndex+0x7c>
    }

    float32_t max_value = 0.0f;
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
    uint32_t max_idx = params.start_index;
 8001820:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <FindMaxAutocorrelationIndex+0x8c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60bb      	str	r3, [r7, #8]

    // Используем end_index для ограничения диапазона поиска
    uint32_t search_end = (params.end_index < DATA_VALUES_COUNT) ? params.end_index : DATA_VALUES_COUNT - 1;
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <FindMaxAutocorrelationIndex+0x8c>)
 8001828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182a:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 800182e:	4293      	cmp	r3, r2
 8001830:	bf28      	it	cs
 8001832:	4613      	movcs	r3, r2
 8001834:	603b      	str	r3, [r7, #0]

    for (uint32_t i = params.start_index; i < search_end; i++) {
 8001836:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <FindMaxAutocorrelationIndex+0x8c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	e017      	b.n	800186e <FindMaxAutocorrelationIndex+0x72>
        if (autocorrelation_result[i] > max_value) {
 800183e:	4a13      	ldr	r2, [pc, #76]	@ (800188c <FindMaxAutocorrelationIndex+0x90>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	ed97 7a03 	vldr	s14, [r7, #12]
 800184e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001856:	d507      	bpl.n	8001868 <FindMaxAutocorrelationIndex+0x6c>
            max_value = autocorrelation_result[i];
 8001858:	4a0c      	ldr	r2, [pc, #48]	@ (800188c <FindMaxAutocorrelationIndex+0x90>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]
            max_idx = i;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = params.start_index; i < search_end; i++) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3301      	adds	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d3e3      	bcc.n	800183e <FindMaxAutocorrelationIndex+0x42>
        }
    }

    return max_idx;
 8001876:	68bb      	ldr	r3, [r7, #8]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200094dc 	.word	0x200094dc
 8001884:	080100c8 	.word	0x080100c8
 8001888:	200094a8 	.word	0x200094a8
 800188c:	20004cb8 	.word	0x20004cb8

08001890 <CalculateZeroCrossingThickness>:

/**
  * @brief Расчет толщины методом перехода через ноль
  */
void CalculateZeroCrossingThickness(const float32_t* data) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	@ 0x30
 8001894:	af02      	add	r7, sp, #8
 8001896:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 8001898:	4b58      	ldr	r3, [pc, #352]	@ (80019fc <CalculateZeroCrossingThickness+0x16c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f083 0301 	eor.w	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <CalculateZeroCrossingThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for zero crossing");
 80018a6:	4856      	ldr	r0, [pc, #344]	@ (8001a00 <CalculateZeroCrossingThickness+0x170>)
 80018a8:	f7ff fcb6 	bl	8001218 <SendUSBDebugMessage>
        return;
 80018ac:	e0a2      	b.n	80019f4 <CalculateZeroCrossingThickness+0x164>
    }

    // ВАЖНО: вычисляем one_point_mm здесь для методов 1 и 2
    one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency);
 80018ae:	4b55      	ldr	r3, [pc, #340]	@ (8001a04 <CalculateZeroCrossingThickness+0x174>)
 80018b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80018b4:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001a08 <CalculateZeroCrossingThickness+0x178>
 80018b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018bc:	4b53      	ldr	r3, [pc, #332]	@ (8001a0c <CalculateZeroCrossingThickness+0x17c>)
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ce:	4b50      	ldr	r3, [pc, #320]	@ (8001a10 <CalculateZeroCrossingThickness+0x180>)
 80018d0:	edc3 7a00 	vstr	s15, [r3]

    uint32_t first_above_threshold_index = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t zero_crossing_index = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
    bool found_threshold = false;
 80018dc:	2300      	movs	r3, #0
 80018de:	77fb      	strb	r3, [r7, #31]

    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	e015      	b.n	8001912 <CalculateZeroCrossingThickness+0x82>
        if (data[i] >= params.threshold_zero_crossing) {
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	ed93 7a00 	vldr	s14, [r3]
 80018f2:	4b44      	ldr	r3, [pc, #272]	@ (8001a04 <CalculateZeroCrossingThickness+0x174>)
 80018f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80018f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001900:	db04      	blt.n	800190c <CalculateZeroCrossingThickness+0x7c>
            first_above_threshold_index = i;
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
            found_threshold = true;
 8001906:	2301      	movs	r3, #1
 8001908:	77fb      	strb	r3, [r7, #31]
            break;
 800190a:	e007      	b.n	800191c <CalculateZeroCrossingThickness+0x8c>
    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	3301      	adds	r3, #1
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001918:	4293      	cmp	r3, r2
 800191a:	d9e4      	bls.n	80018e6 <CalculateZeroCrossingThickness+0x56>
        }
    }

    if (!found_threshold) {
 800191c:	7ffb      	ldrb	r3, [r7, #31]
 800191e:	f083 0301 	eor.w	r3, r3, #1
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <CalculateZeroCrossingThickness+0xa0>
        SendUSBDebugMessage("Zero crossing: threshold not found");
 8001928:	483a      	ldr	r0, [pc, #232]	@ (8001a14 <CalculateZeroCrossingThickness+0x184>)
 800192a:	f7ff fc75 	bl	8001218 <SendUSBDebugMessage>
        return;
 800192e:	e061      	b.n	80019f4 <CalculateZeroCrossingThickness+0x164>
    }

    bool sign_positive = (data[first_above_threshold_index] >= 0);
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	bfac      	ite	ge
 8001946:	2301      	movge	r3, #1
 8001948:	2300      	movlt	r3, #0
 800194a:	74fb      	strb	r3, [r7, #19]
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 800194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194e:	3301      	adds	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e017      	b.n	8001984 <CalculateZeroCrossingThickness+0xf4>
        bool current_sign_positive = (data[i] >= 0);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001968:	bfac      	ite	ge
 800196a:	2301      	movge	r3, #1
 800196c:	2300      	movlt	r3, #0
 800196e:	74bb      	strb	r3, [r7, #18]
        if (current_sign_positive != sign_positive) {
 8001970:	7cba      	ldrb	r2, [r7, #18]
 8001972:	7cfb      	ldrb	r3, [r7, #19]
 8001974:	429a      	cmp	r2, r3
 8001976:	d002      	beq.n	800197e <CalculateZeroCrossingThickness+0xee>
            zero_crossing_index = i;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	623b      	str	r3, [r7, #32]
            break;
 800197c:	e007      	b.n	800198e <CalculateZeroCrossingThickness+0xfe>
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f242 720f 	movw	r2, #9999	@ 0x270f
 800198a:	4293      	cmp	r3, r2
 800198c:	d9e2      	bls.n	8001954 <CalculateZeroCrossingThickness+0xc4>
        }
    }

    if (zero_crossing_index == 0) {
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d103      	bne.n	800199c <CalculateZeroCrossingThickness+0x10c>
        SendUSBDebugMessage("Zero crossing: zero crossing not found");
 8001994:	4820      	ldr	r0, [pc, #128]	@ (8001a18 <CalculateZeroCrossingThickness+0x188>)
 8001996:	f7ff fc3f 	bl	8001218 <SendUSBDebugMessage>
        return;
 800199a:	e02b      	b.n	80019f4 <CalculateZeroCrossingThickness+0x164>
    }

    uint32_t final_index = zero_crossing_index + params.probe_length;
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <CalculateZeroCrossingThickness+0x174>)
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	6a3a      	ldr	r2, [r7, #32]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
    float thickness = final_index / (2.0f * one_point_mm);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	ee07 3a90 	vmov	s15, r3
 80019ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019b0:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <CalculateZeroCrossingThickness+0x180>)
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019be:	edc7 7a02 	vstr	s15, [r7, #8]

    snprintf(usb_msg, sizeof(usb_msg), "Zero_crossing:%.3f\r\n", thickness);
 80019c2:	68b8      	ldr	r0, [r7, #8]
 80019c4:	f7fe fdd0 	bl	8000568 <__aeabi_f2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	e9cd 2300 	strd	r2, r3, [sp]
 80019d0:	4a12      	ldr	r2, [pc, #72]	@ (8001a1c <CalculateZeroCrossingThickness+0x18c>)
 80019d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d6:	4812      	ldr	r0, [pc, #72]	@ (8001a20 <CalculateZeroCrossingThickness+0x190>)
 80019d8:	f00b fb50 	bl	800d07c <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80019dc:	4810      	ldr	r0, [pc, #64]	@ (8001a20 <CalculateZeroCrossingThickness+0x190>)
 80019de:	f7fe fc57 	bl	8000290 <strlen>
 80019e2:	4603      	mov	r3, r0
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4619      	mov	r1, r3
 80019e8:	480d      	ldr	r0, [pc, #52]	@ (8001a20 <CalculateZeroCrossingThickness+0x190>)
 80019ea:	f008 feeb 	bl	800a7c4 <CDC_Transmit_FS>
    HAL_Delay(10);
 80019ee:	200a      	movs	r0, #10
 80019f0:	f001 f916 	bl	8002c20 <HAL_Delay>
}
 80019f4:	3728      	adds	r7, #40	@ 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200094dc 	.word	0x200094dc
 8001a00:	080100ec 	.word	0x080100ec
 8001a04:	200094a8 	.word	0x200094a8
 8001a08:	447a0000 	.word	0x447a0000
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	200094a0 	.word	0x200094a0
 8001a14:	0801011c 	.word	0x0801011c
 8001a18:	08010140 	.word	0x08010140
 8001a1c:	08010168 	.word	0x08010168
 8001a20:	200003d8 	.word	0x200003d8

08001a24 <CalculateStrobeThickness>:

/**
  * @brief Расчет толщины методом по стробам
  */
void CalculateStrobeThickness(const float32_t* data) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	@ 0x30
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 8001a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ba0 <CalculateStrobeThickness+0x17c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	f083 0301 	eor.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <CalculateStrobeThickness+0x1e>
        SendUSBDebugMessage("Parameters not initialized for strobe method");
 8001a3a:	485a      	ldr	r0, [pc, #360]	@ (8001ba4 <CalculateStrobeThickness+0x180>)
 8001a3c:	f7ff fbec 	bl	8001218 <SendUSBDebugMessage>
        return;
 8001a40:	e0ab      	b.n	8001b9a <CalculateStrobeThickness+0x176>
    }

    // ВАЖНО: вычисляем one_point_mm здесь для методов 1 и 2
    one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency);
 8001a42:	4b59      	ldr	r3, [pc, #356]	@ (8001ba8 <CalculateStrobeThickness+0x184>)
 8001a44:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a48:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001bac <CalculateStrobeThickness+0x188>
 8001a4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a50:	4b57      	ldr	r3, [pc, #348]	@ (8001bb0 <CalculateStrobeThickness+0x18c>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a62:	4b54      	ldr	r3, [pc, #336]	@ (8001bb4 <CalculateStrobeThickness+0x190>)
 8001a64:	edc3 7a00 	vstr	s15, [r3]

    float32_t max_value_first = -FLT_MAX;
 8001a68:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t max_index_first = params.first_left_strobe;
 8001a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ba8 <CalculateStrobeThickness+0x184>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	623b      	str	r3, [r7, #32]
    float32_t max_value_second = -FLT_MAX;
 8001a74:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8001a78:	61fb      	str	r3, [r7, #28]
    uint32_t max_index_second = params.second_left_strobe;
 8001a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba8 <CalculateStrobeThickness+0x184>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8001a80:	4b49      	ldr	r3, [pc, #292]	@ (8001ba8 <CalculateStrobeThickness+0x184>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e01c      	b.n	8001ac2 <CalculateStrobeThickness+0x9e>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_first) {
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d814      	bhi.n	8001abc <CalculateStrobeThickness+0x98>
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	d507      	bpl.n	8001abc <CalculateStrobeThickness+0x98>
            max_value_first = data[i];
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
            max_index_first = i;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	623b      	str	r3, [r7, #32]
    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	4b39      	ldr	r3, [pc, #228]	@ (8001ba8 <CalculateStrobeThickness+0x184>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d9dd      	bls.n	8001a88 <CalculateStrobeThickness+0x64>
        }
    }

    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 8001acc:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <CalculateStrobeThickness+0x184>)
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	e01c      	b.n	8001b0e <CalculateStrobeThickness+0xea>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_second) {
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d814      	bhi.n	8001b08 <CalculateStrobeThickness+0xe4>
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af6:	d507      	bpl.n	8001b08 <CalculateStrobeThickness+0xe4>
            max_value_second = data[i];
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	61fb      	str	r3, [r7, #28]
            max_index_second = i;
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <CalculateStrobeThickness+0x184>)
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d9dd      	bls.n	8001ad4 <CalculateStrobeThickness+0xb0>
        }
    }

    if (max_value_first == -FLT_MAX || max_value_second == -FLT_MAX) {
 8001b18:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b1c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001bb8 <CalculateStrobeThickness+0x194>
 8001b20:	eef4 7a47 	vcmp.f32	s15, s14
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	d008      	beq.n	8001b3c <CalculateStrobeThickness+0x118>
 8001b2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b2e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001bb8 <CalculateStrobeThickness+0x194>
 8001b32:	eef4 7a47 	vcmp.f32	s15, s14
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	d103      	bne.n	8001b44 <CalculateStrobeThickness+0x120>
        SendUSBDebugMessage("Strobe method: max values not found");
 8001b3c:	481f      	ldr	r0, [pc, #124]	@ (8001bbc <CalculateStrobeThickness+0x198>)
 8001b3e:	f7ff fb6b 	bl	8001218 <SendUSBDebugMessage>
        return;
 8001b42:	e02a      	b.n	8001b9a <CalculateStrobeThickness+0x176>
    }

    uint32_t index_difference = max_index_second - max_index_first;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	60fb      	str	r3, [r7, #12]
    float thickness = index_difference / (2.0f * one_point_mm);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b56:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <CalculateStrobeThickness+0x190>)
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b64:	edc7 7a02 	vstr	s15, [r7, #8]

    snprintf(usb_msg, sizeof(usb_msg), "Strobe:%.3f\r\n", thickness);
 8001b68:	68b8      	ldr	r0, [r7, #8]
 8001b6a:	f7fe fcfd 	bl	8000568 <__aeabi_f2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	e9cd 2300 	strd	r2, r3, [sp]
 8001b76:	4a12      	ldr	r2, [pc, #72]	@ (8001bc0 <CalculateStrobeThickness+0x19c>)
 8001b78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b7c:	4811      	ldr	r0, [pc, #68]	@ (8001bc4 <CalculateStrobeThickness+0x1a0>)
 8001b7e:	f00b fa7d 	bl	800d07c <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001b82:	4810      	ldr	r0, [pc, #64]	@ (8001bc4 <CalculateStrobeThickness+0x1a0>)
 8001b84:	f7fe fb84 	bl	8000290 <strlen>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480d      	ldr	r0, [pc, #52]	@ (8001bc4 <CalculateStrobeThickness+0x1a0>)
 8001b90:	f008 fe18 	bl	800a7c4 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001b94:	200a      	movs	r0, #10
 8001b96:	f001 f843 	bl	8002c20 <HAL_Delay>
}
 8001b9a:	3728      	adds	r7, #40	@ 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200094dc 	.word	0x200094dc
 8001ba4:	08010180 	.word	0x08010180
 8001ba8:	200094a8 	.word	0x200094a8
 8001bac:	447a0000 	.word	0x447a0000
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	200094a0 	.word	0x200094a0
 8001bb8:	ff7fffff 	.word	0xff7fffff
 8001bbc:	080101b0 	.word	0x080101b0
 8001bc0:	080101d4 	.word	0x080101d4
 8001bc4:	200003d8 	.word	0x200003d8

08001bc8 <CalculateAndSendACFThickness>:

/**
  * @brief Расчет толщины автокорреляционным методом и отправка результата по USB
  */
void CalculateAndSendACFThickness(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af02      	add	r7, sp, #8
    if (!parameters_initialized) {
 8001bce:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <CalculateAndSendACFThickness+0xa4>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	f083 0301 	eor.w	r3, r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <CalculateAndSendACFThickness+0x1c>
        SendUSBDebugMessage("Parameters not initialized for ACF thickness calculation");
 8001bdc:	4824      	ldr	r0, [pc, #144]	@ (8001c70 <CalculateAndSendACFThickness+0xa8>)
 8001bde:	f7ff fb1b 	bl	8001218 <SendUSBDebugMessage>
        return;
 8001be2:	e03f      	b.n	8001c64 <CalculateAndSendACFThickness+0x9c>
    }

    one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency);
 8001be4:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <CalculateAndSendACFThickness+0xac>)
 8001be6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bea:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001c78 <CalculateAndSendACFThickness+0xb0>
 8001bee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bf2:	4b22      	ldr	r3, [pc, #136]	@ (8001c7c <CalculateAndSendACFThickness+0xb4>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c04:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <CalculateAndSendACFThickness+0xb8>)
 8001c06:	edc3 7a00 	vstr	s15, [r3]
    max_index = FindMaxAutocorrelationIndex();
 8001c0a:	f7ff fdf7 	bl	80017fc <FindMaxAutocorrelationIndex>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a1c      	ldr	r2, [pc, #112]	@ (8001c84 <CalculateAndSendACFThickness+0xbc>)
 8001c12:	6013      	str	r3, [r2, #0]
    float thickness = max_index / (2.0f * one_point_mm);
 8001c14:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <CalculateAndSendACFThickness+0xbc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c20:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <CalculateAndSendACFThickness+0xb8>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2e:	edc7 7a01 	vstr	s15, [r7, #4]

    snprintf(usb_msg, sizeof(usb_msg), "ACF:%.3f\r\n", thickness);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe fc98 	bl	8000568 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	e9cd 2300 	strd	r2, r3, [sp]
 8001c40:	4a11      	ldr	r2, [pc, #68]	@ (8001c88 <CalculateAndSendACFThickness+0xc0>)
 8001c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c46:	4811      	ldr	r0, [pc, #68]	@ (8001c8c <CalculateAndSendACFThickness+0xc4>)
 8001c48:	f00b fa18 	bl	800d07c <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001c4c:	480f      	ldr	r0, [pc, #60]	@ (8001c8c <CalculateAndSendACFThickness+0xc4>)
 8001c4e:	f7fe fb1f 	bl	8000290 <strlen>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	4619      	mov	r1, r3
 8001c58:	480c      	ldr	r0, [pc, #48]	@ (8001c8c <CalculateAndSendACFThickness+0xc4>)
 8001c5a:	f008 fdb3 	bl	800a7c4 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001c5e:	200a      	movs	r0, #10
 8001c60:	f000 ffde 	bl	8002c20 <HAL_Delay>
}
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200094dc 	.word	0x200094dc
 8001c70:	080101e4 	.word	0x080101e4
 8001c74:	200094a8 	.word	0x200094a8
 8001c78:	447a0000 	.word	0x447a0000
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	200094a0 	.word	0x200094a0
 8001c84:	200094a4 	.word	0x200094a4
 8001c88:	08010220 	.word	0x08010220
 8001c8c:	200003d8 	.word	0x200003d8

08001c90 <PrintMeasurementDataToUSB>:

void PrintMeasurementDataToUSB(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0a8      	sub	sp, #160	@ 0xa0
 8001c94:	af02      	add	r7, sp, #8
    snprintf(usb_msg, sizeof(usb_msg), "Autocorrelation Result [0-%d]:\r\n", DATA_VALUES_COUNT-1);
 8001c96:	f241 13f7 	movw	r3, #4599	@ 0x11f7
 8001c9a:	4a41      	ldr	r2, [pc, #260]	@ (8001da0 <PrintMeasurementDataToUSB+0x110>)
 8001c9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ca0:	4840      	ldr	r0, [pc, #256]	@ (8001da4 <PrintMeasurementDataToUSB+0x114>)
 8001ca2:	f00b f9eb 	bl	800d07c <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001ca6:	483f      	ldr	r0, [pc, #252]	@ (8001da4 <PrintMeasurementDataToUSB+0x114>)
 8001ca8:	f7fe faf2 	bl	8000290 <strlen>
 8001cac:	4603      	mov	r3, r0
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	483c      	ldr	r0, [pc, #240]	@ (8001da4 <PrintMeasurementDataToUSB+0x114>)
 8001cb4:	f008 fd86 	bl	800a7c4 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001cb8:	200a      	movs	r0, #10
 8001cba:	f000 ffb1 	bl	8002c20 <HAL_Delay>

    char data_line[128] = "";
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	2280      	movs	r2, #128	@ 0x80
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f00b fa73 	bl	800d1b2 <memset>
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001cd2:	e05a      	b.n	8001d8a <PrintMeasurementDataToUSB+0xfa>
        char val_str[16];
        snprintf(val_str, sizeof(val_str), "%7.2f ", autocorrelation_result[i]);
 8001cd4:	4a34      	ldr	r2, [pc, #208]	@ (8001da8 <PrintMeasurementDataToUSB+0x118>)
 8001cd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc41 	bl	8000568 <__aeabi_f2d>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	1d38      	adds	r0, r7, #4
 8001cec:	e9cd 2300 	strd	r2, r3, [sp]
 8001cf0:	4a2e      	ldr	r2, [pc, #184]	@ (8001dac <PrintMeasurementDataToUSB+0x11c>)
 8001cf2:	2110      	movs	r1, #16
 8001cf4:	f00b f9c2 	bl	800d07c <sniprintf>
        strncat(data_line, val_str, sizeof(data_line) - strlen(data_line) - 1);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fac7 	bl	8000290 <strlen>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8001d08:	1d39      	adds	r1, r7, #4
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f00b fa64 	bl	800d1dc <strncat>

        if ((i+1) % VALUES_PER_LINE == 0 || i == DATA_VALUES_COUNT-1) {
 8001d14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d18:	1c59      	adds	r1, r3, #1
 8001d1a:	4b25      	ldr	r3, [pc, #148]	@ (8001db0 <PrintMeasurementDataToUSB+0x120>)
 8001d1c:	fb83 2301 	smull	r2, r3, r3, r1
 8001d20:	109a      	asrs	r2, r3, #2
 8001d22:	17cb      	asrs	r3, r1, #31
 8001d24:	1ad2      	subs	r2, r2, r3
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	1aca      	subs	r2, r1, r3
 8001d30:	2a00      	cmp	r2, #0
 8001d32:	d005      	beq.n	8001d40 <PrintMeasurementDataToUSB+0xb0>
 8001d34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d38:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d11f      	bne.n	8001d80 <PrintMeasurementDataToUSB+0xf0>
            strncat(data_line, "\r\n", sizeof(data_line) - strlen(data_line) - 1);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe faa3 	bl	8000290 <strlen>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	4917      	ldr	r1, [pc, #92]	@ (8001db4 <PrintMeasurementDataToUSB+0x124>)
 8001d56:	4618      	mov	r0, r3
 8001d58:	f00b fa40 	bl	800d1dc <strncat>
            CDC_Transmit_FS((uint8_t*)data_line, strlen(data_line));
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fa95 	bl	8000290 <strlen>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f008 fd27 	bl	800a7c4 <CDC_Transmit_FS>
            HAL_Delay(10);
 8001d76:	200a      	movs	r0, #10
 8001d78:	f000 ff52 	bl	8002c20 <HAL_Delay>
            data_line[0] = '\0';
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	753b      	strb	r3, [r7, #20]
    for (int i = 0; i < DATA_VALUES_COUNT; i++) {
 8001d80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d84:	3301      	adds	r3, #1
 8001d86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d8e:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001d92:	4293      	cmp	r3, r2
 8001d94:	dd9e      	ble.n	8001cd4 <PrintMeasurementDataToUSB+0x44>
        }
    }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	3798      	adds	r7, #152	@ 0x98
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	0801022c 	.word	0x0801022c
 8001da4:	200003d8 	.word	0x200003d8
 8001da8:	20004cb8 	.word	0x20004cb8
 8001dac:	08010250 	.word	0x08010250
 8001db0:	66666667 	.word	0x66666667
 8001db4:	08010258 	.word	0x08010258

08001db8 <CheckThreshold>:

/**
  * @brief Проверка данных на превышение threshold
  * @return true если данные НЕ превышают порог, false если превышают
  */
bool CheckThreshold(const float32_t* data, uint32_t size) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
    if (!parameters_initialized) {
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <CheckThreshold+0x64>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	f083 0301 	eor.w	r3, r3, #1
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d004      	beq.n	8001dda <CheckThreshold+0x22>
        SendUSBDebugMessage("Threshold parameter not initialized");
 8001dd0:	4813      	ldr	r0, [pc, #76]	@ (8001e20 <CheckThreshold+0x68>)
 8001dd2:	f7ff fa21 	bl	8001218 <SendUSBDebugMessage>
        return false; // Не пропускаем обработку если параметры не инициализированы
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e01c      	b.n	8001e14 <CheckThreshold+0x5c>
    }

    for (uint32_t i = 0; i < size; i++) {
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e014      	b.n	8001e0a <CheckThreshold+0x52>
        if (fabsf(data[i]) > params.threshold) {
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	eeb0 7ae7 	vabs.f32	s14, s15
 8001df0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <CheckThreshold+0x6c>)
 8001df2:	edd3 7a06 	vldr	s15, [r3, #24]
 8001df6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfe:	dd01      	ble.n	8001e04 <CheckThreshold+0x4c>
            return false; // Обнаружено превышение порога
 8001e00:	2300      	movs	r3, #0
 8001e02:	e007      	b.n	8001e14 <CheckThreshold+0x5c>
    for (uint32_t i = 0; i < size; i++) {
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3301      	adds	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d3e6      	bcc.n	8001de0 <CheckThreshold+0x28>
        }
    }
    return true; // Все данные ниже порога
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200094dc 	.word	0x200094dc
 8001e20:	0801025c 	.word	0x0801025c
 8001e24:	200094a8 	.word	0x200094a8

08001e28 <AddRandomNoiseAndExtend>:

/**
  * @brief Добавление случайного шума и расширение массива до 10000 точек
  */
void AddRandomNoiseAndExtend(const float32_t* src, float32_t* dest, uint32_t dest_size) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
    // Копируем исходные данные с небольшим случайным шумом
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	e02a      	b.n	8001e90 <AddRandomNoiseAndExtend+0x68>
        float noise = (rand() % 100 - 50) / 100.0f; // Случайный шум ±0.5
 8001e3a:	f009 fb21 	bl	800b480 <rand>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <AddRandomNoiseAndExtend+0xd0>)
 8001e42:	fb83 1302 	smull	r1, r3, r3, r2
 8001e46:	1159      	asrs	r1, r3, #5
 8001e48:	17d3      	asrs	r3, r2, #31
 8001e4a:	1acb      	subs	r3, r1, r3
 8001e4c:	2164      	movs	r1, #100	@ 0x64
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	3b32      	subs	r3, #50	@ 0x32
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e5e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001efc <AddRandomNoiseAndExtend+0xd4>
 8001e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e66:	edc7 7a05 	vstr	s15, [r7, #20]
        dest[i] = src[i] + noise;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	ed93 7a00 	vldr	s14, [r3]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e86:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < DATA_VALUES_COUNT; i++) {
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d9cf      	bls.n	8001e3a <AddRandomNoiseAndExtend+0x12>
    }

    // Дополняем массив до 10000 точек случайными колебаниями
    for (uint32_t i = DATA_VALUES_COUNT; i < dest_size; i++) {
 8001e9a:	f241 13f8 	movw	r3, #4600	@ 0x11f8
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	e020      	b.n	8001ee4 <AddRandomNoiseAndExtend+0xbc>
        dest[i] = (rand() % 2000 - 1000) / 10.0f; // Случайные значения в диапазоне ±100
 8001ea2:	f009 faed 	bl	800b480 <rand>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <AddRandomNoiseAndExtend+0xd8>)
 8001eaa:	fb83 1302 	smull	r1, r3, r3, r2
 8001eae:	11d9      	asrs	r1, r3, #7
 8001eb0:	17d3      	asrs	r3, r2, #31
 8001eb2:	1acb      	subs	r3, r1, r3
 8001eb4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eda:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = DATA_VALUES_COUNT; i < dest_size; i++) {
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d3da      	bcc.n	8001ea2 <AddRandomNoiseAndExtend+0x7a>
    }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3720      	adds	r7, #32
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	51eb851f 	.word	0x51eb851f
 8001efc:	42c80000 	.word	0x42c80000
 8001f00:	10624dd3 	.word	0x10624dd3

08001f04 <ProcessCycle>:
/**
  * @brief Обработка одного цикла
  * @param cycle_num Номер текущего цикла
  * @return true если цикл прошел проверку порога, false если нет
  */
bool ProcessCycle(uint32_t cycle_num) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    // Добавляем шум и расширяем данные
    AddRandomNoiseAndExtend(measurement_data, temp_data, FINAL_DATA_SIZE);
 8001f0c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001f10:	4936      	ldr	r1, [pc, #216]	@ (8001fec <ProcessCycle+0xe8>)
 8001f12:	4837      	ldr	r0, [pc, #220]	@ (8001ff0 <ProcessCycle+0xec>)
 8001f14:	f7ff ff88 	bl	8001e28 <AddRandomNoiseAndExtend>

    // Проверяем порог - функция возвращает true если НЕ превысило порог
    bool below_threshold = CheckThreshold(temp_data, FINAL_DATA_SIZE);
 8001f18:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001f1c:	4833      	ldr	r0, [pc, #204]	@ (8001fec <ProcessCycle+0xe8>)
 8001f1e:	f7ff ff4b 	bl	8001db8 <CheckThreshold>
 8001f22:	4603      	mov	r3, r0
 8001f24:	72fb      	strb	r3, [r7, #11]

    // Отправляем статус цикла по USB (английский текст)
    if (below_threshold) {
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d047      	beq.n	8001fbc <ProcessCycle+0xb8>
        snprintf(usb_msg, sizeof(usb_msg), "Cycle:%lu - threshold NOT exceeded, data added to averaged array\r\n", cycle_num);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a31      	ldr	r2, [pc, #196]	@ (8001ff4 <ProcessCycle+0xf0>)
 8001f30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f34:	4830      	ldr	r0, [pc, #192]	@ (8001ff8 <ProcessCycle+0xf4>)
 8001f36:	f00b f8a1 	bl	800d07c <sniprintf>

        if (successful_cycles == 0) {
 8001f3a:	4b30      	ldr	r3, [pc, #192]	@ (8001ffc <ProcessCycle+0xf8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <ProcessCycle+0x4c>
            // Первый успешный цикл - просто копируем данные
            arm_copy_f32(temp_data, final_data, FINAL_DATA_SIZE);
 8001f42:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001f46:	492e      	ldr	r1, [pc, #184]	@ (8002000 <ProcessCycle+0xfc>)
 8001f48:	4828      	ldr	r0, [pc, #160]	@ (8001fec <ProcessCycle+0xe8>)
 8001f4a:	f009 f897 	bl	800b07c <arm_copy_f32>
 8001f4e:	e02f      	b.n	8001fb0 <ProcessCycle+0xac>
        } else {
            // Усредняем с предыдущими успешными данными
            for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	e027      	b.n	8001fa6 <ProcessCycle+0xa2>
                final_data[i] = (final_data[i] * successful_cycles + temp_data[i]) / (successful_cycles + 1);
 8001f56:	4a2a      	ldr	r2, [pc, #168]	@ (8002000 <ProcessCycle+0xfc>)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	ed93 7a00 	vldr	s14, [r3]
 8001f62:	4b26      	ldr	r3, [pc, #152]	@ (8001ffc <ProcessCycle+0xf8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f72:	4a1e      	ldr	r2, [pc, #120]	@ (8001fec <ProcessCycle+0xe8>)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <ProcessCycle+0xf8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3301      	adds	r3, #1
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f94:	4a1a      	ldr	r2, [pc, #104]	@ (8002000 <ProcessCycle+0xfc>)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	edc3 7a00 	vstr	s15, [r3]
            for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d9d2      	bls.n	8001f56 <ProcessCycle+0x52>
            }
        }
        successful_cycles++;
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <ProcessCycle+0xf8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4a11      	ldr	r2, [pc, #68]	@ (8001ffc <ProcessCycle+0xf8>)
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e006      	b.n	8001fca <ProcessCycle+0xc6>
    } else {
        snprintf(usb_msg, sizeof(usb_msg), "Cycle:%lu - THRESHOLD EXCEEDED! Array skipped\r\n", cycle_num);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <ProcessCycle+0x100>)
 8001fc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fc4:	480c      	ldr	r0, [pc, #48]	@ (8001ff8 <ProcessCycle+0xf4>)
 8001fc6:	f00b f859 	bl	800d07c <sniprintf>
    }

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001fca:	480b      	ldr	r0, [pc, #44]	@ (8001ff8 <ProcessCycle+0xf4>)
 8001fcc:	f7fe f960 	bl	8000290 <strlen>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4808      	ldr	r0, [pc, #32]	@ (8001ff8 <ProcessCycle+0xf4>)
 8001fd8:	f008 fbf4 	bl	800a7c4 <CDC_Transmit_FS>
    HAL_Delay(10);
 8001fdc:	200a      	movs	r0, #10
 8001fde:	f000 fe1f 	bl	8002c20 <HAL_Delay>

    return below_threshold;
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200094e0 	.word	0x200094e0
 8001ff0:	08010444 	.word	0x08010444
 8001ff4:	08010280 	.word	0x08010280
 8001ff8:	200003d8 	.word	0x200003d8
 8001ffc:	2001cd60 	.word	0x2001cd60
 8002000:	20013120 	.word	0x20013120
 8002004:	080102c4 	.word	0x080102c4

08002008 <ProcessDataByMethod>:

/**
  * @brief Обработка данных в зависимости от выбранного метода
  */
void ProcessDataByMethod(void) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 800200e:	4b29      	ldr	r3, [pc, #164]	@ (80020b4 <ProcessDataByMethod+0xac>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	f083 0301 	eor.w	r3, r3, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <ProcessDataByMethod+0x1c>
        SendUSBDebugMessage("Parameters not initialized");
 800201c:	4826      	ldr	r0, [pc, #152]	@ (80020b8 <ProcessDataByMethod+0xb0>)
 800201e:	f7ff f8fb 	bl	8001218 <SendUSBDebugMessage>
        return;
 8002022:	e044      	b.n	80020ae <ProcessDataByMethod+0xa6>
    }

    // Сбрасываем счетчик успешных циклов
    successful_cycles = 0;
 8002024:	4b25      	ldr	r3, [pc, #148]	@ (80020bc <ProcessDataByMethod+0xb4>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

    // Выполняем указанное количество циклов
    for (uint32_t cycle = 1; cycle <= params.cycle_number; cycle++) {
 800202a:	2301      	movs	r3, #1
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	e008      	b.n	8002042 <ProcessDataByMethod+0x3a>
        ProcessCycle(cycle);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff67 	bl	8001f04 <ProcessCycle>
        HAL_Delay(10); // Небольшая задержка между циклами
 8002036:	200a      	movs	r0, #10
 8002038:	f000 fdf2 	bl	8002c20 <HAL_Delay>
    for (uint32_t cycle = 1; cycle <= params.cycle_number; cycle++) {
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3301      	adds	r3, #1
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	4b1f      	ldr	r3, [pc, #124]	@ (80020c0 <ProcessDataByMethod+0xb8>)
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	d9f1      	bls.n	8002030 <ProcessDataByMethod+0x28>
    }

    if (successful_cycles == 0) {
 800204c:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <ProcessDataByMethod+0xb4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d103      	bne.n	800205c <ProcessDataByMethod+0x54>
        SendUSBDebugMessage("Ни один цикл не прошел проверку порога");
 8002054:	481b      	ldr	r0, [pc, #108]	@ (80020c4 <ProcessDataByMethod+0xbc>)
 8002056:	f7ff f8df 	bl	8001218 <SendUSBDebugMessage>
        return;
 800205a:	e028      	b.n	80020ae <ProcessDataByMethod+0xa6>
    }

    SendUSBDebugMessage("Усреднение завершено, начинаем расчет толщины");
 800205c:	481a      	ldr	r0, [pc, #104]	@ (80020c8 <ProcessDataByMethod+0xc0>)
 800205e:	f7ff f8db 	bl	8001218 <SendUSBDebugMessage>

    // Используем усредненные данные для расчета толщины
    switch (params.method) {
 8002062:	4b17      	ldr	r3, [pc, #92]	@ (80020c0 <ProcessDataByMethod+0xb8>)
 8002064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002066:	2b02      	cmp	r3, #2
 8002068:	d019      	beq.n	800209e <ProcessDataByMethod+0x96>
 800206a:	2b02      	cmp	r3, #2
 800206c:	d81b      	bhi.n	80020a6 <ProcessDataByMethod+0x9e>
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <ProcessDataByMethod+0x70>
 8002072:	2b01      	cmp	r3, #1
 8002074:	d00f      	beq.n	8002096 <ProcessDataByMethod+0x8e>
 8002076:	e016      	b.n	80020a6 <ProcessDataByMethod+0x9e>
        case 0: // Автокорреляционный метод
            // Копируем и нормализуем данные для АКФ
            arm_copy_f32(final_data, normalized_data, DATA_VALUES_COUNT);
 8002078:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 800207c:	4913      	ldr	r1, [pc, #76]	@ (80020cc <ProcessDataByMethod+0xc4>)
 800207e:	4814      	ldr	r0, [pc, #80]	@ (80020d0 <ProcessDataByMethod+0xc8>)
 8002080:	f008 fffc 	bl	800b07c <arm_copy_f32>
            NormalizeData();
 8002084:	f7ff fafc 	bl	8001680 <NormalizeData>
            CalculateAutocorrelation();
 8002088:	f7ff fb4e 	bl	8001728 <CalculateAutocorrelation>
            CalculateAndSendACFThickness();
 800208c:	f7ff fd9c 	bl	8001bc8 <CalculateAndSendACFThickness>
            PrintMeasurementDataToUSB();
 8002090:	f7ff fdfe 	bl	8001c90 <PrintMeasurementDataToUSB>
            break;
 8002094:	e00b      	b.n	80020ae <ProcessDataByMethod+0xa6>

        case 1: // Только метод перехода через ноль
            CalculateZeroCrossingThickness(final_data);
 8002096:	480e      	ldr	r0, [pc, #56]	@ (80020d0 <ProcessDataByMethod+0xc8>)
 8002098:	f7ff fbfa 	bl	8001890 <CalculateZeroCrossingThickness>
            break;
 800209c:	e007      	b.n	80020ae <ProcessDataByMethod+0xa6>

        case 2: // Только метод по стробам
            CalculateStrobeThickness(final_data);
 800209e:	480c      	ldr	r0, [pc, #48]	@ (80020d0 <ProcessDataByMethod+0xc8>)
 80020a0:	f7ff fcc0 	bl	8001a24 <CalculateStrobeThickness>
            break;
 80020a4:	e003      	b.n	80020ae <ProcessDataByMethod+0xa6>

        default:
            SendUSBDebugMessage("Unknown method specified");
 80020a6:	480b      	ldr	r0, [pc, #44]	@ (80020d4 <ProcessDataByMethod+0xcc>)
 80020a8:	f7ff f8b6 	bl	8001218 <SendUSBDebugMessage>
            break;
 80020ac:	bf00      	nop
    }
}
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200094dc 	.word	0x200094dc
 80020b8:	080102f4 	.word	0x080102f4
 80020bc:	2001cd60 	.word	0x2001cd60
 80020c0:	200094a8 	.word	0x200094a8
 80020c4:	08010310 	.word	0x08010310
 80020c8:	08010358 	.word	0x08010358
 80020cc:	200004d8 	.word	0x200004d8
 80020d0:	20013120 	.word	0x20013120
 80020d4:	080103b0 	.word	0x080103b0

080020d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80020dc:	f000 fd2e 	bl	8002b3c <HAL_Init>
  SystemClock_Config();
 80020e0:	f000 f872 	bl	80021c8 <SystemClock_Config>
  MX_GPIO_Init();
 80020e4:	f000 f97c 	bl	80023e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80020e8:	f000 f950 	bl	800238c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80020ec:	f008 fa70 	bl	800a5d0 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 80020f0:	f000 f8d4 	bl	800229c <MX_DAC_Init>
  MX_TIM3_Init();
 80020f4:	f000 f8fc 	bl	80022f0 <MX_TIM3_Init>
  MX_FSMC_Init();
 80020f8:	f000 fa32 	bl	8002560 <MX_FSMC_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80020fc:	4828      	ldr	r0, [pc, #160]	@ (80021a0 <main+0xc8>)
 80020fe:	f003 fb05 	bl	800570c <HAL_TIM_Base_Start>
  srand(HAL_GetTick());
 8002102:	f000 fd81 	bl	8002c08 <HAL_GetTick>
 8002106:	4603      	mov	r3, r0
 8002108:	4618      	mov	r0, r3
 800210a:	f009 f98b 	bl	800b424 <srand>

  // Загружаем параметры из энергонезависимой памяти при старте
  HAL_Delay(1000);
 800210e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002112:	f000 fd85 	bl	8002c20 <HAL_Delay>
  LoadParametersFromFlash();
 8002116:	f7fe ffcb 	bl	80010b0 <LoadParametersFromFlash>
  HAL_Delay(1000);
 800211a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800211e:	f000 fd7f 	bl	8002c20 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
      if (new_data_received) {
 8002122:	4b20      	ldr	r3, [pc, #128]	@ (80021a4 <main+0xcc>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d025      	beq.n	8002178 <main+0xa0>
          // Проверяем, является ли сообщение командой SETPARAMS
          if (strncmp((char*)usb_rx_buffer, "SETPARAMS=", 10) == 0) {
 800212c:	220a      	movs	r2, #10
 800212e:	491e      	ldr	r1, [pc, #120]	@ (80021a8 <main+0xd0>)
 8002130:	481e      	ldr	r0, [pc, #120]	@ (80021ac <main+0xd4>)
 8002132:	f00b f866 	bl	800d202 <strncmp>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d106      	bne.n	800214a <main+0x72>
              // Парсим параметры
              ParseParameters((char*)usb_rx_buffer + 10);
 800213c:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <main+0xd8>)
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f88e 	bl	8001260 <ParseParameters>

              // Отправляем подтверждение с текущими значениями
              SendParametersResponse();
 8002144:	f7ff f9e4 	bl	8001510 <SendParametersResponse>
 8002148:	e00a      	b.n	8002160 <main+0x88>
          }
          else if (strncmp((char*)usb_rx_buffer, "1", 1) == 0) {
 800214a:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <main+0xd4>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <main+0xdc>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <main+0x88>
              // Обработка команды "1"
              ProcessUSBCommand('1');
 800215a:	2031      	movs	r0, #49	@ 0x31
 800215c:	f7ff fa7a 	bl	8001654 <ProcessUSBCommand>
          }
          // Сбрасываем буфер и флаг
          memset((void*)usb_rx_buffer, 0, USB_RX_BUFFER_SIZE);
 8002160:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002164:	2100      	movs	r1, #0
 8002166:	4811      	ldr	r0, [pc, #68]	@ (80021ac <main+0xd4>)
 8002168:	f00b f823 	bl	800d1b2 <memset>
          usb_rx_index = 0;
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <main+0xe0>)
 800216e:	2200      	movs	r2, #0
 8002170:	801a      	strh	r2, [r3, #0]
          new_data_received = 0;
 8002172:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <main+0xcc>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
      }

      // Проверяем, нужно ли выполнить расчет толщин
      if (calculate_thickness_requested && parameters_initialized) {
 8002178:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <main+0xe4>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00b      	beq.n	8002198 <main+0xc0>
 8002180:	4b0f      	ldr	r3, [pc, #60]	@ (80021c0 <main+0xe8>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <main+0xc0>
          calculate_thickness_requested = false; // Сбрасываем флаг
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <main+0xe4>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]

          // Обрабатываем данные с учетом циклов
          ProcessDataByMethod();
 800218e:	f7ff ff3b 	bl	8002008 <ProcessDataByMethod>
          SendUSBDebugMessage("Thickness calculation completed");
 8002192:	480c      	ldr	r0, [pc, #48]	@ (80021c4 <main+0xec>)
 8002194:	f7ff f840 	bl	8001218 <SendUSBDebugMessage>
      }

      HAL_Delay(100);
 8002198:	2064      	movs	r0, #100	@ 0x64
 800219a:	f000 fd41 	bl	8002c20 <HAL_Delay>
      if (new_data_received) {
 800219e:	e7c0      	b.n	8002122 <main+0x4a>
 80021a0:	200002f8 	.word	0x200002f8
 80021a4:	2001d172 	.word	0x2001d172
 80021a8:	080103cc 	.word	0x080103cc
 80021ac:	2001d070 	.word	0x2001d070
 80021b0:	2001d07a 	.word	0x2001d07a
 80021b4:	080103d8 	.word	0x080103d8
 80021b8:	2001d170 	.word	0x2001d170
 80021bc:	200094dd 	.word	0x200094dd
 80021c0:	200094dc 	.word	0x200094dc
 80021c4:	080103dc 	.word	0x080103dc

080021c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b094      	sub	sp, #80	@ 0x50
 80021cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ce:	f107 0320 	add.w	r3, r7, #32
 80021d2:	2230      	movs	r2, #48	@ 0x30
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f00a ffeb 	bl	800d1b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	4b28      	ldr	r3, [pc, #160]	@ (8002294 <SystemClock_Config+0xcc>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	4a27      	ldr	r2, [pc, #156]	@ (8002294 <SystemClock_Config+0xcc>)
 80021f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fc:	4b25      	ldr	r3, [pc, #148]	@ (8002294 <SystemClock_Config+0xcc>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002208:	2300      	movs	r3, #0
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <SystemClock_Config+0xd0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a21      	ldr	r2, [pc, #132]	@ (8002298 <SystemClock_Config+0xd0>)
 8002212:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	4b1f      	ldr	r3, [pc, #124]	@ (8002298 <SystemClock_Config+0xd0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002224:	2301      	movs	r3, #1
 8002226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002228:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800222e:	2302      	movs	r3, #2
 8002230:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002232:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002238:	2308      	movs	r3, #8
 800223a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800223c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002240:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002242:	2302      	movs	r3, #2
 8002244:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002246:	2307      	movs	r3, #7
 8002248:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800224a:	f107 0320 	add.w	r3, r7, #32
 800224e:	4618      	mov	r0, r3
 8002250:	f002 fd2c 	bl	8004cac <HAL_RCC_OscConfig>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800225a:	f000 f9e1 	bl	8002620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800225e:	230f      	movs	r3, #15
 8002260:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002262:	2302      	movs	r3, #2
 8002264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800226a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800226e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002274:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002276:	f107 030c 	add.w	r3, r7, #12
 800227a:	2105      	movs	r1, #5
 800227c:	4618      	mov	r0, r3
 800227e:	f002 ff8d 	bl	800519c <HAL_RCC_ClockConfig>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002288:	f000 f9ca 	bl	8002620 <Error_Handler>
  }
}
 800228c:	bf00      	nop
 800228e:	3750      	adds	r7, #80	@ 0x50
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	40007000 	.word	0x40007000

0800229c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80022a2:	463b      	mov	r3, r7
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80022aa:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <MX_DAC_Init+0x4c>)
 80022ac:	4a0f      	ldr	r2, [pc, #60]	@ (80022ec <MX_DAC_Init+0x50>)
 80022ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80022b0:	480d      	ldr	r0, [pc, #52]	@ (80022e8 <MX_DAC_Init+0x4c>)
 80022b2:	f000 fdea 	bl	8002e8a <HAL_DAC_Init>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80022bc:	f000 f9b0 	bl	8002620 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80022c8:	463b      	mov	r3, r7
 80022ca:	2200      	movs	r2, #0
 80022cc:	4619      	mov	r1, r3
 80022ce:	4806      	ldr	r0, [pc, #24]	@ (80022e8 <MX_DAC_Init+0x4c>)
 80022d0:	f000 fdfd 	bl	8002ece <HAL_DAC_ConfigChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80022da:	f000 f9a1 	bl	8002620 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200002e4 	.word	0x200002e4
 80022ec:	40007400 	.word	0x40007400

080022f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002304:	463b      	mov	r3, r7
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800230c:	4b1d      	ldr	r3, [pc, #116]	@ (8002384 <MX_TIM3_Init+0x94>)
 800230e:	4a1e      	ldr	r2, [pc, #120]	@ (8002388 <MX_TIM3_Init+0x98>)
 8002310:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8002312:	4b1c      	ldr	r3, [pc, #112]	@ (8002384 <MX_TIM3_Init+0x94>)
 8002314:	22a7      	movs	r2, #167	@ 0xa7
 8002316:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002318:	4b1a      	ldr	r3, [pc, #104]	@ (8002384 <MX_TIM3_Init+0x94>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800231e:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <MX_TIM3_Init+0x94>)
 8002320:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002324:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002326:	4b17      	ldr	r3, [pc, #92]	@ (8002384 <MX_TIM3_Init+0x94>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800232c:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <MX_TIM3_Init+0x94>)
 800232e:	2280      	movs	r2, #128	@ 0x80
 8002330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002332:	4814      	ldr	r0, [pc, #80]	@ (8002384 <MX_TIM3_Init+0x94>)
 8002334:	f003 f99a 	bl	800566c <HAL_TIM_Base_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800233e:	f000 f96f 	bl	8002620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002342:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002346:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002348:	f107 0308 	add.w	r3, r7, #8
 800234c:	4619      	mov	r1, r3
 800234e:	480d      	ldr	r0, [pc, #52]	@ (8002384 <MX_TIM3_Init+0x94>)
 8002350:	f003 fb34 	bl	80059bc <HAL_TIM_ConfigClockSource>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800235a:	f000 f961 	bl	8002620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002366:	463b      	mov	r3, r7
 8002368:	4619      	mov	r1, r3
 800236a:	4806      	ldr	r0, [pc, #24]	@ (8002384 <MX_TIM3_Init+0x94>)
 800236c:	f003 fd60 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002376:	f000 f953 	bl	8002620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200002f8 	.word	0x200002f8
 8002388:	40000400 	.word	0x40000400

0800238c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002390:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 8002392:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <MX_USART1_UART_Init+0x50>)
 8002394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002396:	4b10      	ldr	r3, [pc, #64]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 8002398:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800239c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800239e:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c2:	4805      	ldr	r0, [pc, #20]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023c4:	f003 fdc4 	bl	8005f50 <HAL_UART_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023ce:	f000 f927 	bl	8002620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000340 	.word	0x20000340
 80023dc:	40011000 	.word	0x40011000

080023e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	@ 0x30
 80023e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e6:	f107 031c 	add.w	r3, r7, #28
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	4b54      	ldr	r3, [pc, #336]	@ (800254c <MX_GPIO_Init+0x16c>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	4a53      	ldr	r2, [pc, #332]	@ (800254c <MX_GPIO_Init+0x16c>)
 8002400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002404:	6313      	str	r3, [r2, #48]	@ 0x30
 8002406:	4b51      	ldr	r3, [pc, #324]	@ (800254c <MX_GPIO_Init+0x16c>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	4b4d      	ldr	r3, [pc, #308]	@ (800254c <MX_GPIO_Init+0x16c>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	4a4c      	ldr	r2, [pc, #304]	@ (800254c <MX_GPIO_Init+0x16c>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6313      	str	r3, [r2, #48]	@ 0x30
 8002422:	4b4a      	ldr	r3, [pc, #296]	@ (800254c <MX_GPIO_Init+0x16c>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	4b46      	ldr	r3, [pc, #280]	@ (800254c <MX_GPIO_Init+0x16c>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	4a45      	ldr	r2, [pc, #276]	@ (800254c <MX_GPIO_Init+0x16c>)
 8002438:	f043 0310 	orr.w	r3, r3, #16
 800243c:	6313      	str	r3, [r2, #48]	@ 0x30
 800243e:	4b43      	ldr	r3, [pc, #268]	@ (800254c <MX_GPIO_Init+0x16c>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b3f      	ldr	r3, [pc, #252]	@ (800254c <MX_GPIO_Init+0x16c>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	4a3e      	ldr	r2, [pc, #248]	@ (800254c <MX_GPIO_Init+0x16c>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	6313      	str	r3, [r2, #48]	@ 0x30
 800245a:	4b3c      	ldr	r3, [pc, #240]	@ (800254c <MX_GPIO_Init+0x16c>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	4b38      	ldr	r3, [pc, #224]	@ (800254c <MX_GPIO_Init+0x16c>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	4a37      	ldr	r2, [pc, #220]	@ (800254c <MX_GPIO_Init+0x16c>)
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	6313      	str	r3, [r2, #48]	@ 0x30
 8002476:	4b35      	ldr	r3, [pc, #212]	@ (800254c <MX_GPIO_Init+0x16c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	4b31      	ldr	r3, [pc, #196]	@ (800254c <MX_GPIO_Init+0x16c>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	4a30      	ldr	r2, [pc, #192]	@ (800254c <MX_GPIO_Init+0x16c>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	6313      	str	r3, [r2, #48]	@ 0x30
 8002492:	4b2e      	ldr	r3, [pc, #184]	@ (800254c <MX_GPIO_Init+0x16c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 800249e:	2200      	movs	r2, #0
 80024a0:	f248 0120 	movw	r1, #32800	@ 0x8020
 80024a4:	482a      	ldr	r0, [pc, #168]	@ (8002550 <MX_GPIO_Init+0x170>)
 80024a6:	f001 f995 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80024aa:	2200      	movs	r2, #0
 80024ac:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80024b0:	4828      	ldr	r0, [pc, #160]	@ (8002554 <MX_GPIO_Init+0x174>)
 80024b2:	f001 f98f 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2140      	movs	r1, #64	@ 0x40
 80024ba:	4827      	ldr	r0, [pc, #156]	@ (8002558 <MX_GPIO_Init+0x178>)
 80024bc:	f001 f98a 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80024c0:	2200      	movs	r2, #0
 80024c2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80024c6:	4825      	ldr	r0, [pc, #148]	@ (800255c <MX_GPIO_Init+0x17c>)
 80024c8:	f001 f984 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 80024cc:	f248 0320 	movw	r3, #32800	@ 0x8020
 80024d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d2:	2301      	movs	r3, #1
 80024d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	4619      	mov	r1, r3
 80024e4:	481a      	ldr	r0, [pc, #104]	@ (8002550 <MX_GPIO_Init+0x170>)
 80024e6:	f000 ffd9 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80024ea:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80024ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f0:	2301      	movs	r3, #1
 80024f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fc:	f107 031c 	add.w	r3, r7, #28
 8002500:	4619      	mov	r1, r3
 8002502:	4814      	ldr	r0, [pc, #80]	@ (8002554 <MX_GPIO_Init+0x174>)
 8002504:	f000 ffca 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002508:	2340      	movs	r3, #64	@ 0x40
 800250a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250c:	2301      	movs	r3, #1
 800250e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	4619      	mov	r1, r3
 800251e:	480e      	ldr	r0, [pc, #56]	@ (8002558 <MX_GPIO_Init+0x178>)
 8002520:	f000 ffbc 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002524:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252a:	2301      	movs	r3, #1
 800252c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002532:	2300      	movs	r3, #0
 8002534:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	4807      	ldr	r0, [pc, #28]	@ (800255c <MX_GPIO_Init+0x17c>)
 800253e:	f000 ffad 	bl	800349c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002542:	bf00      	nop
 8002544:	3730      	adds	r7, #48	@ 0x30
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40020000 	.word	0x40020000
 8002554:	40020800 	.word	0x40020800
 8002558:	40020c00 	.word	0x40020c00
 800255c:	40020400 	.word	0x40020400

08002560 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
 8002574:	615a      	str	r2, [r3, #20]
 8002576:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002578:	4b27      	ldr	r3, [pc, #156]	@ (8002618 <MX_FSMC_Init+0xb8>)
 800257a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800257e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002580:	4b25      	ldr	r3, [pc, #148]	@ (8002618 <MX_FSMC_Init+0xb8>)
 8002582:	4a26      	ldr	r2, [pc, #152]	@ (800261c <MX_FSMC_Init+0xbc>)
 8002584:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002586:	4b24      	ldr	r3, [pc, #144]	@ (8002618 <MX_FSMC_Init+0xb8>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 800258c:	4b22      	ldr	r3, [pc, #136]	@ (8002618 <MX_FSMC_Init+0xb8>)
 800258e:	2202      	movs	r2, #2
 8002590:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_PSRAM;
 8002592:	4b21      	ldr	r3, [pc, #132]	@ (8002618 <MX_FSMC_Init+0xb8>)
 8002594:	2204      	movs	r2, #4
 8002596:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002598:	4b1f      	ldr	r3, [pc, #124]	@ (8002618 <MX_FSMC_Init+0xb8>)
 800259a:	2210      	movs	r2, #16
 800259c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800259e:	4b1e      	ldr	r3, [pc, #120]	@ (8002618 <MX_FSMC_Init+0xb8>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80025a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <MX_FSMC_Init+0xb8>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80025aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <MX_FSMC_Init+0xb8>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80025b0:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <MX_FSMC_Init+0xb8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80025b6:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <MX_FSMC_Init+0xb8>)
 80025b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80025be:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <MX_FSMC_Init+0xb8>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80025c4:	4b14      	ldr	r3, [pc, #80]	@ (8002618 <MX_FSMC_Init+0xb8>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80025ca:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <MX_FSMC_Init+0xb8>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80025d0:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <MX_FSMC_Init+0xb8>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80025d6:	4b10      	ldr	r3, [pc, #64]	@ (8002618 <MX_FSMC_Init+0xb8>)
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80025dc:	230f      	movs	r3, #15
 80025de:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80025e0:	230f      	movs	r3, #15
 80025e2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80025e4:	23ff      	movs	r3, #255	@ 0xff
 80025e6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80025e8:	230f      	movs	r3, #15
 80025ea:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80025ec:	2310      	movs	r3, #16
 80025ee:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80025f0:	2311      	movs	r3, #17
 80025f2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2200      	movs	r2, #0
 80025fc:	4619      	mov	r1, r3
 80025fe:	4806      	ldr	r0, [pc, #24]	@ (8002618 <MX_FSMC_Init+0xb8>)
 8002600:	f002 ffec 	bl	80055dc <HAL_SRAM_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800260a:	f000 f809 	bl	8002620 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800260e:	bf00      	nop
 8002610:	3720      	adds	r7, #32
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000388 	.word	0x20000388
 800261c:	a0000104 	.word	0xa0000104

08002620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <Error_Handler+0x4>

08002628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <HAL_MspInit+0x4c>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	4a0f      	ldr	r2, [pc, #60]	@ (8002674 <HAL_MspInit+0x4c>)
 8002638:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800263c:	6453      	str	r3, [r2, #68]	@ 0x44
 800263e:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <HAL_MspInit+0x4c>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_MspInit+0x4c>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	4a08      	ldr	r2, [pc, #32]	@ (8002674 <HAL_MspInit+0x4c>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002658:	6413      	str	r3, [r2, #64]	@ 0x40
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_MspInit+0x4c>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800

08002678 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	@ 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a17      	ldr	r2, [pc, #92]	@ (80026f4 <HAL_DAC_MspInit+0x7c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d127      	bne.n	80026ea <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <HAL_DAC_MspInit+0x80>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	4a15      	ldr	r2, [pc, #84]	@ (80026f8 <HAL_DAC_MspInit+0x80>)
 80026a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80026a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026aa:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <HAL_DAC_MspInit+0x80>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <HAL_DAC_MspInit+0x80>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	4a0e      	ldr	r2, [pc, #56]	@ (80026f8 <HAL_DAC_MspInit+0x80>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c6:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <HAL_DAC_MspInit+0x80>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026d2:	2310      	movs	r3, #16
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026d6:	2303      	movs	r3, #3
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	4805      	ldr	r0, [pc, #20]	@ (80026fc <HAL_DAC_MspInit+0x84>)
 80026e6:	f000 fed9 	bl	800349c <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	@ 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40007400 	.word	0x40007400
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020000 	.word	0x40020000

08002700 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0e      	ldr	r2, [pc, #56]	@ (8002748 <HAL_TIM_Base_MspInit+0x48>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d115      	bne.n	800273e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <HAL_TIM_Base_MspInit+0x4c>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	4a0c      	ldr	r2, [pc, #48]	@ (800274c <HAL_TIM_Base_MspInit+0x4c>)
 800271c:	f043 0302 	orr.w	r3, r3, #2
 8002720:	6413      	str	r3, [r2, #64]	@ 0x40
 8002722:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <HAL_TIM_Base_MspInit+0x4c>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	201d      	movs	r0, #29
 8002734:	f000 fb73 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002738:	201d      	movs	r0, #29
 800273a:	f000 fb8c 	bl	8002e56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40000400 	.word	0x40000400
 800274c:	40023800 	.word	0x40023800

08002750 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	@ 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1d      	ldr	r2, [pc, #116]	@ (80027e4 <HAL_UART_MspInit+0x94>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d133      	bne.n	80027da <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	4b1c      	ldr	r3, [pc, #112]	@ (80027e8 <HAL_UART_MspInit+0x98>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	4a1b      	ldr	r2, [pc, #108]	@ (80027e8 <HAL_UART_MspInit+0x98>)
 800277c:	f043 0310 	orr.w	r3, r3, #16
 8002780:	6453      	str	r3, [r2, #68]	@ 0x44
 8002782:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <HAL_UART_MspInit+0x98>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <HAL_UART_MspInit+0x98>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	4a14      	ldr	r2, [pc, #80]	@ (80027e8 <HAL_UART_MspInit+0x98>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	6313      	str	r3, [r2, #48]	@ 0x30
 800279e:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <HAL_UART_MspInit+0x98>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027aa:	23c0      	movs	r3, #192	@ 0xc0
 80027ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b6:	2303      	movs	r3, #3
 80027b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ba:	2307      	movs	r3, #7
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4619      	mov	r1, r3
 80027c4:	4809      	ldr	r0, [pc, #36]	@ (80027ec <HAL_UART_MspInit+0x9c>)
 80027c6:	f000 fe69 	bl	800349c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	2025      	movs	r0, #37	@ 0x25
 80027d0:	f000 fb25 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027d4:	2025      	movs	r0, #37	@ 0x25
 80027d6:	f000 fb3e 	bl	8002e56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80027da:	bf00      	nop
 80027dc:	3728      	adds	r7, #40	@ 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40011000 	.word	0x40011000
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020400 	.word	0x40020400

080027f0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002804:	4b1c      	ldr	r3, [pc, #112]	@ (8002878 <HAL_FSMC_MspInit+0x88>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d131      	bne.n	8002870 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800280c:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <HAL_FSMC_MspInit+0x88>)
 800280e:	2201      	movs	r2, #1
 8002810:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	4b19      	ldr	r3, [pc, #100]	@ (800287c <HAL_FSMC_MspInit+0x8c>)
 8002818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281a:	4a18      	ldr	r2, [pc, #96]	@ (800287c <HAL_FSMC_MspInit+0x8c>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6393      	str	r3, [r2, #56]	@ 0x38
 8002822:	4b16      	ldr	r3, [pc, #88]	@ (800287c <HAL_FSMC_MspInit+0x8c>)
 8002824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_DA3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800282e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002832:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002840:	230c      	movs	r3, #12
 8002842:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	4619      	mov	r1, r3
 8002848:	480d      	ldr	r0, [pc, #52]	@ (8002880 <HAL_FSMC_MspInit+0x90>)
 800284a:	f000 fe27 	bl	800349c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800284e:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 8002852:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002854:	2302      	movs	r3, #2
 8002856:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285c:	2303      	movs	r3, #3
 800285e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002860:	230c      	movs	r3, #12
 8002862:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	4619      	mov	r1, r3
 8002868:	4806      	ldr	r0, [pc, #24]	@ (8002884 <HAL_FSMC_MspInit+0x94>)
 800286a:	f000 fe17 	bl	800349c <HAL_GPIO_Init>
 800286e:	e000      	b.n	8002872 <HAL_FSMC_MspInit+0x82>
    return;
 8002870:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	2001cd64 	.word	0x2001cd64
 800287c:	40023800 	.word	0x40023800
 8002880:	40021000 	.word	0x40021000
 8002884:	40020c00 	.word	0x40020c00

08002888 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002890:	f7ff ffae 	bl	80027f0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <NMI_Handler+0x4>

080028a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <HardFault_Handler+0x4>

080028ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <MemManage_Handler+0x4>

080028b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <BusFault_Handler+0x4>

080028bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <UsageFault_Handler+0x4>

080028c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f2:	f000 f975 	bl	8002be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002900:	4802      	ldr	r0, [pc, #8]	@ (800290c <TIM3_IRQHandler+0x10>)
 8002902:	f002 ff6b 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200002f8 	.word	0x200002f8

08002910 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002914:	4802      	ldr	r0, [pc, #8]	@ (8002920 <USART1_IRQHandler+0x10>)
 8002916:	f003 fb6b 	bl	8005ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000340 	.word	0x20000340

08002924 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <OTG_FS_IRQHandler+0x10>)
 800292a:	f001 f8b0 	bl	8003a8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	2001e374 	.word	0x2001e374

08002938 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return 1;
 800293c:	2301      	movs	r3, #1
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <_kill>:

int _kill(int pid, int sig)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002952:	f00a fd21 	bl	800d398 <__errno>
 8002956:	4603      	mov	r3, r0
 8002958:	2216      	movs	r2, #22
 800295a:	601a      	str	r2, [r3, #0]
  return -1;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <_exit>:

void _exit (int status)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002970:	f04f 31ff 	mov.w	r1, #4294967295
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ffe7 	bl	8002948 <_kill>
  while (1) {}    /* Make sure we hang here */
 800297a:	bf00      	nop
 800297c:	e7fd      	b.n	800297a <_exit+0x12>

0800297e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e00a      	b.n	80029a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002990:	f3af 8000 	nop.w
 8002994:	4601      	mov	r1, r0
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	60ba      	str	r2, [r7, #8]
 800299c:	b2ca      	uxtb	r2, r1
 800299e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3301      	adds	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	dbf0      	blt.n	8002990 <_read+0x12>
  }

  return len;
 80029ae:	687b      	ldr	r3, [r7, #4]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e009      	b.n	80029de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	60ba      	str	r2, [r7, #8]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3301      	adds	r3, #1
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	dbf1      	blt.n	80029ca <_write+0x12>
  }
  return len;
 80029e6:	687b      	ldr	r3, [r7, #4]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_close>:

int _close(int file)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a18:	605a      	str	r2, [r3, #4]
  return 0;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_isatty>:

int _isatty(int file)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a30:	2301      	movs	r3, #1
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a60:	4a14      	ldr	r2, [pc, #80]	@ (8002ab4 <_sbrk+0x5c>)
 8002a62:	4b15      	ldr	r3, [pc, #84]	@ (8002ab8 <_sbrk+0x60>)
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a6c:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <_sbrk+0x64>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a74:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <_sbrk+0x64>)
 8002a76:	4a12      	ldr	r2, [pc, #72]	@ (8002ac0 <_sbrk+0x68>)
 8002a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a7a:	4b10      	ldr	r3, [pc, #64]	@ (8002abc <_sbrk+0x64>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d207      	bcs.n	8002a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a88:	f00a fc86 	bl	800d398 <__errno>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	220c      	movs	r2, #12
 8002a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	e009      	b.n	8002aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a98:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <_sbrk+0x64>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a9e:	4b07      	ldr	r3, [pc, #28]	@ (8002abc <_sbrk+0x64>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4a05      	ldr	r2, [pc, #20]	@ (8002abc <_sbrk+0x64>)
 8002aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20020000 	.word	0x20020000
 8002ab8:	00000400 	.word	0x00000400
 8002abc:	2001cd68 	.word	0x2001cd68
 8002ac0:	2001ebc8 	.word	0x2001ebc8

08002ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ac8:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <SystemInit+0x20>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ace:	4a05      	ldr	r2, [pc, #20]	@ (8002ae4 <SystemInit+0x20>)
 8002ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ae8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002aec:	f7ff ffea 	bl	8002ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002af0:	480c      	ldr	r0, [pc, #48]	@ (8002b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002af2:	490d      	ldr	r1, [pc, #52]	@ (8002b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002af4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af8:	e002      	b.n	8002b00 <LoopCopyDataInit>

08002afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002afe:	3304      	adds	r3, #4

08002b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b04:	d3f9      	bcc.n	8002afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b06:	4a0a      	ldr	r2, [pc, #40]	@ (8002b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b08:	4c0a      	ldr	r4, [pc, #40]	@ (8002b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b0c:	e001      	b.n	8002b12 <LoopFillZerobss>

08002b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b10:	3204      	adds	r2, #4

08002b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b14:	d3fb      	bcc.n	8002b0e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002b16:	f00a fc45 	bl	800d3a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b1a:	f7ff fadd 	bl	80020d8 <main>
  bx  lr    
 8002b1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b28:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8002b2c:	08015128 	.word	0x08015128
  ldr r2, =_sbss
 8002b30:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8002b34:	2001ebc4 	.word	0x2001ebc4

08002b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b38:	e7fe      	b.n	8002b38 <ADC_IRQHandler>
	...

08002b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b40:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <HAL_Init+0x40>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0d      	ldr	r2, [pc, #52]	@ (8002b7c <HAL_Init+0x40>)
 8002b46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_Init+0x40>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0a      	ldr	r2, [pc, #40]	@ (8002b7c <HAL_Init+0x40>)
 8002b52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b58:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <HAL_Init+0x40>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a07      	ldr	r2, [pc, #28]	@ (8002b7c <HAL_Init+0x40>)
 8002b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b64:	2003      	movs	r0, #3
 8002b66:	f000 f94f 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b6a:	200f      	movs	r0, #15
 8002b6c:	f000 f808 	bl	8002b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b70:	f7ff fd5a 	bl	8002628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023c00 	.word	0x40023c00

08002b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b88:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <HAL_InitTick+0x54>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_InitTick+0x58>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f967 	bl	8002e72 <HAL_SYSTICK_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00e      	b.n	8002bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b0f      	cmp	r3, #15
 8002bb2:	d80a      	bhi.n	8002bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	f000 f92f 	bl	8002e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc0:	4a06      	ldr	r2, [pc, #24]	@ (8002bdc <HAL_InitTick+0x5c>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000004 	.word	0x20000004
 8002bd8:	2000000c 	.word	0x2000000c
 8002bdc:	20000008 	.word	0x20000008

08002be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be4:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <HAL_IncTick+0x20>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_IncTick+0x24>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	4a04      	ldr	r2, [pc, #16]	@ (8002c04 <HAL_IncTick+0x24>)
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	2000000c 	.word	0x2000000c
 8002c04:	2001cd6c 	.word	0x2001cd6c

08002c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	@ (8002c1c <HAL_GetTick+0x14>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	2001cd6c 	.word	0x2001cd6c

08002c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff ffee 	bl	8002c08 <HAL_GetTick>
 8002c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c38:	d005      	beq.n	8002c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <HAL_Delay+0x44>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c46:	bf00      	nop
 8002c48:	f7ff ffde 	bl	8002c08 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d8f7      	bhi.n	8002c48 <HAL_Delay+0x28>
  {
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	2000000c 	.word	0x2000000c

08002c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c78:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c84:	4013      	ands	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9a:	4a04      	ldr	r2, [pc, #16]	@ (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	60d3      	str	r3, [r2, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb4:	4b04      	ldr	r3, [pc, #16]	@ (8002cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	f003 0307 	and.w	r3, r3, #7
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db0b      	blt.n	8002cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	4907      	ldr	r1, [pc, #28]	@ (8002d04 <__NVIC_EnableIRQ+0x38>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2001      	movs	r0, #1
 8002cee:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db0a      	blt.n	8002d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	490c      	ldr	r1, [pc, #48]	@ (8002d54 <__NVIC_SetPriority+0x4c>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d30:	e00a      	b.n	8002d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4908      	ldr	r1, [pc, #32]	@ (8002d58 <__NVIC_SetPriority+0x50>)
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3b04      	subs	r3, #4
 8002d40:	0112      	lsls	r2, r2, #4
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	@ 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f1c3 0307 	rsb	r3, r3, #7
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	bf28      	it	cs
 8002d7a:	2304      	movcs	r3, #4
 8002d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d902      	bls.n	8002d8c <NVIC_EncodePriority+0x30>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3b03      	subs	r3, #3
 8002d8a:	e000      	b.n	8002d8e <NVIC_EncodePriority+0x32>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da4:	f04f 31ff 	mov.w	r1, #4294967295
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43d9      	mvns	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	4313      	orrs	r3, r2
         );
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	@ 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd4:	d301      	bcc.n	8002dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00f      	b.n	8002dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dda:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <SysTick_Config+0x40>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de2:	210f      	movs	r1, #15
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f7ff ff8e 	bl	8002d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <SysTick_Config+0x40>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df2:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <SysTick_Config+0x40>)
 8002df4:	2207      	movs	r2, #7
 8002df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	e000e010 	.word	0xe000e010

08002e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff29 	bl	8002c68 <__NVIC_SetPriorityGrouping>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e30:	f7ff ff3e 	bl	8002cb0 <__NVIC_GetPriorityGrouping>
 8002e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f7ff ff8e 	bl	8002d5c <NVIC_EncodePriority>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff5d 	bl	8002d08 <__NVIC_SetPriority>
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff31 	bl	8002ccc <__NVIC_EnableIRQ>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ffa2 	bl	8002dc4 <SysTick_Config>
 8002e80:	4603      	mov	r3, r0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e014      	b.n	8002ec6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	791b      	ldrb	r3, [r3, #4]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d105      	bne.n	8002eb2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fbe3 	bl	8002678 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b089      	sub	sp, #36	@ 0x24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_DAC_ConfigChannel+0x1c>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e042      	b.n	8002f74 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	795b      	ldrb	r3, [r3, #5]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_DAC_ConfigChannel+0x2c>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e03c      	b.n	8002f74 <HAL_DAC_ConfigChannel+0xa6>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2202      	movs	r2, #2
 8002f04:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6819      	ldr	r1, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	22c0      	movs	r2, #192	@ 0xc0
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	400a      	ands	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002f72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3724      	adds	r7, #36	@ 0x24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f8e:	f7ff fe3b 	bl	8002c08 <HAL_GetTick>
 8002f92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d008      	beq.n	8002fb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2280      	movs	r2, #128	@ 0x80
 8002fa4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e052      	b.n	8003058 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0216 	bic.w	r2, r2, #22
 8002fc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <HAL_DMA_Abort+0x62>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0208 	bic.w	r2, r2, #8
 8002ff0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003002:	e013      	b.n	800302c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003004:	f7ff fe00 	bl	8002c08 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b05      	cmp	r3, #5
 8003010:	d90c      	bls.n	800302c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2203      	movs	r2, #3
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e015      	b.n	8003058 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e4      	bne.n	8003004 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303e:	223f      	movs	r2, #63	@ 0x3f
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d004      	beq.n	800307e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2280      	movs	r2, #128	@ 0x80
 8003078:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e00c      	b.n	8003098 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2205      	movs	r2, #5
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80030b2:	4b23      	ldr	r3, [pc, #140]	@ (8003140 <HAL_FLASH_Program+0x9c>)
 80030b4:	7e1b      	ldrb	r3, [r3, #24]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_FLASH_Program+0x1a>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e03b      	b.n	8003136 <HAL_FLASH_Program+0x92>
 80030be:	4b20      	ldr	r3, [pc, #128]	@ (8003140 <HAL_FLASH_Program+0x9c>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80030c8:	f000 f870 	bl	80031ac <FLASH_WaitForLastOperation>
 80030cc:	4603      	mov	r3, r0
 80030ce:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d12b      	bne.n	800312e <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80030dc:	783b      	ldrb	r3, [r7, #0]
 80030de:	4619      	mov	r1, r3
 80030e0:	68b8      	ldr	r0, [r7, #8]
 80030e2:	f000 f91b 	bl	800331c <FLASH_Program_Byte>
 80030e6:	e016      	b.n	8003116 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d105      	bne.n	80030fa <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80030ee:	883b      	ldrh	r3, [r7, #0]
 80030f0:	4619      	mov	r1, r3
 80030f2:	68b8      	ldr	r0, [r7, #8]
 80030f4:	f000 f8ee 	bl	80032d4 <FLASH_Program_HalfWord>
 80030f8:	e00d      	b.n	8003116 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d105      	bne.n	800310c <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4619      	mov	r1, r3
 8003104:	68b8      	ldr	r0, [r7, #8]
 8003106:	f000 f8c3 	bl	8003290 <FLASH_Program_Word>
 800310a:	e004      	b.n	8003116 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800310c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003110:	68b8      	ldr	r0, [r7, #8]
 8003112:	f000 f88b 	bl	800322c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003116:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800311a:	f000 f847 	bl	80031ac <FLASH_WaitForLastOperation>
 800311e:	4603      	mov	r3, r0
 8003120:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003122:	4b08      	ldr	r3, [pc, #32]	@ (8003144 <HAL_FLASH_Program+0xa0>)
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	4a07      	ldr	r2, [pc, #28]	@ (8003144 <HAL_FLASH_Program+0xa0>)
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800312e:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <HAL_FLASH_Program+0x9c>)
 8003130:	2200      	movs	r2, #0
 8003132:	761a      	strb	r2, [r3, #24]

  return status;
 8003134:	7dfb      	ldrb	r3, [r7, #23]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	2001cd70 	.word	0x2001cd70
 8003144:	40023c00 	.word	0x40023c00

08003148 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003152:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_FLASH_Unlock+0x38>)
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	da0b      	bge.n	8003172 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800315a:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <HAL_FLASH_Unlock+0x38>)
 800315c:	4a09      	ldr	r2, [pc, #36]	@ (8003184 <HAL_FLASH_Unlock+0x3c>)
 800315e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003160:	4b07      	ldr	r3, [pc, #28]	@ (8003180 <HAL_FLASH_Unlock+0x38>)
 8003162:	4a09      	ldr	r2, [pc, #36]	@ (8003188 <HAL_FLASH_Unlock+0x40>)
 8003164:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003166:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_FLASH_Unlock+0x38>)
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	da01      	bge.n	8003172 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003172:	79fb      	ldrb	r3, [r7, #7]
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40023c00 	.word	0x40023c00
 8003184:	45670123 	.word	0x45670123
 8003188:	cdef89ab 	.word	0xcdef89ab

0800318c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003190:	4b05      	ldr	r3, [pc, #20]	@ (80031a8 <HAL_FLASH_Lock+0x1c>)
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	4a04      	ldr	r2, [pc, #16]	@ (80031a8 <HAL_FLASH_Lock+0x1c>)
 8003196:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800319a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40023c00 	.word	0x40023c00

080031ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80031b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003224 <FLASH_WaitForLastOperation+0x78>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80031be:	f7ff fd23 	bl	8002c08 <HAL_GetTick>
 80031c2:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80031c4:	e010      	b.n	80031e8 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d00c      	beq.n	80031e8 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <FLASH_WaitForLastOperation+0x38>
 80031d4:	f7ff fd18 	bl	8002c08 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d201      	bcs.n	80031e8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e019      	b.n	800321c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80031e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003228 <FLASH_WaitForLastOperation+0x7c>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e8      	bne.n	80031c6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80031f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <FLASH_WaitForLastOperation+0x7c>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003200:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <FLASH_WaitForLastOperation+0x7c>)
 8003202:	2201      	movs	r2, #1
 8003204:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003206:	4b08      	ldr	r3, [pc, #32]	@ (8003228 <FLASH_WaitForLastOperation+0x7c>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003212:	f000 f8a5 	bl	8003360 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800321a:	2300      	movs	r3, #0

}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	2001cd70 	.word	0x2001cd70
 8003228:	40023c00 	.word	0x40023c00

0800322c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003238:	4b14      	ldr	r3, [pc, #80]	@ (800328c <FLASH_Program_DoubleWord+0x60>)
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	4a13      	ldr	r2, [pc, #76]	@ (800328c <FLASH_Program_DoubleWord+0x60>)
 800323e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003242:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003244:	4b11      	ldr	r3, [pc, #68]	@ (800328c <FLASH_Program_DoubleWord+0x60>)
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	4a10      	ldr	r2, [pc, #64]	@ (800328c <FLASH_Program_DoubleWord+0x60>)
 800324a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800324e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003250:	4b0e      	ldr	r3, [pc, #56]	@ (800328c <FLASH_Program_DoubleWord+0x60>)
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	4a0d      	ldr	r2, [pc, #52]	@ (800328c <FLASH_Program_DoubleWord+0x60>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003262:	f3bf 8f6f 	isb	sy
}
 8003266:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8003268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	000a      	movs	r2, r1
 8003276:	2300      	movs	r3, #0
 8003278:	68f9      	ldr	r1, [r7, #12]
 800327a:	3104      	adds	r1, #4
 800327c:	4613      	mov	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40023c00 	.word	0x40023c00

08003290 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800329a:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <FLASH_Program_Word+0x40>)
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	4a0c      	ldr	r2, [pc, #48]	@ (80032d0 <FLASH_Program_Word+0x40>)
 80032a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80032a6:	4b0a      	ldr	r3, [pc, #40]	@ (80032d0 <FLASH_Program_Word+0x40>)
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	4a09      	ldr	r2, [pc, #36]	@ (80032d0 <FLASH_Program_Word+0x40>)
 80032ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80032b2:	4b07      	ldr	r3, [pc, #28]	@ (80032d0 <FLASH_Program_Word+0x40>)
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	4a06      	ldr	r2, [pc, #24]	@ (80032d0 <FLASH_Program_Word+0x40>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	601a      	str	r2, [r3, #0]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40023c00 	.word	0x40023c00

080032d4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80032e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003318 <FLASH_Program_HalfWord+0x44>)
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003318 <FLASH_Program_HalfWord+0x44>)
 80032e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80032ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003318 <FLASH_Program_HalfWord+0x44>)
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	4a09      	ldr	r2, [pc, #36]	@ (8003318 <FLASH_Program_HalfWord+0x44>)
 80032f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80032f8:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <FLASH_Program_HalfWord+0x44>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	4a06      	ldr	r2, [pc, #24]	@ (8003318 <FLASH_Program_HalfWord+0x44>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	801a      	strh	r2, [r3, #0]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40023c00 	.word	0x40023c00

0800331c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003328:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <FLASH_Program_Byte+0x40>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	4a0b      	ldr	r2, [pc, #44]	@ (800335c <FLASH_Program_Byte+0x40>)
 800332e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003332:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003334:	4b09      	ldr	r3, [pc, #36]	@ (800335c <FLASH_Program_Byte+0x40>)
 8003336:	4a09      	ldr	r2, [pc, #36]	@ (800335c <FLASH_Program_Byte+0x40>)
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800333c:	4b07      	ldr	r3, [pc, #28]	@ (800335c <FLASH_Program_Byte+0x40>)
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	4a06      	ldr	r2, [pc, #24]	@ (800335c <FLASH_Program_Byte+0x40>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	701a      	strb	r2, [r3, #0]
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40023c00 	.word	0x40023c00

08003360 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003364:	4b27      	ldr	r3, [pc, #156]	@ (8003404 <FLASH_SetErrorCode+0xa4>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003370:	4b25      	ldr	r3, [pc, #148]	@ (8003408 <FLASH_SetErrorCode+0xa8>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f043 0310 	orr.w	r3, r3, #16
 8003378:	4a23      	ldr	r2, [pc, #140]	@ (8003408 <FLASH_SetErrorCode+0xa8>)
 800337a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800337c:	4b21      	ldr	r3, [pc, #132]	@ (8003404 <FLASH_SetErrorCode+0xa4>)
 800337e:	2210      	movs	r2, #16
 8003380:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003382:	4b20      	ldr	r3, [pc, #128]	@ (8003404 <FLASH_SetErrorCode+0xa4>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800338e:	4b1e      	ldr	r3, [pc, #120]	@ (8003408 <FLASH_SetErrorCode+0xa8>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f043 0308 	orr.w	r3, r3, #8
 8003396:	4a1c      	ldr	r2, [pc, #112]	@ (8003408 <FLASH_SetErrorCode+0xa8>)
 8003398:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800339a:	4b1a      	ldr	r3, [pc, #104]	@ (8003404 <FLASH_SetErrorCode+0xa4>)
 800339c:	2220      	movs	r2, #32
 800339e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80033a0:	4b18      	ldr	r3, [pc, #96]	@ (8003404 <FLASH_SetErrorCode+0xa4>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80033ac:	4b16      	ldr	r3, [pc, #88]	@ (8003408 <FLASH_SetErrorCode+0xa8>)
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	f043 0304 	orr.w	r3, r3, #4
 80033b4:	4a14      	ldr	r2, [pc, #80]	@ (8003408 <FLASH_SetErrorCode+0xa8>)
 80033b6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80033b8:	4b12      	ldr	r3, [pc, #72]	@ (8003404 <FLASH_SetErrorCode+0xa4>)
 80033ba:	2240      	movs	r2, #64	@ 0x40
 80033bc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80033be:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <FLASH_SetErrorCode+0xa4>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80033ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003408 <FLASH_SetErrorCode+0xa8>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f043 0302 	orr.w	r3, r3, #2
 80033d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003408 <FLASH_SetErrorCode+0xa8>)
 80033d4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80033d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003404 <FLASH_SetErrorCode+0xa4>)
 80033d8:	2280      	movs	r2, #128	@ 0x80
 80033da:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80033dc:	4b09      	ldr	r3, [pc, #36]	@ (8003404 <FLASH_SetErrorCode+0xa4>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80033e8:	4b07      	ldr	r3, [pc, #28]	@ (8003408 <FLASH_SetErrorCode+0xa8>)
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	f043 0320 	orr.w	r3, r3, #32
 80033f0:	4a05      	ldr	r2, [pc, #20]	@ (8003408 <FLASH_SetErrorCode+0xa8>)
 80033f2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80033f4:	4b03      	ldr	r3, [pc, #12]	@ (8003404 <FLASH_SetErrorCode+0xa4>)
 80033f6:	2202      	movs	r2, #2
 80033f8:	60da      	str	r2, [r3, #12]
  }
}
 80033fa:	bf00      	nop
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	40023c00 	.word	0x40023c00
 8003408:	2001cd70 	.word	0x2001cd70

0800340c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d102      	bne.n	8003428 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	e010      	b.n	800344a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d103      	bne.n	8003436 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800342e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e009      	b.n	800344a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d103      	bne.n	8003444 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800343c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	e002      	b.n	800344a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003444:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003448:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800344a:	4b13      	ldr	r3, [pc, #76]	@ (8003498 <FLASH_Erase_Sector+0x8c>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	4a12      	ldr	r2, [pc, #72]	@ (8003498 <FLASH_Erase_Sector+0x8c>)
 8003450:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003454:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <FLASH_Erase_Sector+0x8c>)
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	490f      	ldr	r1, [pc, #60]	@ (8003498 <FLASH_Erase_Sector+0x8c>)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003462:	4b0d      	ldr	r3, [pc, #52]	@ (8003498 <FLASH_Erase_Sector+0x8c>)
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	4a0c      	ldr	r2, [pc, #48]	@ (8003498 <FLASH_Erase_Sector+0x8c>)
 8003468:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 800346c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <FLASH_Erase_Sector+0x8c>)
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4313      	orrs	r3, r2
 8003478:	4a07      	ldr	r2, [pc, #28]	@ (8003498 <FLASH_Erase_Sector+0x8c>)
 800347a:	f043 0302 	orr.w	r3, r3, #2
 800347e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <FLASH_Erase_Sector+0x8c>)
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	4a04      	ldr	r2, [pc, #16]	@ (8003498 <FLASH_Erase_Sector+0x8c>)
 8003486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348a:	6113      	str	r3, [r2, #16]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40023c00 	.word	0x40023c00

0800349c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	@ 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	e16b      	b.n	8003790 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034b8:	2201      	movs	r2, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	f040 815a 	bne.w	800378a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d005      	beq.n	80034ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d130      	bne.n	8003550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	2203      	movs	r2, #3
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4013      	ands	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003524:	2201      	movs	r2, #1
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 0201 	and.w	r2, r3, #1
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b03      	cmp	r3, #3
 800355a:	d017      	beq.n	800358c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2203      	movs	r2, #3
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d123      	bne.n	80035e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	08da      	lsrs	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3208      	adds	r2, #8
 80035a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	220f      	movs	r2, #15
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	08da      	lsrs	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3208      	adds	r2, #8
 80035da:	69b9      	ldr	r1, [r7, #24]
 80035dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0203 	and.w	r2, r3, #3
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 80b4 	beq.w	800378a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	4b60      	ldr	r3, [pc, #384]	@ (80037a8 <HAL_GPIO_Init+0x30c>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	4a5f      	ldr	r2, [pc, #380]	@ (80037a8 <HAL_GPIO_Init+0x30c>)
 800362c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003630:	6453      	str	r3, [r2, #68]	@ 0x44
 8003632:	4b5d      	ldr	r3, [pc, #372]	@ (80037a8 <HAL_GPIO_Init+0x30c>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800363e:	4a5b      	ldr	r2, [pc, #364]	@ (80037ac <HAL_GPIO_Init+0x310>)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	3302      	adds	r3, #2
 8003646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	220f      	movs	r2, #15
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a52      	ldr	r2, [pc, #328]	@ (80037b0 <HAL_GPIO_Init+0x314>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d02b      	beq.n	80036c2 <HAL_GPIO_Init+0x226>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a51      	ldr	r2, [pc, #324]	@ (80037b4 <HAL_GPIO_Init+0x318>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d025      	beq.n	80036be <HAL_GPIO_Init+0x222>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a50      	ldr	r2, [pc, #320]	@ (80037b8 <HAL_GPIO_Init+0x31c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01f      	beq.n	80036ba <HAL_GPIO_Init+0x21e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a4f      	ldr	r2, [pc, #316]	@ (80037bc <HAL_GPIO_Init+0x320>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d019      	beq.n	80036b6 <HAL_GPIO_Init+0x21a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4e      	ldr	r2, [pc, #312]	@ (80037c0 <HAL_GPIO_Init+0x324>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_GPIO_Init+0x216>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a4d      	ldr	r2, [pc, #308]	@ (80037c4 <HAL_GPIO_Init+0x328>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00d      	beq.n	80036ae <HAL_GPIO_Init+0x212>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4c      	ldr	r2, [pc, #304]	@ (80037c8 <HAL_GPIO_Init+0x32c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d007      	beq.n	80036aa <HAL_GPIO_Init+0x20e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4b      	ldr	r2, [pc, #300]	@ (80037cc <HAL_GPIO_Init+0x330>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_GPIO_Init+0x20a>
 80036a2:	2307      	movs	r3, #7
 80036a4:	e00e      	b.n	80036c4 <HAL_GPIO_Init+0x228>
 80036a6:	2308      	movs	r3, #8
 80036a8:	e00c      	b.n	80036c4 <HAL_GPIO_Init+0x228>
 80036aa:	2306      	movs	r3, #6
 80036ac:	e00a      	b.n	80036c4 <HAL_GPIO_Init+0x228>
 80036ae:	2305      	movs	r3, #5
 80036b0:	e008      	b.n	80036c4 <HAL_GPIO_Init+0x228>
 80036b2:	2304      	movs	r3, #4
 80036b4:	e006      	b.n	80036c4 <HAL_GPIO_Init+0x228>
 80036b6:	2303      	movs	r3, #3
 80036b8:	e004      	b.n	80036c4 <HAL_GPIO_Init+0x228>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e002      	b.n	80036c4 <HAL_GPIO_Init+0x228>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_GPIO_Init+0x228>
 80036c2:	2300      	movs	r3, #0
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	f002 0203 	and.w	r2, r2, #3
 80036ca:	0092      	lsls	r2, r2, #2
 80036cc:	4093      	lsls	r3, r2
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036d4:	4935      	ldr	r1, [pc, #212]	@ (80037ac <HAL_GPIO_Init+0x310>)
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	089b      	lsrs	r3, r3, #2
 80036da:	3302      	adds	r3, #2
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036e2:	4b3b      	ldr	r3, [pc, #236]	@ (80037d0 <HAL_GPIO_Init+0x334>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003706:	4a32      	ldr	r2, [pc, #200]	@ (80037d0 <HAL_GPIO_Init+0x334>)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800370c:	4b30      	ldr	r3, [pc, #192]	@ (80037d0 <HAL_GPIO_Init+0x334>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003730:	4a27      	ldr	r2, [pc, #156]	@ (80037d0 <HAL_GPIO_Init+0x334>)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003736:	4b26      	ldr	r3, [pc, #152]	@ (80037d0 <HAL_GPIO_Init+0x334>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800375a:	4a1d      	ldr	r2, [pc, #116]	@ (80037d0 <HAL_GPIO_Init+0x334>)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003760:	4b1b      	ldr	r3, [pc, #108]	@ (80037d0 <HAL_GPIO_Init+0x334>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003784:	4a12      	ldr	r2, [pc, #72]	@ (80037d0 <HAL_GPIO_Init+0x334>)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3301      	adds	r3, #1
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	2b0f      	cmp	r3, #15
 8003794:	f67f ae90 	bls.w	80034b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3724      	adds	r7, #36	@ 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40013800 	.word	0x40013800
 80037b0:	40020000 	.word	0x40020000
 80037b4:	40020400 	.word	0x40020400
 80037b8:	40020800 	.word	0x40020800
 80037bc:	40020c00 	.word	0x40020c00
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40021400 	.word	0x40021400
 80037c8:	40021800 	.word	0x40021800
 80037cc:	40021c00 	.word	0x40021c00
 80037d0:	40013c00 	.word	0x40013c00

080037d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	807b      	strh	r3, [r7, #2]
 80037e0:	4613      	mov	r3, r2
 80037e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e4:	787b      	ldrb	r3, [r7, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ea:	887a      	ldrh	r2, [r7, #2]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037f0:	e003      	b.n	80037fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037f2:	887b      	ldrh	r3, [r7, #2]
 80037f4:	041a      	lsls	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	619a      	str	r2, [r3, #24]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af02      	add	r7, sp, #8
 800380c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e101      	b.n	8003a1c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f007 f90e 	bl	800aa54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2203      	movs	r2, #3
 800383c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003846:	d102      	bne.n	800384e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f003 fc95 	bl	8007182 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	7c1a      	ldrb	r2, [r3, #16]
 8003860:	f88d 2000 	strb.w	r2, [sp]
 8003864:	3304      	adds	r3, #4
 8003866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003868:	f003 fb74 	bl	8006f54 <USB_CoreInit>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0ce      	b.n	8003a1c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f003 fc8d 	bl	80071a4 <USB_SetCurrentMode>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0bf      	b.n	8003a1c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800389c:	2300      	movs	r3, #0
 800389e:	73fb      	strb	r3, [r7, #15]
 80038a0:	e04a      	b.n	8003938 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038a2:	7bfa      	ldrb	r2, [r7, #15]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	3315      	adds	r3, #21
 80038b2:	2201      	movs	r2, #1
 80038b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038b6:	7bfa      	ldrb	r2, [r7, #15]
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	3314      	adds	r3, #20
 80038c6:	7bfa      	ldrb	r2, [r7, #15]
 80038c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	b298      	uxth	r0, r3
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	332e      	adds	r3, #46	@ 0x2e
 80038de:	4602      	mov	r2, r0
 80038e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038e2:	7bfa      	ldrb	r2, [r7, #15]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	3318      	adds	r3, #24
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038f6:	7bfa      	ldrb	r2, [r7, #15]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	331c      	adds	r3, #28
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	3320      	adds	r3, #32
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	3324      	adds	r3, #36	@ 0x24
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	3301      	adds	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	791b      	ldrb	r3, [r3, #4]
 800393c:	7bfa      	ldrb	r2, [r7, #15]
 800393e:	429a      	cmp	r2, r3
 8003940:	d3af      	bcc.n	80038a2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
 8003946:	e044      	b.n	80039d2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800395e:	7bfa      	ldrb	r2, [r7, #15]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003970:	7bfa      	ldrb	r2, [r7, #15]
 8003972:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800398a:	7bfa      	ldrb	r2, [r7, #15]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039b6:	7bfa      	ldrb	r2, [r7, #15]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	3301      	adds	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	791b      	ldrb	r3, [r3, #4]
 80039d6:	7bfa      	ldrb	r2, [r7, #15]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d3b5      	bcc.n	8003948 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7c1a      	ldrb	r2, [r3, #16]
 80039e4:	f88d 2000 	strb.w	r2, [sp]
 80039e8:	3304      	adds	r3, #4
 80039ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ec:	f003 fc26 	bl	800723c <USB_DevInit>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e00c      	b.n	8003a1c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 fc70 	bl	80082fa <USB_DevDisconnect>

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_PCD_Start+0x1c>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e022      	b.n	8003a86 <HAL_PCD_Start+0x62>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d009      	beq.n	8003a68 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f003 fb77 	bl	8007160 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f004 fc1e 	bl	80082b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a8e:	b590      	push	{r4, r7, lr}
 8003a90:	b08d      	sub	sp, #52	@ 0x34
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f004 fcdc 	bl	8008462 <USB_GetMode>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f040 848c 	bne.w	80043ca <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f004 fc40 	bl	800833c <USB_ReadInterrupts>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8482 	beq.w	80043c8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f004 fc2d 	bl	800833c <USB_ReadInterrupts>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d107      	bne.n	8003afc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f002 0202 	and.w	r2, r2, #2
 8003afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f004 fc1b 	bl	800833c <USB_ReadInterrupts>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d161      	bne.n	8003bd4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0210 	bic.w	r2, r2, #16
 8003b1e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f003 020f 	and.w	r2, r3, #15
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b4a:	d124      	bne.n	8003b96 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d035      	beq.n	8003bc4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	6a38      	ldr	r0, [r7, #32]
 8003b6c:	f004 fa52 	bl	8008014 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b7c:	441a      	add	r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b8e:	441a      	add	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	615a      	str	r2, [r3, #20]
 8003b94:	e016      	b.n	8003bc4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b9c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ba0:	d110      	bne.n	8003bc4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ba8:	2208      	movs	r2, #8
 8003baa:	4619      	mov	r1, r3
 8003bac:	6a38      	ldr	r0, [r7, #32]
 8003bae:	f004 fa31 	bl	8008014 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bbe:	441a      	add	r2, r3
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0210 	orr.w	r2, r2, #16
 8003bd2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f004 fbaf 	bl	800833c <USB_ReadInterrupts>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003be4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003be8:	f040 80a7 	bne.w	8003d3a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f004 fbb4 	bl	8008362 <USB_ReadDevAllOutEpInterrupt>
 8003bfa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003bfc:	e099      	b.n	8003d32 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 808e 	beq.w	8003d26 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 fbd8 	bl	80083ca <USB_ReadDevOutEPInterrupt>
 8003c1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00c      	beq.n	8003c40 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c32:	461a      	mov	r2, r3
 8003c34:	2301      	movs	r3, #1
 8003c36:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fea4 	bl	8004988 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00c      	beq.n	8003c64 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c56:	461a      	mov	r2, r3
 8003c58:	2308      	movs	r3, #8
 8003c5a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 ff7a 	bl	8004b58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2310      	movs	r3, #16
 8003c7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d030      	beq.n	8003cec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c92:	2b80      	cmp	r3, #128	@ 0x80
 8003c94:	d109      	bne.n	8003caa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ca4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ca8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	4413      	add	r3, r2
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	78db      	ldrb	r3, [r3, #3]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d108      	bne.n	8003cda <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f006 ffc3 	bl	800ac60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2302      	movs	r3, #2
 8003cea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d02:	461a      	mov	r2, r3
 8003d04:	2320      	movs	r3, #32
 8003d06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d24:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	3301      	adds	r3, #1
 8003d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2e:	085b      	lsrs	r3, r3, #1
 8003d30:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f47f af62 	bne.w	8003bfe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f004 fafc 	bl	800833c <USB_ReadInterrupts>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d4e:	f040 80db 	bne.w	8003f08 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f004 fb1d 	bl	8008396 <USB_ReadDevAllInEpInterrupt>
 8003d5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003d62:	e0cd      	b.n	8003f00 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80c2 	beq.w	8003ef4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	4611      	mov	r1, r2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f004 fb43 	bl	8008406 <USB_ReadDevInEPInterrupt>
 8003d80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d057      	beq.n	8003e3c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	2201      	movs	r2, #1
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003da0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	69f9      	ldr	r1, [r7, #28]
 8003da8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dac:	4013      	ands	r3, r2
 8003dae:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	799b      	ldrb	r3, [r3, #6]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d132      	bne.n	8003e30 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3320      	adds	r3, #32
 8003dda:	6819      	ldr	r1, [r3, #0]
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4403      	add	r3, r0
 8003dea:	331c      	adds	r3, #28
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4419      	add	r1, r3
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4403      	add	r3, r0
 8003dfe:	3320      	adds	r3, #32
 8003e00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d113      	bne.n	8003e30 <HAL_PCD_IRQHandler+0x3a2>
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	3324      	adds	r3, #36	@ 0x24
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d108      	bne.n	8003e30 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	f004 fb4a 	bl	80084c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f006 fe8d 	bl	800ab56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e52:	461a      	mov	r2, r3
 8003e54:	2308      	movs	r3, #8
 8003e56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2310      	movs	r3, #16
 8003e72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2340      	movs	r3, #64	@ 0x40
 8003e8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d023      	beq.n	8003ee2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e9c:	6a38      	ldr	r0, [r7, #32]
 8003e9e:	f003 fb31 	bl	8007504 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	3310      	adds	r3, #16
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	78db      	ldrb	r3, [r3, #3]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d108      	bne.n	8003ed0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	4619      	mov	r1, r3
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f006 feda 	bl	800ac84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003edc:	461a      	mov	r2, r3
 8003ede:	2302      	movs	r3, #2
 8003ee0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003eec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fcbd 	bl	800486e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f47f af2e 	bne.w	8003d64 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f004 fa15 	bl	800833c <USB_ReadInterrupts>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f1c:	d122      	bne.n	8003f64 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d108      	bne.n	8003f4e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f44:	2100      	movs	r1, #0
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fea4 	bl	8004c94 <HAL_PCDEx_LPM_Callback>
 8003f4c:	e002      	b.n	8003f54 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f006 fe78 	bl	800ac44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003f62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f004 f9e7 	bl	800833c <USB_ReadInterrupts>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f78:	d112      	bne.n	8003fa0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d102      	bne.n	8003f90 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f006 fe34 	bl	800abf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003f9e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f004 f9c9 	bl	800833c <USB_ReadInterrupts>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb4:	f040 80b7 	bne.w	8004126 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2110      	movs	r1, #16
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f003 fa96 	bl	8007504 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fdc:	e046      	b.n	800406c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fea:	461a      	mov	r2, r3
 8003fec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ff0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004002:	0151      	lsls	r1, r2, #5
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	440a      	add	r2, r1
 8004008:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800400c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004010:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401e:	461a      	mov	r2, r3
 8004020:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004024:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004036:	0151      	lsls	r1, r2, #5
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	440a      	add	r2, r1
 800403c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004040:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004044:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004056:	0151      	lsls	r1, r2, #5
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	440a      	add	r2, r1
 800405c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004060:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004064:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004068:	3301      	adds	r3, #1
 800406a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	791b      	ldrb	r3, [r3, #4]
 8004070:	461a      	mov	r2, r3
 8004072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004074:	4293      	cmp	r3, r2
 8004076:	d3b2      	bcc.n	8003fde <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004086:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800408a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	7bdb      	ldrb	r3, [r3, #15]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d016      	beq.n	80040c2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040a4:	f043 030b 	orr.w	r3, r3, #11
 80040a8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ba:	f043 030b 	orr.w	r3, r3, #11
 80040be:	6453      	str	r3, [r2, #68]	@ 0x44
 80040c0:	e015      	b.n	80040ee <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040d4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80040d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040e8:	f043 030b 	orr.w	r3, r3, #11
 80040ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040fc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004100:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004110:	461a      	mov	r2, r3
 8004112:	f004 f9d7 	bl	80084c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004124:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f004 f906 	bl	800833c <USB_ReadInterrupts>
 8004130:	4603      	mov	r3, r0
 8004132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800413a:	d123      	bne.n	8004184 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f004 f99c 	bl	800847e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f003 fa53 	bl	80075f6 <USB_GetDevSpeed>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681c      	ldr	r4, [r3, #0]
 800415c:	f001 fa0a 	bl	8005574 <HAL_RCC_GetHCLKFreq>
 8004160:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004166:	461a      	mov	r2, r3
 8004168:	4620      	mov	r0, r4
 800416a:	f002 ff57 	bl	800701c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f006 fd19 	bl	800aba6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004182:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f004 f8d7 	bl	800833c <USB_ReadInterrupts>
 800418e:	4603      	mov	r3, r0
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b08      	cmp	r3, #8
 8004196:	d10a      	bne.n	80041ae <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f006 fcf6 	bl	800ab8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f002 0208 	and.w	r2, r2, #8
 80041ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f004 f8c2 	bl	800833c <USB_ReadInterrupts>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041be:	2b80      	cmp	r3, #128	@ 0x80
 80041c0:	d123      	bne.n	800420a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041ce:	2301      	movs	r3, #1
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d2:	e014      	b.n	80041fe <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d105      	bne.n	80041f8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fb0a 	bl	800480c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	3301      	adds	r3, #1
 80041fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	791b      	ldrb	r3, [r3, #4]
 8004202:	461a      	mov	r2, r3
 8004204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004206:	4293      	cmp	r3, r2
 8004208:	d3e4      	bcc.n	80041d4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f004 f894 	bl	800833c <USB_ReadInterrupts>
 8004214:	4603      	mov	r3, r0
 8004216:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800421a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800421e:	d13c      	bne.n	800429a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004220:	2301      	movs	r3, #1
 8004222:	627b      	str	r3, [r7, #36]	@ 0x24
 8004224:	e02b      	b.n	800427e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423a:	4613      	mov	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	3318      	adds	r3, #24
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d115      	bne.n	8004278 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800424c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800424e:	2b00      	cmp	r3, #0
 8004250:	da12      	bge.n	8004278 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004256:	4613      	mov	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	3317      	adds	r3, #23
 8004262:	2201      	movs	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800426e:	b2db      	uxtb	r3, r3
 8004270:	4619      	mov	r1, r3
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 faca 	bl	800480c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	3301      	adds	r3, #1
 800427c:	627b      	str	r3, [r7, #36]	@ 0x24
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	791b      	ldrb	r3, [r3, #4]
 8004282:	461a      	mov	r2, r3
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	4293      	cmp	r3, r2
 8004288:	d3cd      	bcc.n	8004226 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f004 f84c 	bl	800833c <USB_ReadInterrupts>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ae:	d156      	bne.n	800435e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042b0:	2301      	movs	r3, #1
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b4:	e045      	b.n	8004342 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ca:	4613      	mov	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d12e      	bne.n	800433c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	da2b      	bge.n	800433c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	0c1a      	lsrs	r2, r3, #16
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80042ee:	4053      	eors	r3, r2
 80042f0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d121      	bne.n	800433c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800430a:	2201      	movs	r2, #1
 800430c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004334:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004338:	6053      	str	r3, [r2, #4]
            break;
 800433a:	e008      	b.n	800434e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	3301      	adds	r3, #1
 8004340:	627b      	str	r3, [r7, #36]	@ 0x24
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	791b      	ldrb	r3, [r3, #4]
 8004346:	461a      	mov	r2, r3
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	4293      	cmp	r3, r2
 800434c:	d3b3      	bcc.n	80042b6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800435c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f003 ffea 	bl	800833c <USB_ReadInterrupts>
 8004368:	4603      	mov	r3, r0
 800436a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004372:	d10a      	bne.n	800438a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f006 fc97 	bl	800aca8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f003 ffd4 	bl	800833c <USB_ReadInterrupts>
 8004394:	4603      	mov	r3, r0
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b04      	cmp	r3, #4
 800439c:	d115      	bne.n	80043ca <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f006 fc87 	bl	800acc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6859      	ldr	r1, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	e000      	b.n	80043ca <HAL_PCD_IRQHandler+0x93c>
      return;
 80043c8:	bf00      	nop
    }
  }
}
 80043ca:	3734      	adds	r7, #52	@ 0x34
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd90      	pop	{r4, r7, pc}

080043d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_PCD_SetAddress+0x1a>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e012      	b.n	8004410 <HAL_PCD_SetAddress+0x40>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	78fa      	ldrb	r2, [r7, #3]
 80043fe:	4611      	mov	r1, r2
 8004400:	4618      	mov	r0, r3
 8004402:	f003 ff33 	bl	800826c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	4608      	mov	r0, r1
 8004422:	4611      	mov	r1, r2
 8004424:	461a      	mov	r2, r3
 8004426:	4603      	mov	r3, r0
 8004428:	70fb      	strb	r3, [r7, #3]
 800442a:	460b      	mov	r3, r1
 800442c:	803b      	strh	r3, [r7, #0]
 800442e:	4613      	mov	r3, r2
 8004430:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800443a:	2b00      	cmp	r3, #0
 800443c:	da0f      	bge.n	800445e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	3310      	adds	r3, #16
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	3304      	adds	r3, #4
 8004454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	705a      	strb	r2, [r3, #1]
 800445c:	e00f      	b.n	800447e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	f003 020f 	and.w	r2, r3, #15
 8004464:	4613      	mov	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	4413      	add	r3, r2
 8004474:	3304      	adds	r3, #4
 8004476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	b2da      	uxtb	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800448a:	883b      	ldrh	r3, [r7, #0]
 800448c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	78ba      	ldrb	r2, [r7, #2]
 8004498:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	785b      	ldrb	r3, [r3, #1]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d004      	beq.n	80044ac <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80044ac:	78bb      	ldrb	r3, [r7, #2]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d102      	bne.n	80044b8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_PCD_EP_Open+0xae>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e00e      	b.n	80044e4 <HAL_PCD_EP_Open+0xcc>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68f9      	ldr	r1, [r7, #12]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f003 f8b3 	bl	8007640 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80044e2:	7afb      	ldrb	r3, [r7, #11]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	da0f      	bge.n	8004520 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	f003 020f 	and.w	r2, r3, #15
 8004506:	4613      	mov	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	3310      	adds	r3, #16
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4413      	add	r3, r2
 8004514:	3304      	adds	r3, #4
 8004516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	705a      	strb	r2, [r3, #1]
 800451e:	e00f      	b.n	8004540 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	f003 020f 	and.w	r2, r3, #15
 8004526:	4613      	mov	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4413      	add	r3, r2
 8004536:	3304      	adds	r3, #4
 8004538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	b2da      	uxtb	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_PCD_EP_Close+0x6e>
 8004556:	2302      	movs	r3, #2
 8004558:	e00e      	b.n	8004578 <HAL_PCD_EP_Close+0x8c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	4618      	mov	r0, r3
 800456a:	f003 f8f1 	bl	8007750 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	460b      	mov	r3, r1
 800458e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004590:	7afb      	ldrb	r3, [r7, #11]
 8004592:	f003 020f 	and.w	r2, r3, #15
 8004596:	4613      	mov	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4413      	add	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4413      	add	r3, r2
 80045a6:	3304      	adds	r3, #4
 80045a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2200      	movs	r2, #0
 80045ba:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2200      	movs	r2, #0
 80045c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045c2:	7afb      	ldrb	r3, [r7, #11]
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	799b      	ldrb	r3, [r3, #6]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d102      	bne.n	80045dc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	799b      	ldrb	r3, [r3, #6]
 80045e4:	461a      	mov	r2, r3
 80045e6:	6979      	ldr	r1, [r7, #20]
 80045e8:	f003 f98e 	bl	8007908 <USB_EPStartXfer>

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	f003 020f 	and.w	r2, r3, #15
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004618:	681b      	ldr	r3, [r3, #0]
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
 8004632:	460b      	mov	r3, r1
 8004634:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004636:	7afb      	ldrb	r3, [r7, #11]
 8004638:	f003 020f 	and.w	r2, r3, #15
 800463c:	4613      	mov	r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	3310      	adds	r3, #16
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4413      	add	r3, r2
 800464a:	3304      	adds	r3, #4
 800464c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2200      	movs	r2, #0
 800465e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2201      	movs	r2, #1
 8004664:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004666:	7afb      	ldrb	r3, [r7, #11]
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	b2da      	uxtb	r2, r3
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	799b      	ldrb	r3, [r3, #6]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d102      	bne.n	8004680 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	799b      	ldrb	r3, [r3, #6]
 8004688:	461a      	mov	r2, r3
 800468a:	6979      	ldr	r1, [r7, #20]
 800468c:	f003 f93c 	bl	8007908 <USB_EPStartXfer>

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	460b      	mov	r3, r1
 80046a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80046a6:	78fb      	ldrb	r3, [r7, #3]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	7912      	ldrb	r2, [r2, #4]
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d901      	bls.n	80046b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e04f      	b.n	8004758 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	da0f      	bge.n	80046e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	f003 020f 	and.w	r2, r3, #15
 80046c6:	4613      	mov	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	3310      	adds	r3, #16
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	3304      	adds	r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	705a      	strb	r2, [r3, #1]
 80046de:	e00d      	b.n	80046fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	3304      	adds	r3, #4
 80046f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_PCD_EP_SetStall+0x82>
 8004718:	2302      	movs	r3, #2
 800471a:	e01d      	b.n	8004758 <HAL_PCD_EP_SetStall+0xbe>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68f9      	ldr	r1, [r7, #12]
 800472a:	4618      	mov	r0, r3
 800472c:	f003 fcca 	bl	80080c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	7999      	ldrb	r1, [r3, #6]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004748:	461a      	mov	r2, r3
 800474a:	f003 febb 	bl	80084c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	7912      	ldrb	r2, [r2, #4]
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e042      	b.n	8004804 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800477e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004782:	2b00      	cmp	r3, #0
 8004784:	da0f      	bge.n	80047a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	f003 020f 	and.w	r2, r3, #15
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	3310      	adds	r3, #16
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	3304      	adds	r3, #4
 800479c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	705a      	strb	r2, [r3, #1]
 80047a4:	e00f      	b.n	80047c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	f003 020f 	and.w	r2, r3, #15
 80047ac:	4613      	mov	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	4413      	add	r3, r2
 80047bc:	3304      	adds	r3, #4
 80047be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_PCD_EP_ClrStall+0x86>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e00e      	b.n	8004804 <HAL_PCD_EP_ClrStall+0xa4>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68f9      	ldr	r1, [r7, #12]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f003 fcd3 	bl	80081a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800481c:	2b00      	cmp	r3, #0
 800481e:	da0c      	bge.n	800483a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	f003 020f 	and.w	r2, r3, #15
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	3310      	adds	r3, #16
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	3304      	adds	r3, #4
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e00c      	b.n	8004854 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	f003 020f 	and.w	r2, r3, #15
 8004840:	4613      	mov	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	4413      	add	r3, r2
 8004850:	3304      	adds	r3, #4
 8004852:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68f9      	ldr	r1, [r7, #12]
 800485a:	4618      	mov	r0, r3
 800485c:	f003 faf2 	bl	8007e44 <USB_EPStopXfer>
 8004860:	4603      	mov	r3, r0
 8004862:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004864:	7afb      	ldrb	r3, [r7, #11]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b08a      	sub	sp, #40	@ 0x28
 8004872:	af02      	add	r7, sp, #8
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	4613      	mov	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	3310      	adds	r3, #16
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4413      	add	r3, r2
 8004892:	3304      	adds	r3, #4
 8004894:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	695a      	ldr	r2, [r3, #20]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d901      	bls.n	80048a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e06b      	b.n	800497e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d902      	bls.n	80048c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	3303      	adds	r3, #3
 80048c6:	089b      	lsrs	r3, r3, #2
 80048c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048ca:	e02a      	b.n	8004922 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d902      	bls.n	80048e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	3303      	adds	r3, #3
 80048ec:	089b      	lsrs	r3, r3, #2
 80048ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	68d9      	ldr	r1, [r3, #12]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	4603      	mov	r3, r0
 8004904:	6978      	ldr	r0, [r7, #20]
 8004906:	f003 fb47 	bl	8007f98 <USB_WritePacket>

    ep->xfer_buff  += len;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	441a      	add	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	441a      	add	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	429a      	cmp	r2, r3
 8004936:	d809      	bhi.n	800494c <PCD_WriteEmptyTxFifo+0xde>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	695a      	ldr	r2, [r3, #20]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004940:	429a      	cmp	r2, r3
 8004942:	d203      	bcs.n	800494c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1bf      	bne.n	80048cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	429a      	cmp	r2, r3
 8004956:	d811      	bhi.n	800497c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	2201      	movs	r2, #1
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800496c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	43db      	mvns	r3, r3
 8004972:	6939      	ldr	r1, [r7, #16]
 8004974:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004978:	4013      	ands	r3, r2
 800497a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	333c      	adds	r3, #60	@ 0x3c
 80049a0:	3304      	adds	r3, #4
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	799b      	ldrb	r3, [r3, #6]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d17b      	bne.n	8004ab6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d015      	beq.n	80049f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	4a61      	ldr	r2, [pc, #388]	@ (8004b50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	f240 80b9 	bls.w	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80b3 	beq.w	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ea:	461a      	mov	r2, r3
 80049ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049f0:	6093      	str	r3, [r2, #8]
 80049f2:	e0a7      	b.n	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	6093      	str	r3, [r2, #8]
 8004a10:	e098      	b.n	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f040 8093 	bne.w	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	4a4b      	ldr	r2, [pc, #300]	@ (8004b50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d90f      	bls.n	8004a46 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a42:	6093      	str	r3, [r2, #8]
 8004a44:	e07e      	b.n	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	4413      	add	r3, r2
 8004a58:	3304      	adds	r3, #4
 8004a5a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1a      	ldr	r2, [r3, #32]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	0159      	lsls	r1, r3, #5
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	440b      	add	r3, r1
 8004a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a72:	1ad2      	subs	r2, r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d114      	bne.n	8004aa8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a90:	461a      	mov	r2, r3
 8004a92:	2101      	movs	r1, #1
 8004a94:	f003 fd16 	bl	80084c4 <USB_EP0_OutStart>
 8004a98:	e006      	b.n	8004aa8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	441a      	add	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f006 f836 	bl	800ab20 <HAL_PCD_DataOutStageCallback>
 8004ab4:	e046      	b.n	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4a26      	ldr	r2, [pc, #152]	@ (8004b54 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d124      	bne.n	8004b08 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ada:	6093      	str	r3, [r2, #8]
 8004adc:	e032      	b.n	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af4:	461a      	mov	r2, r3
 8004af6:	2320      	movs	r3, #32
 8004af8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f006 f80d 	bl	800ab20 <HAL_PCD_DataOutStageCallback>
 8004b06:	e01d      	b.n	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d114      	bne.n	8004b38 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	4613      	mov	r3, r2
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d108      	bne.n	8004b38 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b30:	461a      	mov	r2, r3
 8004b32:	2100      	movs	r1, #0
 8004b34:	f003 fcc6 	bl	80084c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f005 ffee 	bl	800ab20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	4f54300a 	.word	0x4f54300a
 8004b54:	4f54310a 	.word	0x4f54310a

08004b58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	333c      	adds	r3, #60	@ 0x3c
 8004b70:	3304      	adds	r3, #4
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a15      	ldr	r2, [pc, #84]	@ (8004be0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d90e      	bls.n	8004bac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d009      	beq.n	8004bac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004baa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f005 ffa5 	bl	800aafc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8004be0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d90c      	bls.n	8004bd4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	799b      	ldrb	r3, [r3, #6]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d108      	bne.n	8004bd4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2101      	movs	r1, #1
 8004bd0:	f003 fc78 	bl	80084c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	4f54300a 	.word	0x4f54300a

08004be4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d107      	bne.n	8004c12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c02:	883b      	ldrh	r3, [r7, #0]
 8004c04:	0419      	lsls	r1, r3, #16
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c10:	e028      	b.n	8004c64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c20:	2300      	movs	r3, #0
 8004c22:	73fb      	strb	r3, [r7, #15]
 8004c24:	e00d      	b.n	8004c42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	3340      	adds	r3, #64	@ 0x40
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	4413      	add	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]
 8004c42:	7bfa      	ldrb	r2, [r7, #15]
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d3ec      	bcc.n	8004c26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c4c:	883b      	ldrh	r3, [r7, #0]
 8004c4e:	0418      	lsls	r0, r3, #16
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	4302      	orrs	r2, r0
 8004c5c:	3340      	adds	r3, #64	@ 0x40
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	887a      	ldrh	r2, [r7, #2]
 8004c84:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e267      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d075      	beq.n	8004db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cca:	4b88      	ldr	r3, [pc, #544]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 030c 	and.w	r3, r3, #12
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d00c      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cd6:	4b85      	ldr	r3, [pc, #532]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cde:	2b08      	cmp	r3, #8
 8004ce0:	d112      	bne.n	8004d08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ce2:	4b82      	ldr	r3, [pc, #520]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cee:	d10b      	bne.n	8004d08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf0:	4b7e      	ldr	r3, [pc, #504]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d05b      	beq.n	8004db4 <HAL_RCC_OscConfig+0x108>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d157      	bne.n	8004db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e242      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d10:	d106      	bne.n	8004d20 <HAL_RCC_OscConfig+0x74>
 8004d12:	4b76      	ldr	r3, [pc, #472]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a75      	ldr	r2, [pc, #468]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e01d      	b.n	8004d5c <HAL_RCC_OscConfig+0xb0>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCC_OscConfig+0x98>
 8004d2a:	4b70      	ldr	r3, [pc, #448]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a6f      	ldr	r2, [pc, #444]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	4b6d      	ldr	r3, [pc, #436]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a6c      	ldr	r2, [pc, #432]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	e00b      	b.n	8004d5c <HAL_RCC_OscConfig+0xb0>
 8004d44:	4b69      	ldr	r3, [pc, #420]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a68      	ldr	r2, [pc, #416]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4b66      	ldr	r3, [pc, #408]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a65      	ldr	r2, [pc, #404]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d013      	beq.n	8004d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d64:	f7fd ff50 	bl	8002c08 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d6c:	f7fd ff4c 	bl	8002c08 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	@ 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e207      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0xc0>
 8004d8a:	e014      	b.n	8004db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8c:	f7fd ff3c 	bl	8002c08 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d94:	f7fd ff38 	bl	8002c08 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	@ 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e1f3      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da6:	4b51      	ldr	r3, [pc, #324]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0xe8>
 8004db2:	e000      	b.n	8004db6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d063      	beq.n	8004e8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dce:	4b47      	ldr	r3, [pc, #284]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d11c      	bne.n	8004e14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dda:	4b44      	ldr	r3, [pc, #272]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d116      	bne.n	8004e14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de6:	4b41      	ldr	r3, [pc, #260]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_RCC_OscConfig+0x152>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d001      	beq.n	8004dfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e1c7      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4937      	ldr	r1, [pc, #220]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e12:	e03a      	b.n	8004e8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d020      	beq.n	8004e5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e1c:	4b34      	ldr	r3, [pc, #208]	@ (8004ef0 <HAL_RCC_OscConfig+0x244>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e22:	f7fd fef1 	bl	8002c08 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2a:	f7fd feed 	bl	8002c08 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e1a8      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e48:	4b28      	ldr	r3, [pc, #160]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4925      	ldr	r1, [pc, #148]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	600b      	str	r3, [r1, #0]
 8004e5c:	e015      	b.n	8004e8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5e:	4b24      	ldr	r3, [pc, #144]	@ (8004ef0 <HAL_RCC_OscConfig+0x244>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e64:	f7fd fed0 	bl	8002c08 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e6c:	f7fd fecc 	bl	8002c08 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e187      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d036      	beq.n	8004f04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d016      	beq.n	8004ecc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ef4 <HAL_RCC_OscConfig+0x248>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea4:	f7fd feb0 	bl	8002c08 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eac:	f7fd feac 	bl	8002c08 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e167      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <HAL_RCC_OscConfig+0x240>)
 8004ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x200>
 8004eca:	e01b      	b.n	8004f04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ecc:	4b09      	ldr	r3, [pc, #36]	@ (8004ef4 <HAL_RCC_OscConfig+0x248>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed2:	f7fd fe99 	bl	8002c08 <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed8:	e00e      	b.n	8004ef8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eda:	f7fd fe95 	bl	8002c08 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d907      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e150      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	42470000 	.word	0x42470000
 8004ef4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef8:	4b88      	ldr	r3, [pc, #544]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1ea      	bne.n	8004eda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8097 	beq.w	8005040 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f12:	2300      	movs	r3, #0
 8004f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f16:	4b81      	ldr	r3, [pc, #516]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10f      	bne.n	8004f42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f22:	2300      	movs	r3, #0
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	4b7d      	ldr	r3, [pc, #500]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	4a7c      	ldr	r2, [pc, #496]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f32:	4b7a      	ldr	r3, [pc, #488]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f42:	4b77      	ldr	r3, [pc, #476]	@ (8005120 <HAL_RCC_OscConfig+0x474>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d118      	bne.n	8004f80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f4e:	4b74      	ldr	r3, [pc, #464]	@ (8005120 <HAL_RCC_OscConfig+0x474>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a73      	ldr	r2, [pc, #460]	@ (8005120 <HAL_RCC_OscConfig+0x474>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f5a:	f7fd fe55 	bl	8002c08 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f62:	f7fd fe51 	bl	8002c08 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e10c      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f74:	4b6a      	ldr	r3, [pc, #424]	@ (8005120 <HAL_RCC_OscConfig+0x474>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d106      	bne.n	8004f96 <HAL_RCC_OscConfig+0x2ea>
 8004f88:	4b64      	ldr	r3, [pc, #400]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8c:	4a63      	ldr	r2, [pc, #396]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f94:	e01c      	b.n	8004fd0 <HAL_RCC_OscConfig+0x324>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b05      	cmp	r3, #5
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x30c>
 8004f9e:	4b5f      	ldr	r3, [pc, #380]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa2:	4a5e      	ldr	r2, [pc, #376]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004fa4:	f043 0304 	orr.w	r3, r3, #4
 8004fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004faa:	4b5c      	ldr	r3, [pc, #368]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	4a5b      	ldr	r2, [pc, #364]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb6:	e00b      	b.n	8004fd0 <HAL_RCC_OscConfig+0x324>
 8004fb8:	4b58      	ldr	r3, [pc, #352]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fbc:	4a57      	ldr	r2, [pc, #348]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc4:	4b55      	ldr	r3, [pc, #340]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc8:	4a54      	ldr	r2, [pc, #336]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004fca:	f023 0304 	bic.w	r3, r3, #4
 8004fce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d015      	beq.n	8005004 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd8:	f7fd fe16 	bl	8002c08 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fde:	e00a      	b.n	8004ff6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe0:	f7fd fe12 	bl	8002c08 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e0cb      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff6:	4b49      	ldr	r3, [pc, #292]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0ee      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x334>
 8005002:	e014      	b.n	800502e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005004:	f7fd fe00 	bl	8002c08 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800500a:	e00a      	b.n	8005022 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500c:	f7fd fdfc 	bl	8002c08 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800501a:	4293      	cmp	r3, r2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e0b5      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005022:	4b3e      	ldr	r3, [pc, #248]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1ee      	bne.n	800500c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800502e:	7dfb      	ldrb	r3, [r7, #23]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d105      	bne.n	8005040 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005034:	4b39      	ldr	r3, [pc, #228]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	4a38      	ldr	r2, [pc, #224]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 800503a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800503e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 80a1 	beq.w	800518c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800504a:	4b34      	ldr	r3, [pc, #208]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b08      	cmp	r3, #8
 8005054:	d05c      	beq.n	8005110 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d141      	bne.n	80050e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505e:	4b31      	ldr	r3, [pc, #196]	@ (8005124 <HAL_RCC_OscConfig+0x478>)
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7fd fdd0 	bl	8002c08 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800506c:	f7fd fdcc 	bl	8002c08 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e087      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	4b27      	ldr	r3, [pc, #156]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69da      	ldr	r2, [r3, #28]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	019b      	lsls	r3, r3, #6
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	3b01      	subs	r3, #1
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	061b      	lsls	r3, r3, #24
 80050ae:	491b      	ldr	r1, [pc, #108]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005124 <HAL_RCC_OscConfig+0x478>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ba:	f7fd fda5 	bl	8002c08 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c2:	f7fd fda1 	bl	8002c08 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e05c      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d4:	4b11      	ldr	r3, [pc, #68]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCC_OscConfig+0x416>
 80050e0:	e054      	b.n	800518c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e2:	4b10      	ldr	r3, [pc, #64]	@ (8005124 <HAL_RCC_OscConfig+0x478>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e8:	f7fd fd8e 	bl	8002c08 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f0:	f7fd fd8a 	bl	8002c08 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e045      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <HAL_RCC_OscConfig+0x470>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0x444>
 800510e:	e03d      	b.n	800518c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d107      	bne.n	8005128 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e038      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
 800511c:	40023800 	.word	0x40023800
 8005120:	40007000 	.word	0x40007000
 8005124:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005128:	4b1b      	ldr	r3, [pc, #108]	@ (8005198 <HAL_RCC_OscConfig+0x4ec>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d028      	beq.n	8005188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005140:	429a      	cmp	r2, r3
 8005142:	d121      	bne.n	8005188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d11a      	bne.n	8005188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005158:	4013      	ands	r3, r2
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800515e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005160:	4293      	cmp	r3, r2
 8005162:	d111      	bne.n	8005188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	3b01      	subs	r3, #1
 8005172:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005174:	429a      	cmp	r2, r3
 8005176:	d107      	bne.n	8005188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005182:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005184:	429a      	cmp	r2, r3
 8005186:	d001      	beq.n	800518c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e000      	b.n	800518e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40023800 	.word	0x40023800

0800519c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0cc      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051b0:	4b68      	ldr	r3, [pc, #416]	@ (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d90c      	bls.n	80051d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b65      	ldr	r3, [pc, #404]	@ (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c6:	4b63      	ldr	r3, [pc, #396]	@ (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d001      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0b8      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d020      	beq.n	8005226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051f0:	4b59      	ldr	r3, [pc, #356]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4a58      	ldr	r2, [pc, #352]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005208:	4b53      	ldr	r3, [pc, #332]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4a52      	ldr	r2, [pc, #328]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005214:	4b50      	ldr	r3, [pc, #320]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	494d      	ldr	r1, [pc, #308]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d044      	beq.n	80052bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800523a:	4b47      	ldr	r3, [pc, #284]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d119      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e07f      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d003      	beq.n	800525a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005256:	2b03      	cmp	r3, #3
 8005258:	d107      	bne.n	800526a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525a:	4b3f      	ldr	r3, [pc, #252]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e06f      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526a:	4b3b      	ldr	r3, [pc, #236]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e067      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800527a:	4b37      	ldr	r3, [pc, #220]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f023 0203 	bic.w	r2, r3, #3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4934      	ldr	r1, [pc, #208]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 8005288:	4313      	orrs	r3, r2
 800528a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800528c:	f7fd fcbc 	bl	8002c08 <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	e00a      	b.n	80052aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005294:	f7fd fcb8 	bl	8002c08 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e04f      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 020c 	and.w	r2, r3, #12
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d1eb      	bne.n	8005294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052bc:	4b25      	ldr	r3, [pc, #148]	@ (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d20c      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ca:	4b22      	ldr	r3, [pc, #136]	@ (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d2:	4b20      	ldr	r3, [pc, #128]	@ (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d001      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e032      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052f0:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4916      	ldr	r1, [pc, #88]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800530e:	4b12      	ldr	r3, [pc, #72]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	490e      	ldr	r1, [pc, #56]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	4313      	orrs	r3, r2
 8005320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005322:	f000 f821 	bl	8005368 <HAL_RCC_GetSysClockFreq>
 8005326:	4602      	mov	r2, r0
 8005328:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	490a      	ldr	r1, [pc, #40]	@ (800535c <HAL_RCC_ClockConfig+0x1c0>)
 8005334:	5ccb      	ldrb	r3, [r1, r3]
 8005336:	fa22 f303 	lsr.w	r3, r2, r3
 800533a:	4a09      	ldr	r2, [pc, #36]	@ (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800533c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800533e:	4b09      	ldr	r3, [pc, #36]	@ (8005364 <HAL_RCC_ClockConfig+0x1c8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f7fd fc1c 	bl	8002b80 <HAL_InitTick>

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40023c00 	.word	0x40023c00
 8005358:	40023800 	.word	0x40023800
 800535c:	08014c24 	.word	0x08014c24
 8005360:	20000004 	.word	0x20000004
 8005364:	20000008 	.word	0x20000008

08005368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800536c:	b094      	sub	sp, #80	@ 0x50
 800536e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005380:	4b79      	ldr	r3, [pc, #484]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x200>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	2b08      	cmp	r3, #8
 800538a:	d00d      	beq.n	80053a8 <HAL_RCC_GetSysClockFreq+0x40>
 800538c:	2b08      	cmp	r3, #8
 800538e:	f200 80e1 	bhi.w	8005554 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_RCC_GetSysClockFreq+0x34>
 8005396:	2b04      	cmp	r3, #4
 8005398:	d003      	beq.n	80053a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800539a:	e0db      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800539c:	4b73      	ldr	r3, [pc, #460]	@ (800556c <HAL_RCC_GetSysClockFreq+0x204>)
 800539e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053a0:	e0db      	b.n	800555a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053a2:	4b73      	ldr	r3, [pc, #460]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x208>)
 80053a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053a6:	e0d8      	b.n	800555a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x200>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x200>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d063      	beq.n	8005486 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053be:	4b6a      	ldr	r3, [pc, #424]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x200>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	099b      	lsrs	r3, r3, #6
 80053c4:	2200      	movs	r2, #0
 80053c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053d2:	2300      	movs	r3, #0
 80053d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053da:	4622      	mov	r2, r4
 80053dc:	462b      	mov	r3, r5
 80053de:	f04f 0000 	mov.w	r0, #0
 80053e2:	f04f 0100 	mov.w	r1, #0
 80053e6:	0159      	lsls	r1, r3, #5
 80053e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053ec:	0150      	lsls	r0, r2, #5
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4621      	mov	r1, r4
 80053f4:	1a51      	subs	r1, r2, r1
 80053f6:	6139      	str	r1, [r7, #16]
 80053f8:	4629      	mov	r1, r5
 80053fa:	eb63 0301 	sbc.w	r3, r3, r1
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800540c:	4659      	mov	r1, fp
 800540e:	018b      	lsls	r3, r1, #6
 8005410:	4651      	mov	r1, sl
 8005412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005416:	4651      	mov	r1, sl
 8005418:	018a      	lsls	r2, r1, #6
 800541a:	4651      	mov	r1, sl
 800541c:	ebb2 0801 	subs.w	r8, r2, r1
 8005420:	4659      	mov	r1, fp
 8005422:	eb63 0901 	sbc.w	r9, r3, r1
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800543a:	4690      	mov	r8, r2
 800543c:	4699      	mov	r9, r3
 800543e:	4623      	mov	r3, r4
 8005440:	eb18 0303 	adds.w	r3, r8, r3
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	462b      	mov	r3, r5
 8005448:	eb49 0303 	adc.w	r3, r9, r3
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800545a:	4629      	mov	r1, r5
 800545c:	024b      	lsls	r3, r1, #9
 800545e:	4621      	mov	r1, r4
 8005460:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005464:	4621      	mov	r1, r4
 8005466:	024a      	lsls	r2, r1, #9
 8005468:	4610      	mov	r0, r2
 800546a:	4619      	mov	r1, r3
 800546c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800546e:	2200      	movs	r2, #0
 8005470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005472:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005478:	f7fb fc16 	bl	8000ca8 <__aeabi_uldivmod>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4613      	mov	r3, r2
 8005482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005484:	e058      	b.n	8005538 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005486:	4b38      	ldr	r3, [pc, #224]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x200>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	099b      	lsrs	r3, r3, #6
 800548c:	2200      	movs	r2, #0
 800548e:	4618      	mov	r0, r3
 8005490:	4611      	mov	r1, r2
 8005492:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005496:	623b      	str	r3, [r7, #32]
 8005498:	2300      	movs	r3, #0
 800549a:	627b      	str	r3, [r7, #36]	@ 0x24
 800549c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054a0:	4642      	mov	r2, r8
 80054a2:	464b      	mov	r3, r9
 80054a4:	f04f 0000 	mov.w	r0, #0
 80054a8:	f04f 0100 	mov.w	r1, #0
 80054ac:	0159      	lsls	r1, r3, #5
 80054ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054b2:	0150      	lsls	r0, r2, #5
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4641      	mov	r1, r8
 80054ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80054be:	4649      	mov	r1, r9
 80054c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054d8:	ebb2 040a 	subs.w	r4, r2, sl
 80054dc:	eb63 050b 	sbc.w	r5, r3, fp
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	00eb      	lsls	r3, r5, #3
 80054ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ee:	00e2      	lsls	r2, r4, #3
 80054f0:	4614      	mov	r4, r2
 80054f2:	461d      	mov	r5, r3
 80054f4:	4643      	mov	r3, r8
 80054f6:	18e3      	adds	r3, r4, r3
 80054f8:	603b      	str	r3, [r7, #0]
 80054fa:	464b      	mov	r3, r9
 80054fc:	eb45 0303 	adc.w	r3, r5, r3
 8005500:	607b      	str	r3, [r7, #4]
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800550e:	4629      	mov	r1, r5
 8005510:	028b      	lsls	r3, r1, #10
 8005512:	4621      	mov	r1, r4
 8005514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005518:	4621      	mov	r1, r4
 800551a:	028a      	lsls	r2, r1, #10
 800551c:	4610      	mov	r0, r2
 800551e:	4619      	mov	r1, r3
 8005520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005522:	2200      	movs	r2, #0
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	61fa      	str	r2, [r7, #28]
 8005528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800552c:	f7fb fbbc 	bl	8000ca8 <__aeabi_uldivmod>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4613      	mov	r3, r2
 8005536:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005538:	4b0b      	ldr	r3, [pc, #44]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x200>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	3301      	adds	r3, #1
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005548:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800554a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800554c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005550:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005552:	e002      	b.n	800555a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005554:	4b05      	ldr	r3, [pc, #20]	@ (800556c <HAL_RCC_GetSysClockFreq+0x204>)
 8005556:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800555a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800555c:	4618      	mov	r0, r3
 800555e:	3750      	adds	r7, #80	@ 0x50
 8005560:	46bd      	mov	sp, r7
 8005562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005566:	bf00      	nop
 8005568:	40023800 	.word	0x40023800
 800556c:	00f42400 	.word	0x00f42400
 8005570:	007a1200 	.word	0x007a1200

08005574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005578:	4b03      	ldr	r3, [pc, #12]	@ (8005588 <HAL_RCC_GetHCLKFreq+0x14>)
 800557a:	681b      	ldr	r3, [r3, #0]
}
 800557c:	4618      	mov	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	20000004 	.word	0x20000004

0800558c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005590:	f7ff fff0 	bl	8005574 <HAL_RCC_GetHCLKFreq>
 8005594:	4602      	mov	r2, r0
 8005596:	4b05      	ldr	r3, [pc, #20]	@ (80055ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	0a9b      	lsrs	r3, r3, #10
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	4903      	ldr	r1, [pc, #12]	@ (80055b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055a2:	5ccb      	ldrb	r3, [r1, r3]
 80055a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40023800 	.word	0x40023800
 80055b0:	08014c34 	.word	0x08014c34

080055b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055b8:	f7ff ffdc 	bl	8005574 <HAL_RCC_GetHCLKFreq>
 80055bc:	4602      	mov	r2, r0
 80055be:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	0b5b      	lsrs	r3, r3, #13
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	4903      	ldr	r1, [pc, #12]	@ (80055d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ca:	5ccb      	ldrb	r3, [r1, r3]
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40023800 	.word	0x40023800
 80055d8:	08014c34 	.word	0x08014c34

080055dc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e038      	b.n	8005664 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7fd f93e 	bl	8002888 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3308      	adds	r3, #8
 8005614:	4619      	mov	r1, r3
 8005616:	4610      	mov	r0, r2
 8005618:	f001 fbcc 	bl	8006db4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	461a      	mov	r2, r3
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	f001 fc2e 	bl	8006e88 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6858      	ldr	r0, [r3, #4]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	f001 fc53 	bl	8006ee4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	6892      	ldr	r2, [r2, #8]
 8005646:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	6892      	ldr	r2, [r2, #8]
 8005652:	f041 0101 	orr.w	r1, r1, #1
 8005656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e041      	b.n	8005702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fd f834 	bl	8002700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f000 fa80 	bl	8005bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	d001      	beq.n	8005724 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e046      	b.n	80057b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a23      	ldr	r2, [pc, #140]	@ (80057c0 <HAL_TIM_Base_Start+0xb4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d022      	beq.n	800577c <HAL_TIM_Base_Start+0x70>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573e:	d01d      	beq.n	800577c <HAL_TIM_Base_Start+0x70>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a1f      	ldr	r2, [pc, #124]	@ (80057c4 <HAL_TIM_Base_Start+0xb8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d018      	beq.n	800577c <HAL_TIM_Base_Start+0x70>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1e      	ldr	r2, [pc, #120]	@ (80057c8 <HAL_TIM_Base_Start+0xbc>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d013      	beq.n	800577c <HAL_TIM_Base_Start+0x70>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1c      	ldr	r2, [pc, #112]	@ (80057cc <HAL_TIM_Base_Start+0xc0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00e      	beq.n	800577c <HAL_TIM_Base_Start+0x70>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a1b      	ldr	r2, [pc, #108]	@ (80057d0 <HAL_TIM_Base_Start+0xc4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d009      	beq.n	800577c <HAL_TIM_Base_Start+0x70>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a19      	ldr	r2, [pc, #100]	@ (80057d4 <HAL_TIM_Base_Start+0xc8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d004      	beq.n	800577c <HAL_TIM_Base_Start+0x70>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a18      	ldr	r2, [pc, #96]	@ (80057d8 <HAL_TIM_Base_Start+0xcc>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d111      	bne.n	80057a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b06      	cmp	r3, #6
 800578c:	d010      	beq.n	80057b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579e:	e007      	b.n	80057b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40010400 	.word	0x40010400
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40001800 	.word	0x40001800

080057dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d020      	beq.n	8005840 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0202 	mvn.w	r2, #2
 8005810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f9a3 	bl	8005b72 <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f995 	bl	8005b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f9a6 	bl	8005b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d020      	beq.n	800588c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01b      	beq.n	800588c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0204 	mvn.w	r2, #4
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f97d 	bl	8005b72 <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f96f 	bl	8005b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f980 	bl	8005b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d020      	beq.n	80058d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01b      	beq.n	80058d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0208 	mvn.w	r2, #8
 80058a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2204      	movs	r2, #4
 80058ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f957 	bl	8005b72 <HAL_TIM_IC_CaptureCallback>
 80058c4:	e005      	b.n	80058d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f949 	bl	8005b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f95a 	bl	8005b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d020      	beq.n	8005924 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01b      	beq.n	8005924 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f06f 0210 	mvn.w	r2, #16
 80058f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2208      	movs	r2, #8
 80058fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f931 	bl	8005b72 <HAL_TIM_IC_CaptureCallback>
 8005910:	e005      	b.n	800591e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f923 	bl	8005b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f934 	bl	8005b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00c      	beq.n	8005948 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d007      	beq.n	8005948 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0201 	mvn.w	r2, #1
 8005940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f901 	bl	8005b4a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00c      	beq.n	800596c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005958:	2b00      	cmp	r3, #0
 800595a:	d007      	beq.n	800596c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fae8 	bl	8005f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00c      	beq.n	8005990 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f905 	bl	8005b9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00c      	beq.n	80059b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0220 	mvn.w	r2, #32
 80059ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 faba 	bl	8005f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_TIM_ConfigClockSource+0x1c>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e0b4      	b.n	8005b42 <HAL_TIM_ConfigClockSource+0x186>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a10:	d03e      	beq.n	8005a90 <HAL_TIM_ConfigClockSource+0xd4>
 8005a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a16:	f200 8087 	bhi.w	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a1e:	f000 8086 	beq.w	8005b2e <HAL_TIM_ConfigClockSource+0x172>
 8005a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a26:	d87f      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a28:	2b70      	cmp	r3, #112	@ 0x70
 8005a2a:	d01a      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0xa6>
 8005a2c:	2b70      	cmp	r3, #112	@ 0x70
 8005a2e:	d87b      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a30:	2b60      	cmp	r3, #96	@ 0x60
 8005a32:	d050      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x11a>
 8005a34:	2b60      	cmp	r3, #96	@ 0x60
 8005a36:	d877      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a38:	2b50      	cmp	r3, #80	@ 0x50
 8005a3a:	d03c      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0xfa>
 8005a3c:	2b50      	cmp	r3, #80	@ 0x50
 8005a3e:	d873      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a40:	2b40      	cmp	r3, #64	@ 0x40
 8005a42:	d058      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x13a>
 8005a44:	2b40      	cmp	r3, #64	@ 0x40
 8005a46:	d86f      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a48:	2b30      	cmp	r3, #48	@ 0x30
 8005a4a:	d064      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x15a>
 8005a4c:	2b30      	cmp	r3, #48	@ 0x30
 8005a4e:	d86b      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d060      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x15a>
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d867      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d05c      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x15a>
 8005a5c:	2b10      	cmp	r3, #16
 8005a5e:	d05a      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x15a>
 8005a60:	e062      	b.n	8005b28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a72:	f000 f9bd 	bl	8005df0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	609a      	str	r2, [r3, #8]
      break;
 8005a8e:	e04f      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aa0:	f000 f9a6 	bl	8005df0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ab2:	609a      	str	r2, [r3, #8]
      break;
 8005ab4:	e03c      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f000 f91a 	bl	8005cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2150      	movs	r1, #80	@ 0x50
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 f973 	bl	8005dba <TIM_ITRx_SetConfig>
      break;
 8005ad4:	e02c      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f000 f939 	bl	8005d5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2160      	movs	r1, #96	@ 0x60
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 f963 	bl	8005dba <TIM_ITRx_SetConfig>
      break;
 8005af4:	e01c      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b02:	461a      	mov	r2, r3
 8005b04:	f000 f8fa 	bl	8005cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2140      	movs	r1, #64	@ 0x40
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 f953 	bl	8005dba <TIM_ITRx_SetConfig>
      break;
 8005b14:	e00c      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4610      	mov	r0, r2
 8005b22:	f000 f94a 	bl	8005dba <TIM_ITRx_SetConfig>
      break;
 8005b26:	e003      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b2c:	e000      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
	...

08005bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a43      	ldr	r2, [pc, #268]	@ (8005cd0 <TIM_Base_SetConfig+0x120>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d013      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bce:	d00f      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a40      	ldr	r2, [pc, #256]	@ (8005cd4 <TIM_Base_SetConfig+0x124>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00b      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a3f      	ldr	r2, [pc, #252]	@ (8005cd8 <TIM_Base_SetConfig+0x128>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3e      	ldr	r2, [pc, #248]	@ (8005cdc <TIM_Base_SetConfig+0x12c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3d      	ldr	r2, [pc, #244]	@ (8005ce0 <TIM_Base_SetConfig+0x130>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d108      	bne.n	8005c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a32      	ldr	r2, [pc, #200]	@ (8005cd0 <TIM_Base_SetConfig+0x120>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d02b      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c10:	d027      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2f      	ldr	r2, [pc, #188]	@ (8005cd4 <TIM_Base_SetConfig+0x124>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d023      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8005cd8 <TIM_Base_SetConfig+0x128>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d01f      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2d      	ldr	r2, [pc, #180]	@ (8005cdc <TIM_Base_SetConfig+0x12c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01b      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce0 <TIM_Base_SetConfig+0x130>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d017      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2b      	ldr	r2, [pc, #172]	@ (8005ce4 <TIM_Base_SetConfig+0x134>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ce8 <TIM_Base_SetConfig+0x138>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00f      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a29      	ldr	r2, [pc, #164]	@ (8005cec <TIM_Base_SetConfig+0x13c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00b      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a28      	ldr	r2, [pc, #160]	@ (8005cf0 <TIM_Base_SetConfig+0x140>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d007      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a27      	ldr	r2, [pc, #156]	@ (8005cf4 <TIM_Base_SetConfig+0x144>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a26      	ldr	r2, [pc, #152]	@ (8005cf8 <TIM_Base_SetConfig+0x148>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d108      	bne.n	8005c74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a0e      	ldr	r2, [pc, #56]	@ (8005cd0 <TIM_Base_SetConfig+0x120>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d003      	beq.n	8005ca2 <TIM_Base_SetConfig+0xf2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a10      	ldr	r2, [pc, #64]	@ (8005ce0 <TIM_Base_SetConfig+0x130>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d103      	bne.n	8005caa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f043 0204 	orr.w	r2, r3, #4
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	601a      	str	r2, [r3, #0]
}
 8005cc2:	bf00      	nop
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800
 8005cdc:	40000c00 	.word	0x40000c00
 8005ce0:	40010400 	.word	0x40010400
 8005ce4:	40014000 	.word	0x40014000
 8005ce8:	40014400 	.word	0x40014400
 8005cec:	40014800 	.word	0x40014800
 8005cf0:	40001800 	.word	0x40001800
 8005cf4:	40001c00 	.word	0x40001c00
 8005cf8:	40002000 	.word	0x40002000

08005cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f023 0201 	bic.w	r2, r3, #1
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f023 030a 	bic.w	r3, r3, #10
 8005d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b087      	sub	sp, #28
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f023 0210 	bic.w	r2, r3, #16
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	031b      	lsls	r3, r3, #12
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f043 0307 	orr.w	r3, r3, #7
 8005ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	609a      	str	r2, [r3, #8]
}
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	021a      	lsls	r2, r3, #8
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	609a      	str	r2, [r3, #8]
}
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e05a      	b.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a21      	ldr	r2, [pc, #132]	@ (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d022      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e94:	d01d      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d018      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d013      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a1a      	ldr	r2, [pc, #104]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00e      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a18      	ldr	r2, [pc, #96]	@ (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d009      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a17      	ldr	r2, [pc, #92]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d004      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a15      	ldr	r2, [pc, #84]	@ (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d10c      	bne.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40010000 	.word	0x40010000
 8005f10:	40000400 	.word	0x40000400
 8005f14:	40000800 	.word	0x40000800
 8005f18:	40000c00 	.word	0x40000c00
 8005f1c:	40010400 	.word	0x40010400
 8005f20:	40014000 	.word	0x40014000
 8005f24:	40001800 	.word	0x40001800

08005f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e042      	b.n	8005fe8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fc fbea 	bl	8002750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2224      	movs	r2, #36	@ 0x24
 8005f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fc99 	bl	80068cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695a      	ldr	r2, [r3, #20]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006016:	2300      	movs	r3, #0
 8006018:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800601c:	2300      	movs	r3, #0
 800601e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800602e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10f      	bne.n	8006056 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <HAL_UART_IRQHandler+0x66>
 8006042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fb7e 	bl	8006750 <UART_Receive_IT>
      return;
 8006054:	e273      	b.n	800653e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 80de 	beq.w	800621c <HAL_UART_IRQHandler+0x22c>
 8006060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d106      	bne.n	800607a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800606c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006070:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 80d1 	beq.w	800621c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00b      	beq.n	800609e <HAL_UART_IRQHandler+0xae>
 8006086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800608a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006096:	f043 0201 	orr.w	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <HAL_UART_IRQHandler+0xd2>
 80060aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ba:	f043 0202 	orr.w	r2, r3, #2
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00b      	beq.n	80060e6 <HAL_UART_IRQHandler+0xf6>
 80060ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060de:	f043 0204 	orr.w	r2, r3, #4
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d011      	beq.n	8006116 <HAL_UART_IRQHandler+0x126>
 80060f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d105      	bne.n	800610a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610e:	f043 0208 	orr.w	r2, r3, #8
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 820a 	beq.w	8006534 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	d008      	beq.n	800613e <HAL_UART_IRQHandler+0x14e>
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fb09 	bl	8006750 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006148:	2b40      	cmp	r3, #64	@ 0x40
 800614a:	bf0c      	ite	eq
 800614c:	2301      	moveq	r3, #1
 800614e:	2300      	movne	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d103      	bne.n	800616a <HAL_UART_IRQHandler+0x17a>
 8006162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006166:	2b00      	cmp	r3, #0
 8006168:	d04f      	beq.n	800620a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fa14 	bl	8006598 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617a:	2b40      	cmp	r3, #64	@ 0x40
 800617c:	d141      	bne.n	8006202 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3314      	adds	r3, #20
 8006184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800619c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3314      	adds	r3, #20
 80061a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80061ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80061b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80061c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1d9      	bne.n	800617e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d013      	beq.n	80061fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d6:	4a8a      	ldr	r2, [pc, #552]	@ (8006400 <HAL_UART_IRQHandler+0x410>)
 80061d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fc ff3e 	bl	8003060 <HAL_DMA_Abort_IT>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d016      	beq.n	8006218 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80061f4:	4610      	mov	r0, r2
 80061f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	e00e      	b.n	8006218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f9b6 	bl	800656c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006200:	e00a      	b.n	8006218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f9b2 	bl	800656c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006208:	e006      	b.n	8006218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f9ae 	bl	800656c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006216:	e18d      	b.n	8006534 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006218:	bf00      	nop
    return;
 800621a:	e18b      	b.n	8006534 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006220:	2b01      	cmp	r3, #1
 8006222:	f040 8167 	bne.w	80064f4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800622a:	f003 0310 	and.w	r3, r3, #16
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 8160 	beq.w	80064f4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 8159 	beq.w	80064f4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006242:	2300      	movs	r3, #0
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60bb      	str	r3, [r7, #8]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	60bb      	str	r3, [r7, #8]
 8006256:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006262:	2b40      	cmp	r3, #64	@ 0x40
 8006264:	f040 80ce 	bne.w	8006404 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006274:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 80a9 	beq.w	80063d0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006286:	429a      	cmp	r2, r3
 8006288:	f080 80a2 	bcs.w	80063d0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006292:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800629e:	f000 8088 	beq.w	80063b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	330c      	adds	r3, #12
 80062a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80062b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	330c      	adds	r3, #12
 80062ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80062ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80062da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80062e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1d9      	bne.n	80062a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3314      	adds	r3, #20
 80062f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80062fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006300:	f023 0301 	bic.w	r3, r3, #1
 8006304:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3314      	adds	r3, #20
 800630e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006312:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006316:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800631a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e1      	bne.n	80062ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3314      	adds	r3, #20
 8006330:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800633a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800633c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006340:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3314      	adds	r3, #20
 800634a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800634e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006350:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006354:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800635c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e3      	bne.n	800632a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	330c      	adds	r3, #12
 8006376:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006382:	f023 0310 	bic.w	r3, r3, #16
 8006386:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006394:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006396:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800639a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e3      	bne.n	8006370 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fc fde7 	bl	8002f80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2202      	movs	r2, #2
 80063b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f8d9 	bl	8006580 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80063ce:	e0b3      	b.n	8006538 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063d8:	429a      	cmp	r2, r3
 80063da:	f040 80ad 	bne.w	8006538 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063e8:	f040 80a6 	bne.w	8006538 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f8c1 	bl	8006580 <HAL_UARTEx_RxEventCallback>
      return;
 80063fe:	e09b      	b.n	8006538 <HAL_UART_IRQHandler+0x548>
 8006400:	0800665f 	.word	0x0800665f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800640c:	b29b      	uxth	r3, r3
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 808e 	beq.w	800653c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8089 	beq.w	800653c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	330c      	adds	r3, #12
 8006430:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800643a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006440:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	330c      	adds	r3, #12
 800644a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800644e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006450:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800645c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e3      	bne.n	800642a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3314      	adds	r3, #20
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	623b      	str	r3, [r7, #32]
   return(result);
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	f023 0301 	bic.w	r3, r3, #1
 8006478:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3314      	adds	r3, #20
 8006482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006486:	633a      	str	r2, [r7, #48]	@ 0x30
 8006488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800648c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e3      	bne.n	8006462 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	330c      	adds	r3, #12
 80064ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0310 	bic.w	r3, r3, #16
 80064be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80064cc:	61fa      	str	r2, [r7, #28]
 80064ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	69b9      	ldr	r1, [r7, #24]
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	617b      	str	r3, [r7, #20]
   return(result);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e3      	bne.n	80064a8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f847 	bl	8006580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064f2:	e023      	b.n	800653c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <HAL_UART_IRQHandler+0x524>
 8006500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f8b7 	bl	8006680 <UART_Transmit_IT>
    return;
 8006512:	e014      	b.n	800653e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00e      	beq.n	800653e <HAL_UART_IRQHandler+0x54e>
 8006520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d008      	beq.n	800653e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f8f7 	bl	8006720 <UART_EndTransmit_IT>
    return;
 8006532:	e004      	b.n	800653e <HAL_UART_IRQHandler+0x54e>
    return;
 8006534:	bf00      	nop
 8006536:	e002      	b.n	800653e <HAL_UART_IRQHandler+0x54e>
      return;
 8006538:	bf00      	nop
 800653a:	e000      	b.n	800653e <HAL_UART_IRQHandler+0x54e>
      return;
 800653c:	bf00      	nop
  }
}
 800653e:	37e8      	adds	r7, #232	@ 0xe8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006598:	b480      	push	{r7}
 800659a:	b095      	sub	sp, #84	@ 0x54
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	330c      	adds	r3, #12
 80065a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	330c      	adds	r3, #12
 80065be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80065c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e5      	bne.n	80065a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3314      	adds	r3, #20
 80065da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	f023 0301 	bic.w	r3, r3, #1
 80065ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3314      	adds	r3, #20
 80065f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e5      	bne.n	80065d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660c:	2b01      	cmp	r3, #1
 800660e:	d119      	bne.n	8006644 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	330c      	adds	r3, #12
 8006616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f023 0310 	bic.w	r3, r3, #16
 8006626:	647b      	str	r3, [r7, #68]	@ 0x44
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	330c      	adds	r3, #12
 800662e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006630:	61ba      	str	r2, [r7, #24]
 8006632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	6979      	ldr	r1, [r7, #20]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	613b      	str	r3, [r7, #16]
   return(result);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e5      	bne.n	8006610 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006652:	bf00      	nop
 8006654:	3754      	adds	r7, #84	@ 0x54
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7ff ff7a 	bl	800656c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006678:	bf00      	nop
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b21      	cmp	r3, #33	@ 0x21
 8006692:	d13e      	bne.n	8006712 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800669c:	d114      	bne.n	80066c8 <UART_Transmit_IT+0x48>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d110      	bne.n	80066c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	1c9a      	adds	r2, r3, #2
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	621a      	str	r2, [r3, #32]
 80066c6:	e008      	b.n	80066da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	1c59      	adds	r1, r3, #1
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6211      	str	r1, [r2, #32]
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	4619      	mov	r1, r3
 80066e8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10f      	bne.n	800670e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800670c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	e000      	b.n	8006714 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006712:	2302      	movs	r3, #2
  }
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006736:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff feff 	bl	8006544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08c      	sub	sp, #48	@ 0x30
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006758:	2300      	movs	r3, #0
 800675a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800675c:	2300      	movs	r3, #0
 800675e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b22      	cmp	r3, #34	@ 0x22
 800676a:	f040 80aa 	bne.w	80068c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006776:	d115      	bne.n	80067a4 <UART_Receive_IT+0x54>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d111      	bne.n	80067a4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006784:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006792:	b29a      	uxth	r2, r3
 8006794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006796:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679c:	1c9a      	adds	r2, r3, #2
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80067a2:	e024      	b.n	80067ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067b2:	d007      	beq.n	80067c4 <UART_Receive_IT+0x74>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <UART_Receive_IT+0x82>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d106      	bne.n	80067d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	e008      	b.n	80067e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	3b01      	subs	r3, #1
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	4619      	mov	r1, r3
 80067fc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d15d      	bne.n	80068be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0220 	bic.w	r2, r2, #32
 8006810:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006820:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695a      	ldr	r2, [r3, #20]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 0201 	bic.w	r2, r2, #1
 8006830:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006844:	2b01      	cmp	r3, #1
 8006846:	d135      	bne.n	80068b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	330c      	adds	r3, #12
 8006854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	613b      	str	r3, [r7, #16]
   return(result);
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f023 0310 	bic.w	r3, r3, #16
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	330c      	adds	r3, #12
 800686c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800686e:	623a      	str	r2, [r7, #32]
 8006870:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	69f9      	ldr	r1, [r7, #28]
 8006874:	6a3a      	ldr	r2, [r7, #32]
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	61bb      	str	r3, [r7, #24]
   return(result);
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e5      	bne.n	800684e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0310 	and.w	r3, r3, #16
 800688c:	2b10      	cmp	r3, #16
 800688e:	d10a      	bne.n	80068a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff fe67 	bl	8006580 <HAL_UARTEx_RxEventCallback>
 80068b2:	e002      	b.n	80068ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff fe4f 	bl	8006558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e002      	b.n	80068c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e000      	b.n	80068c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
  }
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3730      	adds	r7, #48	@ 0x30
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068d0:	b0c0      	sub	sp, #256	@ 0x100
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80068e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e8:	68d9      	ldr	r1, [r3, #12]
 80068ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	ea40 0301 	orr.w	r3, r0, r1
 80068f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	431a      	orrs	r2, r3
 8006904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	431a      	orrs	r2, r3
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006924:	f021 010c 	bic.w	r1, r1, #12
 8006928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006932:	430b      	orrs	r3, r1
 8006934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006946:	6999      	ldr	r1, [r3, #24]
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	ea40 0301 	orr.w	r3, r0, r1
 8006952:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b8f      	ldr	r3, [pc, #572]	@ (8006b98 <UART_SetConfig+0x2cc>)
 800695c:	429a      	cmp	r2, r3
 800695e:	d005      	beq.n	800696c <UART_SetConfig+0xa0>
 8006960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	4b8d      	ldr	r3, [pc, #564]	@ (8006b9c <UART_SetConfig+0x2d0>)
 8006968:	429a      	cmp	r2, r3
 800696a:	d104      	bne.n	8006976 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800696c:	f7fe fe22 	bl	80055b4 <HAL_RCC_GetPCLK2Freq>
 8006970:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006974:	e003      	b.n	800697e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006976:	f7fe fe09 	bl	800558c <HAL_RCC_GetPCLK1Freq>
 800697a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800697e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006988:	f040 810c 	bne.w	8006ba4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800698c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006990:	2200      	movs	r2, #0
 8006992:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006996:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800699a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800699e:	4622      	mov	r2, r4
 80069a0:	462b      	mov	r3, r5
 80069a2:	1891      	adds	r1, r2, r2
 80069a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80069a6:	415b      	adcs	r3, r3
 80069a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80069ae:	4621      	mov	r1, r4
 80069b0:	eb12 0801 	adds.w	r8, r2, r1
 80069b4:	4629      	mov	r1, r5
 80069b6:	eb43 0901 	adc.w	r9, r3, r1
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	f04f 0300 	mov.w	r3, #0
 80069c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069ce:	4690      	mov	r8, r2
 80069d0:	4699      	mov	r9, r3
 80069d2:	4623      	mov	r3, r4
 80069d4:	eb18 0303 	adds.w	r3, r8, r3
 80069d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069dc:	462b      	mov	r3, r5
 80069de:	eb49 0303 	adc.w	r3, r9, r3
 80069e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80069f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80069fa:	460b      	mov	r3, r1
 80069fc:	18db      	adds	r3, r3, r3
 80069fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a00:	4613      	mov	r3, r2
 8006a02:	eb42 0303 	adc.w	r3, r2, r3
 8006a06:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006a0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a10:	f7fa f94a 	bl	8000ca8 <__aeabi_uldivmod>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4b61      	ldr	r3, [pc, #388]	@ (8006ba0 <UART_SetConfig+0x2d4>)
 8006a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	011c      	lsls	r4, r3, #4
 8006a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006a30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006a34:	4642      	mov	r2, r8
 8006a36:	464b      	mov	r3, r9
 8006a38:	1891      	adds	r1, r2, r2
 8006a3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006a3c:	415b      	adcs	r3, r3
 8006a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a44:	4641      	mov	r1, r8
 8006a46:	eb12 0a01 	adds.w	sl, r2, r1
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	eb43 0b01 	adc.w	fp, r3, r1
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a64:	4692      	mov	sl, r2
 8006a66:	469b      	mov	fp, r3
 8006a68:	4643      	mov	r3, r8
 8006a6a:	eb1a 0303 	adds.w	r3, sl, r3
 8006a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a72:	464b      	mov	r3, r9
 8006a74:	eb4b 0303 	adc.w	r3, fp, r3
 8006a78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006a8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a90:	460b      	mov	r3, r1
 8006a92:	18db      	adds	r3, r3, r3
 8006a94:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a96:	4613      	mov	r3, r2
 8006a98:	eb42 0303 	adc.w	r3, r2, r3
 8006a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006aa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006aa6:	f7fa f8ff 	bl	8000ca8 <__aeabi_uldivmod>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4611      	mov	r1, r2
 8006ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ba0 <UART_SetConfig+0x2d4>)
 8006ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	2264      	movs	r2, #100	@ 0x64
 8006aba:	fb02 f303 	mul.w	r3, r2, r3
 8006abe:	1acb      	subs	r3, r1, r3
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006ac6:	4b36      	ldr	r3, [pc, #216]	@ (8006ba0 <UART_SetConfig+0x2d4>)
 8006ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ad4:	441c      	add	r4, r3
 8006ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ae0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ae4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006ae8:	4642      	mov	r2, r8
 8006aea:	464b      	mov	r3, r9
 8006aec:	1891      	adds	r1, r2, r2
 8006aee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006af0:	415b      	adcs	r3, r3
 8006af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006af4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006af8:	4641      	mov	r1, r8
 8006afa:	1851      	adds	r1, r2, r1
 8006afc:	6339      	str	r1, [r7, #48]	@ 0x30
 8006afe:	4649      	mov	r1, r9
 8006b00:	414b      	adcs	r3, r1
 8006b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	f04f 0300 	mov.w	r3, #0
 8006b0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b10:	4659      	mov	r1, fp
 8006b12:	00cb      	lsls	r3, r1, #3
 8006b14:	4651      	mov	r1, sl
 8006b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b1a:	4651      	mov	r1, sl
 8006b1c:	00ca      	lsls	r2, r1, #3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	4619      	mov	r1, r3
 8006b22:	4603      	mov	r3, r0
 8006b24:	4642      	mov	r2, r8
 8006b26:	189b      	adds	r3, r3, r2
 8006b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b2c:	464b      	mov	r3, r9
 8006b2e:	460a      	mov	r2, r1
 8006b30:	eb42 0303 	adc.w	r3, r2, r3
 8006b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006b48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	18db      	adds	r3, r3, r3
 8006b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b52:	4613      	mov	r3, r2
 8006b54:	eb42 0303 	adc.w	r3, r2, r3
 8006b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006b62:	f7fa f8a1 	bl	8000ca8 <__aeabi_uldivmod>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba0 <UART_SetConfig+0x2d4>)
 8006b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	2164      	movs	r1, #100	@ 0x64
 8006b74:	fb01 f303 	mul.w	r3, r1, r3
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	3332      	adds	r3, #50	@ 0x32
 8006b7e:	4a08      	ldr	r2, [pc, #32]	@ (8006ba0 <UART_SetConfig+0x2d4>)
 8006b80:	fba2 2303 	umull	r2, r3, r2, r3
 8006b84:	095b      	lsrs	r3, r3, #5
 8006b86:	f003 0207 	and.w	r2, r3, #7
 8006b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4422      	add	r2, r4
 8006b92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b94:	e106      	b.n	8006da4 <UART_SetConfig+0x4d8>
 8006b96:	bf00      	nop
 8006b98:	40011000 	.word	0x40011000
 8006b9c:	40011400 	.word	0x40011400
 8006ba0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006bae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006bb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006bb6:	4642      	mov	r2, r8
 8006bb8:	464b      	mov	r3, r9
 8006bba:	1891      	adds	r1, r2, r2
 8006bbc:	6239      	str	r1, [r7, #32]
 8006bbe:	415b      	adcs	r3, r3
 8006bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bc6:	4641      	mov	r1, r8
 8006bc8:	1854      	adds	r4, r2, r1
 8006bca:	4649      	mov	r1, r9
 8006bcc:	eb43 0501 	adc.w	r5, r3, r1
 8006bd0:	f04f 0200 	mov.w	r2, #0
 8006bd4:	f04f 0300 	mov.w	r3, #0
 8006bd8:	00eb      	lsls	r3, r5, #3
 8006bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bde:	00e2      	lsls	r2, r4, #3
 8006be0:	4614      	mov	r4, r2
 8006be2:	461d      	mov	r5, r3
 8006be4:	4643      	mov	r3, r8
 8006be6:	18e3      	adds	r3, r4, r3
 8006be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bec:	464b      	mov	r3, r9
 8006bee:	eb45 0303 	adc.w	r3, r5, r3
 8006bf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c06:	f04f 0200 	mov.w	r2, #0
 8006c0a:	f04f 0300 	mov.w	r3, #0
 8006c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c12:	4629      	mov	r1, r5
 8006c14:	008b      	lsls	r3, r1, #2
 8006c16:	4621      	mov	r1, r4
 8006c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	008a      	lsls	r2, r1, #2
 8006c20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c24:	f7fa f840 	bl	8000ca8 <__aeabi_uldivmod>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4b60      	ldr	r3, [pc, #384]	@ (8006db0 <UART_SetConfig+0x4e4>)
 8006c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	011c      	lsls	r4, r3, #4
 8006c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006c48:	4642      	mov	r2, r8
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	1891      	adds	r1, r2, r2
 8006c4e:	61b9      	str	r1, [r7, #24]
 8006c50:	415b      	adcs	r3, r3
 8006c52:	61fb      	str	r3, [r7, #28]
 8006c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c58:	4641      	mov	r1, r8
 8006c5a:	1851      	adds	r1, r2, r1
 8006c5c:	6139      	str	r1, [r7, #16]
 8006c5e:	4649      	mov	r1, r9
 8006c60:	414b      	adcs	r3, r1
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	f04f 0200 	mov.w	r2, #0
 8006c68:	f04f 0300 	mov.w	r3, #0
 8006c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c70:	4659      	mov	r1, fp
 8006c72:	00cb      	lsls	r3, r1, #3
 8006c74:	4651      	mov	r1, sl
 8006c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c7a:	4651      	mov	r1, sl
 8006c7c:	00ca      	lsls	r2, r1, #3
 8006c7e:	4610      	mov	r0, r2
 8006c80:	4619      	mov	r1, r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	4642      	mov	r2, r8
 8006c86:	189b      	adds	r3, r3, r2
 8006c88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c8c:	464b      	mov	r3, r9
 8006c8e:	460a      	mov	r2, r1
 8006c90:	eb42 0303 	adc.w	r3, r2, r3
 8006c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ca2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	f04f 0300 	mov.w	r3, #0
 8006cac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006cb0:	4649      	mov	r1, r9
 8006cb2:	008b      	lsls	r3, r1, #2
 8006cb4:	4641      	mov	r1, r8
 8006cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cba:	4641      	mov	r1, r8
 8006cbc:	008a      	lsls	r2, r1, #2
 8006cbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006cc2:	f7f9 fff1 	bl	8000ca8 <__aeabi_uldivmod>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4b38      	ldr	r3, [pc, #224]	@ (8006db0 <UART_SetConfig+0x4e4>)
 8006cce:	fba3 2301 	umull	r2, r3, r3, r1
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	2264      	movs	r2, #100	@ 0x64
 8006cd6:	fb02 f303 	mul.w	r3, r2, r3
 8006cda:	1acb      	subs	r3, r1, r3
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	3332      	adds	r3, #50	@ 0x32
 8006ce0:	4a33      	ldr	r2, [pc, #204]	@ (8006db0 <UART_SetConfig+0x4e4>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cec:	441c      	add	r4, r3
 8006cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cf6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006cf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006cfc:	4642      	mov	r2, r8
 8006cfe:	464b      	mov	r3, r9
 8006d00:	1891      	adds	r1, r2, r2
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	415b      	adcs	r3, r3
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d0c:	4641      	mov	r1, r8
 8006d0e:	1851      	adds	r1, r2, r1
 8006d10:	6039      	str	r1, [r7, #0]
 8006d12:	4649      	mov	r1, r9
 8006d14:	414b      	adcs	r3, r1
 8006d16:	607b      	str	r3, [r7, #4]
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d24:	4659      	mov	r1, fp
 8006d26:	00cb      	lsls	r3, r1, #3
 8006d28:	4651      	mov	r1, sl
 8006d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d2e:	4651      	mov	r1, sl
 8006d30:	00ca      	lsls	r2, r1, #3
 8006d32:	4610      	mov	r0, r2
 8006d34:	4619      	mov	r1, r3
 8006d36:	4603      	mov	r3, r0
 8006d38:	4642      	mov	r2, r8
 8006d3a:	189b      	adds	r3, r3, r2
 8006d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d3e:	464b      	mov	r3, r9
 8006d40:	460a      	mov	r2, r1
 8006d42:	eb42 0303 	adc.w	r3, r2, r3
 8006d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d52:	667a      	str	r2, [r7, #100]	@ 0x64
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	f04f 0300 	mov.w	r3, #0
 8006d5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006d60:	4649      	mov	r1, r9
 8006d62:	008b      	lsls	r3, r1, #2
 8006d64:	4641      	mov	r1, r8
 8006d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d6a:	4641      	mov	r1, r8
 8006d6c:	008a      	lsls	r2, r1, #2
 8006d6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006d72:	f7f9 ff99 	bl	8000ca8 <__aeabi_uldivmod>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006db0 <UART_SetConfig+0x4e4>)
 8006d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	2164      	movs	r1, #100	@ 0x64
 8006d84:	fb01 f303 	mul.w	r3, r1, r3
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	3332      	adds	r3, #50	@ 0x32
 8006d8e:	4a08      	ldr	r2, [pc, #32]	@ (8006db0 <UART_SetConfig+0x4e4>)
 8006d90:	fba2 2303 	umull	r2, r3, r2, r3
 8006d94:	095b      	lsrs	r3, r3, #5
 8006d96:	f003 020f 	and.w	r2, r3, #15
 8006d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4422      	add	r2, r4
 8006da2:	609a      	str	r2, [r3, #8]
}
 8006da4:	bf00      	nop
 8006da6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006daa:	46bd      	mov	sp, r7
 8006dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006db0:	51eb851f 	.word	0x51eb851f

08006db4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	6812      	ldr	r2, [r2, #0]
 8006dcc:	f023 0101 	bic.w	r1, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	d102      	bne.n	8006de4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006dde:	2340      	movs	r3, #64	@ 0x40
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	e001      	b.n	8006de8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006df4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006dfa:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006e00:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006e06:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006e0c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006e12:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006e18:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8006e1e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006e24:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006e42:	4b10      	ldr	r3, [pc, #64]	@ (8006e84 <FSMC_NORSRAM_Init+0xd0>)
 8006e44:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e4c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006e54:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	43db      	mvns	r3, r3
 8006e64:	ea02 0103 	and.w	r1, r2, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	4319      	orrs	r1, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	0008fb7f 	.word	0x0008fb7f

08006e88 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8006e9e:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8006ea6:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8006eae:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8006eb8:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	3b02      	subs	r3, #2
 8006ec0:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8006ec2:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8006ece:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ef8:	d11d      	bne.n	8006f36 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f02:	4b13      	ldr	r3, [pc, #76]	@ (8006f50 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	6811      	ldr	r1, [r2, #0]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	6852      	ldr	r2, [r2, #4]
 8006f0e:	0112      	lsls	r2, r2, #4
 8006f10:	4311      	orrs	r1, r2
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	6892      	ldr	r2, [r2, #8]
 8006f16:	0212      	lsls	r2, r2, #8
 8006f18:	4311      	orrs	r1, r2
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	6992      	ldr	r2, [r2, #24]
 8006f1e:	4311      	orrs	r1, r2
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	68d2      	ldr	r2, [r2, #12]
 8006f24:	0412      	lsls	r2, r2, #16
 8006f26:	430a      	orrs	r2, r1
 8006f28:	ea43 0102 	orr.w	r1, r3, r2
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006f34:	e005      	b.n	8006f42 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8006f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	cff00000 	.word	0xcff00000

08006f54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f54:	b084      	sub	sp, #16
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	f107 001c 	add.w	r0, r7, #28
 8006f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d123      	bne.n	8006fb6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d105      	bne.n	8006faa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 fae8 	bl	8008580 <USB_CoreReset>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
 8006fb4:	e01b      	b.n	8006fee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f001 fadc 	bl	8008580 <USB_CoreReset>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006fcc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d106      	bne.n	8006fe2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	639a      	str	r2, [r3, #56]	@ 0x38
 8006fe0:	e005      	b.n	8006fee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006fee:	7fbb      	ldrb	r3, [r7, #30]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d10b      	bne.n	800700c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f043 0206 	orr.w	r2, r3, #6
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f043 0220 	orr.w	r2, r3, #32
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007018:	b004      	add	sp, #16
 800701a:	4770      	bx	lr

0800701c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	4613      	mov	r3, r2
 8007028:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	2b02      	cmp	r3, #2
 800702e:	d165      	bne.n	80070fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4a41      	ldr	r2, [pc, #260]	@ (8007138 <USB_SetTurnaroundTime+0x11c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d906      	bls.n	8007046 <USB_SetTurnaroundTime+0x2a>
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4a40      	ldr	r2, [pc, #256]	@ (800713c <USB_SetTurnaroundTime+0x120>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d202      	bcs.n	8007046 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007040:	230f      	movs	r3, #15
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	e062      	b.n	800710c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	4a3c      	ldr	r2, [pc, #240]	@ (800713c <USB_SetTurnaroundTime+0x120>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d306      	bcc.n	800705c <USB_SetTurnaroundTime+0x40>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	4a3b      	ldr	r2, [pc, #236]	@ (8007140 <USB_SetTurnaroundTime+0x124>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d202      	bcs.n	800705c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007056:	230e      	movs	r3, #14
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	e057      	b.n	800710c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4a38      	ldr	r2, [pc, #224]	@ (8007140 <USB_SetTurnaroundTime+0x124>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d306      	bcc.n	8007072 <USB_SetTurnaroundTime+0x56>
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	4a37      	ldr	r2, [pc, #220]	@ (8007144 <USB_SetTurnaroundTime+0x128>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d202      	bcs.n	8007072 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800706c:	230d      	movs	r3, #13
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	e04c      	b.n	800710c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	4a33      	ldr	r2, [pc, #204]	@ (8007144 <USB_SetTurnaroundTime+0x128>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d306      	bcc.n	8007088 <USB_SetTurnaroundTime+0x6c>
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	4a32      	ldr	r2, [pc, #200]	@ (8007148 <USB_SetTurnaroundTime+0x12c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d802      	bhi.n	8007088 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007082:	230c      	movs	r3, #12
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	e041      	b.n	800710c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	4a2f      	ldr	r2, [pc, #188]	@ (8007148 <USB_SetTurnaroundTime+0x12c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d906      	bls.n	800709e <USB_SetTurnaroundTime+0x82>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4a2e      	ldr	r2, [pc, #184]	@ (800714c <USB_SetTurnaroundTime+0x130>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d802      	bhi.n	800709e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007098:	230b      	movs	r3, #11
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e036      	b.n	800710c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	4a2a      	ldr	r2, [pc, #168]	@ (800714c <USB_SetTurnaroundTime+0x130>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d906      	bls.n	80070b4 <USB_SetTurnaroundTime+0x98>
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	4a29      	ldr	r2, [pc, #164]	@ (8007150 <USB_SetTurnaroundTime+0x134>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d802      	bhi.n	80070b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80070ae:	230a      	movs	r3, #10
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	e02b      	b.n	800710c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4a26      	ldr	r2, [pc, #152]	@ (8007150 <USB_SetTurnaroundTime+0x134>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d906      	bls.n	80070ca <USB_SetTurnaroundTime+0xae>
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4a25      	ldr	r2, [pc, #148]	@ (8007154 <USB_SetTurnaroundTime+0x138>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d202      	bcs.n	80070ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80070c4:	2309      	movs	r3, #9
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	e020      	b.n	800710c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	4a21      	ldr	r2, [pc, #132]	@ (8007154 <USB_SetTurnaroundTime+0x138>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d306      	bcc.n	80070e0 <USB_SetTurnaroundTime+0xc4>
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	4a20      	ldr	r2, [pc, #128]	@ (8007158 <USB_SetTurnaroundTime+0x13c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d802      	bhi.n	80070e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80070da:	2308      	movs	r3, #8
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	e015      	b.n	800710c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4a1d      	ldr	r2, [pc, #116]	@ (8007158 <USB_SetTurnaroundTime+0x13c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d906      	bls.n	80070f6 <USB_SetTurnaroundTime+0xda>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	4a1c      	ldr	r2, [pc, #112]	@ (800715c <USB_SetTurnaroundTime+0x140>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d202      	bcs.n	80070f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80070f0:	2307      	movs	r3, #7
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	e00a      	b.n	800710c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80070f6:	2306      	movs	r3, #6
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	e007      	b.n	800710c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d102      	bne.n	8007108 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007102:	2309      	movs	r3, #9
 8007104:	617b      	str	r3, [r7, #20]
 8007106:	e001      	b.n	800710c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007108:	2309      	movs	r3, #9
 800710a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	029b      	lsls	r3, r3, #10
 8007120:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007124:	431a      	orrs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	00d8acbf 	.word	0x00d8acbf
 800713c:	00e4e1c0 	.word	0x00e4e1c0
 8007140:	00f42400 	.word	0x00f42400
 8007144:	01067380 	.word	0x01067380
 8007148:	011a499f 	.word	0x011a499f
 800714c:	01312cff 	.word	0x01312cff
 8007150:	014ca43f 	.word	0x014ca43f
 8007154:	016e3600 	.word	0x016e3600
 8007158:	01a6ab1f 	.word	0x01a6ab1f
 800715c:	01e84800 	.word	0x01e84800

08007160 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f043 0201 	orr.w	r2, r3, #1
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f023 0201 	bic.w	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d115      	bne.n	80071f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80071d2:	200a      	movs	r0, #10
 80071d4:	f7fb fd24 	bl	8002c20 <HAL_Delay>
      ms += 10U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	330a      	adds	r3, #10
 80071dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f001 f93f 	bl	8008462 <USB_GetMode>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d01e      	beq.n	8007228 <USB_SetCurrentMode+0x84>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80071ee:	d9f0      	bls.n	80071d2 <USB_SetCurrentMode+0x2e>
 80071f0:	e01a      	b.n	8007228 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80071f2:	78fb      	ldrb	r3, [r7, #3]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d115      	bne.n	8007224 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007204:	200a      	movs	r0, #10
 8007206:	f7fb fd0b 	bl	8002c20 <HAL_Delay>
      ms += 10U;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	330a      	adds	r3, #10
 800720e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 f926 	bl	8008462 <USB_GetMode>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <USB_SetCurrentMode+0x84>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007220:	d9f0      	bls.n	8007204 <USB_SetCurrentMode+0x60>
 8007222:	e001      	b.n	8007228 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e005      	b.n	8007234 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2bc8      	cmp	r3, #200	@ 0xc8
 800722c:	d101      	bne.n	8007232 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e000      	b.n	8007234 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800723c:	b084      	sub	sp, #16
 800723e:	b580      	push	{r7, lr}
 8007240:	b086      	sub	sp, #24
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800724a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007256:	2300      	movs	r3, #0
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	e009      	b.n	8007270 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	3340      	adds	r3, #64	@ 0x40
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	2200      	movs	r2, #0
 8007268:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	3301      	adds	r3, #1
 800726e:	613b      	str	r3, [r7, #16]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2b0e      	cmp	r3, #14
 8007274:	d9f2      	bls.n	800725c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007276:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800727a:	2b00      	cmp	r3, #0
 800727c:	d11c      	bne.n	80072b8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800728c:	f043 0302 	orr.w	r3, r3, #2
 8007290:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007296:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80072b6:	e00b      	b.n	80072d0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072bc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072d6:	461a      	mov	r2, r3
 80072d8:	2300      	movs	r3, #0
 80072da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d10d      	bne.n	8007300 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80072e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d104      	bne.n	80072f6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80072ec:	2100      	movs	r1, #0
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f968 	bl	80075c4 <USB_SetDevSpeed>
 80072f4:	e008      	b.n	8007308 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80072f6:	2101      	movs	r1, #1
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f963 	bl	80075c4 <USB_SetDevSpeed>
 80072fe:	e003      	b.n	8007308 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007300:	2103      	movs	r1, #3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f95e 	bl	80075c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007308:	2110      	movs	r1, #16
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f8fa 	bl	8007504 <USB_FlushTxFifo>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f924 	bl	8007568 <USB_FlushRxFifo>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007330:	461a      	mov	r2, r3
 8007332:	2300      	movs	r3, #0
 8007334:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800733c:	461a      	mov	r2, r3
 800733e:	2300      	movs	r3, #0
 8007340:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007348:	461a      	mov	r2, r3
 800734a:	2300      	movs	r3, #0
 800734c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800734e:	2300      	movs	r3, #0
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	e043      	b.n	80073dc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007366:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800736a:	d118      	bne.n	800739e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10a      	bne.n	8007388 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800737e:	461a      	mov	r2, r3
 8007380:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	e013      	b.n	80073b0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007394:	461a      	mov	r2, r3
 8007396:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	e008      	b.n	80073b0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073aa:	461a      	mov	r2, r3
 80073ac:	2300      	movs	r3, #0
 80073ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073bc:	461a      	mov	r2, r3
 80073be:	2300      	movs	r3, #0
 80073c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ce:	461a      	mov	r2, r3
 80073d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	3301      	adds	r3, #1
 80073da:	613b      	str	r3, [r7, #16]
 80073dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80073e0:	461a      	mov	r2, r3
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d3b5      	bcc.n	8007354 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073e8:	2300      	movs	r3, #0
 80073ea:	613b      	str	r3, [r7, #16]
 80073ec:	e043      	b.n	8007476 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007400:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007404:	d118      	bne.n	8007438 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10a      	bne.n	8007422 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007418:	461a      	mov	r2, r3
 800741a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	e013      	b.n	800744a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800742e:	461a      	mov	r2, r3
 8007430:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	e008      	b.n	800744a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007444:	461a      	mov	r2, r3
 8007446:	2300      	movs	r3, #0
 8007448:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007456:	461a      	mov	r2, r3
 8007458:	2300      	movs	r3, #0
 800745a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007468:	461a      	mov	r2, r3
 800746a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800746e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	3301      	adds	r3, #1
 8007474:	613b      	str	r3, [r7, #16]
 8007476:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800747a:	461a      	mov	r2, r3
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	4293      	cmp	r3, r2
 8007480:	d3b5      	bcc.n	80073ee <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007494:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80074a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d105      	bne.n	80074b8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	f043 0210 	orr.w	r2, r3, #16
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	699a      	ldr	r2, [r3, #24]
 80074bc:	4b10      	ldr	r3, [pc, #64]	@ (8007500 <USB_DevInit+0x2c4>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80074c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	f043 0208 	orr.w	r2, r3, #8
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80074d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d107      	bne.n	80074f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074e8:	f043 0304 	orr.w	r3, r3, #4
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074fc:	b004      	add	sp, #16
 80074fe:	4770      	bx	lr
 8007500:	803c3800 	.word	0x803c3800

08007504 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3301      	adds	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800751e:	d901      	bls.n	8007524 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e01b      	b.n	800755c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	daf2      	bge.n	8007512 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	019b      	lsls	r3, r3, #6
 8007534:	f043 0220 	orr.w	r2, r3, #32
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3301      	adds	r3, #1
 8007540:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007548:	d901      	bls.n	800754e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e006      	b.n	800755c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b20      	cmp	r3, #32
 8007558:	d0f0      	beq.n	800753c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3301      	adds	r3, #1
 8007578:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007580:	d901      	bls.n	8007586 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e018      	b.n	80075b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	daf2      	bge.n	8007574 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2210      	movs	r2, #16
 8007596:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3301      	adds	r3, #1
 800759c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075a4:	d901      	bls.n	80075aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e006      	b.n	80075b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f003 0310 	and.w	r3, r3, #16
 80075b2:	2b10      	cmp	r3, #16
 80075b4:	d0f0      	beq.n	8007598 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	68f9      	ldr	r1, [r7, #12]
 80075e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075e4:	4313      	orrs	r3, r2
 80075e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b087      	sub	sp, #28
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f003 0306 	and.w	r3, r3, #6
 800760e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d102      	bne.n	800761c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007616:	2300      	movs	r3, #0
 8007618:	75fb      	strb	r3, [r7, #23]
 800761a:	e00a      	b.n	8007632 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d002      	beq.n	8007628 <USB_GetDevSpeed+0x32>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b06      	cmp	r3, #6
 8007626:	d102      	bne.n	800762e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007628:	2302      	movs	r3, #2
 800762a:	75fb      	strb	r3, [r7, #23]
 800762c:	e001      	b.n	8007632 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800762e:	230f      	movs	r3, #15
 8007630:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007632:	7dfb      	ldrb	r3, [r7, #23]
}
 8007634:	4618      	mov	r0, r3
 8007636:	371c      	adds	r7, #28
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	785b      	ldrb	r3, [r3, #1]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d13a      	bne.n	80076d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007662:	69da      	ldr	r2, [r3, #28]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	f003 030f 	and.w	r3, r3, #15
 800766c:	2101      	movs	r1, #1
 800766e:	fa01 f303 	lsl.w	r3, r1, r3
 8007672:	b29b      	uxth	r3, r3
 8007674:	68f9      	ldr	r1, [r7, #12]
 8007676:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800767a:	4313      	orrs	r3, r2
 800767c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d155      	bne.n	8007740 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	791b      	ldrb	r3, [r3, #4]
 80076ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	059b      	lsls	r3, r3, #22
 80076b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076b8:	4313      	orrs	r3, r2
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	0151      	lsls	r1, r2, #5
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	440a      	add	r2, r1
 80076c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	e036      	b.n	8007740 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076d8:	69da      	ldr	r2, [r3, #28]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	f003 030f 	and.w	r3, r3, #15
 80076e2:	2101      	movs	r1, #1
 80076e4:	fa01 f303 	lsl.w	r3, r1, r3
 80076e8:	041b      	lsls	r3, r3, #16
 80076ea:	68f9      	ldr	r1, [r7, #12]
 80076ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076f0:	4313      	orrs	r3, r2
 80076f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d11a      	bne.n	8007740 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	791b      	ldrb	r3, [r3, #4]
 8007724:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007726:	430b      	orrs	r3, r1
 8007728:	4313      	orrs	r3, r2
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	0151      	lsls	r1, r2, #5
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	440a      	add	r2, r1
 8007732:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800773a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800773e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
	...

08007750 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d161      	bne.n	8007830 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800777e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007782:	d11f      	bne.n	80077c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	0151      	lsls	r1, r2, #5
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	440a      	add	r2, r1
 800779a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800779e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	0151      	lsls	r1, r2, #5
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	440a      	add	r2, r1
 80077ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	f003 030f 	and.w	r3, r3, #15
 80077d4:	2101      	movs	r1, #1
 80077d6:	fa01 f303 	lsl.w	r3, r1, r3
 80077da:	b29b      	uxth	r3, r3
 80077dc:	43db      	mvns	r3, r3
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077e4:	4013      	ands	r3, r2
 80077e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ee:	69da      	ldr	r2, [r3, #28]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f003 030f 	and.w	r3, r3, #15
 80077f8:	2101      	movs	r1, #1
 80077fa:	fa01 f303 	lsl.w	r3, r1, r3
 80077fe:	b29b      	uxth	r3, r3
 8007800:	43db      	mvns	r3, r3
 8007802:	68f9      	ldr	r1, [r7, #12]
 8007804:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007808:	4013      	ands	r3, r2
 800780a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	0159      	lsls	r1, r3, #5
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	440b      	add	r3, r1
 8007822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007826:	4619      	mov	r1, r3
 8007828:	4b35      	ldr	r3, [pc, #212]	@ (8007900 <USB_DeactivateEndpoint+0x1b0>)
 800782a:	4013      	ands	r3, r2
 800782c:	600b      	str	r3, [r1, #0]
 800782e:	e060      	b.n	80078f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007842:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007846:	d11f      	bne.n	8007888 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	0151      	lsls	r1, r2, #5
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	440a      	add	r2, r1
 800785e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007862:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007866:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	0151      	lsls	r1, r2, #5
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	440a      	add	r2, r1
 800787e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007882:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007886:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800788e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	2101      	movs	r1, #1
 800789a:	fa01 f303 	lsl.w	r3, r1, r3
 800789e:	041b      	lsls	r3, r3, #16
 80078a0:	43db      	mvns	r3, r3
 80078a2:	68f9      	ldr	r1, [r7, #12]
 80078a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078a8:	4013      	ands	r3, r2
 80078aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	f003 030f 	and.w	r3, r3, #15
 80078bc:	2101      	movs	r1, #1
 80078be:	fa01 f303 	lsl.w	r3, r1, r3
 80078c2:	041b      	lsls	r3, r3, #16
 80078c4:	43db      	mvns	r3, r3
 80078c6:	68f9      	ldr	r1, [r7, #12]
 80078c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078cc:	4013      	ands	r3, r2
 80078ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	0159      	lsls	r1, r3, #5
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	440b      	add	r3, r1
 80078e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ea:	4619      	mov	r1, r3
 80078ec:	4b05      	ldr	r3, [pc, #20]	@ (8007904 <USB_DeactivateEndpoint+0x1b4>)
 80078ee:	4013      	ands	r3, r2
 80078f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	ec337800 	.word	0xec337800
 8007904:	eff37800 	.word	0xeff37800

08007908 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	@ 0x28
 800790c:	af02      	add	r7, sp, #8
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	2b01      	cmp	r3, #1
 8007926:	f040 817f 	bne.w	8007c28 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d132      	bne.n	8007998 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	4413      	add	r3, r2
 800793a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	0151      	lsls	r1, r2, #5
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	440a      	add	r2, r1
 8007948:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800794c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007950:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007954:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	0151      	lsls	r1, r2, #5
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	440a      	add	r2, r1
 800796c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007970:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007974:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	440a      	add	r2, r1
 800798c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007990:	0cdb      	lsrs	r3, r3, #19
 8007992:	04db      	lsls	r3, r3, #19
 8007994:	6113      	str	r3, [r2, #16]
 8007996:	e097      	b.n	8007ac8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	0151      	lsls	r1, r2, #5
 80079aa:	69fa      	ldr	r2, [r7, #28]
 80079ac:	440a      	add	r2, r1
 80079ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079b2:	0cdb      	lsrs	r3, r3, #19
 80079b4:	04db      	lsls	r3, r3, #19
 80079b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	0151      	lsls	r1, r2, #5
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	440a      	add	r2, r1
 80079ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079d2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80079d6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80079da:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d11a      	bne.n	8007a18 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	691a      	ldr	r2, [r3, #16]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d903      	bls.n	80079f6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	689a      	ldr	r2, [r3, #8]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	0151      	lsls	r1, r2, #5
 8007a08:	69fa      	ldr	r2, [r7, #28]
 8007a0a:	440a      	add	r2, r1
 8007a0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a14:	6113      	str	r3, [r2, #16]
 8007a16:	e044      	b.n	8007aa2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	691a      	ldr	r2, [r3, #16]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	4413      	add	r3, r2
 8007a22:	1e5a      	subs	r2, r3, #1
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a3a:	691a      	ldr	r2, [r3, #16]
 8007a3c:	8afb      	ldrh	r3, [r7, #22]
 8007a3e:	04d9      	lsls	r1, r3, #19
 8007a40:	4ba4      	ldr	r3, [pc, #656]	@ (8007cd4 <USB_EPStartXfer+0x3cc>)
 8007a42:	400b      	ands	r3, r1
 8007a44:	69b9      	ldr	r1, [r7, #24]
 8007a46:	0148      	lsls	r0, r1, #5
 8007a48:	69f9      	ldr	r1, [r7, #28]
 8007a4a:	4401      	add	r1, r0
 8007a4c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a50:	4313      	orrs	r3, r2
 8007a52:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	791b      	ldrb	r3, [r3, #4]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d122      	bne.n	8007aa2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	0151      	lsls	r1, r2, #5
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	440a      	add	r2, r1
 8007a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a76:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007a7a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	8afb      	ldrh	r3, [r7, #22]
 8007a8c:	075b      	lsls	r3, r3, #29
 8007a8e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007a92:	69b9      	ldr	r1, [r7, #24]
 8007a94:	0148      	lsls	r0, r1, #5
 8007a96:	69f9      	ldr	r1, [r7, #28]
 8007a98:	4401      	add	r1, r0
 8007a9a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aae:	691a      	ldr	r2, [r3, #16]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ab8:	69b9      	ldr	r1, [r7, #24]
 8007aba:	0148      	lsls	r0, r1, #5
 8007abc:	69f9      	ldr	r1, [r7, #28]
 8007abe:	4401      	add	r1, r0
 8007ac0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ac8:	79fb      	ldrb	r3, [r7, #7]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d14b      	bne.n	8007b66 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d009      	beq.n	8007aea <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	791b      	ldrb	r3, [r3, #4]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d128      	bne.n	8007b44 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d110      	bne.n	8007b24 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	e00f      	b.n	8007b44 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	0151      	lsls	r1, r2, #5
 8007b36:	69fa      	ldr	r2, [r7, #28]
 8007b38:	440a      	add	r2, r1
 8007b3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b42:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b5e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	e166      	b.n	8007e34 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	0151      	lsls	r1, r2, #5
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	440a      	add	r2, r1
 8007b7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b80:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b84:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	791b      	ldrb	r3, [r3, #4]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d015      	beq.n	8007bba <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 814e 	beq.w	8007e34 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	f003 030f 	and.w	r3, r3, #15
 8007ba8:	2101      	movs	r1, #1
 8007baa:	fa01 f303 	lsl.w	r3, r1, r3
 8007bae:	69f9      	ldr	r1, [r7, #28]
 8007bb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	634b      	str	r3, [r1, #52]	@ 0x34
 8007bb8:	e13c      	b.n	8007e34 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d110      	bne.n	8007bec <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	0151      	lsls	r1, r2, #5
 8007bdc:	69fa      	ldr	r2, [r7, #28]
 8007bde:	440a      	add	r2, r1
 8007be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007be4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	e00f      	b.n	8007c0c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	0151      	lsls	r1, r2, #5
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	440a      	add	r2, r1
 8007c02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c0a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	68d9      	ldr	r1, [r3, #12]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	781a      	ldrb	r2, [r3, #0]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	b298      	uxth	r0, r3
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	4603      	mov	r3, r0
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 f9b9 	bl	8007f98 <USB_WritePacket>
 8007c26:	e105      	b.n	8007e34 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	0151      	lsls	r1, r2, #5
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	440a      	add	r2, r1
 8007c3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c42:	0cdb      	lsrs	r3, r3, #19
 8007c44:	04db      	lsls	r3, r3, #19
 8007c46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	0151      	lsls	r1, r2, #5
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	440a      	add	r2, r1
 8007c5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c62:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c66:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c6a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d132      	bne.n	8007cd8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	689a      	ldr	r2, [r3, #8]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c96:	691a      	ldr	r2, [r3, #16]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ca0:	69b9      	ldr	r1, [r7, #24]
 8007ca2:	0148      	lsls	r0, r1, #5
 8007ca4:	69f9      	ldr	r1, [r7, #28]
 8007ca6:	4401      	add	r1, r0
 8007ca8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007cac:	4313      	orrs	r3, r2
 8007cae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	0151      	lsls	r1, r2, #5
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	440a      	add	r2, r1
 8007cc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007cce:	6113      	str	r3, [r2, #16]
 8007cd0:	e062      	b.n	8007d98 <USB_EPStartXfer+0x490>
 8007cd2:	bf00      	nop
 8007cd4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d123      	bne.n	8007d28 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cec:	691a      	ldr	r2, [r3, #16]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cf6:	69b9      	ldr	r1, [r7, #24]
 8007cf8:	0148      	lsls	r0, r1, #5
 8007cfa:	69f9      	ldr	r1, [r7, #28]
 8007cfc:	4401      	add	r1, r0
 8007cfe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d02:	4313      	orrs	r3, r2
 8007d04:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	0151      	lsls	r1, r2, #5
 8007d18:	69fa      	ldr	r2, [r7, #28]
 8007d1a:	440a      	add	r2, r1
 8007d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d24:	6113      	str	r3, [r2, #16]
 8007d26:	e037      	b.n	8007d98 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	691a      	ldr	r2, [r3, #16]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	4413      	add	r3, r2
 8007d32:	1e5a      	subs	r2, r3, #1
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	8afa      	ldrh	r2, [r7, #22]
 8007d44:	fb03 f202 	mul.w	r2, r3, r2
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d58:	691a      	ldr	r2, [r3, #16]
 8007d5a:	8afb      	ldrh	r3, [r7, #22]
 8007d5c:	04d9      	lsls	r1, r3, #19
 8007d5e:	4b38      	ldr	r3, [pc, #224]	@ (8007e40 <USB_EPStartXfer+0x538>)
 8007d60:	400b      	ands	r3, r1
 8007d62:	69b9      	ldr	r1, [r7, #24]
 8007d64:	0148      	lsls	r0, r1, #5
 8007d66:	69f9      	ldr	r1, [r7, #28]
 8007d68:	4401      	add	r1, r0
 8007d6a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d88:	69b9      	ldr	r1, [r7, #24]
 8007d8a:	0148      	lsls	r0, r1, #5
 8007d8c:	69f9      	ldr	r1, [r7, #28]
 8007d8e:	4401      	add	r1, r0
 8007d90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d94:	4313      	orrs	r3, r2
 8007d96:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d10d      	bne.n	8007dba <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d009      	beq.n	8007dba <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	68d9      	ldr	r1, [r3, #12]
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db6:	460a      	mov	r2, r1
 8007db8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	791b      	ldrb	r3, [r3, #4]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d128      	bne.n	8007e14 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d110      	bne.n	8007df4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	69fa      	ldr	r2, [r7, #28]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007df0:	6013      	str	r3, [r2, #0]
 8007df2:	e00f      	b.n	8007e14 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	0151      	lsls	r1, r2, #5
 8007e06:	69fa      	ldr	r2, [r7, #28]
 8007e08:	440a      	add	r2, r1
 8007e0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	0151      	lsls	r1, r2, #5
 8007e26:	69fa      	ldr	r2, [r7, #28]
 8007e28:	440a      	add	r2, r1
 8007e2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e2e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3720      	adds	r7, #32
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	1ff80000 	.word	0x1ff80000

08007e44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	785b      	ldrb	r3, [r3, #1]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d14a      	bne.n	8007ef8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e7a:	f040 8086 	bne.w	8007f8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	7812      	ldrb	r2, [r2, #0]
 8007e92:	0151      	lsls	r1, r2, #5
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	440a      	add	r2, r1
 8007e98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ea0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	7812      	ldrb	r2, [r2, #0]
 8007eb6:	0151      	lsls	r1, r2, #5
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	440a      	add	r2, r1
 8007ebc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ec0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ec4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d902      	bls.n	8007edc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8007eda:	e056      	b.n	8007f8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ef4:	d0e7      	beq.n	8007ec6 <USB_EPStopXfer+0x82>
 8007ef6:	e048      	b.n	8007f8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f10:	d13b      	bne.n	8007f8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	7812      	ldrb	r2, [r2, #0]
 8007f26:	0151      	lsls	r1, r2, #5
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	440a      	add	r2, r1
 8007f2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	7812      	ldrb	r2, [r2, #0]
 8007f4a:	0151      	lsls	r1, r2, #5
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	440a      	add	r2, r1
 8007f50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d902      	bls.n	8007f70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f6e:	e00c      	b.n	8007f8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f88:	d0e7      	beq.n	8007f5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	371c      	adds	r7, #28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b089      	sub	sp, #36	@ 0x24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	71fb      	strb	r3, [r7, #7]
 8007faa:	4613      	mov	r3, r2
 8007fac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007fb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d123      	bne.n	8008006 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007fbe:	88bb      	ldrh	r3, [r7, #4]
 8007fc0:	3303      	adds	r3, #3
 8007fc2:	089b      	lsrs	r3, r3, #2
 8007fc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	e018      	b.n	8007ffe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007fcc:	79fb      	ldrb	r3, [r7, #7]
 8007fce:	031a      	lsls	r2, r3, #12
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fd8:	461a      	mov	r2, r3
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	61bb      	str	r3, [r7, #24]
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	429a      	cmp	r2, r3
 8008004:	d3e2      	bcc.n	8007fcc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3724      	adds	r7, #36	@ 0x24
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008014:	b480      	push	{r7}
 8008016:	b08b      	sub	sp, #44	@ 0x2c
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	4613      	mov	r3, r2
 8008020:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800802a:	88fb      	ldrh	r3, [r7, #6]
 800802c:	089b      	lsrs	r3, r3, #2
 800802e:	b29b      	uxth	r3, r3
 8008030:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008032:	88fb      	ldrh	r3, [r7, #6]
 8008034:	f003 0303 	and.w	r3, r3, #3
 8008038:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800803a:	2300      	movs	r3, #0
 800803c:	623b      	str	r3, [r7, #32]
 800803e:	e014      	b.n	800806a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	601a      	str	r2, [r3, #0]
    pDest++;
 800804c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804e:	3301      	adds	r3, #1
 8008050:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	3301      	adds	r3, #1
 8008056:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	3301      	adds	r3, #1
 800805c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800805e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008060:	3301      	adds	r3, #1
 8008062:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	3301      	adds	r3, #1
 8008068:	623b      	str	r3, [r7, #32]
 800806a:	6a3a      	ldr	r2, [r7, #32]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	429a      	cmp	r2, r3
 8008070:	d3e6      	bcc.n	8008040 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008072:	8bfb      	ldrh	r3, [r7, #30]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01e      	beq.n	80080b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008082:	461a      	mov	r2, r3
 8008084:	f107 0310 	add.w	r3, r7, #16
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	b2db      	uxtb	r3, r3
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	fa22 f303 	lsr.w	r3, r2, r3
 8008098:	b2da      	uxtb	r2, r3
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	701a      	strb	r2, [r3, #0]
      i++;
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	3301      	adds	r3, #1
 80080a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80080a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a6:	3301      	adds	r3, #1
 80080a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80080aa:	8bfb      	ldrh	r3, [r7, #30]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80080b0:	8bfb      	ldrh	r3, [r7, #30]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1ea      	bne.n	800808c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80080b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	372c      	adds	r7, #44	@ 0x2c
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	785b      	ldrb	r3, [r3, #1]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d12c      	bne.n	800813a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	db12      	blt.n	8008118 <USB_EPSetStall+0x54>
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00f      	beq.n	8008118 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	0151      	lsls	r1, r2, #5
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	440a      	add	r2, r1
 800810e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008112:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008116:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	0151      	lsls	r1, r2, #5
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	440a      	add	r2, r1
 800812e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008132:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	e02b      	b.n	8008192 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	db12      	blt.n	8008172 <USB_EPSetStall+0xae>
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00f      	beq.n	8008172 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	0151      	lsls	r1, r2, #5
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	440a      	add	r2, r1
 8008168:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800816c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008170:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4413      	add	r3, r2
 800817a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	0151      	lsls	r1, r2, #5
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	440a      	add	r2, r1
 8008188:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800818c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008190:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	785b      	ldrb	r3, [r3, #1]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d128      	bne.n	800820e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	0151      	lsls	r1, r2, #5
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	440a      	add	r2, r1
 80081d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	791b      	ldrb	r3, [r3, #4]
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d003      	beq.n	80081ec <USB_EPClearStall+0x4c>
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	791b      	ldrb	r3, [r3, #4]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d138      	bne.n	800825e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	0151      	lsls	r1, r2, #5
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	440a      	add	r2, r1
 8008202:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	e027      	b.n	800825e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	440a      	add	r2, r1
 8008224:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008228:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800822c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	791b      	ldrb	r3, [r3, #4]
 8008232:	2b03      	cmp	r3, #3
 8008234:	d003      	beq.n	800823e <USB_EPClearStall+0x9e>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	791b      	ldrb	r3, [r3, #4]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d10f      	bne.n	800825e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	0151      	lsls	r1, r2, #5
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	440a      	add	r2, r1
 8008254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800825c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800828a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800828e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80082a0:	68f9      	ldr	r1, [r7, #12]
 80082a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082a6:	4313      	orrs	r3, r2
 80082a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80082d2:	f023 0303 	bic.w	r3, r3, #3
 80082d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082e6:	f023 0302 	bic.w	r3, r3, #2
 80082ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b085      	sub	sp, #20
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008314:	f023 0303 	bic.w	r3, r3, #3
 8008318:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008328:	f043 0302 	orr.w	r3, r3, #2
 800832c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	4013      	ands	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008354:	68fb      	ldr	r3, [r7, #12]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008362:	b480      	push	{r7}
 8008364:	b085      	sub	sp, #20
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	4013      	ands	r3, r2
 8008384:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	0c1b      	lsrs	r3, r3, #16
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008396:	b480      	push	{r7}
 8008398:	b085      	sub	sp, #20
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	4013      	ands	r3, r2
 80083b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	b29b      	uxth	r3, r3
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b085      	sub	sp, #20
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	460b      	mov	r3, r1
 80083d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80083da:	78fb      	ldrb	r3, [r7, #3]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	4013      	ands	r3, r2
 80083f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083f8:	68bb      	ldr	r3, [r7, #8]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008406:	b480      	push	{r7}
 8008408:	b087      	sub	sp, #28
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	460b      	mov	r3, r1
 8008410:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008428:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800842a:	78fb      	ldrb	r3, [r7, #3]
 800842c:	f003 030f 	and.w	r3, r3, #15
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	fa22 f303 	lsr.w	r3, r2, r3
 8008436:	01db      	lsls	r3, r3, #7
 8008438:	b2db      	uxtb	r3, r3
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	4313      	orrs	r3, r2
 800843e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008440:	78fb      	ldrb	r3, [r7, #3]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	4013      	ands	r3, r2
 8008452:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008454:	68bb      	ldr	r3, [r7, #8]
}
 8008456:	4618      	mov	r0, r3
 8008458:	371c      	adds	r7, #28
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	f003 0301 	and.w	r3, r3, #1
}
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800847e:	b480      	push	{r7}
 8008480:	b085      	sub	sp, #20
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008498:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800849c:	f023 0307 	bic.w	r3, r3, #7
 80084a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	460b      	mov	r3, r1
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	333c      	adds	r3, #60	@ 0x3c
 80084da:	3304      	adds	r3, #4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	4a26      	ldr	r2, [pc, #152]	@ (800857c <USB_EP0_OutStart+0xb8>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d90a      	bls.n	80084fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084f8:	d101      	bne.n	80084fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e037      	b.n	800856e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008504:	461a      	mov	r2, r3
 8008506:	2300      	movs	r3, #0
 8008508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008518:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800851c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800852c:	f043 0318 	orr.w	r3, r3, #24
 8008530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008540:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008544:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d10f      	bne.n	800856c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008552:	461a      	mov	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008566:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800856a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	4f54300a 	.word	0x4f54300a

08008580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3301      	adds	r3, #1
 8008590:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008598:	d901      	bls.n	800859e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e022      	b.n	80085e4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	daf2      	bge.n	800858c <USB_CoreReset+0xc>

  count = 10U;
 80085a6:	230a      	movs	r3, #10
 80085a8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80085aa:	e002      	b.n	80085b2 <USB_CoreReset+0x32>
  {
    count--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1f9      	bne.n	80085ac <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	f043 0201 	orr.w	r2, r3, #1
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	3301      	adds	r3, #1
 80085c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085d0:	d901      	bls.n	80085d6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e006      	b.n	80085e4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d0f0      	beq.n	80085c4 <USB_CoreReset+0x44>

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80085fc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008600:	f002 fcf8 	bl	800aff4 <USBD_static_malloc>
 8008604:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d109      	bne.n	8008620 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	32b0      	adds	r2, #176	@ 0xb0
 8008616:	2100      	movs	r1, #0
 8008618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800861c:	2302      	movs	r3, #2
 800861e:	e0d4      	b.n	80087ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008620:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008624:	2100      	movs	r1, #0
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f004 fdc3 	bl	800d1b2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	32b0      	adds	r2, #176	@ 0xb0
 8008636:	68f9      	ldr	r1, [r7, #12]
 8008638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	32b0      	adds	r2, #176	@ 0xb0
 8008646:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	7c1b      	ldrb	r3, [r3, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d138      	bne.n	80086ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008658:	4b5e      	ldr	r3, [pc, #376]	@ (80087d4 <USBD_CDC_Init+0x1e4>)
 800865a:	7819      	ldrb	r1, [r3, #0]
 800865c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008660:	2202      	movs	r2, #2
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f002 fba3 	bl	800adae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008668:	4b5a      	ldr	r3, [pc, #360]	@ (80087d4 <USBD_CDC_Init+0x1e4>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	f003 020f 	and.w	r2, r3, #15
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	440b      	add	r3, r1
 800867c:	3323      	adds	r3, #35	@ 0x23
 800867e:	2201      	movs	r2, #1
 8008680:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008682:	4b55      	ldr	r3, [pc, #340]	@ (80087d8 <USBD_CDC_Init+0x1e8>)
 8008684:	7819      	ldrb	r1, [r3, #0]
 8008686:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800868a:	2202      	movs	r2, #2
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f002 fb8e 	bl	800adae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008692:	4b51      	ldr	r3, [pc, #324]	@ (80087d8 <USBD_CDC_Init+0x1e8>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	f003 020f 	and.w	r2, r3, #15
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4613      	mov	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	440b      	add	r3, r1
 80086a6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80086aa:	2201      	movs	r2, #1
 80086ac:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80086ae:	4b4b      	ldr	r3, [pc, #300]	@ (80087dc <USBD_CDC_Init+0x1ec>)
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	f003 020f 	and.w	r2, r3, #15
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	4613      	mov	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	440b      	add	r3, r1
 80086c2:	331c      	adds	r3, #28
 80086c4:	2210      	movs	r2, #16
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	e035      	b.n	8008736 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80086ca:	4b42      	ldr	r3, [pc, #264]	@ (80087d4 <USBD_CDC_Init+0x1e4>)
 80086cc:	7819      	ldrb	r1, [r3, #0]
 80086ce:	2340      	movs	r3, #64	@ 0x40
 80086d0:	2202      	movs	r2, #2
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f002 fb6b 	bl	800adae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80086d8:	4b3e      	ldr	r3, [pc, #248]	@ (80087d4 <USBD_CDC_Init+0x1e4>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	f003 020f 	and.w	r2, r3, #15
 80086e0:	6879      	ldr	r1, [r7, #4]
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	440b      	add	r3, r1
 80086ec:	3323      	adds	r3, #35	@ 0x23
 80086ee:	2201      	movs	r2, #1
 80086f0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80086f2:	4b39      	ldr	r3, [pc, #228]	@ (80087d8 <USBD_CDC_Init+0x1e8>)
 80086f4:	7819      	ldrb	r1, [r3, #0]
 80086f6:	2340      	movs	r3, #64	@ 0x40
 80086f8:	2202      	movs	r2, #2
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f002 fb57 	bl	800adae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008700:	4b35      	ldr	r3, [pc, #212]	@ (80087d8 <USBD_CDC_Init+0x1e8>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	f003 020f 	and.w	r2, r3, #15
 8008708:	6879      	ldr	r1, [r7, #4]
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	440b      	add	r3, r1
 8008714:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008718:	2201      	movs	r2, #1
 800871a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800871c:	4b2f      	ldr	r3, [pc, #188]	@ (80087dc <USBD_CDC_Init+0x1ec>)
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	f003 020f 	and.w	r2, r3, #15
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	440b      	add	r3, r1
 8008730:	331c      	adds	r3, #28
 8008732:	2210      	movs	r2, #16
 8008734:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008736:	4b29      	ldr	r3, [pc, #164]	@ (80087dc <USBD_CDC_Init+0x1ec>)
 8008738:	7819      	ldrb	r1, [r3, #0]
 800873a:	2308      	movs	r3, #8
 800873c:	2203      	movs	r2, #3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f002 fb35 	bl	800adae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008744:	4b25      	ldr	r3, [pc, #148]	@ (80087dc <USBD_CDC_Init+0x1ec>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	f003 020f 	and.w	r2, r3, #15
 800874c:	6879      	ldr	r1, [r7, #4]
 800874e:	4613      	mov	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	440b      	add	r3, r1
 8008758:	3323      	adds	r3, #35	@ 0x23
 800875a:	2201      	movs	r2, #1
 800875c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	33b0      	adds	r3, #176	@ 0xb0
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008794:	2302      	movs	r3, #2
 8008796:	e018      	b.n	80087ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	7c1b      	ldrb	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087a0:	4b0d      	ldr	r3, [pc, #52]	@ (80087d8 <USBD_CDC_Init+0x1e8>)
 80087a2:	7819      	ldrb	r1, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f002 fbec 	bl	800af8c <USBD_LL_PrepareReceive>
 80087b4:	e008      	b.n	80087c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087b6:	4b08      	ldr	r3, [pc, #32]	@ (80087d8 <USBD_CDC_Init+0x1e8>)
 80087b8:	7819      	ldrb	r1, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087c0:	2340      	movs	r3, #64	@ 0x40
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f002 fbe2 	bl	800af8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000097 	.word	0x20000097
 80087d8:	20000098 	.word	0x20000098
 80087dc:	20000099 	.word	0x20000099

080087e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80087ec:	4b3a      	ldr	r3, [pc, #232]	@ (80088d8 <USBD_CDC_DeInit+0xf8>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f002 fb01 	bl	800adfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80087f8:	4b37      	ldr	r3, [pc, #220]	@ (80088d8 <USBD_CDC_DeInit+0xf8>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	f003 020f 	and.w	r2, r3, #15
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	440b      	add	r3, r1
 800880c:	3323      	adds	r3, #35	@ 0x23
 800880e:	2200      	movs	r2, #0
 8008810:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008812:	4b32      	ldr	r3, [pc, #200]	@ (80088dc <USBD_CDC_DeInit+0xfc>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f002 faee 	bl	800adfa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800881e:	4b2f      	ldr	r3, [pc, #188]	@ (80088dc <USBD_CDC_DeInit+0xfc>)
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	f003 020f 	and.w	r2, r3, #15
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	4613      	mov	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	440b      	add	r3, r1
 8008832:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008836:	2200      	movs	r2, #0
 8008838:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800883a:	4b29      	ldr	r3, [pc, #164]	@ (80088e0 <USBD_CDC_DeInit+0x100>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f002 fada 	bl	800adfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008846:	4b26      	ldr	r3, [pc, #152]	@ (80088e0 <USBD_CDC_DeInit+0x100>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	f003 020f 	and.w	r2, r3, #15
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	4613      	mov	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	440b      	add	r3, r1
 800885a:	3323      	adds	r3, #35	@ 0x23
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008860:	4b1f      	ldr	r3, [pc, #124]	@ (80088e0 <USBD_CDC_DeInit+0x100>)
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	f003 020f 	and.w	r2, r3, #15
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	4613      	mov	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	440b      	add	r3, r1
 8008874:	331c      	adds	r3, #28
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	32b0      	adds	r2, #176	@ 0xb0
 8008884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d01f      	beq.n	80088cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	33b0      	adds	r3, #176	@ 0xb0
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	32b0      	adds	r2, #176	@ 0xb0
 80088aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f002 fbae 	bl	800b010 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	32b0      	adds	r2, #176	@ 0xb0
 80088be:	2100      	movs	r1, #0
 80088c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20000097 	.word	0x20000097
 80088dc:	20000098 	.word	0x20000098
 80088e0:	20000099 	.word	0x20000099

080088e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	32b0      	adds	r2, #176	@ 0xb0
 80088f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80088fe:	2300      	movs	r3, #0
 8008900:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008910:	2303      	movs	r3, #3
 8008912:	e0bf      	b.n	8008a94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800891c:	2b00      	cmp	r3, #0
 800891e:	d050      	beq.n	80089c2 <USBD_CDC_Setup+0xde>
 8008920:	2b20      	cmp	r3, #32
 8008922:	f040 80af 	bne.w	8008a84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	88db      	ldrh	r3, [r3, #6]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d03a      	beq.n	80089a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	b25b      	sxtb	r3, r3
 8008934:	2b00      	cmp	r3, #0
 8008936:	da1b      	bge.n	8008970 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	33b0      	adds	r3, #176	@ 0xb0
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800894e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	88d2      	ldrh	r2, [r2, #6]
 8008954:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	88db      	ldrh	r3, [r3, #6]
 800895a:	2b07      	cmp	r3, #7
 800895c:	bf28      	it	cs
 800895e:	2307      	movcs	r3, #7
 8008960:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	89fa      	ldrh	r2, [r7, #14]
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f001 fda9 	bl	800a4c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800896e:	e090      	b.n	8008a92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	785a      	ldrb	r2, [r3, #1]
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	88db      	ldrh	r3, [r3, #6]
 800897e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008980:	d803      	bhi.n	800898a <USBD_CDC_Setup+0xa6>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	88db      	ldrh	r3, [r3, #6]
 8008986:	b2da      	uxtb	r2, r3
 8008988:	e000      	b.n	800898c <USBD_CDC_Setup+0xa8>
 800898a:	2240      	movs	r2, #64	@ 0x40
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008992:	6939      	ldr	r1, [r7, #16]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800899a:	461a      	mov	r2, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 fdbe 	bl	800a51e <USBD_CtlPrepareRx>
      break;
 80089a2:	e076      	b.n	8008a92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	33b0      	adds	r3, #176	@ 0xb0
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	7850      	ldrb	r0, [r2, #1]
 80089ba:	2200      	movs	r2, #0
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	4798      	blx	r3
      break;
 80089c0:	e067      	b.n	8008a92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	785b      	ldrb	r3, [r3, #1]
 80089c6:	2b0b      	cmp	r3, #11
 80089c8:	d851      	bhi.n	8008a6e <USBD_CDC_Setup+0x18a>
 80089ca:	a201      	add	r2, pc, #4	@ (adr r2, 80089d0 <USBD_CDC_Setup+0xec>)
 80089cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d0:	08008a01 	.word	0x08008a01
 80089d4:	08008a7d 	.word	0x08008a7d
 80089d8:	08008a6f 	.word	0x08008a6f
 80089dc:	08008a6f 	.word	0x08008a6f
 80089e0:	08008a6f 	.word	0x08008a6f
 80089e4:	08008a6f 	.word	0x08008a6f
 80089e8:	08008a6f 	.word	0x08008a6f
 80089ec:	08008a6f 	.word	0x08008a6f
 80089f0:	08008a6f 	.word	0x08008a6f
 80089f4:	08008a6f 	.word	0x08008a6f
 80089f8:	08008a2b 	.word	0x08008a2b
 80089fc:	08008a55 	.word	0x08008a55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d107      	bne.n	8008a1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a0c:	f107 030a 	add.w	r3, r7, #10
 8008a10:	2202      	movs	r2, #2
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 fd53 	bl	800a4c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a1a:	e032      	b.n	8008a82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f001 fcd1 	bl	800a3c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a24:	2303      	movs	r3, #3
 8008a26:	75fb      	strb	r3, [r7, #23]
          break;
 8008a28:	e02b      	b.n	8008a82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d107      	bne.n	8008a46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a36:	f107 030d 	add.w	r3, r7, #13
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f001 fd3e 	bl	800a4c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a44:	e01d      	b.n	8008a82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 fcbc 	bl	800a3c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	75fb      	strb	r3, [r7, #23]
          break;
 8008a52:	e016      	b.n	8008a82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d00f      	beq.n	8008a80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f001 fcaf 	bl	800a3c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a6c:	e008      	b.n	8008a80 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f001 fca8 	bl	800a3c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a76:	2303      	movs	r3, #3
 8008a78:	75fb      	strb	r3, [r7, #23]
          break;
 8008a7a:	e002      	b.n	8008a82 <USBD_CDC_Setup+0x19e>
          break;
 8008a7c:	bf00      	nop
 8008a7e:	e008      	b.n	8008a92 <USBD_CDC_Setup+0x1ae>
          break;
 8008a80:	bf00      	nop
      }
      break;
 8008a82:	e006      	b.n	8008a92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f001 fc9d 	bl	800a3c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a90:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008aae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	32b0      	adds	r2, #176	@ 0xb0
 8008aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e065      	b.n	8008b92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	32b0      	adds	r2, #176	@ 0xb0
 8008ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	f003 020f 	and.w	r2, r3, #15
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	440b      	add	r3, r1
 8008ae8:	3314      	adds	r3, #20
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d02f      	beq.n	8008b50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	f003 020f 	and.w	r2, r3, #15
 8008af6:	6879      	ldr	r1, [r7, #4]
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	440b      	add	r3, r1
 8008b02:	3314      	adds	r3, #20
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	78fb      	ldrb	r3, [r7, #3]
 8008b08:	f003 010f 	and.w	r1, r3, #15
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	440b      	add	r3, r1
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4403      	add	r3, r0
 8008b18:	331c      	adds	r3, #28
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b20:	fb01 f303 	mul.w	r3, r1, r3
 8008b24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d112      	bne.n	8008b50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008b2a:	78fb      	ldrb	r3, [r7, #3]
 8008b2c:	f003 020f 	and.w	r2, r3, #15
 8008b30:	6879      	ldr	r1, [r7, #4]
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	440b      	add	r3, r1
 8008b3c:	3314      	adds	r3, #20
 8008b3e:	2200      	movs	r2, #0
 8008b40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b42:	78f9      	ldrb	r1, [r7, #3]
 8008b44:	2300      	movs	r3, #0
 8008b46:	2200      	movs	r2, #0
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f002 f9fe 	bl	800af4a <USBD_LL_Transmit>
 8008b4e:	e01f      	b.n	8008b90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	33b0      	adds	r3, #176	@ 0xb0
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d010      	beq.n	8008b90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	33b0      	adds	r3, #176	@ 0xb0
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008b8c:	78fa      	ldrb	r2, [r7, #3]
 8008b8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	32b0      	adds	r2, #176	@ 0xb0
 8008bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	32b0      	adds	r2, #176	@ 0xb0
 8008bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e01a      	b.n	8008c02 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f002 f9fc 	bl	800afce <USBD_LL_GetRxDataSize>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	33b0      	adds	r3, #176	@ 0xb0
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	32b0      	adds	r2, #176	@ 0xb0
 8008c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e024      	b.n	8008c76 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	33b0      	adds	r3, #176	@ 0xb0
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d019      	beq.n	8008c74 <USBD_CDC_EP0_RxReady+0x6a>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008c46:	2bff      	cmp	r3, #255	@ 0xff
 8008c48:	d014      	beq.n	8008c74 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	33b0      	adds	r3, #176	@ 0xb0
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008c62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c6a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	22ff      	movs	r2, #255	@ 0xff
 8008c70:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
	...

08008c80 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c88:	2182      	movs	r1, #130	@ 0x82
 8008c8a:	4818      	ldr	r0, [pc, #96]	@ (8008cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c8c:	f000 fd62 	bl	8009754 <USBD_GetEpDesc>
 8008c90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c92:	2101      	movs	r1, #1
 8008c94:	4815      	ldr	r0, [pc, #84]	@ (8008cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c96:	f000 fd5d 	bl	8009754 <USBD_GetEpDesc>
 8008c9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c9c:	2181      	movs	r1, #129	@ 0x81
 8008c9e:	4813      	ldr	r0, [pc, #76]	@ (8008cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ca0:	f000 fd58 	bl	8009754 <USBD_GetEpDesc>
 8008ca4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	2210      	movs	r2, #16
 8008cb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d006      	beq.n	8008cc6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cc0:	711a      	strb	r2, [r3, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d006      	beq.n	8008cda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cd4:	711a      	strb	r2, [r3, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2243      	movs	r2, #67	@ 0x43
 8008cde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ce0:	4b02      	ldr	r3, [pc, #8]	@ (8008cec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000054 	.word	0x20000054

08008cf0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008cf8:	2182      	movs	r1, #130	@ 0x82
 8008cfa:	4818      	ldr	r0, [pc, #96]	@ (8008d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008cfc:	f000 fd2a 	bl	8009754 <USBD_GetEpDesc>
 8008d00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d02:	2101      	movs	r1, #1
 8008d04:	4815      	ldr	r0, [pc, #84]	@ (8008d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d06:	f000 fd25 	bl	8009754 <USBD_GetEpDesc>
 8008d0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d0c:	2181      	movs	r1, #129	@ 0x81
 8008d0e:	4813      	ldr	r0, [pc, #76]	@ (8008d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d10:	f000 fd20 	bl	8009754 <USBD_GetEpDesc>
 8008d14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2210      	movs	r2, #16
 8008d20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d006      	beq.n	8008d36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	711a      	strb	r2, [r3, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f042 0202 	orr.w	r2, r2, #2
 8008d34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d006      	beq.n	8008d4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	711a      	strb	r2, [r3, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f042 0202 	orr.w	r2, r2, #2
 8008d48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2243      	movs	r2, #67	@ 0x43
 8008d4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d50:	4b02      	ldr	r3, [pc, #8]	@ (8008d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20000054 	.word	0x20000054

08008d60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d68:	2182      	movs	r1, #130	@ 0x82
 8008d6a:	4818      	ldr	r0, [pc, #96]	@ (8008dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d6c:	f000 fcf2 	bl	8009754 <USBD_GetEpDesc>
 8008d70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d72:	2101      	movs	r1, #1
 8008d74:	4815      	ldr	r0, [pc, #84]	@ (8008dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d76:	f000 fced 	bl	8009754 <USBD_GetEpDesc>
 8008d7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d7c:	2181      	movs	r1, #129	@ 0x81
 8008d7e:	4813      	ldr	r0, [pc, #76]	@ (8008dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d80:	f000 fce8 	bl	8009754 <USBD_GetEpDesc>
 8008d84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d002      	beq.n	8008d92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	2210      	movs	r2, #16
 8008d90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d006      	beq.n	8008da6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008da0:	711a      	strb	r2, [r3, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d006      	beq.n	8008dba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008db4:	711a      	strb	r2, [r3, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2243      	movs	r2, #67	@ 0x43
 8008dbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008dc0:	4b02      	ldr	r3, [pc, #8]	@ (8008dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20000054 	.word	0x20000054

08008dd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	220a      	movs	r2, #10
 8008ddc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008dde:	4b03      	ldr	r3, [pc, #12]	@ (8008dec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	20000010 	.word	0x20000010

08008df0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e009      	b.n	8008e18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	33b0      	adds	r3, #176	@ 0xb0
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	32b0      	adds	r2, #176	@ 0xb0
 8008e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e008      	b.n	8008e5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	371c      	adds	r7, #28
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	32b0      	adds	r2, #176	@ 0xb0
 8008e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d101      	bne.n	8008e8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e004      	b.n	8008e96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
	...

08008ea4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	32b0      	adds	r2, #176	@ 0xb0
 8008eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eba:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e025      	b.n	8008f16 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11f      	bne.n	8008f14 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008edc:	4b10      	ldr	r3, [pc, #64]	@ (8008f20 <USBD_CDC_TransmitPacket+0x7c>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	f003 020f 	and.w	r2, r3, #15
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	4613      	mov	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4403      	add	r3, r0
 8008ef6:	3314      	adds	r3, #20
 8008ef8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008efa:	4b09      	ldr	r3, [pc, #36]	@ (8008f20 <USBD_CDC_TransmitPacket+0x7c>)
 8008efc:	7819      	ldrb	r1, [r3, #0]
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f002 f81d 	bl	800af4a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	20000097 	.word	0x20000097

08008f24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	32b0      	adds	r2, #176	@ 0xb0
 8008f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	32b0      	adds	r2, #176	@ 0xb0
 8008f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e018      	b.n	8008f84 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	7c1b      	ldrb	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f8c <USBD_CDC_ReceivePacket+0x68>)
 8008f5c:	7819      	ldrb	r1, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f002 f80f 	bl	800af8c <USBD_LL_PrepareReceive>
 8008f6e:	e008      	b.n	8008f82 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f70:	4b06      	ldr	r3, [pc, #24]	@ (8008f8c <USBD_CDC_ReceivePacket+0x68>)
 8008f72:	7819      	ldrb	r1, [r3, #0]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f7a:	2340      	movs	r3, #64	@ 0x40
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f002 f805 	bl	800af8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20000098 	.word	0x20000098

08008f90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e01f      	b.n	8008fe8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	79fa      	ldrb	r2, [r7, #7]
 8008fda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f001 fe7f 	bl	800ace0 <USBD_LL_Init>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009004:	2303      	movs	r3, #3
 8009006:	e025      	b.n	8009054 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	32ae      	adds	r2, #174	@ 0xae
 800901a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800901e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00f      	beq.n	8009044 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	32ae      	adds	r2, #174	@ 0xae
 800902e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009034:	f107 020e 	add.w	r2, r7, #14
 8009038:	4610      	mov	r0, r2
 800903a:	4798      	blx	r3
 800903c:	4602      	mov	r2, r0
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f001 fe87 	bl	800ad78 <USBD_LL_Start>
 800906a:	4603      	mov	r3, r0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800907c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800907e:	4618      	mov	r0, r3
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d009      	beq.n	80090b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	78fa      	ldrb	r2, [r7, #3]
 80090ae:	4611      	mov	r1, r2
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	4798      	blx	r3
 80090b4:	4603      	mov	r3, r0
 80090b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b084      	sub	sp, #16
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	460b      	mov	r3, r1
 80090cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	78fa      	ldrb	r2, [r7, #3]
 80090dc:	4611      	mov	r1, r2
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	4798      	blx	r3
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80090e8:	2303      	movs	r3, #3
 80090ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b084      	sub	sp, #16
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	4618      	mov	r0, r3
 800910a:	f001 f922 	bl	800a352 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800911c:	461a      	mov	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800912a:	f003 031f 	and.w	r3, r3, #31
 800912e:	2b02      	cmp	r3, #2
 8009130:	d01a      	beq.n	8009168 <USBD_LL_SetupStage+0x72>
 8009132:	2b02      	cmp	r3, #2
 8009134:	d822      	bhi.n	800917c <USBD_LL_SetupStage+0x86>
 8009136:	2b00      	cmp	r3, #0
 8009138:	d002      	beq.n	8009140 <USBD_LL_SetupStage+0x4a>
 800913a:	2b01      	cmp	r3, #1
 800913c:	d00a      	beq.n	8009154 <USBD_LL_SetupStage+0x5e>
 800913e:	e01d      	b.n	800917c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fb77 	bl	800983c <USBD_StdDevReq>
 800914e:	4603      	mov	r3, r0
 8009150:	73fb      	strb	r3, [r7, #15]
      break;
 8009152:	e020      	b.n	8009196 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fbdf 	bl	8009920 <USBD_StdItfReq>
 8009162:	4603      	mov	r3, r0
 8009164:	73fb      	strb	r3, [r7, #15]
      break;
 8009166:	e016      	b.n	8009196 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fc41 	bl	80099f8 <USBD_StdEPReq>
 8009176:	4603      	mov	r3, r0
 8009178:	73fb      	strb	r3, [r7, #15]
      break;
 800917a:	e00c      	b.n	8009196 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009182:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009186:	b2db      	uxtb	r3, r3
 8009188:	4619      	mov	r1, r3
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f001 fe54 	bl	800ae38 <USBD_LL_StallEP>
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]
      break;
 8009194:	bf00      	nop
  }

  return ret;
 8009196:	7bfb      	ldrb	r3, [r7, #15]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	460b      	mov	r3, r1
 80091aa:	607a      	str	r2, [r7, #4]
 80091ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80091b2:	7afb      	ldrb	r3, [r7, #11]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d177      	bne.n	80092a8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80091be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	f040 80a1 	bne.w	800930e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	8992      	ldrh	r2, [r2, #12]
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d91c      	bls.n	8009212 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	8992      	ldrh	r2, [r2, #12]
 80091e0:	1a9a      	subs	r2, r3, r2
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	8992      	ldrh	r2, [r2, #12]
 80091ee:	441a      	add	r2, r3
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	6919      	ldr	r1, [r3, #16]
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	899b      	ldrh	r3, [r3, #12]
 80091fc:	461a      	mov	r2, r3
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	4293      	cmp	r3, r2
 8009204:	bf38      	it	cc
 8009206:	4613      	movcc	r3, r2
 8009208:	461a      	mov	r2, r3
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f001 f9a8 	bl	800a560 <USBD_CtlContinueRx>
 8009210:	e07d      	b.n	800930e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009218:	f003 031f 	and.w	r3, r3, #31
 800921c:	2b02      	cmp	r3, #2
 800921e:	d014      	beq.n	800924a <USBD_LL_DataOutStage+0xaa>
 8009220:	2b02      	cmp	r3, #2
 8009222:	d81d      	bhi.n	8009260 <USBD_LL_DataOutStage+0xc0>
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <USBD_LL_DataOutStage+0x8e>
 8009228:	2b01      	cmp	r3, #1
 800922a:	d003      	beq.n	8009234 <USBD_LL_DataOutStage+0x94>
 800922c:	e018      	b.n	8009260 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800922e:	2300      	movs	r3, #0
 8009230:	75bb      	strb	r3, [r7, #22]
            break;
 8009232:	e018      	b.n	8009266 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800923a:	b2db      	uxtb	r3, r3
 800923c:	4619      	mov	r1, r3
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 fa6e 	bl	8009720 <USBD_CoreFindIF>
 8009244:	4603      	mov	r3, r0
 8009246:	75bb      	strb	r3, [r7, #22]
            break;
 8009248:	e00d      	b.n	8009266 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009250:	b2db      	uxtb	r3, r3
 8009252:	4619      	mov	r1, r3
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f000 fa70 	bl	800973a <USBD_CoreFindEP>
 800925a:	4603      	mov	r3, r0
 800925c:	75bb      	strb	r3, [r7, #22]
            break;
 800925e:	e002      	b.n	8009266 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009260:	2300      	movs	r3, #0
 8009262:	75bb      	strb	r3, [r7, #22]
            break;
 8009264:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009266:	7dbb      	ldrb	r3, [r7, #22]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d119      	bne.n	80092a0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b03      	cmp	r3, #3
 8009276:	d113      	bne.n	80092a0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009278:	7dba      	ldrb	r2, [r7, #22]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	32ae      	adds	r2, #174	@ 0xae
 800927e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00b      	beq.n	80092a0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8009288:	7dba      	ldrb	r2, [r7, #22]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009290:	7dba      	ldrb	r2, [r7, #22]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	32ae      	adds	r2, #174	@ 0xae
 8009296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f001 f96e 	bl	800a582 <USBD_CtlSendStatus>
 80092a6:	e032      	b.n	800930e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80092a8:	7afb      	ldrb	r3, [r7, #11]
 80092aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	4619      	mov	r1, r3
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f000 fa41 	bl	800973a <USBD_CoreFindEP>
 80092b8:	4603      	mov	r3, r0
 80092ba:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092bc:	7dbb      	ldrb	r3, [r7, #22]
 80092be:	2bff      	cmp	r3, #255	@ 0xff
 80092c0:	d025      	beq.n	800930e <USBD_LL_DataOutStage+0x16e>
 80092c2:	7dbb      	ldrb	r3, [r7, #22]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d122      	bne.n	800930e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d117      	bne.n	8009304 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80092d4:	7dba      	ldrb	r2, [r7, #22]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	32ae      	adds	r2, #174	@ 0xae
 80092da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00f      	beq.n	8009304 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80092e4:	7dba      	ldrb	r2, [r7, #22]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80092ec:	7dba      	ldrb	r2, [r7, #22]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	32ae      	adds	r2, #174	@ 0xae
 80092f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	7afa      	ldrb	r2, [r7, #11]
 80092fa:	4611      	mov	r1, r2
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	4798      	blx	r3
 8009300:	4603      	mov	r3, r0
 8009302:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009304:	7dfb      	ldrb	r3, [r7, #23]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	e000      	b.n	8009310 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	460b      	mov	r3, r1
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8009326:	7afb      	ldrb	r3, [r7, #11]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d178      	bne.n	800941e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3314      	adds	r3, #20
 8009330:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009338:	2b02      	cmp	r3, #2
 800933a:	d163      	bne.n	8009404 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	8992      	ldrh	r2, [r2, #12]
 8009344:	4293      	cmp	r3, r2
 8009346:	d91c      	bls.n	8009382 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	8992      	ldrh	r2, [r2, #12]
 8009350:	1a9a      	subs	r2, r3, r2
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	8992      	ldrh	r2, [r2, #12]
 800935e:	441a      	add	r2, r3
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	6919      	ldr	r1, [r3, #16]
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	461a      	mov	r2, r3
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f001 f8c4 	bl	800a4fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009374:	2300      	movs	r3, #0
 8009376:	2200      	movs	r2, #0
 8009378:	2100      	movs	r1, #0
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f001 fe06 	bl	800af8c <USBD_LL_PrepareReceive>
 8009380:	e040      	b.n	8009404 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	899b      	ldrh	r3, [r3, #12]
 8009386:	461a      	mov	r2, r3
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	429a      	cmp	r2, r3
 800938e:	d11c      	bne.n	80093ca <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009398:	4293      	cmp	r3, r2
 800939a:	d316      	bcc.n	80093ca <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d20f      	bcs.n	80093ca <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80093aa:	2200      	movs	r2, #0
 80093ac:	2100      	movs	r1, #0
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f001 f8a4 	bl	800a4fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093bc:	2300      	movs	r3, #0
 80093be:	2200      	movs	r2, #0
 80093c0:	2100      	movs	r1, #0
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f001 fde2 	bl	800af8c <USBD_LL_PrepareReceive>
 80093c8:	e01c      	b.n	8009404 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d10f      	bne.n	80093f6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d009      	beq.n	80093f6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80093f6:	2180      	movs	r1, #128	@ 0x80
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f001 fd1d 	bl	800ae38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f001 f8d2 	bl	800a5a8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d03a      	beq.n	8009484 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f7ff fe30 	bl	8009074 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800941c:	e032      	b.n	8009484 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009424:	b2db      	uxtb	r3, r3
 8009426:	4619      	mov	r1, r3
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 f986 	bl	800973a <USBD_CoreFindEP>
 800942e:	4603      	mov	r3, r0
 8009430:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009432:	7dfb      	ldrb	r3, [r7, #23]
 8009434:	2bff      	cmp	r3, #255	@ 0xff
 8009436:	d025      	beq.n	8009484 <USBD_LL_DataInStage+0x16c>
 8009438:	7dfb      	ldrb	r3, [r7, #23]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d122      	bne.n	8009484 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b03      	cmp	r3, #3
 8009448:	d11c      	bne.n	8009484 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800944a:	7dfa      	ldrb	r2, [r7, #23]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	32ae      	adds	r2, #174	@ 0xae
 8009450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d014      	beq.n	8009484 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800945a:	7dfa      	ldrb	r2, [r7, #23]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009462:	7dfa      	ldrb	r2, [r7, #23]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	32ae      	adds	r2, #174	@ 0xae
 8009468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	7afa      	ldrb	r2, [r7, #11]
 8009470:	4611      	mov	r1, r2
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	4798      	blx	r3
 8009476:	4603      	mov	r3, r0
 8009478:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800947a:	7dbb      	ldrb	r3, [r7, #22]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8009480:	7dbb      	ldrb	r3, [r7, #22]
 8009482:	e000      	b.n	8009486 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d014      	beq.n	80094f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00e      	beq.n	80094f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	6852      	ldr	r2, [r2, #4]
 80094e2:	b2d2      	uxtb	r2, r2
 80094e4:	4611      	mov	r1, r2
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4798      	blx	r3
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d001      	beq.n	80094f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80094f0:	2303      	movs	r3, #3
 80094f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094f4:	2340      	movs	r3, #64	@ 0x40
 80094f6:	2200      	movs	r2, #0
 80094f8:	2100      	movs	r1, #0
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f001 fc57 	bl	800adae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2240      	movs	r2, #64	@ 0x40
 800950c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009510:	2340      	movs	r3, #64	@ 0x40
 8009512:	2200      	movs	r2, #0
 8009514:	2180      	movs	r1, #128	@ 0x80
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f001 fc49 	bl	800adae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2240      	movs	r2, #64	@ 0x40
 8009528:	841a      	strh	r2, [r3, #32]

  return ret;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	78fa      	ldrb	r2, [r7, #3]
 8009544:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009562:	b2db      	uxtb	r3, r3
 8009564:	2b04      	cmp	r3, #4
 8009566:	d006      	beq.n	8009576 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800956e:	b2da      	uxtb	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2204      	movs	r2, #4
 800957a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b04      	cmp	r3, #4
 800959e:	d106      	bne.n	80095ae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b03      	cmp	r3, #3
 80095ce:	d110      	bne.n	80095f2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00b      	beq.n	80095f2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d005      	beq.n	80095f2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	32ae      	adds	r2, #174	@ 0xae
 8009612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800961a:	2303      	movs	r3, #3
 800961c:	e01c      	b.n	8009658 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b03      	cmp	r3, #3
 8009628:	d115      	bne.n	8009656 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	32ae      	adds	r2, #174	@ 0xae
 8009634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00b      	beq.n	8009656 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	32ae      	adds	r2, #174	@ 0xae
 8009648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	78fa      	ldrb	r2, [r7, #3]
 8009650:	4611      	mov	r1, r2
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	32ae      	adds	r2, #174	@ 0xae
 8009676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800967e:	2303      	movs	r3, #3
 8009680:	e01c      	b.n	80096bc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b03      	cmp	r3, #3
 800968c:	d115      	bne.n	80096ba <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	32ae      	adds	r2, #174	@ 0xae
 8009698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800969c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00b      	beq.n	80096ba <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	32ae      	adds	r2, #174	@ 0xae
 80096ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b2:	78fa      	ldrb	r2, [r7, #3]
 80096b4:	4611      	mov	r1, r2
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00e      	beq.n	8009716 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	6852      	ldr	r2, [r2, #4]
 8009704:	b2d2      	uxtb	r2, r2
 8009706:	4611      	mov	r1, r2
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	4798      	blx	r3
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009712:	2303      	movs	r3, #3
 8009714:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009716:	7bfb      	ldrb	r3, [r7, #15]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	460b      	mov	r3, r1
 800972a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800972c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800972e:	4618      	mov	r0, r3
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800973a:	b480      	push	{r7}
 800973c:	b083      	sub	sp, #12
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009746:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009748:	4618      	mov	r0, r3
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009768:	2300      	movs	r3, #0
 800976a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	885b      	ldrh	r3, [r3, #2]
 8009770:	b29b      	uxth	r3, r3
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	7812      	ldrb	r2, [r2, #0]
 8009776:	4293      	cmp	r3, r2
 8009778:	d91f      	bls.n	80097ba <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009780:	e013      	b.n	80097aa <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009782:	f107 030a 	add.w	r3, r7, #10
 8009786:	4619      	mov	r1, r3
 8009788:	6978      	ldr	r0, [r7, #20]
 800978a:	f000 f81b 	bl	80097c4 <USBD_GetNextDesc>
 800978e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	785b      	ldrb	r3, [r3, #1]
 8009794:	2b05      	cmp	r3, #5
 8009796:	d108      	bne.n	80097aa <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	789b      	ldrb	r3, [r3, #2]
 80097a0:	78fa      	ldrb	r2, [r7, #3]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d008      	beq.n	80097b8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	885b      	ldrh	r3, [r3, #2]
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	897b      	ldrh	r3, [r7, #10]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d8e5      	bhi.n	8009782 <USBD_GetEpDesc+0x2e>
 80097b6:	e000      	b.n	80097ba <USBD_GetEpDesc+0x66>
          break;
 80097b8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80097ba:	693b      	ldr	r3, [r7, #16]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	7812      	ldrb	r2, [r2, #0]
 80097da:	4413      	add	r3, r2
 80097dc:	b29a      	uxth	r2, r3
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4413      	add	r3, r2
 80097ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80097ee:	68fb      	ldr	r3, [r7, #12]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	3301      	adds	r3, #1
 8009812:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800981a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800981e:	021b      	lsls	r3, r3, #8
 8009820:	b21a      	sxth	r2, r3
 8009822:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009826:	4313      	orrs	r3, r2
 8009828:	b21b      	sxth	r3, r3
 800982a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800982c:	89fb      	ldrh	r3, [r7, #14]
}
 800982e:	4618      	mov	r0, r3
 8009830:	371c      	adds	r7, #28
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
	...

0800983c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009852:	2b40      	cmp	r3, #64	@ 0x40
 8009854:	d005      	beq.n	8009862 <USBD_StdDevReq+0x26>
 8009856:	2b40      	cmp	r3, #64	@ 0x40
 8009858:	d857      	bhi.n	800990a <USBD_StdDevReq+0xce>
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00f      	beq.n	800987e <USBD_StdDevReq+0x42>
 800985e:	2b20      	cmp	r3, #32
 8009860:	d153      	bne.n	800990a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	32ae      	adds	r2, #174	@ 0xae
 800986c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	4798      	blx	r3
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]
      break;
 800987c:	e04a      	b.n	8009914 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	785b      	ldrb	r3, [r3, #1]
 8009882:	2b09      	cmp	r3, #9
 8009884:	d83b      	bhi.n	80098fe <USBD_StdDevReq+0xc2>
 8009886:	a201      	add	r2, pc, #4	@ (adr r2, 800988c <USBD_StdDevReq+0x50>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	080098e1 	.word	0x080098e1
 8009890:	080098f5 	.word	0x080098f5
 8009894:	080098ff 	.word	0x080098ff
 8009898:	080098eb 	.word	0x080098eb
 800989c:	080098ff 	.word	0x080098ff
 80098a0:	080098bf 	.word	0x080098bf
 80098a4:	080098b5 	.word	0x080098b5
 80098a8:	080098ff 	.word	0x080098ff
 80098ac:	080098d7 	.word	0x080098d7
 80098b0:	080098c9 	.word	0x080098c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fa3e 	bl	8009d38 <USBD_GetDescriptor>
          break;
 80098bc:	e024      	b.n	8009908 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fba3 	bl	800a00c <USBD_SetAddress>
          break;
 80098c6:	e01f      	b.n	8009908 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fbe2 	bl	800a094 <USBD_SetConfig>
 80098d0:	4603      	mov	r3, r0
 80098d2:	73fb      	strb	r3, [r7, #15]
          break;
 80098d4:	e018      	b.n	8009908 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fc85 	bl	800a1e8 <USBD_GetConfig>
          break;
 80098de:	e013      	b.n	8009908 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fcb6 	bl	800a254 <USBD_GetStatus>
          break;
 80098e8:	e00e      	b.n	8009908 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fce5 	bl	800a2bc <USBD_SetFeature>
          break;
 80098f2:	e009      	b.n	8009908 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fd09 	bl	800a30e <USBD_ClrFeature>
          break;
 80098fc:	e004      	b.n	8009908 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fd60 	bl	800a3c6 <USBD_CtlError>
          break;
 8009906:	bf00      	nop
      }
      break;
 8009908:	e004      	b.n	8009914 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fd5a 	bl	800a3c6 <USBD_CtlError>
      break;
 8009912:	bf00      	nop
  }

  return ret;
 8009914:	7bfb      	ldrb	r3, [r7, #15]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop

08009920 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009936:	2b40      	cmp	r3, #64	@ 0x40
 8009938:	d005      	beq.n	8009946 <USBD_StdItfReq+0x26>
 800993a:	2b40      	cmp	r3, #64	@ 0x40
 800993c:	d852      	bhi.n	80099e4 <USBD_StdItfReq+0xc4>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <USBD_StdItfReq+0x26>
 8009942:	2b20      	cmp	r3, #32
 8009944:	d14e      	bne.n	80099e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800994c:	b2db      	uxtb	r3, r3
 800994e:	3b01      	subs	r3, #1
 8009950:	2b02      	cmp	r3, #2
 8009952:	d840      	bhi.n	80099d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	889b      	ldrh	r3, [r3, #4]
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b01      	cmp	r3, #1
 800995c:	d836      	bhi.n	80099cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	889b      	ldrh	r3, [r3, #4]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7ff feda 	bl	8009720 <USBD_CoreFindIF>
 800996c:	4603      	mov	r3, r0
 800996e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	2bff      	cmp	r3, #255	@ 0xff
 8009974:	d01d      	beq.n	80099b2 <USBD_StdItfReq+0x92>
 8009976:	7bbb      	ldrb	r3, [r7, #14]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d11a      	bne.n	80099b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800997c:	7bba      	ldrb	r2, [r7, #14]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	32ae      	adds	r2, #174	@ 0xae
 8009982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00f      	beq.n	80099ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800998c:	7bba      	ldrb	r2, [r7, #14]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009994:	7bba      	ldrb	r2, [r7, #14]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	32ae      	adds	r2, #174	@ 0xae
 800999a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	4798      	blx	r3
 80099a6:	4603      	mov	r3, r0
 80099a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80099aa:	e004      	b.n	80099b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80099ac:	2303      	movs	r3, #3
 80099ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80099b0:	e001      	b.n	80099b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80099b2:	2303      	movs	r3, #3
 80099b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	88db      	ldrh	r3, [r3, #6]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d110      	bne.n	80099e0 <USBD_StdItfReq+0xc0>
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10d      	bne.n	80099e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fddc 	bl	800a582 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80099ca:	e009      	b.n	80099e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fcf9 	bl	800a3c6 <USBD_CtlError>
          break;
 80099d4:	e004      	b.n	80099e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fcf4 	bl	800a3c6 <USBD_CtlError>
          break;
 80099de:	e000      	b.n	80099e2 <USBD_StdItfReq+0xc2>
          break;
 80099e0:	bf00      	nop
      }
      break;
 80099e2:	e004      	b.n	80099ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fced 	bl	800a3c6 <USBD_CtlError>
      break;
 80099ec:	bf00      	nop
  }

  return ret;
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	889b      	ldrh	r3, [r3, #4]
 8009a0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a14:	2b40      	cmp	r3, #64	@ 0x40
 8009a16:	d007      	beq.n	8009a28 <USBD_StdEPReq+0x30>
 8009a18:	2b40      	cmp	r3, #64	@ 0x40
 8009a1a:	f200 8181 	bhi.w	8009d20 <USBD_StdEPReq+0x328>
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d02a      	beq.n	8009a78 <USBD_StdEPReq+0x80>
 8009a22:	2b20      	cmp	r3, #32
 8009a24:	f040 817c 	bne.w	8009d20 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff fe84 	bl	800973a <USBD_CoreFindEP>
 8009a32:	4603      	mov	r3, r0
 8009a34:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a36:	7b7b      	ldrb	r3, [r7, #13]
 8009a38:	2bff      	cmp	r3, #255	@ 0xff
 8009a3a:	f000 8176 	beq.w	8009d2a <USBD_StdEPReq+0x332>
 8009a3e:	7b7b      	ldrb	r3, [r7, #13]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f040 8172 	bne.w	8009d2a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8009a46:	7b7a      	ldrb	r2, [r7, #13]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009a4e:	7b7a      	ldrb	r2, [r7, #13]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	32ae      	adds	r2, #174	@ 0xae
 8009a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f000 8165 	beq.w	8009d2a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009a60:	7b7a      	ldrb	r2, [r7, #13]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	32ae      	adds	r2, #174	@ 0xae
 8009a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	4798      	blx	r3
 8009a72:	4603      	mov	r3, r0
 8009a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a76:	e158      	b.n	8009d2a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	785b      	ldrb	r3, [r3, #1]
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	d008      	beq.n	8009a92 <USBD_StdEPReq+0x9a>
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	f300 8147 	bgt.w	8009d14 <USBD_StdEPReq+0x31c>
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 809b 	beq.w	8009bc2 <USBD_StdEPReq+0x1ca>
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d03c      	beq.n	8009b0a <USBD_StdEPReq+0x112>
 8009a90:	e140      	b.n	8009d14 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d002      	beq.n	8009aa4 <USBD_StdEPReq+0xac>
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d016      	beq.n	8009ad0 <USBD_StdEPReq+0xd8>
 8009aa2:	e02c      	b.n	8009afe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009aa4:	7bbb      	ldrb	r3, [r7, #14]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00d      	beq.n	8009ac6 <USBD_StdEPReq+0xce>
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
 8009aac:	2b80      	cmp	r3, #128	@ 0x80
 8009aae:	d00a      	beq.n	8009ac6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ab0:	7bbb      	ldrb	r3, [r7, #14]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f001 f9bf 	bl	800ae38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009aba:	2180      	movs	r1, #128	@ 0x80
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f001 f9bb 	bl	800ae38 <USBD_LL_StallEP>
 8009ac2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ac4:	e020      	b.n	8009b08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fc7c 	bl	800a3c6 <USBD_CtlError>
              break;
 8009ace:	e01b      	b.n	8009b08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	885b      	ldrh	r3, [r3, #2]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10e      	bne.n	8009af6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00b      	beq.n	8009af6 <USBD_StdEPReq+0xfe>
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
 8009ae0:	2b80      	cmp	r3, #128	@ 0x80
 8009ae2:	d008      	beq.n	8009af6 <USBD_StdEPReq+0xfe>
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	88db      	ldrh	r3, [r3, #6]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d104      	bne.n	8009af6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 f9a1 	bl	800ae38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fd43 	bl	800a582 <USBD_CtlSendStatus>

              break;
 8009afc:	e004      	b.n	8009b08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fc60 	bl	800a3c6 <USBD_CtlError>
              break;
 8009b06:	bf00      	nop
          }
          break;
 8009b08:	e109      	b.n	8009d1e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d002      	beq.n	8009b1c <USBD_StdEPReq+0x124>
 8009b16:	2b03      	cmp	r3, #3
 8009b18:	d016      	beq.n	8009b48 <USBD_StdEPReq+0x150>
 8009b1a:	e04b      	b.n	8009bb4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00d      	beq.n	8009b3e <USBD_StdEPReq+0x146>
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
 8009b24:	2b80      	cmp	r3, #128	@ 0x80
 8009b26:	d00a      	beq.n	8009b3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f001 f983 	bl	800ae38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b32:	2180      	movs	r1, #128	@ 0x80
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f001 f97f 	bl	800ae38 <USBD_LL_StallEP>
 8009b3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b3c:	e040      	b.n	8009bc0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fc40 	bl	800a3c6 <USBD_CtlError>
              break;
 8009b46:	e03b      	b.n	8009bc0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	885b      	ldrh	r3, [r3, #2]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d136      	bne.n	8009bbe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d004      	beq.n	8009b64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 f989 	bl	800ae76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fd0c 	bl	800a582 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b6a:	7bbb      	ldrb	r3, [r7, #14]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff fde3 	bl	800973a <USBD_CoreFindEP>
 8009b74:	4603      	mov	r3, r0
 8009b76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b78:	7b7b      	ldrb	r3, [r7, #13]
 8009b7a:	2bff      	cmp	r3, #255	@ 0xff
 8009b7c:	d01f      	beq.n	8009bbe <USBD_StdEPReq+0x1c6>
 8009b7e:	7b7b      	ldrb	r3, [r7, #13]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d11c      	bne.n	8009bbe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009b84:	7b7a      	ldrb	r2, [r7, #13]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009b8c:	7b7a      	ldrb	r2, [r7, #13]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	32ae      	adds	r2, #174	@ 0xae
 8009b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d010      	beq.n	8009bbe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b9c:	7b7a      	ldrb	r2, [r7, #13]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	32ae      	adds	r2, #174	@ 0xae
 8009ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	4798      	blx	r3
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009bb2:	e004      	b.n	8009bbe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fc05 	bl	800a3c6 <USBD_CtlError>
              break;
 8009bbc:	e000      	b.n	8009bc0 <USBD_StdEPReq+0x1c8>
              break;
 8009bbe:	bf00      	nop
          }
          break;
 8009bc0:	e0ad      	b.n	8009d1e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d002      	beq.n	8009bd4 <USBD_StdEPReq+0x1dc>
 8009bce:	2b03      	cmp	r3, #3
 8009bd0:	d033      	beq.n	8009c3a <USBD_StdEPReq+0x242>
 8009bd2:	e099      	b.n	8009d08 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d007      	beq.n	8009bea <USBD_StdEPReq+0x1f2>
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b80      	cmp	r3, #128	@ 0x80
 8009bde:	d004      	beq.n	8009bea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fbef 	bl	800a3c6 <USBD_CtlError>
                break;
 8009be8:	e093      	b.n	8009d12 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	da0b      	bge.n	8009c0a <USBD_StdEPReq+0x212>
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	3310      	adds	r3, #16
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	4413      	add	r3, r2
 8009c06:	3304      	adds	r3, #4
 8009c08:	e00b      	b.n	8009c22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c10:	4613      	mov	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4413      	add	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	4413      	add	r3, r2
 8009c20:	3304      	adds	r3, #4
 8009c22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2200      	movs	r2, #0
 8009c28:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	330e      	adds	r3, #14
 8009c2e:	2202      	movs	r2, #2
 8009c30:	4619      	mov	r1, r3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fc44 	bl	800a4c0 <USBD_CtlSendData>
              break;
 8009c38:	e06b      	b.n	8009d12 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	da11      	bge.n	8009c66 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c42:	7bbb      	ldrb	r3, [r7, #14]
 8009c44:	f003 020f 	and.w	r2, r3, #15
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	440b      	add	r3, r1
 8009c54:	3323      	adds	r3, #35	@ 0x23
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d117      	bne.n	8009c8c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fbb1 	bl	800a3c6 <USBD_CtlError>
                  break;
 8009c64:	e055      	b.n	8009d12 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c66:	7bbb      	ldrb	r3, [r7, #14]
 8009c68:	f003 020f 	and.w	r2, r3, #15
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	440b      	add	r3, r1
 8009c78:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d104      	bne.n	8009c8c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fb9e 	bl	800a3c6 <USBD_CtlError>
                  break;
 8009c8a:	e042      	b.n	8009d12 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	da0b      	bge.n	8009cac <USBD_StdEPReq+0x2b4>
 8009c94:	7bbb      	ldrb	r3, [r7, #14]
 8009c96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	3310      	adds	r3, #16
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	3304      	adds	r3, #4
 8009caa:	e00b      	b.n	8009cc4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cc6:	7bbb      	ldrb	r3, [r7, #14]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <USBD_StdEPReq+0x2da>
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	2b80      	cmp	r3, #128	@ 0x80
 8009cd0:	d103      	bne.n	8009cda <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	739a      	strb	r2, [r3, #14]
 8009cd8:	e00e      	b.n	8009cf8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009cda:	7bbb      	ldrb	r3, [r7, #14]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f001 f8e8 	bl	800aeb4 <USBD_LL_IsStallEP>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2201      	movs	r2, #1
 8009cee:	739a      	strb	r2, [r3, #14]
 8009cf0:	e002      	b.n	8009cf8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	330e      	adds	r3, #14
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fbdd 	bl	800a4c0 <USBD_CtlSendData>
              break;
 8009d06:	e004      	b.n	8009d12 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fb5b 	bl	800a3c6 <USBD_CtlError>
              break;
 8009d10:	bf00      	nop
          }
          break;
 8009d12:	e004      	b.n	8009d1e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fb55 	bl	800a3c6 <USBD_CtlError>
          break;
 8009d1c:	bf00      	nop
      }
      break;
 8009d1e:	e005      	b.n	8009d2c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fb4f 	bl	800a3c6 <USBD_CtlError>
      break;
 8009d28:	e000      	b.n	8009d2c <USBD_StdEPReq+0x334>
      break;
 8009d2a:	bf00      	nop
  }

  return ret;
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	885b      	ldrh	r3, [r3, #2]
 8009d52:	0a1b      	lsrs	r3, r3, #8
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	2b06      	cmp	r3, #6
 8009d5a:	f200 8128 	bhi.w	8009fae <USBD_GetDescriptor+0x276>
 8009d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d64 <USBD_GetDescriptor+0x2c>)
 8009d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d64:	08009d81 	.word	0x08009d81
 8009d68:	08009d99 	.word	0x08009d99
 8009d6c:	08009dd9 	.word	0x08009dd9
 8009d70:	08009faf 	.word	0x08009faf
 8009d74:	08009faf 	.word	0x08009faf
 8009d78:	08009f4f 	.word	0x08009f4f
 8009d7c:	08009f7b 	.word	0x08009f7b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	7c12      	ldrb	r2, [r2, #16]
 8009d8c:	f107 0108 	add.w	r1, r7, #8
 8009d90:	4610      	mov	r0, r2
 8009d92:	4798      	blx	r3
 8009d94:	60f8      	str	r0, [r7, #12]
      break;
 8009d96:	e112      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	7c1b      	ldrb	r3, [r3, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10d      	bne.n	8009dbc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da8:	f107 0208 	add.w	r2, r7, #8
 8009dac:	4610      	mov	r0, r2
 8009dae:	4798      	blx	r3
 8009db0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3301      	adds	r3, #1
 8009db6:	2202      	movs	r2, #2
 8009db8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dba:	e100      	b.n	8009fbe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc4:	f107 0208 	add.w	r2, r7, #8
 8009dc8:	4610      	mov	r0, r2
 8009dca:	4798      	blx	r3
 8009dcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	701a      	strb	r2, [r3, #0]
      break;
 8009dd6:	e0f2      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	885b      	ldrh	r3, [r3, #2]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	f200 80ac 	bhi.w	8009f3c <USBD_GetDescriptor+0x204>
 8009de4:	a201      	add	r2, pc, #4	@ (adr r2, 8009dec <USBD_GetDescriptor+0xb4>)
 8009de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dea:	bf00      	nop
 8009dec:	08009e05 	.word	0x08009e05
 8009df0:	08009e39 	.word	0x08009e39
 8009df4:	08009e6d 	.word	0x08009e6d
 8009df8:	08009ea1 	.word	0x08009ea1
 8009dfc:	08009ed5 	.word	0x08009ed5
 8009e00:	08009f09 	.word	0x08009f09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00b      	beq.n	8009e28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	7c12      	ldrb	r2, [r2, #16]
 8009e1c:	f107 0108 	add.w	r1, r7, #8
 8009e20:	4610      	mov	r0, r2
 8009e22:	4798      	blx	r3
 8009e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e26:	e091      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 facb 	bl	800a3c6 <USBD_CtlError>
            err++;
 8009e30:	7afb      	ldrb	r3, [r7, #11]
 8009e32:	3301      	adds	r3, #1
 8009e34:	72fb      	strb	r3, [r7, #11]
          break;
 8009e36:	e089      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00b      	beq.n	8009e5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	7c12      	ldrb	r2, [r2, #16]
 8009e50:	f107 0108 	add.w	r1, r7, #8
 8009e54:	4610      	mov	r0, r2
 8009e56:	4798      	blx	r3
 8009e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e5a:	e077      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fab1 	bl	800a3c6 <USBD_CtlError>
            err++;
 8009e64:	7afb      	ldrb	r3, [r7, #11]
 8009e66:	3301      	adds	r3, #1
 8009e68:	72fb      	strb	r3, [r7, #11]
          break;
 8009e6a:	e06f      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00b      	beq.n	8009e90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	7c12      	ldrb	r2, [r2, #16]
 8009e84:	f107 0108 	add.w	r1, r7, #8
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4798      	blx	r3
 8009e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e8e:	e05d      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fa97 	bl	800a3c6 <USBD_CtlError>
            err++;
 8009e98:	7afb      	ldrb	r3, [r7, #11]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e9e:	e055      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00b      	beq.n	8009ec4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	7c12      	ldrb	r2, [r2, #16]
 8009eb8:	f107 0108 	add.w	r1, r7, #8
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	4798      	blx	r3
 8009ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ec2:	e043      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa7d 	bl	800a3c6 <USBD_CtlError>
            err++;
 8009ecc:	7afb      	ldrb	r3, [r7, #11]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ed2:	e03b      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00b      	beq.n	8009ef8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	7c12      	ldrb	r2, [r2, #16]
 8009eec:	f107 0108 	add.w	r1, r7, #8
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	4798      	blx	r3
 8009ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ef6:	e029      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fa63 	bl	800a3c6 <USBD_CtlError>
            err++;
 8009f00:	7afb      	ldrb	r3, [r7, #11]
 8009f02:	3301      	adds	r3, #1
 8009f04:	72fb      	strb	r3, [r7, #11]
          break;
 8009f06:	e021      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00b      	beq.n	8009f2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	7c12      	ldrb	r2, [r2, #16]
 8009f20:	f107 0108 	add.w	r1, r7, #8
 8009f24:	4610      	mov	r0, r2
 8009f26:	4798      	blx	r3
 8009f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f2a:	e00f      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fa49 	bl	800a3c6 <USBD_CtlError>
            err++;
 8009f34:	7afb      	ldrb	r3, [r7, #11]
 8009f36:	3301      	adds	r3, #1
 8009f38:	72fb      	strb	r3, [r7, #11]
          break;
 8009f3a:	e007      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fa41 	bl	800a3c6 <USBD_CtlError>
          err++;
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	3301      	adds	r3, #1
 8009f48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009f4a:	bf00      	nop
      }
      break;
 8009f4c:	e037      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	7c1b      	ldrb	r3, [r3, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d109      	bne.n	8009f6a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f5e:	f107 0208 	add.w	r2, r7, #8
 8009f62:	4610      	mov	r0, r2
 8009f64:	4798      	blx	r3
 8009f66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f68:	e029      	b.n	8009fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fa2a 	bl	800a3c6 <USBD_CtlError>
        err++;
 8009f72:	7afb      	ldrb	r3, [r7, #11]
 8009f74:	3301      	adds	r3, #1
 8009f76:	72fb      	strb	r3, [r7, #11]
      break;
 8009f78:	e021      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	7c1b      	ldrb	r3, [r3, #16]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10d      	bne.n	8009f9e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f8a:	f107 0208 	add.w	r2, r7, #8
 8009f8e:	4610      	mov	r0, r2
 8009f90:	4798      	blx	r3
 8009f92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	3301      	adds	r3, #1
 8009f98:	2207      	movs	r2, #7
 8009f9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f9c:	e00f      	b.n	8009fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 fa10 	bl	800a3c6 <USBD_CtlError>
        err++;
 8009fa6:	7afb      	ldrb	r3, [r7, #11]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	72fb      	strb	r3, [r7, #11]
      break;
 8009fac:	e007      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 fa08 	bl	800a3c6 <USBD_CtlError>
      err++;
 8009fb6:	7afb      	ldrb	r3, [r7, #11]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	72fb      	strb	r3, [r7, #11]
      break;
 8009fbc:	bf00      	nop
  }

  if (err != 0U)
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d11e      	bne.n	800a002 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	88db      	ldrh	r3, [r3, #6]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d016      	beq.n	8009ffa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009fcc:	893b      	ldrh	r3, [r7, #8]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00e      	beq.n	8009ff0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	88da      	ldrh	r2, [r3, #6]
 8009fd6:	893b      	ldrh	r3, [r7, #8]
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	bf28      	it	cs
 8009fdc:	4613      	movcs	r3, r2
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fe2:	893b      	ldrh	r3, [r7, #8]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	68f9      	ldr	r1, [r7, #12]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fa69 	bl	800a4c0 <USBD_CtlSendData>
 8009fee:	e009      	b.n	800a004 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f9e7 	bl	800a3c6 <USBD_CtlError>
 8009ff8:	e004      	b.n	800a004 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fac1 	bl	800a582 <USBD_CtlSendStatus>
 800a000:	e000      	b.n	800a004 <USBD_GetDescriptor+0x2cc>
    return;
 800a002:	bf00      	nop
  }
}
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop

0800a00c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	889b      	ldrh	r3, [r3, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d131      	bne.n	800a082 <USBD_SetAddress+0x76>
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	88db      	ldrh	r3, [r3, #6]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d12d      	bne.n	800a082 <USBD_SetAddress+0x76>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	885b      	ldrh	r3, [r3, #2]
 800a02a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a02c:	d829      	bhi.n	800a082 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	885b      	ldrh	r3, [r3, #2]
 800a032:	b2db      	uxtb	r3, r3
 800a034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a038:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b03      	cmp	r3, #3
 800a044:	d104      	bne.n	800a050 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f9bc 	bl	800a3c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a04e:	e01d      	b.n	800a08c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	7bfa      	ldrb	r2, [r7, #15]
 800a054:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a058:	7bfb      	ldrb	r3, [r7, #15]
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 ff55 	bl	800af0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fa8d 	bl	800a582 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a068:	7bfb      	ldrb	r3, [r7, #15]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d004      	beq.n	800a078 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2202      	movs	r2, #2
 800a072:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a076:	e009      	b.n	800a08c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a080:	e004      	b.n	800a08c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 f99e 	bl	800a3c6 <USBD_CtlError>
  }
}
 800a08a:	bf00      	nop
 800a08c:	bf00      	nop
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	885b      	ldrh	r3, [r3, #2]
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	4b4e      	ldr	r3, [pc, #312]	@ (800a1e4 <USBD_SetConfig+0x150>)
 800a0aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0ac:	4b4d      	ldr	r3, [pc, #308]	@ (800a1e4 <USBD_SetConfig+0x150>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d905      	bls.n	800a0c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f985 	bl	800a3c6 <USBD_CtlError>
    return USBD_FAIL;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e08c      	b.n	800a1da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d002      	beq.n	800a0d2 <USBD_SetConfig+0x3e>
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d029      	beq.n	800a124 <USBD_SetConfig+0x90>
 800a0d0:	e075      	b.n	800a1be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a0d2:	4b44      	ldr	r3, [pc, #272]	@ (800a1e4 <USBD_SetConfig+0x150>)
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d020      	beq.n	800a11c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a0da:	4b42      	ldr	r3, [pc, #264]	@ (800a1e4 <USBD_SetConfig+0x150>)
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0e4:	4b3f      	ldr	r3, [pc, #252]	@ (800a1e4 <USBD_SetConfig+0x150>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f7fe ffcd 	bl	800908a <USBD_SetClassConfig>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d008      	beq.n	800a10c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f962 	bl	800a3c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2202      	movs	r2, #2
 800a106:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a10a:	e065      	b.n	800a1d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 fa38 	bl	800a582 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2203      	movs	r2, #3
 800a116:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a11a:	e05d      	b.n	800a1d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fa30 	bl	800a582 <USBD_CtlSendStatus>
      break;
 800a122:	e059      	b.n	800a1d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a124:	4b2f      	ldr	r3, [pc, #188]	@ (800a1e4 <USBD_SetConfig+0x150>)
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d112      	bne.n	800a152 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2202      	movs	r2, #2
 800a130:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a134:	4b2b      	ldr	r3, [pc, #172]	@ (800a1e4 <USBD_SetConfig+0x150>)
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	461a      	mov	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a13e:	4b29      	ldr	r3, [pc, #164]	@ (800a1e4 <USBD_SetConfig+0x150>)
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7fe ffbc 	bl	80090c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fa19 	bl	800a582 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a150:	e042      	b.n	800a1d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a152:	4b24      	ldr	r3, [pc, #144]	@ (800a1e4 <USBD_SetConfig+0x150>)
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	461a      	mov	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d02a      	beq.n	800a1b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	b2db      	uxtb	r3, r3
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7fe ffaa 	bl	80090c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a16e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1e4 <USBD_SetConfig+0x150>)
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a178:	4b1a      	ldr	r3, [pc, #104]	@ (800a1e4 <USBD_SetConfig+0x150>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	4619      	mov	r1, r3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7fe ff83 	bl	800908a <USBD_SetClassConfig>
 800a184:	4603      	mov	r3, r0
 800a186:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a188:	7bfb      	ldrb	r3, [r7, #15]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00f      	beq.n	800a1ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f918 	bl	800a3c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	4619      	mov	r1, r3
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7fe ff8f 	bl	80090c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a1ac:	e014      	b.n	800a1d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f9e7 	bl	800a582 <USBD_CtlSendStatus>
      break;
 800a1b4:	e010      	b.n	800a1d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f9e3 	bl	800a582 <USBD_CtlSendStatus>
      break;
 800a1bc:	e00c      	b.n	800a1d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f900 	bl	800a3c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1c6:	4b07      	ldr	r3, [pc, #28]	@ (800a1e4 <USBD_SetConfig+0x150>)
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7fe ff78 	bl	80090c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a1d6:	bf00      	nop
  }

  return ret;
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	2001cd90 	.word	0x2001cd90

0800a1e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	88db      	ldrh	r3, [r3, #6]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d004      	beq.n	800a204 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f8e2 	bl	800a3c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a202:	e023      	b.n	800a24c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	dc02      	bgt.n	800a216 <USBD_GetConfig+0x2e>
 800a210:	2b00      	cmp	r3, #0
 800a212:	dc03      	bgt.n	800a21c <USBD_GetConfig+0x34>
 800a214:	e015      	b.n	800a242 <USBD_GetConfig+0x5a>
 800a216:	2b03      	cmp	r3, #3
 800a218:	d00b      	beq.n	800a232 <USBD_GetConfig+0x4a>
 800a21a:	e012      	b.n	800a242 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3308      	adds	r3, #8
 800a226:	2201      	movs	r2, #1
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f948 	bl	800a4c0 <USBD_CtlSendData>
        break;
 800a230:	e00c      	b.n	800a24c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	3304      	adds	r3, #4
 800a236:	2201      	movs	r2, #1
 800a238:	4619      	mov	r1, r3
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f940 	bl	800a4c0 <USBD_CtlSendData>
        break;
 800a240:	e004      	b.n	800a24c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f8be 	bl	800a3c6 <USBD_CtlError>
        break;
 800a24a:	bf00      	nop
}
 800a24c:	bf00      	nop
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a264:	b2db      	uxtb	r3, r3
 800a266:	3b01      	subs	r3, #1
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d81e      	bhi.n	800a2aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	88db      	ldrh	r3, [r3, #6]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d004      	beq.n	800a27e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 f8a5 	bl	800a3c6 <USBD_CtlError>
        break;
 800a27c:	e01a      	b.n	800a2b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d005      	beq.n	800a29a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	f043 0202 	orr.w	r2, r3, #2
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	330c      	adds	r3, #12
 800a29e:	2202      	movs	r2, #2
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f90c 	bl	800a4c0 <USBD_CtlSendData>
      break;
 800a2a8:	e004      	b.n	800a2b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f88a 	bl	800a3c6 <USBD_CtlError>
      break;
 800a2b2:	bf00      	nop
  }
}
 800a2b4:	bf00      	nop
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	885b      	ldrh	r3, [r3, #2]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d107      	bne.n	800a2de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f953 	bl	800a582 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a2dc:	e013      	b.n	800a306 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	885b      	ldrh	r3, [r3, #2]
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d10b      	bne.n	800a2fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	889b      	ldrh	r3, [r3, #4]
 800a2ea:	0a1b      	lsrs	r3, r3, #8
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f943 	bl	800a582 <USBD_CtlSendStatus>
}
 800a2fc:	e003      	b.n	800a306 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f860 	bl	800a3c6 <USBD_CtlError>
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	3b01      	subs	r3, #1
 800a322:	2b02      	cmp	r3, #2
 800a324:	d80b      	bhi.n	800a33e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	885b      	ldrh	r3, [r3, #2]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d10c      	bne.n	800a348 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 f923 	bl	800a582 <USBD_CtlSendStatus>
      }
      break;
 800a33c:	e004      	b.n	800a348 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f840 	bl	800a3c6 <USBD_CtlError>
      break;
 800a346:	e000      	b.n	800a34a <USBD_ClrFeature+0x3c>
      break;
 800a348:	bf00      	nop
  }
}
 800a34a:	bf00      	nop
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	781a      	ldrb	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3301      	adds	r3, #1
 800a36c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	781a      	ldrb	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3301      	adds	r3, #1
 800a37a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f7ff fa3d 	bl	80097fc <SWAPBYTE>
 800a382:	4603      	mov	r3, r0
 800a384:	461a      	mov	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3301      	adds	r3, #1
 800a38e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3301      	adds	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f7ff fa30 	bl	80097fc <SWAPBYTE>
 800a39c:	4603      	mov	r3, r0
 800a39e:	461a      	mov	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f7ff fa23 	bl	80097fc <SWAPBYTE>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	80da      	strh	r2, [r3, #6]
}
 800a3be:	bf00      	nop
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b082      	sub	sp, #8
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3d0:	2180      	movs	r1, #128	@ 0x80
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fd30 	bl	800ae38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a3d8:	2100      	movs	r1, #0
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fd2c 	bl	800ae38 <USBD_LL_StallEP>
}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b086      	sub	sp, #24
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d042      	beq.n	800a484 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a402:	6938      	ldr	r0, [r7, #16]
 800a404:	f000 f842 	bl	800a48c <USBD_GetLen>
 800a408:	4603      	mov	r3, r0
 800a40a:	3301      	adds	r3, #1
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a412:	d808      	bhi.n	800a426 <USBD_GetString+0x3e>
 800a414:	6938      	ldr	r0, [r7, #16]
 800a416:	f000 f839 	bl	800a48c <USBD_GetLen>
 800a41a:	4603      	mov	r3, r0
 800a41c:	3301      	adds	r3, #1
 800a41e:	b29b      	uxth	r3, r3
 800a420:	005b      	lsls	r3, r3, #1
 800a422:	b29a      	uxth	r2, r3
 800a424:	e001      	b.n	800a42a <USBD_GetString+0x42>
 800a426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	4413      	add	r3, r2
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	7812      	ldrb	r2, [r2, #0]
 800a438:	701a      	strb	r2, [r3, #0]
  idx++;
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	3301      	adds	r3, #1
 800a43e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a440:	7dfb      	ldrb	r3, [r7, #23]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	4413      	add	r3, r2
 800a446:	2203      	movs	r2, #3
 800a448:	701a      	strb	r2, [r3, #0]
  idx++;
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	3301      	adds	r3, #1
 800a44e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a450:	e013      	b.n	800a47a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a452:	7dfb      	ldrb	r3, [r7, #23]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	4413      	add	r3, r2
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	7812      	ldrb	r2, [r2, #0]
 800a45c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	3301      	adds	r3, #1
 800a462:	613b      	str	r3, [r7, #16]
    idx++;
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	3301      	adds	r3, #1
 800a468:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	4413      	add	r3, r2
 800a470:	2200      	movs	r2, #0
 800a472:	701a      	strb	r2, [r3, #0]
    idx++;
 800a474:	7dfb      	ldrb	r3, [r7, #23]
 800a476:	3301      	adds	r3, #1
 800a478:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1e7      	bne.n	800a452 <USBD_GetString+0x6a>
 800a482:	e000      	b.n	800a486 <USBD_GetString+0x9e>
    return;
 800a484:	bf00      	nop
  }
}
 800a486:	3718      	adds	r7, #24
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a49c:	e005      	b.n	800a4aa <USBD_GetLen+0x1e>
  {
    len++;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1f5      	bne.n	800a49e <USBD_GetLen+0x12>
  }

  return len;
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f000 fd2c 	bl	800af4a <USBD_LL_Transmit>

  return USBD_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	2100      	movs	r1, #0
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 fd1b 	bl	800af4a <USBD_LL_Transmit>

  return USBD_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b084      	sub	sp, #16
 800a522:	af00      	add	r7, sp, #0
 800a524:	60f8      	str	r0, [r7, #12]
 800a526:	60b9      	str	r1, [r7, #8]
 800a528:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2203      	movs	r2, #3
 800a52e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	2100      	movs	r1, #0
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 fd1b 	bl	800af8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	2100      	movs	r1, #0
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fd0a 	bl	800af8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b082      	sub	sp, #8
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2204      	movs	r2, #4
 800a58e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a592:	2300      	movs	r3, #0
 800a594:	2200      	movs	r2, #0
 800a596:	2100      	movs	r1, #0
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fcd6 	bl	800af4a <USBD_LL_Transmit>

  return USBD_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2205      	movs	r2, #5
 800a5b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	2100      	movs	r1, #0
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fce4 	bl	800af8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	4912      	ldr	r1, [pc, #72]	@ (800a620 <MX_USB_DEVICE_Init+0x50>)
 800a5d8:	4812      	ldr	r0, [pc, #72]	@ (800a624 <MX_USB_DEVICE_Init+0x54>)
 800a5da:	f7fe fcd9 	bl	8008f90 <USBD_Init>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5e4:	f7f8 f81c 	bl	8002620 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a5e8:	490f      	ldr	r1, [pc, #60]	@ (800a628 <MX_USB_DEVICE_Init+0x58>)
 800a5ea:	480e      	ldr	r0, [pc, #56]	@ (800a624 <MX_USB_DEVICE_Init+0x54>)
 800a5ec:	f7fe fd00 	bl	8008ff0 <USBD_RegisterClass>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5f6:	f7f8 f813 	bl	8002620 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5fa:	490c      	ldr	r1, [pc, #48]	@ (800a62c <MX_USB_DEVICE_Init+0x5c>)
 800a5fc:	4809      	ldr	r0, [pc, #36]	@ (800a624 <MX_USB_DEVICE_Init+0x54>)
 800a5fe:	f7fe fbf7 	bl	8008df0 <USBD_CDC_RegisterInterface>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a608:	f7f8 f80a 	bl	8002620 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a60c:	4805      	ldr	r0, [pc, #20]	@ (800a624 <MX_USB_DEVICE_Init+0x54>)
 800a60e:	f7fe fd25 	bl	800905c <USBD_Start>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a618:	f7f8 f802 	bl	8002620 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a61c:	bf00      	nop
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	200000b0 	.word	0x200000b0
 800a624:	2001cd94 	.word	0x2001cd94
 800a628:	2000001c 	.word	0x2000001c
 800a62c:	2000009c 	.word	0x2000009c

0800a630 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a634:	2200      	movs	r2, #0
 800a636:	4905      	ldr	r1, [pc, #20]	@ (800a64c <CDC_Init_FS+0x1c>)
 800a638:	4805      	ldr	r0, [pc, #20]	@ (800a650 <CDC_Init_FS+0x20>)
 800a63a:	f7fe fbf3 	bl	8008e24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a63e:	4905      	ldr	r1, [pc, #20]	@ (800a654 <CDC_Init_FS+0x24>)
 800a640:	4803      	ldr	r0, [pc, #12]	@ (800a650 <CDC_Init_FS+0x20>)
 800a642:	f7fe fc11 	bl	8008e68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a646:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a648:	4618      	mov	r0, r3
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	2001d974 	.word	0x2001d974
 800a650:	2001cd94 	.word	0x2001cd94
 800a654:	2001d174 	.word	0x2001d174

0800a658 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a658:	b480      	push	{r7}
 800a65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a65c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a65e:	4618      	mov	r0, r3
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	4603      	mov	r3, r0
 800a670:	6039      	str	r1, [r7, #0]
 800a672:	71fb      	strb	r3, [r7, #7]
 800a674:	4613      	mov	r3, r2
 800a676:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	2b23      	cmp	r3, #35	@ 0x23
 800a67c:	d84a      	bhi.n	800a714 <CDC_Control_FS+0xac>
 800a67e:	a201      	add	r2, pc, #4	@ (adr r2, 800a684 <CDC_Control_FS+0x1c>)
 800a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a684:	0800a715 	.word	0x0800a715
 800a688:	0800a715 	.word	0x0800a715
 800a68c:	0800a715 	.word	0x0800a715
 800a690:	0800a715 	.word	0x0800a715
 800a694:	0800a715 	.word	0x0800a715
 800a698:	0800a715 	.word	0x0800a715
 800a69c:	0800a715 	.word	0x0800a715
 800a6a0:	0800a715 	.word	0x0800a715
 800a6a4:	0800a715 	.word	0x0800a715
 800a6a8:	0800a715 	.word	0x0800a715
 800a6ac:	0800a715 	.word	0x0800a715
 800a6b0:	0800a715 	.word	0x0800a715
 800a6b4:	0800a715 	.word	0x0800a715
 800a6b8:	0800a715 	.word	0x0800a715
 800a6bc:	0800a715 	.word	0x0800a715
 800a6c0:	0800a715 	.word	0x0800a715
 800a6c4:	0800a715 	.word	0x0800a715
 800a6c8:	0800a715 	.word	0x0800a715
 800a6cc:	0800a715 	.word	0x0800a715
 800a6d0:	0800a715 	.word	0x0800a715
 800a6d4:	0800a715 	.word	0x0800a715
 800a6d8:	0800a715 	.word	0x0800a715
 800a6dc:	0800a715 	.word	0x0800a715
 800a6e0:	0800a715 	.word	0x0800a715
 800a6e4:	0800a715 	.word	0x0800a715
 800a6e8:	0800a715 	.word	0x0800a715
 800a6ec:	0800a715 	.word	0x0800a715
 800a6f0:	0800a715 	.word	0x0800a715
 800a6f4:	0800a715 	.word	0x0800a715
 800a6f8:	0800a715 	.word	0x0800a715
 800a6fc:	0800a715 	.word	0x0800a715
 800a700:	0800a715 	.word	0x0800a715
 800a704:	0800a715 	.word	0x0800a715
 800a708:	0800a715 	.word	0x0800a715
 800a70c:	0800a715 	.word	0x0800a715
 800a710:	0800a715 	.word	0x0800a715
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a714:	bf00      	nop
  }

  return (USBD_OK);
 800a716:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a718:	4618      	mov	r0, r3
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a20      	ldr	r2, [pc, #128]	@ (800a7b4 <CDC_Receive_FS+0x90>)
 800a734:	8812      	ldrh	r2, [r2, #0]
 800a736:	b292      	uxth	r2, r2
 800a738:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
                            (USB_RX_BUFFER_SIZE - usb_rx_index) : *Len;
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d905      	bls.n	800a74c <CDC_Receive_FS+0x28>
 800a740:	4b1c      	ldr	r3, [pc, #112]	@ (800a7b4 <CDC_Receive_FS+0x90>)
 800a742:	881b      	ldrh	r3, [r3, #0]
 800a744:	b29b      	uxth	r3, r3
 800a746:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800a74a:	e001      	b.n	800a750 <CDC_Receive_FS+0x2c>
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800a750:	60fb      	str	r3, [r7, #12]

    memcpy((void*)&usb_rx_buffer[usb_rx_index], Buf, bytes_to_copy);
 800a752:	4b18      	ldr	r3, [pc, #96]	@ (800a7b4 <CDC_Receive_FS+0x90>)
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	b29b      	uxth	r3, r3
 800a758:	461a      	mov	r2, r3
 800a75a:	4b17      	ldr	r3, [pc, #92]	@ (800a7b8 <CDC_Receive_FS+0x94>)
 800a75c:	4413      	add	r3, r2
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	6879      	ldr	r1, [r7, #4]
 800a762:	4618      	mov	r0, r3
 800a764:	f002 fe45 	bl	800d3f2 <memcpy>
    usb_rx_index += bytes_to_copy;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	4b11      	ldr	r3, [pc, #68]	@ (800a7b4 <CDC_Receive_FS+0x90>)
 800a76e:	881b      	ldrh	r3, [r3, #0]
 800a770:	b29b      	uxth	r3, r3
 800a772:	4413      	add	r3, r2
 800a774:	b29a      	uxth	r2, r3
 800a776:	4b0f      	ldr	r3, [pc, #60]	@ (800a7b4 <CDC_Receive_FS+0x90>)
 800a778:	801a      	strh	r2, [r3, #0]

    // Проверяем наличие завершающего символа
    if (usb_rx_index > 0 && usb_rx_buffer[usb_rx_index - 1] == '\n') {
 800a77a:	4b0e      	ldr	r3, [pc, #56]	@ (800a7b4 <CDC_Receive_FS+0x90>)
 800a77c:	881b      	ldrh	r3, [r3, #0]
 800a77e:	b29b      	uxth	r3, r3
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00b      	beq.n	800a79c <CDC_Receive_FS+0x78>
 800a784:	4b0b      	ldr	r3, [pc, #44]	@ (800a7b4 <CDC_Receive_FS+0x90>)
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	b29b      	uxth	r3, r3
 800a78a:	3b01      	subs	r3, #1
 800a78c:	4a0a      	ldr	r2, [pc, #40]	@ (800a7b8 <CDC_Receive_FS+0x94>)
 800a78e:	5cd3      	ldrb	r3, [r2, r3]
 800a790:	b2db      	uxtb	r3, r3
 800a792:	2b0a      	cmp	r3, #10
 800a794:	d102      	bne.n	800a79c <CDC_Receive_FS+0x78>
        new_data_received = 1;
 800a796:	4b09      	ldr	r3, [pc, #36]	@ (800a7bc <CDC_Receive_FS+0x98>)
 800a798:	2201      	movs	r2, #1
 800a79a:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a79c:	6879      	ldr	r1, [r7, #4]
 800a79e:	4808      	ldr	r0, [pc, #32]	@ (800a7c0 <CDC_Receive_FS+0x9c>)
 800a7a0:	f7fe fb62 	bl	8008e68 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a7a4:	4806      	ldr	r0, [pc, #24]	@ (800a7c0 <CDC_Receive_FS+0x9c>)
 800a7a6:	f7fe fbbd 	bl	8008f24 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	2001d170 	.word	0x2001d170
 800a7b8:	2001d070 	.word	0x2001d070
 800a7bc:	2001d172 	.word	0x2001d172
 800a7c0:	2001cd94 	.word	0x2001cd94

0800a7c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a7d4:	4b0d      	ldr	r3, [pc, #52]	@ (800a80c <CDC_Transmit_FS+0x48>)
 800a7d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d001      	beq.n	800a7ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e00b      	b.n	800a802 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a7ea:	887b      	ldrh	r3, [r7, #2]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	6879      	ldr	r1, [r7, #4]
 800a7f0:	4806      	ldr	r0, [pc, #24]	@ (800a80c <CDC_Transmit_FS+0x48>)
 800a7f2:	f7fe fb17 	bl	8008e24 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a7f6:	4805      	ldr	r0, [pc, #20]	@ (800a80c <CDC_Transmit_FS+0x48>)
 800a7f8:	f7fe fb54 	bl	8008ea4 <USBD_CDC_TransmitPacket>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a800:	7bfb      	ldrb	r3, [r7, #15]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	2001cd94 	.word	0x2001cd94

0800a810 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a810:	b480      	push	{r7}
 800a812:	b087      	sub	sp, #28
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	4613      	mov	r3, r2
 800a81c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a822:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a826:	4618      	mov	r0, r3
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
	...

0800a834 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	4603      	mov	r3, r0
 800a83c:	6039      	str	r1, [r7, #0]
 800a83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	2212      	movs	r2, #18
 800a844:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a846:	4b03      	ldr	r3, [pc, #12]	@ (800a854 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a848:	4618      	mov	r0, r3
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	200000cc 	.word	0x200000cc

0800a858 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	2204      	movs	r2, #4
 800a868:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a86a:	4b03      	ldr	r3, [pc, #12]	@ (800a878 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr
 800a878:	200000e0 	.word	0x200000e0

0800a87c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	6039      	str	r1, [r7, #0]
 800a886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a888:	79fb      	ldrb	r3, [r7, #7]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d105      	bne.n	800a89a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	4907      	ldr	r1, [pc, #28]	@ (800a8b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a892:	4808      	ldr	r0, [pc, #32]	@ (800a8b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a894:	f7ff fda8 	bl	800a3e8 <USBD_GetString>
 800a898:	e004      	b.n	800a8a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	4904      	ldr	r1, [pc, #16]	@ (800a8b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a89e:	4805      	ldr	r0, [pc, #20]	@ (800a8b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8a0:	f7ff fda2 	bl	800a3e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8a4:	4b02      	ldr	r3, [pc, #8]	@ (800a8b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	2001e174 	.word	0x2001e174
 800a8b4:	080103fc 	.word	0x080103fc

0800a8b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	6039      	str	r1, [r7, #0]
 800a8c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	4904      	ldr	r1, [pc, #16]	@ (800a8d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a8c8:	4804      	ldr	r0, [pc, #16]	@ (800a8dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a8ca:	f7ff fd8d 	bl	800a3e8 <USBD_GetString>
  return USBD_StrDesc;
 800a8ce:	4b02      	ldr	r3, [pc, #8]	@ (800a8d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	2001e174 	.word	0x2001e174
 800a8dc:	08010414 	.word	0x08010414

0800a8e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	6039      	str	r1, [r7, #0]
 800a8ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	221a      	movs	r2, #26
 800a8f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a8f2:	f000 f843 	bl	800a97c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a8f6:	4b02      	ldr	r3, [pc, #8]	@ (800a900 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	200000e4 	.word	0x200000e4

0800a904 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	4603      	mov	r3, r0
 800a90c:	6039      	str	r1, [r7, #0]
 800a90e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a910:	79fb      	ldrb	r3, [r7, #7]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d105      	bne.n	800a922 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	4907      	ldr	r1, [pc, #28]	@ (800a938 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a91a:	4808      	ldr	r0, [pc, #32]	@ (800a93c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a91c:	f7ff fd64 	bl	800a3e8 <USBD_GetString>
 800a920:	e004      	b.n	800a92c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	4904      	ldr	r1, [pc, #16]	@ (800a938 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a926:	4805      	ldr	r0, [pc, #20]	@ (800a93c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a928:	f7ff fd5e 	bl	800a3e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a92c:	4b02      	ldr	r3, [pc, #8]	@ (800a938 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	2001e174 	.word	0x2001e174
 800a93c:	08010428 	.word	0x08010428

0800a940 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	6039      	str	r1, [r7, #0]
 800a94a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a94c:	79fb      	ldrb	r3, [r7, #7]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d105      	bne.n	800a95e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	4907      	ldr	r1, [pc, #28]	@ (800a974 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a956:	4808      	ldr	r0, [pc, #32]	@ (800a978 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a958:	f7ff fd46 	bl	800a3e8 <USBD_GetString>
 800a95c:	e004      	b.n	800a968 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	4904      	ldr	r1, [pc, #16]	@ (800a974 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a962:	4805      	ldr	r0, [pc, #20]	@ (800a978 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a964:	f7ff fd40 	bl	800a3e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a968:	4b02      	ldr	r3, [pc, #8]	@ (800a974 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	2001e174 	.word	0x2001e174
 800a978:	08010434 	.word	0x08010434

0800a97c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a982:	4b0f      	ldr	r3, [pc, #60]	@ (800a9c0 <Get_SerialNum+0x44>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a988:	4b0e      	ldr	r3, [pc, #56]	@ (800a9c4 <Get_SerialNum+0x48>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a98e:	4b0e      	ldr	r3, [pc, #56]	@ (800a9c8 <Get_SerialNum+0x4c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4413      	add	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d009      	beq.n	800a9b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a9a2:	2208      	movs	r2, #8
 800a9a4:	4909      	ldr	r1, [pc, #36]	@ (800a9cc <Get_SerialNum+0x50>)
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 f814 	bl	800a9d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a9ac:	2204      	movs	r2, #4
 800a9ae:	4908      	ldr	r1, [pc, #32]	@ (800a9d0 <Get_SerialNum+0x54>)
 800a9b0:	68b8      	ldr	r0, [r7, #8]
 800a9b2:	f000 f80f 	bl	800a9d4 <IntToUnicode>
  }
}
 800a9b6:	bf00      	nop
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	1fff7a10 	.word	0x1fff7a10
 800a9c4:	1fff7a14 	.word	0x1fff7a14
 800a9c8:	1fff7a18 	.word	0x1fff7a18
 800a9cc:	200000e6 	.word	0x200000e6
 800a9d0:	200000f6 	.word	0x200000f6

0800a9d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	75fb      	strb	r3, [r7, #23]
 800a9ea:	e027      	b.n	800aa3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	0f1b      	lsrs	r3, r3, #28
 800a9f0:	2b09      	cmp	r3, #9
 800a9f2:	d80b      	bhi.n	800aa0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	0f1b      	lsrs	r3, r3, #28
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	005b      	lsls	r3, r3, #1
 800a9fe:	4619      	mov	r1, r3
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	440b      	add	r3, r1
 800aa04:	3230      	adds	r2, #48	@ 0x30
 800aa06:	b2d2      	uxtb	r2, r2
 800aa08:	701a      	strb	r2, [r3, #0]
 800aa0a:	e00a      	b.n	800aa22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	0f1b      	lsrs	r3, r3, #28
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
 800aa14:	005b      	lsls	r3, r3, #1
 800aa16:	4619      	mov	r1, r3
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	440b      	add	r3, r1
 800aa1c:	3237      	adds	r2, #55	@ 0x37
 800aa1e:	b2d2      	uxtb	r2, r2
 800aa20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	011b      	lsls	r3, r3, #4
 800aa26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	005b      	lsls	r3, r3, #1
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	4413      	add	r3, r2
 800aa32:	2200      	movs	r2, #0
 800aa34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa36:	7dfb      	ldrb	r3, [r7, #23]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	75fb      	strb	r3, [r7, #23]
 800aa3c:	7dfa      	ldrb	r2, [r7, #23]
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d3d3      	bcc.n	800a9ec <IntToUnicode+0x18>
  }
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop
 800aa48:	371c      	adds	r7, #28
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
	...

0800aa54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b08a      	sub	sp, #40	@ 0x28
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa5c:	f107 0314 	add.w	r3, r7, #20
 800aa60:	2200      	movs	r2, #0
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	605a      	str	r2, [r3, #4]
 800aa66:	609a      	str	r2, [r3, #8]
 800aa68:	60da      	str	r2, [r3, #12]
 800aa6a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa74:	d13a      	bne.n	800aaec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa76:	2300      	movs	r3, #0
 800aa78:	613b      	str	r3, [r7, #16]
 800aa7a:	4b1e      	ldr	r3, [pc, #120]	@ (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aa7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa7e:	4a1d      	ldr	r2, [pc, #116]	@ (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aa80:	f043 0301 	orr.w	r3, r3, #1
 800aa84:	6313      	str	r3, [r2, #48]	@ 0x30
 800aa86:	4b1b      	ldr	r3, [pc, #108]	@ (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aa88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	613b      	str	r3, [r7, #16]
 800aa90:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aa92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800aa96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa98:	2302      	movs	r3, #2
 800aa9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aaa4:	230a      	movs	r3, #10
 800aaa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaa8:	f107 0314 	add.w	r3, r7, #20
 800aaac:	4619      	mov	r1, r3
 800aaae:	4812      	ldr	r0, [pc, #72]	@ (800aaf8 <HAL_PCD_MspInit+0xa4>)
 800aab0:	f7f8 fcf4 	bl	800349c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aab4:	4b0f      	ldr	r3, [pc, #60]	@ (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aab8:	4a0e      	ldr	r2, [pc, #56]	@ (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aaba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aabe:	6353      	str	r3, [r2, #52]	@ 0x34
 800aac0:	2300      	movs	r3, #0
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	4b0b      	ldr	r3, [pc, #44]	@ (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac8:	4a0a      	ldr	r2, [pc, #40]	@ (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aaca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aace:	6453      	str	r3, [r2, #68]	@ 0x44
 800aad0:	4b08      	ldr	r3, [pc, #32]	@ (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aadc:	2200      	movs	r2, #0
 800aade:	2100      	movs	r1, #0
 800aae0:	2043      	movs	r0, #67	@ 0x43
 800aae2:	f7f8 f99c 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aae6:	2043      	movs	r0, #67	@ 0x43
 800aae8:	f7f8 f9b5 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aaec:	bf00      	nop
 800aaee:	3728      	adds	r7, #40	@ 0x28
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	40023800 	.word	0x40023800
 800aaf8:	40020000 	.word	0x40020000

0800aafc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ab10:	4619      	mov	r1, r3
 800ab12:	4610      	mov	r0, r2
 800ab14:	f7fe faef 	bl	80090f6 <USBD_LL_SetupStage>
}
 800ab18:	bf00      	nop
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ab32:	78fa      	ldrb	r2, [r7, #3]
 800ab34:	6879      	ldr	r1, [r7, #4]
 800ab36:	4613      	mov	r3, r2
 800ab38:	00db      	lsls	r3, r3, #3
 800ab3a:	4413      	add	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	440b      	add	r3, r1
 800ab40:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	78fb      	ldrb	r3, [r7, #3]
 800ab48:	4619      	mov	r1, r3
 800ab4a:	f7fe fb29 	bl	80091a0 <USBD_LL_DataOutStage>
}
 800ab4e:	bf00      	nop
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b082      	sub	sp, #8
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	460b      	mov	r3, r1
 800ab60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ab68:	78fa      	ldrb	r2, [r7, #3]
 800ab6a:	6879      	ldr	r1, [r7, #4]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	00db      	lsls	r3, r3, #3
 800ab70:	4413      	add	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	440b      	add	r3, r1
 800ab76:	3320      	adds	r3, #32
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	78fb      	ldrb	r3, [r7, #3]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	f7fe fbcb 	bl	8009318 <USBD_LL_DataInStage>
}
 800ab82:	bf00      	nop
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b082      	sub	sp, #8
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fe fd0f 	bl	80095bc <USBD_LL_SOF>
}
 800ab9e:	bf00      	nop
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b084      	sub	sp, #16
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800abae:	2301      	movs	r3, #1
 800abb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	79db      	ldrb	r3, [r3, #7]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d102      	bne.n	800abc0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800abba:	2300      	movs	r3, #0
 800abbc:	73fb      	strb	r3, [r7, #15]
 800abbe:	e008      	b.n	800abd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	79db      	ldrb	r3, [r3, #7]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d102      	bne.n	800abce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800abc8:	2301      	movs	r3, #1
 800abca:	73fb      	strb	r3, [r7, #15]
 800abcc:	e001      	b.n	800abd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800abce:	f7f7 fd27 	bl	8002620 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abd8:	7bfa      	ldrb	r2, [r7, #15]
 800abda:	4611      	mov	r1, r2
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe fca9 	bl	8009534 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fe fc50 	bl	800948e <USBD_LL_Reset>
}
 800abee:	bf00      	nop
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
	...

0800abf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fe fca4 	bl	8009554 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	6812      	ldr	r2, [r2, #0]
 800ac1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac1e:	f043 0301 	orr.w	r3, r3, #1
 800ac22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	7adb      	ldrb	r3, [r3, #11]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d005      	beq.n	800ac38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac2c:	4b04      	ldr	r3, [pc, #16]	@ (800ac40 <HAL_PCD_SuspendCallback+0x48>)
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	4a03      	ldr	r2, [pc, #12]	@ (800ac40 <HAL_PCD_SuspendCallback+0x48>)
 800ac32:	f043 0306 	orr.w	r3, r3, #6
 800ac36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac38:	bf00      	nop
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	e000ed00 	.word	0xe000ed00

0800ac44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe fc9a 	bl	800958c <USBD_LL_Resume>
}
 800ac58:	bf00      	nop
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac72:	78fa      	ldrb	r2, [r7, #3]
 800ac74:	4611      	mov	r1, r2
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fe fcf2 	bl	8009660 <USBD_LL_IsoOUTIncomplete>
}
 800ac7c:	bf00      	nop
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac96:	78fa      	ldrb	r2, [r7, #3]
 800ac98:	4611      	mov	r1, r2
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fe fcae 	bl	80095fc <USBD_LL_IsoINIncomplete>
}
 800aca0:	bf00      	nop
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fd04 	bl	80096c4 <USBD_LL_DevConnected>
}
 800acbc:	bf00      	nop
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fe fd01 	bl	80096da <USBD_LL_DevDisconnected>
}
 800acd8:	bf00      	nop
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d13c      	bne.n	800ad6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800acf0:	4a20      	ldr	r2, [pc, #128]	@ (800ad74 <USBD_LL_Init+0x94>)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a1e      	ldr	r2, [pc, #120]	@ (800ad74 <USBD_LL_Init+0x94>)
 800acfc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad00:	4b1c      	ldr	r3, [pc, #112]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ad06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ad08:	4b1a      	ldr	r3, [pc, #104]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad0a:	2204      	movs	r2, #4
 800ad0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ad0e:	4b19      	ldr	r3, [pc, #100]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad10:	2202      	movs	r2, #2
 800ad12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad14:	4b17      	ldr	r3, [pc, #92]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad16:	2200      	movs	r2, #0
 800ad18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ad1a:	4b16      	ldr	r3, [pc, #88]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ad20:	4b14      	ldr	r3, [pc, #80]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ad26:	4b13      	ldr	r3, [pc, #76]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ad2c:	4b11      	ldr	r3, [pc, #68]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ad32:	4b10      	ldr	r3, [pc, #64]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ad38:	4b0e      	ldr	r3, [pc, #56]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ad3e:	480d      	ldr	r0, [pc, #52]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad40:	f7f8 fd61 	bl	8003806 <HAL_PCD_Init>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ad4a:	f7f7 fc69 	bl	8002620 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ad4e:	2180      	movs	r1, #128	@ 0x80
 800ad50:	4808      	ldr	r0, [pc, #32]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad52:	f7f9 ff8e 	bl	8004c72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ad56:	2240      	movs	r2, #64	@ 0x40
 800ad58:	2100      	movs	r1, #0
 800ad5a:	4806      	ldr	r0, [pc, #24]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad5c:	f7f9 ff42 	bl	8004be4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ad60:	2280      	movs	r2, #128	@ 0x80
 800ad62:	2101      	movs	r1, #1
 800ad64:	4803      	ldr	r0, [pc, #12]	@ (800ad74 <USBD_LL_Init+0x94>)
 800ad66:	f7f9 ff3d 	bl	8004be4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	2001e374 	.word	0x2001e374

0800ad78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad84:	2300      	movs	r3, #0
 800ad86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7f8 fe48 	bl	8003a24 <HAL_PCD_Start>
 800ad94:	4603      	mov	r3, r0
 800ad96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 f942 	bl	800b024 <USBD_Get_USB_Status>
 800ada0:	4603      	mov	r3, r0
 800ada2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	4608      	mov	r0, r1
 800adb8:	4611      	mov	r1, r2
 800adba:	461a      	mov	r2, r3
 800adbc:	4603      	mov	r3, r0
 800adbe:	70fb      	strb	r3, [r7, #3]
 800adc0:	460b      	mov	r3, r1
 800adc2:	70bb      	strb	r3, [r7, #2]
 800adc4:	4613      	mov	r3, r2
 800adc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800add6:	78bb      	ldrb	r3, [r7, #2]
 800add8:	883a      	ldrh	r2, [r7, #0]
 800adda:	78f9      	ldrb	r1, [r7, #3]
 800addc:	f7f9 fb1c 	bl	8004418 <HAL_PCD_EP_Open>
 800ade0:	4603      	mov	r3, r0
 800ade2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 f91c 	bl	800b024 <USBD_Get_USB_Status>
 800adec:	4603      	mov	r3, r0
 800adee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b084      	sub	sp, #16
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
 800ae02:	460b      	mov	r3, r1
 800ae04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae06:	2300      	movs	r3, #0
 800ae08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae14:	78fa      	ldrb	r2, [r7, #3]
 800ae16:	4611      	mov	r1, r2
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7f9 fb67 	bl	80044ec <HAL_PCD_EP_Close>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 f8fd 	bl	800b024 <USBD_Get_USB_Status>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae52:	78fa      	ldrb	r2, [r7, #3]
 800ae54:	4611      	mov	r1, r2
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7f9 fc1f 	bl	800469a <HAL_PCD_EP_SetStall>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 f8de 	bl	800b024 <USBD_Get_USB_Status>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b084      	sub	sp, #16
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	460b      	mov	r3, r1
 800ae80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae90:	78fa      	ldrb	r2, [r7, #3]
 800ae92:	4611      	mov	r1, r2
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7f9 fc63 	bl	8004760 <HAL_PCD_EP_ClrStall>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
 800aea0:	4618      	mov	r0, r3
 800aea2:	f000 f8bf 	bl	800b024 <USBD_Get_USB_Status>
 800aea6:	4603      	mov	r3, r0
 800aea8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	460b      	mov	r3, r1
 800aebe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aec6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	da0b      	bge.n	800aee8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aed0:	78fb      	ldrb	r3, [r7, #3]
 800aed2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aed6:	68f9      	ldr	r1, [r7, #12]
 800aed8:	4613      	mov	r3, r2
 800aeda:	00db      	lsls	r3, r3, #3
 800aedc:	4413      	add	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	440b      	add	r3, r1
 800aee2:	3316      	adds	r3, #22
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	e00b      	b.n	800af00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aee8:	78fb      	ldrb	r3, [r7, #3]
 800aeea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aeee:	68f9      	ldr	r1, [r7, #12]
 800aef0:	4613      	mov	r3, r2
 800aef2:	00db      	lsls	r3, r3, #3
 800aef4:	4413      	add	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	440b      	add	r3, r1
 800aefa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800aefe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af00:	4618      	mov	r0, r3
 800af02:	3714      	adds	r7, #20
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af26:	78fa      	ldrb	r2, [r7, #3]
 800af28:	4611      	mov	r1, r2
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7f9 fa50 	bl	80043d0 <HAL_PCD_SetAddress>
 800af30:	4603      	mov	r3, r0
 800af32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af34:	7bfb      	ldrb	r3, [r7, #15]
 800af36:	4618      	mov	r0, r3
 800af38:	f000 f874 	bl	800b024 <USBD_Get_USB_Status>
 800af3c:	4603      	mov	r3, r0
 800af3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af40:	7bbb      	ldrb	r3, [r7, #14]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b086      	sub	sp, #24
 800af4e:	af00      	add	r7, sp, #0
 800af50:	60f8      	str	r0, [r7, #12]
 800af52:	607a      	str	r2, [r7, #4]
 800af54:	603b      	str	r3, [r7, #0]
 800af56:	460b      	mov	r3, r1
 800af58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800af68:	7af9      	ldrb	r1, [r7, #11]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	f7f9 fb5a 	bl	8004626 <HAL_PCD_EP_Transmit>
 800af72:	4603      	mov	r3, r0
 800af74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af76:	7dfb      	ldrb	r3, [r7, #23]
 800af78:	4618      	mov	r0, r3
 800af7a:	f000 f853 	bl	800b024 <USBD_Get_USB_Status>
 800af7e:	4603      	mov	r3, r0
 800af80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af82:	7dbb      	ldrb	r3, [r7, #22]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3718      	adds	r7, #24
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	607a      	str	r2, [r7, #4]
 800af96:	603b      	str	r3, [r7, #0]
 800af98:	460b      	mov	r3, r1
 800af9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800afaa:	7af9      	ldrb	r1, [r7, #11]
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	f7f9 fae6 	bl	8004580 <HAL_PCD_EP_Receive>
 800afb4:	4603      	mov	r3, r0
 800afb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afb8:	7dfb      	ldrb	r3, [r7, #23]
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 f832 	bl	800b024 <USBD_Get_USB_Status>
 800afc0:	4603      	mov	r3, r0
 800afc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3718      	adds	r7, #24
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b082      	sub	sp, #8
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	460b      	mov	r3, r1
 800afd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afe0:	78fa      	ldrb	r2, [r7, #3]
 800afe2:	4611      	mov	r1, r2
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7f9 fb06 	bl	80045f6 <HAL_PCD_EP_GetRxCount>
 800afea:	4603      	mov	r3, r0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800affc:	4b03      	ldr	r3, [pc, #12]	@ (800b00c <USBD_static_malloc+0x18>)
}
 800affe:	4618      	mov	r0, r3
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	2001e858 	.word	0x2001e858

0800b010 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]

}
 800b018:	bf00      	nop
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	4603      	mov	r3, r0
 800b02c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b032:	79fb      	ldrb	r3, [r7, #7]
 800b034:	2b03      	cmp	r3, #3
 800b036:	d817      	bhi.n	800b068 <USBD_Get_USB_Status+0x44>
 800b038:	a201      	add	r2, pc, #4	@ (adr r2, 800b040 <USBD_Get_USB_Status+0x1c>)
 800b03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03e:	bf00      	nop
 800b040:	0800b051 	.word	0x0800b051
 800b044:	0800b057 	.word	0x0800b057
 800b048:	0800b05d 	.word	0x0800b05d
 800b04c:	0800b063 	.word	0x0800b063
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	73fb      	strb	r3, [r7, #15]
    break;
 800b054:	e00b      	b.n	800b06e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b056:	2303      	movs	r3, #3
 800b058:	73fb      	strb	r3, [r7, #15]
    break;
 800b05a:	e008      	b.n	800b06e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b05c:	2301      	movs	r3, #1
 800b05e:	73fb      	strb	r3, [r7, #15]
    break;
 800b060:	e005      	b.n	800b06e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b062:	2303      	movs	r3, #3
 800b064:	73fb      	strb	r3, [r7, #15]
    break;
 800b066:	e002      	b.n	800b06e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b068:	2303      	movs	r3, #3
 800b06a:	73fb      	strb	r3, [r7, #15]
    break;
 800b06c:	bf00      	nop
  }
  return usb_status;
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3714      	adds	r7, #20
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <arm_copy_f32>:
 800b07c:	b4f0      	push	{r4, r5, r6, r7}
 800b07e:	0897      	lsrs	r7, r2, #2
 800b080:	d01e      	beq.n	800b0c0 <arm_copy_f32+0x44>
 800b082:	f100 0410 	add.w	r4, r0, #16
 800b086:	f101 0310 	add.w	r3, r1, #16
 800b08a:	463d      	mov	r5, r7
 800b08c:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800b090:	f843 6c10 	str.w	r6, [r3, #-16]
 800b094:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800b098:	f843 6c0c 	str.w	r6, [r3, #-12]
 800b09c:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800b0a0:	f843 6c08 	str.w	r6, [r3, #-8]
 800b0a4:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800b0a8:	f843 6c04 	str.w	r6, [r3, #-4]
 800b0ac:	3d01      	subs	r5, #1
 800b0ae:	f104 0410 	add.w	r4, r4, #16
 800b0b2:	f103 0310 	add.w	r3, r3, #16
 800b0b6:	d1e9      	bne.n	800b08c <arm_copy_f32+0x10>
 800b0b8:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800b0bc:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800b0c0:	f012 0203 	ands.w	r2, r2, #3
 800b0c4:	d009      	beq.n	800b0da <arm_copy_f32+0x5e>
 800b0c6:	6803      	ldr	r3, [r0, #0]
 800b0c8:	600b      	str	r3, [r1, #0]
 800b0ca:	3a01      	subs	r2, #1
 800b0cc:	d005      	beq.n	800b0da <arm_copy_f32+0x5e>
 800b0ce:	6843      	ldr	r3, [r0, #4]
 800b0d0:	604b      	str	r3, [r1, #4]
 800b0d2:	2a01      	cmp	r2, #1
 800b0d4:	bf1c      	itt	ne
 800b0d6:	6883      	ldrne	r3, [r0, #8]
 800b0d8:	608b      	strne	r3, [r1, #8]
 800b0da:	bcf0      	pop	{r4, r5, r6, r7}
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop

0800b0e0 <arm_std_f32>:
 800b0e0:	b510      	push	{r4, lr}
 800b0e2:	ed2d 8b02 	vpush	{d8}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	4614      	mov	r4, r2
 800b0ea:	aa01      	add	r2, sp, #4
 800b0ec:	f000 f8e4 	bl	800b2b8 <arm_var_f32>
 800b0f0:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b0f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0fc:	db0c      	blt.n	800b118 <arm_std_f32+0x38>
 800b0fe:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b106:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b10a:	d408      	bmi.n	800b11e <arm_std_f32+0x3e>
 800b10c:	ed84 8a00 	vstr	s16, [r4]
 800b110:	b002      	add	sp, #8
 800b112:	ecbd 8b02 	vpop	{d8}
 800b116:	bd10      	pop	{r4, pc}
 800b118:	2300      	movs	r3, #0
 800b11a:	6023      	str	r3, [r4, #0]
 800b11c:	e7f8      	b.n	800b110 <arm_std_f32+0x30>
 800b11e:	f004 fe2b 	bl	800fd78 <sqrtf>
 800b122:	e7f3      	b.n	800b10c <arm_std_f32+0x2c>

0800b124 <arm_mean_f32>:
 800b124:	b430      	push	{r4, r5}
 800b126:	088d      	lsrs	r5, r1, #2
 800b128:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800b19c <arm_mean_f32+0x78>
 800b12c:	d018      	beq.n	800b160 <arm_mean_f32+0x3c>
 800b12e:	f100 0310 	add.w	r3, r0, #16
 800b132:	462c      	mov	r4, r5
 800b134:	ed53 5a04 	vldr	s11, [r3, #-16]
 800b138:	ed13 6a03 	vldr	s12, [r3, #-12]
 800b13c:	ed53 6a02 	vldr	s13, [r3, #-8]
 800b140:	ed13 7a01 	vldr	s14, [r3, #-4]
 800b144:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b148:	3c01      	subs	r4, #1
 800b14a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b14e:	f103 0310 	add.w	r3, r3, #16
 800b152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b156:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b15a:	d1eb      	bne.n	800b134 <arm_mean_f32+0x10>
 800b15c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b160:	f011 0303 	ands.w	r3, r1, #3
 800b164:	d00f      	beq.n	800b186 <arm_mean_f32+0x62>
 800b166:	ed90 7a00 	vldr	s14, [r0]
 800b16a:	3b01      	subs	r3, #1
 800b16c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b170:	d009      	beq.n	800b186 <arm_mean_f32+0x62>
 800b172:	ed90 7a01 	vldr	s14, [r0, #4]
 800b176:	2b01      	cmp	r3, #1
 800b178:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b17c:	bf1c      	itt	ne
 800b17e:	ed90 7a02 	vldrne	s14, [r0, #8]
 800b182:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800b186:	ee07 1a10 	vmov	s14, r1
 800b18a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b18e:	bc30      	pop	{r4, r5}
 800b190:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b194:	edc2 6a00 	vstr	s13, [r2]
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	00000000 	.word	0x00000000

0800b1a0 <arm_scale_f32>:
 800b1a0:	b470      	push	{r4, r5, r6}
 800b1a2:	0896      	lsrs	r6, r2, #2
 800b1a4:	d026      	beq.n	800b1f4 <arm_scale_f32+0x54>
 800b1a6:	f100 0410 	add.w	r4, r0, #16
 800b1aa:	f101 0310 	add.w	r3, r1, #16
 800b1ae:	4635      	mov	r5, r6
 800b1b0:	ed14 6a03 	vldr	s12, [r4, #-12]
 800b1b4:	ed54 6a02 	vldr	s13, [r4, #-8]
 800b1b8:	ed14 7a01 	vldr	s14, [r4, #-4]
 800b1bc:	ed54 7a04 	vldr	s15, [r4, #-16]
 800b1c0:	ee20 6a06 	vmul.f32	s12, s0, s12
 800b1c4:	ee60 6a26 	vmul.f32	s13, s0, s13
 800b1c8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b1cc:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b1d0:	3d01      	subs	r5, #1
 800b1d2:	ed03 6a03 	vstr	s12, [r3, #-12]
 800b1d6:	ed43 6a02 	vstr	s13, [r3, #-8]
 800b1da:	ed03 7a01 	vstr	s14, [r3, #-4]
 800b1de:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b1e2:	f104 0410 	add.w	r4, r4, #16
 800b1e6:	f103 0310 	add.w	r3, r3, #16
 800b1ea:	d1e1      	bne.n	800b1b0 <arm_scale_f32+0x10>
 800b1ec:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800b1f0:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800b1f4:	f012 0203 	ands.w	r2, r2, #3
 800b1f8:	d015      	beq.n	800b226 <arm_scale_f32+0x86>
 800b1fa:	edd0 7a00 	vldr	s15, [r0]
 800b1fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b202:	3a01      	subs	r2, #1
 800b204:	edc1 7a00 	vstr	s15, [r1]
 800b208:	d00d      	beq.n	800b226 <arm_scale_f32+0x86>
 800b20a:	edd0 7a01 	vldr	s15, [r0, #4]
 800b20e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b212:	2a01      	cmp	r2, #1
 800b214:	edc1 7a01 	vstr	s15, [r1, #4]
 800b218:	d005      	beq.n	800b226 <arm_scale_f32+0x86>
 800b21a:	edd0 7a02 	vldr	s15, [r0, #8]
 800b21e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b222:	ed81 0a02 	vstr	s0, [r1, #8]
 800b226:	bc70      	pop	{r4, r5, r6}
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop

0800b22c <arm_offset_f32>:
 800b22c:	b470      	push	{r4, r5, r6}
 800b22e:	0896      	lsrs	r6, r2, #2
 800b230:	d026      	beq.n	800b280 <arm_offset_f32+0x54>
 800b232:	f100 0410 	add.w	r4, r0, #16
 800b236:	f101 0310 	add.w	r3, r1, #16
 800b23a:	4635      	mov	r5, r6
 800b23c:	ed54 7a04 	vldr	s15, [r4, #-16]
 800b240:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b244:	3d01      	subs	r5, #1
 800b246:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b24a:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b24e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b252:	f104 0410 	add.w	r4, r4, #16
 800b256:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b25a:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800b25e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b262:	f103 0310 	add.w	r3, r3, #16
 800b266:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800b26a:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800b26e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b272:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800b276:	d1e1      	bne.n	800b23c <arm_offset_f32+0x10>
 800b278:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800b27c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800b280:	f012 0203 	ands.w	r2, r2, #3
 800b284:	d015      	beq.n	800b2b2 <arm_offset_f32+0x86>
 800b286:	edd0 7a00 	vldr	s15, [r0]
 800b28a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b28e:	3a01      	subs	r2, #1
 800b290:	edc1 7a00 	vstr	s15, [r1]
 800b294:	d00d      	beq.n	800b2b2 <arm_offset_f32+0x86>
 800b296:	edd0 7a01 	vldr	s15, [r0, #4]
 800b29a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b29e:	2a01      	cmp	r2, #1
 800b2a0:	edc1 7a01 	vstr	s15, [r1, #4]
 800b2a4:	d005      	beq.n	800b2b2 <arm_offset_f32+0x86>
 800b2a6:	edd0 7a02 	vldr	s15, [r0, #8]
 800b2aa:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b2ae:	ed81 0a02 	vstr	s0, [r1, #8]
 800b2b2:	bc70      	pop	{r4, r5, r6}
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop

0800b2b8 <arm_var_f32>:
 800b2b8:	2901      	cmp	r1, #1
 800b2ba:	f240 809a 	bls.w	800b3f2 <arm_var_f32+0x13a>
 800b2be:	b4f0      	push	{r4, r5, r6, r7}
 800b2c0:	088d      	lsrs	r5, r1, #2
 800b2c2:	f000 80a0 	beq.w	800b406 <arm_var_f32+0x14e>
 800b2c6:	f100 0310 	add.w	r3, r0, #16
 800b2ca:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800b410 <arm_var_f32+0x158>
 800b2ce:	461c      	mov	r4, r3
 800b2d0:	462e      	mov	r6, r5
 800b2d2:	ed54 5a04 	vldr	s11, [r4, #-16]
 800b2d6:	ed14 6a03 	vldr	s12, [r4, #-12]
 800b2da:	ed54 6a02 	vldr	s13, [r4, #-8]
 800b2de:	ed14 7a01 	vldr	s14, [r4, #-4]
 800b2e2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b2e6:	3e01      	subs	r6, #1
 800b2e8:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b2ec:	f104 0410 	add.w	r4, r4, #16
 800b2f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2f8:	d1eb      	bne.n	800b2d2 <arm_var_f32+0x1a>
 800b2fa:	f011 0403 	ands.w	r4, r1, #3
 800b2fe:	ea4f 1705 	mov.w	r7, r5, lsl #4
 800b302:	eb00 1605 	add.w	r6, r0, r5, lsl #4
 800b306:	d077      	beq.n	800b3f8 <arm_var_f32+0x140>
 800b308:	ed96 7a00 	vldr	s14, [r6]
 800b30c:	1e63      	subs	r3, r4, #1
 800b30e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b312:	d063      	beq.n	800b3dc <arm_var_f32+0x124>
 800b314:	ed96 7a01 	vldr	s14, [r6, #4]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b31e:	d05d      	beq.n	800b3dc <arm_var_f32+0x124>
 800b320:	ed96 7a02 	vldr	s14, [r6, #8]
 800b324:	ee06 1a90 	vmov	s13, r1
 800b328:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b32c:	eef8 4a66 	vcvt.f32.u32	s9, s13
 800b330:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800b334:	2d00      	cmp	r5, #0
 800b336:	d059      	beq.n	800b3ec <arm_var_f32+0x134>
 800b338:	f100 0310 	add.w	r3, r0, #16
 800b33c:	012f      	lsls	r7, r5, #4
 800b33e:	4629      	mov	r1, r5
 800b340:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800b410 <arm_var_f32+0x158>
 800b344:	ed13 6a04 	vldr	s12, [r3, #-16]
 800b348:	ed53 6a03 	vldr	s13, [r3, #-12]
 800b34c:	ed13 7a02 	vldr	s14, [r3, #-8]
 800b350:	ed53 5a01 	vldr	s11, [r3, #-4]
 800b354:	ee36 6a45 	vsub.f32	s12, s12, s10
 800b358:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800b35c:	ee26 6a06 	vmul.f32	s12, s12, s12
 800b360:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800b364:	ee36 6a27 	vadd.f32	s12, s12, s15
 800b368:	ee77 7a45 	vsub.f32	s15, s14, s10
 800b36c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b370:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b374:	ee35 6ac5 	vsub.f32	s12, s11, s10
 800b378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b37c:	ee26 6a06 	vmul.f32	s12, s12, s12
 800b380:	3901      	subs	r1, #1
 800b382:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b386:	f103 0310 	add.w	r3, r3, #16
 800b38a:	d1db      	bne.n	800b344 <arm_var_f32+0x8c>
 800b38c:	4438      	add	r0, r7
 800b38e:	b1dc      	cbz	r4, 800b3c8 <arm_var_f32+0x110>
 800b390:	1e63      	subs	r3, r4, #1
 800b392:	ed90 7a00 	vldr	s14, [r0]
 800b396:	ee37 7a45 	vsub.f32	s14, s14, s10
 800b39a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800b39e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3a2:	b18b      	cbz	r3, 800b3c8 <arm_var_f32+0x110>
 800b3a4:	ed90 7a01 	vldr	s14, [r0, #4]
 800b3a8:	ee37 7a45 	vsub.f32	s14, s14, s10
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	ee27 7a07 	vmul.f32	s14, s14, s14
 800b3b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3b6:	d007      	beq.n	800b3c8 <arm_var_f32+0x110>
 800b3b8:	ed90 7a02 	vldr	s14, [r0, #8]
 800b3bc:	ee37 5a45 	vsub.f32	s10, s14, s10
 800b3c0:	ee25 5a05 	vmul.f32	s10, s10, s10
 800b3c4:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b3c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3cc:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800b3d0:	bcf0      	pop	{r4, r5, r6, r7}
 800b3d2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b3d6:	ed82 7a00 	vstr	s14, [r2]
 800b3da:	4770      	bx	lr
 800b3dc:	ee07 1a10 	vmov	s14, r1
 800b3e0:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800b3e4:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800b3e8:	2d00      	cmp	r5, #0
 800b3ea:	d1a5      	bne.n	800b338 <arm_var_f32+0x80>
 800b3ec:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800b410 <arm_var_f32+0x158>
 800b3f0:	e7cf      	b.n	800b392 <arm_var_f32+0xda>
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	4770      	bx	lr
 800b3f8:	ee07 1a10 	vmov	s14, r1
 800b3fc:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800b400:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800b404:	e79b      	b.n	800b33e <arm_var_f32+0x86>
 800b406:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800b410 <arm_var_f32+0x158>
 800b40a:	4606      	mov	r6, r0
 800b40c:	460c      	mov	r4, r1
 800b40e:	e77b      	b.n	800b308 <arm_var_f32+0x50>
 800b410:	00000000 	.word	0x00000000

0800b414 <atof>:
 800b414:	2100      	movs	r1, #0
 800b416:	f000 be79 	b.w	800c10c <strtod>

0800b41a <atoi>:
 800b41a:	220a      	movs	r2, #10
 800b41c:	2100      	movs	r1, #0
 800b41e:	f000 befd 	b.w	800c21c <strtol>
	...

0800b424 <srand>:
 800b424:	b538      	push	{r3, r4, r5, lr}
 800b426:	4b10      	ldr	r3, [pc, #64]	@ (800b468 <srand+0x44>)
 800b428:	681d      	ldr	r5, [r3, #0]
 800b42a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800b42c:	4604      	mov	r4, r0
 800b42e:	b9b3      	cbnz	r3, 800b45e <srand+0x3a>
 800b430:	2018      	movs	r0, #24
 800b432:	f003 f9f5 	bl	800e820 <malloc>
 800b436:	4602      	mov	r2, r0
 800b438:	6328      	str	r0, [r5, #48]	@ 0x30
 800b43a:	b920      	cbnz	r0, 800b446 <srand+0x22>
 800b43c:	4b0b      	ldr	r3, [pc, #44]	@ (800b46c <srand+0x48>)
 800b43e:	480c      	ldr	r0, [pc, #48]	@ (800b470 <srand+0x4c>)
 800b440:	2146      	movs	r1, #70	@ 0x46
 800b442:	f001 fff3 	bl	800d42c <__assert_func>
 800b446:	490b      	ldr	r1, [pc, #44]	@ (800b474 <srand+0x50>)
 800b448:	4b0b      	ldr	r3, [pc, #44]	@ (800b478 <srand+0x54>)
 800b44a:	e9c0 1300 	strd	r1, r3, [r0]
 800b44e:	4b0b      	ldr	r3, [pc, #44]	@ (800b47c <srand+0x58>)
 800b450:	6083      	str	r3, [r0, #8]
 800b452:	230b      	movs	r3, #11
 800b454:	8183      	strh	r3, [r0, #12]
 800b456:	2100      	movs	r1, #0
 800b458:	2001      	movs	r0, #1
 800b45a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b45e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800b460:	2200      	movs	r2, #0
 800b462:	611c      	str	r4, [r3, #16]
 800b464:	615a      	str	r2, [r3, #20]
 800b466:	bd38      	pop	{r3, r4, r5, pc}
 800b468:	20000278 	.word	0x20000278
 800b46c:	08014c3c 	.word	0x08014c3c
 800b470:	08014c53 	.word	0x08014c53
 800b474:	abcd330e 	.word	0xabcd330e
 800b478:	e66d1234 	.word	0xe66d1234
 800b47c:	0005deec 	.word	0x0005deec

0800b480 <rand>:
 800b480:	4b16      	ldr	r3, [pc, #88]	@ (800b4dc <rand+0x5c>)
 800b482:	b510      	push	{r4, lr}
 800b484:	681c      	ldr	r4, [r3, #0]
 800b486:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b488:	b9b3      	cbnz	r3, 800b4b8 <rand+0x38>
 800b48a:	2018      	movs	r0, #24
 800b48c:	f003 f9c8 	bl	800e820 <malloc>
 800b490:	4602      	mov	r2, r0
 800b492:	6320      	str	r0, [r4, #48]	@ 0x30
 800b494:	b920      	cbnz	r0, 800b4a0 <rand+0x20>
 800b496:	4b12      	ldr	r3, [pc, #72]	@ (800b4e0 <rand+0x60>)
 800b498:	4812      	ldr	r0, [pc, #72]	@ (800b4e4 <rand+0x64>)
 800b49a:	2152      	movs	r1, #82	@ 0x52
 800b49c:	f001 ffc6 	bl	800d42c <__assert_func>
 800b4a0:	4911      	ldr	r1, [pc, #68]	@ (800b4e8 <rand+0x68>)
 800b4a2:	4b12      	ldr	r3, [pc, #72]	@ (800b4ec <rand+0x6c>)
 800b4a4:	e9c0 1300 	strd	r1, r3, [r0]
 800b4a8:	4b11      	ldr	r3, [pc, #68]	@ (800b4f0 <rand+0x70>)
 800b4aa:	6083      	str	r3, [r0, #8]
 800b4ac:	230b      	movs	r3, #11
 800b4ae:	8183      	strh	r3, [r0, #12]
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	2001      	movs	r0, #1
 800b4b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b4b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b4ba:	480e      	ldr	r0, [pc, #56]	@ (800b4f4 <rand+0x74>)
 800b4bc:	690b      	ldr	r3, [r1, #16]
 800b4be:	694c      	ldr	r4, [r1, #20]
 800b4c0:	4a0d      	ldr	r2, [pc, #52]	@ (800b4f8 <rand+0x78>)
 800b4c2:	4358      	muls	r0, r3
 800b4c4:	fb02 0004 	mla	r0, r2, r4, r0
 800b4c8:	fba3 3202 	umull	r3, r2, r3, r2
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	eb40 0002 	adc.w	r0, r0, r2
 800b4d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b4d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b4da:	bd10      	pop	{r4, pc}
 800b4dc:	20000278 	.word	0x20000278
 800b4e0:	08014c3c 	.word	0x08014c3c
 800b4e4:	08014c53 	.word	0x08014c53
 800b4e8:	abcd330e 	.word	0xabcd330e
 800b4ec:	e66d1234 	.word	0xe66d1234
 800b4f0:	0005deec 	.word	0x0005deec
 800b4f4:	5851f42d 	.word	0x5851f42d
 800b4f8:	4c957f2d 	.word	0x4c957f2d

0800b4fc <sulp>:
 800b4fc:	b570      	push	{r4, r5, r6, lr}
 800b4fe:	4604      	mov	r4, r0
 800b500:	460d      	mov	r5, r1
 800b502:	ec45 4b10 	vmov	d0, r4, r5
 800b506:	4616      	mov	r6, r2
 800b508:	f003 fdbe 	bl	800f088 <__ulp>
 800b50c:	ec51 0b10 	vmov	r0, r1, d0
 800b510:	b17e      	cbz	r6, 800b532 <sulp+0x36>
 800b512:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b516:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	dd09      	ble.n	800b532 <sulp+0x36>
 800b51e:	051b      	lsls	r3, r3, #20
 800b520:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b524:	2400      	movs	r4, #0
 800b526:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b52a:	4622      	mov	r2, r4
 800b52c:	462b      	mov	r3, r5
 800b52e:	f7f5 f873 	bl	8000618 <__aeabi_dmul>
 800b532:	ec41 0b10 	vmov	d0, r0, r1
 800b536:	bd70      	pop	{r4, r5, r6, pc}

0800b538 <_strtod_l>:
 800b538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	b09f      	sub	sp, #124	@ 0x7c
 800b53e:	460c      	mov	r4, r1
 800b540:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b542:	2200      	movs	r2, #0
 800b544:	921a      	str	r2, [sp, #104]	@ 0x68
 800b546:	9005      	str	r0, [sp, #20]
 800b548:	f04f 0a00 	mov.w	sl, #0
 800b54c:	f04f 0b00 	mov.w	fp, #0
 800b550:	460a      	mov	r2, r1
 800b552:	9219      	str	r2, [sp, #100]	@ 0x64
 800b554:	7811      	ldrb	r1, [r2, #0]
 800b556:	292b      	cmp	r1, #43	@ 0x2b
 800b558:	d04a      	beq.n	800b5f0 <_strtod_l+0xb8>
 800b55a:	d838      	bhi.n	800b5ce <_strtod_l+0x96>
 800b55c:	290d      	cmp	r1, #13
 800b55e:	d832      	bhi.n	800b5c6 <_strtod_l+0x8e>
 800b560:	2908      	cmp	r1, #8
 800b562:	d832      	bhi.n	800b5ca <_strtod_l+0x92>
 800b564:	2900      	cmp	r1, #0
 800b566:	d03b      	beq.n	800b5e0 <_strtod_l+0xa8>
 800b568:	2200      	movs	r2, #0
 800b56a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b56c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b56e:	782a      	ldrb	r2, [r5, #0]
 800b570:	2a30      	cmp	r2, #48	@ 0x30
 800b572:	f040 80b2 	bne.w	800b6da <_strtod_l+0x1a2>
 800b576:	786a      	ldrb	r2, [r5, #1]
 800b578:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b57c:	2a58      	cmp	r2, #88	@ 0x58
 800b57e:	d16e      	bne.n	800b65e <_strtod_l+0x126>
 800b580:	9302      	str	r3, [sp, #8]
 800b582:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	ab1a      	add	r3, sp, #104	@ 0x68
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	4a8f      	ldr	r2, [pc, #572]	@ (800b7c8 <_strtod_l+0x290>)
 800b58c:	9805      	ldr	r0, [sp, #20]
 800b58e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b590:	a919      	add	r1, sp, #100	@ 0x64
 800b592:	f002 fe73 	bl	800e27c <__gethex>
 800b596:	f010 060f 	ands.w	r6, r0, #15
 800b59a:	4604      	mov	r4, r0
 800b59c:	d005      	beq.n	800b5aa <_strtod_l+0x72>
 800b59e:	2e06      	cmp	r6, #6
 800b5a0:	d128      	bne.n	800b5f4 <_strtod_l+0xbc>
 800b5a2:	3501      	adds	r5, #1
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b5a8:	930e      	str	r3, [sp, #56]	@ 0x38
 800b5aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f040 858e 	bne.w	800c0ce <_strtod_l+0xb96>
 800b5b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5b4:	b1cb      	cbz	r3, 800b5ea <_strtod_l+0xb2>
 800b5b6:	4652      	mov	r2, sl
 800b5b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b5bc:	ec43 2b10 	vmov	d0, r2, r3
 800b5c0:	b01f      	add	sp, #124	@ 0x7c
 800b5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c6:	2920      	cmp	r1, #32
 800b5c8:	d1ce      	bne.n	800b568 <_strtod_l+0x30>
 800b5ca:	3201      	adds	r2, #1
 800b5cc:	e7c1      	b.n	800b552 <_strtod_l+0x1a>
 800b5ce:	292d      	cmp	r1, #45	@ 0x2d
 800b5d0:	d1ca      	bne.n	800b568 <_strtod_l+0x30>
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	910e      	str	r1, [sp, #56]	@ 0x38
 800b5d6:	1c51      	adds	r1, r2, #1
 800b5d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b5da:	7852      	ldrb	r2, [r2, #1]
 800b5dc:	2a00      	cmp	r2, #0
 800b5de:	d1c5      	bne.n	800b56c <_strtod_l+0x34>
 800b5e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f040 8570 	bne.w	800c0ca <_strtod_l+0xb92>
 800b5ea:	4652      	mov	r2, sl
 800b5ec:	465b      	mov	r3, fp
 800b5ee:	e7e5      	b.n	800b5bc <_strtod_l+0x84>
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	e7ef      	b.n	800b5d4 <_strtod_l+0x9c>
 800b5f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b5f6:	b13a      	cbz	r2, 800b608 <_strtod_l+0xd0>
 800b5f8:	2135      	movs	r1, #53	@ 0x35
 800b5fa:	a81c      	add	r0, sp, #112	@ 0x70
 800b5fc:	f003 fe3e 	bl	800f27c <__copybits>
 800b600:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b602:	9805      	ldr	r0, [sp, #20]
 800b604:	f003 fa14 	bl	800ea30 <_Bfree>
 800b608:	3e01      	subs	r6, #1
 800b60a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b60c:	2e04      	cmp	r6, #4
 800b60e:	d806      	bhi.n	800b61e <_strtod_l+0xe6>
 800b610:	e8df f006 	tbb	[pc, r6]
 800b614:	201d0314 	.word	0x201d0314
 800b618:	14          	.byte	0x14
 800b619:	00          	.byte	0x00
 800b61a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b61e:	05e1      	lsls	r1, r4, #23
 800b620:	bf48      	it	mi
 800b622:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b626:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b62a:	0d1b      	lsrs	r3, r3, #20
 800b62c:	051b      	lsls	r3, r3, #20
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1bb      	bne.n	800b5aa <_strtod_l+0x72>
 800b632:	f001 feb1 	bl	800d398 <__errno>
 800b636:	2322      	movs	r3, #34	@ 0x22
 800b638:	6003      	str	r3, [r0, #0]
 800b63a:	e7b6      	b.n	800b5aa <_strtod_l+0x72>
 800b63c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b640:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b644:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b648:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b64c:	e7e7      	b.n	800b61e <_strtod_l+0xe6>
 800b64e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b7d0 <_strtod_l+0x298>
 800b652:	e7e4      	b.n	800b61e <_strtod_l+0xe6>
 800b654:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b658:	f04f 3aff 	mov.w	sl, #4294967295
 800b65c:	e7df      	b.n	800b61e <_strtod_l+0xe6>
 800b65e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b660:	1c5a      	adds	r2, r3, #1
 800b662:	9219      	str	r2, [sp, #100]	@ 0x64
 800b664:	785b      	ldrb	r3, [r3, #1]
 800b666:	2b30      	cmp	r3, #48	@ 0x30
 800b668:	d0f9      	beq.n	800b65e <_strtod_l+0x126>
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d09d      	beq.n	800b5aa <_strtod_l+0x72>
 800b66e:	2301      	movs	r3, #1
 800b670:	2700      	movs	r7, #0
 800b672:	9308      	str	r3, [sp, #32]
 800b674:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b676:	930c      	str	r3, [sp, #48]	@ 0x30
 800b678:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b67a:	46b9      	mov	r9, r7
 800b67c:	220a      	movs	r2, #10
 800b67e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b680:	7805      	ldrb	r5, [r0, #0]
 800b682:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b686:	b2d9      	uxtb	r1, r3
 800b688:	2909      	cmp	r1, #9
 800b68a:	d928      	bls.n	800b6de <_strtod_l+0x1a6>
 800b68c:	494f      	ldr	r1, [pc, #316]	@ (800b7cc <_strtod_l+0x294>)
 800b68e:	2201      	movs	r2, #1
 800b690:	f001 fdb7 	bl	800d202 <strncmp>
 800b694:	2800      	cmp	r0, #0
 800b696:	d032      	beq.n	800b6fe <_strtod_l+0x1c6>
 800b698:	2000      	movs	r0, #0
 800b69a:	462a      	mov	r2, r5
 800b69c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b69e:	464d      	mov	r5, r9
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2a65      	cmp	r2, #101	@ 0x65
 800b6a4:	d001      	beq.n	800b6aa <_strtod_l+0x172>
 800b6a6:	2a45      	cmp	r2, #69	@ 0x45
 800b6a8:	d114      	bne.n	800b6d4 <_strtod_l+0x19c>
 800b6aa:	b91d      	cbnz	r5, 800b6b4 <_strtod_l+0x17c>
 800b6ac:	9a08      	ldr	r2, [sp, #32]
 800b6ae:	4302      	orrs	r2, r0
 800b6b0:	d096      	beq.n	800b5e0 <_strtod_l+0xa8>
 800b6b2:	2500      	movs	r5, #0
 800b6b4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b6b6:	1c62      	adds	r2, r4, #1
 800b6b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6ba:	7862      	ldrb	r2, [r4, #1]
 800b6bc:	2a2b      	cmp	r2, #43	@ 0x2b
 800b6be:	d07a      	beq.n	800b7b6 <_strtod_l+0x27e>
 800b6c0:	2a2d      	cmp	r2, #45	@ 0x2d
 800b6c2:	d07e      	beq.n	800b7c2 <_strtod_l+0x28a>
 800b6c4:	f04f 0c00 	mov.w	ip, #0
 800b6c8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b6cc:	2909      	cmp	r1, #9
 800b6ce:	f240 8085 	bls.w	800b7dc <_strtod_l+0x2a4>
 800b6d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b6d4:	f04f 0800 	mov.w	r8, #0
 800b6d8:	e0a5      	b.n	800b826 <_strtod_l+0x2ee>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	e7c8      	b.n	800b670 <_strtod_l+0x138>
 800b6de:	f1b9 0f08 	cmp.w	r9, #8
 800b6e2:	bfd8      	it	le
 800b6e4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b6e6:	f100 0001 	add.w	r0, r0, #1
 800b6ea:	bfda      	itte	le
 800b6ec:	fb02 3301 	mlale	r3, r2, r1, r3
 800b6f0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b6f2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b6f6:	f109 0901 	add.w	r9, r9, #1
 800b6fa:	9019      	str	r0, [sp, #100]	@ 0x64
 800b6fc:	e7bf      	b.n	800b67e <_strtod_l+0x146>
 800b6fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b700:	1c5a      	adds	r2, r3, #1
 800b702:	9219      	str	r2, [sp, #100]	@ 0x64
 800b704:	785a      	ldrb	r2, [r3, #1]
 800b706:	f1b9 0f00 	cmp.w	r9, #0
 800b70a:	d03b      	beq.n	800b784 <_strtod_l+0x24c>
 800b70c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b70e:	464d      	mov	r5, r9
 800b710:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b714:	2b09      	cmp	r3, #9
 800b716:	d912      	bls.n	800b73e <_strtod_l+0x206>
 800b718:	2301      	movs	r3, #1
 800b71a:	e7c2      	b.n	800b6a2 <_strtod_l+0x16a>
 800b71c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b71e:	1c5a      	adds	r2, r3, #1
 800b720:	9219      	str	r2, [sp, #100]	@ 0x64
 800b722:	785a      	ldrb	r2, [r3, #1]
 800b724:	3001      	adds	r0, #1
 800b726:	2a30      	cmp	r2, #48	@ 0x30
 800b728:	d0f8      	beq.n	800b71c <_strtod_l+0x1e4>
 800b72a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b72e:	2b08      	cmp	r3, #8
 800b730:	f200 84d2 	bhi.w	800c0d8 <_strtod_l+0xba0>
 800b734:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b736:	900a      	str	r0, [sp, #40]	@ 0x28
 800b738:	2000      	movs	r0, #0
 800b73a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b73c:	4605      	mov	r5, r0
 800b73e:	3a30      	subs	r2, #48	@ 0x30
 800b740:	f100 0301 	add.w	r3, r0, #1
 800b744:	d018      	beq.n	800b778 <_strtod_l+0x240>
 800b746:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b748:	4419      	add	r1, r3
 800b74a:	910a      	str	r1, [sp, #40]	@ 0x28
 800b74c:	462e      	mov	r6, r5
 800b74e:	f04f 0e0a 	mov.w	lr, #10
 800b752:	1c71      	adds	r1, r6, #1
 800b754:	eba1 0c05 	sub.w	ip, r1, r5
 800b758:	4563      	cmp	r3, ip
 800b75a:	dc15      	bgt.n	800b788 <_strtod_l+0x250>
 800b75c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b760:	182b      	adds	r3, r5, r0
 800b762:	2b08      	cmp	r3, #8
 800b764:	f105 0501 	add.w	r5, r5, #1
 800b768:	4405      	add	r5, r0
 800b76a:	dc1a      	bgt.n	800b7a2 <_strtod_l+0x26a>
 800b76c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b76e:	230a      	movs	r3, #10
 800b770:	fb03 2301 	mla	r3, r3, r1, r2
 800b774:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b776:	2300      	movs	r3, #0
 800b778:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b77a:	1c51      	adds	r1, r2, #1
 800b77c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b77e:	7852      	ldrb	r2, [r2, #1]
 800b780:	4618      	mov	r0, r3
 800b782:	e7c5      	b.n	800b710 <_strtod_l+0x1d8>
 800b784:	4648      	mov	r0, r9
 800b786:	e7ce      	b.n	800b726 <_strtod_l+0x1ee>
 800b788:	2e08      	cmp	r6, #8
 800b78a:	dc05      	bgt.n	800b798 <_strtod_l+0x260>
 800b78c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b78e:	fb0e f606 	mul.w	r6, lr, r6
 800b792:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b794:	460e      	mov	r6, r1
 800b796:	e7dc      	b.n	800b752 <_strtod_l+0x21a>
 800b798:	2910      	cmp	r1, #16
 800b79a:	bfd8      	it	le
 800b79c:	fb0e f707 	mulle.w	r7, lr, r7
 800b7a0:	e7f8      	b.n	800b794 <_strtod_l+0x25c>
 800b7a2:	2b0f      	cmp	r3, #15
 800b7a4:	bfdc      	itt	le
 800b7a6:	230a      	movle	r3, #10
 800b7a8:	fb03 2707 	mlale	r7, r3, r7, r2
 800b7ac:	e7e3      	b.n	800b776 <_strtod_l+0x23e>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e77a      	b.n	800b6ac <_strtod_l+0x174>
 800b7b6:	f04f 0c00 	mov.w	ip, #0
 800b7ba:	1ca2      	adds	r2, r4, #2
 800b7bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7be:	78a2      	ldrb	r2, [r4, #2]
 800b7c0:	e782      	b.n	800b6c8 <_strtod_l+0x190>
 800b7c2:	f04f 0c01 	mov.w	ip, #1
 800b7c6:	e7f8      	b.n	800b7ba <_strtod_l+0x282>
 800b7c8:	08014ed8 	.word	0x08014ed8
 800b7cc:	08014cab 	.word	0x08014cab
 800b7d0:	7ff00000 	.word	0x7ff00000
 800b7d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7d6:	1c51      	adds	r1, r2, #1
 800b7d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b7da:	7852      	ldrb	r2, [r2, #1]
 800b7dc:	2a30      	cmp	r2, #48	@ 0x30
 800b7de:	d0f9      	beq.n	800b7d4 <_strtod_l+0x29c>
 800b7e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b7e4:	2908      	cmp	r1, #8
 800b7e6:	f63f af75 	bhi.w	800b6d4 <_strtod_l+0x19c>
 800b7ea:	3a30      	subs	r2, #48	@ 0x30
 800b7ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b7f2:	f04f 080a 	mov.w	r8, #10
 800b7f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7f8:	1c56      	adds	r6, r2, #1
 800b7fa:	9619      	str	r6, [sp, #100]	@ 0x64
 800b7fc:	7852      	ldrb	r2, [r2, #1]
 800b7fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b802:	f1be 0f09 	cmp.w	lr, #9
 800b806:	d939      	bls.n	800b87c <_strtod_l+0x344>
 800b808:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b80a:	1a76      	subs	r6, r6, r1
 800b80c:	2e08      	cmp	r6, #8
 800b80e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b812:	dc03      	bgt.n	800b81c <_strtod_l+0x2e4>
 800b814:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b816:	4588      	cmp	r8, r1
 800b818:	bfa8      	it	ge
 800b81a:	4688      	movge	r8, r1
 800b81c:	f1bc 0f00 	cmp.w	ip, #0
 800b820:	d001      	beq.n	800b826 <_strtod_l+0x2ee>
 800b822:	f1c8 0800 	rsb	r8, r8, #0
 800b826:	2d00      	cmp	r5, #0
 800b828:	d14e      	bne.n	800b8c8 <_strtod_l+0x390>
 800b82a:	9908      	ldr	r1, [sp, #32]
 800b82c:	4308      	orrs	r0, r1
 800b82e:	f47f aebc 	bne.w	800b5aa <_strtod_l+0x72>
 800b832:	2b00      	cmp	r3, #0
 800b834:	f47f aed4 	bne.w	800b5e0 <_strtod_l+0xa8>
 800b838:	2a69      	cmp	r2, #105	@ 0x69
 800b83a:	d028      	beq.n	800b88e <_strtod_l+0x356>
 800b83c:	dc25      	bgt.n	800b88a <_strtod_l+0x352>
 800b83e:	2a49      	cmp	r2, #73	@ 0x49
 800b840:	d025      	beq.n	800b88e <_strtod_l+0x356>
 800b842:	2a4e      	cmp	r2, #78	@ 0x4e
 800b844:	f47f aecc 	bne.w	800b5e0 <_strtod_l+0xa8>
 800b848:	499a      	ldr	r1, [pc, #616]	@ (800bab4 <_strtod_l+0x57c>)
 800b84a:	a819      	add	r0, sp, #100	@ 0x64
 800b84c:	f002 ff38 	bl	800e6c0 <__match>
 800b850:	2800      	cmp	r0, #0
 800b852:	f43f aec5 	beq.w	800b5e0 <_strtod_l+0xa8>
 800b856:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2b28      	cmp	r3, #40	@ 0x28
 800b85c:	d12e      	bne.n	800b8bc <_strtod_l+0x384>
 800b85e:	4996      	ldr	r1, [pc, #600]	@ (800bab8 <_strtod_l+0x580>)
 800b860:	aa1c      	add	r2, sp, #112	@ 0x70
 800b862:	a819      	add	r0, sp, #100	@ 0x64
 800b864:	f002 ff40 	bl	800e6e8 <__hexnan>
 800b868:	2805      	cmp	r0, #5
 800b86a:	d127      	bne.n	800b8bc <_strtod_l+0x384>
 800b86c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b86e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b872:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b876:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b87a:	e696      	b.n	800b5aa <_strtod_l+0x72>
 800b87c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b87e:	fb08 2101 	mla	r1, r8, r1, r2
 800b882:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b886:	9209      	str	r2, [sp, #36]	@ 0x24
 800b888:	e7b5      	b.n	800b7f6 <_strtod_l+0x2be>
 800b88a:	2a6e      	cmp	r2, #110	@ 0x6e
 800b88c:	e7da      	b.n	800b844 <_strtod_l+0x30c>
 800b88e:	498b      	ldr	r1, [pc, #556]	@ (800babc <_strtod_l+0x584>)
 800b890:	a819      	add	r0, sp, #100	@ 0x64
 800b892:	f002 ff15 	bl	800e6c0 <__match>
 800b896:	2800      	cmp	r0, #0
 800b898:	f43f aea2 	beq.w	800b5e0 <_strtod_l+0xa8>
 800b89c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b89e:	4988      	ldr	r1, [pc, #544]	@ (800bac0 <_strtod_l+0x588>)
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	a819      	add	r0, sp, #100	@ 0x64
 800b8a4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b8a6:	f002 ff0b 	bl	800e6c0 <__match>
 800b8aa:	b910      	cbnz	r0, 800b8b2 <_strtod_l+0x37a>
 800b8ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b8b2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800bad0 <_strtod_l+0x598>
 800b8b6:	f04f 0a00 	mov.w	sl, #0
 800b8ba:	e676      	b.n	800b5aa <_strtod_l+0x72>
 800b8bc:	4881      	ldr	r0, [pc, #516]	@ (800bac4 <_strtod_l+0x58c>)
 800b8be:	f001 fda7 	bl	800d410 <nan>
 800b8c2:	ec5b ab10 	vmov	sl, fp, d0
 800b8c6:	e670      	b.n	800b5aa <_strtod_l+0x72>
 800b8c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b8cc:	eba8 0303 	sub.w	r3, r8, r3
 800b8d0:	f1b9 0f00 	cmp.w	r9, #0
 800b8d4:	bf08      	it	eq
 800b8d6:	46a9      	moveq	r9, r5
 800b8d8:	2d10      	cmp	r5, #16
 800b8da:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8dc:	462c      	mov	r4, r5
 800b8de:	bfa8      	it	ge
 800b8e0:	2410      	movge	r4, #16
 800b8e2:	f7f4 fe1f 	bl	8000524 <__aeabi_ui2d>
 800b8e6:	2d09      	cmp	r5, #9
 800b8e8:	4682      	mov	sl, r0
 800b8ea:	468b      	mov	fp, r1
 800b8ec:	dc13      	bgt.n	800b916 <_strtod_l+0x3de>
 800b8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f43f ae5a 	beq.w	800b5aa <_strtod_l+0x72>
 800b8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8f8:	dd78      	ble.n	800b9ec <_strtod_l+0x4b4>
 800b8fa:	2b16      	cmp	r3, #22
 800b8fc:	dc5f      	bgt.n	800b9be <_strtod_l+0x486>
 800b8fe:	4972      	ldr	r1, [pc, #456]	@ (800bac8 <_strtod_l+0x590>)
 800b900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b904:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b908:	4652      	mov	r2, sl
 800b90a:	465b      	mov	r3, fp
 800b90c:	f7f4 fe84 	bl	8000618 <__aeabi_dmul>
 800b910:	4682      	mov	sl, r0
 800b912:	468b      	mov	fp, r1
 800b914:	e649      	b.n	800b5aa <_strtod_l+0x72>
 800b916:	4b6c      	ldr	r3, [pc, #432]	@ (800bac8 <_strtod_l+0x590>)
 800b918:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b91c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b920:	f7f4 fe7a 	bl	8000618 <__aeabi_dmul>
 800b924:	4682      	mov	sl, r0
 800b926:	4638      	mov	r0, r7
 800b928:	468b      	mov	fp, r1
 800b92a:	f7f4 fdfb 	bl	8000524 <__aeabi_ui2d>
 800b92e:	4602      	mov	r2, r0
 800b930:	460b      	mov	r3, r1
 800b932:	4650      	mov	r0, sl
 800b934:	4659      	mov	r1, fp
 800b936:	f7f4 fcb9 	bl	80002ac <__adddf3>
 800b93a:	2d0f      	cmp	r5, #15
 800b93c:	4682      	mov	sl, r0
 800b93e:	468b      	mov	fp, r1
 800b940:	ddd5      	ble.n	800b8ee <_strtod_l+0x3b6>
 800b942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b944:	1b2c      	subs	r4, r5, r4
 800b946:	441c      	add	r4, r3
 800b948:	2c00      	cmp	r4, #0
 800b94a:	f340 8093 	ble.w	800ba74 <_strtod_l+0x53c>
 800b94e:	f014 030f 	ands.w	r3, r4, #15
 800b952:	d00a      	beq.n	800b96a <_strtod_l+0x432>
 800b954:	495c      	ldr	r1, [pc, #368]	@ (800bac8 <_strtod_l+0x590>)
 800b956:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b95a:	4652      	mov	r2, sl
 800b95c:	465b      	mov	r3, fp
 800b95e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b962:	f7f4 fe59 	bl	8000618 <__aeabi_dmul>
 800b966:	4682      	mov	sl, r0
 800b968:	468b      	mov	fp, r1
 800b96a:	f034 040f 	bics.w	r4, r4, #15
 800b96e:	d073      	beq.n	800ba58 <_strtod_l+0x520>
 800b970:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b974:	dd49      	ble.n	800ba0a <_strtod_l+0x4d2>
 800b976:	2400      	movs	r4, #0
 800b978:	46a0      	mov	r8, r4
 800b97a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b97c:	46a1      	mov	r9, r4
 800b97e:	9a05      	ldr	r2, [sp, #20]
 800b980:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800bad0 <_strtod_l+0x598>
 800b984:	2322      	movs	r3, #34	@ 0x22
 800b986:	6013      	str	r3, [r2, #0]
 800b988:	f04f 0a00 	mov.w	sl, #0
 800b98c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f43f ae0b 	beq.w	800b5aa <_strtod_l+0x72>
 800b994:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b996:	9805      	ldr	r0, [sp, #20]
 800b998:	f003 f84a 	bl	800ea30 <_Bfree>
 800b99c:	9805      	ldr	r0, [sp, #20]
 800b99e:	4649      	mov	r1, r9
 800b9a0:	f003 f846 	bl	800ea30 <_Bfree>
 800b9a4:	9805      	ldr	r0, [sp, #20]
 800b9a6:	4641      	mov	r1, r8
 800b9a8:	f003 f842 	bl	800ea30 <_Bfree>
 800b9ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9ae:	9805      	ldr	r0, [sp, #20]
 800b9b0:	f003 f83e 	bl	800ea30 <_Bfree>
 800b9b4:	9805      	ldr	r0, [sp, #20]
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	f003 f83a 	bl	800ea30 <_Bfree>
 800b9bc:	e5f5      	b.n	800b5aa <_strtod_l+0x72>
 800b9be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	dbbc      	blt.n	800b942 <_strtod_l+0x40a>
 800b9c8:	4c3f      	ldr	r4, [pc, #252]	@ (800bac8 <_strtod_l+0x590>)
 800b9ca:	f1c5 050f 	rsb	r5, r5, #15
 800b9ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b9d2:	4652      	mov	r2, sl
 800b9d4:	465b      	mov	r3, fp
 800b9d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9da:	f7f4 fe1d 	bl	8000618 <__aeabi_dmul>
 800b9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e0:	1b5d      	subs	r5, r3, r5
 800b9e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b9e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b9ea:	e78f      	b.n	800b90c <_strtod_l+0x3d4>
 800b9ec:	3316      	adds	r3, #22
 800b9ee:	dba8      	blt.n	800b942 <_strtod_l+0x40a>
 800b9f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9f2:	eba3 0808 	sub.w	r8, r3, r8
 800b9f6:	4b34      	ldr	r3, [pc, #208]	@ (800bac8 <_strtod_l+0x590>)
 800b9f8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b9fc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ba00:	4650      	mov	r0, sl
 800ba02:	4659      	mov	r1, fp
 800ba04:	f7f4 ff32 	bl	800086c <__aeabi_ddiv>
 800ba08:	e782      	b.n	800b910 <_strtod_l+0x3d8>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	4f2f      	ldr	r7, [pc, #188]	@ (800bacc <_strtod_l+0x594>)
 800ba0e:	1124      	asrs	r4, r4, #4
 800ba10:	4650      	mov	r0, sl
 800ba12:	4659      	mov	r1, fp
 800ba14:	461e      	mov	r6, r3
 800ba16:	2c01      	cmp	r4, #1
 800ba18:	dc21      	bgt.n	800ba5e <_strtod_l+0x526>
 800ba1a:	b10b      	cbz	r3, 800ba20 <_strtod_l+0x4e8>
 800ba1c:	4682      	mov	sl, r0
 800ba1e:	468b      	mov	fp, r1
 800ba20:	492a      	ldr	r1, [pc, #168]	@ (800bacc <_strtod_l+0x594>)
 800ba22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ba26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ba2a:	4652      	mov	r2, sl
 800ba2c:	465b      	mov	r3, fp
 800ba2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba32:	f7f4 fdf1 	bl	8000618 <__aeabi_dmul>
 800ba36:	4b26      	ldr	r3, [pc, #152]	@ (800bad0 <_strtod_l+0x598>)
 800ba38:	460a      	mov	r2, r1
 800ba3a:	400b      	ands	r3, r1
 800ba3c:	4925      	ldr	r1, [pc, #148]	@ (800bad4 <_strtod_l+0x59c>)
 800ba3e:	428b      	cmp	r3, r1
 800ba40:	4682      	mov	sl, r0
 800ba42:	d898      	bhi.n	800b976 <_strtod_l+0x43e>
 800ba44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ba48:	428b      	cmp	r3, r1
 800ba4a:	bf86      	itte	hi
 800ba4c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800bad8 <_strtod_l+0x5a0>
 800ba50:	f04f 3aff 	movhi.w	sl, #4294967295
 800ba54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ba58:	2300      	movs	r3, #0
 800ba5a:	9308      	str	r3, [sp, #32]
 800ba5c:	e076      	b.n	800bb4c <_strtod_l+0x614>
 800ba5e:	07e2      	lsls	r2, r4, #31
 800ba60:	d504      	bpl.n	800ba6c <_strtod_l+0x534>
 800ba62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba66:	f7f4 fdd7 	bl	8000618 <__aeabi_dmul>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	3601      	adds	r6, #1
 800ba6e:	1064      	asrs	r4, r4, #1
 800ba70:	3708      	adds	r7, #8
 800ba72:	e7d0      	b.n	800ba16 <_strtod_l+0x4de>
 800ba74:	d0f0      	beq.n	800ba58 <_strtod_l+0x520>
 800ba76:	4264      	negs	r4, r4
 800ba78:	f014 020f 	ands.w	r2, r4, #15
 800ba7c:	d00a      	beq.n	800ba94 <_strtod_l+0x55c>
 800ba7e:	4b12      	ldr	r3, [pc, #72]	@ (800bac8 <_strtod_l+0x590>)
 800ba80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba84:	4650      	mov	r0, sl
 800ba86:	4659      	mov	r1, fp
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	f7f4 feee 	bl	800086c <__aeabi_ddiv>
 800ba90:	4682      	mov	sl, r0
 800ba92:	468b      	mov	fp, r1
 800ba94:	1124      	asrs	r4, r4, #4
 800ba96:	d0df      	beq.n	800ba58 <_strtod_l+0x520>
 800ba98:	2c1f      	cmp	r4, #31
 800ba9a:	dd1f      	ble.n	800badc <_strtod_l+0x5a4>
 800ba9c:	2400      	movs	r4, #0
 800ba9e:	46a0      	mov	r8, r4
 800baa0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800baa2:	46a1      	mov	r9, r4
 800baa4:	9a05      	ldr	r2, [sp, #20]
 800baa6:	2322      	movs	r3, #34	@ 0x22
 800baa8:	f04f 0a00 	mov.w	sl, #0
 800baac:	f04f 0b00 	mov.w	fp, #0
 800bab0:	6013      	str	r3, [r2, #0]
 800bab2:	e76b      	b.n	800b98c <_strtod_l+0x454>
 800bab4:	08014cba 	.word	0x08014cba
 800bab8:	08014ec4 	.word	0x08014ec4
 800babc:	08014cb2 	.word	0x08014cb2
 800bac0:	08014d87 	.word	0x08014d87
 800bac4:	08014d83 	.word	0x08014d83
 800bac8:	08015050 	.word	0x08015050
 800bacc:	08015028 	.word	0x08015028
 800bad0:	7ff00000 	.word	0x7ff00000
 800bad4:	7ca00000 	.word	0x7ca00000
 800bad8:	7fefffff 	.word	0x7fefffff
 800badc:	f014 0310 	ands.w	r3, r4, #16
 800bae0:	bf18      	it	ne
 800bae2:	236a      	movne	r3, #106	@ 0x6a
 800bae4:	4ea9      	ldr	r6, [pc, #676]	@ (800bd8c <_strtod_l+0x854>)
 800bae6:	9308      	str	r3, [sp, #32]
 800bae8:	4650      	mov	r0, sl
 800baea:	4659      	mov	r1, fp
 800baec:	2300      	movs	r3, #0
 800baee:	07e7      	lsls	r7, r4, #31
 800baf0:	d504      	bpl.n	800bafc <_strtod_l+0x5c4>
 800baf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800baf6:	f7f4 fd8f 	bl	8000618 <__aeabi_dmul>
 800bafa:	2301      	movs	r3, #1
 800bafc:	1064      	asrs	r4, r4, #1
 800bafe:	f106 0608 	add.w	r6, r6, #8
 800bb02:	d1f4      	bne.n	800baee <_strtod_l+0x5b6>
 800bb04:	b10b      	cbz	r3, 800bb0a <_strtod_l+0x5d2>
 800bb06:	4682      	mov	sl, r0
 800bb08:	468b      	mov	fp, r1
 800bb0a:	9b08      	ldr	r3, [sp, #32]
 800bb0c:	b1b3      	cbz	r3, 800bb3c <_strtod_l+0x604>
 800bb0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bb12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	4659      	mov	r1, fp
 800bb1a:	dd0f      	ble.n	800bb3c <_strtod_l+0x604>
 800bb1c:	2b1f      	cmp	r3, #31
 800bb1e:	dd56      	ble.n	800bbce <_strtod_l+0x696>
 800bb20:	2b34      	cmp	r3, #52	@ 0x34
 800bb22:	bfde      	ittt	le
 800bb24:	f04f 33ff 	movle.w	r3, #4294967295
 800bb28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bb2c:	4093      	lslle	r3, r2
 800bb2e:	f04f 0a00 	mov.w	sl, #0
 800bb32:	bfcc      	ite	gt
 800bb34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bb38:	ea03 0b01 	andle.w	fp, r3, r1
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2300      	movs	r3, #0
 800bb40:	4650      	mov	r0, sl
 800bb42:	4659      	mov	r1, fp
 800bb44:	f7f4 ffd0 	bl	8000ae8 <__aeabi_dcmpeq>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d1a7      	bne.n	800ba9c <_strtod_l+0x564>
 800bb4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bb52:	9805      	ldr	r0, [sp, #20]
 800bb54:	462b      	mov	r3, r5
 800bb56:	464a      	mov	r2, r9
 800bb58:	f002 ffd2 	bl	800eb00 <__s2b>
 800bb5c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	f43f af09 	beq.w	800b976 <_strtod_l+0x43e>
 800bb64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb68:	2a00      	cmp	r2, #0
 800bb6a:	eba3 0308 	sub.w	r3, r3, r8
 800bb6e:	bfa8      	it	ge
 800bb70:	2300      	movge	r3, #0
 800bb72:	9312      	str	r3, [sp, #72]	@ 0x48
 800bb74:	2400      	movs	r4, #0
 800bb76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bb7a:	9316      	str	r3, [sp, #88]	@ 0x58
 800bb7c:	46a0      	mov	r8, r4
 800bb7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb80:	9805      	ldr	r0, [sp, #20]
 800bb82:	6859      	ldr	r1, [r3, #4]
 800bb84:	f002 ff14 	bl	800e9b0 <_Balloc>
 800bb88:	4681      	mov	r9, r0
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	f43f aef7 	beq.w	800b97e <_strtod_l+0x446>
 800bb90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb92:	691a      	ldr	r2, [r3, #16]
 800bb94:	3202      	adds	r2, #2
 800bb96:	f103 010c 	add.w	r1, r3, #12
 800bb9a:	0092      	lsls	r2, r2, #2
 800bb9c:	300c      	adds	r0, #12
 800bb9e:	f001 fc28 	bl	800d3f2 <memcpy>
 800bba2:	ec4b ab10 	vmov	d0, sl, fp
 800bba6:	9805      	ldr	r0, [sp, #20]
 800bba8:	aa1c      	add	r2, sp, #112	@ 0x70
 800bbaa:	a91b      	add	r1, sp, #108	@ 0x6c
 800bbac:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bbb0:	f003 fada 	bl	800f168 <__d2b>
 800bbb4:	901a      	str	r0, [sp, #104]	@ 0x68
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	f43f aee1 	beq.w	800b97e <_strtod_l+0x446>
 800bbbc:	9805      	ldr	r0, [sp, #20]
 800bbbe:	2101      	movs	r1, #1
 800bbc0:	f003 f834 	bl	800ec2c <__i2b>
 800bbc4:	4680      	mov	r8, r0
 800bbc6:	b948      	cbnz	r0, 800bbdc <_strtod_l+0x6a4>
 800bbc8:	f04f 0800 	mov.w	r8, #0
 800bbcc:	e6d7      	b.n	800b97e <_strtod_l+0x446>
 800bbce:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbd6:	ea03 0a0a 	and.w	sl, r3, sl
 800bbda:	e7af      	b.n	800bb3c <_strtod_l+0x604>
 800bbdc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bbde:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bbe0:	2d00      	cmp	r5, #0
 800bbe2:	bfab      	itete	ge
 800bbe4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bbe6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bbe8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bbea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bbec:	bfac      	ite	ge
 800bbee:	18ef      	addge	r7, r5, r3
 800bbf0:	1b5e      	sublt	r6, r3, r5
 800bbf2:	9b08      	ldr	r3, [sp, #32]
 800bbf4:	1aed      	subs	r5, r5, r3
 800bbf6:	4415      	add	r5, r2
 800bbf8:	4b65      	ldr	r3, [pc, #404]	@ (800bd90 <_strtod_l+0x858>)
 800bbfa:	3d01      	subs	r5, #1
 800bbfc:	429d      	cmp	r5, r3
 800bbfe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bc02:	da50      	bge.n	800bca6 <_strtod_l+0x76e>
 800bc04:	1b5b      	subs	r3, r3, r5
 800bc06:	2b1f      	cmp	r3, #31
 800bc08:	eba2 0203 	sub.w	r2, r2, r3
 800bc0c:	f04f 0101 	mov.w	r1, #1
 800bc10:	dc3d      	bgt.n	800bc8e <_strtod_l+0x756>
 800bc12:	fa01 f303 	lsl.w	r3, r1, r3
 800bc16:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc18:	2300      	movs	r3, #0
 800bc1a:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc1c:	18bd      	adds	r5, r7, r2
 800bc1e:	9b08      	ldr	r3, [sp, #32]
 800bc20:	42af      	cmp	r7, r5
 800bc22:	4416      	add	r6, r2
 800bc24:	441e      	add	r6, r3
 800bc26:	463b      	mov	r3, r7
 800bc28:	bfa8      	it	ge
 800bc2a:	462b      	movge	r3, r5
 800bc2c:	42b3      	cmp	r3, r6
 800bc2e:	bfa8      	it	ge
 800bc30:	4633      	movge	r3, r6
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	bfc2      	ittt	gt
 800bc36:	1aed      	subgt	r5, r5, r3
 800bc38:	1af6      	subgt	r6, r6, r3
 800bc3a:	1aff      	subgt	r7, r7, r3
 800bc3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	dd16      	ble.n	800bc70 <_strtod_l+0x738>
 800bc42:	4641      	mov	r1, r8
 800bc44:	9805      	ldr	r0, [sp, #20]
 800bc46:	461a      	mov	r2, r3
 800bc48:	f003 f8a8 	bl	800ed9c <__pow5mult>
 800bc4c:	4680      	mov	r8, r0
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d0ba      	beq.n	800bbc8 <_strtod_l+0x690>
 800bc52:	4601      	mov	r1, r0
 800bc54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bc56:	9805      	ldr	r0, [sp, #20]
 800bc58:	f002 fffe 	bl	800ec58 <__multiply>
 800bc5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f43f ae8d 	beq.w	800b97e <_strtod_l+0x446>
 800bc64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc66:	9805      	ldr	r0, [sp, #20]
 800bc68:	f002 fee2 	bl	800ea30 <_Bfree>
 800bc6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc6e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc70:	2d00      	cmp	r5, #0
 800bc72:	dc1d      	bgt.n	800bcb0 <_strtod_l+0x778>
 800bc74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	dd23      	ble.n	800bcc2 <_strtod_l+0x78a>
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bc7e:	9805      	ldr	r0, [sp, #20]
 800bc80:	f003 f88c 	bl	800ed9c <__pow5mult>
 800bc84:	4681      	mov	r9, r0
 800bc86:	b9e0      	cbnz	r0, 800bcc2 <_strtod_l+0x78a>
 800bc88:	f04f 0900 	mov.w	r9, #0
 800bc8c:	e677      	b.n	800b97e <_strtod_l+0x446>
 800bc8e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bc92:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bc96:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bc9a:	35e2      	adds	r5, #226	@ 0xe2
 800bc9c:	fa01 f305 	lsl.w	r3, r1, r5
 800bca0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bca2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bca4:	e7ba      	b.n	800bc1c <_strtod_l+0x6e4>
 800bca6:	2300      	movs	r3, #0
 800bca8:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcaa:	2301      	movs	r3, #1
 800bcac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcae:	e7b5      	b.n	800bc1c <_strtod_l+0x6e4>
 800bcb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcb2:	9805      	ldr	r0, [sp, #20]
 800bcb4:	462a      	mov	r2, r5
 800bcb6:	f003 f8cb 	bl	800ee50 <__lshift>
 800bcba:	901a      	str	r0, [sp, #104]	@ 0x68
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d1d9      	bne.n	800bc74 <_strtod_l+0x73c>
 800bcc0:	e65d      	b.n	800b97e <_strtod_l+0x446>
 800bcc2:	2e00      	cmp	r6, #0
 800bcc4:	dd07      	ble.n	800bcd6 <_strtod_l+0x79e>
 800bcc6:	4649      	mov	r1, r9
 800bcc8:	9805      	ldr	r0, [sp, #20]
 800bcca:	4632      	mov	r2, r6
 800bccc:	f003 f8c0 	bl	800ee50 <__lshift>
 800bcd0:	4681      	mov	r9, r0
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d0d8      	beq.n	800bc88 <_strtod_l+0x750>
 800bcd6:	2f00      	cmp	r7, #0
 800bcd8:	dd08      	ble.n	800bcec <_strtod_l+0x7b4>
 800bcda:	4641      	mov	r1, r8
 800bcdc:	9805      	ldr	r0, [sp, #20]
 800bcde:	463a      	mov	r2, r7
 800bce0:	f003 f8b6 	bl	800ee50 <__lshift>
 800bce4:	4680      	mov	r8, r0
 800bce6:	2800      	cmp	r0, #0
 800bce8:	f43f ae49 	beq.w	800b97e <_strtod_l+0x446>
 800bcec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcee:	9805      	ldr	r0, [sp, #20]
 800bcf0:	464a      	mov	r2, r9
 800bcf2:	f003 f935 	bl	800ef60 <__mdiff>
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	f43f ae40 	beq.w	800b97e <_strtod_l+0x446>
 800bcfe:	68c3      	ldr	r3, [r0, #12]
 800bd00:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd02:	2300      	movs	r3, #0
 800bd04:	60c3      	str	r3, [r0, #12]
 800bd06:	4641      	mov	r1, r8
 800bd08:	f003 f90e 	bl	800ef28 <__mcmp>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	da45      	bge.n	800bd9c <_strtod_l+0x864>
 800bd10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd12:	ea53 030a 	orrs.w	r3, r3, sl
 800bd16:	d16b      	bne.n	800bdf0 <_strtod_l+0x8b8>
 800bd18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d167      	bne.n	800bdf0 <_strtod_l+0x8b8>
 800bd20:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd24:	0d1b      	lsrs	r3, r3, #20
 800bd26:	051b      	lsls	r3, r3, #20
 800bd28:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd2c:	d960      	bls.n	800bdf0 <_strtod_l+0x8b8>
 800bd2e:	6963      	ldr	r3, [r4, #20]
 800bd30:	b913      	cbnz	r3, 800bd38 <_strtod_l+0x800>
 800bd32:	6923      	ldr	r3, [r4, #16]
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	dd5b      	ble.n	800bdf0 <_strtod_l+0x8b8>
 800bd38:	4621      	mov	r1, r4
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	9805      	ldr	r0, [sp, #20]
 800bd3e:	f003 f887 	bl	800ee50 <__lshift>
 800bd42:	4641      	mov	r1, r8
 800bd44:	4604      	mov	r4, r0
 800bd46:	f003 f8ef 	bl	800ef28 <__mcmp>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	dd50      	ble.n	800bdf0 <_strtod_l+0x8b8>
 800bd4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd52:	9a08      	ldr	r2, [sp, #32]
 800bd54:	0d1b      	lsrs	r3, r3, #20
 800bd56:	051b      	lsls	r3, r3, #20
 800bd58:	2a00      	cmp	r2, #0
 800bd5a:	d06a      	beq.n	800be32 <_strtod_l+0x8fa>
 800bd5c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd60:	d867      	bhi.n	800be32 <_strtod_l+0x8fa>
 800bd62:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bd66:	f67f ae9d 	bls.w	800baa4 <_strtod_l+0x56c>
 800bd6a:	4b0a      	ldr	r3, [pc, #40]	@ (800bd94 <_strtod_l+0x85c>)
 800bd6c:	4650      	mov	r0, sl
 800bd6e:	4659      	mov	r1, fp
 800bd70:	2200      	movs	r2, #0
 800bd72:	f7f4 fc51 	bl	8000618 <__aeabi_dmul>
 800bd76:	4b08      	ldr	r3, [pc, #32]	@ (800bd98 <_strtod_l+0x860>)
 800bd78:	400b      	ands	r3, r1
 800bd7a:	4682      	mov	sl, r0
 800bd7c:	468b      	mov	fp, r1
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f47f ae08 	bne.w	800b994 <_strtod_l+0x45c>
 800bd84:	9a05      	ldr	r2, [sp, #20]
 800bd86:	2322      	movs	r3, #34	@ 0x22
 800bd88:	6013      	str	r3, [r2, #0]
 800bd8a:	e603      	b.n	800b994 <_strtod_l+0x45c>
 800bd8c:	08014ef0 	.word	0x08014ef0
 800bd90:	fffffc02 	.word	0xfffffc02
 800bd94:	39500000 	.word	0x39500000
 800bd98:	7ff00000 	.word	0x7ff00000
 800bd9c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bda0:	d165      	bne.n	800be6e <_strtod_l+0x936>
 800bda2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bda4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bda8:	b35a      	cbz	r2, 800be02 <_strtod_l+0x8ca>
 800bdaa:	4a9f      	ldr	r2, [pc, #636]	@ (800c028 <_strtod_l+0xaf0>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d12b      	bne.n	800be08 <_strtod_l+0x8d0>
 800bdb0:	9b08      	ldr	r3, [sp, #32]
 800bdb2:	4651      	mov	r1, sl
 800bdb4:	b303      	cbz	r3, 800bdf8 <_strtod_l+0x8c0>
 800bdb6:	4b9d      	ldr	r3, [pc, #628]	@ (800c02c <_strtod_l+0xaf4>)
 800bdb8:	465a      	mov	r2, fp
 800bdba:	4013      	ands	r3, r2
 800bdbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bdc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc4:	d81b      	bhi.n	800bdfe <_strtod_l+0x8c6>
 800bdc6:	0d1b      	lsrs	r3, r3, #20
 800bdc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bdcc:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd0:	4299      	cmp	r1, r3
 800bdd2:	d119      	bne.n	800be08 <_strtod_l+0x8d0>
 800bdd4:	4b96      	ldr	r3, [pc, #600]	@ (800c030 <_strtod_l+0xaf8>)
 800bdd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d102      	bne.n	800bde2 <_strtod_l+0x8aa>
 800bddc:	3101      	adds	r1, #1
 800bdde:	f43f adce 	beq.w	800b97e <_strtod_l+0x446>
 800bde2:	4b92      	ldr	r3, [pc, #584]	@ (800c02c <_strtod_l+0xaf4>)
 800bde4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bde6:	401a      	ands	r2, r3
 800bde8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bdec:	f04f 0a00 	mov.w	sl, #0
 800bdf0:	9b08      	ldr	r3, [sp, #32]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d1b9      	bne.n	800bd6a <_strtod_l+0x832>
 800bdf6:	e5cd      	b.n	800b994 <_strtod_l+0x45c>
 800bdf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdfc:	e7e8      	b.n	800bdd0 <_strtod_l+0x898>
 800bdfe:	4613      	mov	r3, r2
 800be00:	e7e6      	b.n	800bdd0 <_strtod_l+0x898>
 800be02:	ea53 030a 	orrs.w	r3, r3, sl
 800be06:	d0a2      	beq.n	800bd4e <_strtod_l+0x816>
 800be08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be0a:	b1db      	cbz	r3, 800be44 <_strtod_l+0x90c>
 800be0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be0e:	4213      	tst	r3, r2
 800be10:	d0ee      	beq.n	800bdf0 <_strtod_l+0x8b8>
 800be12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be14:	9a08      	ldr	r2, [sp, #32]
 800be16:	4650      	mov	r0, sl
 800be18:	4659      	mov	r1, fp
 800be1a:	b1bb      	cbz	r3, 800be4c <_strtod_l+0x914>
 800be1c:	f7ff fb6e 	bl	800b4fc <sulp>
 800be20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be24:	ec53 2b10 	vmov	r2, r3, d0
 800be28:	f7f4 fa40 	bl	80002ac <__adddf3>
 800be2c:	4682      	mov	sl, r0
 800be2e:	468b      	mov	fp, r1
 800be30:	e7de      	b.n	800bdf0 <_strtod_l+0x8b8>
 800be32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800be36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800be3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800be3e:	f04f 3aff 	mov.w	sl, #4294967295
 800be42:	e7d5      	b.n	800bdf0 <_strtod_l+0x8b8>
 800be44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be46:	ea13 0f0a 	tst.w	r3, sl
 800be4a:	e7e1      	b.n	800be10 <_strtod_l+0x8d8>
 800be4c:	f7ff fb56 	bl	800b4fc <sulp>
 800be50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be54:	ec53 2b10 	vmov	r2, r3, d0
 800be58:	f7f4 fa26 	bl	80002a8 <__aeabi_dsub>
 800be5c:	2200      	movs	r2, #0
 800be5e:	2300      	movs	r3, #0
 800be60:	4682      	mov	sl, r0
 800be62:	468b      	mov	fp, r1
 800be64:	f7f4 fe40 	bl	8000ae8 <__aeabi_dcmpeq>
 800be68:	2800      	cmp	r0, #0
 800be6a:	d0c1      	beq.n	800bdf0 <_strtod_l+0x8b8>
 800be6c:	e61a      	b.n	800baa4 <_strtod_l+0x56c>
 800be6e:	4641      	mov	r1, r8
 800be70:	4620      	mov	r0, r4
 800be72:	f003 f9d1 	bl	800f218 <__ratio>
 800be76:	ec57 6b10 	vmov	r6, r7, d0
 800be7a:	2200      	movs	r2, #0
 800be7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800be80:	4630      	mov	r0, r6
 800be82:	4639      	mov	r1, r7
 800be84:	f7f4 fe44 	bl	8000b10 <__aeabi_dcmple>
 800be88:	2800      	cmp	r0, #0
 800be8a:	d06f      	beq.n	800bf6c <_strtod_l+0xa34>
 800be8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d17a      	bne.n	800bf88 <_strtod_l+0xa50>
 800be92:	f1ba 0f00 	cmp.w	sl, #0
 800be96:	d158      	bne.n	800bf4a <_strtod_l+0xa12>
 800be98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d15a      	bne.n	800bf58 <_strtod_l+0xa20>
 800bea2:	4b64      	ldr	r3, [pc, #400]	@ (800c034 <_strtod_l+0xafc>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	4630      	mov	r0, r6
 800bea8:	4639      	mov	r1, r7
 800beaa:	f7f4 fe27 	bl	8000afc <__aeabi_dcmplt>
 800beae:	2800      	cmp	r0, #0
 800beb0:	d159      	bne.n	800bf66 <_strtod_l+0xa2e>
 800beb2:	4630      	mov	r0, r6
 800beb4:	4639      	mov	r1, r7
 800beb6:	4b60      	ldr	r3, [pc, #384]	@ (800c038 <_strtod_l+0xb00>)
 800beb8:	2200      	movs	r2, #0
 800beba:	f7f4 fbad 	bl	8000618 <__aeabi_dmul>
 800bebe:	4606      	mov	r6, r0
 800bec0:	460f      	mov	r7, r1
 800bec2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bec6:	9606      	str	r6, [sp, #24]
 800bec8:	9307      	str	r3, [sp, #28]
 800beca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bece:	4d57      	ldr	r5, [pc, #348]	@ (800c02c <_strtod_l+0xaf4>)
 800bed0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bed6:	401d      	ands	r5, r3
 800bed8:	4b58      	ldr	r3, [pc, #352]	@ (800c03c <_strtod_l+0xb04>)
 800beda:	429d      	cmp	r5, r3
 800bedc:	f040 80b2 	bne.w	800c044 <_strtod_l+0xb0c>
 800bee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bee2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bee6:	ec4b ab10 	vmov	d0, sl, fp
 800beea:	f003 f8cd 	bl	800f088 <__ulp>
 800beee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bef2:	ec51 0b10 	vmov	r0, r1, d0
 800bef6:	f7f4 fb8f 	bl	8000618 <__aeabi_dmul>
 800befa:	4652      	mov	r2, sl
 800befc:	465b      	mov	r3, fp
 800befe:	f7f4 f9d5 	bl	80002ac <__adddf3>
 800bf02:	460b      	mov	r3, r1
 800bf04:	4949      	ldr	r1, [pc, #292]	@ (800c02c <_strtod_l+0xaf4>)
 800bf06:	4a4e      	ldr	r2, [pc, #312]	@ (800c040 <_strtod_l+0xb08>)
 800bf08:	4019      	ands	r1, r3
 800bf0a:	4291      	cmp	r1, r2
 800bf0c:	4682      	mov	sl, r0
 800bf0e:	d942      	bls.n	800bf96 <_strtod_l+0xa5e>
 800bf10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf12:	4b47      	ldr	r3, [pc, #284]	@ (800c030 <_strtod_l+0xaf8>)
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d103      	bne.n	800bf20 <_strtod_l+0x9e8>
 800bf18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	f43f ad2f 	beq.w	800b97e <_strtod_l+0x446>
 800bf20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c030 <_strtod_l+0xaf8>
 800bf24:	f04f 3aff 	mov.w	sl, #4294967295
 800bf28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf2a:	9805      	ldr	r0, [sp, #20]
 800bf2c:	f002 fd80 	bl	800ea30 <_Bfree>
 800bf30:	9805      	ldr	r0, [sp, #20]
 800bf32:	4649      	mov	r1, r9
 800bf34:	f002 fd7c 	bl	800ea30 <_Bfree>
 800bf38:	9805      	ldr	r0, [sp, #20]
 800bf3a:	4641      	mov	r1, r8
 800bf3c:	f002 fd78 	bl	800ea30 <_Bfree>
 800bf40:	9805      	ldr	r0, [sp, #20]
 800bf42:	4621      	mov	r1, r4
 800bf44:	f002 fd74 	bl	800ea30 <_Bfree>
 800bf48:	e619      	b.n	800bb7e <_strtod_l+0x646>
 800bf4a:	f1ba 0f01 	cmp.w	sl, #1
 800bf4e:	d103      	bne.n	800bf58 <_strtod_l+0xa20>
 800bf50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f43f ada6 	beq.w	800baa4 <_strtod_l+0x56c>
 800bf58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c008 <_strtod_l+0xad0>
 800bf5c:	4f35      	ldr	r7, [pc, #212]	@ (800c034 <_strtod_l+0xafc>)
 800bf5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf62:	2600      	movs	r6, #0
 800bf64:	e7b1      	b.n	800beca <_strtod_l+0x992>
 800bf66:	4f34      	ldr	r7, [pc, #208]	@ (800c038 <_strtod_l+0xb00>)
 800bf68:	2600      	movs	r6, #0
 800bf6a:	e7aa      	b.n	800bec2 <_strtod_l+0x98a>
 800bf6c:	4b32      	ldr	r3, [pc, #200]	@ (800c038 <_strtod_l+0xb00>)
 800bf6e:	4630      	mov	r0, r6
 800bf70:	4639      	mov	r1, r7
 800bf72:	2200      	movs	r2, #0
 800bf74:	f7f4 fb50 	bl	8000618 <__aeabi_dmul>
 800bf78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	460f      	mov	r7, r1
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d09f      	beq.n	800bec2 <_strtod_l+0x98a>
 800bf82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bf86:	e7a0      	b.n	800beca <_strtod_l+0x992>
 800bf88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c010 <_strtod_l+0xad8>
 800bf8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf90:	ec57 6b17 	vmov	r6, r7, d7
 800bf94:	e799      	b.n	800beca <_strtod_l+0x992>
 800bf96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bf9a:	9b08      	ldr	r3, [sp, #32]
 800bf9c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1c1      	bne.n	800bf28 <_strtod_l+0x9f0>
 800bfa4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bfa8:	0d1b      	lsrs	r3, r3, #20
 800bfaa:	051b      	lsls	r3, r3, #20
 800bfac:	429d      	cmp	r5, r3
 800bfae:	d1bb      	bne.n	800bf28 <_strtod_l+0x9f0>
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	4639      	mov	r1, r7
 800bfb4:	f7f4 fe90 	bl	8000cd8 <__aeabi_d2lz>
 800bfb8:	f7f4 fb00 	bl	80005bc <__aeabi_l2d>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	4639      	mov	r1, r7
 800bfc4:	f7f4 f970 	bl	80002a8 <__aeabi_dsub>
 800bfc8:	460b      	mov	r3, r1
 800bfca:	4602      	mov	r2, r0
 800bfcc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bfd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bfd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfd6:	ea46 060a 	orr.w	r6, r6, sl
 800bfda:	431e      	orrs	r6, r3
 800bfdc:	d06f      	beq.n	800c0be <_strtod_l+0xb86>
 800bfde:	a30e      	add	r3, pc, #56	@ (adr r3, 800c018 <_strtod_l+0xae0>)
 800bfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe4:	f7f4 fd8a 	bl	8000afc <__aeabi_dcmplt>
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	f47f acd3 	bne.w	800b994 <_strtod_l+0x45c>
 800bfee:	a30c      	add	r3, pc, #48	@ (adr r3, 800c020 <_strtod_l+0xae8>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bff8:	f7f4 fd9e 	bl	8000b38 <__aeabi_dcmpgt>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d093      	beq.n	800bf28 <_strtod_l+0x9f0>
 800c000:	e4c8      	b.n	800b994 <_strtod_l+0x45c>
 800c002:	bf00      	nop
 800c004:	f3af 8000 	nop.w
 800c008:	00000000 	.word	0x00000000
 800c00c:	bff00000 	.word	0xbff00000
 800c010:	00000000 	.word	0x00000000
 800c014:	3ff00000 	.word	0x3ff00000
 800c018:	94a03595 	.word	0x94a03595
 800c01c:	3fdfffff 	.word	0x3fdfffff
 800c020:	35afe535 	.word	0x35afe535
 800c024:	3fe00000 	.word	0x3fe00000
 800c028:	000fffff 	.word	0x000fffff
 800c02c:	7ff00000 	.word	0x7ff00000
 800c030:	7fefffff 	.word	0x7fefffff
 800c034:	3ff00000 	.word	0x3ff00000
 800c038:	3fe00000 	.word	0x3fe00000
 800c03c:	7fe00000 	.word	0x7fe00000
 800c040:	7c9fffff 	.word	0x7c9fffff
 800c044:	9b08      	ldr	r3, [sp, #32]
 800c046:	b323      	cbz	r3, 800c092 <_strtod_l+0xb5a>
 800c048:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c04c:	d821      	bhi.n	800c092 <_strtod_l+0xb5a>
 800c04e:	a328      	add	r3, pc, #160	@ (adr r3, 800c0f0 <_strtod_l+0xbb8>)
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	4630      	mov	r0, r6
 800c056:	4639      	mov	r1, r7
 800c058:	f7f4 fd5a 	bl	8000b10 <__aeabi_dcmple>
 800c05c:	b1a0      	cbz	r0, 800c088 <_strtod_l+0xb50>
 800c05e:	4639      	mov	r1, r7
 800c060:	4630      	mov	r0, r6
 800c062:	f7f4 fdb1 	bl	8000bc8 <__aeabi_d2uiz>
 800c066:	2801      	cmp	r0, #1
 800c068:	bf38      	it	cc
 800c06a:	2001      	movcc	r0, #1
 800c06c:	f7f4 fa5a 	bl	8000524 <__aeabi_ui2d>
 800c070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c072:	4606      	mov	r6, r0
 800c074:	460f      	mov	r7, r1
 800c076:	b9fb      	cbnz	r3, 800c0b8 <_strtod_l+0xb80>
 800c078:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c07c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c07e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c080:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c084:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c088:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c08a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c08e:	1b5b      	subs	r3, r3, r5
 800c090:	9311      	str	r3, [sp, #68]	@ 0x44
 800c092:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c096:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c09a:	f002 fff5 	bl	800f088 <__ulp>
 800c09e:	4650      	mov	r0, sl
 800c0a0:	ec53 2b10 	vmov	r2, r3, d0
 800c0a4:	4659      	mov	r1, fp
 800c0a6:	f7f4 fab7 	bl	8000618 <__aeabi_dmul>
 800c0aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c0ae:	f7f4 f8fd 	bl	80002ac <__adddf3>
 800c0b2:	4682      	mov	sl, r0
 800c0b4:	468b      	mov	fp, r1
 800c0b6:	e770      	b.n	800bf9a <_strtod_l+0xa62>
 800c0b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c0bc:	e7e0      	b.n	800c080 <_strtod_l+0xb48>
 800c0be:	a30e      	add	r3, pc, #56	@ (adr r3, 800c0f8 <_strtod_l+0xbc0>)
 800c0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c4:	f7f4 fd1a 	bl	8000afc <__aeabi_dcmplt>
 800c0c8:	e798      	b.n	800bffc <_strtod_l+0xac4>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	930e      	str	r3, [sp, #56]	@ 0x38
 800c0ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c0d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0d2:	6013      	str	r3, [r2, #0]
 800c0d4:	f7ff ba6d 	b.w	800b5b2 <_strtod_l+0x7a>
 800c0d8:	2a65      	cmp	r2, #101	@ 0x65
 800c0da:	f43f ab68 	beq.w	800b7ae <_strtod_l+0x276>
 800c0de:	2a45      	cmp	r2, #69	@ 0x45
 800c0e0:	f43f ab65 	beq.w	800b7ae <_strtod_l+0x276>
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	f7ff bba0 	b.w	800b82a <_strtod_l+0x2f2>
 800c0ea:	bf00      	nop
 800c0ec:	f3af 8000 	nop.w
 800c0f0:	ffc00000 	.word	0xffc00000
 800c0f4:	41dfffff 	.word	0x41dfffff
 800c0f8:	94a03595 	.word	0x94a03595
 800c0fc:	3fcfffff 	.word	0x3fcfffff

0800c100 <_strtod_r>:
 800c100:	4b01      	ldr	r3, [pc, #4]	@ (800c108 <_strtod_r+0x8>)
 800c102:	f7ff ba19 	b.w	800b538 <_strtod_l>
 800c106:	bf00      	nop
 800c108:	2000010c 	.word	0x2000010c

0800c10c <strtod>:
 800c10c:	460a      	mov	r2, r1
 800c10e:	4601      	mov	r1, r0
 800c110:	4802      	ldr	r0, [pc, #8]	@ (800c11c <strtod+0x10>)
 800c112:	4b03      	ldr	r3, [pc, #12]	@ (800c120 <strtod+0x14>)
 800c114:	6800      	ldr	r0, [r0, #0]
 800c116:	f7ff ba0f 	b.w	800b538 <_strtod_l>
 800c11a:	bf00      	nop
 800c11c:	20000278 	.word	0x20000278
 800c120:	2000010c 	.word	0x2000010c

0800c124 <_strtol_l.isra.0>:
 800c124:	2b24      	cmp	r3, #36	@ 0x24
 800c126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c12a:	4686      	mov	lr, r0
 800c12c:	4690      	mov	r8, r2
 800c12e:	d801      	bhi.n	800c134 <_strtol_l.isra.0+0x10>
 800c130:	2b01      	cmp	r3, #1
 800c132:	d106      	bne.n	800c142 <_strtol_l.isra.0+0x1e>
 800c134:	f001 f930 	bl	800d398 <__errno>
 800c138:	2316      	movs	r3, #22
 800c13a:	6003      	str	r3, [r0, #0]
 800c13c:	2000      	movs	r0, #0
 800c13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c142:	4834      	ldr	r0, [pc, #208]	@ (800c214 <_strtol_l.isra.0+0xf0>)
 800c144:	460d      	mov	r5, r1
 800c146:	462a      	mov	r2, r5
 800c148:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c14c:	5d06      	ldrb	r6, [r0, r4]
 800c14e:	f016 0608 	ands.w	r6, r6, #8
 800c152:	d1f8      	bne.n	800c146 <_strtol_l.isra.0+0x22>
 800c154:	2c2d      	cmp	r4, #45	@ 0x2d
 800c156:	d110      	bne.n	800c17a <_strtol_l.isra.0+0x56>
 800c158:	782c      	ldrb	r4, [r5, #0]
 800c15a:	2601      	movs	r6, #1
 800c15c:	1c95      	adds	r5, r2, #2
 800c15e:	f033 0210 	bics.w	r2, r3, #16
 800c162:	d115      	bne.n	800c190 <_strtol_l.isra.0+0x6c>
 800c164:	2c30      	cmp	r4, #48	@ 0x30
 800c166:	d10d      	bne.n	800c184 <_strtol_l.isra.0+0x60>
 800c168:	782a      	ldrb	r2, [r5, #0]
 800c16a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c16e:	2a58      	cmp	r2, #88	@ 0x58
 800c170:	d108      	bne.n	800c184 <_strtol_l.isra.0+0x60>
 800c172:	786c      	ldrb	r4, [r5, #1]
 800c174:	3502      	adds	r5, #2
 800c176:	2310      	movs	r3, #16
 800c178:	e00a      	b.n	800c190 <_strtol_l.isra.0+0x6c>
 800c17a:	2c2b      	cmp	r4, #43	@ 0x2b
 800c17c:	bf04      	itt	eq
 800c17e:	782c      	ldrbeq	r4, [r5, #0]
 800c180:	1c95      	addeq	r5, r2, #2
 800c182:	e7ec      	b.n	800c15e <_strtol_l.isra.0+0x3a>
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1f6      	bne.n	800c176 <_strtol_l.isra.0+0x52>
 800c188:	2c30      	cmp	r4, #48	@ 0x30
 800c18a:	bf14      	ite	ne
 800c18c:	230a      	movne	r3, #10
 800c18e:	2308      	moveq	r3, #8
 800c190:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c194:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c198:	2200      	movs	r2, #0
 800c19a:	fbbc f9f3 	udiv	r9, ip, r3
 800c19e:	4610      	mov	r0, r2
 800c1a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800c1a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c1a8:	2f09      	cmp	r7, #9
 800c1aa:	d80f      	bhi.n	800c1cc <_strtol_l.isra.0+0xa8>
 800c1ac:	463c      	mov	r4, r7
 800c1ae:	42a3      	cmp	r3, r4
 800c1b0:	dd1b      	ble.n	800c1ea <_strtol_l.isra.0+0xc6>
 800c1b2:	1c57      	adds	r7, r2, #1
 800c1b4:	d007      	beq.n	800c1c6 <_strtol_l.isra.0+0xa2>
 800c1b6:	4581      	cmp	r9, r0
 800c1b8:	d314      	bcc.n	800c1e4 <_strtol_l.isra.0+0xc0>
 800c1ba:	d101      	bne.n	800c1c0 <_strtol_l.isra.0+0x9c>
 800c1bc:	45a2      	cmp	sl, r4
 800c1be:	db11      	blt.n	800c1e4 <_strtol_l.isra.0+0xc0>
 800c1c0:	fb00 4003 	mla	r0, r0, r3, r4
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1ca:	e7eb      	b.n	800c1a4 <_strtol_l.isra.0+0x80>
 800c1cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c1d0:	2f19      	cmp	r7, #25
 800c1d2:	d801      	bhi.n	800c1d8 <_strtol_l.isra.0+0xb4>
 800c1d4:	3c37      	subs	r4, #55	@ 0x37
 800c1d6:	e7ea      	b.n	800c1ae <_strtol_l.isra.0+0x8a>
 800c1d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c1dc:	2f19      	cmp	r7, #25
 800c1de:	d804      	bhi.n	800c1ea <_strtol_l.isra.0+0xc6>
 800c1e0:	3c57      	subs	r4, #87	@ 0x57
 800c1e2:	e7e4      	b.n	800c1ae <_strtol_l.isra.0+0x8a>
 800c1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e8:	e7ed      	b.n	800c1c6 <_strtol_l.isra.0+0xa2>
 800c1ea:	1c53      	adds	r3, r2, #1
 800c1ec:	d108      	bne.n	800c200 <_strtol_l.isra.0+0xdc>
 800c1ee:	2322      	movs	r3, #34	@ 0x22
 800c1f0:	f8ce 3000 	str.w	r3, [lr]
 800c1f4:	4660      	mov	r0, ip
 800c1f6:	f1b8 0f00 	cmp.w	r8, #0
 800c1fa:	d0a0      	beq.n	800c13e <_strtol_l.isra.0+0x1a>
 800c1fc:	1e69      	subs	r1, r5, #1
 800c1fe:	e006      	b.n	800c20e <_strtol_l.isra.0+0xea>
 800c200:	b106      	cbz	r6, 800c204 <_strtol_l.isra.0+0xe0>
 800c202:	4240      	negs	r0, r0
 800c204:	f1b8 0f00 	cmp.w	r8, #0
 800c208:	d099      	beq.n	800c13e <_strtol_l.isra.0+0x1a>
 800c20a:	2a00      	cmp	r2, #0
 800c20c:	d1f6      	bne.n	800c1fc <_strtol_l.isra.0+0xd8>
 800c20e:	f8c8 1000 	str.w	r1, [r8]
 800c212:	e794      	b.n	800c13e <_strtol_l.isra.0+0x1a>
 800c214:	08014f19 	.word	0x08014f19

0800c218 <_strtol_r>:
 800c218:	f7ff bf84 	b.w	800c124 <_strtol_l.isra.0>

0800c21c <strtol>:
 800c21c:	4613      	mov	r3, r2
 800c21e:	460a      	mov	r2, r1
 800c220:	4601      	mov	r1, r0
 800c222:	4802      	ldr	r0, [pc, #8]	@ (800c22c <strtol+0x10>)
 800c224:	6800      	ldr	r0, [r0, #0]
 800c226:	f7ff bf7d 	b.w	800c124 <_strtol_l.isra.0>
 800c22a:	bf00      	nop
 800c22c:	20000278 	.word	0x20000278

0800c230 <__cvt>:
 800c230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c234:	ec57 6b10 	vmov	r6, r7, d0
 800c238:	2f00      	cmp	r7, #0
 800c23a:	460c      	mov	r4, r1
 800c23c:	4619      	mov	r1, r3
 800c23e:	463b      	mov	r3, r7
 800c240:	bfbb      	ittet	lt
 800c242:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c246:	461f      	movlt	r7, r3
 800c248:	2300      	movge	r3, #0
 800c24a:	232d      	movlt	r3, #45	@ 0x2d
 800c24c:	700b      	strb	r3, [r1, #0]
 800c24e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c250:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c254:	4691      	mov	r9, r2
 800c256:	f023 0820 	bic.w	r8, r3, #32
 800c25a:	bfbc      	itt	lt
 800c25c:	4632      	movlt	r2, r6
 800c25e:	4616      	movlt	r6, r2
 800c260:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c264:	d005      	beq.n	800c272 <__cvt+0x42>
 800c266:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c26a:	d100      	bne.n	800c26e <__cvt+0x3e>
 800c26c:	3401      	adds	r4, #1
 800c26e:	2102      	movs	r1, #2
 800c270:	e000      	b.n	800c274 <__cvt+0x44>
 800c272:	2103      	movs	r1, #3
 800c274:	ab03      	add	r3, sp, #12
 800c276:	9301      	str	r3, [sp, #4]
 800c278:	ab02      	add	r3, sp, #8
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	ec47 6b10 	vmov	d0, r6, r7
 800c280:	4653      	mov	r3, sl
 800c282:	4622      	mov	r2, r4
 800c284:	f001 f978 	bl	800d578 <_dtoa_r>
 800c288:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c28c:	4605      	mov	r5, r0
 800c28e:	d119      	bne.n	800c2c4 <__cvt+0x94>
 800c290:	f019 0f01 	tst.w	r9, #1
 800c294:	d00e      	beq.n	800c2b4 <__cvt+0x84>
 800c296:	eb00 0904 	add.w	r9, r0, r4
 800c29a:	2200      	movs	r2, #0
 800c29c:	2300      	movs	r3, #0
 800c29e:	4630      	mov	r0, r6
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	f7f4 fc21 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2a6:	b108      	cbz	r0, 800c2ac <__cvt+0x7c>
 800c2a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c2ac:	2230      	movs	r2, #48	@ 0x30
 800c2ae:	9b03      	ldr	r3, [sp, #12]
 800c2b0:	454b      	cmp	r3, r9
 800c2b2:	d31e      	bcc.n	800c2f2 <__cvt+0xc2>
 800c2b4:	9b03      	ldr	r3, [sp, #12]
 800c2b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2b8:	1b5b      	subs	r3, r3, r5
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	6013      	str	r3, [r2, #0]
 800c2be:	b004      	add	sp, #16
 800c2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c2c8:	eb00 0904 	add.w	r9, r0, r4
 800c2cc:	d1e5      	bne.n	800c29a <__cvt+0x6a>
 800c2ce:	7803      	ldrb	r3, [r0, #0]
 800c2d0:	2b30      	cmp	r3, #48	@ 0x30
 800c2d2:	d10a      	bne.n	800c2ea <__cvt+0xba>
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	4630      	mov	r0, r6
 800c2da:	4639      	mov	r1, r7
 800c2dc:	f7f4 fc04 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2e0:	b918      	cbnz	r0, 800c2ea <__cvt+0xba>
 800c2e2:	f1c4 0401 	rsb	r4, r4, #1
 800c2e6:	f8ca 4000 	str.w	r4, [sl]
 800c2ea:	f8da 3000 	ldr.w	r3, [sl]
 800c2ee:	4499      	add	r9, r3
 800c2f0:	e7d3      	b.n	800c29a <__cvt+0x6a>
 800c2f2:	1c59      	adds	r1, r3, #1
 800c2f4:	9103      	str	r1, [sp, #12]
 800c2f6:	701a      	strb	r2, [r3, #0]
 800c2f8:	e7d9      	b.n	800c2ae <__cvt+0x7e>

0800c2fa <__exponent>:
 800c2fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2fc:	2900      	cmp	r1, #0
 800c2fe:	bfba      	itte	lt
 800c300:	4249      	neglt	r1, r1
 800c302:	232d      	movlt	r3, #45	@ 0x2d
 800c304:	232b      	movge	r3, #43	@ 0x2b
 800c306:	2909      	cmp	r1, #9
 800c308:	7002      	strb	r2, [r0, #0]
 800c30a:	7043      	strb	r3, [r0, #1]
 800c30c:	dd29      	ble.n	800c362 <__exponent+0x68>
 800c30e:	f10d 0307 	add.w	r3, sp, #7
 800c312:	461d      	mov	r5, r3
 800c314:	270a      	movs	r7, #10
 800c316:	461a      	mov	r2, r3
 800c318:	fbb1 f6f7 	udiv	r6, r1, r7
 800c31c:	fb07 1416 	mls	r4, r7, r6, r1
 800c320:	3430      	adds	r4, #48	@ 0x30
 800c322:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c326:	460c      	mov	r4, r1
 800c328:	2c63      	cmp	r4, #99	@ 0x63
 800c32a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c32e:	4631      	mov	r1, r6
 800c330:	dcf1      	bgt.n	800c316 <__exponent+0x1c>
 800c332:	3130      	adds	r1, #48	@ 0x30
 800c334:	1e94      	subs	r4, r2, #2
 800c336:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c33a:	1c41      	adds	r1, r0, #1
 800c33c:	4623      	mov	r3, r4
 800c33e:	42ab      	cmp	r3, r5
 800c340:	d30a      	bcc.n	800c358 <__exponent+0x5e>
 800c342:	f10d 0309 	add.w	r3, sp, #9
 800c346:	1a9b      	subs	r3, r3, r2
 800c348:	42ac      	cmp	r4, r5
 800c34a:	bf88      	it	hi
 800c34c:	2300      	movhi	r3, #0
 800c34e:	3302      	adds	r3, #2
 800c350:	4403      	add	r3, r0
 800c352:	1a18      	subs	r0, r3, r0
 800c354:	b003      	add	sp, #12
 800c356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c358:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c35c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c360:	e7ed      	b.n	800c33e <__exponent+0x44>
 800c362:	2330      	movs	r3, #48	@ 0x30
 800c364:	3130      	adds	r1, #48	@ 0x30
 800c366:	7083      	strb	r3, [r0, #2]
 800c368:	70c1      	strb	r1, [r0, #3]
 800c36a:	1d03      	adds	r3, r0, #4
 800c36c:	e7f1      	b.n	800c352 <__exponent+0x58>
	...

0800c370 <_printf_float>:
 800c370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c374:	b08d      	sub	sp, #52	@ 0x34
 800c376:	460c      	mov	r4, r1
 800c378:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c37c:	4616      	mov	r6, r2
 800c37e:	461f      	mov	r7, r3
 800c380:	4605      	mov	r5, r0
 800c382:	f000 ffbf 	bl	800d304 <_localeconv_r>
 800c386:	6803      	ldr	r3, [r0, #0]
 800c388:	9304      	str	r3, [sp, #16]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7f3 ff80 	bl	8000290 <strlen>
 800c390:	2300      	movs	r3, #0
 800c392:	930a      	str	r3, [sp, #40]	@ 0x28
 800c394:	f8d8 3000 	ldr.w	r3, [r8]
 800c398:	9005      	str	r0, [sp, #20]
 800c39a:	3307      	adds	r3, #7
 800c39c:	f023 0307 	bic.w	r3, r3, #7
 800c3a0:	f103 0208 	add.w	r2, r3, #8
 800c3a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c3a8:	f8d4 b000 	ldr.w	fp, [r4]
 800c3ac:	f8c8 2000 	str.w	r2, [r8]
 800c3b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c3b8:	9307      	str	r3, [sp, #28]
 800c3ba:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c3c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3c6:	4b9c      	ldr	r3, [pc, #624]	@ (800c638 <_printf_float+0x2c8>)
 800c3c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3cc:	f7f4 fbbe 	bl	8000b4c <__aeabi_dcmpun>
 800c3d0:	bb70      	cbnz	r0, 800c430 <_printf_float+0xc0>
 800c3d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3d6:	4b98      	ldr	r3, [pc, #608]	@ (800c638 <_printf_float+0x2c8>)
 800c3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3dc:	f7f4 fb98 	bl	8000b10 <__aeabi_dcmple>
 800c3e0:	bb30      	cbnz	r0, 800c430 <_printf_float+0xc0>
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4640      	mov	r0, r8
 800c3e8:	4649      	mov	r1, r9
 800c3ea:	f7f4 fb87 	bl	8000afc <__aeabi_dcmplt>
 800c3ee:	b110      	cbz	r0, 800c3f6 <_printf_float+0x86>
 800c3f0:	232d      	movs	r3, #45	@ 0x2d
 800c3f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3f6:	4a91      	ldr	r2, [pc, #580]	@ (800c63c <_printf_float+0x2cc>)
 800c3f8:	4b91      	ldr	r3, [pc, #580]	@ (800c640 <_printf_float+0x2d0>)
 800c3fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c3fe:	bf8c      	ite	hi
 800c400:	4690      	movhi	r8, r2
 800c402:	4698      	movls	r8, r3
 800c404:	2303      	movs	r3, #3
 800c406:	6123      	str	r3, [r4, #16]
 800c408:	f02b 0304 	bic.w	r3, fp, #4
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	f04f 0900 	mov.w	r9, #0
 800c412:	9700      	str	r7, [sp, #0]
 800c414:	4633      	mov	r3, r6
 800c416:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c418:	4621      	mov	r1, r4
 800c41a:	4628      	mov	r0, r5
 800c41c:	f000 f9d2 	bl	800c7c4 <_printf_common>
 800c420:	3001      	adds	r0, #1
 800c422:	f040 808d 	bne.w	800c540 <_printf_float+0x1d0>
 800c426:	f04f 30ff 	mov.w	r0, #4294967295
 800c42a:	b00d      	add	sp, #52	@ 0x34
 800c42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c430:	4642      	mov	r2, r8
 800c432:	464b      	mov	r3, r9
 800c434:	4640      	mov	r0, r8
 800c436:	4649      	mov	r1, r9
 800c438:	f7f4 fb88 	bl	8000b4c <__aeabi_dcmpun>
 800c43c:	b140      	cbz	r0, 800c450 <_printf_float+0xe0>
 800c43e:	464b      	mov	r3, r9
 800c440:	2b00      	cmp	r3, #0
 800c442:	bfbc      	itt	lt
 800c444:	232d      	movlt	r3, #45	@ 0x2d
 800c446:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c44a:	4a7e      	ldr	r2, [pc, #504]	@ (800c644 <_printf_float+0x2d4>)
 800c44c:	4b7e      	ldr	r3, [pc, #504]	@ (800c648 <_printf_float+0x2d8>)
 800c44e:	e7d4      	b.n	800c3fa <_printf_float+0x8a>
 800c450:	6863      	ldr	r3, [r4, #4]
 800c452:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c456:	9206      	str	r2, [sp, #24]
 800c458:	1c5a      	adds	r2, r3, #1
 800c45a:	d13b      	bne.n	800c4d4 <_printf_float+0x164>
 800c45c:	2306      	movs	r3, #6
 800c45e:	6063      	str	r3, [r4, #4]
 800c460:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c464:	2300      	movs	r3, #0
 800c466:	6022      	str	r2, [r4, #0]
 800c468:	9303      	str	r3, [sp, #12]
 800c46a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c46c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c470:	ab09      	add	r3, sp, #36	@ 0x24
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	6861      	ldr	r1, [r4, #4]
 800c476:	ec49 8b10 	vmov	d0, r8, r9
 800c47a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c47e:	4628      	mov	r0, r5
 800c480:	f7ff fed6 	bl	800c230 <__cvt>
 800c484:	9b06      	ldr	r3, [sp, #24]
 800c486:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c488:	2b47      	cmp	r3, #71	@ 0x47
 800c48a:	4680      	mov	r8, r0
 800c48c:	d129      	bne.n	800c4e2 <_printf_float+0x172>
 800c48e:	1cc8      	adds	r0, r1, #3
 800c490:	db02      	blt.n	800c498 <_printf_float+0x128>
 800c492:	6863      	ldr	r3, [r4, #4]
 800c494:	4299      	cmp	r1, r3
 800c496:	dd41      	ble.n	800c51c <_printf_float+0x1ac>
 800c498:	f1aa 0a02 	sub.w	sl, sl, #2
 800c49c:	fa5f fa8a 	uxtb.w	sl, sl
 800c4a0:	3901      	subs	r1, #1
 800c4a2:	4652      	mov	r2, sl
 800c4a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c4a8:	9109      	str	r1, [sp, #36]	@ 0x24
 800c4aa:	f7ff ff26 	bl	800c2fa <__exponent>
 800c4ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4b0:	1813      	adds	r3, r2, r0
 800c4b2:	2a01      	cmp	r2, #1
 800c4b4:	4681      	mov	r9, r0
 800c4b6:	6123      	str	r3, [r4, #16]
 800c4b8:	dc02      	bgt.n	800c4c0 <_printf_float+0x150>
 800c4ba:	6822      	ldr	r2, [r4, #0]
 800c4bc:	07d2      	lsls	r2, r2, #31
 800c4be:	d501      	bpl.n	800c4c4 <_printf_float+0x154>
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	6123      	str	r3, [r4, #16]
 800c4c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d0a2      	beq.n	800c412 <_printf_float+0xa2>
 800c4cc:	232d      	movs	r3, #45	@ 0x2d
 800c4ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4d2:	e79e      	b.n	800c412 <_printf_float+0xa2>
 800c4d4:	9a06      	ldr	r2, [sp, #24]
 800c4d6:	2a47      	cmp	r2, #71	@ 0x47
 800c4d8:	d1c2      	bne.n	800c460 <_printf_float+0xf0>
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1c0      	bne.n	800c460 <_printf_float+0xf0>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e7bd      	b.n	800c45e <_printf_float+0xee>
 800c4e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c4e6:	d9db      	bls.n	800c4a0 <_printf_float+0x130>
 800c4e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c4ec:	d118      	bne.n	800c520 <_printf_float+0x1b0>
 800c4ee:	2900      	cmp	r1, #0
 800c4f0:	6863      	ldr	r3, [r4, #4]
 800c4f2:	dd0b      	ble.n	800c50c <_printf_float+0x19c>
 800c4f4:	6121      	str	r1, [r4, #16]
 800c4f6:	b913      	cbnz	r3, 800c4fe <_printf_float+0x18e>
 800c4f8:	6822      	ldr	r2, [r4, #0]
 800c4fa:	07d0      	lsls	r0, r2, #31
 800c4fc:	d502      	bpl.n	800c504 <_printf_float+0x194>
 800c4fe:	3301      	adds	r3, #1
 800c500:	440b      	add	r3, r1
 800c502:	6123      	str	r3, [r4, #16]
 800c504:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c506:	f04f 0900 	mov.w	r9, #0
 800c50a:	e7db      	b.n	800c4c4 <_printf_float+0x154>
 800c50c:	b913      	cbnz	r3, 800c514 <_printf_float+0x1a4>
 800c50e:	6822      	ldr	r2, [r4, #0]
 800c510:	07d2      	lsls	r2, r2, #31
 800c512:	d501      	bpl.n	800c518 <_printf_float+0x1a8>
 800c514:	3302      	adds	r3, #2
 800c516:	e7f4      	b.n	800c502 <_printf_float+0x192>
 800c518:	2301      	movs	r3, #1
 800c51a:	e7f2      	b.n	800c502 <_printf_float+0x192>
 800c51c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c522:	4299      	cmp	r1, r3
 800c524:	db05      	blt.n	800c532 <_printf_float+0x1c2>
 800c526:	6823      	ldr	r3, [r4, #0]
 800c528:	6121      	str	r1, [r4, #16]
 800c52a:	07d8      	lsls	r0, r3, #31
 800c52c:	d5ea      	bpl.n	800c504 <_printf_float+0x194>
 800c52e:	1c4b      	adds	r3, r1, #1
 800c530:	e7e7      	b.n	800c502 <_printf_float+0x192>
 800c532:	2900      	cmp	r1, #0
 800c534:	bfd4      	ite	le
 800c536:	f1c1 0202 	rsble	r2, r1, #2
 800c53a:	2201      	movgt	r2, #1
 800c53c:	4413      	add	r3, r2
 800c53e:	e7e0      	b.n	800c502 <_printf_float+0x192>
 800c540:	6823      	ldr	r3, [r4, #0]
 800c542:	055a      	lsls	r2, r3, #21
 800c544:	d407      	bmi.n	800c556 <_printf_float+0x1e6>
 800c546:	6923      	ldr	r3, [r4, #16]
 800c548:	4642      	mov	r2, r8
 800c54a:	4631      	mov	r1, r6
 800c54c:	4628      	mov	r0, r5
 800c54e:	47b8      	blx	r7
 800c550:	3001      	adds	r0, #1
 800c552:	d12b      	bne.n	800c5ac <_printf_float+0x23c>
 800c554:	e767      	b.n	800c426 <_printf_float+0xb6>
 800c556:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c55a:	f240 80dd 	bls.w	800c718 <_printf_float+0x3a8>
 800c55e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c562:	2200      	movs	r2, #0
 800c564:	2300      	movs	r3, #0
 800c566:	f7f4 fabf 	bl	8000ae8 <__aeabi_dcmpeq>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d033      	beq.n	800c5d6 <_printf_float+0x266>
 800c56e:	4a37      	ldr	r2, [pc, #220]	@ (800c64c <_printf_float+0x2dc>)
 800c570:	2301      	movs	r3, #1
 800c572:	4631      	mov	r1, r6
 800c574:	4628      	mov	r0, r5
 800c576:	47b8      	blx	r7
 800c578:	3001      	adds	r0, #1
 800c57a:	f43f af54 	beq.w	800c426 <_printf_float+0xb6>
 800c57e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c582:	4543      	cmp	r3, r8
 800c584:	db02      	blt.n	800c58c <_printf_float+0x21c>
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	07d8      	lsls	r0, r3, #31
 800c58a:	d50f      	bpl.n	800c5ac <_printf_float+0x23c>
 800c58c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c590:	4631      	mov	r1, r6
 800c592:	4628      	mov	r0, r5
 800c594:	47b8      	blx	r7
 800c596:	3001      	adds	r0, #1
 800c598:	f43f af45 	beq.w	800c426 <_printf_float+0xb6>
 800c59c:	f04f 0900 	mov.w	r9, #0
 800c5a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c5a4:	f104 0a1a 	add.w	sl, r4, #26
 800c5a8:	45c8      	cmp	r8, r9
 800c5aa:	dc09      	bgt.n	800c5c0 <_printf_float+0x250>
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	079b      	lsls	r3, r3, #30
 800c5b0:	f100 8103 	bmi.w	800c7ba <_printf_float+0x44a>
 800c5b4:	68e0      	ldr	r0, [r4, #12]
 800c5b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5b8:	4298      	cmp	r0, r3
 800c5ba:	bfb8      	it	lt
 800c5bc:	4618      	movlt	r0, r3
 800c5be:	e734      	b.n	800c42a <_printf_float+0xba>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	4652      	mov	r2, sl
 800c5c4:	4631      	mov	r1, r6
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	47b8      	blx	r7
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	f43f af2b 	beq.w	800c426 <_printf_float+0xb6>
 800c5d0:	f109 0901 	add.w	r9, r9, #1
 800c5d4:	e7e8      	b.n	800c5a8 <_printf_float+0x238>
 800c5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	dc39      	bgt.n	800c650 <_printf_float+0x2e0>
 800c5dc:	4a1b      	ldr	r2, [pc, #108]	@ (800c64c <_printf_float+0x2dc>)
 800c5de:	2301      	movs	r3, #1
 800c5e0:	4631      	mov	r1, r6
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	47b8      	blx	r7
 800c5e6:	3001      	adds	r0, #1
 800c5e8:	f43f af1d 	beq.w	800c426 <_printf_float+0xb6>
 800c5ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c5f0:	ea59 0303 	orrs.w	r3, r9, r3
 800c5f4:	d102      	bne.n	800c5fc <_printf_float+0x28c>
 800c5f6:	6823      	ldr	r3, [r4, #0]
 800c5f8:	07d9      	lsls	r1, r3, #31
 800c5fa:	d5d7      	bpl.n	800c5ac <_printf_float+0x23c>
 800c5fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c600:	4631      	mov	r1, r6
 800c602:	4628      	mov	r0, r5
 800c604:	47b8      	blx	r7
 800c606:	3001      	adds	r0, #1
 800c608:	f43f af0d 	beq.w	800c426 <_printf_float+0xb6>
 800c60c:	f04f 0a00 	mov.w	sl, #0
 800c610:	f104 0b1a 	add.w	fp, r4, #26
 800c614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c616:	425b      	negs	r3, r3
 800c618:	4553      	cmp	r3, sl
 800c61a:	dc01      	bgt.n	800c620 <_printf_float+0x2b0>
 800c61c:	464b      	mov	r3, r9
 800c61e:	e793      	b.n	800c548 <_printf_float+0x1d8>
 800c620:	2301      	movs	r3, #1
 800c622:	465a      	mov	r2, fp
 800c624:	4631      	mov	r1, r6
 800c626:	4628      	mov	r0, r5
 800c628:	47b8      	blx	r7
 800c62a:	3001      	adds	r0, #1
 800c62c:	f43f aefb 	beq.w	800c426 <_printf_float+0xb6>
 800c630:	f10a 0a01 	add.w	sl, sl, #1
 800c634:	e7ee      	b.n	800c614 <_printf_float+0x2a4>
 800c636:	bf00      	nop
 800c638:	7fefffff 	.word	0x7fefffff
 800c63c:	08014cb1 	.word	0x08014cb1
 800c640:	08014cad 	.word	0x08014cad
 800c644:	08014cb9 	.word	0x08014cb9
 800c648:	08014cb5 	.word	0x08014cb5
 800c64c:	08014cbd 	.word	0x08014cbd
 800c650:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c652:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c656:	4553      	cmp	r3, sl
 800c658:	bfa8      	it	ge
 800c65a:	4653      	movge	r3, sl
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	4699      	mov	r9, r3
 800c660:	dc36      	bgt.n	800c6d0 <_printf_float+0x360>
 800c662:	f04f 0b00 	mov.w	fp, #0
 800c666:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c66a:	f104 021a 	add.w	r2, r4, #26
 800c66e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c670:	9306      	str	r3, [sp, #24]
 800c672:	eba3 0309 	sub.w	r3, r3, r9
 800c676:	455b      	cmp	r3, fp
 800c678:	dc31      	bgt.n	800c6de <_printf_float+0x36e>
 800c67a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c67c:	459a      	cmp	sl, r3
 800c67e:	dc3a      	bgt.n	800c6f6 <_printf_float+0x386>
 800c680:	6823      	ldr	r3, [r4, #0]
 800c682:	07da      	lsls	r2, r3, #31
 800c684:	d437      	bmi.n	800c6f6 <_printf_float+0x386>
 800c686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c688:	ebaa 0903 	sub.w	r9, sl, r3
 800c68c:	9b06      	ldr	r3, [sp, #24]
 800c68e:	ebaa 0303 	sub.w	r3, sl, r3
 800c692:	4599      	cmp	r9, r3
 800c694:	bfa8      	it	ge
 800c696:	4699      	movge	r9, r3
 800c698:	f1b9 0f00 	cmp.w	r9, #0
 800c69c:	dc33      	bgt.n	800c706 <_printf_float+0x396>
 800c69e:	f04f 0800 	mov.w	r8, #0
 800c6a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6a6:	f104 0b1a 	add.w	fp, r4, #26
 800c6aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6ac:	ebaa 0303 	sub.w	r3, sl, r3
 800c6b0:	eba3 0309 	sub.w	r3, r3, r9
 800c6b4:	4543      	cmp	r3, r8
 800c6b6:	f77f af79 	ble.w	800c5ac <_printf_float+0x23c>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	465a      	mov	r2, fp
 800c6be:	4631      	mov	r1, r6
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	47b8      	blx	r7
 800c6c4:	3001      	adds	r0, #1
 800c6c6:	f43f aeae 	beq.w	800c426 <_printf_float+0xb6>
 800c6ca:	f108 0801 	add.w	r8, r8, #1
 800c6ce:	e7ec      	b.n	800c6aa <_printf_float+0x33a>
 800c6d0:	4642      	mov	r2, r8
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	47b8      	blx	r7
 800c6d8:	3001      	adds	r0, #1
 800c6da:	d1c2      	bne.n	800c662 <_printf_float+0x2f2>
 800c6dc:	e6a3      	b.n	800c426 <_printf_float+0xb6>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	4631      	mov	r1, r6
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	9206      	str	r2, [sp, #24]
 800c6e6:	47b8      	blx	r7
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	f43f ae9c 	beq.w	800c426 <_printf_float+0xb6>
 800c6ee:	9a06      	ldr	r2, [sp, #24]
 800c6f0:	f10b 0b01 	add.w	fp, fp, #1
 800c6f4:	e7bb      	b.n	800c66e <_printf_float+0x2fe>
 800c6f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	47b8      	blx	r7
 800c700:	3001      	adds	r0, #1
 800c702:	d1c0      	bne.n	800c686 <_printf_float+0x316>
 800c704:	e68f      	b.n	800c426 <_printf_float+0xb6>
 800c706:	9a06      	ldr	r2, [sp, #24]
 800c708:	464b      	mov	r3, r9
 800c70a:	4442      	add	r2, r8
 800c70c:	4631      	mov	r1, r6
 800c70e:	4628      	mov	r0, r5
 800c710:	47b8      	blx	r7
 800c712:	3001      	adds	r0, #1
 800c714:	d1c3      	bne.n	800c69e <_printf_float+0x32e>
 800c716:	e686      	b.n	800c426 <_printf_float+0xb6>
 800c718:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c71c:	f1ba 0f01 	cmp.w	sl, #1
 800c720:	dc01      	bgt.n	800c726 <_printf_float+0x3b6>
 800c722:	07db      	lsls	r3, r3, #31
 800c724:	d536      	bpl.n	800c794 <_printf_float+0x424>
 800c726:	2301      	movs	r3, #1
 800c728:	4642      	mov	r2, r8
 800c72a:	4631      	mov	r1, r6
 800c72c:	4628      	mov	r0, r5
 800c72e:	47b8      	blx	r7
 800c730:	3001      	adds	r0, #1
 800c732:	f43f ae78 	beq.w	800c426 <_printf_float+0xb6>
 800c736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c73a:	4631      	mov	r1, r6
 800c73c:	4628      	mov	r0, r5
 800c73e:	47b8      	blx	r7
 800c740:	3001      	adds	r0, #1
 800c742:	f43f ae70 	beq.w	800c426 <_printf_float+0xb6>
 800c746:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c74a:	2200      	movs	r2, #0
 800c74c:	2300      	movs	r3, #0
 800c74e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c752:	f7f4 f9c9 	bl	8000ae8 <__aeabi_dcmpeq>
 800c756:	b9c0      	cbnz	r0, 800c78a <_printf_float+0x41a>
 800c758:	4653      	mov	r3, sl
 800c75a:	f108 0201 	add.w	r2, r8, #1
 800c75e:	4631      	mov	r1, r6
 800c760:	4628      	mov	r0, r5
 800c762:	47b8      	blx	r7
 800c764:	3001      	adds	r0, #1
 800c766:	d10c      	bne.n	800c782 <_printf_float+0x412>
 800c768:	e65d      	b.n	800c426 <_printf_float+0xb6>
 800c76a:	2301      	movs	r3, #1
 800c76c:	465a      	mov	r2, fp
 800c76e:	4631      	mov	r1, r6
 800c770:	4628      	mov	r0, r5
 800c772:	47b8      	blx	r7
 800c774:	3001      	adds	r0, #1
 800c776:	f43f ae56 	beq.w	800c426 <_printf_float+0xb6>
 800c77a:	f108 0801 	add.w	r8, r8, #1
 800c77e:	45d0      	cmp	r8, sl
 800c780:	dbf3      	blt.n	800c76a <_printf_float+0x3fa>
 800c782:	464b      	mov	r3, r9
 800c784:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c788:	e6df      	b.n	800c54a <_printf_float+0x1da>
 800c78a:	f04f 0800 	mov.w	r8, #0
 800c78e:	f104 0b1a 	add.w	fp, r4, #26
 800c792:	e7f4      	b.n	800c77e <_printf_float+0x40e>
 800c794:	2301      	movs	r3, #1
 800c796:	4642      	mov	r2, r8
 800c798:	e7e1      	b.n	800c75e <_printf_float+0x3ee>
 800c79a:	2301      	movs	r3, #1
 800c79c:	464a      	mov	r2, r9
 800c79e:	4631      	mov	r1, r6
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	47b8      	blx	r7
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	f43f ae3e 	beq.w	800c426 <_printf_float+0xb6>
 800c7aa:	f108 0801 	add.w	r8, r8, #1
 800c7ae:	68e3      	ldr	r3, [r4, #12]
 800c7b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7b2:	1a5b      	subs	r3, r3, r1
 800c7b4:	4543      	cmp	r3, r8
 800c7b6:	dcf0      	bgt.n	800c79a <_printf_float+0x42a>
 800c7b8:	e6fc      	b.n	800c5b4 <_printf_float+0x244>
 800c7ba:	f04f 0800 	mov.w	r8, #0
 800c7be:	f104 0919 	add.w	r9, r4, #25
 800c7c2:	e7f4      	b.n	800c7ae <_printf_float+0x43e>

0800c7c4 <_printf_common>:
 800c7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c8:	4616      	mov	r6, r2
 800c7ca:	4698      	mov	r8, r3
 800c7cc:	688a      	ldr	r2, [r1, #8]
 800c7ce:	690b      	ldr	r3, [r1, #16]
 800c7d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	bfb8      	it	lt
 800c7d8:	4613      	movlt	r3, r2
 800c7da:	6033      	str	r3, [r6, #0]
 800c7dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c7e0:	4607      	mov	r7, r0
 800c7e2:	460c      	mov	r4, r1
 800c7e4:	b10a      	cbz	r2, 800c7ea <_printf_common+0x26>
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	6033      	str	r3, [r6, #0]
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	0699      	lsls	r1, r3, #26
 800c7ee:	bf42      	ittt	mi
 800c7f0:	6833      	ldrmi	r3, [r6, #0]
 800c7f2:	3302      	addmi	r3, #2
 800c7f4:	6033      	strmi	r3, [r6, #0]
 800c7f6:	6825      	ldr	r5, [r4, #0]
 800c7f8:	f015 0506 	ands.w	r5, r5, #6
 800c7fc:	d106      	bne.n	800c80c <_printf_common+0x48>
 800c7fe:	f104 0a19 	add.w	sl, r4, #25
 800c802:	68e3      	ldr	r3, [r4, #12]
 800c804:	6832      	ldr	r2, [r6, #0]
 800c806:	1a9b      	subs	r3, r3, r2
 800c808:	42ab      	cmp	r3, r5
 800c80a:	dc26      	bgt.n	800c85a <_printf_common+0x96>
 800c80c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c810:	6822      	ldr	r2, [r4, #0]
 800c812:	3b00      	subs	r3, #0
 800c814:	bf18      	it	ne
 800c816:	2301      	movne	r3, #1
 800c818:	0692      	lsls	r2, r2, #26
 800c81a:	d42b      	bmi.n	800c874 <_printf_common+0xb0>
 800c81c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c820:	4641      	mov	r1, r8
 800c822:	4638      	mov	r0, r7
 800c824:	47c8      	blx	r9
 800c826:	3001      	adds	r0, #1
 800c828:	d01e      	beq.n	800c868 <_printf_common+0xa4>
 800c82a:	6823      	ldr	r3, [r4, #0]
 800c82c:	6922      	ldr	r2, [r4, #16]
 800c82e:	f003 0306 	and.w	r3, r3, #6
 800c832:	2b04      	cmp	r3, #4
 800c834:	bf02      	ittt	eq
 800c836:	68e5      	ldreq	r5, [r4, #12]
 800c838:	6833      	ldreq	r3, [r6, #0]
 800c83a:	1aed      	subeq	r5, r5, r3
 800c83c:	68a3      	ldr	r3, [r4, #8]
 800c83e:	bf0c      	ite	eq
 800c840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c844:	2500      	movne	r5, #0
 800c846:	4293      	cmp	r3, r2
 800c848:	bfc4      	itt	gt
 800c84a:	1a9b      	subgt	r3, r3, r2
 800c84c:	18ed      	addgt	r5, r5, r3
 800c84e:	2600      	movs	r6, #0
 800c850:	341a      	adds	r4, #26
 800c852:	42b5      	cmp	r5, r6
 800c854:	d11a      	bne.n	800c88c <_printf_common+0xc8>
 800c856:	2000      	movs	r0, #0
 800c858:	e008      	b.n	800c86c <_printf_common+0xa8>
 800c85a:	2301      	movs	r3, #1
 800c85c:	4652      	mov	r2, sl
 800c85e:	4641      	mov	r1, r8
 800c860:	4638      	mov	r0, r7
 800c862:	47c8      	blx	r9
 800c864:	3001      	adds	r0, #1
 800c866:	d103      	bne.n	800c870 <_printf_common+0xac>
 800c868:	f04f 30ff 	mov.w	r0, #4294967295
 800c86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c870:	3501      	adds	r5, #1
 800c872:	e7c6      	b.n	800c802 <_printf_common+0x3e>
 800c874:	18e1      	adds	r1, r4, r3
 800c876:	1c5a      	adds	r2, r3, #1
 800c878:	2030      	movs	r0, #48	@ 0x30
 800c87a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c87e:	4422      	add	r2, r4
 800c880:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c884:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c888:	3302      	adds	r3, #2
 800c88a:	e7c7      	b.n	800c81c <_printf_common+0x58>
 800c88c:	2301      	movs	r3, #1
 800c88e:	4622      	mov	r2, r4
 800c890:	4641      	mov	r1, r8
 800c892:	4638      	mov	r0, r7
 800c894:	47c8      	blx	r9
 800c896:	3001      	adds	r0, #1
 800c898:	d0e6      	beq.n	800c868 <_printf_common+0xa4>
 800c89a:	3601      	adds	r6, #1
 800c89c:	e7d9      	b.n	800c852 <_printf_common+0x8e>
	...

0800c8a0 <_printf_i>:
 800c8a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a4:	7e0f      	ldrb	r7, [r1, #24]
 800c8a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c8a8:	2f78      	cmp	r7, #120	@ 0x78
 800c8aa:	4691      	mov	r9, r2
 800c8ac:	4680      	mov	r8, r0
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	469a      	mov	sl, r3
 800c8b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c8b6:	d807      	bhi.n	800c8c8 <_printf_i+0x28>
 800c8b8:	2f62      	cmp	r7, #98	@ 0x62
 800c8ba:	d80a      	bhi.n	800c8d2 <_printf_i+0x32>
 800c8bc:	2f00      	cmp	r7, #0
 800c8be:	f000 80d1 	beq.w	800ca64 <_printf_i+0x1c4>
 800c8c2:	2f58      	cmp	r7, #88	@ 0x58
 800c8c4:	f000 80b8 	beq.w	800ca38 <_printf_i+0x198>
 800c8c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c8d0:	e03a      	b.n	800c948 <_printf_i+0xa8>
 800c8d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c8d6:	2b15      	cmp	r3, #21
 800c8d8:	d8f6      	bhi.n	800c8c8 <_printf_i+0x28>
 800c8da:	a101      	add	r1, pc, #4	@ (adr r1, 800c8e0 <_printf_i+0x40>)
 800c8dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8e0:	0800c939 	.word	0x0800c939
 800c8e4:	0800c94d 	.word	0x0800c94d
 800c8e8:	0800c8c9 	.word	0x0800c8c9
 800c8ec:	0800c8c9 	.word	0x0800c8c9
 800c8f0:	0800c8c9 	.word	0x0800c8c9
 800c8f4:	0800c8c9 	.word	0x0800c8c9
 800c8f8:	0800c94d 	.word	0x0800c94d
 800c8fc:	0800c8c9 	.word	0x0800c8c9
 800c900:	0800c8c9 	.word	0x0800c8c9
 800c904:	0800c8c9 	.word	0x0800c8c9
 800c908:	0800c8c9 	.word	0x0800c8c9
 800c90c:	0800ca4b 	.word	0x0800ca4b
 800c910:	0800c977 	.word	0x0800c977
 800c914:	0800ca05 	.word	0x0800ca05
 800c918:	0800c8c9 	.word	0x0800c8c9
 800c91c:	0800c8c9 	.word	0x0800c8c9
 800c920:	0800ca6d 	.word	0x0800ca6d
 800c924:	0800c8c9 	.word	0x0800c8c9
 800c928:	0800c977 	.word	0x0800c977
 800c92c:	0800c8c9 	.word	0x0800c8c9
 800c930:	0800c8c9 	.word	0x0800c8c9
 800c934:	0800ca0d 	.word	0x0800ca0d
 800c938:	6833      	ldr	r3, [r6, #0]
 800c93a:	1d1a      	adds	r2, r3, #4
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	6032      	str	r2, [r6, #0]
 800c940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c944:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c948:	2301      	movs	r3, #1
 800c94a:	e09c      	b.n	800ca86 <_printf_i+0x1e6>
 800c94c:	6833      	ldr	r3, [r6, #0]
 800c94e:	6820      	ldr	r0, [r4, #0]
 800c950:	1d19      	adds	r1, r3, #4
 800c952:	6031      	str	r1, [r6, #0]
 800c954:	0606      	lsls	r6, r0, #24
 800c956:	d501      	bpl.n	800c95c <_printf_i+0xbc>
 800c958:	681d      	ldr	r5, [r3, #0]
 800c95a:	e003      	b.n	800c964 <_printf_i+0xc4>
 800c95c:	0645      	lsls	r5, r0, #25
 800c95e:	d5fb      	bpl.n	800c958 <_printf_i+0xb8>
 800c960:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c964:	2d00      	cmp	r5, #0
 800c966:	da03      	bge.n	800c970 <_printf_i+0xd0>
 800c968:	232d      	movs	r3, #45	@ 0x2d
 800c96a:	426d      	negs	r5, r5
 800c96c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c970:	4858      	ldr	r0, [pc, #352]	@ (800cad4 <_printf_i+0x234>)
 800c972:	230a      	movs	r3, #10
 800c974:	e011      	b.n	800c99a <_printf_i+0xfa>
 800c976:	6821      	ldr	r1, [r4, #0]
 800c978:	6833      	ldr	r3, [r6, #0]
 800c97a:	0608      	lsls	r0, r1, #24
 800c97c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c980:	d402      	bmi.n	800c988 <_printf_i+0xe8>
 800c982:	0649      	lsls	r1, r1, #25
 800c984:	bf48      	it	mi
 800c986:	b2ad      	uxthmi	r5, r5
 800c988:	2f6f      	cmp	r7, #111	@ 0x6f
 800c98a:	4852      	ldr	r0, [pc, #328]	@ (800cad4 <_printf_i+0x234>)
 800c98c:	6033      	str	r3, [r6, #0]
 800c98e:	bf14      	ite	ne
 800c990:	230a      	movne	r3, #10
 800c992:	2308      	moveq	r3, #8
 800c994:	2100      	movs	r1, #0
 800c996:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c99a:	6866      	ldr	r6, [r4, #4]
 800c99c:	60a6      	str	r6, [r4, #8]
 800c99e:	2e00      	cmp	r6, #0
 800c9a0:	db05      	blt.n	800c9ae <_printf_i+0x10e>
 800c9a2:	6821      	ldr	r1, [r4, #0]
 800c9a4:	432e      	orrs	r6, r5
 800c9a6:	f021 0104 	bic.w	r1, r1, #4
 800c9aa:	6021      	str	r1, [r4, #0]
 800c9ac:	d04b      	beq.n	800ca46 <_printf_i+0x1a6>
 800c9ae:	4616      	mov	r6, r2
 800c9b0:	fbb5 f1f3 	udiv	r1, r5, r3
 800c9b4:	fb03 5711 	mls	r7, r3, r1, r5
 800c9b8:	5dc7      	ldrb	r7, [r0, r7]
 800c9ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c9be:	462f      	mov	r7, r5
 800c9c0:	42bb      	cmp	r3, r7
 800c9c2:	460d      	mov	r5, r1
 800c9c4:	d9f4      	bls.n	800c9b0 <_printf_i+0x110>
 800c9c6:	2b08      	cmp	r3, #8
 800c9c8:	d10b      	bne.n	800c9e2 <_printf_i+0x142>
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	07df      	lsls	r7, r3, #31
 800c9ce:	d508      	bpl.n	800c9e2 <_printf_i+0x142>
 800c9d0:	6923      	ldr	r3, [r4, #16]
 800c9d2:	6861      	ldr	r1, [r4, #4]
 800c9d4:	4299      	cmp	r1, r3
 800c9d6:	bfde      	ittt	le
 800c9d8:	2330      	movle	r3, #48	@ 0x30
 800c9da:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9de:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9e2:	1b92      	subs	r2, r2, r6
 800c9e4:	6122      	str	r2, [r4, #16]
 800c9e6:	f8cd a000 	str.w	sl, [sp]
 800c9ea:	464b      	mov	r3, r9
 800c9ec:	aa03      	add	r2, sp, #12
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	4640      	mov	r0, r8
 800c9f2:	f7ff fee7 	bl	800c7c4 <_printf_common>
 800c9f6:	3001      	adds	r0, #1
 800c9f8:	d14a      	bne.n	800ca90 <_printf_i+0x1f0>
 800c9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c9fe:	b004      	add	sp, #16
 800ca00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca04:	6823      	ldr	r3, [r4, #0]
 800ca06:	f043 0320 	orr.w	r3, r3, #32
 800ca0a:	6023      	str	r3, [r4, #0]
 800ca0c:	4832      	ldr	r0, [pc, #200]	@ (800cad8 <_printf_i+0x238>)
 800ca0e:	2778      	movs	r7, #120	@ 0x78
 800ca10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca14:	6823      	ldr	r3, [r4, #0]
 800ca16:	6831      	ldr	r1, [r6, #0]
 800ca18:	061f      	lsls	r7, r3, #24
 800ca1a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca1e:	d402      	bmi.n	800ca26 <_printf_i+0x186>
 800ca20:	065f      	lsls	r7, r3, #25
 800ca22:	bf48      	it	mi
 800ca24:	b2ad      	uxthmi	r5, r5
 800ca26:	6031      	str	r1, [r6, #0]
 800ca28:	07d9      	lsls	r1, r3, #31
 800ca2a:	bf44      	itt	mi
 800ca2c:	f043 0320 	orrmi.w	r3, r3, #32
 800ca30:	6023      	strmi	r3, [r4, #0]
 800ca32:	b11d      	cbz	r5, 800ca3c <_printf_i+0x19c>
 800ca34:	2310      	movs	r3, #16
 800ca36:	e7ad      	b.n	800c994 <_printf_i+0xf4>
 800ca38:	4826      	ldr	r0, [pc, #152]	@ (800cad4 <_printf_i+0x234>)
 800ca3a:	e7e9      	b.n	800ca10 <_printf_i+0x170>
 800ca3c:	6823      	ldr	r3, [r4, #0]
 800ca3e:	f023 0320 	bic.w	r3, r3, #32
 800ca42:	6023      	str	r3, [r4, #0]
 800ca44:	e7f6      	b.n	800ca34 <_printf_i+0x194>
 800ca46:	4616      	mov	r6, r2
 800ca48:	e7bd      	b.n	800c9c6 <_printf_i+0x126>
 800ca4a:	6833      	ldr	r3, [r6, #0]
 800ca4c:	6825      	ldr	r5, [r4, #0]
 800ca4e:	6961      	ldr	r1, [r4, #20]
 800ca50:	1d18      	adds	r0, r3, #4
 800ca52:	6030      	str	r0, [r6, #0]
 800ca54:	062e      	lsls	r6, r5, #24
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	d501      	bpl.n	800ca5e <_printf_i+0x1be>
 800ca5a:	6019      	str	r1, [r3, #0]
 800ca5c:	e002      	b.n	800ca64 <_printf_i+0x1c4>
 800ca5e:	0668      	lsls	r0, r5, #25
 800ca60:	d5fb      	bpl.n	800ca5a <_printf_i+0x1ba>
 800ca62:	8019      	strh	r1, [r3, #0]
 800ca64:	2300      	movs	r3, #0
 800ca66:	6123      	str	r3, [r4, #16]
 800ca68:	4616      	mov	r6, r2
 800ca6a:	e7bc      	b.n	800c9e6 <_printf_i+0x146>
 800ca6c:	6833      	ldr	r3, [r6, #0]
 800ca6e:	1d1a      	adds	r2, r3, #4
 800ca70:	6032      	str	r2, [r6, #0]
 800ca72:	681e      	ldr	r6, [r3, #0]
 800ca74:	6862      	ldr	r2, [r4, #4]
 800ca76:	2100      	movs	r1, #0
 800ca78:	4630      	mov	r0, r6
 800ca7a:	f7f3 fbb9 	bl	80001f0 <memchr>
 800ca7e:	b108      	cbz	r0, 800ca84 <_printf_i+0x1e4>
 800ca80:	1b80      	subs	r0, r0, r6
 800ca82:	6060      	str	r0, [r4, #4]
 800ca84:	6863      	ldr	r3, [r4, #4]
 800ca86:	6123      	str	r3, [r4, #16]
 800ca88:	2300      	movs	r3, #0
 800ca8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca8e:	e7aa      	b.n	800c9e6 <_printf_i+0x146>
 800ca90:	6923      	ldr	r3, [r4, #16]
 800ca92:	4632      	mov	r2, r6
 800ca94:	4649      	mov	r1, r9
 800ca96:	4640      	mov	r0, r8
 800ca98:	47d0      	blx	sl
 800ca9a:	3001      	adds	r0, #1
 800ca9c:	d0ad      	beq.n	800c9fa <_printf_i+0x15a>
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	079b      	lsls	r3, r3, #30
 800caa2:	d413      	bmi.n	800cacc <_printf_i+0x22c>
 800caa4:	68e0      	ldr	r0, [r4, #12]
 800caa6:	9b03      	ldr	r3, [sp, #12]
 800caa8:	4298      	cmp	r0, r3
 800caaa:	bfb8      	it	lt
 800caac:	4618      	movlt	r0, r3
 800caae:	e7a6      	b.n	800c9fe <_printf_i+0x15e>
 800cab0:	2301      	movs	r3, #1
 800cab2:	4632      	mov	r2, r6
 800cab4:	4649      	mov	r1, r9
 800cab6:	4640      	mov	r0, r8
 800cab8:	47d0      	blx	sl
 800caba:	3001      	adds	r0, #1
 800cabc:	d09d      	beq.n	800c9fa <_printf_i+0x15a>
 800cabe:	3501      	adds	r5, #1
 800cac0:	68e3      	ldr	r3, [r4, #12]
 800cac2:	9903      	ldr	r1, [sp, #12]
 800cac4:	1a5b      	subs	r3, r3, r1
 800cac6:	42ab      	cmp	r3, r5
 800cac8:	dcf2      	bgt.n	800cab0 <_printf_i+0x210>
 800caca:	e7eb      	b.n	800caa4 <_printf_i+0x204>
 800cacc:	2500      	movs	r5, #0
 800cace:	f104 0619 	add.w	r6, r4, #25
 800cad2:	e7f5      	b.n	800cac0 <_printf_i+0x220>
 800cad4:	08014cbf 	.word	0x08014cbf
 800cad8:	08014cd0 	.word	0x08014cd0

0800cadc <_scanf_float>:
 800cadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae0:	b087      	sub	sp, #28
 800cae2:	4691      	mov	r9, r2
 800cae4:	9303      	str	r3, [sp, #12]
 800cae6:	688b      	ldr	r3, [r1, #8]
 800cae8:	1e5a      	subs	r2, r3, #1
 800caea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800caee:	bf81      	itttt	hi
 800caf0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800caf4:	eb03 0b05 	addhi.w	fp, r3, r5
 800caf8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cafc:	608b      	strhi	r3, [r1, #8]
 800cafe:	680b      	ldr	r3, [r1, #0]
 800cb00:	460a      	mov	r2, r1
 800cb02:	f04f 0500 	mov.w	r5, #0
 800cb06:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cb0a:	f842 3b1c 	str.w	r3, [r2], #28
 800cb0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cb12:	4680      	mov	r8, r0
 800cb14:	460c      	mov	r4, r1
 800cb16:	bf98      	it	ls
 800cb18:	f04f 0b00 	movls.w	fp, #0
 800cb1c:	9201      	str	r2, [sp, #4]
 800cb1e:	4616      	mov	r6, r2
 800cb20:	46aa      	mov	sl, r5
 800cb22:	462f      	mov	r7, r5
 800cb24:	9502      	str	r5, [sp, #8]
 800cb26:	68a2      	ldr	r2, [r4, #8]
 800cb28:	b15a      	cbz	r2, 800cb42 <_scanf_float+0x66>
 800cb2a:	f8d9 3000 	ldr.w	r3, [r9]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	2b4e      	cmp	r3, #78	@ 0x4e
 800cb32:	d863      	bhi.n	800cbfc <_scanf_float+0x120>
 800cb34:	2b40      	cmp	r3, #64	@ 0x40
 800cb36:	d83b      	bhi.n	800cbb0 <_scanf_float+0xd4>
 800cb38:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cb3c:	b2c8      	uxtb	r0, r1
 800cb3e:	280e      	cmp	r0, #14
 800cb40:	d939      	bls.n	800cbb6 <_scanf_float+0xda>
 800cb42:	b11f      	cbz	r7, 800cb4c <_scanf_float+0x70>
 800cb44:	6823      	ldr	r3, [r4, #0]
 800cb46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb4a:	6023      	str	r3, [r4, #0]
 800cb4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb50:	f1ba 0f01 	cmp.w	sl, #1
 800cb54:	f200 8114 	bhi.w	800cd80 <_scanf_float+0x2a4>
 800cb58:	9b01      	ldr	r3, [sp, #4]
 800cb5a:	429e      	cmp	r6, r3
 800cb5c:	f200 8105 	bhi.w	800cd6a <_scanf_float+0x28e>
 800cb60:	2001      	movs	r0, #1
 800cb62:	b007      	add	sp, #28
 800cb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb68:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cb6c:	2a0d      	cmp	r2, #13
 800cb6e:	d8e8      	bhi.n	800cb42 <_scanf_float+0x66>
 800cb70:	a101      	add	r1, pc, #4	@ (adr r1, 800cb78 <_scanf_float+0x9c>)
 800cb72:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb76:	bf00      	nop
 800cb78:	0800ccc1 	.word	0x0800ccc1
 800cb7c:	0800cb43 	.word	0x0800cb43
 800cb80:	0800cb43 	.word	0x0800cb43
 800cb84:	0800cb43 	.word	0x0800cb43
 800cb88:	0800cd1d 	.word	0x0800cd1d
 800cb8c:	0800ccf7 	.word	0x0800ccf7
 800cb90:	0800cb43 	.word	0x0800cb43
 800cb94:	0800cb43 	.word	0x0800cb43
 800cb98:	0800cccf 	.word	0x0800cccf
 800cb9c:	0800cb43 	.word	0x0800cb43
 800cba0:	0800cb43 	.word	0x0800cb43
 800cba4:	0800cb43 	.word	0x0800cb43
 800cba8:	0800cb43 	.word	0x0800cb43
 800cbac:	0800cc8b 	.word	0x0800cc8b
 800cbb0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cbb4:	e7da      	b.n	800cb6c <_scanf_float+0x90>
 800cbb6:	290e      	cmp	r1, #14
 800cbb8:	d8c3      	bhi.n	800cb42 <_scanf_float+0x66>
 800cbba:	a001      	add	r0, pc, #4	@ (adr r0, 800cbc0 <_scanf_float+0xe4>)
 800cbbc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cbc0:	0800cc7b 	.word	0x0800cc7b
 800cbc4:	0800cb43 	.word	0x0800cb43
 800cbc8:	0800cc7b 	.word	0x0800cc7b
 800cbcc:	0800cd0b 	.word	0x0800cd0b
 800cbd0:	0800cb43 	.word	0x0800cb43
 800cbd4:	0800cc1d 	.word	0x0800cc1d
 800cbd8:	0800cc61 	.word	0x0800cc61
 800cbdc:	0800cc61 	.word	0x0800cc61
 800cbe0:	0800cc61 	.word	0x0800cc61
 800cbe4:	0800cc61 	.word	0x0800cc61
 800cbe8:	0800cc61 	.word	0x0800cc61
 800cbec:	0800cc61 	.word	0x0800cc61
 800cbf0:	0800cc61 	.word	0x0800cc61
 800cbf4:	0800cc61 	.word	0x0800cc61
 800cbf8:	0800cc61 	.word	0x0800cc61
 800cbfc:	2b6e      	cmp	r3, #110	@ 0x6e
 800cbfe:	d809      	bhi.n	800cc14 <_scanf_float+0x138>
 800cc00:	2b60      	cmp	r3, #96	@ 0x60
 800cc02:	d8b1      	bhi.n	800cb68 <_scanf_float+0x8c>
 800cc04:	2b54      	cmp	r3, #84	@ 0x54
 800cc06:	d07b      	beq.n	800cd00 <_scanf_float+0x224>
 800cc08:	2b59      	cmp	r3, #89	@ 0x59
 800cc0a:	d19a      	bne.n	800cb42 <_scanf_float+0x66>
 800cc0c:	2d07      	cmp	r5, #7
 800cc0e:	d198      	bne.n	800cb42 <_scanf_float+0x66>
 800cc10:	2508      	movs	r5, #8
 800cc12:	e02f      	b.n	800cc74 <_scanf_float+0x198>
 800cc14:	2b74      	cmp	r3, #116	@ 0x74
 800cc16:	d073      	beq.n	800cd00 <_scanf_float+0x224>
 800cc18:	2b79      	cmp	r3, #121	@ 0x79
 800cc1a:	e7f6      	b.n	800cc0a <_scanf_float+0x12e>
 800cc1c:	6821      	ldr	r1, [r4, #0]
 800cc1e:	05c8      	lsls	r0, r1, #23
 800cc20:	d51e      	bpl.n	800cc60 <_scanf_float+0x184>
 800cc22:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cc26:	6021      	str	r1, [r4, #0]
 800cc28:	3701      	adds	r7, #1
 800cc2a:	f1bb 0f00 	cmp.w	fp, #0
 800cc2e:	d003      	beq.n	800cc38 <_scanf_float+0x15c>
 800cc30:	3201      	adds	r2, #1
 800cc32:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc36:	60a2      	str	r2, [r4, #8]
 800cc38:	68a3      	ldr	r3, [r4, #8]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	60a3      	str	r3, [r4, #8]
 800cc3e:	6923      	ldr	r3, [r4, #16]
 800cc40:	3301      	adds	r3, #1
 800cc42:	6123      	str	r3, [r4, #16]
 800cc44:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	f8c9 3004 	str.w	r3, [r9, #4]
 800cc50:	f340 8082 	ble.w	800cd58 <_scanf_float+0x27c>
 800cc54:	f8d9 3000 	ldr.w	r3, [r9]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	f8c9 3000 	str.w	r3, [r9]
 800cc5e:	e762      	b.n	800cb26 <_scanf_float+0x4a>
 800cc60:	eb1a 0105 	adds.w	r1, sl, r5
 800cc64:	f47f af6d 	bne.w	800cb42 <_scanf_float+0x66>
 800cc68:	6822      	ldr	r2, [r4, #0]
 800cc6a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cc6e:	6022      	str	r2, [r4, #0]
 800cc70:	460d      	mov	r5, r1
 800cc72:	468a      	mov	sl, r1
 800cc74:	f806 3b01 	strb.w	r3, [r6], #1
 800cc78:	e7de      	b.n	800cc38 <_scanf_float+0x15c>
 800cc7a:	6822      	ldr	r2, [r4, #0]
 800cc7c:	0610      	lsls	r0, r2, #24
 800cc7e:	f57f af60 	bpl.w	800cb42 <_scanf_float+0x66>
 800cc82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc86:	6022      	str	r2, [r4, #0]
 800cc88:	e7f4      	b.n	800cc74 <_scanf_float+0x198>
 800cc8a:	f1ba 0f00 	cmp.w	sl, #0
 800cc8e:	d10c      	bne.n	800ccaa <_scanf_float+0x1ce>
 800cc90:	b977      	cbnz	r7, 800ccb0 <_scanf_float+0x1d4>
 800cc92:	6822      	ldr	r2, [r4, #0]
 800cc94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cc98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cc9c:	d108      	bne.n	800ccb0 <_scanf_float+0x1d4>
 800cc9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cca2:	6022      	str	r2, [r4, #0]
 800cca4:	f04f 0a01 	mov.w	sl, #1
 800cca8:	e7e4      	b.n	800cc74 <_scanf_float+0x198>
 800ccaa:	f1ba 0f02 	cmp.w	sl, #2
 800ccae:	d050      	beq.n	800cd52 <_scanf_float+0x276>
 800ccb0:	2d01      	cmp	r5, #1
 800ccb2:	d002      	beq.n	800ccba <_scanf_float+0x1de>
 800ccb4:	2d04      	cmp	r5, #4
 800ccb6:	f47f af44 	bne.w	800cb42 <_scanf_float+0x66>
 800ccba:	3501      	adds	r5, #1
 800ccbc:	b2ed      	uxtb	r5, r5
 800ccbe:	e7d9      	b.n	800cc74 <_scanf_float+0x198>
 800ccc0:	f1ba 0f01 	cmp.w	sl, #1
 800ccc4:	f47f af3d 	bne.w	800cb42 <_scanf_float+0x66>
 800ccc8:	f04f 0a02 	mov.w	sl, #2
 800cccc:	e7d2      	b.n	800cc74 <_scanf_float+0x198>
 800ccce:	b975      	cbnz	r5, 800ccee <_scanf_float+0x212>
 800ccd0:	2f00      	cmp	r7, #0
 800ccd2:	f47f af37 	bne.w	800cb44 <_scanf_float+0x68>
 800ccd6:	6822      	ldr	r2, [r4, #0]
 800ccd8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ccdc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cce0:	f040 8103 	bne.w	800ceea <_scanf_float+0x40e>
 800cce4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cce8:	6022      	str	r2, [r4, #0]
 800ccea:	2501      	movs	r5, #1
 800ccec:	e7c2      	b.n	800cc74 <_scanf_float+0x198>
 800ccee:	2d03      	cmp	r5, #3
 800ccf0:	d0e3      	beq.n	800ccba <_scanf_float+0x1de>
 800ccf2:	2d05      	cmp	r5, #5
 800ccf4:	e7df      	b.n	800ccb6 <_scanf_float+0x1da>
 800ccf6:	2d02      	cmp	r5, #2
 800ccf8:	f47f af23 	bne.w	800cb42 <_scanf_float+0x66>
 800ccfc:	2503      	movs	r5, #3
 800ccfe:	e7b9      	b.n	800cc74 <_scanf_float+0x198>
 800cd00:	2d06      	cmp	r5, #6
 800cd02:	f47f af1e 	bne.w	800cb42 <_scanf_float+0x66>
 800cd06:	2507      	movs	r5, #7
 800cd08:	e7b4      	b.n	800cc74 <_scanf_float+0x198>
 800cd0a:	6822      	ldr	r2, [r4, #0]
 800cd0c:	0591      	lsls	r1, r2, #22
 800cd0e:	f57f af18 	bpl.w	800cb42 <_scanf_float+0x66>
 800cd12:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cd16:	6022      	str	r2, [r4, #0]
 800cd18:	9702      	str	r7, [sp, #8]
 800cd1a:	e7ab      	b.n	800cc74 <_scanf_float+0x198>
 800cd1c:	6822      	ldr	r2, [r4, #0]
 800cd1e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cd22:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cd26:	d005      	beq.n	800cd34 <_scanf_float+0x258>
 800cd28:	0550      	lsls	r0, r2, #21
 800cd2a:	f57f af0a 	bpl.w	800cb42 <_scanf_float+0x66>
 800cd2e:	2f00      	cmp	r7, #0
 800cd30:	f000 80db 	beq.w	800ceea <_scanf_float+0x40e>
 800cd34:	0591      	lsls	r1, r2, #22
 800cd36:	bf58      	it	pl
 800cd38:	9902      	ldrpl	r1, [sp, #8]
 800cd3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd3e:	bf58      	it	pl
 800cd40:	1a79      	subpl	r1, r7, r1
 800cd42:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cd46:	bf58      	it	pl
 800cd48:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cd4c:	6022      	str	r2, [r4, #0]
 800cd4e:	2700      	movs	r7, #0
 800cd50:	e790      	b.n	800cc74 <_scanf_float+0x198>
 800cd52:	f04f 0a03 	mov.w	sl, #3
 800cd56:	e78d      	b.n	800cc74 <_scanf_float+0x198>
 800cd58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cd5c:	4649      	mov	r1, r9
 800cd5e:	4640      	mov	r0, r8
 800cd60:	4798      	blx	r3
 800cd62:	2800      	cmp	r0, #0
 800cd64:	f43f aedf 	beq.w	800cb26 <_scanf_float+0x4a>
 800cd68:	e6eb      	b.n	800cb42 <_scanf_float+0x66>
 800cd6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd72:	464a      	mov	r2, r9
 800cd74:	4640      	mov	r0, r8
 800cd76:	4798      	blx	r3
 800cd78:	6923      	ldr	r3, [r4, #16]
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	6123      	str	r3, [r4, #16]
 800cd7e:	e6eb      	b.n	800cb58 <_scanf_float+0x7c>
 800cd80:	1e6b      	subs	r3, r5, #1
 800cd82:	2b06      	cmp	r3, #6
 800cd84:	d824      	bhi.n	800cdd0 <_scanf_float+0x2f4>
 800cd86:	2d02      	cmp	r5, #2
 800cd88:	d836      	bhi.n	800cdf8 <_scanf_float+0x31c>
 800cd8a:	9b01      	ldr	r3, [sp, #4]
 800cd8c:	429e      	cmp	r6, r3
 800cd8e:	f67f aee7 	bls.w	800cb60 <_scanf_float+0x84>
 800cd92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd9a:	464a      	mov	r2, r9
 800cd9c:	4640      	mov	r0, r8
 800cd9e:	4798      	blx	r3
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	3b01      	subs	r3, #1
 800cda4:	6123      	str	r3, [r4, #16]
 800cda6:	e7f0      	b.n	800cd8a <_scanf_float+0x2ae>
 800cda8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cdb0:	464a      	mov	r2, r9
 800cdb2:	4640      	mov	r0, r8
 800cdb4:	4798      	blx	r3
 800cdb6:	6923      	ldr	r3, [r4, #16]
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	6123      	str	r3, [r4, #16]
 800cdbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdc0:	fa5f fa8a 	uxtb.w	sl, sl
 800cdc4:	f1ba 0f02 	cmp.w	sl, #2
 800cdc8:	d1ee      	bne.n	800cda8 <_scanf_float+0x2cc>
 800cdca:	3d03      	subs	r5, #3
 800cdcc:	b2ed      	uxtb	r5, r5
 800cdce:	1b76      	subs	r6, r6, r5
 800cdd0:	6823      	ldr	r3, [r4, #0]
 800cdd2:	05da      	lsls	r2, r3, #23
 800cdd4:	d530      	bpl.n	800ce38 <_scanf_float+0x35c>
 800cdd6:	055b      	lsls	r3, r3, #21
 800cdd8:	d511      	bpl.n	800cdfe <_scanf_float+0x322>
 800cdda:	9b01      	ldr	r3, [sp, #4]
 800cddc:	429e      	cmp	r6, r3
 800cdde:	f67f aebf 	bls.w	800cb60 <_scanf_float+0x84>
 800cde2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cde6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdea:	464a      	mov	r2, r9
 800cdec:	4640      	mov	r0, r8
 800cdee:	4798      	blx	r3
 800cdf0:	6923      	ldr	r3, [r4, #16]
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	6123      	str	r3, [r4, #16]
 800cdf6:	e7f0      	b.n	800cdda <_scanf_float+0x2fe>
 800cdf8:	46aa      	mov	sl, r5
 800cdfa:	46b3      	mov	fp, r6
 800cdfc:	e7de      	b.n	800cdbc <_scanf_float+0x2e0>
 800cdfe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ce02:	6923      	ldr	r3, [r4, #16]
 800ce04:	2965      	cmp	r1, #101	@ 0x65
 800ce06:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce0a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ce0e:	6123      	str	r3, [r4, #16]
 800ce10:	d00c      	beq.n	800ce2c <_scanf_float+0x350>
 800ce12:	2945      	cmp	r1, #69	@ 0x45
 800ce14:	d00a      	beq.n	800ce2c <_scanf_float+0x350>
 800ce16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce1a:	464a      	mov	r2, r9
 800ce1c:	4640      	mov	r0, r8
 800ce1e:	4798      	blx	r3
 800ce20:	6923      	ldr	r3, [r4, #16]
 800ce22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ce26:	3b01      	subs	r3, #1
 800ce28:	1eb5      	subs	r5, r6, #2
 800ce2a:	6123      	str	r3, [r4, #16]
 800ce2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce30:	464a      	mov	r2, r9
 800ce32:	4640      	mov	r0, r8
 800ce34:	4798      	blx	r3
 800ce36:	462e      	mov	r6, r5
 800ce38:	6822      	ldr	r2, [r4, #0]
 800ce3a:	f012 0210 	ands.w	r2, r2, #16
 800ce3e:	d001      	beq.n	800ce44 <_scanf_float+0x368>
 800ce40:	2000      	movs	r0, #0
 800ce42:	e68e      	b.n	800cb62 <_scanf_float+0x86>
 800ce44:	7032      	strb	r2, [r6, #0]
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ce4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce50:	d125      	bne.n	800ce9e <_scanf_float+0x3c2>
 800ce52:	9b02      	ldr	r3, [sp, #8]
 800ce54:	429f      	cmp	r7, r3
 800ce56:	d00a      	beq.n	800ce6e <_scanf_float+0x392>
 800ce58:	1bda      	subs	r2, r3, r7
 800ce5a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ce5e:	429e      	cmp	r6, r3
 800ce60:	bf28      	it	cs
 800ce62:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ce66:	4922      	ldr	r1, [pc, #136]	@ (800cef0 <_scanf_float+0x414>)
 800ce68:	4630      	mov	r0, r6
 800ce6a:	f000 f93d 	bl	800d0e8 <siprintf>
 800ce6e:	9901      	ldr	r1, [sp, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	4640      	mov	r0, r8
 800ce74:	f7ff f944 	bl	800c100 <_strtod_r>
 800ce78:	9b03      	ldr	r3, [sp, #12]
 800ce7a:	6821      	ldr	r1, [r4, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f011 0f02 	tst.w	r1, #2
 800ce82:	ec57 6b10 	vmov	r6, r7, d0
 800ce86:	f103 0204 	add.w	r2, r3, #4
 800ce8a:	d015      	beq.n	800ceb8 <_scanf_float+0x3dc>
 800ce8c:	9903      	ldr	r1, [sp, #12]
 800ce8e:	600a      	str	r2, [r1, #0]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	e9c3 6700 	strd	r6, r7, [r3]
 800ce96:	68e3      	ldr	r3, [r4, #12]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	60e3      	str	r3, [r4, #12]
 800ce9c:	e7d0      	b.n	800ce40 <_scanf_float+0x364>
 800ce9e:	9b04      	ldr	r3, [sp, #16]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d0e4      	beq.n	800ce6e <_scanf_float+0x392>
 800cea4:	9905      	ldr	r1, [sp, #20]
 800cea6:	230a      	movs	r3, #10
 800cea8:	3101      	adds	r1, #1
 800ceaa:	4640      	mov	r0, r8
 800ceac:	f7ff f9b4 	bl	800c218 <_strtol_r>
 800ceb0:	9b04      	ldr	r3, [sp, #16]
 800ceb2:	9e05      	ldr	r6, [sp, #20]
 800ceb4:	1ac2      	subs	r2, r0, r3
 800ceb6:	e7d0      	b.n	800ce5a <_scanf_float+0x37e>
 800ceb8:	f011 0f04 	tst.w	r1, #4
 800cebc:	9903      	ldr	r1, [sp, #12]
 800cebe:	600a      	str	r2, [r1, #0]
 800cec0:	d1e6      	bne.n	800ce90 <_scanf_float+0x3b4>
 800cec2:	681d      	ldr	r5, [r3, #0]
 800cec4:	4632      	mov	r2, r6
 800cec6:	463b      	mov	r3, r7
 800cec8:	4630      	mov	r0, r6
 800ceca:	4639      	mov	r1, r7
 800cecc:	f7f3 fe3e 	bl	8000b4c <__aeabi_dcmpun>
 800ced0:	b128      	cbz	r0, 800cede <_scanf_float+0x402>
 800ced2:	4808      	ldr	r0, [pc, #32]	@ (800cef4 <_scanf_float+0x418>)
 800ced4:	f000 faa4 	bl	800d420 <nanf>
 800ced8:	ed85 0a00 	vstr	s0, [r5]
 800cedc:	e7db      	b.n	800ce96 <_scanf_float+0x3ba>
 800cede:	4630      	mov	r0, r6
 800cee0:	4639      	mov	r1, r7
 800cee2:	f7f3 fe91 	bl	8000c08 <__aeabi_d2f>
 800cee6:	6028      	str	r0, [r5, #0]
 800cee8:	e7d5      	b.n	800ce96 <_scanf_float+0x3ba>
 800ceea:	2700      	movs	r7, #0
 800ceec:	e62e      	b.n	800cb4c <_scanf_float+0x70>
 800ceee:	bf00      	nop
 800cef0:	08014ce1 	.word	0x08014ce1
 800cef4:	08014d83 	.word	0x08014d83

0800cef8 <std>:
 800cef8:	2300      	movs	r3, #0
 800cefa:	b510      	push	{r4, lr}
 800cefc:	4604      	mov	r4, r0
 800cefe:	e9c0 3300 	strd	r3, r3, [r0]
 800cf02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf06:	6083      	str	r3, [r0, #8]
 800cf08:	8181      	strh	r1, [r0, #12]
 800cf0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cf0c:	81c2      	strh	r2, [r0, #14]
 800cf0e:	6183      	str	r3, [r0, #24]
 800cf10:	4619      	mov	r1, r3
 800cf12:	2208      	movs	r2, #8
 800cf14:	305c      	adds	r0, #92	@ 0x5c
 800cf16:	f000 f94c 	bl	800d1b2 <memset>
 800cf1a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf50 <std+0x58>)
 800cf1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cf1e:	4b0d      	ldr	r3, [pc, #52]	@ (800cf54 <std+0x5c>)
 800cf20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cf22:	4b0d      	ldr	r3, [pc, #52]	@ (800cf58 <std+0x60>)
 800cf24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf26:	4b0d      	ldr	r3, [pc, #52]	@ (800cf5c <std+0x64>)
 800cf28:	6323      	str	r3, [r4, #48]	@ 0x30
 800cf2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf60 <std+0x68>)
 800cf2c:	6224      	str	r4, [r4, #32]
 800cf2e:	429c      	cmp	r4, r3
 800cf30:	d006      	beq.n	800cf40 <std+0x48>
 800cf32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cf36:	4294      	cmp	r4, r2
 800cf38:	d002      	beq.n	800cf40 <std+0x48>
 800cf3a:	33d0      	adds	r3, #208	@ 0xd0
 800cf3c:	429c      	cmp	r4, r3
 800cf3e:	d105      	bne.n	800cf4c <std+0x54>
 800cf40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cf44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf48:	f000 ba50 	b.w	800d3ec <__retarget_lock_init_recursive>
 800cf4c:	bd10      	pop	{r4, pc}
 800cf4e:	bf00      	nop
 800cf50:	0800d12d 	.word	0x0800d12d
 800cf54:	0800d14f 	.word	0x0800d14f
 800cf58:	0800d187 	.word	0x0800d187
 800cf5c:	0800d1ab 	.word	0x0800d1ab
 800cf60:	2001ea78 	.word	0x2001ea78

0800cf64 <stdio_exit_handler>:
 800cf64:	4a02      	ldr	r2, [pc, #8]	@ (800cf70 <stdio_exit_handler+0xc>)
 800cf66:	4903      	ldr	r1, [pc, #12]	@ (800cf74 <stdio_exit_handler+0x10>)
 800cf68:	4803      	ldr	r0, [pc, #12]	@ (800cf78 <stdio_exit_handler+0x14>)
 800cf6a:	f000 b869 	b.w	800d040 <_fwalk_sglue>
 800cf6e:	bf00      	nop
 800cf70:	20000100 	.word	0x20000100
 800cf74:	0800f6d5 	.word	0x0800f6d5
 800cf78:	2000027c 	.word	0x2000027c

0800cf7c <cleanup_stdio>:
 800cf7c:	6841      	ldr	r1, [r0, #4]
 800cf7e:	4b0c      	ldr	r3, [pc, #48]	@ (800cfb0 <cleanup_stdio+0x34>)
 800cf80:	4299      	cmp	r1, r3
 800cf82:	b510      	push	{r4, lr}
 800cf84:	4604      	mov	r4, r0
 800cf86:	d001      	beq.n	800cf8c <cleanup_stdio+0x10>
 800cf88:	f002 fba4 	bl	800f6d4 <_fflush_r>
 800cf8c:	68a1      	ldr	r1, [r4, #8]
 800cf8e:	4b09      	ldr	r3, [pc, #36]	@ (800cfb4 <cleanup_stdio+0x38>)
 800cf90:	4299      	cmp	r1, r3
 800cf92:	d002      	beq.n	800cf9a <cleanup_stdio+0x1e>
 800cf94:	4620      	mov	r0, r4
 800cf96:	f002 fb9d 	bl	800f6d4 <_fflush_r>
 800cf9a:	68e1      	ldr	r1, [r4, #12]
 800cf9c:	4b06      	ldr	r3, [pc, #24]	@ (800cfb8 <cleanup_stdio+0x3c>)
 800cf9e:	4299      	cmp	r1, r3
 800cfa0:	d004      	beq.n	800cfac <cleanup_stdio+0x30>
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfa8:	f002 bb94 	b.w	800f6d4 <_fflush_r>
 800cfac:	bd10      	pop	{r4, pc}
 800cfae:	bf00      	nop
 800cfb0:	2001ea78 	.word	0x2001ea78
 800cfb4:	2001eae0 	.word	0x2001eae0
 800cfb8:	2001eb48 	.word	0x2001eb48

0800cfbc <global_stdio_init.part.0>:
 800cfbc:	b510      	push	{r4, lr}
 800cfbe:	4b0b      	ldr	r3, [pc, #44]	@ (800cfec <global_stdio_init.part.0+0x30>)
 800cfc0:	4c0b      	ldr	r4, [pc, #44]	@ (800cff0 <global_stdio_init.part.0+0x34>)
 800cfc2:	4a0c      	ldr	r2, [pc, #48]	@ (800cff4 <global_stdio_init.part.0+0x38>)
 800cfc4:	601a      	str	r2, [r3, #0]
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	2200      	movs	r2, #0
 800cfca:	2104      	movs	r1, #4
 800cfcc:	f7ff ff94 	bl	800cef8 <std>
 800cfd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	2109      	movs	r1, #9
 800cfd8:	f7ff ff8e 	bl	800cef8 <std>
 800cfdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cfe0:	2202      	movs	r2, #2
 800cfe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfe6:	2112      	movs	r1, #18
 800cfe8:	f7ff bf86 	b.w	800cef8 <std>
 800cfec:	2001ebb0 	.word	0x2001ebb0
 800cff0:	2001ea78 	.word	0x2001ea78
 800cff4:	0800cf65 	.word	0x0800cf65

0800cff8 <__sfp_lock_acquire>:
 800cff8:	4801      	ldr	r0, [pc, #4]	@ (800d000 <__sfp_lock_acquire+0x8>)
 800cffa:	f000 b9f8 	b.w	800d3ee <__retarget_lock_acquire_recursive>
 800cffe:	bf00      	nop
 800d000:	2001ebb9 	.word	0x2001ebb9

0800d004 <__sfp_lock_release>:
 800d004:	4801      	ldr	r0, [pc, #4]	@ (800d00c <__sfp_lock_release+0x8>)
 800d006:	f000 b9f3 	b.w	800d3f0 <__retarget_lock_release_recursive>
 800d00a:	bf00      	nop
 800d00c:	2001ebb9 	.word	0x2001ebb9

0800d010 <__sinit>:
 800d010:	b510      	push	{r4, lr}
 800d012:	4604      	mov	r4, r0
 800d014:	f7ff fff0 	bl	800cff8 <__sfp_lock_acquire>
 800d018:	6a23      	ldr	r3, [r4, #32]
 800d01a:	b11b      	cbz	r3, 800d024 <__sinit+0x14>
 800d01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d020:	f7ff bff0 	b.w	800d004 <__sfp_lock_release>
 800d024:	4b04      	ldr	r3, [pc, #16]	@ (800d038 <__sinit+0x28>)
 800d026:	6223      	str	r3, [r4, #32]
 800d028:	4b04      	ldr	r3, [pc, #16]	@ (800d03c <__sinit+0x2c>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d1f5      	bne.n	800d01c <__sinit+0xc>
 800d030:	f7ff ffc4 	bl	800cfbc <global_stdio_init.part.0>
 800d034:	e7f2      	b.n	800d01c <__sinit+0xc>
 800d036:	bf00      	nop
 800d038:	0800cf7d 	.word	0x0800cf7d
 800d03c:	2001ebb0 	.word	0x2001ebb0

0800d040 <_fwalk_sglue>:
 800d040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d044:	4607      	mov	r7, r0
 800d046:	4688      	mov	r8, r1
 800d048:	4614      	mov	r4, r2
 800d04a:	2600      	movs	r6, #0
 800d04c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d050:	f1b9 0901 	subs.w	r9, r9, #1
 800d054:	d505      	bpl.n	800d062 <_fwalk_sglue+0x22>
 800d056:	6824      	ldr	r4, [r4, #0]
 800d058:	2c00      	cmp	r4, #0
 800d05a:	d1f7      	bne.n	800d04c <_fwalk_sglue+0xc>
 800d05c:	4630      	mov	r0, r6
 800d05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d062:	89ab      	ldrh	r3, [r5, #12]
 800d064:	2b01      	cmp	r3, #1
 800d066:	d907      	bls.n	800d078 <_fwalk_sglue+0x38>
 800d068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d06c:	3301      	adds	r3, #1
 800d06e:	d003      	beq.n	800d078 <_fwalk_sglue+0x38>
 800d070:	4629      	mov	r1, r5
 800d072:	4638      	mov	r0, r7
 800d074:	47c0      	blx	r8
 800d076:	4306      	orrs	r6, r0
 800d078:	3568      	adds	r5, #104	@ 0x68
 800d07a:	e7e9      	b.n	800d050 <_fwalk_sglue+0x10>

0800d07c <sniprintf>:
 800d07c:	b40c      	push	{r2, r3}
 800d07e:	b530      	push	{r4, r5, lr}
 800d080:	4b18      	ldr	r3, [pc, #96]	@ (800d0e4 <sniprintf+0x68>)
 800d082:	1e0c      	subs	r4, r1, #0
 800d084:	681d      	ldr	r5, [r3, #0]
 800d086:	b09d      	sub	sp, #116	@ 0x74
 800d088:	da08      	bge.n	800d09c <sniprintf+0x20>
 800d08a:	238b      	movs	r3, #139	@ 0x8b
 800d08c:	602b      	str	r3, [r5, #0]
 800d08e:	f04f 30ff 	mov.w	r0, #4294967295
 800d092:	b01d      	add	sp, #116	@ 0x74
 800d094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d098:	b002      	add	sp, #8
 800d09a:	4770      	bx	lr
 800d09c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d0a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d0a4:	f04f 0300 	mov.w	r3, #0
 800d0a8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d0aa:	bf14      	ite	ne
 800d0ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d0b0:	4623      	moveq	r3, r4
 800d0b2:	9304      	str	r3, [sp, #16]
 800d0b4:	9307      	str	r3, [sp, #28]
 800d0b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d0ba:	9002      	str	r0, [sp, #8]
 800d0bc:	9006      	str	r0, [sp, #24]
 800d0be:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d0c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d0c4:	ab21      	add	r3, sp, #132	@ 0x84
 800d0c6:	a902      	add	r1, sp, #8
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	9301      	str	r3, [sp, #4]
 800d0cc:	f002 f982 	bl	800f3d4 <_svfiprintf_r>
 800d0d0:	1c43      	adds	r3, r0, #1
 800d0d2:	bfbc      	itt	lt
 800d0d4:	238b      	movlt	r3, #139	@ 0x8b
 800d0d6:	602b      	strlt	r3, [r5, #0]
 800d0d8:	2c00      	cmp	r4, #0
 800d0da:	d0da      	beq.n	800d092 <sniprintf+0x16>
 800d0dc:	9b02      	ldr	r3, [sp, #8]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	701a      	strb	r2, [r3, #0]
 800d0e2:	e7d6      	b.n	800d092 <sniprintf+0x16>
 800d0e4:	20000278 	.word	0x20000278

0800d0e8 <siprintf>:
 800d0e8:	b40e      	push	{r1, r2, r3}
 800d0ea:	b510      	push	{r4, lr}
 800d0ec:	b09d      	sub	sp, #116	@ 0x74
 800d0ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d0f0:	9002      	str	r0, [sp, #8]
 800d0f2:	9006      	str	r0, [sp, #24]
 800d0f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d0f8:	480a      	ldr	r0, [pc, #40]	@ (800d124 <siprintf+0x3c>)
 800d0fa:	9107      	str	r1, [sp, #28]
 800d0fc:	9104      	str	r1, [sp, #16]
 800d0fe:	490a      	ldr	r1, [pc, #40]	@ (800d128 <siprintf+0x40>)
 800d100:	f853 2b04 	ldr.w	r2, [r3], #4
 800d104:	9105      	str	r1, [sp, #20]
 800d106:	2400      	movs	r4, #0
 800d108:	a902      	add	r1, sp, #8
 800d10a:	6800      	ldr	r0, [r0, #0]
 800d10c:	9301      	str	r3, [sp, #4]
 800d10e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d110:	f002 f960 	bl	800f3d4 <_svfiprintf_r>
 800d114:	9b02      	ldr	r3, [sp, #8]
 800d116:	701c      	strb	r4, [r3, #0]
 800d118:	b01d      	add	sp, #116	@ 0x74
 800d11a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d11e:	b003      	add	sp, #12
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop
 800d124:	20000278 	.word	0x20000278
 800d128:	ffff0208 	.word	0xffff0208

0800d12c <__sread>:
 800d12c:	b510      	push	{r4, lr}
 800d12e:	460c      	mov	r4, r1
 800d130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d134:	f000 f90c 	bl	800d350 <_read_r>
 800d138:	2800      	cmp	r0, #0
 800d13a:	bfab      	itete	ge
 800d13c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d13e:	89a3      	ldrhlt	r3, [r4, #12]
 800d140:	181b      	addge	r3, r3, r0
 800d142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d146:	bfac      	ite	ge
 800d148:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d14a:	81a3      	strhlt	r3, [r4, #12]
 800d14c:	bd10      	pop	{r4, pc}

0800d14e <__swrite>:
 800d14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d152:	461f      	mov	r7, r3
 800d154:	898b      	ldrh	r3, [r1, #12]
 800d156:	05db      	lsls	r3, r3, #23
 800d158:	4605      	mov	r5, r0
 800d15a:	460c      	mov	r4, r1
 800d15c:	4616      	mov	r6, r2
 800d15e:	d505      	bpl.n	800d16c <__swrite+0x1e>
 800d160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d164:	2302      	movs	r3, #2
 800d166:	2200      	movs	r2, #0
 800d168:	f000 f8e0 	bl	800d32c <_lseek_r>
 800d16c:	89a3      	ldrh	r3, [r4, #12]
 800d16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d176:	81a3      	strh	r3, [r4, #12]
 800d178:	4632      	mov	r2, r6
 800d17a:	463b      	mov	r3, r7
 800d17c:	4628      	mov	r0, r5
 800d17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d182:	f000 b8f7 	b.w	800d374 <_write_r>

0800d186 <__sseek>:
 800d186:	b510      	push	{r4, lr}
 800d188:	460c      	mov	r4, r1
 800d18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18e:	f000 f8cd 	bl	800d32c <_lseek_r>
 800d192:	1c43      	adds	r3, r0, #1
 800d194:	89a3      	ldrh	r3, [r4, #12]
 800d196:	bf15      	itete	ne
 800d198:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d19a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d19e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d1a2:	81a3      	strheq	r3, [r4, #12]
 800d1a4:	bf18      	it	ne
 800d1a6:	81a3      	strhne	r3, [r4, #12]
 800d1a8:	bd10      	pop	{r4, pc}

0800d1aa <__sclose>:
 800d1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ae:	f000 b8ad 	b.w	800d30c <_close_r>

0800d1b2 <memset>:
 800d1b2:	4402      	add	r2, r0
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d100      	bne.n	800d1bc <memset+0xa>
 800d1ba:	4770      	bx	lr
 800d1bc:	f803 1b01 	strb.w	r1, [r3], #1
 800d1c0:	e7f9      	b.n	800d1b6 <memset+0x4>

0800d1c2 <strchr>:
 800d1c2:	b2c9      	uxtb	r1, r1
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1cc:	b112      	cbz	r2, 800d1d4 <strchr+0x12>
 800d1ce:	428a      	cmp	r2, r1
 800d1d0:	d1f9      	bne.n	800d1c6 <strchr+0x4>
 800d1d2:	4770      	bx	lr
 800d1d4:	2900      	cmp	r1, #0
 800d1d6:	bf18      	it	ne
 800d1d8:	2000      	movne	r0, #0
 800d1da:	4770      	bx	lr

0800d1dc <strncat>:
 800d1dc:	b530      	push	{r4, r5, lr}
 800d1de:	4604      	mov	r4, r0
 800d1e0:	7825      	ldrb	r5, [r4, #0]
 800d1e2:	4623      	mov	r3, r4
 800d1e4:	3401      	adds	r4, #1
 800d1e6:	2d00      	cmp	r5, #0
 800d1e8:	d1fa      	bne.n	800d1e0 <strncat+0x4>
 800d1ea:	3a01      	subs	r2, #1
 800d1ec:	d304      	bcc.n	800d1f8 <strncat+0x1c>
 800d1ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1f2:	f803 4b01 	strb.w	r4, [r3], #1
 800d1f6:	b904      	cbnz	r4, 800d1fa <strncat+0x1e>
 800d1f8:	bd30      	pop	{r4, r5, pc}
 800d1fa:	2a00      	cmp	r2, #0
 800d1fc:	d1f5      	bne.n	800d1ea <strncat+0xe>
 800d1fe:	701a      	strb	r2, [r3, #0]
 800d200:	e7f3      	b.n	800d1ea <strncat+0xe>

0800d202 <strncmp>:
 800d202:	b510      	push	{r4, lr}
 800d204:	b16a      	cbz	r2, 800d222 <strncmp+0x20>
 800d206:	3901      	subs	r1, #1
 800d208:	1884      	adds	r4, r0, r2
 800d20a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d20e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d212:	429a      	cmp	r2, r3
 800d214:	d103      	bne.n	800d21e <strncmp+0x1c>
 800d216:	42a0      	cmp	r0, r4
 800d218:	d001      	beq.n	800d21e <strncmp+0x1c>
 800d21a:	2a00      	cmp	r2, #0
 800d21c:	d1f5      	bne.n	800d20a <strncmp+0x8>
 800d21e:	1ad0      	subs	r0, r2, r3
 800d220:	bd10      	pop	{r4, pc}
 800d222:	4610      	mov	r0, r2
 800d224:	e7fc      	b.n	800d220 <strncmp+0x1e>

0800d226 <strncpy>:
 800d226:	b510      	push	{r4, lr}
 800d228:	3901      	subs	r1, #1
 800d22a:	4603      	mov	r3, r0
 800d22c:	b132      	cbz	r2, 800d23c <strncpy+0x16>
 800d22e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d232:	f803 4b01 	strb.w	r4, [r3], #1
 800d236:	3a01      	subs	r2, #1
 800d238:	2c00      	cmp	r4, #0
 800d23a:	d1f7      	bne.n	800d22c <strncpy+0x6>
 800d23c:	441a      	add	r2, r3
 800d23e:	2100      	movs	r1, #0
 800d240:	4293      	cmp	r3, r2
 800d242:	d100      	bne.n	800d246 <strncpy+0x20>
 800d244:	bd10      	pop	{r4, pc}
 800d246:	f803 1b01 	strb.w	r1, [r3], #1
 800d24a:	e7f9      	b.n	800d240 <strncpy+0x1a>

0800d24c <strtok>:
 800d24c:	4b16      	ldr	r3, [pc, #88]	@ (800d2a8 <strtok+0x5c>)
 800d24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d252:	681f      	ldr	r7, [r3, #0]
 800d254:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800d256:	4605      	mov	r5, r0
 800d258:	460e      	mov	r6, r1
 800d25a:	b9ec      	cbnz	r4, 800d298 <strtok+0x4c>
 800d25c:	2050      	movs	r0, #80	@ 0x50
 800d25e:	f001 fadf 	bl	800e820 <malloc>
 800d262:	4602      	mov	r2, r0
 800d264:	6478      	str	r0, [r7, #68]	@ 0x44
 800d266:	b920      	cbnz	r0, 800d272 <strtok+0x26>
 800d268:	4b10      	ldr	r3, [pc, #64]	@ (800d2ac <strtok+0x60>)
 800d26a:	4811      	ldr	r0, [pc, #68]	@ (800d2b0 <strtok+0x64>)
 800d26c:	215b      	movs	r1, #91	@ 0x5b
 800d26e:	f000 f8dd 	bl	800d42c <__assert_func>
 800d272:	e9c0 4400 	strd	r4, r4, [r0]
 800d276:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d27a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d27e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800d282:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800d286:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800d28a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800d28e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800d292:	6184      	str	r4, [r0, #24]
 800d294:	7704      	strb	r4, [r0, #28]
 800d296:	6244      	str	r4, [r0, #36]	@ 0x24
 800d298:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d29a:	4631      	mov	r1, r6
 800d29c:	4628      	mov	r0, r5
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a4:	f000 b806 	b.w	800d2b4 <__strtok_r>
 800d2a8:	20000278 	.word	0x20000278
 800d2ac:	08014c3c 	.word	0x08014c3c
 800d2b0:	08014ce6 	.word	0x08014ce6

0800d2b4 <__strtok_r>:
 800d2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	b908      	cbnz	r0, 800d2be <__strtok_r+0xa>
 800d2ba:	6814      	ldr	r4, [r2, #0]
 800d2bc:	b144      	cbz	r4, 800d2d0 <__strtok_r+0x1c>
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d2c4:	460f      	mov	r7, r1
 800d2c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d2ca:	b91e      	cbnz	r6, 800d2d4 <__strtok_r+0x20>
 800d2cc:	b965      	cbnz	r5, 800d2e8 <__strtok_r+0x34>
 800d2ce:	6015      	str	r5, [r2, #0]
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	e005      	b.n	800d2e0 <__strtok_r+0x2c>
 800d2d4:	42b5      	cmp	r5, r6
 800d2d6:	d1f6      	bne.n	800d2c6 <__strtok_r+0x12>
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1f0      	bne.n	800d2be <__strtok_r+0xa>
 800d2dc:	6014      	str	r4, [r2, #0]
 800d2de:	7003      	strb	r3, [r0, #0]
 800d2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2e2:	461c      	mov	r4, r3
 800d2e4:	e00c      	b.n	800d300 <__strtok_r+0x4c>
 800d2e6:	b91d      	cbnz	r5, 800d2f0 <__strtok_r+0x3c>
 800d2e8:	4627      	mov	r7, r4
 800d2ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2ee:	460e      	mov	r6, r1
 800d2f0:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d2f4:	42ab      	cmp	r3, r5
 800d2f6:	d1f6      	bne.n	800d2e6 <__strtok_r+0x32>
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d0f2      	beq.n	800d2e2 <__strtok_r+0x2e>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	703b      	strb	r3, [r7, #0]
 800d300:	6014      	str	r4, [r2, #0]
 800d302:	e7ed      	b.n	800d2e0 <__strtok_r+0x2c>

0800d304 <_localeconv_r>:
 800d304:	4800      	ldr	r0, [pc, #0]	@ (800d308 <_localeconv_r+0x4>)
 800d306:	4770      	bx	lr
 800d308:	200001fc 	.word	0x200001fc

0800d30c <_close_r>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	4d06      	ldr	r5, [pc, #24]	@ (800d328 <_close_r+0x1c>)
 800d310:	2300      	movs	r3, #0
 800d312:	4604      	mov	r4, r0
 800d314:	4608      	mov	r0, r1
 800d316:	602b      	str	r3, [r5, #0]
 800d318:	f7f5 fb6a 	bl	80029f0 <_close>
 800d31c:	1c43      	adds	r3, r0, #1
 800d31e:	d102      	bne.n	800d326 <_close_r+0x1a>
 800d320:	682b      	ldr	r3, [r5, #0]
 800d322:	b103      	cbz	r3, 800d326 <_close_r+0x1a>
 800d324:	6023      	str	r3, [r4, #0]
 800d326:	bd38      	pop	{r3, r4, r5, pc}
 800d328:	2001ebb4 	.word	0x2001ebb4

0800d32c <_lseek_r>:
 800d32c:	b538      	push	{r3, r4, r5, lr}
 800d32e:	4d07      	ldr	r5, [pc, #28]	@ (800d34c <_lseek_r+0x20>)
 800d330:	4604      	mov	r4, r0
 800d332:	4608      	mov	r0, r1
 800d334:	4611      	mov	r1, r2
 800d336:	2200      	movs	r2, #0
 800d338:	602a      	str	r2, [r5, #0]
 800d33a:	461a      	mov	r2, r3
 800d33c:	f7f5 fb7f 	bl	8002a3e <_lseek>
 800d340:	1c43      	adds	r3, r0, #1
 800d342:	d102      	bne.n	800d34a <_lseek_r+0x1e>
 800d344:	682b      	ldr	r3, [r5, #0]
 800d346:	b103      	cbz	r3, 800d34a <_lseek_r+0x1e>
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	bd38      	pop	{r3, r4, r5, pc}
 800d34c:	2001ebb4 	.word	0x2001ebb4

0800d350 <_read_r>:
 800d350:	b538      	push	{r3, r4, r5, lr}
 800d352:	4d07      	ldr	r5, [pc, #28]	@ (800d370 <_read_r+0x20>)
 800d354:	4604      	mov	r4, r0
 800d356:	4608      	mov	r0, r1
 800d358:	4611      	mov	r1, r2
 800d35a:	2200      	movs	r2, #0
 800d35c:	602a      	str	r2, [r5, #0]
 800d35e:	461a      	mov	r2, r3
 800d360:	f7f5 fb0d 	bl	800297e <_read>
 800d364:	1c43      	adds	r3, r0, #1
 800d366:	d102      	bne.n	800d36e <_read_r+0x1e>
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	b103      	cbz	r3, 800d36e <_read_r+0x1e>
 800d36c:	6023      	str	r3, [r4, #0]
 800d36e:	bd38      	pop	{r3, r4, r5, pc}
 800d370:	2001ebb4 	.word	0x2001ebb4

0800d374 <_write_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4d07      	ldr	r5, [pc, #28]	@ (800d394 <_write_r+0x20>)
 800d378:	4604      	mov	r4, r0
 800d37a:	4608      	mov	r0, r1
 800d37c:	4611      	mov	r1, r2
 800d37e:	2200      	movs	r2, #0
 800d380:	602a      	str	r2, [r5, #0]
 800d382:	461a      	mov	r2, r3
 800d384:	f7f5 fb18 	bl	80029b8 <_write>
 800d388:	1c43      	adds	r3, r0, #1
 800d38a:	d102      	bne.n	800d392 <_write_r+0x1e>
 800d38c:	682b      	ldr	r3, [r5, #0]
 800d38e:	b103      	cbz	r3, 800d392 <_write_r+0x1e>
 800d390:	6023      	str	r3, [r4, #0]
 800d392:	bd38      	pop	{r3, r4, r5, pc}
 800d394:	2001ebb4 	.word	0x2001ebb4

0800d398 <__errno>:
 800d398:	4b01      	ldr	r3, [pc, #4]	@ (800d3a0 <__errno+0x8>)
 800d39a:	6818      	ldr	r0, [r3, #0]
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	20000278 	.word	0x20000278

0800d3a4 <__libc_init_array>:
 800d3a4:	b570      	push	{r4, r5, r6, lr}
 800d3a6:	4d0d      	ldr	r5, [pc, #52]	@ (800d3dc <__libc_init_array+0x38>)
 800d3a8:	4c0d      	ldr	r4, [pc, #52]	@ (800d3e0 <__libc_init_array+0x3c>)
 800d3aa:	1b64      	subs	r4, r4, r5
 800d3ac:	10a4      	asrs	r4, r4, #2
 800d3ae:	2600      	movs	r6, #0
 800d3b0:	42a6      	cmp	r6, r4
 800d3b2:	d109      	bne.n	800d3c8 <__libc_init_array+0x24>
 800d3b4:	4d0b      	ldr	r5, [pc, #44]	@ (800d3e4 <__libc_init_array+0x40>)
 800d3b6:	4c0c      	ldr	r4, [pc, #48]	@ (800d3e8 <__libc_init_array+0x44>)
 800d3b8:	f002 fd00 	bl	800fdbc <_init>
 800d3bc:	1b64      	subs	r4, r4, r5
 800d3be:	10a4      	asrs	r4, r4, #2
 800d3c0:	2600      	movs	r6, #0
 800d3c2:	42a6      	cmp	r6, r4
 800d3c4:	d105      	bne.n	800d3d2 <__libc_init_array+0x2e>
 800d3c6:	bd70      	pop	{r4, r5, r6, pc}
 800d3c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3cc:	4798      	blx	r3
 800d3ce:	3601      	adds	r6, #1
 800d3d0:	e7ee      	b.n	800d3b0 <__libc_init_array+0xc>
 800d3d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3d6:	4798      	blx	r3
 800d3d8:	3601      	adds	r6, #1
 800d3da:	e7f2      	b.n	800d3c2 <__libc_init_array+0x1e>
 800d3dc:	08015120 	.word	0x08015120
 800d3e0:	08015120 	.word	0x08015120
 800d3e4:	08015120 	.word	0x08015120
 800d3e8:	08015124 	.word	0x08015124

0800d3ec <__retarget_lock_init_recursive>:
 800d3ec:	4770      	bx	lr

0800d3ee <__retarget_lock_acquire_recursive>:
 800d3ee:	4770      	bx	lr

0800d3f0 <__retarget_lock_release_recursive>:
 800d3f0:	4770      	bx	lr

0800d3f2 <memcpy>:
 800d3f2:	440a      	add	r2, r1
 800d3f4:	4291      	cmp	r1, r2
 800d3f6:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3fa:	d100      	bne.n	800d3fe <memcpy+0xc>
 800d3fc:	4770      	bx	lr
 800d3fe:	b510      	push	{r4, lr}
 800d400:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d404:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d408:	4291      	cmp	r1, r2
 800d40a:	d1f9      	bne.n	800d400 <memcpy+0xe>
 800d40c:	bd10      	pop	{r4, pc}
	...

0800d410 <nan>:
 800d410:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d418 <nan+0x8>
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	00000000 	.word	0x00000000
 800d41c:	7ff80000 	.word	0x7ff80000

0800d420 <nanf>:
 800d420:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d428 <nanf+0x8>
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	7fc00000 	.word	0x7fc00000

0800d42c <__assert_func>:
 800d42c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d42e:	4614      	mov	r4, r2
 800d430:	461a      	mov	r2, r3
 800d432:	4b09      	ldr	r3, [pc, #36]	@ (800d458 <__assert_func+0x2c>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4605      	mov	r5, r0
 800d438:	68d8      	ldr	r0, [r3, #12]
 800d43a:	b14c      	cbz	r4, 800d450 <__assert_func+0x24>
 800d43c:	4b07      	ldr	r3, [pc, #28]	@ (800d45c <__assert_func+0x30>)
 800d43e:	9100      	str	r1, [sp, #0]
 800d440:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d444:	4906      	ldr	r1, [pc, #24]	@ (800d460 <__assert_func+0x34>)
 800d446:	462b      	mov	r3, r5
 800d448:	f002 f96c 	bl	800f724 <fiprintf>
 800d44c:	f002 f9a6 	bl	800f79c <abort>
 800d450:	4b04      	ldr	r3, [pc, #16]	@ (800d464 <__assert_func+0x38>)
 800d452:	461c      	mov	r4, r3
 800d454:	e7f3      	b.n	800d43e <__assert_func+0x12>
 800d456:	bf00      	nop
 800d458:	20000278 	.word	0x20000278
 800d45c:	08014d48 	.word	0x08014d48
 800d460:	08014d55 	.word	0x08014d55
 800d464:	08014d83 	.word	0x08014d83

0800d468 <quorem>:
 800d468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46c:	6903      	ldr	r3, [r0, #16]
 800d46e:	690c      	ldr	r4, [r1, #16]
 800d470:	42a3      	cmp	r3, r4
 800d472:	4607      	mov	r7, r0
 800d474:	db7e      	blt.n	800d574 <quorem+0x10c>
 800d476:	3c01      	subs	r4, #1
 800d478:	f101 0814 	add.w	r8, r1, #20
 800d47c:	00a3      	lsls	r3, r4, #2
 800d47e:	f100 0514 	add.w	r5, r0, #20
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d488:	9301      	str	r3, [sp, #4]
 800d48a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d48e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d492:	3301      	adds	r3, #1
 800d494:	429a      	cmp	r2, r3
 800d496:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d49a:	fbb2 f6f3 	udiv	r6, r2, r3
 800d49e:	d32e      	bcc.n	800d4fe <quorem+0x96>
 800d4a0:	f04f 0a00 	mov.w	sl, #0
 800d4a4:	46c4      	mov	ip, r8
 800d4a6:	46ae      	mov	lr, r5
 800d4a8:	46d3      	mov	fp, sl
 800d4aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d4ae:	b298      	uxth	r0, r3
 800d4b0:	fb06 a000 	mla	r0, r6, r0, sl
 800d4b4:	0c02      	lsrs	r2, r0, #16
 800d4b6:	0c1b      	lsrs	r3, r3, #16
 800d4b8:	fb06 2303 	mla	r3, r6, r3, r2
 800d4bc:	f8de 2000 	ldr.w	r2, [lr]
 800d4c0:	b280      	uxth	r0, r0
 800d4c2:	b292      	uxth	r2, r2
 800d4c4:	1a12      	subs	r2, r2, r0
 800d4c6:	445a      	add	r2, fp
 800d4c8:	f8de 0000 	ldr.w	r0, [lr]
 800d4cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d4d6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d4da:	b292      	uxth	r2, r2
 800d4dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d4e0:	45e1      	cmp	r9, ip
 800d4e2:	f84e 2b04 	str.w	r2, [lr], #4
 800d4e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d4ea:	d2de      	bcs.n	800d4aa <quorem+0x42>
 800d4ec:	9b00      	ldr	r3, [sp, #0]
 800d4ee:	58eb      	ldr	r3, [r5, r3]
 800d4f0:	b92b      	cbnz	r3, 800d4fe <quorem+0x96>
 800d4f2:	9b01      	ldr	r3, [sp, #4]
 800d4f4:	3b04      	subs	r3, #4
 800d4f6:	429d      	cmp	r5, r3
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	d32f      	bcc.n	800d55c <quorem+0xf4>
 800d4fc:	613c      	str	r4, [r7, #16]
 800d4fe:	4638      	mov	r0, r7
 800d500:	f001 fd12 	bl	800ef28 <__mcmp>
 800d504:	2800      	cmp	r0, #0
 800d506:	db25      	blt.n	800d554 <quorem+0xec>
 800d508:	4629      	mov	r1, r5
 800d50a:	2000      	movs	r0, #0
 800d50c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d510:	f8d1 c000 	ldr.w	ip, [r1]
 800d514:	fa1f fe82 	uxth.w	lr, r2
 800d518:	fa1f f38c 	uxth.w	r3, ip
 800d51c:	eba3 030e 	sub.w	r3, r3, lr
 800d520:	4403      	add	r3, r0
 800d522:	0c12      	lsrs	r2, r2, #16
 800d524:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d528:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d532:	45c1      	cmp	r9, r8
 800d534:	f841 3b04 	str.w	r3, [r1], #4
 800d538:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d53c:	d2e6      	bcs.n	800d50c <quorem+0xa4>
 800d53e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d546:	b922      	cbnz	r2, 800d552 <quorem+0xea>
 800d548:	3b04      	subs	r3, #4
 800d54a:	429d      	cmp	r5, r3
 800d54c:	461a      	mov	r2, r3
 800d54e:	d30b      	bcc.n	800d568 <quorem+0x100>
 800d550:	613c      	str	r4, [r7, #16]
 800d552:	3601      	adds	r6, #1
 800d554:	4630      	mov	r0, r6
 800d556:	b003      	add	sp, #12
 800d558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d55c:	6812      	ldr	r2, [r2, #0]
 800d55e:	3b04      	subs	r3, #4
 800d560:	2a00      	cmp	r2, #0
 800d562:	d1cb      	bne.n	800d4fc <quorem+0x94>
 800d564:	3c01      	subs	r4, #1
 800d566:	e7c6      	b.n	800d4f6 <quorem+0x8e>
 800d568:	6812      	ldr	r2, [r2, #0]
 800d56a:	3b04      	subs	r3, #4
 800d56c:	2a00      	cmp	r2, #0
 800d56e:	d1ef      	bne.n	800d550 <quorem+0xe8>
 800d570:	3c01      	subs	r4, #1
 800d572:	e7ea      	b.n	800d54a <quorem+0xe2>
 800d574:	2000      	movs	r0, #0
 800d576:	e7ee      	b.n	800d556 <quorem+0xee>

0800d578 <_dtoa_r>:
 800d578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57c:	69c7      	ldr	r7, [r0, #28]
 800d57e:	b097      	sub	sp, #92	@ 0x5c
 800d580:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d584:	ec55 4b10 	vmov	r4, r5, d0
 800d588:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d58a:	9107      	str	r1, [sp, #28]
 800d58c:	4681      	mov	r9, r0
 800d58e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d590:	9311      	str	r3, [sp, #68]	@ 0x44
 800d592:	b97f      	cbnz	r7, 800d5b4 <_dtoa_r+0x3c>
 800d594:	2010      	movs	r0, #16
 800d596:	f001 f943 	bl	800e820 <malloc>
 800d59a:	4602      	mov	r2, r0
 800d59c:	f8c9 001c 	str.w	r0, [r9, #28]
 800d5a0:	b920      	cbnz	r0, 800d5ac <_dtoa_r+0x34>
 800d5a2:	4ba9      	ldr	r3, [pc, #676]	@ (800d848 <_dtoa_r+0x2d0>)
 800d5a4:	21ef      	movs	r1, #239	@ 0xef
 800d5a6:	48a9      	ldr	r0, [pc, #676]	@ (800d84c <_dtoa_r+0x2d4>)
 800d5a8:	f7ff ff40 	bl	800d42c <__assert_func>
 800d5ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d5b0:	6007      	str	r7, [r0, #0]
 800d5b2:	60c7      	str	r7, [r0, #12]
 800d5b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d5b8:	6819      	ldr	r1, [r3, #0]
 800d5ba:	b159      	cbz	r1, 800d5d4 <_dtoa_r+0x5c>
 800d5bc:	685a      	ldr	r2, [r3, #4]
 800d5be:	604a      	str	r2, [r1, #4]
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	4093      	lsls	r3, r2
 800d5c4:	608b      	str	r3, [r1, #8]
 800d5c6:	4648      	mov	r0, r9
 800d5c8:	f001 fa32 	bl	800ea30 <_Bfree>
 800d5cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	601a      	str	r2, [r3, #0]
 800d5d4:	1e2b      	subs	r3, r5, #0
 800d5d6:	bfb9      	ittee	lt
 800d5d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d5dc:	9305      	strlt	r3, [sp, #20]
 800d5de:	2300      	movge	r3, #0
 800d5e0:	6033      	strge	r3, [r6, #0]
 800d5e2:	9f05      	ldr	r7, [sp, #20]
 800d5e4:	4b9a      	ldr	r3, [pc, #616]	@ (800d850 <_dtoa_r+0x2d8>)
 800d5e6:	bfbc      	itt	lt
 800d5e8:	2201      	movlt	r2, #1
 800d5ea:	6032      	strlt	r2, [r6, #0]
 800d5ec:	43bb      	bics	r3, r7
 800d5ee:	d112      	bne.n	800d616 <_dtoa_r+0x9e>
 800d5f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d5f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d5f6:	6013      	str	r3, [r2, #0]
 800d5f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d5fc:	4323      	orrs	r3, r4
 800d5fe:	f000 855a 	beq.w	800e0b6 <_dtoa_r+0xb3e>
 800d602:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d604:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d864 <_dtoa_r+0x2ec>
 800d608:	2b00      	cmp	r3, #0
 800d60a:	f000 855c 	beq.w	800e0c6 <_dtoa_r+0xb4e>
 800d60e:	f10a 0303 	add.w	r3, sl, #3
 800d612:	f000 bd56 	b.w	800e0c2 <_dtoa_r+0xb4a>
 800d616:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d61a:	2200      	movs	r2, #0
 800d61c:	ec51 0b17 	vmov	r0, r1, d7
 800d620:	2300      	movs	r3, #0
 800d622:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d626:	f7f3 fa5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800d62a:	4680      	mov	r8, r0
 800d62c:	b158      	cbz	r0, 800d646 <_dtoa_r+0xce>
 800d62e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d630:	2301      	movs	r3, #1
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d636:	b113      	cbz	r3, 800d63e <_dtoa_r+0xc6>
 800d638:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d63a:	4b86      	ldr	r3, [pc, #536]	@ (800d854 <_dtoa_r+0x2dc>)
 800d63c:	6013      	str	r3, [r2, #0]
 800d63e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d868 <_dtoa_r+0x2f0>
 800d642:	f000 bd40 	b.w	800e0c6 <_dtoa_r+0xb4e>
 800d646:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d64a:	aa14      	add	r2, sp, #80	@ 0x50
 800d64c:	a915      	add	r1, sp, #84	@ 0x54
 800d64e:	4648      	mov	r0, r9
 800d650:	f001 fd8a 	bl	800f168 <__d2b>
 800d654:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d658:	9002      	str	r0, [sp, #8]
 800d65a:	2e00      	cmp	r6, #0
 800d65c:	d078      	beq.n	800d750 <_dtoa_r+0x1d8>
 800d65e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d660:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d668:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d66c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d670:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d674:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d678:	4619      	mov	r1, r3
 800d67a:	2200      	movs	r2, #0
 800d67c:	4b76      	ldr	r3, [pc, #472]	@ (800d858 <_dtoa_r+0x2e0>)
 800d67e:	f7f2 fe13 	bl	80002a8 <__aeabi_dsub>
 800d682:	a36b      	add	r3, pc, #428	@ (adr r3, 800d830 <_dtoa_r+0x2b8>)
 800d684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d688:	f7f2 ffc6 	bl	8000618 <__aeabi_dmul>
 800d68c:	a36a      	add	r3, pc, #424	@ (adr r3, 800d838 <_dtoa_r+0x2c0>)
 800d68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d692:	f7f2 fe0b 	bl	80002ac <__adddf3>
 800d696:	4604      	mov	r4, r0
 800d698:	4630      	mov	r0, r6
 800d69a:	460d      	mov	r5, r1
 800d69c:	f7f2 ff52 	bl	8000544 <__aeabi_i2d>
 800d6a0:	a367      	add	r3, pc, #412	@ (adr r3, 800d840 <_dtoa_r+0x2c8>)
 800d6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a6:	f7f2 ffb7 	bl	8000618 <__aeabi_dmul>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	f7f2 fdfb 	bl	80002ac <__adddf3>
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	460d      	mov	r5, r1
 800d6ba:	f7f3 fa5d 	bl	8000b78 <__aeabi_d2iz>
 800d6be:	2200      	movs	r2, #0
 800d6c0:	4607      	mov	r7, r0
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	f7f3 fa18 	bl	8000afc <__aeabi_dcmplt>
 800d6cc:	b140      	cbz	r0, 800d6e0 <_dtoa_r+0x168>
 800d6ce:	4638      	mov	r0, r7
 800d6d0:	f7f2 ff38 	bl	8000544 <__aeabi_i2d>
 800d6d4:	4622      	mov	r2, r4
 800d6d6:	462b      	mov	r3, r5
 800d6d8:	f7f3 fa06 	bl	8000ae8 <__aeabi_dcmpeq>
 800d6dc:	b900      	cbnz	r0, 800d6e0 <_dtoa_r+0x168>
 800d6de:	3f01      	subs	r7, #1
 800d6e0:	2f16      	cmp	r7, #22
 800d6e2:	d852      	bhi.n	800d78a <_dtoa_r+0x212>
 800d6e4:	4b5d      	ldr	r3, [pc, #372]	@ (800d85c <_dtoa_r+0x2e4>)
 800d6e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d6f2:	f7f3 fa03 	bl	8000afc <__aeabi_dcmplt>
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	d049      	beq.n	800d78e <_dtoa_r+0x216>
 800d6fa:	3f01      	subs	r7, #1
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800d700:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d702:	1b9b      	subs	r3, r3, r6
 800d704:	1e5a      	subs	r2, r3, #1
 800d706:	bf45      	ittet	mi
 800d708:	f1c3 0301 	rsbmi	r3, r3, #1
 800d70c:	9300      	strmi	r3, [sp, #0]
 800d70e:	2300      	movpl	r3, #0
 800d710:	2300      	movmi	r3, #0
 800d712:	9206      	str	r2, [sp, #24]
 800d714:	bf54      	ite	pl
 800d716:	9300      	strpl	r3, [sp, #0]
 800d718:	9306      	strmi	r3, [sp, #24]
 800d71a:	2f00      	cmp	r7, #0
 800d71c:	db39      	blt.n	800d792 <_dtoa_r+0x21a>
 800d71e:	9b06      	ldr	r3, [sp, #24]
 800d720:	970d      	str	r7, [sp, #52]	@ 0x34
 800d722:	443b      	add	r3, r7
 800d724:	9306      	str	r3, [sp, #24]
 800d726:	2300      	movs	r3, #0
 800d728:	9308      	str	r3, [sp, #32]
 800d72a:	9b07      	ldr	r3, [sp, #28]
 800d72c:	2b09      	cmp	r3, #9
 800d72e:	d863      	bhi.n	800d7f8 <_dtoa_r+0x280>
 800d730:	2b05      	cmp	r3, #5
 800d732:	bfc4      	itt	gt
 800d734:	3b04      	subgt	r3, #4
 800d736:	9307      	strgt	r3, [sp, #28]
 800d738:	9b07      	ldr	r3, [sp, #28]
 800d73a:	f1a3 0302 	sub.w	r3, r3, #2
 800d73e:	bfcc      	ite	gt
 800d740:	2400      	movgt	r4, #0
 800d742:	2401      	movle	r4, #1
 800d744:	2b03      	cmp	r3, #3
 800d746:	d863      	bhi.n	800d810 <_dtoa_r+0x298>
 800d748:	e8df f003 	tbb	[pc, r3]
 800d74c:	2b375452 	.word	0x2b375452
 800d750:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d754:	441e      	add	r6, r3
 800d756:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d75a:	2b20      	cmp	r3, #32
 800d75c:	bfc1      	itttt	gt
 800d75e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d762:	409f      	lslgt	r7, r3
 800d764:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d768:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d76c:	bfd6      	itet	le
 800d76e:	f1c3 0320 	rsble	r3, r3, #32
 800d772:	ea47 0003 	orrgt.w	r0, r7, r3
 800d776:	fa04 f003 	lslle.w	r0, r4, r3
 800d77a:	f7f2 fed3 	bl	8000524 <__aeabi_ui2d>
 800d77e:	2201      	movs	r2, #1
 800d780:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d784:	3e01      	subs	r6, #1
 800d786:	9212      	str	r2, [sp, #72]	@ 0x48
 800d788:	e776      	b.n	800d678 <_dtoa_r+0x100>
 800d78a:	2301      	movs	r3, #1
 800d78c:	e7b7      	b.n	800d6fe <_dtoa_r+0x186>
 800d78e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d790:	e7b6      	b.n	800d700 <_dtoa_r+0x188>
 800d792:	9b00      	ldr	r3, [sp, #0]
 800d794:	1bdb      	subs	r3, r3, r7
 800d796:	9300      	str	r3, [sp, #0]
 800d798:	427b      	negs	r3, r7
 800d79a:	9308      	str	r3, [sp, #32]
 800d79c:	2300      	movs	r3, #0
 800d79e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d7a0:	e7c3      	b.n	800d72a <_dtoa_r+0x1b2>
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d7a8:	eb07 0b03 	add.w	fp, r7, r3
 800d7ac:	f10b 0301 	add.w	r3, fp, #1
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	9303      	str	r3, [sp, #12]
 800d7b4:	bfb8      	it	lt
 800d7b6:	2301      	movlt	r3, #1
 800d7b8:	e006      	b.n	800d7c8 <_dtoa_r+0x250>
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	dd28      	ble.n	800d816 <_dtoa_r+0x29e>
 800d7c4:	469b      	mov	fp, r3
 800d7c6:	9303      	str	r3, [sp, #12]
 800d7c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d7cc:	2100      	movs	r1, #0
 800d7ce:	2204      	movs	r2, #4
 800d7d0:	f102 0514 	add.w	r5, r2, #20
 800d7d4:	429d      	cmp	r5, r3
 800d7d6:	d926      	bls.n	800d826 <_dtoa_r+0x2ae>
 800d7d8:	6041      	str	r1, [r0, #4]
 800d7da:	4648      	mov	r0, r9
 800d7dc:	f001 f8e8 	bl	800e9b0 <_Balloc>
 800d7e0:	4682      	mov	sl, r0
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	d142      	bne.n	800d86c <_dtoa_r+0x2f4>
 800d7e6:	4b1e      	ldr	r3, [pc, #120]	@ (800d860 <_dtoa_r+0x2e8>)
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	f240 11af 	movw	r1, #431	@ 0x1af
 800d7ee:	e6da      	b.n	800d5a6 <_dtoa_r+0x2e>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	e7e3      	b.n	800d7bc <_dtoa_r+0x244>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	e7d5      	b.n	800d7a4 <_dtoa_r+0x22c>
 800d7f8:	2401      	movs	r4, #1
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	9307      	str	r3, [sp, #28]
 800d7fe:	9409      	str	r4, [sp, #36]	@ 0x24
 800d800:	f04f 3bff 	mov.w	fp, #4294967295
 800d804:	2200      	movs	r2, #0
 800d806:	f8cd b00c 	str.w	fp, [sp, #12]
 800d80a:	2312      	movs	r3, #18
 800d80c:	920c      	str	r2, [sp, #48]	@ 0x30
 800d80e:	e7db      	b.n	800d7c8 <_dtoa_r+0x250>
 800d810:	2301      	movs	r3, #1
 800d812:	9309      	str	r3, [sp, #36]	@ 0x24
 800d814:	e7f4      	b.n	800d800 <_dtoa_r+0x288>
 800d816:	f04f 0b01 	mov.w	fp, #1
 800d81a:	f8cd b00c 	str.w	fp, [sp, #12]
 800d81e:	465b      	mov	r3, fp
 800d820:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d824:	e7d0      	b.n	800d7c8 <_dtoa_r+0x250>
 800d826:	3101      	adds	r1, #1
 800d828:	0052      	lsls	r2, r2, #1
 800d82a:	e7d1      	b.n	800d7d0 <_dtoa_r+0x258>
 800d82c:	f3af 8000 	nop.w
 800d830:	636f4361 	.word	0x636f4361
 800d834:	3fd287a7 	.word	0x3fd287a7
 800d838:	8b60c8b3 	.word	0x8b60c8b3
 800d83c:	3fc68a28 	.word	0x3fc68a28
 800d840:	509f79fb 	.word	0x509f79fb
 800d844:	3fd34413 	.word	0x3fd34413
 800d848:	08014c3c 	.word	0x08014c3c
 800d84c:	08014d91 	.word	0x08014d91
 800d850:	7ff00000 	.word	0x7ff00000
 800d854:	08014cbe 	.word	0x08014cbe
 800d858:	3ff80000 	.word	0x3ff80000
 800d85c:	08015050 	.word	0x08015050
 800d860:	08014de9 	.word	0x08014de9
 800d864:	08014d8d 	.word	0x08014d8d
 800d868:	08014cbd 	.word	0x08014cbd
 800d86c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d870:	6018      	str	r0, [r3, #0]
 800d872:	9b03      	ldr	r3, [sp, #12]
 800d874:	2b0e      	cmp	r3, #14
 800d876:	f200 80a1 	bhi.w	800d9bc <_dtoa_r+0x444>
 800d87a:	2c00      	cmp	r4, #0
 800d87c:	f000 809e 	beq.w	800d9bc <_dtoa_r+0x444>
 800d880:	2f00      	cmp	r7, #0
 800d882:	dd33      	ble.n	800d8ec <_dtoa_r+0x374>
 800d884:	4b9c      	ldr	r3, [pc, #624]	@ (800daf8 <_dtoa_r+0x580>)
 800d886:	f007 020f 	and.w	r2, r7, #15
 800d88a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d88e:	ed93 7b00 	vldr	d7, [r3]
 800d892:	05f8      	lsls	r0, r7, #23
 800d894:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d898:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d89c:	d516      	bpl.n	800d8cc <_dtoa_r+0x354>
 800d89e:	4b97      	ldr	r3, [pc, #604]	@ (800dafc <_dtoa_r+0x584>)
 800d8a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d8a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d8a8:	f7f2 ffe0 	bl	800086c <__aeabi_ddiv>
 800d8ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8b0:	f004 040f 	and.w	r4, r4, #15
 800d8b4:	2603      	movs	r6, #3
 800d8b6:	4d91      	ldr	r5, [pc, #580]	@ (800dafc <_dtoa_r+0x584>)
 800d8b8:	b954      	cbnz	r4, 800d8d0 <_dtoa_r+0x358>
 800d8ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d8be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8c2:	f7f2 ffd3 	bl	800086c <__aeabi_ddiv>
 800d8c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8ca:	e028      	b.n	800d91e <_dtoa_r+0x3a6>
 800d8cc:	2602      	movs	r6, #2
 800d8ce:	e7f2      	b.n	800d8b6 <_dtoa_r+0x33e>
 800d8d0:	07e1      	lsls	r1, r4, #31
 800d8d2:	d508      	bpl.n	800d8e6 <_dtoa_r+0x36e>
 800d8d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d8d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d8dc:	f7f2 fe9c 	bl	8000618 <__aeabi_dmul>
 800d8e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d8e4:	3601      	adds	r6, #1
 800d8e6:	1064      	asrs	r4, r4, #1
 800d8e8:	3508      	adds	r5, #8
 800d8ea:	e7e5      	b.n	800d8b8 <_dtoa_r+0x340>
 800d8ec:	f000 80af 	beq.w	800da4e <_dtoa_r+0x4d6>
 800d8f0:	427c      	negs	r4, r7
 800d8f2:	4b81      	ldr	r3, [pc, #516]	@ (800daf8 <_dtoa_r+0x580>)
 800d8f4:	4d81      	ldr	r5, [pc, #516]	@ (800dafc <_dtoa_r+0x584>)
 800d8f6:	f004 020f 	and.w	r2, r4, #15
 800d8fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d902:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d906:	f7f2 fe87 	bl	8000618 <__aeabi_dmul>
 800d90a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d90e:	1124      	asrs	r4, r4, #4
 800d910:	2300      	movs	r3, #0
 800d912:	2602      	movs	r6, #2
 800d914:	2c00      	cmp	r4, #0
 800d916:	f040 808f 	bne.w	800da38 <_dtoa_r+0x4c0>
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1d3      	bne.n	800d8c6 <_dtoa_r+0x34e>
 800d91e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d920:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d924:	2b00      	cmp	r3, #0
 800d926:	f000 8094 	beq.w	800da52 <_dtoa_r+0x4da>
 800d92a:	4b75      	ldr	r3, [pc, #468]	@ (800db00 <_dtoa_r+0x588>)
 800d92c:	2200      	movs	r2, #0
 800d92e:	4620      	mov	r0, r4
 800d930:	4629      	mov	r1, r5
 800d932:	f7f3 f8e3 	bl	8000afc <__aeabi_dcmplt>
 800d936:	2800      	cmp	r0, #0
 800d938:	f000 808b 	beq.w	800da52 <_dtoa_r+0x4da>
 800d93c:	9b03      	ldr	r3, [sp, #12]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f000 8087 	beq.w	800da52 <_dtoa_r+0x4da>
 800d944:	f1bb 0f00 	cmp.w	fp, #0
 800d948:	dd34      	ble.n	800d9b4 <_dtoa_r+0x43c>
 800d94a:	4620      	mov	r0, r4
 800d94c:	4b6d      	ldr	r3, [pc, #436]	@ (800db04 <_dtoa_r+0x58c>)
 800d94e:	2200      	movs	r2, #0
 800d950:	4629      	mov	r1, r5
 800d952:	f7f2 fe61 	bl	8000618 <__aeabi_dmul>
 800d956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d95a:	f107 38ff 	add.w	r8, r7, #4294967295
 800d95e:	3601      	adds	r6, #1
 800d960:	465c      	mov	r4, fp
 800d962:	4630      	mov	r0, r6
 800d964:	f7f2 fdee 	bl	8000544 <__aeabi_i2d>
 800d968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d96c:	f7f2 fe54 	bl	8000618 <__aeabi_dmul>
 800d970:	4b65      	ldr	r3, [pc, #404]	@ (800db08 <_dtoa_r+0x590>)
 800d972:	2200      	movs	r2, #0
 800d974:	f7f2 fc9a 	bl	80002ac <__adddf3>
 800d978:	4605      	mov	r5, r0
 800d97a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d97e:	2c00      	cmp	r4, #0
 800d980:	d16a      	bne.n	800da58 <_dtoa_r+0x4e0>
 800d982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d986:	4b61      	ldr	r3, [pc, #388]	@ (800db0c <_dtoa_r+0x594>)
 800d988:	2200      	movs	r2, #0
 800d98a:	f7f2 fc8d 	bl	80002a8 <__aeabi_dsub>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d996:	462a      	mov	r2, r5
 800d998:	4633      	mov	r3, r6
 800d99a:	f7f3 f8cd 	bl	8000b38 <__aeabi_dcmpgt>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	f040 8298 	bne.w	800ded4 <_dtoa_r+0x95c>
 800d9a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d9a8:	462a      	mov	r2, r5
 800d9aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d9ae:	f7f3 f8a5 	bl	8000afc <__aeabi_dcmplt>
 800d9b2:	bb38      	cbnz	r0, 800da04 <_dtoa_r+0x48c>
 800d9b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d9b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d9bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	f2c0 8157 	blt.w	800dc72 <_dtoa_r+0x6fa>
 800d9c4:	2f0e      	cmp	r7, #14
 800d9c6:	f300 8154 	bgt.w	800dc72 <_dtoa_r+0x6fa>
 800d9ca:	4b4b      	ldr	r3, [pc, #300]	@ (800daf8 <_dtoa_r+0x580>)
 800d9cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d9d0:	ed93 7b00 	vldr	d7, [r3]
 800d9d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	ed8d 7b00 	vstr	d7, [sp]
 800d9dc:	f280 80e5 	bge.w	800dbaa <_dtoa_r+0x632>
 800d9e0:	9b03      	ldr	r3, [sp, #12]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	f300 80e1 	bgt.w	800dbaa <_dtoa_r+0x632>
 800d9e8:	d10c      	bne.n	800da04 <_dtoa_r+0x48c>
 800d9ea:	4b48      	ldr	r3, [pc, #288]	@ (800db0c <_dtoa_r+0x594>)
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	ec51 0b17 	vmov	r0, r1, d7
 800d9f2:	f7f2 fe11 	bl	8000618 <__aeabi_dmul>
 800d9f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9fa:	f7f3 f893 	bl	8000b24 <__aeabi_dcmpge>
 800d9fe:	2800      	cmp	r0, #0
 800da00:	f000 8266 	beq.w	800ded0 <_dtoa_r+0x958>
 800da04:	2400      	movs	r4, #0
 800da06:	4625      	mov	r5, r4
 800da08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da0a:	4656      	mov	r6, sl
 800da0c:	ea6f 0803 	mvn.w	r8, r3
 800da10:	2700      	movs	r7, #0
 800da12:	4621      	mov	r1, r4
 800da14:	4648      	mov	r0, r9
 800da16:	f001 f80b 	bl	800ea30 <_Bfree>
 800da1a:	2d00      	cmp	r5, #0
 800da1c:	f000 80bd 	beq.w	800db9a <_dtoa_r+0x622>
 800da20:	b12f      	cbz	r7, 800da2e <_dtoa_r+0x4b6>
 800da22:	42af      	cmp	r7, r5
 800da24:	d003      	beq.n	800da2e <_dtoa_r+0x4b6>
 800da26:	4639      	mov	r1, r7
 800da28:	4648      	mov	r0, r9
 800da2a:	f001 f801 	bl	800ea30 <_Bfree>
 800da2e:	4629      	mov	r1, r5
 800da30:	4648      	mov	r0, r9
 800da32:	f000 fffd 	bl	800ea30 <_Bfree>
 800da36:	e0b0      	b.n	800db9a <_dtoa_r+0x622>
 800da38:	07e2      	lsls	r2, r4, #31
 800da3a:	d505      	bpl.n	800da48 <_dtoa_r+0x4d0>
 800da3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da40:	f7f2 fdea 	bl	8000618 <__aeabi_dmul>
 800da44:	3601      	adds	r6, #1
 800da46:	2301      	movs	r3, #1
 800da48:	1064      	asrs	r4, r4, #1
 800da4a:	3508      	adds	r5, #8
 800da4c:	e762      	b.n	800d914 <_dtoa_r+0x39c>
 800da4e:	2602      	movs	r6, #2
 800da50:	e765      	b.n	800d91e <_dtoa_r+0x3a6>
 800da52:	9c03      	ldr	r4, [sp, #12]
 800da54:	46b8      	mov	r8, r7
 800da56:	e784      	b.n	800d962 <_dtoa_r+0x3ea>
 800da58:	4b27      	ldr	r3, [pc, #156]	@ (800daf8 <_dtoa_r+0x580>)
 800da5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800da64:	4454      	add	r4, sl
 800da66:	2900      	cmp	r1, #0
 800da68:	d054      	beq.n	800db14 <_dtoa_r+0x59c>
 800da6a:	4929      	ldr	r1, [pc, #164]	@ (800db10 <_dtoa_r+0x598>)
 800da6c:	2000      	movs	r0, #0
 800da6e:	f7f2 fefd 	bl	800086c <__aeabi_ddiv>
 800da72:	4633      	mov	r3, r6
 800da74:	462a      	mov	r2, r5
 800da76:	f7f2 fc17 	bl	80002a8 <__aeabi_dsub>
 800da7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800da7e:	4656      	mov	r6, sl
 800da80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da84:	f7f3 f878 	bl	8000b78 <__aeabi_d2iz>
 800da88:	4605      	mov	r5, r0
 800da8a:	f7f2 fd5b 	bl	8000544 <__aeabi_i2d>
 800da8e:	4602      	mov	r2, r0
 800da90:	460b      	mov	r3, r1
 800da92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da96:	f7f2 fc07 	bl	80002a8 <__aeabi_dsub>
 800da9a:	3530      	adds	r5, #48	@ 0x30
 800da9c:	4602      	mov	r2, r0
 800da9e:	460b      	mov	r3, r1
 800daa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800daa4:	f806 5b01 	strb.w	r5, [r6], #1
 800daa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800daac:	f7f3 f826 	bl	8000afc <__aeabi_dcmplt>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d172      	bne.n	800db9a <_dtoa_r+0x622>
 800dab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dab8:	4911      	ldr	r1, [pc, #68]	@ (800db00 <_dtoa_r+0x588>)
 800daba:	2000      	movs	r0, #0
 800dabc:	f7f2 fbf4 	bl	80002a8 <__aeabi_dsub>
 800dac0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dac4:	f7f3 f81a 	bl	8000afc <__aeabi_dcmplt>
 800dac8:	2800      	cmp	r0, #0
 800daca:	f040 80b4 	bne.w	800dc36 <_dtoa_r+0x6be>
 800dace:	42a6      	cmp	r6, r4
 800dad0:	f43f af70 	beq.w	800d9b4 <_dtoa_r+0x43c>
 800dad4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dad8:	4b0a      	ldr	r3, [pc, #40]	@ (800db04 <_dtoa_r+0x58c>)
 800dada:	2200      	movs	r2, #0
 800dadc:	f7f2 fd9c 	bl	8000618 <__aeabi_dmul>
 800dae0:	4b08      	ldr	r3, [pc, #32]	@ (800db04 <_dtoa_r+0x58c>)
 800dae2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dae6:	2200      	movs	r2, #0
 800dae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800daec:	f7f2 fd94 	bl	8000618 <__aeabi_dmul>
 800daf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800daf4:	e7c4      	b.n	800da80 <_dtoa_r+0x508>
 800daf6:	bf00      	nop
 800daf8:	08015050 	.word	0x08015050
 800dafc:	08015028 	.word	0x08015028
 800db00:	3ff00000 	.word	0x3ff00000
 800db04:	40240000 	.word	0x40240000
 800db08:	401c0000 	.word	0x401c0000
 800db0c:	40140000 	.word	0x40140000
 800db10:	3fe00000 	.word	0x3fe00000
 800db14:	4631      	mov	r1, r6
 800db16:	4628      	mov	r0, r5
 800db18:	f7f2 fd7e 	bl	8000618 <__aeabi_dmul>
 800db1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800db20:	9413      	str	r4, [sp, #76]	@ 0x4c
 800db22:	4656      	mov	r6, sl
 800db24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db28:	f7f3 f826 	bl	8000b78 <__aeabi_d2iz>
 800db2c:	4605      	mov	r5, r0
 800db2e:	f7f2 fd09 	bl	8000544 <__aeabi_i2d>
 800db32:	4602      	mov	r2, r0
 800db34:	460b      	mov	r3, r1
 800db36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db3a:	f7f2 fbb5 	bl	80002a8 <__aeabi_dsub>
 800db3e:	3530      	adds	r5, #48	@ 0x30
 800db40:	f806 5b01 	strb.w	r5, [r6], #1
 800db44:	4602      	mov	r2, r0
 800db46:	460b      	mov	r3, r1
 800db48:	42a6      	cmp	r6, r4
 800db4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800db4e:	f04f 0200 	mov.w	r2, #0
 800db52:	d124      	bne.n	800db9e <_dtoa_r+0x626>
 800db54:	4baf      	ldr	r3, [pc, #700]	@ (800de14 <_dtoa_r+0x89c>)
 800db56:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800db5a:	f7f2 fba7 	bl	80002ac <__adddf3>
 800db5e:	4602      	mov	r2, r0
 800db60:	460b      	mov	r3, r1
 800db62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db66:	f7f2 ffe7 	bl	8000b38 <__aeabi_dcmpgt>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d163      	bne.n	800dc36 <_dtoa_r+0x6be>
 800db6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800db72:	49a8      	ldr	r1, [pc, #672]	@ (800de14 <_dtoa_r+0x89c>)
 800db74:	2000      	movs	r0, #0
 800db76:	f7f2 fb97 	bl	80002a8 <__aeabi_dsub>
 800db7a:	4602      	mov	r2, r0
 800db7c:	460b      	mov	r3, r1
 800db7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db82:	f7f2 ffbb 	bl	8000afc <__aeabi_dcmplt>
 800db86:	2800      	cmp	r0, #0
 800db88:	f43f af14 	beq.w	800d9b4 <_dtoa_r+0x43c>
 800db8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800db8e:	1e73      	subs	r3, r6, #1
 800db90:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db96:	2b30      	cmp	r3, #48	@ 0x30
 800db98:	d0f8      	beq.n	800db8c <_dtoa_r+0x614>
 800db9a:	4647      	mov	r7, r8
 800db9c:	e03b      	b.n	800dc16 <_dtoa_r+0x69e>
 800db9e:	4b9e      	ldr	r3, [pc, #632]	@ (800de18 <_dtoa_r+0x8a0>)
 800dba0:	f7f2 fd3a 	bl	8000618 <__aeabi_dmul>
 800dba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dba8:	e7bc      	b.n	800db24 <_dtoa_r+0x5ac>
 800dbaa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dbae:	4656      	mov	r6, sl
 800dbb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	4629      	mov	r1, r5
 800dbb8:	f7f2 fe58 	bl	800086c <__aeabi_ddiv>
 800dbbc:	f7f2 ffdc 	bl	8000b78 <__aeabi_d2iz>
 800dbc0:	4680      	mov	r8, r0
 800dbc2:	f7f2 fcbf 	bl	8000544 <__aeabi_i2d>
 800dbc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbca:	f7f2 fd25 	bl	8000618 <__aeabi_dmul>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	4629      	mov	r1, r5
 800dbd6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dbda:	f7f2 fb65 	bl	80002a8 <__aeabi_dsub>
 800dbde:	f806 4b01 	strb.w	r4, [r6], #1
 800dbe2:	9d03      	ldr	r5, [sp, #12]
 800dbe4:	eba6 040a 	sub.w	r4, r6, sl
 800dbe8:	42a5      	cmp	r5, r4
 800dbea:	4602      	mov	r2, r0
 800dbec:	460b      	mov	r3, r1
 800dbee:	d133      	bne.n	800dc58 <_dtoa_r+0x6e0>
 800dbf0:	f7f2 fb5c 	bl	80002ac <__adddf3>
 800dbf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbf8:	4604      	mov	r4, r0
 800dbfa:	460d      	mov	r5, r1
 800dbfc:	f7f2 ff9c 	bl	8000b38 <__aeabi_dcmpgt>
 800dc00:	b9c0      	cbnz	r0, 800dc34 <_dtoa_r+0x6bc>
 800dc02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc06:	4620      	mov	r0, r4
 800dc08:	4629      	mov	r1, r5
 800dc0a:	f7f2 ff6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc0e:	b110      	cbz	r0, 800dc16 <_dtoa_r+0x69e>
 800dc10:	f018 0f01 	tst.w	r8, #1
 800dc14:	d10e      	bne.n	800dc34 <_dtoa_r+0x6bc>
 800dc16:	9902      	ldr	r1, [sp, #8]
 800dc18:	4648      	mov	r0, r9
 800dc1a:	f000 ff09 	bl	800ea30 <_Bfree>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	7033      	strb	r3, [r6, #0]
 800dc22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc24:	3701      	adds	r7, #1
 800dc26:	601f      	str	r7, [r3, #0]
 800dc28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f000 824b 	beq.w	800e0c6 <_dtoa_r+0xb4e>
 800dc30:	601e      	str	r6, [r3, #0]
 800dc32:	e248      	b.n	800e0c6 <_dtoa_r+0xb4e>
 800dc34:	46b8      	mov	r8, r7
 800dc36:	4633      	mov	r3, r6
 800dc38:	461e      	mov	r6, r3
 800dc3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc3e:	2a39      	cmp	r2, #57	@ 0x39
 800dc40:	d106      	bne.n	800dc50 <_dtoa_r+0x6d8>
 800dc42:	459a      	cmp	sl, r3
 800dc44:	d1f8      	bne.n	800dc38 <_dtoa_r+0x6c0>
 800dc46:	2230      	movs	r2, #48	@ 0x30
 800dc48:	f108 0801 	add.w	r8, r8, #1
 800dc4c:	f88a 2000 	strb.w	r2, [sl]
 800dc50:	781a      	ldrb	r2, [r3, #0]
 800dc52:	3201      	adds	r2, #1
 800dc54:	701a      	strb	r2, [r3, #0]
 800dc56:	e7a0      	b.n	800db9a <_dtoa_r+0x622>
 800dc58:	4b6f      	ldr	r3, [pc, #444]	@ (800de18 <_dtoa_r+0x8a0>)
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f7f2 fcdc 	bl	8000618 <__aeabi_dmul>
 800dc60:	2200      	movs	r2, #0
 800dc62:	2300      	movs	r3, #0
 800dc64:	4604      	mov	r4, r0
 800dc66:	460d      	mov	r5, r1
 800dc68:	f7f2 ff3e 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d09f      	beq.n	800dbb0 <_dtoa_r+0x638>
 800dc70:	e7d1      	b.n	800dc16 <_dtoa_r+0x69e>
 800dc72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc74:	2a00      	cmp	r2, #0
 800dc76:	f000 80ea 	beq.w	800de4e <_dtoa_r+0x8d6>
 800dc7a:	9a07      	ldr	r2, [sp, #28]
 800dc7c:	2a01      	cmp	r2, #1
 800dc7e:	f300 80cd 	bgt.w	800de1c <_dtoa_r+0x8a4>
 800dc82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dc84:	2a00      	cmp	r2, #0
 800dc86:	f000 80c1 	beq.w	800de0c <_dtoa_r+0x894>
 800dc8a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dc8e:	9c08      	ldr	r4, [sp, #32]
 800dc90:	9e00      	ldr	r6, [sp, #0]
 800dc92:	9a00      	ldr	r2, [sp, #0]
 800dc94:	441a      	add	r2, r3
 800dc96:	9200      	str	r2, [sp, #0]
 800dc98:	9a06      	ldr	r2, [sp, #24]
 800dc9a:	2101      	movs	r1, #1
 800dc9c:	441a      	add	r2, r3
 800dc9e:	4648      	mov	r0, r9
 800dca0:	9206      	str	r2, [sp, #24]
 800dca2:	f000 ffc3 	bl	800ec2c <__i2b>
 800dca6:	4605      	mov	r5, r0
 800dca8:	b166      	cbz	r6, 800dcc4 <_dtoa_r+0x74c>
 800dcaa:	9b06      	ldr	r3, [sp, #24]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	dd09      	ble.n	800dcc4 <_dtoa_r+0x74c>
 800dcb0:	42b3      	cmp	r3, r6
 800dcb2:	9a00      	ldr	r2, [sp, #0]
 800dcb4:	bfa8      	it	ge
 800dcb6:	4633      	movge	r3, r6
 800dcb8:	1ad2      	subs	r2, r2, r3
 800dcba:	9200      	str	r2, [sp, #0]
 800dcbc:	9a06      	ldr	r2, [sp, #24]
 800dcbe:	1af6      	subs	r6, r6, r3
 800dcc0:	1ad3      	subs	r3, r2, r3
 800dcc2:	9306      	str	r3, [sp, #24]
 800dcc4:	9b08      	ldr	r3, [sp, #32]
 800dcc6:	b30b      	cbz	r3, 800dd0c <_dtoa_r+0x794>
 800dcc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	f000 80c6 	beq.w	800de5c <_dtoa_r+0x8e4>
 800dcd0:	2c00      	cmp	r4, #0
 800dcd2:	f000 80c0 	beq.w	800de56 <_dtoa_r+0x8de>
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	4622      	mov	r2, r4
 800dcda:	4648      	mov	r0, r9
 800dcdc:	f001 f85e 	bl	800ed9c <__pow5mult>
 800dce0:	9a02      	ldr	r2, [sp, #8]
 800dce2:	4601      	mov	r1, r0
 800dce4:	4605      	mov	r5, r0
 800dce6:	4648      	mov	r0, r9
 800dce8:	f000 ffb6 	bl	800ec58 <__multiply>
 800dcec:	9902      	ldr	r1, [sp, #8]
 800dcee:	4680      	mov	r8, r0
 800dcf0:	4648      	mov	r0, r9
 800dcf2:	f000 fe9d 	bl	800ea30 <_Bfree>
 800dcf6:	9b08      	ldr	r3, [sp, #32]
 800dcf8:	1b1b      	subs	r3, r3, r4
 800dcfa:	9308      	str	r3, [sp, #32]
 800dcfc:	f000 80b1 	beq.w	800de62 <_dtoa_r+0x8ea>
 800dd00:	9a08      	ldr	r2, [sp, #32]
 800dd02:	4641      	mov	r1, r8
 800dd04:	4648      	mov	r0, r9
 800dd06:	f001 f849 	bl	800ed9c <__pow5mult>
 800dd0a:	9002      	str	r0, [sp, #8]
 800dd0c:	2101      	movs	r1, #1
 800dd0e:	4648      	mov	r0, r9
 800dd10:	f000 ff8c 	bl	800ec2c <__i2b>
 800dd14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd16:	4604      	mov	r4, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f000 81d8 	beq.w	800e0ce <_dtoa_r+0xb56>
 800dd1e:	461a      	mov	r2, r3
 800dd20:	4601      	mov	r1, r0
 800dd22:	4648      	mov	r0, r9
 800dd24:	f001 f83a 	bl	800ed9c <__pow5mult>
 800dd28:	9b07      	ldr	r3, [sp, #28]
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	f300 809f 	bgt.w	800de70 <_dtoa_r+0x8f8>
 800dd32:	9b04      	ldr	r3, [sp, #16]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	f040 8097 	bne.w	800de68 <_dtoa_r+0x8f0>
 800dd3a:	9b05      	ldr	r3, [sp, #20]
 800dd3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	f040 8093 	bne.w	800de6c <_dtoa_r+0x8f4>
 800dd46:	9b05      	ldr	r3, [sp, #20]
 800dd48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dd4c:	0d1b      	lsrs	r3, r3, #20
 800dd4e:	051b      	lsls	r3, r3, #20
 800dd50:	b133      	cbz	r3, 800dd60 <_dtoa_r+0x7e8>
 800dd52:	9b00      	ldr	r3, [sp, #0]
 800dd54:	3301      	adds	r3, #1
 800dd56:	9300      	str	r3, [sp, #0]
 800dd58:	9b06      	ldr	r3, [sp, #24]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	9306      	str	r3, [sp, #24]
 800dd5e:	2301      	movs	r3, #1
 800dd60:	9308      	str	r3, [sp, #32]
 800dd62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f000 81b8 	beq.w	800e0da <_dtoa_r+0xb62>
 800dd6a:	6923      	ldr	r3, [r4, #16]
 800dd6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd70:	6918      	ldr	r0, [r3, #16]
 800dd72:	f000 ff0f 	bl	800eb94 <__hi0bits>
 800dd76:	f1c0 0020 	rsb	r0, r0, #32
 800dd7a:	9b06      	ldr	r3, [sp, #24]
 800dd7c:	4418      	add	r0, r3
 800dd7e:	f010 001f 	ands.w	r0, r0, #31
 800dd82:	f000 8082 	beq.w	800de8a <_dtoa_r+0x912>
 800dd86:	f1c0 0320 	rsb	r3, r0, #32
 800dd8a:	2b04      	cmp	r3, #4
 800dd8c:	dd73      	ble.n	800de76 <_dtoa_r+0x8fe>
 800dd8e:	9b00      	ldr	r3, [sp, #0]
 800dd90:	f1c0 001c 	rsb	r0, r0, #28
 800dd94:	4403      	add	r3, r0
 800dd96:	9300      	str	r3, [sp, #0]
 800dd98:	9b06      	ldr	r3, [sp, #24]
 800dd9a:	4403      	add	r3, r0
 800dd9c:	4406      	add	r6, r0
 800dd9e:	9306      	str	r3, [sp, #24]
 800dda0:	9b00      	ldr	r3, [sp, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	dd05      	ble.n	800ddb2 <_dtoa_r+0x83a>
 800dda6:	9902      	ldr	r1, [sp, #8]
 800dda8:	461a      	mov	r2, r3
 800ddaa:	4648      	mov	r0, r9
 800ddac:	f001 f850 	bl	800ee50 <__lshift>
 800ddb0:	9002      	str	r0, [sp, #8]
 800ddb2:	9b06      	ldr	r3, [sp, #24]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	dd05      	ble.n	800ddc4 <_dtoa_r+0x84c>
 800ddb8:	4621      	mov	r1, r4
 800ddba:	461a      	mov	r2, r3
 800ddbc:	4648      	mov	r0, r9
 800ddbe:	f001 f847 	bl	800ee50 <__lshift>
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d061      	beq.n	800de8e <_dtoa_r+0x916>
 800ddca:	9802      	ldr	r0, [sp, #8]
 800ddcc:	4621      	mov	r1, r4
 800ddce:	f001 f8ab 	bl	800ef28 <__mcmp>
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	da5b      	bge.n	800de8e <_dtoa_r+0x916>
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	9902      	ldr	r1, [sp, #8]
 800ddda:	220a      	movs	r2, #10
 800dddc:	4648      	mov	r0, r9
 800ddde:	f000 fe49 	bl	800ea74 <__multadd>
 800dde2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde4:	9002      	str	r0, [sp, #8]
 800dde6:	f107 38ff 	add.w	r8, r7, #4294967295
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	f000 8177 	beq.w	800e0de <_dtoa_r+0xb66>
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	220a      	movs	r2, #10
 800ddf6:	4648      	mov	r0, r9
 800ddf8:	f000 fe3c 	bl	800ea74 <__multadd>
 800ddfc:	f1bb 0f00 	cmp.w	fp, #0
 800de00:	4605      	mov	r5, r0
 800de02:	dc6f      	bgt.n	800dee4 <_dtoa_r+0x96c>
 800de04:	9b07      	ldr	r3, [sp, #28]
 800de06:	2b02      	cmp	r3, #2
 800de08:	dc49      	bgt.n	800de9e <_dtoa_r+0x926>
 800de0a:	e06b      	b.n	800dee4 <_dtoa_r+0x96c>
 800de0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800de0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800de12:	e73c      	b.n	800dc8e <_dtoa_r+0x716>
 800de14:	3fe00000 	.word	0x3fe00000
 800de18:	40240000 	.word	0x40240000
 800de1c:	9b03      	ldr	r3, [sp, #12]
 800de1e:	1e5c      	subs	r4, r3, #1
 800de20:	9b08      	ldr	r3, [sp, #32]
 800de22:	42a3      	cmp	r3, r4
 800de24:	db09      	blt.n	800de3a <_dtoa_r+0x8c2>
 800de26:	1b1c      	subs	r4, r3, r4
 800de28:	9b03      	ldr	r3, [sp, #12]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f6bf af30 	bge.w	800dc90 <_dtoa_r+0x718>
 800de30:	9b00      	ldr	r3, [sp, #0]
 800de32:	9a03      	ldr	r2, [sp, #12]
 800de34:	1a9e      	subs	r6, r3, r2
 800de36:	2300      	movs	r3, #0
 800de38:	e72b      	b.n	800dc92 <_dtoa_r+0x71a>
 800de3a:	9b08      	ldr	r3, [sp, #32]
 800de3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de3e:	9408      	str	r4, [sp, #32]
 800de40:	1ae3      	subs	r3, r4, r3
 800de42:	441a      	add	r2, r3
 800de44:	9e00      	ldr	r6, [sp, #0]
 800de46:	9b03      	ldr	r3, [sp, #12]
 800de48:	920d      	str	r2, [sp, #52]	@ 0x34
 800de4a:	2400      	movs	r4, #0
 800de4c:	e721      	b.n	800dc92 <_dtoa_r+0x71a>
 800de4e:	9c08      	ldr	r4, [sp, #32]
 800de50:	9e00      	ldr	r6, [sp, #0]
 800de52:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800de54:	e728      	b.n	800dca8 <_dtoa_r+0x730>
 800de56:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800de5a:	e751      	b.n	800dd00 <_dtoa_r+0x788>
 800de5c:	9a08      	ldr	r2, [sp, #32]
 800de5e:	9902      	ldr	r1, [sp, #8]
 800de60:	e750      	b.n	800dd04 <_dtoa_r+0x78c>
 800de62:	f8cd 8008 	str.w	r8, [sp, #8]
 800de66:	e751      	b.n	800dd0c <_dtoa_r+0x794>
 800de68:	2300      	movs	r3, #0
 800de6a:	e779      	b.n	800dd60 <_dtoa_r+0x7e8>
 800de6c:	9b04      	ldr	r3, [sp, #16]
 800de6e:	e777      	b.n	800dd60 <_dtoa_r+0x7e8>
 800de70:	2300      	movs	r3, #0
 800de72:	9308      	str	r3, [sp, #32]
 800de74:	e779      	b.n	800dd6a <_dtoa_r+0x7f2>
 800de76:	d093      	beq.n	800dda0 <_dtoa_r+0x828>
 800de78:	9a00      	ldr	r2, [sp, #0]
 800de7a:	331c      	adds	r3, #28
 800de7c:	441a      	add	r2, r3
 800de7e:	9200      	str	r2, [sp, #0]
 800de80:	9a06      	ldr	r2, [sp, #24]
 800de82:	441a      	add	r2, r3
 800de84:	441e      	add	r6, r3
 800de86:	9206      	str	r2, [sp, #24]
 800de88:	e78a      	b.n	800dda0 <_dtoa_r+0x828>
 800de8a:	4603      	mov	r3, r0
 800de8c:	e7f4      	b.n	800de78 <_dtoa_r+0x900>
 800de8e:	9b03      	ldr	r3, [sp, #12]
 800de90:	2b00      	cmp	r3, #0
 800de92:	46b8      	mov	r8, r7
 800de94:	dc20      	bgt.n	800ded8 <_dtoa_r+0x960>
 800de96:	469b      	mov	fp, r3
 800de98:	9b07      	ldr	r3, [sp, #28]
 800de9a:	2b02      	cmp	r3, #2
 800de9c:	dd1e      	ble.n	800dedc <_dtoa_r+0x964>
 800de9e:	f1bb 0f00 	cmp.w	fp, #0
 800dea2:	f47f adb1 	bne.w	800da08 <_dtoa_r+0x490>
 800dea6:	4621      	mov	r1, r4
 800dea8:	465b      	mov	r3, fp
 800deaa:	2205      	movs	r2, #5
 800deac:	4648      	mov	r0, r9
 800deae:	f000 fde1 	bl	800ea74 <__multadd>
 800deb2:	4601      	mov	r1, r0
 800deb4:	4604      	mov	r4, r0
 800deb6:	9802      	ldr	r0, [sp, #8]
 800deb8:	f001 f836 	bl	800ef28 <__mcmp>
 800debc:	2800      	cmp	r0, #0
 800debe:	f77f ada3 	ble.w	800da08 <_dtoa_r+0x490>
 800dec2:	4656      	mov	r6, sl
 800dec4:	2331      	movs	r3, #49	@ 0x31
 800dec6:	f806 3b01 	strb.w	r3, [r6], #1
 800deca:	f108 0801 	add.w	r8, r8, #1
 800dece:	e59f      	b.n	800da10 <_dtoa_r+0x498>
 800ded0:	9c03      	ldr	r4, [sp, #12]
 800ded2:	46b8      	mov	r8, r7
 800ded4:	4625      	mov	r5, r4
 800ded6:	e7f4      	b.n	800dec2 <_dtoa_r+0x94a>
 800ded8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800dedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dede:	2b00      	cmp	r3, #0
 800dee0:	f000 8101 	beq.w	800e0e6 <_dtoa_r+0xb6e>
 800dee4:	2e00      	cmp	r6, #0
 800dee6:	dd05      	ble.n	800def4 <_dtoa_r+0x97c>
 800dee8:	4629      	mov	r1, r5
 800deea:	4632      	mov	r2, r6
 800deec:	4648      	mov	r0, r9
 800deee:	f000 ffaf 	bl	800ee50 <__lshift>
 800def2:	4605      	mov	r5, r0
 800def4:	9b08      	ldr	r3, [sp, #32]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d05c      	beq.n	800dfb4 <_dtoa_r+0xa3c>
 800defa:	6869      	ldr	r1, [r5, #4]
 800defc:	4648      	mov	r0, r9
 800defe:	f000 fd57 	bl	800e9b0 <_Balloc>
 800df02:	4606      	mov	r6, r0
 800df04:	b928      	cbnz	r0, 800df12 <_dtoa_r+0x99a>
 800df06:	4b82      	ldr	r3, [pc, #520]	@ (800e110 <_dtoa_r+0xb98>)
 800df08:	4602      	mov	r2, r0
 800df0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800df0e:	f7ff bb4a 	b.w	800d5a6 <_dtoa_r+0x2e>
 800df12:	692a      	ldr	r2, [r5, #16]
 800df14:	3202      	adds	r2, #2
 800df16:	0092      	lsls	r2, r2, #2
 800df18:	f105 010c 	add.w	r1, r5, #12
 800df1c:	300c      	adds	r0, #12
 800df1e:	f7ff fa68 	bl	800d3f2 <memcpy>
 800df22:	2201      	movs	r2, #1
 800df24:	4631      	mov	r1, r6
 800df26:	4648      	mov	r0, r9
 800df28:	f000 ff92 	bl	800ee50 <__lshift>
 800df2c:	f10a 0301 	add.w	r3, sl, #1
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	eb0a 030b 	add.w	r3, sl, fp
 800df36:	9308      	str	r3, [sp, #32]
 800df38:	9b04      	ldr	r3, [sp, #16]
 800df3a:	f003 0301 	and.w	r3, r3, #1
 800df3e:	462f      	mov	r7, r5
 800df40:	9306      	str	r3, [sp, #24]
 800df42:	4605      	mov	r5, r0
 800df44:	9b00      	ldr	r3, [sp, #0]
 800df46:	9802      	ldr	r0, [sp, #8]
 800df48:	4621      	mov	r1, r4
 800df4a:	f103 3bff 	add.w	fp, r3, #4294967295
 800df4e:	f7ff fa8b 	bl	800d468 <quorem>
 800df52:	4603      	mov	r3, r0
 800df54:	3330      	adds	r3, #48	@ 0x30
 800df56:	9003      	str	r0, [sp, #12]
 800df58:	4639      	mov	r1, r7
 800df5a:	9802      	ldr	r0, [sp, #8]
 800df5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df5e:	f000 ffe3 	bl	800ef28 <__mcmp>
 800df62:	462a      	mov	r2, r5
 800df64:	9004      	str	r0, [sp, #16]
 800df66:	4621      	mov	r1, r4
 800df68:	4648      	mov	r0, r9
 800df6a:	f000 fff9 	bl	800ef60 <__mdiff>
 800df6e:	68c2      	ldr	r2, [r0, #12]
 800df70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df72:	4606      	mov	r6, r0
 800df74:	bb02      	cbnz	r2, 800dfb8 <_dtoa_r+0xa40>
 800df76:	4601      	mov	r1, r0
 800df78:	9802      	ldr	r0, [sp, #8]
 800df7a:	f000 ffd5 	bl	800ef28 <__mcmp>
 800df7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df80:	4602      	mov	r2, r0
 800df82:	4631      	mov	r1, r6
 800df84:	4648      	mov	r0, r9
 800df86:	920c      	str	r2, [sp, #48]	@ 0x30
 800df88:	9309      	str	r3, [sp, #36]	@ 0x24
 800df8a:	f000 fd51 	bl	800ea30 <_Bfree>
 800df8e:	9b07      	ldr	r3, [sp, #28]
 800df90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df92:	9e00      	ldr	r6, [sp, #0]
 800df94:	ea42 0103 	orr.w	r1, r2, r3
 800df98:	9b06      	ldr	r3, [sp, #24]
 800df9a:	4319      	orrs	r1, r3
 800df9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df9e:	d10d      	bne.n	800dfbc <_dtoa_r+0xa44>
 800dfa0:	2b39      	cmp	r3, #57	@ 0x39
 800dfa2:	d027      	beq.n	800dff4 <_dtoa_r+0xa7c>
 800dfa4:	9a04      	ldr	r2, [sp, #16]
 800dfa6:	2a00      	cmp	r2, #0
 800dfa8:	dd01      	ble.n	800dfae <_dtoa_r+0xa36>
 800dfaa:	9b03      	ldr	r3, [sp, #12]
 800dfac:	3331      	adds	r3, #49	@ 0x31
 800dfae:	f88b 3000 	strb.w	r3, [fp]
 800dfb2:	e52e      	b.n	800da12 <_dtoa_r+0x49a>
 800dfb4:	4628      	mov	r0, r5
 800dfb6:	e7b9      	b.n	800df2c <_dtoa_r+0x9b4>
 800dfb8:	2201      	movs	r2, #1
 800dfba:	e7e2      	b.n	800df82 <_dtoa_r+0xa0a>
 800dfbc:	9904      	ldr	r1, [sp, #16]
 800dfbe:	2900      	cmp	r1, #0
 800dfc0:	db04      	blt.n	800dfcc <_dtoa_r+0xa54>
 800dfc2:	9807      	ldr	r0, [sp, #28]
 800dfc4:	4301      	orrs	r1, r0
 800dfc6:	9806      	ldr	r0, [sp, #24]
 800dfc8:	4301      	orrs	r1, r0
 800dfca:	d120      	bne.n	800e00e <_dtoa_r+0xa96>
 800dfcc:	2a00      	cmp	r2, #0
 800dfce:	ddee      	ble.n	800dfae <_dtoa_r+0xa36>
 800dfd0:	9902      	ldr	r1, [sp, #8]
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	4648      	mov	r0, r9
 800dfd8:	f000 ff3a 	bl	800ee50 <__lshift>
 800dfdc:	4621      	mov	r1, r4
 800dfde:	9002      	str	r0, [sp, #8]
 800dfe0:	f000 ffa2 	bl	800ef28 <__mcmp>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	9b00      	ldr	r3, [sp, #0]
 800dfe8:	dc02      	bgt.n	800dff0 <_dtoa_r+0xa78>
 800dfea:	d1e0      	bne.n	800dfae <_dtoa_r+0xa36>
 800dfec:	07da      	lsls	r2, r3, #31
 800dfee:	d5de      	bpl.n	800dfae <_dtoa_r+0xa36>
 800dff0:	2b39      	cmp	r3, #57	@ 0x39
 800dff2:	d1da      	bne.n	800dfaa <_dtoa_r+0xa32>
 800dff4:	2339      	movs	r3, #57	@ 0x39
 800dff6:	f88b 3000 	strb.w	r3, [fp]
 800dffa:	4633      	mov	r3, r6
 800dffc:	461e      	mov	r6, r3
 800dffe:	3b01      	subs	r3, #1
 800e000:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e004:	2a39      	cmp	r2, #57	@ 0x39
 800e006:	d04e      	beq.n	800e0a6 <_dtoa_r+0xb2e>
 800e008:	3201      	adds	r2, #1
 800e00a:	701a      	strb	r2, [r3, #0]
 800e00c:	e501      	b.n	800da12 <_dtoa_r+0x49a>
 800e00e:	2a00      	cmp	r2, #0
 800e010:	dd03      	ble.n	800e01a <_dtoa_r+0xaa2>
 800e012:	2b39      	cmp	r3, #57	@ 0x39
 800e014:	d0ee      	beq.n	800dff4 <_dtoa_r+0xa7c>
 800e016:	3301      	adds	r3, #1
 800e018:	e7c9      	b.n	800dfae <_dtoa_r+0xa36>
 800e01a:	9a00      	ldr	r2, [sp, #0]
 800e01c:	9908      	ldr	r1, [sp, #32]
 800e01e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e022:	428a      	cmp	r2, r1
 800e024:	d028      	beq.n	800e078 <_dtoa_r+0xb00>
 800e026:	9902      	ldr	r1, [sp, #8]
 800e028:	2300      	movs	r3, #0
 800e02a:	220a      	movs	r2, #10
 800e02c:	4648      	mov	r0, r9
 800e02e:	f000 fd21 	bl	800ea74 <__multadd>
 800e032:	42af      	cmp	r7, r5
 800e034:	9002      	str	r0, [sp, #8]
 800e036:	f04f 0300 	mov.w	r3, #0
 800e03a:	f04f 020a 	mov.w	r2, #10
 800e03e:	4639      	mov	r1, r7
 800e040:	4648      	mov	r0, r9
 800e042:	d107      	bne.n	800e054 <_dtoa_r+0xadc>
 800e044:	f000 fd16 	bl	800ea74 <__multadd>
 800e048:	4607      	mov	r7, r0
 800e04a:	4605      	mov	r5, r0
 800e04c:	9b00      	ldr	r3, [sp, #0]
 800e04e:	3301      	adds	r3, #1
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	e777      	b.n	800df44 <_dtoa_r+0x9cc>
 800e054:	f000 fd0e 	bl	800ea74 <__multadd>
 800e058:	4629      	mov	r1, r5
 800e05a:	4607      	mov	r7, r0
 800e05c:	2300      	movs	r3, #0
 800e05e:	220a      	movs	r2, #10
 800e060:	4648      	mov	r0, r9
 800e062:	f000 fd07 	bl	800ea74 <__multadd>
 800e066:	4605      	mov	r5, r0
 800e068:	e7f0      	b.n	800e04c <_dtoa_r+0xad4>
 800e06a:	f1bb 0f00 	cmp.w	fp, #0
 800e06e:	bfcc      	ite	gt
 800e070:	465e      	movgt	r6, fp
 800e072:	2601      	movle	r6, #1
 800e074:	4456      	add	r6, sl
 800e076:	2700      	movs	r7, #0
 800e078:	9902      	ldr	r1, [sp, #8]
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	2201      	movs	r2, #1
 800e07e:	4648      	mov	r0, r9
 800e080:	f000 fee6 	bl	800ee50 <__lshift>
 800e084:	4621      	mov	r1, r4
 800e086:	9002      	str	r0, [sp, #8]
 800e088:	f000 ff4e 	bl	800ef28 <__mcmp>
 800e08c:	2800      	cmp	r0, #0
 800e08e:	dcb4      	bgt.n	800dffa <_dtoa_r+0xa82>
 800e090:	d102      	bne.n	800e098 <_dtoa_r+0xb20>
 800e092:	9b00      	ldr	r3, [sp, #0]
 800e094:	07db      	lsls	r3, r3, #31
 800e096:	d4b0      	bmi.n	800dffa <_dtoa_r+0xa82>
 800e098:	4633      	mov	r3, r6
 800e09a:	461e      	mov	r6, r3
 800e09c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0a0:	2a30      	cmp	r2, #48	@ 0x30
 800e0a2:	d0fa      	beq.n	800e09a <_dtoa_r+0xb22>
 800e0a4:	e4b5      	b.n	800da12 <_dtoa_r+0x49a>
 800e0a6:	459a      	cmp	sl, r3
 800e0a8:	d1a8      	bne.n	800dffc <_dtoa_r+0xa84>
 800e0aa:	2331      	movs	r3, #49	@ 0x31
 800e0ac:	f108 0801 	add.w	r8, r8, #1
 800e0b0:	f88a 3000 	strb.w	r3, [sl]
 800e0b4:	e4ad      	b.n	800da12 <_dtoa_r+0x49a>
 800e0b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e0b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e114 <_dtoa_r+0xb9c>
 800e0bc:	b11b      	cbz	r3, 800e0c6 <_dtoa_r+0xb4e>
 800e0be:	f10a 0308 	add.w	r3, sl, #8
 800e0c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e0c4:	6013      	str	r3, [r2, #0]
 800e0c6:	4650      	mov	r0, sl
 800e0c8:	b017      	add	sp, #92	@ 0x5c
 800e0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ce:	9b07      	ldr	r3, [sp, #28]
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	f77f ae2e 	ble.w	800dd32 <_dtoa_r+0x7ba>
 800e0d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0d8:	9308      	str	r3, [sp, #32]
 800e0da:	2001      	movs	r0, #1
 800e0dc:	e64d      	b.n	800dd7a <_dtoa_r+0x802>
 800e0de:	f1bb 0f00 	cmp.w	fp, #0
 800e0e2:	f77f aed9 	ble.w	800de98 <_dtoa_r+0x920>
 800e0e6:	4656      	mov	r6, sl
 800e0e8:	9802      	ldr	r0, [sp, #8]
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	f7ff f9bc 	bl	800d468 <quorem>
 800e0f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e0f4:	f806 3b01 	strb.w	r3, [r6], #1
 800e0f8:	eba6 020a 	sub.w	r2, r6, sl
 800e0fc:	4593      	cmp	fp, r2
 800e0fe:	ddb4      	ble.n	800e06a <_dtoa_r+0xaf2>
 800e100:	9902      	ldr	r1, [sp, #8]
 800e102:	2300      	movs	r3, #0
 800e104:	220a      	movs	r2, #10
 800e106:	4648      	mov	r0, r9
 800e108:	f000 fcb4 	bl	800ea74 <__multadd>
 800e10c:	9002      	str	r0, [sp, #8]
 800e10e:	e7eb      	b.n	800e0e8 <_dtoa_r+0xb70>
 800e110:	08014de9 	.word	0x08014de9
 800e114:	08014d84 	.word	0x08014d84

0800e118 <_free_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	4605      	mov	r5, r0
 800e11c:	2900      	cmp	r1, #0
 800e11e:	d041      	beq.n	800e1a4 <_free_r+0x8c>
 800e120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e124:	1f0c      	subs	r4, r1, #4
 800e126:	2b00      	cmp	r3, #0
 800e128:	bfb8      	it	lt
 800e12a:	18e4      	addlt	r4, r4, r3
 800e12c:	f000 fc34 	bl	800e998 <__malloc_lock>
 800e130:	4a1d      	ldr	r2, [pc, #116]	@ (800e1a8 <_free_r+0x90>)
 800e132:	6813      	ldr	r3, [r2, #0]
 800e134:	b933      	cbnz	r3, 800e144 <_free_r+0x2c>
 800e136:	6063      	str	r3, [r4, #4]
 800e138:	6014      	str	r4, [r2, #0]
 800e13a:	4628      	mov	r0, r5
 800e13c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e140:	f000 bc30 	b.w	800e9a4 <__malloc_unlock>
 800e144:	42a3      	cmp	r3, r4
 800e146:	d908      	bls.n	800e15a <_free_r+0x42>
 800e148:	6820      	ldr	r0, [r4, #0]
 800e14a:	1821      	adds	r1, r4, r0
 800e14c:	428b      	cmp	r3, r1
 800e14e:	bf01      	itttt	eq
 800e150:	6819      	ldreq	r1, [r3, #0]
 800e152:	685b      	ldreq	r3, [r3, #4]
 800e154:	1809      	addeq	r1, r1, r0
 800e156:	6021      	streq	r1, [r4, #0]
 800e158:	e7ed      	b.n	800e136 <_free_r+0x1e>
 800e15a:	461a      	mov	r2, r3
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	b10b      	cbz	r3, 800e164 <_free_r+0x4c>
 800e160:	42a3      	cmp	r3, r4
 800e162:	d9fa      	bls.n	800e15a <_free_r+0x42>
 800e164:	6811      	ldr	r1, [r2, #0]
 800e166:	1850      	adds	r0, r2, r1
 800e168:	42a0      	cmp	r0, r4
 800e16a:	d10b      	bne.n	800e184 <_free_r+0x6c>
 800e16c:	6820      	ldr	r0, [r4, #0]
 800e16e:	4401      	add	r1, r0
 800e170:	1850      	adds	r0, r2, r1
 800e172:	4283      	cmp	r3, r0
 800e174:	6011      	str	r1, [r2, #0]
 800e176:	d1e0      	bne.n	800e13a <_free_r+0x22>
 800e178:	6818      	ldr	r0, [r3, #0]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	6053      	str	r3, [r2, #4]
 800e17e:	4408      	add	r0, r1
 800e180:	6010      	str	r0, [r2, #0]
 800e182:	e7da      	b.n	800e13a <_free_r+0x22>
 800e184:	d902      	bls.n	800e18c <_free_r+0x74>
 800e186:	230c      	movs	r3, #12
 800e188:	602b      	str	r3, [r5, #0]
 800e18a:	e7d6      	b.n	800e13a <_free_r+0x22>
 800e18c:	6820      	ldr	r0, [r4, #0]
 800e18e:	1821      	adds	r1, r4, r0
 800e190:	428b      	cmp	r3, r1
 800e192:	bf04      	itt	eq
 800e194:	6819      	ldreq	r1, [r3, #0]
 800e196:	685b      	ldreq	r3, [r3, #4]
 800e198:	6063      	str	r3, [r4, #4]
 800e19a:	bf04      	itt	eq
 800e19c:	1809      	addeq	r1, r1, r0
 800e19e:	6021      	streq	r1, [r4, #0]
 800e1a0:	6054      	str	r4, [r2, #4]
 800e1a2:	e7ca      	b.n	800e13a <_free_r+0x22>
 800e1a4:	bd38      	pop	{r3, r4, r5, pc}
 800e1a6:	bf00      	nop
 800e1a8:	2001ebc0 	.word	0x2001ebc0

0800e1ac <rshift>:
 800e1ac:	6903      	ldr	r3, [r0, #16]
 800e1ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e1b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e1ba:	f100 0414 	add.w	r4, r0, #20
 800e1be:	dd45      	ble.n	800e24c <rshift+0xa0>
 800e1c0:	f011 011f 	ands.w	r1, r1, #31
 800e1c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e1c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e1cc:	d10c      	bne.n	800e1e8 <rshift+0x3c>
 800e1ce:	f100 0710 	add.w	r7, r0, #16
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	42b1      	cmp	r1, r6
 800e1d6:	d334      	bcc.n	800e242 <rshift+0x96>
 800e1d8:	1a9b      	subs	r3, r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	1eea      	subs	r2, r5, #3
 800e1de:	4296      	cmp	r6, r2
 800e1e0:	bf38      	it	cc
 800e1e2:	2300      	movcc	r3, #0
 800e1e4:	4423      	add	r3, r4
 800e1e6:	e015      	b.n	800e214 <rshift+0x68>
 800e1e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e1ec:	f1c1 0820 	rsb	r8, r1, #32
 800e1f0:	40cf      	lsrs	r7, r1
 800e1f2:	f105 0e04 	add.w	lr, r5, #4
 800e1f6:	46a1      	mov	r9, r4
 800e1f8:	4576      	cmp	r6, lr
 800e1fa:	46f4      	mov	ip, lr
 800e1fc:	d815      	bhi.n	800e22a <rshift+0x7e>
 800e1fe:	1a9a      	subs	r2, r3, r2
 800e200:	0092      	lsls	r2, r2, #2
 800e202:	3a04      	subs	r2, #4
 800e204:	3501      	adds	r5, #1
 800e206:	42ae      	cmp	r6, r5
 800e208:	bf38      	it	cc
 800e20a:	2200      	movcc	r2, #0
 800e20c:	18a3      	adds	r3, r4, r2
 800e20e:	50a7      	str	r7, [r4, r2]
 800e210:	b107      	cbz	r7, 800e214 <rshift+0x68>
 800e212:	3304      	adds	r3, #4
 800e214:	1b1a      	subs	r2, r3, r4
 800e216:	42a3      	cmp	r3, r4
 800e218:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e21c:	bf08      	it	eq
 800e21e:	2300      	moveq	r3, #0
 800e220:	6102      	str	r2, [r0, #16]
 800e222:	bf08      	it	eq
 800e224:	6143      	streq	r3, [r0, #20]
 800e226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e22a:	f8dc c000 	ldr.w	ip, [ip]
 800e22e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e232:	ea4c 0707 	orr.w	r7, ip, r7
 800e236:	f849 7b04 	str.w	r7, [r9], #4
 800e23a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e23e:	40cf      	lsrs	r7, r1
 800e240:	e7da      	b.n	800e1f8 <rshift+0x4c>
 800e242:	f851 cb04 	ldr.w	ip, [r1], #4
 800e246:	f847 cf04 	str.w	ip, [r7, #4]!
 800e24a:	e7c3      	b.n	800e1d4 <rshift+0x28>
 800e24c:	4623      	mov	r3, r4
 800e24e:	e7e1      	b.n	800e214 <rshift+0x68>

0800e250 <__hexdig_fun>:
 800e250:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e254:	2b09      	cmp	r3, #9
 800e256:	d802      	bhi.n	800e25e <__hexdig_fun+0xe>
 800e258:	3820      	subs	r0, #32
 800e25a:	b2c0      	uxtb	r0, r0
 800e25c:	4770      	bx	lr
 800e25e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e262:	2b05      	cmp	r3, #5
 800e264:	d801      	bhi.n	800e26a <__hexdig_fun+0x1a>
 800e266:	3847      	subs	r0, #71	@ 0x47
 800e268:	e7f7      	b.n	800e25a <__hexdig_fun+0xa>
 800e26a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e26e:	2b05      	cmp	r3, #5
 800e270:	d801      	bhi.n	800e276 <__hexdig_fun+0x26>
 800e272:	3827      	subs	r0, #39	@ 0x27
 800e274:	e7f1      	b.n	800e25a <__hexdig_fun+0xa>
 800e276:	2000      	movs	r0, #0
 800e278:	4770      	bx	lr
	...

0800e27c <__gethex>:
 800e27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e280:	b085      	sub	sp, #20
 800e282:	468a      	mov	sl, r1
 800e284:	9302      	str	r3, [sp, #8]
 800e286:	680b      	ldr	r3, [r1, #0]
 800e288:	9001      	str	r0, [sp, #4]
 800e28a:	4690      	mov	r8, r2
 800e28c:	1c9c      	adds	r4, r3, #2
 800e28e:	46a1      	mov	r9, r4
 800e290:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e294:	2830      	cmp	r0, #48	@ 0x30
 800e296:	d0fa      	beq.n	800e28e <__gethex+0x12>
 800e298:	eba9 0303 	sub.w	r3, r9, r3
 800e29c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e2a0:	f7ff ffd6 	bl	800e250 <__hexdig_fun>
 800e2a4:	4605      	mov	r5, r0
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d168      	bne.n	800e37c <__gethex+0x100>
 800e2aa:	49a0      	ldr	r1, [pc, #640]	@ (800e52c <__gethex+0x2b0>)
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	4648      	mov	r0, r9
 800e2b0:	f7fe ffa7 	bl	800d202 <strncmp>
 800e2b4:	4607      	mov	r7, r0
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d167      	bne.n	800e38a <__gethex+0x10e>
 800e2ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e2be:	4626      	mov	r6, r4
 800e2c0:	f7ff ffc6 	bl	800e250 <__hexdig_fun>
 800e2c4:	2800      	cmp	r0, #0
 800e2c6:	d062      	beq.n	800e38e <__gethex+0x112>
 800e2c8:	4623      	mov	r3, r4
 800e2ca:	7818      	ldrb	r0, [r3, #0]
 800e2cc:	2830      	cmp	r0, #48	@ 0x30
 800e2ce:	4699      	mov	r9, r3
 800e2d0:	f103 0301 	add.w	r3, r3, #1
 800e2d4:	d0f9      	beq.n	800e2ca <__gethex+0x4e>
 800e2d6:	f7ff ffbb 	bl	800e250 <__hexdig_fun>
 800e2da:	fab0 f580 	clz	r5, r0
 800e2de:	096d      	lsrs	r5, r5, #5
 800e2e0:	f04f 0b01 	mov.w	fp, #1
 800e2e4:	464a      	mov	r2, r9
 800e2e6:	4616      	mov	r6, r2
 800e2e8:	3201      	adds	r2, #1
 800e2ea:	7830      	ldrb	r0, [r6, #0]
 800e2ec:	f7ff ffb0 	bl	800e250 <__hexdig_fun>
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	d1f8      	bne.n	800e2e6 <__gethex+0x6a>
 800e2f4:	498d      	ldr	r1, [pc, #564]	@ (800e52c <__gethex+0x2b0>)
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	f7fe ff82 	bl	800d202 <strncmp>
 800e2fe:	2800      	cmp	r0, #0
 800e300:	d13f      	bne.n	800e382 <__gethex+0x106>
 800e302:	b944      	cbnz	r4, 800e316 <__gethex+0x9a>
 800e304:	1c74      	adds	r4, r6, #1
 800e306:	4622      	mov	r2, r4
 800e308:	4616      	mov	r6, r2
 800e30a:	3201      	adds	r2, #1
 800e30c:	7830      	ldrb	r0, [r6, #0]
 800e30e:	f7ff ff9f 	bl	800e250 <__hexdig_fun>
 800e312:	2800      	cmp	r0, #0
 800e314:	d1f8      	bne.n	800e308 <__gethex+0x8c>
 800e316:	1ba4      	subs	r4, r4, r6
 800e318:	00a7      	lsls	r7, r4, #2
 800e31a:	7833      	ldrb	r3, [r6, #0]
 800e31c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e320:	2b50      	cmp	r3, #80	@ 0x50
 800e322:	d13e      	bne.n	800e3a2 <__gethex+0x126>
 800e324:	7873      	ldrb	r3, [r6, #1]
 800e326:	2b2b      	cmp	r3, #43	@ 0x2b
 800e328:	d033      	beq.n	800e392 <__gethex+0x116>
 800e32a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e32c:	d034      	beq.n	800e398 <__gethex+0x11c>
 800e32e:	1c71      	adds	r1, r6, #1
 800e330:	2400      	movs	r4, #0
 800e332:	7808      	ldrb	r0, [r1, #0]
 800e334:	f7ff ff8c 	bl	800e250 <__hexdig_fun>
 800e338:	1e43      	subs	r3, r0, #1
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	2b18      	cmp	r3, #24
 800e33e:	d830      	bhi.n	800e3a2 <__gethex+0x126>
 800e340:	f1a0 0210 	sub.w	r2, r0, #16
 800e344:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e348:	f7ff ff82 	bl	800e250 <__hexdig_fun>
 800e34c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e350:	fa5f fc8c 	uxtb.w	ip, ip
 800e354:	f1bc 0f18 	cmp.w	ip, #24
 800e358:	f04f 030a 	mov.w	r3, #10
 800e35c:	d91e      	bls.n	800e39c <__gethex+0x120>
 800e35e:	b104      	cbz	r4, 800e362 <__gethex+0xe6>
 800e360:	4252      	negs	r2, r2
 800e362:	4417      	add	r7, r2
 800e364:	f8ca 1000 	str.w	r1, [sl]
 800e368:	b1ed      	cbz	r5, 800e3a6 <__gethex+0x12a>
 800e36a:	f1bb 0f00 	cmp.w	fp, #0
 800e36e:	bf0c      	ite	eq
 800e370:	2506      	moveq	r5, #6
 800e372:	2500      	movne	r5, #0
 800e374:	4628      	mov	r0, r5
 800e376:	b005      	add	sp, #20
 800e378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e37c:	2500      	movs	r5, #0
 800e37e:	462c      	mov	r4, r5
 800e380:	e7b0      	b.n	800e2e4 <__gethex+0x68>
 800e382:	2c00      	cmp	r4, #0
 800e384:	d1c7      	bne.n	800e316 <__gethex+0x9a>
 800e386:	4627      	mov	r7, r4
 800e388:	e7c7      	b.n	800e31a <__gethex+0x9e>
 800e38a:	464e      	mov	r6, r9
 800e38c:	462f      	mov	r7, r5
 800e38e:	2501      	movs	r5, #1
 800e390:	e7c3      	b.n	800e31a <__gethex+0x9e>
 800e392:	2400      	movs	r4, #0
 800e394:	1cb1      	adds	r1, r6, #2
 800e396:	e7cc      	b.n	800e332 <__gethex+0xb6>
 800e398:	2401      	movs	r4, #1
 800e39a:	e7fb      	b.n	800e394 <__gethex+0x118>
 800e39c:	fb03 0002 	mla	r0, r3, r2, r0
 800e3a0:	e7ce      	b.n	800e340 <__gethex+0xc4>
 800e3a2:	4631      	mov	r1, r6
 800e3a4:	e7de      	b.n	800e364 <__gethex+0xe8>
 800e3a6:	eba6 0309 	sub.w	r3, r6, r9
 800e3aa:	3b01      	subs	r3, #1
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	2b07      	cmp	r3, #7
 800e3b0:	dc0a      	bgt.n	800e3c8 <__gethex+0x14c>
 800e3b2:	9801      	ldr	r0, [sp, #4]
 800e3b4:	f000 fafc 	bl	800e9b0 <_Balloc>
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	b940      	cbnz	r0, 800e3ce <__gethex+0x152>
 800e3bc:	4b5c      	ldr	r3, [pc, #368]	@ (800e530 <__gethex+0x2b4>)
 800e3be:	4602      	mov	r2, r0
 800e3c0:	21e4      	movs	r1, #228	@ 0xe4
 800e3c2:	485c      	ldr	r0, [pc, #368]	@ (800e534 <__gethex+0x2b8>)
 800e3c4:	f7ff f832 	bl	800d42c <__assert_func>
 800e3c8:	3101      	adds	r1, #1
 800e3ca:	105b      	asrs	r3, r3, #1
 800e3cc:	e7ef      	b.n	800e3ae <__gethex+0x132>
 800e3ce:	f100 0a14 	add.w	sl, r0, #20
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	4655      	mov	r5, sl
 800e3d6:	469b      	mov	fp, r3
 800e3d8:	45b1      	cmp	r9, r6
 800e3da:	d337      	bcc.n	800e44c <__gethex+0x1d0>
 800e3dc:	f845 bb04 	str.w	fp, [r5], #4
 800e3e0:	eba5 050a 	sub.w	r5, r5, sl
 800e3e4:	10ad      	asrs	r5, r5, #2
 800e3e6:	6125      	str	r5, [r4, #16]
 800e3e8:	4658      	mov	r0, fp
 800e3ea:	f000 fbd3 	bl	800eb94 <__hi0bits>
 800e3ee:	016d      	lsls	r5, r5, #5
 800e3f0:	f8d8 6000 	ldr.w	r6, [r8]
 800e3f4:	1a2d      	subs	r5, r5, r0
 800e3f6:	42b5      	cmp	r5, r6
 800e3f8:	dd54      	ble.n	800e4a4 <__gethex+0x228>
 800e3fa:	1bad      	subs	r5, r5, r6
 800e3fc:	4629      	mov	r1, r5
 800e3fe:	4620      	mov	r0, r4
 800e400:	f000 ff5f 	bl	800f2c2 <__any_on>
 800e404:	4681      	mov	r9, r0
 800e406:	b178      	cbz	r0, 800e428 <__gethex+0x1ac>
 800e408:	1e6b      	subs	r3, r5, #1
 800e40a:	1159      	asrs	r1, r3, #5
 800e40c:	f003 021f 	and.w	r2, r3, #31
 800e410:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e414:	f04f 0901 	mov.w	r9, #1
 800e418:	fa09 f202 	lsl.w	r2, r9, r2
 800e41c:	420a      	tst	r2, r1
 800e41e:	d003      	beq.n	800e428 <__gethex+0x1ac>
 800e420:	454b      	cmp	r3, r9
 800e422:	dc36      	bgt.n	800e492 <__gethex+0x216>
 800e424:	f04f 0902 	mov.w	r9, #2
 800e428:	4629      	mov	r1, r5
 800e42a:	4620      	mov	r0, r4
 800e42c:	f7ff febe 	bl	800e1ac <rshift>
 800e430:	442f      	add	r7, r5
 800e432:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e436:	42bb      	cmp	r3, r7
 800e438:	da42      	bge.n	800e4c0 <__gethex+0x244>
 800e43a:	9801      	ldr	r0, [sp, #4]
 800e43c:	4621      	mov	r1, r4
 800e43e:	f000 faf7 	bl	800ea30 <_Bfree>
 800e442:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e444:	2300      	movs	r3, #0
 800e446:	6013      	str	r3, [r2, #0]
 800e448:	25a3      	movs	r5, #163	@ 0xa3
 800e44a:	e793      	b.n	800e374 <__gethex+0xf8>
 800e44c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e450:	2a2e      	cmp	r2, #46	@ 0x2e
 800e452:	d012      	beq.n	800e47a <__gethex+0x1fe>
 800e454:	2b20      	cmp	r3, #32
 800e456:	d104      	bne.n	800e462 <__gethex+0x1e6>
 800e458:	f845 bb04 	str.w	fp, [r5], #4
 800e45c:	f04f 0b00 	mov.w	fp, #0
 800e460:	465b      	mov	r3, fp
 800e462:	7830      	ldrb	r0, [r6, #0]
 800e464:	9303      	str	r3, [sp, #12]
 800e466:	f7ff fef3 	bl	800e250 <__hexdig_fun>
 800e46a:	9b03      	ldr	r3, [sp, #12]
 800e46c:	f000 000f 	and.w	r0, r0, #15
 800e470:	4098      	lsls	r0, r3
 800e472:	ea4b 0b00 	orr.w	fp, fp, r0
 800e476:	3304      	adds	r3, #4
 800e478:	e7ae      	b.n	800e3d8 <__gethex+0x15c>
 800e47a:	45b1      	cmp	r9, r6
 800e47c:	d8ea      	bhi.n	800e454 <__gethex+0x1d8>
 800e47e:	492b      	ldr	r1, [pc, #172]	@ (800e52c <__gethex+0x2b0>)
 800e480:	9303      	str	r3, [sp, #12]
 800e482:	2201      	movs	r2, #1
 800e484:	4630      	mov	r0, r6
 800e486:	f7fe febc 	bl	800d202 <strncmp>
 800e48a:	9b03      	ldr	r3, [sp, #12]
 800e48c:	2800      	cmp	r0, #0
 800e48e:	d1e1      	bne.n	800e454 <__gethex+0x1d8>
 800e490:	e7a2      	b.n	800e3d8 <__gethex+0x15c>
 800e492:	1ea9      	subs	r1, r5, #2
 800e494:	4620      	mov	r0, r4
 800e496:	f000 ff14 	bl	800f2c2 <__any_on>
 800e49a:	2800      	cmp	r0, #0
 800e49c:	d0c2      	beq.n	800e424 <__gethex+0x1a8>
 800e49e:	f04f 0903 	mov.w	r9, #3
 800e4a2:	e7c1      	b.n	800e428 <__gethex+0x1ac>
 800e4a4:	da09      	bge.n	800e4ba <__gethex+0x23e>
 800e4a6:	1b75      	subs	r5, r6, r5
 800e4a8:	4621      	mov	r1, r4
 800e4aa:	9801      	ldr	r0, [sp, #4]
 800e4ac:	462a      	mov	r2, r5
 800e4ae:	f000 fccf 	bl	800ee50 <__lshift>
 800e4b2:	1b7f      	subs	r7, r7, r5
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	f100 0a14 	add.w	sl, r0, #20
 800e4ba:	f04f 0900 	mov.w	r9, #0
 800e4be:	e7b8      	b.n	800e432 <__gethex+0x1b6>
 800e4c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e4c4:	42bd      	cmp	r5, r7
 800e4c6:	dd6f      	ble.n	800e5a8 <__gethex+0x32c>
 800e4c8:	1bed      	subs	r5, r5, r7
 800e4ca:	42ae      	cmp	r6, r5
 800e4cc:	dc34      	bgt.n	800e538 <__gethex+0x2bc>
 800e4ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e4d2:	2b02      	cmp	r3, #2
 800e4d4:	d022      	beq.n	800e51c <__gethex+0x2a0>
 800e4d6:	2b03      	cmp	r3, #3
 800e4d8:	d024      	beq.n	800e524 <__gethex+0x2a8>
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d115      	bne.n	800e50a <__gethex+0x28e>
 800e4de:	42ae      	cmp	r6, r5
 800e4e0:	d113      	bne.n	800e50a <__gethex+0x28e>
 800e4e2:	2e01      	cmp	r6, #1
 800e4e4:	d10b      	bne.n	800e4fe <__gethex+0x282>
 800e4e6:	9a02      	ldr	r2, [sp, #8]
 800e4e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e4ec:	6013      	str	r3, [r2, #0]
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	6123      	str	r3, [r4, #16]
 800e4f2:	f8ca 3000 	str.w	r3, [sl]
 800e4f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4f8:	2562      	movs	r5, #98	@ 0x62
 800e4fa:	601c      	str	r4, [r3, #0]
 800e4fc:	e73a      	b.n	800e374 <__gethex+0xf8>
 800e4fe:	1e71      	subs	r1, r6, #1
 800e500:	4620      	mov	r0, r4
 800e502:	f000 fede 	bl	800f2c2 <__any_on>
 800e506:	2800      	cmp	r0, #0
 800e508:	d1ed      	bne.n	800e4e6 <__gethex+0x26a>
 800e50a:	9801      	ldr	r0, [sp, #4]
 800e50c:	4621      	mov	r1, r4
 800e50e:	f000 fa8f 	bl	800ea30 <_Bfree>
 800e512:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e514:	2300      	movs	r3, #0
 800e516:	6013      	str	r3, [r2, #0]
 800e518:	2550      	movs	r5, #80	@ 0x50
 800e51a:	e72b      	b.n	800e374 <__gethex+0xf8>
 800e51c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1f3      	bne.n	800e50a <__gethex+0x28e>
 800e522:	e7e0      	b.n	800e4e6 <__gethex+0x26a>
 800e524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e526:	2b00      	cmp	r3, #0
 800e528:	d1dd      	bne.n	800e4e6 <__gethex+0x26a>
 800e52a:	e7ee      	b.n	800e50a <__gethex+0x28e>
 800e52c:	08014cab 	.word	0x08014cab
 800e530:	08014de9 	.word	0x08014de9
 800e534:	08014dfa 	.word	0x08014dfa
 800e538:	1e6f      	subs	r7, r5, #1
 800e53a:	f1b9 0f00 	cmp.w	r9, #0
 800e53e:	d130      	bne.n	800e5a2 <__gethex+0x326>
 800e540:	b127      	cbz	r7, 800e54c <__gethex+0x2d0>
 800e542:	4639      	mov	r1, r7
 800e544:	4620      	mov	r0, r4
 800e546:	f000 febc 	bl	800f2c2 <__any_on>
 800e54a:	4681      	mov	r9, r0
 800e54c:	117a      	asrs	r2, r7, #5
 800e54e:	2301      	movs	r3, #1
 800e550:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e554:	f007 071f 	and.w	r7, r7, #31
 800e558:	40bb      	lsls	r3, r7
 800e55a:	4213      	tst	r3, r2
 800e55c:	4629      	mov	r1, r5
 800e55e:	4620      	mov	r0, r4
 800e560:	bf18      	it	ne
 800e562:	f049 0902 	orrne.w	r9, r9, #2
 800e566:	f7ff fe21 	bl	800e1ac <rshift>
 800e56a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e56e:	1b76      	subs	r6, r6, r5
 800e570:	2502      	movs	r5, #2
 800e572:	f1b9 0f00 	cmp.w	r9, #0
 800e576:	d047      	beq.n	800e608 <__gethex+0x38c>
 800e578:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	d015      	beq.n	800e5ac <__gethex+0x330>
 800e580:	2b03      	cmp	r3, #3
 800e582:	d017      	beq.n	800e5b4 <__gethex+0x338>
 800e584:	2b01      	cmp	r3, #1
 800e586:	d109      	bne.n	800e59c <__gethex+0x320>
 800e588:	f019 0f02 	tst.w	r9, #2
 800e58c:	d006      	beq.n	800e59c <__gethex+0x320>
 800e58e:	f8da 3000 	ldr.w	r3, [sl]
 800e592:	ea49 0903 	orr.w	r9, r9, r3
 800e596:	f019 0f01 	tst.w	r9, #1
 800e59a:	d10e      	bne.n	800e5ba <__gethex+0x33e>
 800e59c:	f045 0510 	orr.w	r5, r5, #16
 800e5a0:	e032      	b.n	800e608 <__gethex+0x38c>
 800e5a2:	f04f 0901 	mov.w	r9, #1
 800e5a6:	e7d1      	b.n	800e54c <__gethex+0x2d0>
 800e5a8:	2501      	movs	r5, #1
 800e5aa:	e7e2      	b.n	800e572 <__gethex+0x2f6>
 800e5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ae:	f1c3 0301 	rsb	r3, r3, #1
 800e5b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d0f0      	beq.n	800e59c <__gethex+0x320>
 800e5ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e5be:	f104 0314 	add.w	r3, r4, #20
 800e5c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e5c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e5ca:	f04f 0c00 	mov.w	ip, #0
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e5d8:	d01b      	beq.n	800e612 <__gethex+0x396>
 800e5da:	3201      	adds	r2, #1
 800e5dc:	6002      	str	r2, [r0, #0]
 800e5de:	2d02      	cmp	r5, #2
 800e5e0:	f104 0314 	add.w	r3, r4, #20
 800e5e4:	d13c      	bne.n	800e660 <__gethex+0x3e4>
 800e5e6:	f8d8 2000 	ldr.w	r2, [r8]
 800e5ea:	3a01      	subs	r2, #1
 800e5ec:	42b2      	cmp	r2, r6
 800e5ee:	d109      	bne.n	800e604 <__gethex+0x388>
 800e5f0:	1171      	asrs	r1, r6, #5
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5f8:	f006 061f 	and.w	r6, r6, #31
 800e5fc:	fa02 f606 	lsl.w	r6, r2, r6
 800e600:	421e      	tst	r6, r3
 800e602:	d13a      	bne.n	800e67a <__gethex+0x3fe>
 800e604:	f045 0520 	orr.w	r5, r5, #32
 800e608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e60a:	601c      	str	r4, [r3, #0]
 800e60c:	9b02      	ldr	r3, [sp, #8]
 800e60e:	601f      	str	r7, [r3, #0]
 800e610:	e6b0      	b.n	800e374 <__gethex+0xf8>
 800e612:	4299      	cmp	r1, r3
 800e614:	f843 cc04 	str.w	ip, [r3, #-4]
 800e618:	d8d9      	bhi.n	800e5ce <__gethex+0x352>
 800e61a:	68a3      	ldr	r3, [r4, #8]
 800e61c:	459b      	cmp	fp, r3
 800e61e:	db17      	blt.n	800e650 <__gethex+0x3d4>
 800e620:	6861      	ldr	r1, [r4, #4]
 800e622:	9801      	ldr	r0, [sp, #4]
 800e624:	3101      	adds	r1, #1
 800e626:	f000 f9c3 	bl	800e9b0 <_Balloc>
 800e62a:	4681      	mov	r9, r0
 800e62c:	b918      	cbnz	r0, 800e636 <__gethex+0x3ba>
 800e62e:	4b1a      	ldr	r3, [pc, #104]	@ (800e698 <__gethex+0x41c>)
 800e630:	4602      	mov	r2, r0
 800e632:	2184      	movs	r1, #132	@ 0x84
 800e634:	e6c5      	b.n	800e3c2 <__gethex+0x146>
 800e636:	6922      	ldr	r2, [r4, #16]
 800e638:	3202      	adds	r2, #2
 800e63a:	f104 010c 	add.w	r1, r4, #12
 800e63e:	0092      	lsls	r2, r2, #2
 800e640:	300c      	adds	r0, #12
 800e642:	f7fe fed6 	bl	800d3f2 <memcpy>
 800e646:	4621      	mov	r1, r4
 800e648:	9801      	ldr	r0, [sp, #4]
 800e64a:	f000 f9f1 	bl	800ea30 <_Bfree>
 800e64e:	464c      	mov	r4, r9
 800e650:	6923      	ldr	r3, [r4, #16]
 800e652:	1c5a      	adds	r2, r3, #1
 800e654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e658:	6122      	str	r2, [r4, #16]
 800e65a:	2201      	movs	r2, #1
 800e65c:	615a      	str	r2, [r3, #20]
 800e65e:	e7be      	b.n	800e5de <__gethex+0x362>
 800e660:	6922      	ldr	r2, [r4, #16]
 800e662:	455a      	cmp	r2, fp
 800e664:	dd0b      	ble.n	800e67e <__gethex+0x402>
 800e666:	2101      	movs	r1, #1
 800e668:	4620      	mov	r0, r4
 800e66a:	f7ff fd9f 	bl	800e1ac <rshift>
 800e66e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e672:	3701      	adds	r7, #1
 800e674:	42bb      	cmp	r3, r7
 800e676:	f6ff aee0 	blt.w	800e43a <__gethex+0x1be>
 800e67a:	2501      	movs	r5, #1
 800e67c:	e7c2      	b.n	800e604 <__gethex+0x388>
 800e67e:	f016 061f 	ands.w	r6, r6, #31
 800e682:	d0fa      	beq.n	800e67a <__gethex+0x3fe>
 800e684:	4453      	add	r3, sl
 800e686:	f1c6 0620 	rsb	r6, r6, #32
 800e68a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e68e:	f000 fa81 	bl	800eb94 <__hi0bits>
 800e692:	42b0      	cmp	r0, r6
 800e694:	dbe7      	blt.n	800e666 <__gethex+0x3ea>
 800e696:	e7f0      	b.n	800e67a <__gethex+0x3fe>
 800e698:	08014de9 	.word	0x08014de9

0800e69c <L_shift>:
 800e69c:	f1c2 0208 	rsb	r2, r2, #8
 800e6a0:	0092      	lsls	r2, r2, #2
 800e6a2:	b570      	push	{r4, r5, r6, lr}
 800e6a4:	f1c2 0620 	rsb	r6, r2, #32
 800e6a8:	6843      	ldr	r3, [r0, #4]
 800e6aa:	6804      	ldr	r4, [r0, #0]
 800e6ac:	fa03 f506 	lsl.w	r5, r3, r6
 800e6b0:	432c      	orrs	r4, r5
 800e6b2:	40d3      	lsrs	r3, r2
 800e6b4:	6004      	str	r4, [r0, #0]
 800e6b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e6ba:	4288      	cmp	r0, r1
 800e6bc:	d3f4      	bcc.n	800e6a8 <L_shift+0xc>
 800e6be:	bd70      	pop	{r4, r5, r6, pc}

0800e6c0 <__match>:
 800e6c0:	b530      	push	{r4, r5, lr}
 800e6c2:	6803      	ldr	r3, [r0, #0]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6ca:	b914      	cbnz	r4, 800e6d2 <__match+0x12>
 800e6cc:	6003      	str	r3, [r0, #0]
 800e6ce:	2001      	movs	r0, #1
 800e6d0:	bd30      	pop	{r4, r5, pc}
 800e6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e6da:	2d19      	cmp	r5, #25
 800e6dc:	bf98      	it	ls
 800e6de:	3220      	addls	r2, #32
 800e6e0:	42a2      	cmp	r2, r4
 800e6e2:	d0f0      	beq.n	800e6c6 <__match+0x6>
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	e7f3      	b.n	800e6d0 <__match+0x10>

0800e6e8 <__hexnan>:
 800e6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ec:	680b      	ldr	r3, [r1, #0]
 800e6ee:	6801      	ldr	r1, [r0, #0]
 800e6f0:	115e      	asrs	r6, r3, #5
 800e6f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e6f6:	f013 031f 	ands.w	r3, r3, #31
 800e6fa:	b087      	sub	sp, #28
 800e6fc:	bf18      	it	ne
 800e6fe:	3604      	addne	r6, #4
 800e700:	2500      	movs	r5, #0
 800e702:	1f37      	subs	r7, r6, #4
 800e704:	4682      	mov	sl, r0
 800e706:	4690      	mov	r8, r2
 800e708:	9301      	str	r3, [sp, #4]
 800e70a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e70e:	46b9      	mov	r9, r7
 800e710:	463c      	mov	r4, r7
 800e712:	9502      	str	r5, [sp, #8]
 800e714:	46ab      	mov	fp, r5
 800e716:	784a      	ldrb	r2, [r1, #1]
 800e718:	1c4b      	adds	r3, r1, #1
 800e71a:	9303      	str	r3, [sp, #12]
 800e71c:	b342      	cbz	r2, 800e770 <__hexnan+0x88>
 800e71e:	4610      	mov	r0, r2
 800e720:	9105      	str	r1, [sp, #20]
 800e722:	9204      	str	r2, [sp, #16]
 800e724:	f7ff fd94 	bl	800e250 <__hexdig_fun>
 800e728:	2800      	cmp	r0, #0
 800e72a:	d151      	bne.n	800e7d0 <__hexnan+0xe8>
 800e72c:	9a04      	ldr	r2, [sp, #16]
 800e72e:	9905      	ldr	r1, [sp, #20]
 800e730:	2a20      	cmp	r2, #32
 800e732:	d818      	bhi.n	800e766 <__hexnan+0x7e>
 800e734:	9b02      	ldr	r3, [sp, #8]
 800e736:	459b      	cmp	fp, r3
 800e738:	dd13      	ble.n	800e762 <__hexnan+0x7a>
 800e73a:	454c      	cmp	r4, r9
 800e73c:	d206      	bcs.n	800e74c <__hexnan+0x64>
 800e73e:	2d07      	cmp	r5, #7
 800e740:	dc04      	bgt.n	800e74c <__hexnan+0x64>
 800e742:	462a      	mov	r2, r5
 800e744:	4649      	mov	r1, r9
 800e746:	4620      	mov	r0, r4
 800e748:	f7ff ffa8 	bl	800e69c <L_shift>
 800e74c:	4544      	cmp	r4, r8
 800e74e:	d952      	bls.n	800e7f6 <__hexnan+0x10e>
 800e750:	2300      	movs	r3, #0
 800e752:	f1a4 0904 	sub.w	r9, r4, #4
 800e756:	f844 3c04 	str.w	r3, [r4, #-4]
 800e75a:	f8cd b008 	str.w	fp, [sp, #8]
 800e75e:	464c      	mov	r4, r9
 800e760:	461d      	mov	r5, r3
 800e762:	9903      	ldr	r1, [sp, #12]
 800e764:	e7d7      	b.n	800e716 <__hexnan+0x2e>
 800e766:	2a29      	cmp	r2, #41	@ 0x29
 800e768:	d157      	bne.n	800e81a <__hexnan+0x132>
 800e76a:	3102      	adds	r1, #2
 800e76c:	f8ca 1000 	str.w	r1, [sl]
 800e770:	f1bb 0f00 	cmp.w	fp, #0
 800e774:	d051      	beq.n	800e81a <__hexnan+0x132>
 800e776:	454c      	cmp	r4, r9
 800e778:	d206      	bcs.n	800e788 <__hexnan+0xa0>
 800e77a:	2d07      	cmp	r5, #7
 800e77c:	dc04      	bgt.n	800e788 <__hexnan+0xa0>
 800e77e:	462a      	mov	r2, r5
 800e780:	4649      	mov	r1, r9
 800e782:	4620      	mov	r0, r4
 800e784:	f7ff ff8a 	bl	800e69c <L_shift>
 800e788:	4544      	cmp	r4, r8
 800e78a:	d936      	bls.n	800e7fa <__hexnan+0x112>
 800e78c:	f1a8 0204 	sub.w	r2, r8, #4
 800e790:	4623      	mov	r3, r4
 800e792:	f853 1b04 	ldr.w	r1, [r3], #4
 800e796:	f842 1f04 	str.w	r1, [r2, #4]!
 800e79a:	429f      	cmp	r7, r3
 800e79c:	d2f9      	bcs.n	800e792 <__hexnan+0xaa>
 800e79e:	1b3b      	subs	r3, r7, r4
 800e7a0:	f023 0303 	bic.w	r3, r3, #3
 800e7a4:	3304      	adds	r3, #4
 800e7a6:	3401      	adds	r4, #1
 800e7a8:	3e03      	subs	r6, #3
 800e7aa:	42b4      	cmp	r4, r6
 800e7ac:	bf88      	it	hi
 800e7ae:	2304      	movhi	r3, #4
 800e7b0:	4443      	add	r3, r8
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f843 2b04 	str.w	r2, [r3], #4
 800e7b8:	429f      	cmp	r7, r3
 800e7ba:	d2fb      	bcs.n	800e7b4 <__hexnan+0xcc>
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	b91b      	cbnz	r3, 800e7c8 <__hexnan+0xe0>
 800e7c0:	4547      	cmp	r7, r8
 800e7c2:	d128      	bne.n	800e816 <__hexnan+0x12e>
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	603b      	str	r3, [r7, #0]
 800e7c8:	2005      	movs	r0, #5
 800e7ca:	b007      	add	sp, #28
 800e7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d0:	3501      	adds	r5, #1
 800e7d2:	2d08      	cmp	r5, #8
 800e7d4:	f10b 0b01 	add.w	fp, fp, #1
 800e7d8:	dd06      	ble.n	800e7e8 <__hexnan+0x100>
 800e7da:	4544      	cmp	r4, r8
 800e7dc:	d9c1      	bls.n	800e762 <__hexnan+0x7a>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e7e4:	2501      	movs	r5, #1
 800e7e6:	3c04      	subs	r4, #4
 800e7e8:	6822      	ldr	r2, [r4, #0]
 800e7ea:	f000 000f 	and.w	r0, r0, #15
 800e7ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e7f2:	6020      	str	r0, [r4, #0]
 800e7f4:	e7b5      	b.n	800e762 <__hexnan+0x7a>
 800e7f6:	2508      	movs	r5, #8
 800e7f8:	e7b3      	b.n	800e762 <__hexnan+0x7a>
 800e7fa:	9b01      	ldr	r3, [sp, #4]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d0dd      	beq.n	800e7bc <__hexnan+0xd4>
 800e800:	f1c3 0320 	rsb	r3, r3, #32
 800e804:	f04f 32ff 	mov.w	r2, #4294967295
 800e808:	40da      	lsrs	r2, r3
 800e80a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e80e:	4013      	ands	r3, r2
 800e810:	f846 3c04 	str.w	r3, [r6, #-4]
 800e814:	e7d2      	b.n	800e7bc <__hexnan+0xd4>
 800e816:	3f04      	subs	r7, #4
 800e818:	e7d0      	b.n	800e7bc <__hexnan+0xd4>
 800e81a:	2004      	movs	r0, #4
 800e81c:	e7d5      	b.n	800e7ca <__hexnan+0xe2>
	...

0800e820 <malloc>:
 800e820:	4b02      	ldr	r3, [pc, #8]	@ (800e82c <malloc+0xc>)
 800e822:	4601      	mov	r1, r0
 800e824:	6818      	ldr	r0, [r3, #0]
 800e826:	f000 b825 	b.w	800e874 <_malloc_r>
 800e82a:	bf00      	nop
 800e82c:	20000278 	.word	0x20000278

0800e830 <sbrk_aligned>:
 800e830:	b570      	push	{r4, r5, r6, lr}
 800e832:	4e0f      	ldr	r6, [pc, #60]	@ (800e870 <sbrk_aligned+0x40>)
 800e834:	460c      	mov	r4, r1
 800e836:	6831      	ldr	r1, [r6, #0]
 800e838:	4605      	mov	r5, r0
 800e83a:	b911      	cbnz	r1, 800e842 <sbrk_aligned+0x12>
 800e83c:	f000 ff9e 	bl	800f77c <_sbrk_r>
 800e840:	6030      	str	r0, [r6, #0]
 800e842:	4621      	mov	r1, r4
 800e844:	4628      	mov	r0, r5
 800e846:	f000 ff99 	bl	800f77c <_sbrk_r>
 800e84a:	1c43      	adds	r3, r0, #1
 800e84c:	d103      	bne.n	800e856 <sbrk_aligned+0x26>
 800e84e:	f04f 34ff 	mov.w	r4, #4294967295
 800e852:	4620      	mov	r0, r4
 800e854:	bd70      	pop	{r4, r5, r6, pc}
 800e856:	1cc4      	adds	r4, r0, #3
 800e858:	f024 0403 	bic.w	r4, r4, #3
 800e85c:	42a0      	cmp	r0, r4
 800e85e:	d0f8      	beq.n	800e852 <sbrk_aligned+0x22>
 800e860:	1a21      	subs	r1, r4, r0
 800e862:	4628      	mov	r0, r5
 800e864:	f000 ff8a 	bl	800f77c <_sbrk_r>
 800e868:	3001      	adds	r0, #1
 800e86a:	d1f2      	bne.n	800e852 <sbrk_aligned+0x22>
 800e86c:	e7ef      	b.n	800e84e <sbrk_aligned+0x1e>
 800e86e:	bf00      	nop
 800e870:	2001ebbc 	.word	0x2001ebbc

0800e874 <_malloc_r>:
 800e874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e878:	1ccd      	adds	r5, r1, #3
 800e87a:	f025 0503 	bic.w	r5, r5, #3
 800e87e:	3508      	adds	r5, #8
 800e880:	2d0c      	cmp	r5, #12
 800e882:	bf38      	it	cc
 800e884:	250c      	movcc	r5, #12
 800e886:	2d00      	cmp	r5, #0
 800e888:	4606      	mov	r6, r0
 800e88a:	db01      	blt.n	800e890 <_malloc_r+0x1c>
 800e88c:	42a9      	cmp	r1, r5
 800e88e:	d904      	bls.n	800e89a <_malloc_r+0x26>
 800e890:	230c      	movs	r3, #12
 800e892:	6033      	str	r3, [r6, #0]
 800e894:	2000      	movs	r0, #0
 800e896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e89a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e970 <_malloc_r+0xfc>
 800e89e:	f000 f87b 	bl	800e998 <__malloc_lock>
 800e8a2:	f8d8 3000 	ldr.w	r3, [r8]
 800e8a6:	461c      	mov	r4, r3
 800e8a8:	bb44      	cbnz	r4, 800e8fc <_malloc_r+0x88>
 800e8aa:	4629      	mov	r1, r5
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	f7ff ffbf 	bl	800e830 <sbrk_aligned>
 800e8b2:	1c43      	adds	r3, r0, #1
 800e8b4:	4604      	mov	r4, r0
 800e8b6:	d158      	bne.n	800e96a <_malloc_r+0xf6>
 800e8b8:	f8d8 4000 	ldr.w	r4, [r8]
 800e8bc:	4627      	mov	r7, r4
 800e8be:	2f00      	cmp	r7, #0
 800e8c0:	d143      	bne.n	800e94a <_malloc_r+0xd6>
 800e8c2:	2c00      	cmp	r4, #0
 800e8c4:	d04b      	beq.n	800e95e <_malloc_r+0xea>
 800e8c6:	6823      	ldr	r3, [r4, #0]
 800e8c8:	4639      	mov	r1, r7
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	eb04 0903 	add.w	r9, r4, r3
 800e8d0:	f000 ff54 	bl	800f77c <_sbrk_r>
 800e8d4:	4581      	cmp	r9, r0
 800e8d6:	d142      	bne.n	800e95e <_malloc_r+0xea>
 800e8d8:	6821      	ldr	r1, [r4, #0]
 800e8da:	1a6d      	subs	r5, r5, r1
 800e8dc:	4629      	mov	r1, r5
 800e8de:	4630      	mov	r0, r6
 800e8e0:	f7ff ffa6 	bl	800e830 <sbrk_aligned>
 800e8e4:	3001      	adds	r0, #1
 800e8e6:	d03a      	beq.n	800e95e <_malloc_r+0xea>
 800e8e8:	6823      	ldr	r3, [r4, #0]
 800e8ea:	442b      	add	r3, r5
 800e8ec:	6023      	str	r3, [r4, #0]
 800e8ee:	f8d8 3000 	ldr.w	r3, [r8]
 800e8f2:	685a      	ldr	r2, [r3, #4]
 800e8f4:	bb62      	cbnz	r2, 800e950 <_malloc_r+0xdc>
 800e8f6:	f8c8 7000 	str.w	r7, [r8]
 800e8fa:	e00f      	b.n	800e91c <_malloc_r+0xa8>
 800e8fc:	6822      	ldr	r2, [r4, #0]
 800e8fe:	1b52      	subs	r2, r2, r5
 800e900:	d420      	bmi.n	800e944 <_malloc_r+0xd0>
 800e902:	2a0b      	cmp	r2, #11
 800e904:	d917      	bls.n	800e936 <_malloc_r+0xc2>
 800e906:	1961      	adds	r1, r4, r5
 800e908:	42a3      	cmp	r3, r4
 800e90a:	6025      	str	r5, [r4, #0]
 800e90c:	bf18      	it	ne
 800e90e:	6059      	strne	r1, [r3, #4]
 800e910:	6863      	ldr	r3, [r4, #4]
 800e912:	bf08      	it	eq
 800e914:	f8c8 1000 	streq.w	r1, [r8]
 800e918:	5162      	str	r2, [r4, r5]
 800e91a:	604b      	str	r3, [r1, #4]
 800e91c:	4630      	mov	r0, r6
 800e91e:	f000 f841 	bl	800e9a4 <__malloc_unlock>
 800e922:	f104 000b 	add.w	r0, r4, #11
 800e926:	1d23      	adds	r3, r4, #4
 800e928:	f020 0007 	bic.w	r0, r0, #7
 800e92c:	1ac2      	subs	r2, r0, r3
 800e92e:	bf1c      	itt	ne
 800e930:	1a1b      	subne	r3, r3, r0
 800e932:	50a3      	strne	r3, [r4, r2]
 800e934:	e7af      	b.n	800e896 <_malloc_r+0x22>
 800e936:	6862      	ldr	r2, [r4, #4]
 800e938:	42a3      	cmp	r3, r4
 800e93a:	bf0c      	ite	eq
 800e93c:	f8c8 2000 	streq.w	r2, [r8]
 800e940:	605a      	strne	r2, [r3, #4]
 800e942:	e7eb      	b.n	800e91c <_malloc_r+0xa8>
 800e944:	4623      	mov	r3, r4
 800e946:	6864      	ldr	r4, [r4, #4]
 800e948:	e7ae      	b.n	800e8a8 <_malloc_r+0x34>
 800e94a:	463c      	mov	r4, r7
 800e94c:	687f      	ldr	r7, [r7, #4]
 800e94e:	e7b6      	b.n	800e8be <_malloc_r+0x4a>
 800e950:	461a      	mov	r2, r3
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	42a3      	cmp	r3, r4
 800e956:	d1fb      	bne.n	800e950 <_malloc_r+0xdc>
 800e958:	2300      	movs	r3, #0
 800e95a:	6053      	str	r3, [r2, #4]
 800e95c:	e7de      	b.n	800e91c <_malloc_r+0xa8>
 800e95e:	230c      	movs	r3, #12
 800e960:	6033      	str	r3, [r6, #0]
 800e962:	4630      	mov	r0, r6
 800e964:	f000 f81e 	bl	800e9a4 <__malloc_unlock>
 800e968:	e794      	b.n	800e894 <_malloc_r+0x20>
 800e96a:	6005      	str	r5, [r0, #0]
 800e96c:	e7d6      	b.n	800e91c <_malloc_r+0xa8>
 800e96e:	bf00      	nop
 800e970:	2001ebc0 	.word	0x2001ebc0

0800e974 <__ascii_mbtowc>:
 800e974:	b082      	sub	sp, #8
 800e976:	b901      	cbnz	r1, 800e97a <__ascii_mbtowc+0x6>
 800e978:	a901      	add	r1, sp, #4
 800e97a:	b142      	cbz	r2, 800e98e <__ascii_mbtowc+0x1a>
 800e97c:	b14b      	cbz	r3, 800e992 <__ascii_mbtowc+0x1e>
 800e97e:	7813      	ldrb	r3, [r2, #0]
 800e980:	600b      	str	r3, [r1, #0]
 800e982:	7812      	ldrb	r2, [r2, #0]
 800e984:	1e10      	subs	r0, r2, #0
 800e986:	bf18      	it	ne
 800e988:	2001      	movne	r0, #1
 800e98a:	b002      	add	sp, #8
 800e98c:	4770      	bx	lr
 800e98e:	4610      	mov	r0, r2
 800e990:	e7fb      	b.n	800e98a <__ascii_mbtowc+0x16>
 800e992:	f06f 0001 	mvn.w	r0, #1
 800e996:	e7f8      	b.n	800e98a <__ascii_mbtowc+0x16>

0800e998 <__malloc_lock>:
 800e998:	4801      	ldr	r0, [pc, #4]	@ (800e9a0 <__malloc_lock+0x8>)
 800e99a:	f7fe bd28 	b.w	800d3ee <__retarget_lock_acquire_recursive>
 800e99e:	bf00      	nop
 800e9a0:	2001ebb8 	.word	0x2001ebb8

0800e9a4 <__malloc_unlock>:
 800e9a4:	4801      	ldr	r0, [pc, #4]	@ (800e9ac <__malloc_unlock+0x8>)
 800e9a6:	f7fe bd23 	b.w	800d3f0 <__retarget_lock_release_recursive>
 800e9aa:	bf00      	nop
 800e9ac:	2001ebb8 	.word	0x2001ebb8

0800e9b0 <_Balloc>:
 800e9b0:	b570      	push	{r4, r5, r6, lr}
 800e9b2:	69c6      	ldr	r6, [r0, #28]
 800e9b4:	4604      	mov	r4, r0
 800e9b6:	460d      	mov	r5, r1
 800e9b8:	b976      	cbnz	r6, 800e9d8 <_Balloc+0x28>
 800e9ba:	2010      	movs	r0, #16
 800e9bc:	f7ff ff30 	bl	800e820 <malloc>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	61e0      	str	r0, [r4, #28]
 800e9c4:	b920      	cbnz	r0, 800e9d0 <_Balloc+0x20>
 800e9c6:	4b18      	ldr	r3, [pc, #96]	@ (800ea28 <_Balloc+0x78>)
 800e9c8:	4818      	ldr	r0, [pc, #96]	@ (800ea2c <_Balloc+0x7c>)
 800e9ca:	216b      	movs	r1, #107	@ 0x6b
 800e9cc:	f7fe fd2e 	bl	800d42c <__assert_func>
 800e9d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9d4:	6006      	str	r6, [r0, #0]
 800e9d6:	60c6      	str	r6, [r0, #12]
 800e9d8:	69e6      	ldr	r6, [r4, #28]
 800e9da:	68f3      	ldr	r3, [r6, #12]
 800e9dc:	b183      	cbz	r3, 800ea00 <_Balloc+0x50>
 800e9de:	69e3      	ldr	r3, [r4, #28]
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e9e6:	b9b8      	cbnz	r0, 800ea18 <_Balloc+0x68>
 800e9e8:	2101      	movs	r1, #1
 800e9ea:	fa01 f605 	lsl.w	r6, r1, r5
 800e9ee:	1d72      	adds	r2, r6, #5
 800e9f0:	0092      	lsls	r2, r2, #2
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f000 fed9 	bl	800f7aa <_calloc_r>
 800e9f8:	b160      	cbz	r0, 800ea14 <_Balloc+0x64>
 800e9fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e9fe:	e00e      	b.n	800ea1e <_Balloc+0x6e>
 800ea00:	2221      	movs	r2, #33	@ 0x21
 800ea02:	2104      	movs	r1, #4
 800ea04:	4620      	mov	r0, r4
 800ea06:	f000 fed0 	bl	800f7aa <_calloc_r>
 800ea0a:	69e3      	ldr	r3, [r4, #28]
 800ea0c:	60f0      	str	r0, [r6, #12]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1e4      	bne.n	800e9de <_Balloc+0x2e>
 800ea14:	2000      	movs	r0, #0
 800ea16:	bd70      	pop	{r4, r5, r6, pc}
 800ea18:	6802      	ldr	r2, [r0, #0]
 800ea1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea1e:	2300      	movs	r3, #0
 800ea20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea24:	e7f7      	b.n	800ea16 <_Balloc+0x66>
 800ea26:	bf00      	nop
 800ea28:	08014c3c 	.word	0x08014c3c
 800ea2c:	08014e5a 	.word	0x08014e5a

0800ea30 <_Bfree>:
 800ea30:	b570      	push	{r4, r5, r6, lr}
 800ea32:	69c6      	ldr	r6, [r0, #28]
 800ea34:	4605      	mov	r5, r0
 800ea36:	460c      	mov	r4, r1
 800ea38:	b976      	cbnz	r6, 800ea58 <_Bfree+0x28>
 800ea3a:	2010      	movs	r0, #16
 800ea3c:	f7ff fef0 	bl	800e820 <malloc>
 800ea40:	4602      	mov	r2, r0
 800ea42:	61e8      	str	r0, [r5, #28]
 800ea44:	b920      	cbnz	r0, 800ea50 <_Bfree+0x20>
 800ea46:	4b09      	ldr	r3, [pc, #36]	@ (800ea6c <_Bfree+0x3c>)
 800ea48:	4809      	ldr	r0, [pc, #36]	@ (800ea70 <_Bfree+0x40>)
 800ea4a:	218f      	movs	r1, #143	@ 0x8f
 800ea4c:	f7fe fcee 	bl	800d42c <__assert_func>
 800ea50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea54:	6006      	str	r6, [r0, #0]
 800ea56:	60c6      	str	r6, [r0, #12]
 800ea58:	b13c      	cbz	r4, 800ea6a <_Bfree+0x3a>
 800ea5a:	69eb      	ldr	r3, [r5, #28]
 800ea5c:	6862      	ldr	r2, [r4, #4]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea64:	6021      	str	r1, [r4, #0]
 800ea66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea6a:	bd70      	pop	{r4, r5, r6, pc}
 800ea6c:	08014c3c 	.word	0x08014c3c
 800ea70:	08014e5a 	.word	0x08014e5a

0800ea74 <__multadd>:
 800ea74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea78:	690d      	ldr	r5, [r1, #16]
 800ea7a:	4607      	mov	r7, r0
 800ea7c:	460c      	mov	r4, r1
 800ea7e:	461e      	mov	r6, r3
 800ea80:	f101 0c14 	add.w	ip, r1, #20
 800ea84:	2000      	movs	r0, #0
 800ea86:	f8dc 3000 	ldr.w	r3, [ip]
 800ea8a:	b299      	uxth	r1, r3
 800ea8c:	fb02 6101 	mla	r1, r2, r1, r6
 800ea90:	0c1e      	lsrs	r6, r3, #16
 800ea92:	0c0b      	lsrs	r3, r1, #16
 800ea94:	fb02 3306 	mla	r3, r2, r6, r3
 800ea98:	b289      	uxth	r1, r1
 800ea9a:	3001      	adds	r0, #1
 800ea9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eaa0:	4285      	cmp	r5, r0
 800eaa2:	f84c 1b04 	str.w	r1, [ip], #4
 800eaa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eaaa:	dcec      	bgt.n	800ea86 <__multadd+0x12>
 800eaac:	b30e      	cbz	r6, 800eaf2 <__multadd+0x7e>
 800eaae:	68a3      	ldr	r3, [r4, #8]
 800eab0:	42ab      	cmp	r3, r5
 800eab2:	dc19      	bgt.n	800eae8 <__multadd+0x74>
 800eab4:	6861      	ldr	r1, [r4, #4]
 800eab6:	4638      	mov	r0, r7
 800eab8:	3101      	adds	r1, #1
 800eaba:	f7ff ff79 	bl	800e9b0 <_Balloc>
 800eabe:	4680      	mov	r8, r0
 800eac0:	b928      	cbnz	r0, 800eace <__multadd+0x5a>
 800eac2:	4602      	mov	r2, r0
 800eac4:	4b0c      	ldr	r3, [pc, #48]	@ (800eaf8 <__multadd+0x84>)
 800eac6:	480d      	ldr	r0, [pc, #52]	@ (800eafc <__multadd+0x88>)
 800eac8:	21ba      	movs	r1, #186	@ 0xba
 800eaca:	f7fe fcaf 	bl	800d42c <__assert_func>
 800eace:	6922      	ldr	r2, [r4, #16]
 800ead0:	3202      	adds	r2, #2
 800ead2:	f104 010c 	add.w	r1, r4, #12
 800ead6:	0092      	lsls	r2, r2, #2
 800ead8:	300c      	adds	r0, #12
 800eada:	f7fe fc8a 	bl	800d3f2 <memcpy>
 800eade:	4621      	mov	r1, r4
 800eae0:	4638      	mov	r0, r7
 800eae2:	f7ff ffa5 	bl	800ea30 <_Bfree>
 800eae6:	4644      	mov	r4, r8
 800eae8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eaec:	3501      	adds	r5, #1
 800eaee:	615e      	str	r6, [r3, #20]
 800eaf0:	6125      	str	r5, [r4, #16]
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf8:	08014de9 	.word	0x08014de9
 800eafc:	08014e5a 	.word	0x08014e5a

0800eb00 <__s2b>:
 800eb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb04:	460c      	mov	r4, r1
 800eb06:	4615      	mov	r5, r2
 800eb08:	461f      	mov	r7, r3
 800eb0a:	2209      	movs	r2, #9
 800eb0c:	3308      	adds	r3, #8
 800eb0e:	4606      	mov	r6, r0
 800eb10:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb14:	2100      	movs	r1, #0
 800eb16:	2201      	movs	r2, #1
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	db09      	blt.n	800eb30 <__s2b+0x30>
 800eb1c:	4630      	mov	r0, r6
 800eb1e:	f7ff ff47 	bl	800e9b0 <_Balloc>
 800eb22:	b940      	cbnz	r0, 800eb36 <__s2b+0x36>
 800eb24:	4602      	mov	r2, r0
 800eb26:	4b19      	ldr	r3, [pc, #100]	@ (800eb8c <__s2b+0x8c>)
 800eb28:	4819      	ldr	r0, [pc, #100]	@ (800eb90 <__s2b+0x90>)
 800eb2a:	21d3      	movs	r1, #211	@ 0xd3
 800eb2c:	f7fe fc7e 	bl	800d42c <__assert_func>
 800eb30:	0052      	lsls	r2, r2, #1
 800eb32:	3101      	adds	r1, #1
 800eb34:	e7f0      	b.n	800eb18 <__s2b+0x18>
 800eb36:	9b08      	ldr	r3, [sp, #32]
 800eb38:	6143      	str	r3, [r0, #20]
 800eb3a:	2d09      	cmp	r5, #9
 800eb3c:	f04f 0301 	mov.w	r3, #1
 800eb40:	6103      	str	r3, [r0, #16]
 800eb42:	dd16      	ble.n	800eb72 <__s2b+0x72>
 800eb44:	f104 0909 	add.w	r9, r4, #9
 800eb48:	46c8      	mov	r8, r9
 800eb4a:	442c      	add	r4, r5
 800eb4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eb50:	4601      	mov	r1, r0
 800eb52:	3b30      	subs	r3, #48	@ 0x30
 800eb54:	220a      	movs	r2, #10
 800eb56:	4630      	mov	r0, r6
 800eb58:	f7ff ff8c 	bl	800ea74 <__multadd>
 800eb5c:	45a0      	cmp	r8, r4
 800eb5e:	d1f5      	bne.n	800eb4c <__s2b+0x4c>
 800eb60:	f1a5 0408 	sub.w	r4, r5, #8
 800eb64:	444c      	add	r4, r9
 800eb66:	1b2d      	subs	r5, r5, r4
 800eb68:	1963      	adds	r3, r4, r5
 800eb6a:	42bb      	cmp	r3, r7
 800eb6c:	db04      	blt.n	800eb78 <__s2b+0x78>
 800eb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb72:	340a      	adds	r4, #10
 800eb74:	2509      	movs	r5, #9
 800eb76:	e7f6      	b.n	800eb66 <__s2b+0x66>
 800eb78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eb7c:	4601      	mov	r1, r0
 800eb7e:	3b30      	subs	r3, #48	@ 0x30
 800eb80:	220a      	movs	r2, #10
 800eb82:	4630      	mov	r0, r6
 800eb84:	f7ff ff76 	bl	800ea74 <__multadd>
 800eb88:	e7ee      	b.n	800eb68 <__s2b+0x68>
 800eb8a:	bf00      	nop
 800eb8c:	08014de9 	.word	0x08014de9
 800eb90:	08014e5a 	.word	0x08014e5a

0800eb94 <__hi0bits>:
 800eb94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eb98:	4603      	mov	r3, r0
 800eb9a:	bf36      	itet	cc
 800eb9c:	0403      	lslcc	r3, r0, #16
 800eb9e:	2000      	movcs	r0, #0
 800eba0:	2010      	movcc	r0, #16
 800eba2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eba6:	bf3c      	itt	cc
 800eba8:	021b      	lslcc	r3, r3, #8
 800ebaa:	3008      	addcc	r0, #8
 800ebac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ebb0:	bf3c      	itt	cc
 800ebb2:	011b      	lslcc	r3, r3, #4
 800ebb4:	3004      	addcc	r0, #4
 800ebb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebba:	bf3c      	itt	cc
 800ebbc:	009b      	lslcc	r3, r3, #2
 800ebbe:	3002      	addcc	r0, #2
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	db05      	blt.n	800ebd0 <__hi0bits+0x3c>
 800ebc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ebc8:	f100 0001 	add.w	r0, r0, #1
 800ebcc:	bf08      	it	eq
 800ebce:	2020      	moveq	r0, #32
 800ebd0:	4770      	bx	lr

0800ebd2 <__lo0bits>:
 800ebd2:	6803      	ldr	r3, [r0, #0]
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	f013 0007 	ands.w	r0, r3, #7
 800ebda:	d00b      	beq.n	800ebf4 <__lo0bits+0x22>
 800ebdc:	07d9      	lsls	r1, r3, #31
 800ebde:	d421      	bmi.n	800ec24 <__lo0bits+0x52>
 800ebe0:	0798      	lsls	r0, r3, #30
 800ebe2:	bf49      	itett	mi
 800ebe4:	085b      	lsrmi	r3, r3, #1
 800ebe6:	089b      	lsrpl	r3, r3, #2
 800ebe8:	2001      	movmi	r0, #1
 800ebea:	6013      	strmi	r3, [r2, #0]
 800ebec:	bf5c      	itt	pl
 800ebee:	6013      	strpl	r3, [r2, #0]
 800ebf0:	2002      	movpl	r0, #2
 800ebf2:	4770      	bx	lr
 800ebf4:	b299      	uxth	r1, r3
 800ebf6:	b909      	cbnz	r1, 800ebfc <__lo0bits+0x2a>
 800ebf8:	0c1b      	lsrs	r3, r3, #16
 800ebfa:	2010      	movs	r0, #16
 800ebfc:	b2d9      	uxtb	r1, r3
 800ebfe:	b909      	cbnz	r1, 800ec04 <__lo0bits+0x32>
 800ec00:	3008      	adds	r0, #8
 800ec02:	0a1b      	lsrs	r3, r3, #8
 800ec04:	0719      	lsls	r1, r3, #28
 800ec06:	bf04      	itt	eq
 800ec08:	091b      	lsreq	r3, r3, #4
 800ec0a:	3004      	addeq	r0, #4
 800ec0c:	0799      	lsls	r1, r3, #30
 800ec0e:	bf04      	itt	eq
 800ec10:	089b      	lsreq	r3, r3, #2
 800ec12:	3002      	addeq	r0, #2
 800ec14:	07d9      	lsls	r1, r3, #31
 800ec16:	d403      	bmi.n	800ec20 <__lo0bits+0x4e>
 800ec18:	085b      	lsrs	r3, r3, #1
 800ec1a:	f100 0001 	add.w	r0, r0, #1
 800ec1e:	d003      	beq.n	800ec28 <__lo0bits+0x56>
 800ec20:	6013      	str	r3, [r2, #0]
 800ec22:	4770      	bx	lr
 800ec24:	2000      	movs	r0, #0
 800ec26:	4770      	bx	lr
 800ec28:	2020      	movs	r0, #32
 800ec2a:	4770      	bx	lr

0800ec2c <__i2b>:
 800ec2c:	b510      	push	{r4, lr}
 800ec2e:	460c      	mov	r4, r1
 800ec30:	2101      	movs	r1, #1
 800ec32:	f7ff febd 	bl	800e9b0 <_Balloc>
 800ec36:	4602      	mov	r2, r0
 800ec38:	b928      	cbnz	r0, 800ec46 <__i2b+0x1a>
 800ec3a:	4b05      	ldr	r3, [pc, #20]	@ (800ec50 <__i2b+0x24>)
 800ec3c:	4805      	ldr	r0, [pc, #20]	@ (800ec54 <__i2b+0x28>)
 800ec3e:	f240 1145 	movw	r1, #325	@ 0x145
 800ec42:	f7fe fbf3 	bl	800d42c <__assert_func>
 800ec46:	2301      	movs	r3, #1
 800ec48:	6144      	str	r4, [r0, #20]
 800ec4a:	6103      	str	r3, [r0, #16]
 800ec4c:	bd10      	pop	{r4, pc}
 800ec4e:	bf00      	nop
 800ec50:	08014de9 	.word	0x08014de9
 800ec54:	08014e5a 	.word	0x08014e5a

0800ec58 <__multiply>:
 800ec58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec5c:	4617      	mov	r7, r2
 800ec5e:	690a      	ldr	r2, [r1, #16]
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	bfa8      	it	ge
 800ec66:	463b      	movge	r3, r7
 800ec68:	4689      	mov	r9, r1
 800ec6a:	bfa4      	itt	ge
 800ec6c:	460f      	movge	r7, r1
 800ec6e:	4699      	movge	r9, r3
 800ec70:	693d      	ldr	r5, [r7, #16]
 800ec72:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	6879      	ldr	r1, [r7, #4]
 800ec7a:	eb05 060a 	add.w	r6, r5, sl
 800ec7e:	42b3      	cmp	r3, r6
 800ec80:	b085      	sub	sp, #20
 800ec82:	bfb8      	it	lt
 800ec84:	3101      	addlt	r1, #1
 800ec86:	f7ff fe93 	bl	800e9b0 <_Balloc>
 800ec8a:	b930      	cbnz	r0, 800ec9a <__multiply+0x42>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	4b41      	ldr	r3, [pc, #260]	@ (800ed94 <__multiply+0x13c>)
 800ec90:	4841      	ldr	r0, [pc, #260]	@ (800ed98 <__multiply+0x140>)
 800ec92:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ec96:	f7fe fbc9 	bl	800d42c <__assert_func>
 800ec9a:	f100 0414 	add.w	r4, r0, #20
 800ec9e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800eca2:	4623      	mov	r3, r4
 800eca4:	2200      	movs	r2, #0
 800eca6:	4573      	cmp	r3, lr
 800eca8:	d320      	bcc.n	800ecec <__multiply+0x94>
 800ecaa:	f107 0814 	add.w	r8, r7, #20
 800ecae:	f109 0114 	add.w	r1, r9, #20
 800ecb2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ecb6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ecba:	9302      	str	r3, [sp, #8]
 800ecbc:	1beb      	subs	r3, r5, r7
 800ecbe:	3b15      	subs	r3, #21
 800ecc0:	f023 0303 	bic.w	r3, r3, #3
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	3715      	adds	r7, #21
 800ecc8:	42bd      	cmp	r5, r7
 800ecca:	bf38      	it	cc
 800eccc:	2304      	movcc	r3, #4
 800ecce:	9301      	str	r3, [sp, #4]
 800ecd0:	9b02      	ldr	r3, [sp, #8]
 800ecd2:	9103      	str	r1, [sp, #12]
 800ecd4:	428b      	cmp	r3, r1
 800ecd6:	d80c      	bhi.n	800ecf2 <__multiply+0x9a>
 800ecd8:	2e00      	cmp	r6, #0
 800ecda:	dd03      	ble.n	800ece4 <__multiply+0x8c>
 800ecdc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d055      	beq.n	800ed90 <__multiply+0x138>
 800ece4:	6106      	str	r6, [r0, #16]
 800ece6:	b005      	add	sp, #20
 800ece8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecec:	f843 2b04 	str.w	r2, [r3], #4
 800ecf0:	e7d9      	b.n	800eca6 <__multiply+0x4e>
 800ecf2:	f8b1 a000 	ldrh.w	sl, [r1]
 800ecf6:	f1ba 0f00 	cmp.w	sl, #0
 800ecfa:	d01f      	beq.n	800ed3c <__multiply+0xe4>
 800ecfc:	46c4      	mov	ip, r8
 800ecfe:	46a1      	mov	r9, r4
 800ed00:	2700      	movs	r7, #0
 800ed02:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ed06:	f8d9 3000 	ldr.w	r3, [r9]
 800ed0a:	fa1f fb82 	uxth.w	fp, r2
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	fb0a 330b 	mla	r3, sl, fp, r3
 800ed14:	443b      	add	r3, r7
 800ed16:	f8d9 7000 	ldr.w	r7, [r9]
 800ed1a:	0c12      	lsrs	r2, r2, #16
 800ed1c:	0c3f      	lsrs	r7, r7, #16
 800ed1e:	fb0a 7202 	mla	r2, sl, r2, r7
 800ed22:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed2c:	4565      	cmp	r5, ip
 800ed2e:	f849 3b04 	str.w	r3, [r9], #4
 800ed32:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ed36:	d8e4      	bhi.n	800ed02 <__multiply+0xaa>
 800ed38:	9b01      	ldr	r3, [sp, #4]
 800ed3a:	50e7      	str	r7, [r4, r3]
 800ed3c:	9b03      	ldr	r3, [sp, #12]
 800ed3e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ed42:	3104      	adds	r1, #4
 800ed44:	f1b9 0f00 	cmp.w	r9, #0
 800ed48:	d020      	beq.n	800ed8c <__multiply+0x134>
 800ed4a:	6823      	ldr	r3, [r4, #0]
 800ed4c:	4647      	mov	r7, r8
 800ed4e:	46a4      	mov	ip, r4
 800ed50:	f04f 0a00 	mov.w	sl, #0
 800ed54:	f8b7 b000 	ldrh.w	fp, [r7]
 800ed58:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ed5c:	fb09 220b 	mla	r2, r9, fp, r2
 800ed60:	4452      	add	r2, sl
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed68:	f84c 3b04 	str.w	r3, [ip], #4
 800ed6c:	f857 3b04 	ldr.w	r3, [r7], #4
 800ed70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed74:	f8bc 3000 	ldrh.w	r3, [ip]
 800ed78:	fb09 330a 	mla	r3, r9, sl, r3
 800ed7c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ed80:	42bd      	cmp	r5, r7
 800ed82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed86:	d8e5      	bhi.n	800ed54 <__multiply+0xfc>
 800ed88:	9a01      	ldr	r2, [sp, #4]
 800ed8a:	50a3      	str	r3, [r4, r2]
 800ed8c:	3404      	adds	r4, #4
 800ed8e:	e79f      	b.n	800ecd0 <__multiply+0x78>
 800ed90:	3e01      	subs	r6, #1
 800ed92:	e7a1      	b.n	800ecd8 <__multiply+0x80>
 800ed94:	08014de9 	.word	0x08014de9
 800ed98:	08014e5a 	.word	0x08014e5a

0800ed9c <__pow5mult>:
 800ed9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eda0:	4615      	mov	r5, r2
 800eda2:	f012 0203 	ands.w	r2, r2, #3
 800eda6:	4607      	mov	r7, r0
 800eda8:	460e      	mov	r6, r1
 800edaa:	d007      	beq.n	800edbc <__pow5mult+0x20>
 800edac:	4c25      	ldr	r4, [pc, #148]	@ (800ee44 <__pow5mult+0xa8>)
 800edae:	3a01      	subs	r2, #1
 800edb0:	2300      	movs	r3, #0
 800edb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800edb6:	f7ff fe5d 	bl	800ea74 <__multadd>
 800edba:	4606      	mov	r6, r0
 800edbc:	10ad      	asrs	r5, r5, #2
 800edbe:	d03d      	beq.n	800ee3c <__pow5mult+0xa0>
 800edc0:	69fc      	ldr	r4, [r7, #28]
 800edc2:	b97c      	cbnz	r4, 800ede4 <__pow5mult+0x48>
 800edc4:	2010      	movs	r0, #16
 800edc6:	f7ff fd2b 	bl	800e820 <malloc>
 800edca:	4602      	mov	r2, r0
 800edcc:	61f8      	str	r0, [r7, #28]
 800edce:	b928      	cbnz	r0, 800eddc <__pow5mult+0x40>
 800edd0:	4b1d      	ldr	r3, [pc, #116]	@ (800ee48 <__pow5mult+0xac>)
 800edd2:	481e      	ldr	r0, [pc, #120]	@ (800ee4c <__pow5mult+0xb0>)
 800edd4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800edd8:	f7fe fb28 	bl	800d42c <__assert_func>
 800eddc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ede0:	6004      	str	r4, [r0, #0]
 800ede2:	60c4      	str	r4, [r0, #12]
 800ede4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ede8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800edec:	b94c      	cbnz	r4, 800ee02 <__pow5mult+0x66>
 800edee:	f240 2171 	movw	r1, #625	@ 0x271
 800edf2:	4638      	mov	r0, r7
 800edf4:	f7ff ff1a 	bl	800ec2c <__i2b>
 800edf8:	2300      	movs	r3, #0
 800edfa:	f8c8 0008 	str.w	r0, [r8, #8]
 800edfe:	4604      	mov	r4, r0
 800ee00:	6003      	str	r3, [r0, #0]
 800ee02:	f04f 0900 	mov.w	r9, #0
 800ee06:	07eb      	lsls	r3, r5, #31
 800ee08:	d50a      	bpl.n	800ee20 <__pow5mult+0x84>
 800ee0a:	4631      	mov	r1, r6
 800ee0c:	4622      	mov	r2, r4
 800ee0e:	4638      	mov	r0, r7
 800ee10:	f7ff ff22 	bl	800ec58 <__multiply>
 800ee14:	4631      	mov	r1, r6
 800ee16:	4680      	mov	r8, r0
 800ee18:	4638      	mov	r0, r7
 800ee1a:	f7ff fe09 	bl	800ea30 <_Bfree>
 800ee1e:	4646      	mov	r6, r8
 800ee20:	106d      	asrs	r5, r5, #1
 800ee22:	d00b      	beq.n	800ee3c <__pow5mult+0xa0>
 800ee24:	6820      	ldr	r0, [r4, #0]
 800ee26:	b938      	cbnz	r0, 800ee38 <__pow5mult+0x9c>
 800ee28:	4622      	mov	r2, r4
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	4638      	mov	r0, r7
 800ee2e:	f7ff ff13 	bl	800ec58 <__multiply>
 800ee32:	6020      	str	r0, [r4, #0]
 800ee34:	f8c0 9000 	str.w	r9, [r0]
 800ee38:	4604      	mov	r4, r0
 800ee3a:	e7e4      	b.n	800ee06 <__pow5mult+0x6a>
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee42:	bf00      	nop
 800ee44:	0801501c 	.word	0x0801501c
 800ee48:	08014c3c 	.word	0x08014c3c
 800ee4c:	08014e5a 	.word	0x08014e5a

0800ee50 <__lshift>:
 800ee50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee54:	460c      	mov	r4, r1
 800ee56:	6849      	ldr	r1, [r1, #4]
 800ee58:	6923      	ldr	r3, [r4, #16]
 800ee5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee5e:	68a3      	ldr	r3, [r4, #8]
 800ee60:	4607      	mov	r7, r0
 800ee62:	4691      	mov	r9, r2
 800ee64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee68:	f108 0601 	add.w	r6, r8, #1
 800ee6c:	42b3      	cmp	r3, r6
 800ee6e:	db0b      	blt.n	800ee88 <__lshift+0x38>
 800ee70:	4638      	mov	r0, r7
 800ee72:	f7ff fd9d 	bl	800e9b0 <_Balloc>
 800ee76:	4605      	mov	r5, r0
 800ee78:	b948      	cbnz	r0, 800ee8e <__lshift+0x3e>
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	4b28      	ldr	r3, [pc, #160]	@ (800ef20 <__lshift+0xd0>)
 800ee7e:	4829      	ldr	r0, [pc, #164]	@ (800ef24 <__lshift+0xd4>)
 800ee80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ee84:	f7fe fad2 	bl	800d42c <__assert_func>
 800ee88:	3101      	adds	r1, #1
 800ee8a:	005b      	lsls	r3, r3, #1
 800ee8c:	e7ee      	b.n	800ee6c <__lshift+0x1c>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	f100 0114 	add.w	r1, r0, #20
 800ee94:	f100 0210 	add.w	r2, r0, #16
 800ee98:	4618      	mov	r0, r3
 800ee9a:	4553      	cmp	r3, sl
 800ee9c:	db33      	blt.n	800ef06 <__lshift+0xb6>
 800ee9e:	6920      	ldr	r0, [r4, #16]
 800eea0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eea4:	f104 0314 	add.w	r3, r4, #20
 800eea8:	f019 091f 	ands.w	r9, r9, #31
 800eeac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eeb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eeb4:	d02b      	beq.n	800ef0e <__lshift+0xbe>
 800eeb6:	f1c9 0e20 	rsb	lr, r9, #32
 800eeba:	468a      	mov	sl, r1
 800eebc:	2200      	movs	r2, #0
 800eebe:	6818      	ldr	r0, [r3, #0]
 800eec0:	fa00 f009 	lsl.w	r0, r0, r9
 800eec4:	4310      	orrs	r0, r2
 800eec6:	f84a 0b04 	str.w	r0, [sl], #4
 800eeca:	f853 2b04 	ldr.w	r2, [r3], #4
 800eece:	459c      	cmp	ip, r3
 800eed0:	fa22 f20e 	lsr.w	r2, r2, lr
 800eed4:	d8f3      	bhi.n	800eebe <__lshift+0x6e>
 800eed6:	ebac 0304 	sub.w	r3, ip, r4
 800eeda:	3b15      	subs	r3, #21
 800eedc:	f023 0303 	bic.w	r3, r3, #3
 800eee0:	3304      	adds	r3, #4
 800eee2:	f104 0015 	add.w	r0, r4, #21
 800eee6:	4560      	cmp	r0, ip
 800eee8:	bf88      	it	hi
 800eeea:	2304      	movhi	r3, #4
 800eeec:	50ca      	str	r2, [r1, r3]
 800eeee:	b10a      	cbz	r2, 800eef4 <__lshift+0xa4>
 800eef0:	f108 0602 	add.w	r6, r8, #2
 800eef4:	3e01      	subs	r6, #1
 800eef6:	4638      	mov	r0, r7
 800eef8:	612e      	str	r6, [r5, #16]
 800eefa:	4621      	mov	r1, r4
 800eefc:	f7ff fd98 	bl	800ea30 <_Bfree>
 800ef00:	4628      	mov	r0, r5
 800ef02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef06:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	e7c5      	b.n	800ee9a <__lshift+0x4a>
 800ef0e:	3904      	subs	r1, #4
 800ef10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef14:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef18:	459c      	cmp	ip, r3
 800ef1a:	d8f9      	bhi.n	800ef10 <__lshift+0xc0>
 800ef1c:	e7ea      	b.n	800eef4 <__lshift+0xa4>
 800ef1e:	bf00      	nop
 800ef20:	08014de9 	.word	0x08014de9
 800ef24:	08014e5a 	.word	0x08014e5a

0800ef28 <__mcmp>:
 800ef28:	690a      	ldr	r2, [r1, #16]
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	6900      	ldr	r0, [r0, #16]
 800ef2e:	1a80      	subs	r0, r0, r2
 800ef30:	b530      	push	{r4, r5, lr}
 800ef32:	d10e      	bne.n	800ef52 <__mcmp+0x2a>
 800ef34:	3314      	adds	r3, #20
 800ef36:	3114      	adds	r1, #20
 800ef38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ef3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ef40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ef44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ef48:	4295      	cmp	r5, r2
 800ef4a:	d003      	beq.n	800ef54 <__mcmp+0x2c>
 800ef4c:	d205      	bcs.n	800ef5a <__mcmp+0x32>
 800ef4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef52:	bd30      	pop	{r4, r5, pc}
 800ef54:	42a3      	cmp	r3, r4
 800ef56:	d3f3      	bcc.n	800ef40 <__mcmp+0x18>
 800ef58:	e7fb      	b.n	800ef52 <__mcmp+0x2a>
 800ef5a:	2001      	movs	r0, #1
 800ef5c:	e7f9      	b.n	800ef52 <__mcmp+0x2a>
	...

0800ef60 <__mdiff>:
 800ef60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef64:	4689      	mov	r9, r1
 800ef66:	4606      	mov	r6, r0
 800ef68:	4611      	mov	r1, r2
 800ef6a:	4648      	mov	r0, r9
 800ef6c:	4614      	mov	r4, r2
 800ef6e:	f7ff ffdb 	bl	800ef28 <__mcmp>
 800ef72:	1e05      	subs	r5, r0, #0
 800ef74:	d112      	bne.n	800ef9c <__mdiff+0x3c>
 800ef76:	4629      	mov	r1, r5
 800ef78:	4630      	mov	r0, r6
 800ef7a:	f7ff fd19 	bl	800e9b0 <_Balloc>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	b928      	cbnz	r0, 800ef8e <__mdiff+0x2e>
 800ef82:	4b3f      	ldr	r3, [pc, #252]	@ (800f080 <__mdiff+0x120>)
 800ef84:	f240 2137 	movw	r1, #567	@ 0x237
 800ef88:	483e      	ldr	r0, [pc, #248]	@ (800f084 <__mdiff+0x124>)
 800ef8a:	f7fe fa4f 	bl	800d42c <__assert_func>
 800ef8e:	2301      	movs	r3, #1
 800ef90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef94:	4610      	mov	r0, r2
 800ef96:	b003      	add	sp, #12
 800ef98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9c:	bfbc      	itt	lt
 800ef9e:	464b      	movlt	r3, r9
 800efa0:	46a1      	movlt	r9, r4
 800efa2:	4630      	mov	r0, r6
 800efa4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800efa8:	bfba      	itte	lt
 800efaa:	461c      	movlt	r4, r3
 800efac:	2501      	movlt	r5, #1
 800efae:	2500      	movge	r5, #0
 800efb0:	f7ff fcfe 	bl	800e9b0 <_Balloc>
 800efb4:	4602      	mov	r2, r0
 800efb6:	b918      	cbnz	r0, 800efc0 <__mdiff+0x60>
 800efb8:	4b31      	ldr	r3, [pc, #196]	@ (800f080 <__mdiff+0x120>)
 800efba:	f240 2145 	movw	r1, #581	@ 0x245
 800efbe:	e7e3      	b.n	800ef88 <__mdiff+0x28>
 800efc0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800efc4:	6926      	ldr	r6, [r4, #16]
 800efc6:	60c5      	str	r5, [r0, #12]
 800efc8:	f109 0310 	add.w	r3, r9, #16
 800efcc:	f109 0514 	add.w	r5, r9, #20
 800efd0:	f104 0e14 	add.w	lr, r4, #20
 800efd4:	f100 0b14 	add.w	fp, r0, #20
 800efd8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800efdc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800efe0:	9301      	str	r3, [sp, #4]
 800efe2:	46d9      	mov	r9, fp
 800efe4:	f04f 0c00 	mov.w	ip, #0
 800efe8:	9b01      	ldr	r3, [sp, #4]
 800efea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800efee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eff2:	9301      	str	r3, [sp, #4]
 800eff4:	fa1f f38a 	uxth.w	r3, sl
 800eff8:	4619      	mov	r1, r3
 800effa:	b283      	uxth	r3, r0
 800effc:	1acb      	subs	r3, r1, r3
 800effe:	0c00      	lsrs	r0, r0, #16
 800f000:	4463      	add	r3, ip
 800f002:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f006:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f010:	4576      	cmp	r6, lr
 800f012:	f849 3b04 	str.w	r3, [r9], #4
 800f016:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f01a:	d8e5      	bhi.n	800efe8 <__mdiff+0x88>
 800f01c:	1b33      	subs	r3, r6, r4
 800f01e:	3b15      	subs	r3, #21
 800f020:	f023 0303 	bic.w	r3, r3, #3
 800f024:	3415      	adds	r4, #21
 800f026:	3304      	adds	r3, #4
 800f028:	42a6      	cmp	r6, r4
 800f02a:	bf38      	it	cc
 800f02c:	2304      	movcc	r3, #4
 800f02e:	441d      	add	r5, r3
 800f030:	445b      	add	r3, fp
 800f032:	461e      	mov	r6, r3
 800f034:	462c      	mov	r4, r5
 800f036:	4544      	cmp	r4, r8
 800f038:	d30e      	bcc.n	800f058 <__mdiff+0xf8>
 800f03a:	f108 0103 	add.w	r1, r8, #3
 800f03e:	1b49      	subs	r1, r1, r5
 800f040:	f021 0103 	bic.w	r1, r1, #3
 800f044:	3d03      	subs	r5, #3
 800f046:	45a8      	cmp	r8, r5
 800f048:	bf38      	it	cc
 800f04a:	2100      	movcc	r1, #0
 800f04c:	440b      	add	r3, r1
 800f04e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f052:	b191      	cbz	r1, 800f07a <__mdiff+0x11a>
 800f054:	6117      	str	r7, [r2, #16]
 800f056:	e79d      	b.n	800ef94 <__mdiff+0x34>
 800f058:	f854 1b04 	ldr.w	r1, [r4], #4
 800f05c:	46e6      	mov	lr, ip
 800f05e:	0c08      	lsrs	r0, r1, #16
 800f060:	fa1c fc81 	uxtah	ip, ip, r1
 800f064:	4471      	add	r1, lr
 800f066:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f06a:	b289      	uxth	r1, r1
 800f06c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f070:	f846 1b04 	str.w	r1, [r6], #4
 800f074:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f078:	e7dd      	b.n	800f036 <__mdiff+0xd6>
 800f07a:	3f01      	subs	r7, #1
 800f07c:	e7e7      	b.n	800f04e <__mdiff+0xee>
 800f07e:	bf00      	nop
 800f080:	08014de9 	.word	0x08014de9
 800f084:	08014e5a 	.word	0x08014e5a

0800f088 <__ulp>:
 800f088:	b082      	sub	sp, #8
 800f08a:	ed8d 0b00 	vstr	d0, [sp]
 800f08e:	9a01      	ldr	r2, [sp, #4]
 800f090:	4b0f      	ldr	r3, [pc, #60]	@ (800f0d0 <__ulp+0x48>)
 800f092:	4013      	ands	r3, r2
 800f094:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f098:	2b00      	cmp	r3, #0
 800f09a:	dc08      	bgt.n	800f0ae <__ulp+0x26>
 800f09c:	425b      	negs	r3, r3
 800f09e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f0a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f0a6:	da04      	bge.n	800f0b2 <__ulp+0x2a>
 800f0a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f0ac:	4113      	asrs	r3, r2
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	e008      	b.n	800f0c4 <__ulp+0x3c>
 800f0b2:	f1a2 0314 	sub.w	r3, r2, #20
 800f0b6:	2b1e      	cmp	r3, #30
 800f0b8:	bfda      	itte	le
 800f0ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f0be:	40da      	lsrle	r2, r3
 800f0c0:	2201      	movgt	r2, #1
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	4610      	mov	r0, r2
 800f0c8:	ec41 0b10 	vmov	d0, r0, r1
 800f0cc:	b002      	add	sp, #8
 800f0ce:	4770      	bx	lr
 800f0d0:	7ff00000 	.word	0x7ff00000

0800f0d4 <__b2d>:
 800f0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d8:	6906      	ldr	r6, [r0, #16]
 800f0da:	f100 0814 	add.w	r8, r0, #20
 800f0de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f0e2:	1f37      	subs	r7, r6, #4
 800f0e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f0e8:	4610      	mov	r0, r2
 800f0ea:	f7ff fd53 	bl	800eb94 <__hi0bits>
 800f0ee:	f1c0 0320 	rsb	r3, r0, #32
 800f0f2:	280a      	cmp	r0, #10
 800f0f4:	600b      	str	r3, [r1, #0]
 800f0f6:	491b      	ldr	r1, [pc, #108]	@ (800f164 <__b2d+0x90>)
 800f0f8:	dc15      	bgt.n	800f126 <__b2d+0x52>
 800f0fa:	f1c0 0c0b 	rsb	ip, r0, #11
 800f0fe:	fa22 f30c 	lsr.w	r3, r2, ip
 800f102:	45b8      	cmp	r8, r7
 800f104:	ea43 0501 	orr.w	r5, r3, r1
 800f108:	bf34      	ite	cc
 800f10a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f10e:	2300      	movcs	r3, #0
 800f110:	3015      	adds	r0, #21
 800f112:	fa02 f000 	lsl.w	r0, r2, r0
 800f116:	fa23 f30c 	lsr.w	r3, r3, ip
 800f11a:	4303      	orrs	r3, r0
 800f11c:	461c      	mov	r4, r3
 800f11e:	ec45 4b10 	vmov	d0, r4, r5
 800f122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f126:	45b8      	cmp	r8, r7
 800f128:	bf3a      	itte	cc
 800f12a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f12e:	f1a6 0708 	subcc.w	r7, r6, #8
 800f132:	2300      	movcs	r3, #0
 800f134:	380b      	subs	r0, #11
 800f136:	d012      	beq.n	800f15e <__b2d+0x8a>
 800f138:	f1c0 0120 	rsb	r1, r0, #32
 800f13c:	fa23 f401 	lsr.w	r4, r3, r1
 800f140:	4082      	lsls	r2, r0
 800f142:	4322      	orrs	r2, r4
 800f144:	4547      	cmp	r7, r8
 800f146:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f14a:	bf8c      	ite	hi
 800f14c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f150:	2200      	movls	r2, #0
 800f152:	4083      	lsls	r3, r0
 800f154:	40ca      	lsrs	r2, r1
 800f156:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f15a:	4313      	orrs	r3, r2
 800f15c:	e7de      	b.n	800f11c <__b2d+0x48>
 800f15e:	ea42 0501 	orr.w	r5, r2, r1
 800f162:	e7db      	b.n	800f11c <__b2d+0x48>
 800f164:	3ff00000 	.word	0x3ff00000

0800f168 <__d2b>:
 800f168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f16c:	460f      	mov	r7, r1
 800f16e:	2101      	movs	r1, #1
 800f170:	ec59 8b10 	vmov	r8, r9, d0
 800f174:	4616      	mov	r6, r2
 800f176:	f7ff fc1b 	bl	800e9b0 <_Balloc>
 800f17a:	4604      	mov	r4, r0
 800f17c:	b930      	cbnz	r0, 800f18c <__d2b+0x24>
 800f17e:	4602      	mov	r2, r0
 800f180:	4b23      	ldr	r3, [pc, #140]	@ (800f210 <__d2b+0xa8>)
 800f182:	4824      	ldr	r0, [pc, #144]	@ (800f214 <__d2b+0xac>)
 800f184:	f240 310f 	movw	r1, #783	@ 0x30f
 800f188:	f7fe f950 	bl	800d42c <__assert_func>
 800f18c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f194:	b10d      	cbz	r5, 800f19a <__d2b+0x32>
 800f196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f19a:	9301      	str	r3, [sp, #4]
 800f19c:	f1b8 0300 	subs.w	r3, r8, #0
 800f1a0:	d023      	beq.n	800f1ea <__d2b+0x82>
 800f1a2:	4668      	mov	r0, sp
 800f1a4:	9300      	str	r3, [sp, #0]
 800f1a6:	f7ff fd14 	bl	800ebd2 <__lo0bits>
 800f1aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f1ae:	b1d0      	cbz	r0, 800f1e6 <__d2b+0x7e>
 800f1b0:	f1c0 0320 	rsb	r3, r0, #32
 800f1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800f1b8:	430b      	orrs	r3, r1
 800f1ba:	40c2      	lsrs	r2, r0
 800f1bc:	6163      	str	r3, [r4, #20]
 800f1be:	9201      	str	r2, [sp, #4]
 800f1c0:	9b01      	ldr	r3, [sp, #4]
 800f1c2:	61a3      	str	r3, [r4, #24]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	bf0c      	ite	eq
 800f1c8:	2201      	moveq	r2, #1
 800f1ca:	2202      	movne	r2, #2
 800f1cc:	6122      	str	r2, [r4, #16]
 800f1ce:	b1a5      	cbz	r5, 800f1fa <__d2b+0x92>
 800f1d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f1d4:	4405      	add	r5, r0
 800f1d6:	603d      	str	r5, [r7, #0]
 800f1d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f1dc:	6030      	str	r0, [r6, #0]
 800f1de:	4620      	mov	r0, r4
 800f1e0:	b003      	add	sp, #12
 800f1e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1e6:	6161      	str	r1, [r4, #20]
 800f1e8:	e7ea      	b.n	800f1c0 <__d2b+0x58>
 800f1ea:	a801      	add	r0, sp, #4
 800f1ec:	f7ff fcf1 	bl	800ebd2 <__lo0bits>
 800f1f0:	9b01      	ldr	r3, [sp, #4]
 800f1f2:	6163      	str	r3, [r4, #20]
 800f1f4:	3020      	adds	r0, #32
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	e7e8      	b.n	800f1cc <__d2b+0x64>
 800f1fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f1fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f202:	6038      	str	r0, [r7, #0]
 800f204:	6918      	ldr	r0, [r3, #16]
 800f206:	f7ff fcc5 	bl	800eb94 <__hi0bits>
 800f20a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f20e:	e7e5      	b.n	800f1dc <__d2b+0x74>
 800f210:	08014de9 	.word	0x08014de9
 800f214:	08014e5a 	.word	0x08014e5a

0800f218 <__ratio>:
 800f218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f21c:	b085      	sub	sp, #20
 800f21e:	e9cd 1000 	strd	r1, r0, [sp]
 800f222:	a902      	add	r1, sp, #8
 800f224:	f7ff ff56 	bl	800f0d4 <__b2d>
 800f228:	9800      	ldr	r0, [sp, #0]
 800f22a:	a903      	add	r1, sp, #12
 800f22c:	ec55 4b10 	vmov	r4, r5, d0
 800f230:	f7ff ff50 	bl	800f0d4 <__b2d>
 800f234:	9b01      	ldr	r3, [sp, #4]
 800f236:	6919      	ldr	r1, [r3, #16]
 800f238:	9b00      	ldr	r3, [sp, #0]
 800f23a:	691b      	ldr	r3, [r3, #16]
 800f23c:	1ac9      	subs	r1, r1, r3
 800f23e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f242:	1a9b      	subs	r3, r3, r2
 800f244:	ec5b ab10 	vmov	sl, fp, d0
 800f248:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	bfce      	itee	gt
 800f250:	462a      	movgt	r2, r5
 800f252:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f256:	465a      	movle	r2, fp
 800f258:	462f      	mov	r7, r5
 800f25a:	46d9      	mov	r9, fp
 800f25c:	bfcc      	ite	gt
 800f25e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f262:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f266:	464b      	mov	r3, r9
 800f268:	4652      	mov	r2, sl
 800f26a:	4620      	mov	r0, r4
 800f26c:	4639      	mov	r1, r7
 800f26e:	f7f1 fafd 	bl	800086c <__aeabi_ddiv>
 800f272:	ec41 0b10 	vmov	d0, r0, r1
 800f276:	b005      	add	sp, #20
 800f278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f27c <__copybits>:
 800f27c:	3901      	subs	r1, #1
 800f27e:	b570      	push	{r4, r5, r6, lr}
 800f280:	1149      	asrs	r1, r1, #5
 800f282:	6914      	ldr	r4, [r2, #16]
 800f284:	3101      	adds	r1, #1
 800f286:	f102 0314 	add.w	r3, r2, #20
 800f28a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f28e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f292:	1f05      	subs	r5, r0, #4
 800f294:	42a3      	cmp	r3, r4
 800f296:	d30c      	bcc.n	800f2b2 <__copybits+0x36>
 800f298:	1aa3      	subs	r3, r4, r2
 800f29a:	3b11      	subs	r3, #17
 800f29c:	f023 0303 	bic.w	r3, r3, #3
 800f2a0:	3211      	adds	r2, #17
 800f2a2:	42a2      	cmp	r2, r4
 800f2a4:	bf88      	it	hi
 800f2a6:	2300      	movhi	r3, #0
 800f2a8:	4418      	add	r0, r3
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	4288      	cmp	r0, r1
 800f2ae:	d305      	bcc.n	800f2bc <__copybits+0x40>
 800f2b0:	bd70      	pop	{r4, r5, r6, pc}
 800f2b2:	f853 6b04 	ldr.w	r6, [r3], #4
 800f2b6:	f845 6f04 	str.w	r6, [r5, #4]!
 800f2ba:	e7eb      	b.n	800f294 <__copybits+0x18>
 800f2bc:	f840 3b04 	str.w	r3, [r0], #4
 800f2c0:	e7f4      	b.n	800f2ac <__copybits+0x30>

0800f2c2 <__any_on>:
 800f2c2:	f100 0214 	add.w	r2, r0, #20
 800f2c6:	6900      	ldr	r0, [r0, #16]
 800f2c8:	114b      	asrs	r3, r1, #5
 800f2ca:	4298      	cmp	r0, r3
 800f2cc:	b510      	push	{r4, lr}
 800f2ce:	db11      	blt.n	800f2f4 <__any_on+0x32>
 800f2d0:	dd0a      	ble.n	800f2e8 <__any_on+0x26>
 800f2d2:	f011 011f 	ands.w	r1, r1, #31
 800f2d6:	d007      	beq.n	800f2e8 <__any_on+0x26>
 800f2d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f2dc:	fa24 f001 	lsr.w	r0, r4, r1
 800f2e0:	fa00 f101 	lsl.w	r1, r0, r1
 800f2e4:	428c      	cmp	r4, r1
 800f2e6:	d10b      	bne.n	800f300 <__any_on+0x3e>
 800f2e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	d803      	bhi.n	800f2f8 <__any_on+0x36>
 800f2f0:	2000      	movs	r0, #0
 800f2f2:	bd10      	pop	{r4, pc}
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	e7f7      	b.n	800f2e8 <__any_on+0x26>
 800f2f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f2fc:	2900      	cmp	r1, #0
 800f2fe:	d0f5      	beq.n	800f2ec <__any_on+0x2a>
 800f300:	2001      	movs	r0, #1
 800f302:	e7f6      	b.n	800f2f2 <__any_on+0x30>

0800f304 <__ascii_wctomb>:
 800f304:	4603      	mov	r3, r0
 800f306:	4608      	mov	r0, r1
 800f308:	b141      	cbz	r1, 800f31c <__ascii_wctomb+0x18>
 800f30a:	2aff      	cmp	r2, #255	@ 0xff
 800f30c:	d904      	bls.n	800f318 <__ascii_wctomb+0x14>
 800f30e:	228a      	movs	r2, #138	@ 0x8a
 800f310:	601a      	str	r2, [r3, #0]
 800f312:	f04f 30ff 	mov.w	r0, #4294967295
 800f316:	4770      	bx	lr
 800f318:	700a      	strb	r2, [r1, #0]
 800f31a:	2001      	movs	r0, #1
 800f31c:	4770      	bx	lr

0800f31e <__ssputs_r>:
 800f31e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f322:	688e      	ldr	r6, [r1, #8]
 800f324:	461f      	mov	r7, r3
 800f326:	42be      	cmp	r6, r7
 800f328:	680b      	ldr	r3, [r1, #0]
 800f32a:	4682      	mov	sl, r0
 800f32c:	460c      	mov	r4, r1
 800f32e:	4690      	mov	r8, r2
 800f330:	d82d      	bhi.n	800f38e <__ssputs_r+0x70>
 800f332:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f336:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f33a:	d026      	beq.n	800f38a <__ssputs_r+0x6c>
 800f33c:	6965      	ldr	r5, [r4, #20]
 800f33e:	6909      	ldr	r1, [r1, #16]
 800f340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f344:	eba3 0901 	sub.w	r9, r3, r1
 800f348:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f34c:	1c7b      	adds	r3, r7, #1
 800f34e:	444b      	add	r3, r9
 800f350:	106d      	asrs	r5, r5, #1
 800f352:	429d      	cmp	r5, r3
 800f354:	bf38      	it	cc
 800f356:	461d      	movcc	r5, r3
 800f358:	0553      	lsls	r3, r2, #21
 800f35a:	d527      	bpl.n	800f3ac <__ssputs_r+0x8e>
 800f35c:	4629      	mov	r1, r5
 800f35e:	f7ff fa89 	bl	800e874 <_malloc_r>
 800f362:	4606      	mov	r6, r0
 800f364:	b360      	cbz	r0, 800f3c0 <__ssputs_r+0xa2>
 800f366:	6921      	ldr	r1, [r4, #16]
 800f368:	464a      	mov	r2, r9
 800f36a:	f7fe f842 	bl	800d3f2 <memcpy>
 800f36e:	89a3      	ldrh	r3, [r4, #12]
 800f370:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f378:	81a3      	strh	r3, [r4, #12]
 800f37a:	6126      	str	r6, [r4, #16]
 800f37c:	6165      	str	r5, [r4, #20]
 800f37e:	444e      	add	r6, r9
 800f380:	eba5 0509 	sub.w	r5, r5, r9
 800f384:	6026      	str	r6, [r4, #0]
 800f386:	60a5      	str	r5, [r4, #8]
 800f388:	463e      	mov	r6, r7
 800f38a:	42be      	cmp	r6, r7
 800f38c:	d900      	bls.n	800f390 <__ssputs_r+0x72>
 800f38e:	463e      	mov	r6, r7
 800f390:	6820      	ldr	r0, [r4, #0]
 800f392:	4632      	mov	r2, r6
 800f394:	4641      	mov	r1, r8
 800f396:	f000 f9d7 	bl	800f748 <memmove>
 800f39a:	68a3      	ldr	r3, [r4, #8]
 800f39c:	1b9b      	subs	r3, r3, r6
 800f39e:	60a3      	str	r3, [r4, #8]
 800f3a0:	6823      	ldr	r3, [r4, #0]
 800f3a2:	4433      	add	r3, r6
 800f3a4:	6023      	str	r3, [r4, #0]
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3ac:	462a      	mov	r2, r5
 800f3ae:	f000 fa10 	bl	800f7d2 <_realloc_r>
 800f3b2:	4606      	mov	r6, r0
 800f3b4:	2800      	cmp	r0, #0
 800f3b6:	d1e0      	bne.n	800f37a <__ssputs_r+0x5c>
 800f3b8:	6921      	ldr	r1, [r4, #16]
 800f3ba:	4650      	mov	r0, sl
 800f3bc:	f7fe feac 	bl	800e118 <_free_r>
 800f3c0:	230c      	movs	r3, #12
 800f3c2:	f8ca 3000 	str.w	r3, [sl]
 800f3c6:	89a3      	ldrh	r3, [r4, #12]
 800f3c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3cc:	81a3      	strh	r3, [r4, #12]
 800f3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f3d2:	e7e9      	b.n	800f3a8 <__ssputs_r+0x8a>

0800f3d4 <_svfiprintf_r>:
 800f3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d8:	4698      	mov	r8, r3
 800f3da:	898b      	ldrh	r3, [r1, #12]
 800f3dc:	061b      	lsls	r3, r3, #24
 800f3de:	b09d      	sub	sp, #116	@ 0x74
 800f3e0:	4607      	mov	r7, r0
 800f3e2:	460d      	mov	r5, r1
 800f3e4:	4614      	mov	r4, r2
 800f3e6:	d510      	bpl.n	800f40a <_svfiprintf_r+0x36>
 800f3e8:	690b      	ldr	r3, [r1, #16]
 800f3ea:	b973      	cbnz	r3, 800f40a <_svfiprintf_r+0x36>
 800f3ec:	2140      	movs	r1, #64	@ 0x40
 800f3ee:	f7ff fa41 	bl	800e874 <_malloc_r>
 800f3f2:	6028      	str	r0, [r5, #0]
 800f3f4:	6128      	str	r0, [r5, #16]
 800f3f6:	b930      	cbnz	r0, 800f406 <_svfiprintf_r+0x32>
 800f3f8:	230c      	movs	r3, #12
 800f3fa:	603b      	str	r3, [r7, #0]
 800f3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f400:	b01d      	add	sp, #116	@ 0x74
 800f402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f406:	2340      	movs	r3, #64	@ 0x40
 800f408:	616b      	str	r3, [r5, #20]
 800f40a:	2300      	movs	r3, #0
 800f40c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f40e:	2320      	movs	r3, #32
 800f410:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f414:	f8cd 800c 	str.w	r8, [sp, #12]
 800f418:	2330      	movs	r3, #48	@ 0x30
 800f41a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f5b8 <_svfiprintf_r+0x1e4>
 800f41e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f422:	f04f 0901 	mov.w	r9, #1
 800f426:	4623      	mov	r3, r4
 800f428:	469a      	mov	sl, r3
 800f42a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f42e:	b10a      	cbz	r2, 800f434 <_svfiprintf_r+0x60>
 800f430:	2a25      	cmp	r2, #37	@ 0x25
 800f432:	d1f9      	bne.n	800f428 <_svfiprintf_r+0x54>
 800f434:	ebba 0b04 	subs.w	fp, sl, r4
 800f438:	d00b      	beq.n	800f452 <_svfiprintf_r+0x7e>
 800f43a:	465b      	mov	r3, fp
 800f43c:	4622      	mov	r2, r4
 800f43e:	4629      	mov	r1, r5
 800f440:	4638      	mov	r0, r7
 800f442:	f7ff ff6c 	bl	800f31e <__ssputs_r>
 800f446:	3001      	adds	r0, #1
 800f448:	f000 80a7 	beq.w	800f59a <_svfiprintf_r+0x1c6>
 800f44c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f44e:	445a      	add	r2, fp
 800f450:	9209      	str	r2, [sp, #36]	@ 0x24
 800f452:	f89a 3000 	ldrb.w	r3, [sl]
 800f456:	2b00      	cmp	r3, #0
 800f458:	f000 809f 	beq.w	800f59a <_svfiprintf_r+0x1c6>
 800f45c:	2300      	movs	r3, #0
 800f45e:	f04f 32ff 	mov.w	r2, #4294967295
 800f462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f466:	f10a 0a01 	add.w	sl, sl, #1
 800f46a:	9304      	str	r3, [sp, #16]
 800f46c:	9307      	str	r3, [sp, #28]
 800f46e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f472:	931a      	str	r3, [sp, #104]	@ 0x68
 800f474:	4654      	mov	r4, sl
 800f476:	2205      	movs	r2, #5
 800f478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f47c:	484e      	ldr	r0, [pc, #312]	@ (800f5b8 <_svfiprintf_r+0x1e4>)
 800f47e:	f7f0 feb7 	bl	80001f0 <memchr>
 800f482:	9a04      	ldr	r2, [sp, #16]
 800f484:	b9d8      	cbnz	r0, 800f4be <_svfiprintf_r+0xea>
 800f486:	06d0      	lsls	r0, r2, #27
 800f488:	bf44      	itt	mi
 800f48a:	2320      	movmi	r3, #32
 800f48c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f490:	0711      	lsls	r1, r2, #28
 800f492:	bf44      	itt	mi
 800f494:	232b      	movmi	r3, #43	@ 0x2b
 800f496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f49a:	f89a 3000 	ldrb.w	r3, [sl]
 800f49e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4a0:	d015      	beq.n	800f4ce <_svfiprintf_r+0xfa>
 800f4a2:	9a07      	ldr	r2, [sp, #28]
 800f4a4:	4654      	mov	r4, sl
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	f04f 0c0a 	mov.w	ip, #10
 800f4ac:	4621      	mov	r1, r4
 800f4ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4b2:	3b30      	subs	r3, #48	@ 0x30
 800f4b4:	2b09      	cmp	r3, #9
 800f4b6:	d94b      	bls.n	800f550 <_svfiprintf_r+0x17c>
 800f4b8:	b1b0      	cbz	r0, 800f4e8 <_svfiprintf_r+0x114>
 800f4ba:	9207      	str	r2, [sp, #28]
 800f4bc:	e014      	b.n	800f4e8 <_svfiprintf_r+0x114>
 800f4be:	eba0 0308 	sub.w	r3, r0, r8
 800f4c2:	fa09 f303 	lsl.w	r3, r9, r3
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	9304      	str	r3, [sp, #16]
 800f4ca:	46a2      	mov	sl, r4
 800f4cc:	e7d2      	b.n	800f474 <_svfiprintf_r+0xa0>
 800f4ce:	9b03      	ldr	r3, [sp, #12]
 800f4d0:	1d19      	adds	r1, r3, #4
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	9103      	str	r1, [sp, #12]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	bfbb      	ittet	lt
 800f4da:	425b      	neglt	r3, r3
 800f4dc:	f042 0202 	orrlt.w	r2, r2, #2
 800f4e0:	9307      	strge	r3, [sp, #28]
 800f4e2:	9307      	strlt	r3, [sp, #28]
 800f4e4:	bfb8      	it	lt
 800f4e6:	9204      	strlt	r2, [sp, #16]
 800f4e8:	7823      	ldrb	r3, [r4, #0]
 800f4ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4ec:	d10a      	bne.n	800f504 <_svfiprintf_r+0x130>
 800f4ee:	7863      	ldrb	r3, [r4, #1]
 800f4f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4f2:	d132      	bne.n	800f55a <_svfiprintf_r+0x186>
 800f4f4:	9b03      	ldr	r3, [sp, #12]
 800f4f6:	1d1a      	adds	r2, r3, #4
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	9203      	str	r2, [sp, #12]
 800f4fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f500:	3402      	adds	r4, #2
 800f502:	9305      	str	r3, [sp, #20]
 800f504:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f5c8 <_svfiprintf_r+0x1f4>
 800f508:	7821      	ldrb	r1, [r4, #0]
 800f50a:	2203      	movs	r2, #3
 800f50c:	4650      	mov	r0, sl
 800f50e:	f7f0 fe6f 	bl	80001f0 <memchr>
 800f512:	b138      	cbz	r0, 800f524 <_svfiprintf_r+0x150>
 800f514:	9b04      	ldr	r3, [sp, #16]
 800f516:	eba0 000a 	sub.w	r0, r0, sl
 800f51a:	2240      	movs	r2, #64	@ 0x40
 800f51c:	4082      	lsls	r2, r0
 800f51e:	4313      	orrs	r3, r2
 800f520:	3401      	adds	r4, #1
 800f522:	9304      	str	r3, [sp, #16]
 800f524:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f528:	4824      	ldr	r0, [pc, #144]	@ (800f5bc <_svfiprintf_r+0x1e8>)
 800f52a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f52e:	2206      	movs	r2, #6
 800f530:	f7f0 fe5e 	bl	80001f0 <memchr>
 800f534:	2800      	cmp	r0, #0
 800f536:	d036      	beq.n	800f5a6 <_svfiprintf_r+0x1d2>
 800f538:	4b21      	ldr	r3, [pc, #132]	@ (800f5c0 <_svfiprintf_r+0x1ec>)
 800f53a:	bb1b      	cbnz	r3, 800f584 <_svfiprintf_r+0x1b0>
 800f53c:	9b03      	ldr	r3, [sp, #12]
 800f53e:	3307      	adds	r3, #7
 800f540:	f023 0307 	bic.w	r3, r3, #7
 800f544:	3308      	adds	r3, #8
 800f546:	9303      	str	r3, [sp, #12]
 800f548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f54a:	4433      	add	r3, r6
 800f54c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f54e:	e76a      	b.n	800f426 <_svfiprintf_r+0x52>
 800f550:	fb0c 3202 	mla	r2, ip, r2, r3
 800f554:	460c      	mov	r4, r1
 800f556:	2001      	movs	r0, #1
 800f558:	e7a8      	b.n	800f4ac <_svfiprintf_r+0xd8>
 800f55a:	2300      	movs	r3, #0
 800f55c:	3401      	adds	r4, #1
 800f55e:	9305      	str	r3, [sp, #20]
 800f560:	4619      	mov	r1, r3
 800f562:	f04f 0c0a 	mov.w	ip, #10
 800f566:	4620      	mov	r0, r4
 800f568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f56c:	3a30      	subs	r2, #48	@ 0x30
 800f56e:	2a09      	cmp	r2, #9
 800f570:	d903      	bls.n	800f57a <_svfiprintf_r+0x1a6>
 800f572:	2b00      	cmp	r3, #0
 800f574:	d0c6      	beq.n	800f504 <_svfiprintf_r+0x130>
 800f576:	9105      	str	r1, [sp, #20]
 800f578:	e7c4      	b.n	800f504 <_svfiprintf_r+0x130>
 800f57a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f57e:	4604      	mov	r4, r0
 800f580:	2301      	movs	r3, #1
 800f582:	e7f0      	b.n	800f566 <_svfiprintf_r+0x192>
 800f584:	ab03      	add	r3, sp, #12
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	462a      	mov	r2, r5
 800f58a:	4b0e      	ldr	r3, [pc, #56]	@ (800f5c4 <_svfiprintf_r+0x1f0>)
 800f58c:	a904      	add	r1, sp, #16
 800f58e:	4638      	mov	r0, r7
 800f590:	f7fc feee 	bl	800c370 <_printf_float>
 800f594:	1c42      	adds	r2, r0, #1
 800f596:	4606      	mov	r6, r0
 800f598:	d1d6      	bne.n	800f548 <_svfiprintf_r+0x174>
 800f59a:	89ab      	ldrh	r3, [r5, #12]
 800f59c:	065b      	lsls	r3, r3, #25
 800f59e:	f53f af2d 	bmi.w	800f3fc <_svfiprintf_r+0x28>
 800f5a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f5a4:	e72c      	b.n	800f400 <_svfiprintf_r+0x2c>
 800f5a6:	ab03      	add	r3, sp, #12
 800f5a8:	9300      	str	r3, [sp, #0]
 800f5aa:	462a      	mov	r2, r5
 800f5ac:	4b05      	ldr	r3, [pc, #20]	@ (800f5c4 <_svfiprintf_r+0x1f0>)
 800f5ae:	a904      	add	r1, sp, #16
 800f5b0:	4638      	mov	r0, r7
 800f5b2:	f7fd f975 	bl	800c8a0 <_printf_i>
 800f5b6:	e7ed      	b.n	800f594 <_svfiprintf_r+0x1c0>
 800f5b8:	08014eb3 	.word	0x08014eb3
 800f5bc:	08014ebd 	.word	0x08014ebd
 800f5c0:	0800c371 	.word	0x0800c371
 800f5c4:	0800f31f 	.word	0x0800f31f
 800f5c8:	08014eb9 	.word	0x08014eb9

0800f5cc <__sflush_r>:
 800f5cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5d4:	0716      	lsls	r6, r2, #28
 800f5d6:	4605      	mov	r5, r0
 800f5d8:	460c      	mov	r4, r1
 800f5da:	d454      	bmi.n	800f686 <__sflush_r+0xba>
 800f5dc:	684b      	ldr	r3, [r1, #4]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	dc02      	bgt.n	800f5e8 <__sflush_r+0x1c>
 800f5e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	dd48      	ble.n	800f67a <__sflush_r+0xae>
 800f5e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5ea:	2e00      	cmp	r6, #0
 800f5ec:	d045      	beq.n	800f67a <__sflush_r+0xae>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f5f4:	682f      	ldr	r7, [r5, #0]
 800f5f6:	6a21      	ldr	r1, [r4, #32]
 800f5f8:	602b      	str	r3, [r5, #0]
 800f5fa:	d030      	beq.n	800f65e <__sflush_r+0x92>
 800f5fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f5fe:	89a3      	ldrh	r3, [r4, #12]
 800f600:	0759      	lsls	r1, r3, #29
 800f602:	d505      	bpl.n	800f610 <__sflush_r+0x44>
 800f604:	6863      	ldr	r3, [r4, #4]
 800f606:	1ad2      	subs	r2, r2, r3
 800f608:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f60a:	b10b      	cbz	r3, 800f610 <__sflush_r+0x44>
 800f60c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f60e:	1ad2      	subs	r2, r2, r3
 800f610:	2300      	movs	r3, #0
 800f612:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f614:	6a21      	ldr	r1, [r4, #32]
 800f616:	4628      	mov	r0, r5
 800f618:	47b0      	blx	r6
 800f61a:	1c43      	adds	r3, r0, #1
 800f61c:	89a3      	ldrh	r3, [r4, #12]
 800f61e:	d106      	bne.n	800f62e <__sflush_r+0x62>
 800f620:	6829      	ldr	r1, [r5, #0]
 800f622:	291d      	cmp	r1, #29
 800f624:	d82b      	bhi.n	800f67e <__sflush_r+0xb2>
 800f626:	4a2a      	ldr	r2, [pc, #168]	@ (800f6d0 <__sflush_r+0x104>)
 800f628:	40ca      	lsrs	r2, r1
 800f62a:	07d6      	lsls	r6, r2, #31
 800f62c:	d527      	bpl.n	800f67e <__sflush_r+0xb2>
 800f62e:	2200      	movs	r2, #0
 800f630:	6062      	str	r2, [r4, #4]
 800f632:	04d9      	lsls	r1, r3, #19
 800f634:	6922      	ldr	r2, [r4, #16]
 800f636:	6022      	str	r2, [r4, #0]
 800f638:	d504      	bpl.n	800f644 <__sflush_r+0x78>
 800f63a:	1c42      	adds	r2, r0, #1
 800f63c:	d101      	bne.n	800f642 <__sflush_r+0x76>
 800f63e:	682b      	ldr	r3, [r5, #0]
 800f640:	b903      	cbnz	r3, 800f644 <__sflush_r+0x78>
 800f642:	6560      	str	r0, [r4, #84]	@ 0x54
 800f644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f646:	602f      	str	r7, [r5, #0]
 800f648:	b1b9      	cbz	r1, 800f67a <__sflush_r+0xae>
 800f64a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f64e:	4299      	cmp	r1, r3
 800f650:	d002      	beq.n	800f658 <__sflush_r+0x8c>
 800f652:	4628      	mov	r0, r5
 800f654:	f7fe fd60 	bl	800e118 <_free_r>
 800f658:	2300      	movs	r3, #0
 800f65a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f65c:	e00d      	b.n	800f67a <__sflush_r+0xae>
 800f65e:	2301      	movs	r3, #1
 800f660:	4628      	mov	r0, r5
 800f662:	47b0      	blx	r6
 800f664:	4602      	mov	r2, r0
 800f666:	1c50      	adds	r0, r2, #1
 800f668:	d1c9      	bne.n	800f5fe <__sflush_r+0x32>
 800f66a:	682b      	ldr	r3, [r5, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d0c6      	beq.n	800f5fe <__sflush_r+0x32>
 800f670:	2b1d      	cmp	r3, #29
 800f672:	d001      	beq.n	800f678 <__sflush_r+0xac>
 800f674:	2b16      	cmp	r3, #22
 800f676:	d11e      	bne.n	800f6b6 <__sflush_r+0xea>
 800f678:	602f      	str	r7, [r5, #0]
 800f67a:	2000      	movs	r0, #0
 800f67c:	e022      	b.n	800f6c4 <__sflush_r+0xf8>
 800f67e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f682:	b21b      	sxth	r3, r3
 800f684:	e01b      	b.n	800f6be <__sflush_r+0xf2>
 800f686:	690f      	ldr	r7, [r1, #16]
 800f688:	2f00      	cmp	r7, #0
 800f68a:	d0f6      	beq.n	800f67a <__sflush_r+0xae>
 800f68c:	0793      	lsls	r3, r2, #30
 800f68e:	680e      	ldr	r6, [r1, #0]
 800f690:	bf08      	it	eq
 800f692:	694b      	ldreq	r3, [r1, #20]
 800f694:	600f      	str	r7, [r1, #0]
 800f696:	bf18      	it	ne
 800f698:	2300      	movne	r3, #0
 800f69a:	eba6 0807 	sub.w	r8, r6, r7
 800f69e:	608b      	str	r3, [r1, #8]
 800f6a0:	f1b8 0f00 	cmp.w	r8, #0
 800f6a4:	dde9      	ble.n	800f67a <__sflush_r+0xae>
 800f6a6:	6a21      	ldr	r1, [r4, #32]
 800f6a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f6aa:	4643      	mov	r3, r8
 800f6ac:	463a      	mov	r2, r7
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	47b0      	blx	r6
 800f6b2:	2800      	cmp	r0, #0
 800f6b4:	dc08      	bgt.n	800f6c8 <__sflush_r+0xfc>
 800f6b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6be:	81a3      	strh	r3, [r4, #12]
 800f6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6c8:	4407      	add	r7, r0
 800f6ca:	eba8 0800 	sub.w	r8, r8, r0
 800f6ce:	e7e7      	b.n	800f6a0 <__sflush_r+0xd4>
 800f6d0:	20400001 	.word	0x20400001

0800f6d4 <_fflush_r>:
 800f6d4:	b538      	push	{r3, r4, r5, lr}
 800f6d6:	690b      	ldr	r3, [r1, #16]
 800f6d8:	4605      	mov	r5, r0
 800f6da:	460c      	mov	r4, r1
 800f6dc:	b913      	cbnz	r3, 800f6e4 <_fflush_r+0x10>
 800f6de:	2500      	movs	r5, #0
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	bd38      	pop	{r3, r4, r5, pc}
 800f6e4:	b118      	cbz	r0, 800f6ee <_fflush_r+0x1a>
 800f6e6:	6a03      	ldr	r3, [r0, #32]
 800f6e8:	b90b      	cbnz	r3, 800f6ee <_fflush_r+0x1a>
 800f6ea:	f7fd fc91 	bl	800d010 <__sinit>
 800f6ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d0f3      	beq.n	800f6de <_fflush_r+0xa>
 800f6f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f6f8:	07d0      	lsls	r0, r2, #31
 800f6fa:	d404      	bmi.n	800f706 <_fflush_r+0x32>
 800f6fc:	0599      	lsls	r1, r3, #22
 800f6fe:	d402      	bmi.n	800f706 <_fflush_r+0x32>
 800f700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f702:	f7fd fe74 	bl	800d3ee <__retarget_lock_acquire_recursive>
 800f706:	4628      	mov	r0, r5
 800f708:	4621      	mov	r1, r4
 800f70a:	f7ff ff5f 	bl	800f5cc <__sflush_r>
 800f70e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f710:	07da      	lsls	r2, r3, #31
 800f712:	4605      	mov	r5, r0
 800f714:	d4e4      	bmi.n	800f6e0 <_fflush_r+0xc>
 800f716:	89a3      	ldrh	r3, [r4, #12]
 800f718:	059b      	lsls	r3, r3, #22
 800f71a:	d4e1      	bmi.n	800f6e0 <_fflush_r+0xc>
 800f71c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f71e:	f7fd fe67 	bl	800d3f0 <__retarget_lock_release_recursive>
 800f722:	e7dd      	b.n	800f6e0 <_fflush_r+0xc>

0800f724 <fiprintf>:
 800f724:	b40e      	push	{r1, r2, r3}
 800f726:	b503      	push	{r0, r1, lr}
 800f728:	4601      	mov	r1, r0
 800f72a:	ab03      	add	r3, sp, #12
 800f72c:	4805      	ldr	r0, [pc, #20]	@ (800f744 <fiprintf+0x20>)
 800f72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f732:	6800      	ldr	r0, [r0, #0]
 800f734:	9301      	str	r3, [sp, #4]
 800f736:	f000 f8a3 	bl	800f880 <_vfiprintf_r>
 800f73a:	b002      	add	sp, #8
 800f73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f740:	b003      	add	sp, #12
 800f742:	4770      	bx	lr
 800f744:	20000278 	.word	0x20000278

0800f748 <memmove>:
 800f748:	4288      	cmp	r0, r1
 800f74a:	b510      	push	{r4, lr}
 800f74c:	eb01 0402 	add.w	r4, r1, r2
 800f750:	d902      	bls.n	800f758 <memmove+0x10>
 800f752:	4284      	cmp	r4, r0
 800f754:	4623      	mov	r3, r4
 800f756:	d807      	bhi.n	800f768 <memmove+0x20>
 800f758:	1e43      	subs	r3, r0, #1
 800f75a:	42a1      	cmp	r1, r4
 800f75c:	d008      	beq.n	800f770 <memmove+0x28>
 800f75e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f762:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f766:	e7f8      	b.n	800f75a <memmove+0x12>
 800f768:	4402      	add	r2, r0
 800f76a:	4601      	mov	r1, r0
 800f76c:	428a      	cmp	r2, r1
 800f76e:	d100      	bne.n	800f772 <memmove+0x2a>
 800f770:	bd10      	pop	{r4, pc}
 800f772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f77a:	e7f7      	b.n	800f76c <memmove+0x24>

0800f77c <_sbrk_r>:
 800f77c:	b538      	push	{r3, r4, r5, lr}
 800f77e:	4d06      	ldr	r5, [pc, #24]	@ (800f798 <_sbrk_r+0x1c>)
 800f780:	2300      	movs	r3, #0
 800f782:	4604      	mov	r4, r0
 800f784:	4608      	mov	r0, r1
 800f786:	602b      	str	r3, [r5, #0]
 800f788:	f7f3 f966 	bl	8002a58 <_sbrk>
 800f78c:	1c43      	adds	r3, r0, #1
 800f78e:	d102      	bne.n	800f796 <_sbrk_r+0x1a>
 800f790:	682b      	ldr	r3, [r5, #0]
 800f792:	b103      	cbz	r3, 800f796 <_sbrk_r+0x1a>
 800f794:	6023      	str	r3, [r4, #0]
 800f796:	bd38      	pop	{r3, r4, r5, pc}
 800f798:	2001ebb4 	.word	0x2001ebb4

0800f79c <abort>:
 800f79c:	b508      	push	{r3, lr}
 800f79e:	2006      	movs	r0, #6
 800f7a0:	f000 fa42 	bl	800fc28 <raise>
 800f7a4:	2001      	movs	r0, #1
 800f7a6:	f7f3 f8df 	bl	8002968 <_exit>

0800f7aa <_calloc_r>:
 800f7aa:	b570      	push	{r4, r5, r6, lr}
 800f7ac:	fba1 5402 	umull	r5, r4, r1, r2
 800f7b0:	b934      	cbnz	r4, 800f7c0 <_calloc_r+0x16>
 800f7b2:	4629      	mov	r1, r5
 800f7b4:	f7ff f85e 	bl	800e874 <_malloc_r>
 800f7b8:	4606      	mov	r6, r0
 800f7ba:	b928      	cbnz	r0, 800f7c8 <_calloc_r+0x1e>
 800f7bc:	4630      	mov	r0, r6
 800f7be:	bd70      	pop	{r4, r5, r6, pc}
 800f7c0:	220c      	movs	r2, #12
 800f7c2:	6002      	str	r2, [r0, #0]
 800f7c4:	2600      	movs	r6, #0
 800f7c6:	e7f9      	b.n	800f7bc <_calloc_r+0x12>
 800f7c8:	462a      	mov	r2, r5
 800f7ca:	4621      	mov	r1, r4
 800f7cc:	f7fd fcf1 	bl	800d1b2 <memset>
 800f7d0:	e7f4      	b.n	800f7bc <_calloc_r+0x12>

0800f7d2 <_realloc_r>:
 800f7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d6:	4607      	mov	r7, r0
 800f7d8:	4614      	mov	r4, r2
 800f7da:	460d      	mov	r5, r1
 800f7dc:	b921      	cbnz	r1, 800f7e8 <_realloc_r+0x16>
 800f7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e2:	4611      	mov	r1, r2
 800f7e4:	f7ff b846 	b.w	800e874 <_malloc_r>
 800f7e8:	b92a      	cbnz	r2, 800f7f6 <_realloc_r+0x24>
 800f7ea:	f7fe fc95 	bl	800e118 <_free_r>
 800f7ee:	4625      	mov	r5, r4
 800f7f0:	4628      	mov	r0, r5
 800f7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7f6:	f000 fa33 	bl	800fc60 <_malloc_usable_size_r>
 800f7fa:	4284      	cmp	r4, r0
 800f7fc:	4606      	mov	r6, r0
 800f7fe:	d802      	bhi.n	800f806 <_realloc_r+0x34>
 800f800:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f804:	d8f4      	bhi.n	800f7f0 <_realloc_r+0x1e>
 800f806:	4621      	mov	r1, r4
 800f808:	4638      	mov	r0, r7
 800f80a:	f7ff f833 	bl	800e874 <_malloc_r>
 800f80e:	4680      	mov	r8, r0
 800f810:	b908      	cbnz	r0, 800f816 <_realloc_r+0x44>
 800f812:	4645      	mov	r5, r8
 800f814:	e7ec      	b.n	800f7f0 <_realloc_r+0x1e>
 800f816:	42b4      	cmp	r4, r6
 800f818:	4622      	mov	r2, r4
 800f81a:	4629      	mov	r1, r5
 800f81c:	bf28      	it	cs
 800f81e:	4632      	movcs	r2, r6
 800f820:	f7fd fde7 	bl	800d3f2 <memcpy>
 800f824:	4629      	mov	r1, r5
 800f826:	4638      	mov	r0, r7
 800f828:	f7fe fc76 	bl	800e118 <_free_r>
 800f82c:	e7f1      	b.n	800f812 <_realloc_r+0x40>

0800f82e <__sfputc_r>:
 800f82e:	6893      	ldr	r3, [r2, #8]
 800f830:	3b01      	subs	r3, #1
 800f832:	2b00      	cmp	r3, #0
 800f834:	b410      	push	{r4}
 800f836:	6093      	str	r3, [r2, #8]
 800f838:	da08      	bge.n	800f84c <__sfputc_r+0x1e>
 800f83a:	6994      	ldr	r4, [r2, #24]
 800f83c:	42a3      	cmp	r3, r4
 800f83e:	db01      	blt.n	800f844 <__sfputc_r+0x16>
 800f840:	290a      	cmp	r1, #10
 800f842:	d103      	bne.n	800f84c <__sfputc_r+0x1e>
 800f844:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f848:	f000 b932 	b.w	800fab0 <__swbuf_r>
 800f84c:	6813      	ldr	r3, [r2, #0]
 800f84e:	1c58      	adds	r0, r3, #1
 800f850:	6010      	str	r0, [r2, #0]
 800f852:	7019      	strb	r1, [r3, #0]
 800f854:	4608      	mov	r0, r1
 800f856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <__sfputs_r>:
 800f85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f85e:	4606      	mov	r6, r0
 800f860:	460f      	mov	r7, r1
 800f862:	4614      	mov	r4, r2
 800f864:	18d5      	adds	r5, r2, r3
 800f866:	42ac      	cmp	r4, r5
 800f868:	d101      	bne.n	800f86e <__sfputs_r+0x12>
 800f86a:	2000      	movs	r0, #0
 800f86c:	e007      	b.n	800f87e <__sfputs_r+0x22>
 800f86e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f872:	463a      	mov	r2, r7
 800f874:	4630      	mov	r0, r6
 800f876:	f7ff ffda 	bl	800f82e <__sfputc_r>
 800f87a:	1c43      	adds	r3, r0, #1
 800f87c:	d1f3      	bne.n	800f866 <__sfputs_r+0xa>
 800f87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f880 <_vfiprintf_r>:
 800f880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f884:	460d      	mov	r5, r1
 800f886:	b09d      	sub	sp, #116	@ 0x74
 800f888:	4614      	mov	r4, r2
 800f88a:	4698      	mov	r8, r3
 800f88c:	4606      	mov	r6, r0
 800f88e:	b118      	cbz	r0, 800f898 <_vfiprintf_r+0x18>
 800f890:	6a03      	ldr	r3, [r0, #32]
 800f892:	b90b      	cbnz	r3, 800f898 <_vfiprintf_r+0x18>
 800f894:	f7fd fbbc 	bl	800d010 <__sinit>
 800f898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f89a:	07d9      	lsls	r1, r3, #31
 800f89c:	d405      	bmi.n	800f8aa <_vfiprintf_r+0x2a>
 800f89e:	89ab      	ldrh	r3, [r5, #12]
 800f8a0:	059a      	lsls	r2, r3, #22
 800f8a2:	d402      	bmi.n	800f8aa <_vfiprintf_r+0x2a>
 800f8a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8a6:	f7fd fda2 	bl	800d3ee <__retarget_lock_acquire_recursive>
 800f8aa:	89ab      	ldrh	r3, [r5, #12]
 800f8ac:	071b      	lsls	r3, r3, #28
 800f8ae:	d501      	bpl.n	800f8b4 <_vfiprintf_r+0x34>
 800f8b0:	692b      	ldr	r3, [r5, #16]
 800f8b2:	b99b      	cbnz	r3, 800f8dc <_vfiprintf_r+0x5c>
 800f8b4:	4629      	mov	r1, r5
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	f000 f938 	bl	800fb2c <__swsetup_r>
 800f8bc:	b170      	cbz	r0, 800f8dc <_vfiprintf_r+0x5c>
 800f8be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8c0:	07dc      	lsls	r4, r3, #31
 800f8c2:	d504      	bpl.n	800f8ce <_vfiprintf_r+0x4e>
 800f8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8c8:	b01d      	add	sp, #116	@ 0x74
 800f8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ce:	89ab      	ldrh	r3, [r5, #12]
 800f8d0:	0598      	lsls	r0, r3, #22
 800f8d2:	d4f7      	bmi.n	800f8c4 <_vfiprintf_r+0x44>
 800f8d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8d6:	f7fd fd8b 	bl	800d3f0 <__retarget_lock_release_recursive>
 800f8da:	e7f3      	b.n	800f8c4 <_vfiprintf_r+0x44>
 800f8dc:	2300      	movs	r3, #0
 800f8de:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8e0:	2320      	movs	r3, #32
 800f8e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f8e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8ea:	2330      	movs	r3, #48	@ 0x30
 800f8ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fa9c <_vfiprintf_r+0x21c>
 800f8f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f8f4:	f04f 0901 	mov.w	r9, #1
 800f8f8:	4623      	mov	r3, r4
 800f8fa:	469a      	mov	sl, r3
 800f8fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f900:	b10a      	cbz	r2, 800f906 <_vfiprintf_r+0x86>
 800f902:	2a25      	cmp	r2, #37	@ 0x25
 800f904:	d1f9      	bne.n	800f8fa <_vfiprintf_r+0x7a>
 800f906:	ebba 0b04 	subs.w	fp, sl, r4
 800f90a:	d00b      	beq.n	800f924 <_vfiprintf_r+0xa4>
 800f90c:	465b      	mov	r3, fp
 800f90e:	4622      	mov	r2, r4
 800f910:	4629      	mov	r1, r5
 800f912:	4630      	mov	r0, r6
 800f914:	f7ff ffa2 	bl	800f85c <__sfputs_r>
 800f918:	3001      	adds	r0, #1
 800f91a:	f000 80a7 	beq.w	800fa6c <_vfiprintf_r+0x1ec>
 800f91e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f920:	445a      	add	r2, fp
 800f922:	9209      	str	r2, [sp, #36]	@ 0x24
 800f924:	f89a 3000 	ldrb.w	r3, [sl]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	f000 809f 	beq.w	800fa6c <_vfiprintf_r+0x1ec>
 800f92e:	2300      	movs	r3, #0
 800f930:	f04f 32ff 	mov.w	r2, #4294967295
 800f934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f938:	f10a 0a01 	add.w	sl, sl, #1
 800f93c:	9304      	str	r3, [sp, #16]
 800f93e:	9307      	str	r3, [sp, #28]
 800f940:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f944:	931a      	str	r3, [sp, #104]	@ 0x68
 800f946:	4654      	mov	r4, sl
 800f948:	2205      	movs	r2, #5
 800f94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f94e:	4853      	ldr	r0, [pc, #332]	@ (800fa9c <_vfiprintf_r+0x21c>)
 800f950:	f7f0 fc4e 	bl	80001f0 <memchr>
 800f954:	9a04      	ldr	r2, [sp, #16]
 800f956:	b9d8      	cbnz	r0, 800f990 <_vfiprintf_r+0x110>
 800f958:	06d1      	lsls	r1, r2, #27
 800f95a:	bf44      	itt	mi
 800f95c:	2320      	movmi	r3, #32
 800f95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f962:	0713      	lsls	r3, r2, #28
 800f964:	bf44      	itt	mi
 800f966:	232b      	movmi	r3, #43	@ 0x2b
 800f968:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f96c:	f89a 3000 	ldrb.w	r3, [sl]
 800f970:	2b2a      	cmp	r3, #42	@ 0x2a
 800f972:	d015      	beq.n	800f9a0 <_vfiprintf_r+0x120>
 800f974:	9a07      	ldr	r2, [sp, #28]
 800f976:	4654      	mov	r4, sl
 800f978:	2000      	movs	r0, #0
 800f97a:	f04f 0c0a 	mov.w	ip, #10
 800f97e:	4621      	mov	r1, r4
 800f980:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f984:	3b30      	subs	r3, #48	@ 0x30
 800f986:	2b09      	cmp	r3, #9
 800f988:	d94b      	bls.n	800fa22 <_vfiprintf_r+0x1a2>
 800f98a:	b1b0      	cbz	r0, 800f9ba <_vfiprintf_r+0x13a>
 800f98c:	9207      	str	r2, [sp, #28]
 800f98e:	e014      	b.n	800f9ba <_vfiprintf_r+0x13a>
 800f990:	eba0 0308 	sub.w	r3, r0, r8
 800f994:	fa09 f303 	lsl.w	r3, r9, r3
 800f998:	4313      	orrs	r3, r2
 800f99a:	9304      	str	r3, [sp, #16]
 800f99c:	46a2      	mov	sl, r4
 800f99e:	e7d2      	b.n	800f946 <_vfiprintf_r+0xc6>
 800f9a0:	9b03      	ldr	r3, [sp, #12]
 800f9a2:	1d19      	adds	r1, r3, #4
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	9103      	str	r1, [sp, #12]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	bfbb      	ittet	lt
 800f9ac:	425b      	neglt	r3, r3
 800f9ae:	f042 0202 	orrlt.w	r2, r2, #2
 800f9b2:	9307      	strge	r3, [sp, #28]
 800f9b4:	9307      	strlt	r3, [sp, #28]
 800f9b6:	bfb8      	it	lt
 800f9b8:	9204      	strlt	r2, [sp, #16]
 800f9ba:	7823      	ldrb	r3, [r4, #0]
 800f9bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9be:	d10a      	bne.n	800f9d6 <_vfiprintf_r+0x156>
 800f9c0:	7863      	ldrb	r3, [r4, #1]
 800f9c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9c4:	d132      	bne.n	800fa2c <_vfiprintf_r+0x1ac>
 800f9c6:	9b03      	ldr	r3, [sp, #12]
 800f9c8:	1d1a      	adds	r2, r3, #4
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	9203      	str	r2, [sp, #12]
 800f9ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9d2:	3402      	adds	r4, #2
 800f9d4:	9305      	str	r3, [sp, #20]
 800f9d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800faac <_vfiprintf_r+0x22c>
 800f9da:	7821      	ldrb	r1, [r4, #0]
 800f9dc:	2203      	movs	r2, #3
 800f9de:	4650      	mov	r0, sl
 800f9e0:	f7f0 fc06 	bl	80001f0 <memchr>
 800f9e4:	b138      	cbz	r0, 800f9f6 <_vfiprintf_r+0x176>
 800f9e6:	9b04      	ldr	r3, [sp, #16]
 800f9e8:	eba0 000a 	sub.w	r0, r0, sl
 800f9ec:	2240      	movs	r2, #64	@ 0x40
 800f9ee:	4082      	lsls	r2, r0
 800f9f0:	4313      	orrs	r3, r2
 800f9f2:	3401      	adds	r4, #1
 800f9f4:	9304      	str	r3, [sp, #16]
 800f9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9fa:	4829      	ldr	r0, [pc, #164]	@ (800faa0 <_vfiprintf_r+0x220>)
 800f9fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa00:	2206      	movs	r2, #6
 800fa02:	f7f0 fbf5 	bl	80001f0 <memchr>
 800fa06:	2800      	cmp	r0, #0
 800fa08:	d03f      	beq.n	800fa8a <_vfiprintf_r+0x20a>
 800fa0a:	4b26      	ldr	r3, [pc, #152]	@ (800faa4 <_vfiprintf_r+0x224>)
 800fa0c:	bb1b      	cbnz	r3, 800fa56 <_vfiprintf_r+0x1d6>
 800fa0e:	9b03      	ldr	r3, [sp, #12]
 800fa10:	3307      	adds	r3, #7
 800fa12:	f023 0307 	bic.w	r3, r3, #7
 800fa16:	3308      	adds	r3, #8
 800fa18:	9303      	str	r3, [sp, #12]
 800fa1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa1c:	443b      	add	r3, r7
 800fa1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa20:	e76a      	b.n	800f8f8 <_vfiprintf_r+0x78>
 800fa22:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa26:	460c      	mov	r4, r1
 800fa28:	2001      	movs	r0, #1
 800fa2a:	e7a8      	b.n	800f97e <_vfiprintf_r+0xfe>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	3401      	adds	r4, #1
 800fa30:	9305      	str	r3, [sp, #20]
 800fa32:	4619      	mov	r1, r3
 800fa34:	f04f 0c0a 	mov.w	ip, #10
 800fa38:	4620      	mov	r0, r4
 800fa3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa3e:	3a30      	subs	r2, #48	@ 0x30
 800fa40:	2a09      	cmp	r2, #9
 800fa42:	d903      	bls.n	800fa4c <_vfiprintf_r+0x1cc>
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d0c6      	beq.n	800f9d6 <_vfiprintf_r+0x156>
 800fa48:	9105      	str	r1, [sp, #20]
 800fa4a:	e7c4      	b.n	800f9d6 <_vfiprintf_r+0x156>
 800fa4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa50:	4604      	mov	r4, r0
 800fa52:	2301      	movs	r3, #1
 800fa54:	e7f0      	b.n	800fa38 <_vfiprintf_r+0x1b8>
 800fa56:	ab03      	add	r3, sp, #12
 800fa58:	9300      	str	r3, [sp, #0]
 800fa5a:	462a      	mov	r2, r5
 800fa5c:	4b12      	ldr	r3, [pc, #72]	@ (800faa8 <_vfiprintf_r+0x228>)
 800fa5e:	a904      	add	r1, sp, #16
 800fa60:	4630      	mov	r0, r6
 800fa62:	f7fc fc85 	bl	800c370 <_printf_float>
 800fa66:	4607      	mov	r7, r0
 800fa68:	1c78      	adds	r0, r7, #1
 800fa6a:	d1d6      	bne.n	800fa1a <_vfiprintf_r+0x19a>
 800fa6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa6e:	07d9      	lsls	r1, r3, #31
 800fa70:	d405      	bmi.n	800fa7e <_vfiprintf_r+0x1fe>
 800fa72:	89ab      	ldrh	r3, [r5, #12]
 800fa74:	059a      	lsls	r2, r3, #22
 800fa76:	d402      	bmi.n	800fa7e <_vfiprintf_r+0x1fe>
 800fa78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa7a:	f7fd fcb9 	bl	800d3f0 <__retarget_lock_release_recursive>
 800fa7e:	89ab      	ldrh	r3, [r5, #12]
 800fa80:	065b      	lsls	r3, r3, #25
 800fa82:	f53f af1f 	bmi.w	800f8c4 <_vfiprintf_r+0x44>
 800fa86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa88:	e71e      	b.n	800f8c8 <_vfiprintf_r+0x48>
 800fa8a:	ab03      	add	r3, sp, #12
 800fa8c:	9300      	str	r3, [sp, #0]
 800fa8e:	462a      	mov	r2, r5
 800fa90:	4b05      	ldr	r3, [pc, #20]	@ (800faa8 <_vfiprintf_r+0x228>)
 800fa92:	a904      	add	r1, sp, #16
 800fa94:	4630      	mov	r0, r6
 800fa96:	f7fc ff03 	bl	800c8a0 <_printf_i>
 800fa9a:	e7e4      	b.n	800fa66 <_vfiprintf_r+0x1e6>
 800fa9c:	08014eb3 	.word	0x08014eb3
 800faa0:	08014ebd 	.word	0x08014ebd
 800faa4:	0800c371 	.word	0x0800c371
 800faa8:	0800f85d 	.word	0x0800f85d
 800faac:	08014eb9 	.word	0x08014eb9

0800fab0 <__swbuf_r>:
 800fab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab2:	460e      	mov	r6, r1
 800fab4:	4614      	mov	r4, r2
 800fab6:	4605      	mov	r5, r0
 800fab8:	b118      	cbz	r0, 800fac2 <__swbuf_r+0x12>
 800faba:	6a03      	ldr	r3, [r0, #32]
 800fabc:	b90b      	cbnz	r3, 800fac2 <__swbuf_r+0x12>
 800fabe:	f7fd faa7 	bl	800d010 <__sinit>
 800fac2:	69a3      	ldr	r3, [r4, #24]
 800fac4:	60a3      	str	r3, [r4, #8]
 800fac6:	89a3      	ldrh	r3, [r4, #12]
 800fac8:	071a      	lsls	r2, r3, #28
 800faca:	d501      	bpl.n	800fad0 <__swbuf_r+0x20>
 800facc:	6923      	ldr	r3, [r4, #16]
 800face:	b943      	cbnz	r3, 800fae2 <__swbuf_r+0x32>
 800fad0:	4621      	mov	r1, r4
 800fad2:	4628      	mov	r0, r5
 800fad4:	f000 f82a 	bl	800fb2c <__swsetup_r>
 800fad8:	b118      	cbz	r0, 800fae2 <__swbuf_r+0x32>
 800fada:	f04f 37ff 	mov.w	r7, #4294967295
 800fade:	4638      	mov	r0, r7
 800fae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fae2:	6823      	ldr	r3, [r4, #0]
 800fae4:	6922      	ldr	r2, [r4, #16]
 800fae6:	1a98      	subs	r0, r3, r2
 800fae8:	6963      	ldr	r3, [r4, #20]
 800faea:	b2f6      	uxtb	r6, r6
 800faec:	4283      	cmp	r3, r0
 800faee:	4637      	mov	r7, r6
 800faf0:	dc05      	bgt.n	800fafe <__swbuf_r+0x4e>
 800faf2:	4621      	mov	r1, r4
 800faf4:	4628      	mov	r0, r5
 800faf6:	f7ff fded 	bl	800f6d4 <_fflush_r>
 800fafa:	2800      	cmp	r0, #0
 800fafc:	d1ed      	bne.n	800fada <__swbuf_r+0x2a>
 800fafe:	68a3      	ldr	r3, [r4, #8]
 800fb00:	3b01      	subs	r3, #1
 800fb02:	60a3      	str	r3, [r4, #8]
 800fb04:	6823      	ldr	r3, [r4, #0]
 800fb06:	1c5a      	adds	r2, r3, #1
 800fb08:	6022      	str	r2, [r4, #0]
 800fb0a:	701e      	strb	r6, [r3, #0]
 800fb0c:	6962      	ldr	r2, [r4, #20]
 800fb0e:	1c43      	adds	r3, r0, #1
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d004      	beq.n	800fb1e <__swbuf_r+0x6e>
 800fb14:	89a3      	ldrh	r3, [r4, #12]
 800fb16:	07db      	lsls	r3, r3, #31
 800fb18:	d5e1      	bpl.n	800fade <__swbuf_r+0x2e>
 800fb1a:	2e0a      	cmp	r6, #10
 800fb1c:	d1df      	bne.n	800fade <__swbuf_r+0x2e>
 800fb1e:	4621      	mov	r1, r4
 800fb20:	4628      	mov	r0, r5
 800fb22:	f7ff fdd7 	bl	800f6d4 <_fflush_r>
 800fb26:	2800      	cmp	r0, #0
 800fb28:	d0d9      	beq.n	800fade <__swbuf_r+0x2e>
 800fb2a:	e7d6      	b.n	800fada <__swbuf_r+0x2a>

0800fb2c <__swsetup_r>:
 800fb2c:	b538      	push	{r3, r4, r5, lr}
 800fb2e:	4b29      	ldr	r3, [pc, #164]	@ (800fbd4 <__swsetup_r+0xa8>)
 800fb30:	4605      	mov	r5, r0
 800fb32:	6818      	ldr	r0, [r3, #0]
 800fb34:	460c      	mov	r4, r1
 800fb36:	b118      	cbz	r0, 800fb40 <__swsetup_r+0x14>
 800fb38:	6a03      	ldr	r3, [r0, #32]
 800fb3a:	b90b      	cbnz	r3, 800fb40 <__swsetup_r+0x14>
 800fb3c:	f7fd fa68 	bl	800d010 <__sinit>
 800fb40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb44:	0719      	lsls	r1, r3, #28
 800fb46:	d422      	bmi.n	800fb8e <__swsetup_r+0x62>
 800fb48:	06da      	lsls	r2, r3, #27
 800fb4a:	d407      	bmi.n	800fb5c <__swsetup_r+0x30>
 800fb4c:	2209      	movs	r2, #9
 800fb4e:	602a      	str	r2, [r5, #0]
 800fb50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb54:	81a3      	strh	r3, [r4, #12]
 800fb56:	f04f 30ff 	mov.w	r0, #4294967295
 800fb5a:	e033      	b.n	800fbc4 <__swsetup_r+0x98>
 800fb5c:	0758      	lsls	r0, r3, #29
 800fb5e:	d512      	bpl.n	800fb86 <__swsetup_r+0x5a>
 800fb60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb62:	b141      	cbz	r1, 800fb76 <__swsetup_r+0x4a>
 800fb64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb68:	4299      	cmp	r1, r3
 800fb6a:	d002      	beq.n	800fb72 <__swsetup_r+0x46>
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	f7fe fad3 	bl	800e118 <_free_r>
 800fb72:	2300      	movs	r3, #0
 800fb74:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb76:	89a3      	ldrh	r3, [r4, #12]
 800fb78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fb7c:	81a3      	strh	r3, [r4, #12]
 800fb7e:	2300      	movs	r3, #0
 800fb80:	6063      	str	r3, [r4, #4]
 800fb82:	6923      	ldr	r3, [r4, #16]
 800fb84:	6023      	str	r3, [r4, #0]
 800fb86:	89a3      	ldrh	r3, [r4, #12]
 800fb88:	f043 0308 	orr.w	r3, r3, #8
 800fb8c:	81a3      	strh	r3, [r4, #12]
 800fb8e:	6923      	ldr	r3, [r4, #16]
 800fb90:	b94b      	cbnz	r3, 800fba6 <__swsetup_r+0x7a>
 800fb92:	89a3      	ldrh	r3, [r4, #12]
 800fb94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fb98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb9c:	d003      	beq.n	800fba6 <__swsetup_r+0x7a>
 800fb9e:	4621      	mov	r1, r4
 800fba0:	4628      	mov	r0, r5
 800fba2:	f000 f88b 	bl	800fcbc <__smakebuf_r>
 800fba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbaa:	f013 0201 	ands.w	r2, r3, #1
 800fbae:	d00a      	beq.n	800fbc6 <__swsetup_r+0x9a>
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	60a2      	str	r2, [r4, #8]
 800fbb4:	6962      	ldr	r2, [r4, #20]
 800fbb6:	4252      	negs	r2, r2
 800fbb8:	61a2      	str	r2, [r4, #24]
 800fbba:	6922      	ldr	r2, [r4, #16]
 800fbbc:	b942      	cbnz	r2, 800fbd0 <__swsetup_r+0xa4>
 800fbbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fbc2:	d1c5      	bne.n	800fb50 <__swsetup_r+0x24>
 800fbc4:	bd38      	pop	{r3, r4, r5, pc}
 800fbc6:	0799      	lsls	r1, r3, #30
 800fbc8:	bf58      	it	pl
 800fbca:	6962      	ldrpl	r2, [r4, #20]
 800fbcc:	60a2      	str	r2, [r4, #8]
 800fbce:	e7f4      	b.n	800fbba <__swsetup_r+0x8e>
 800fbd0:	2000      	movs	r0, #0
 800fbd2:	e7f7      	b.n	800fbc4 <__swsetup_r+0x98>
 800fbd4:	20000278 	.word	0x20000278

0800fbd8 <_raise_r>:
 800fbd8:	291f      	cmp	r1, #31
 800fbda:	b538      	push	{r3, r4, r5, lr}
 800fbdc:	4605      	mov	r5, r0
 800fbde:	460c      	mov	r4, r1
 800fbe0:	d904      	bls.n	800fbec <_raise_r+0x14>
 800fbe2:	2316      	movs	r3, #22
 800fbe4:	6003      	str	r3, [r0, #0]
 800fbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800fbea:	bd38      	pop	{r3, r4, r5, pc}
 800fbec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fbee:	b112      	cbz	r2, 800fbf6 <_raise_r+0x1e>
 800fbf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fbf4:	b94b      	cbnz	r3, 800fc0a <_raise_r+0x32>
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	f000 f830 	bl	800fc5c <_getpid_r>
 800fbfc:	4622      	mov	r2, r4
 800fbfe:	4601      	mov	r1, r0
 800fc00:	4628      	mov	r0, r5
 800fc02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc06:	f000 b817 	b.w	800fc38 <_kill_r>
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d00a      	beq.n	800fc24 <_raise_r+0x4c>
 800fc0e:	1c59      	adds	r1, r3, #1
 800fc10:	d103      	bne.n	800fc1a <_raise_r+0x42>
 800fc12:	2316      	movs	r3, #22
 800fc14:	6003      	str	r3, [r0, #0]
 800fc16:	2001      	movs	r0, #1
 800fc18:	e7e7      	b.n	800fbea <_raise_r+0x12>
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fc20:	4620      	mov	r0, r4
 800fc22:	4798      	blx	r3
 800fc24:	2000      	movs	r0, #0
 800fc26:	e7e0      	b.n	800fbea <_raise_r+0x12>

0800fc28 <raise>:
 800fc28:	4b02      	ldr	r3, [pc, #8]	@ (800fc34 <raise+0xc>)
 800fc2a:	4601      	mov	r1, r0
 800fc2c:	6818      	ldr	r0, [r3, #0]
 800fc2e:	f7ff bfd3 	b.w	800fbd8 <_raise_r>
 800fc32:	bf00      	nop
 800fc34:	20000278 	.word	0x20000278

0800fc38 <_kill_r>:
 800fc38:	b538      	push	{r3, r4, r5, lr}
 800fc3a:	4d07      	ldr	r5, [pc, #28]	@ (800fc58 <_kill_r+0x20>)
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	4604      	mov	r4, r0
 800fc40:	4608      	mov	r0, r1
 800fc42:	4611      	mov	r1, r2
 800fc44:	602b      	str	r3, [r5, #0]
 800fc46:	f7f2 fe7f 	bl	8002948 <_kill>
 800fc4a:	1c43      	adds	r3, r0, #1
 800fc4c:	d102      	bne.n	800fc54 <_kill_r+0x1c>
 800fc4e:	682b      	ldr	r3, [r5, #0]
 800fc50:	b103      	cbz	r3, 800fc54 <_kill_r+0x1c>
 800fc52:	6023      	str	r3, [r4, #0]
 800fc54:	bd38      	pop	{r3, r4, r5, pc}
 800fc56:	bf00      	nop
 800fc58:	2001ebb4 	.word	0x2001ebb4

0800fc5c <_getpid_r>:
 800fc5c:	f7f2 be6c 	b.w	8002938 <_getpid>

0800fc60 <_malloc_usable_size_r>:
 800fc60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc64:	1f18      	subs	r0, r3, #4
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	bfbc      	itt	lt
 800fc6a:	580b      	ldrlt	r3, [r1, r0]
 800fc6c:	18c0      	addlt	r0, r0, r3
 800fc6e:	4770      	bx	lr

0800fc70 <__swhatbuf_r>:
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	460c      	mov	r4, r1
 800fc74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc78:	2900      	cmp	r1, #0
 800fc7a:	b096      	sub	sp, #88	@ 0x58
 800fc7c:	4615      	mov	r5, r2
 800fc7e:	461e      	mov	r6, r3
 800fc80:	da0d      	bge.n	800fc9e <__swhatbuf_r+0x2e>
 800fc82:	89a3      	ldrh	r3, [r4, #12]
 800fc84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc88:	f04f 0100 	mov.w	r1, #0
 800fc8c:	bf14      	ite	ne
 800fc8e:	2340      	movne	r3, #64	@ 0x40
 800fc90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc94:	2000      	movs	r0, #0
 800fc96:	6031      	str	r1, [r6, #0]
 800fc98:	602b      	str	r3, [r5, #0]
 800fc9a:	b016      	add	sp, #88	@ 0x58
 800fc9c:	bd70      	pop	{r4, r5, r6, pc}
 800fc9e:	466a      	mov	r2, sp
 800fca0:	f000 f848 	bl	800fd34 <_fstat_r>
 800fca4:	2800      	cmp	r0, #0
 800fca6:	dbec      	blt.n	800fc82 <__swhatbuf_r+0x12>
 800fca8:	9901      	ldr	r1, [sp, #4]
 800fcaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fcae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fcb2:	4259      	negs	r1, r3
 800fcb4:	4159      	adcs	r1, r3
 800fcb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fcba:	e7eb      	b.n	800fc94 <__swhatbuf_r+0x24>

0800fcbc <__smakebuf_r>:
 800fcbc:	898b      	ldrh	r3, [r1, #12]
 800fcbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcc0:	079d      	lsls	r5, r3, #30
 800fcc2:	4606      	mov	r6, r0
 800fcc4:	460c      	mov	r4, r1
 800fcc6:	d507      	bpl.n	800fcd8 <__smakebuf_r+0x1c>
 800fcc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fccc:	6023      	str	r3, [r4, #0]
 800fcce:	6123      	str	r3, [r4, #16]
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	6163      	str	r3, [r4, #20]
 800fcd4:	b003      	add	sp, #12
 800fcd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcd8:	ab01      	add	r3, sp, #4
 800fcda:	466a      	mov	r2, sp
 800fcdc:	f7ff ffc8 	bl	800fc70 <__swhatbuf_r>
 800fce0:	9f00      	ldr	r7, [sp, #0]
 800fce2:	4605      	mov	r5, r0
 800fce4:	4639      	mov	r1, r7
 800fce6:	4630      	mov	r0, r6
 800fce8:	f7fe fdc4 	bl	800e874 <_malloc_r>
 800fcec:	b948      	cbnz	r0, 800fd02 <__smakebuf_r+0x46>
 800fcee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcf2:	059a      	lsls	r2, r3, #22
 800fcf4:	d4ee      	bmi.n	800fcd4 <__smakebuf_r+0x18>
 800fcf6:	f023 0303 	bic.w	r3, r3, #3
 800fcfa:	f043 0302 	orr.w	r3, r3, #2
 800fcfe:	81a3      	strh	r3, [r4, #12]
 800fd00:	e7e2      	b.n	800fcc8 <__smakebuf_r+0xc>
 800fd02:	89a3      	ldrh	r3, [r4, #12]
 800fd04:	6020      	str	r0, [r4, #0]
 800fd06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd0a:	81a3      	strh	r3, [r4, #12]
 800fd0c:	9b01      	ldr	r3, [sp, #4]
 800fd0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fd12:	b15b      	cbz	r3, 800fd2c <__smakebuf_r+0x70>
 800fd14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd18:	4630      	mov	r0, r6
 800fd1a:	f000 f81d 	bl	800fd58 <_isatty_r>
 800fd1e:	b128      	cbz	r0, 800fd2c <__smakebuf_r+0x70>
 800fd20:	89a3      	ldrh	r3, [r4, #12]
 800fd22:	f023 0303 	bic.w	r3, r3, #3
 800fd26:	f043 0301 	orr.w	r3, r3, #1
 800fd2a:	81a3      	strh	r3, [r4, #12]
 800fd2c:	89a3      	ldrh	r3, [r4, #12]
 800fd2e:	431d      	orrs	r5, r3
 800fd30:	81a5      	strh	r5, [r4, #12]
 800fd32:	e7cf      	b.n	800fcd4 <__smakebuf_r+0x18>

0800fd34 <_fstat_r>:
 800fd34:	b538      	push	{r3, r4, r5, lr}
 800fd36:	4d07      	ldr	r5, [pc, #28]	@ (800fd54 <_fstat_r+0x20>)
 800fd38:	2300      	movs	r3, #0
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	4608      	mov	r0, r1
 800fd3e:	4611      	mov	r1, r2
 800fd40:	602b      	str	r3, [r5, #0]
 800fd42:	f7f2 fe61 	bl	8002a08 <_fstat>
 800fd46:	1c43      	adds	r3, r0, #1
 800fd48:	d102      	bne.n	800fd50 <_fstat_r+0x1c>
 800fd4a:	682b      	ldr	r3, [r5, #0]
 800fd4c:	b103      	cbz	r3, 800fd50 <_fstat_r+0x1c>
 800fd4e:	6023      	str	r3, [r4, #0]
 800fd50:	bd38      	pop	{r3, r4, r5, pc}
 800fd52:	bf00      	nop
 800fd54:	2001ebb4 	.word	0x2001ebb4

0800fd58 <_isatty_r>:
 800fd58:	b538      	push	{r3, r4, r5, lr}
 800fd5a:	4d06      	ldr	r5, [pc, #24]	@ (800fd74 <_isatty_r+0x1c>)
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	4604      	mov	r4, r0
 800fd60:	4608      	mov	r0, r1
 800fd62:	602b      	str	r3, [r5, #0]
 800fd64:	f7f2 fe60 	bl	8002a28 <_isatty>
 800fd68:	1c43      	adds	r3, r0, #1
 800fd6a:	d102      	bne.n	800fd72 <_isatty_r+0x1a>
 800fd6c:	682b      	ldr	r3, [r5, #0]
 800fd6e:	b103      	cbz	r3, 800fd72 <_isatty_r+0x1a>
 800fd70:	6023      	str	r3, [r4, #0]
 800fd72:	bd38      	pop	{r3, r4, r5, pc}
 800fd74:	2001ebb4 	.word	0x2001ebb4

0800fd78 <sqrtf>:
 800fd78:	b508      	push	{r3, lr}
 800fd7a:	ed2d 8b02 	vpush	{d8}
 800fd7e:	eeb0 8a40 	vmov.f32	s16, s0
 800fd82:	f000 f817 	bl	800fdb4 <__ieee754_sqrtf>
 800fd86:	eeb4 8a48 	vcmp.f32	s16, s16
 800fd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd8e:	d60c      	bvs.n	800fdaa <sqrtf+0x32>
 800fd90:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800fdb0 <sqrtf+0x38>
 800fd94:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9c:	d505      	bpl.n	800fdaa <sqrtf+0x32>
 800fd9e:	f7fd fafb 	bl	800d398 <__errno>
 800fda2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800fda6:	2321      	movs	r3, #33	@ 0x21
 800fda8:	6003      	str	r3, [r0, #0]
 800fdaa:	ecbd 8b02 	vpop	{d8}
 800fdae:	bd08      	pop	{r3, pc}
 800fdb0:	00000000 	.word	0x00000000

0800fdb4 <__ieee754_sqrtf>:
 800fdb4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fdb8:	4770      	bx	lr
	...

0800fdbc <_init>:
 800fdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdbe:	bf00      	nop
 800fdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdc2:	bc08      	pop	{r3}
 800fdc4:	469e      	mov	lr, r3
 800fdc6:	4770      	bx	lr

0800fdc8 <_fini>:
 800fdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdca:	bf00      	nop
 800fdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdce:	bc08      	pop	{r3}
 800fdd0:	469e      	mov	lr, r3
 800fdd2:	4770      	bx	lr
