
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e80c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800e9a0  0800e9a0  0000f9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef1c  0800ef1c  000102c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ef1c  0800ef1c  0000ff1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef24  0800ef24  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef24  0800ef24  0000ff24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ef28  0800ef28  0000ff28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800ef2c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102c4  2**0
                  CONTENTS
 10 .bss          00006cc8  200002c4  200002c4  000102c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006f8c  20006f8c  000102c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019113  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fc4  00000000  00000000  00029407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  0002d3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001131  00000000  00000000  0002ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239e2  00000000  00000000  0002fb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b9f7  00000000  00000000  0005354b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8596  00000000  00000000  0006ef42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001374d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007370  00000000  00000000  0013751c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0013e88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e984 	.word	0x0800e984

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800e984 	.word	0x0800e984

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <ResetSPIReceiver>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/**
  * @brief Сброс состояния SPI приемника
  */
void ResetSPIReceiver(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  memset(&spi_receiver, 0, sizeof(spi_receiver));
 8001024:	f644 6228 	movw	r2, #20008	@ 0x4e28
 8001028:	2100      	movs	r1, #0
 800102a:	4808      	ldr	r0, [pc, #32]	@ (800104c <ResetSPIReceiver+0x2c>)
 800102c:	f00a f8bd 	bl	800b1aa <memset>
  spi_receiver.last_sclk_state = (SPI_MODE == 0 || SPI_MODE == 2) ? 0 : 1;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <ResetSPIReceiver+0x2c>)
 8001032:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2e26 	strb.w	r2, [r3, #3622]	@ 0xe26
  spi_state = SPI_STATE_IDLE;
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <ResetSPIReceiver+0x30>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
  data_saved_to_flash = false;
 8001042:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <ResetSPIReceiver+0x34>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000384 	.word	0x20000384
 8001050:	200051ac 	.word	0x200051ac
 8001054:	20005230 	.word	0x20005230

08001058 <PrintSPIData>:

/**
  * @brief Вывод данных SPI через USB
  */
void PrintSPIData(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	f5ad 4d9c 	sub.w	sp, sp, #19968	@ 0x4e00
 800105e:	b090      	sub	sp, #64	@ 0x40
 8001060:	af02      	add	r7, sp, #8
  uint16_t flash_data[NUM_EXPECTED_WORDS];

  // Сначала пытаемся прочитать данные из FLASH
  if (ReadFromFlash(flash_data, FLASH_DATA_SIZE)) {
 8001062:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001066:	3b30      	subs	r3, #48	@ 0x30
 8001068:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f9fd 	bl	800146c <ReadFromFlash>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 80aa 	beq.w	80011ce <PrintSPIData+0x176>
    for (int i = 0; i < NUM_EXPECTED_WORDS; i += VALUES_PER_LINE) {
 800107a:	2300      	movs	r3, #0
 800107c:	f507 429c 	add.w	r2, r7, #19968	@ 0x4e00
 8001080:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e097      	b.n	80011b8 <PrintSPIData+0x160>
      int start_idx = i;
 8001088:	f507 439c 	add.w	r3, r7, #19968	@ 0x4e00
 800108c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f507 429c 	add.w	r2, r7, #19968	@ 0x4e00
 8001096:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800109a:	6013      	str	r3, [r2, #0]
      int end_idx = (i + VALUES_PER_LINE) < NUM_EXPECTED_WORDS ? (i + VALUES_PER_LINE - 1) : (NUM_EXPECTED_WORDS - 1);
 800109c:	f507 439c 	add.w	r3, r7, #19968	@ 0x4e00
 80010a0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f242 7206 	movw	r2, #9990	@ 0x2706
 80010aa:	4293      	cmp	r3, r2
 80010ac:	bfa8      	it	ge
 80010ae:	4613      	movge	r3, r2
 80010b0:	3309      	adds	r3, #9
 80010b2:	f507 429c 	add.w	r2, r7, #19968	@ 0x4e00
 80010b6:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80010ba:	6013      	str	r3, [r2, #0]

      snprintf(usb_msg, sizeof(usb_msg), "FLASH Data [%04d-%04d]: ", start_idx, end_idx);
 80010bc:	f507 439c 	add.w	r3, r7, #19968	@ 0x4e00
 80010c0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	f507 439c 	add.w	r3, r7, #19968	@ 0x4e00
 80010cc:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a48      	ldr	r2, [pc, #288]	@ (80011f4 <PrintSPIData+0x19c>)
 80010d4:	2180      	movs	r1, #128	@ 0x80
 80010d6:	4848      	ldr	r0, [pc, #288]	@ (80011f8 <PrintSPIData+0x1a0>)
 80010d8:	f009 ffcc 	bl	800b074 <sniprintf>

      for (int j = i; j < i + VALUES_PER_LINE && j < NUM_EXPECTED_WORDS; j++) {
 80010dc:	f507 439c 	add.w	r3, r7, #19968	@ 0x4e00
 80010e0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f507 429c 	add.w	r2, r7, #19968	@ 0x4e00
 80010ea:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e02b      	b.n	800114a <PrintSPIData+0xf2>
        char word_str[8];
        snprintf(word_str, sizeof(word_str), "%4d ", flash_data[j] & 0xFFF); // Маска для 12 бит и вывод в десятичной системе
 80010f2:	f607 6338 	addw	r3, r7, #3640	@ 0xe38
 80010f6:	f5a3 6363 	sub.w	r3, r3, #3632	@ 0xe30
 80010fa:	f507 429c 	add.w	r2, r7, #19968	@ 0x4e00
 80010fe:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800110c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001110:	3838      	subs	r0, #56	@ 0x38
 8001112:	4a3a      	ldr	r2, [pc, #232]	@ (80011fc <PrintSPIData+0x1a4>)
 8001114:	2108      	movs	r1, #8
 8001116:	f009 ffad 	bl	800b074 <sniprintf>
        strncat(usb_msg, word_str, sizeof(usb_msg) - strlen(usb_msg) - 1);
 800111a:	4837      	ldr	r0, [pc, #220]	@ (80011f8 <PrintSPIData+0x1a0>)
 800111c:	f7ff f8a8 	bl	8000270 <strlen>
 8001120:	4603      	mov	r3, r0
 8001122:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8001126:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800112a:	3b38      	subs	r3, #56	@ 0x38
 800112c:	4619      	mov	r1, r3
 800112e:	4832      	ldr	r0, [pc, #200]	@ (80011f8 <PrintSPIData+0x1a0>)
 8001130:	f00a f843 	bl	800b1ba <strncat>
      for (int j = i; j < i + VALUES_PER_LINE && j < NUM_EXPECTED_WORDS; j++) {
 8001134:	f507 439c 	add.w	r3, r7, #19968	@ 0x4e00
 8001138:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	f507 429c 	add.w	r2, r7, #19968	@ 0x4e00
 8001144:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	f507 439c 	add.w	r3, r7, #19968	@ 0x4e00
 800114e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3309      	adds	r3, #9
 8001156:	f507 429c 	add.w	r2, r7, #19968	@ 0x4e00
 800115a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	dc08      	bgt.n	8001176 <PrintSPIData+0x11e>
 8001164:	f507 439c 	add.w	r3, r7, #19968	@ 0x4e00
 8001168:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001172:	4293      	cmp	r3, r2
 8001174:	ddbd      	ble.n	80010f2 <PrintSPIData+0x9a>
      }
      strncat(usb_msg, "\r\n", sizeof(usb_msg) - strlen(usb_msg) - 1);
 8001176:	4820      	ldr	r0, [pc, #128]	@ (80011f8 <PrintSPIData+0x1a0>)
 8001178:	f7ff f87a 	bl	8000270 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001182:	461a      	mov	r2, r3
 8001184:	491e      	ldr	r1, [pc, #120]	@ (8001200 <PrintSPIData+0x1a8>)
 8001186:	481c      	ldr	r0, [pc, #112]	@ (80011f8 <PrintSPIData+0x1a0>)
 8001188:	f00a f817 	bl	800b1ba <strncat>
      CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 800118c:	481a      	ldr	r0, [pc, #104]	@ (80011f8 <PrintSPIData+0x1a0>)
 800118e:	f7ff f86f 	bl	8000270 <strlen>
 8001192:	4603      	mov	r3, r0
 8001194:	4619      	mov	r1, r3
 8001196:	4818      	ldr	r0, [pc, #96]	@ (80011f8 <PrintSPIData+0x1a0>)
 8001198:	f008 fbea 	bl	8009970 <CDC_Transmit_FS>
      HAL_Delay(10); // Небольшая задержка для USB
 800119c:	200a      	movs	r0, #10
 800119e:	f000 fe5f 	bl	8001e60 <HAL_Delay>
    for (int i = 0; i < NUM_EXPECTED_WORDS; i += VALUES_PER_LINE) {
 80011a2:	f507 439c 	add.w	r3, r7, #19968	@ 0x4e00
 80011a6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	330a      	adds	r3, #10
 80011ae:	f507 429c 	add.w	r2, r7, #19968	@ 0x4e00
 80011b2:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	f507 439c 	add.w	r3, r7, #19968	@ 0x4e00
 80011bc:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011c6:	4293      	cmp	r3, r2
 80011c8:	f77f af5e 	ble.w	8001088 <PrintSPIData+0x30>
    }
  } else {
    snprintf(usb_msg, sizeof(usb_msg), "Failed to read data from FLASH!\r\n");
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
  }
}
 80011cc:	e00c      	b.n	80011e8 <PrintSPIData+0x190>
    snprintf(usb_msg, sizeof(usb_msg), "Failed to read data from FLASH!\r\n");
 80011ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <PrintSPIData+0x1ac>)
 80011d0:	2180      	movs	r1, #128	@ 0x80
 80011d2:	4809      	ldr	r0, [pc, #36]	@ (80011f8 <PrintSPIData+0x1a0>)
 80011d4:	f009 ff4e 	bl	800b074 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80011d8:	4807      	ldr	r0, [pc, #28]	@ (80011f8 <PrintSPIData+0x1a0>)
 80011da:	f7ff f849 	bl	8000270 <strlen>
 80011de:	4603      	mov	r3, r0
 80011e0:	4619      	mov	r1, r3
 80011e2:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <PrintSPIData+0x1a0>)
 80011e4:	f008 fbc4 	bl	8009970 <CDC_Transmit_FS>
}
 80011e8:	bf00      	nop
 80011ea:	f507 479c 	add.w	r7, r7, #19968	@ 0x4e00
 80011ee:	3738      	adds	r7, #56	@ 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0800e9a0 	.word	0x0800e9a0
 80011f8:	200051b0 	.word	0x200051b0
 80011fc:	0800e9bc 	.word	0x0800e9bc
 8001200:	0800e9c4 	.word	0x0800e9c4
 8001204:	0800e9c8 	.word	0x0800e9c8

08001208 <ProcessSPI_GPIO>:

/**
  * @brief Обработка SPI через GPIO (битбэнг)
  */
void ProcessSPI_GPIO(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
    uint8_t current_cs = HAL_GPIO_ReadPin(CS_GPIO_Port, CS_Pin);
 800120e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001212:	485e      	ldr	r0, [pc, #376]	@ (800138c <ProcessSPI_GPIO+0x184>)
 8001214:	f001 fcd6 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
    uint8_t current_sclk = HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin);
 800121c:	2101      	movs	r1, #1
 800121e:	485b      	ldr	r0, [pc, #364]	@ (800138c <ProcessSPI_GPIO+0x184>)
 8001220:	f001 fcd0 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8001224:	4603      	mov	r3, r0
 8001226:	71bb      	strb	r3, [r7, #6]
    uint8_t current_miso = HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin);
 8001228:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800122c:	4857      	ldr	r0, [pc, #348]	@ (800138c <ProcessSPI_GPIO+0x184>)
 800122e:	f001 fcc9 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	717b      	strb	r3, [r7, #5]

    // SPI Mode 0 (CPOL=0, CPHA=0) - sampling on rising edge
    if (spi_state == SPI_STATE_CS_LOW && current_cs == 0) {
 8001236:	4b56      	ldr	r3, [pc, #344]	@ (8001390 <ProcessSPI_GPIO+0x188>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b01      	cmp	r3, #1
 800123e:	d16c      	bne.n	800131a <ProcessSPI_GPIO+0x112>
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d169      	bne.n	800131a <ProcessSPI_GPIO+0x112>
        if (current_sclk && !spi_receiver.last_sclk_state) { // Rising edge
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 808b 	beq.w	8001364 <ProcessSPI_GPIO+0x15c>
 800124e:	4b51      	ldr	r3, [pc, #324]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 8001250:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001254:	f893 3e26 	ldrb.w	r3, [r3, #3622]	@ 0xe26
 8001258:	2b00      	cmp	r3, #0
 800125a:	f040 8083 	bne.w	8001364 <ProcessSPI_GPIO+0x15c>
            spi_receiver.current_word <<= 1;
 800125e:	4b4d      	ldr	r3, [pc, #308]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 8001260:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001264:	f8b3 3e20 	ldrh.w	r3, [r3, #3616]	@ 0xe20
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b49      	ldr	r3, [pc, #292]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 800126e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001272:	f8a3 2e20 	strh.w	r2, [r3, #3616]	@ 0xe20
            spi_receiver.current_word |= current_miso;
 8001276:	4b47      	ldr	r3, [pc, #284]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 8001278:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800127c:	f8b3 2e20 	ldrh.w	r2, [r3, #3616]	@ 0xe20
 8001280:	797b      	ldrb	r3, [r7, #5]
 8001282:	b29b      	uxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b42      	ldr	r3, [pc, #264]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 800128a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800128e:	f8a3 2e20 	strh.w	r2, [r3, #3616]	@ 0xe20
            spi_receiver.bit_counter++;
 8001292:	4b40      	ldr	r3, [pc, #256]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 8001294:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001298:	f893 3e22 	ldrb.w	r3, [r3, #3618]	@ 0xe22
 800129c:	3301      	adds	r3, #1
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 80012a2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012a6:	f883 2e22 	strb.w	r2, [r3, #3618]	@ 0xe22

            if (spi_receiver.bit_counter >= SPI_DATA_BITS) {
 80012aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 80012ac:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012b0:	f893 3e22 	ldrb.w	r3, [r3, #3618]	@ 0xe22
 80012b4:	2b0b      	cmp	r3, #11
 80012b6:	d955      	bls.n	8001364 <ProcessSPI_GPIO+0x15c>
                spi_receiver.data[spi_receiver.word_counter++] = spi_receiver.current_word & 0xFFF; // Сохраняем только 12 бит
 80012b8:	4b36      	ldr	r3, [pc, #216]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 80012ba:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012be:	f8b3 2e20 	ldrh.w	r2, [r3, #3616]	@ 0xe20
 80012c2:	4b34      	ldr	r3, [pc, #208]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 80012c4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012c8:	f8b3 3e24 	ldrh.w	r3, [r3, #3620]	@ 0xe24
 80012cc:	1c59      	adds	r1, r3, #1
 80012ce:	b288      	uxth	r0, r1
 80012d0:	4930      	ldr	r1, [pc, #192]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 80012d2:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
 80012d6:	f8a1 0e24 	strh.w	r0, [r1, #3620]	@ 0xe24
 80012da:	4619      	mov	r1, r3
 80012dc:	f3c2 030b 	ubfx	r3, r2, #0, #12
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 80012e4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
                spi_receiver.current_word = 0;
 80012e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 80012ea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012ee:	2200      	movs	r2, #0
 80012f0:	f8a3 2e20 	strh.w	r2, [r3, #3616]	@ 0xe20
                spi_receiver.bit_counter = 0;
 80012f4:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 80012f6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2e22 	strb.w	r2, [r3, #3618]	@ 0xe22

                if (spi_receiver.word_counter >= NUM_EXPECTED_WORDS) {
 8001300:	4b24      	ldr	r3, [pc, #144]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 8001302:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001306:	f8b3 3e24 	ldrh.w	r3, [r3, #3620]	@ 0xe24
 800130a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800130e:	4293      	cmp	r3, r2
 8001310:	d928      	bls.n	8001364 <ProcessSPI_GPIO+0x15c>
                    spi_state = SPI_STATE_COMPLETE;
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <ProcessSPI_GPIO+0x188>)
 8001314:	2202      	movs	r2, #2
 8001316:	701a      	strb	r2, [r3, #0]
        if (current_sclk && !spi_receiver.last_sclk_state) { // Rising edge
 8001318:	e024      	b.n	8001364 <ProcessSPI_GPIO+0x15c>
                }
            }
        }
    }
    else if (current_cs) {
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <ProcessSPI_GPIO+0x120>
        spi_state = SPI_STATE_IDLE;
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <ProcessSPI_GPIO+0x188>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	e01e      	b.n	8001366 <ProcessSPI_GPIO+0x15e>
    }
    else if (!current_cs && spi_state == SPI_STATE_IDLE) {
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d11b      	bne.n	8001366 <ProcessSPI_GPIO+0x15e>
 800132e:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <ProcessSPI_GPIO+0x188>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d116      	bne.n	8001366 <ProcessSPI_GPIO+0x15e>
        spi_state = SPI_STATE_CS_LOW;
 8001338:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <ProcessSPI_GPIO+0x188>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
        spi_receiver.bit_counter = 0;
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 8001340:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2e22 	strb.w	r2, [r3, #3618]	@ 0xe22
        spi_receiver.current_word = 0;
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 800134c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001350:	2200      	movs	r2, #0
 8001352:	f8a3 2e20 	strh.w	r2, [r3, #3616]	@ 0xe20
        spi_receiver.word_counter = 0;
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 8001358:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800135c:	2200      	movs	r2, #0
 800135e:	f8a3 2e24 	strh.w	r2, [r3, #3620]	@ 0xe24
 8001362:	e000      	b.n	8001366 <ProcessSPI_GPIO+0x15e>
        if (current_sclk && !spi_receiver.last_sclk_state) { // Rising edge
 8001364:	bf00      	nop
    }

    spi_receiver.last_sclk_state = current_sclk;
 8001366:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 8001368:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800136c:	461a      	mov	r2, r3
 800136e:	79bb      	ldrb	r3, [r7, #6]
 8001370:	f882 3e26 	strb.w	r3, [r2, #3622]	@ 0xe26
    spi_receiver.last_cs_state = current_cs;
 8001374:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <ProcessSPI_GPIO+0x18c>)
 8001376:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800137a:	461a      	mov	r2, r3
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f882 3e27 	strb.w	r3, [r2, #3623]	@ 0xe27
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40020c00 	.word	0x40020c00
 8001390:	200051ac 	.word	0x200051ac
 8001394:	20000384 	.word	0x20000384

08001398 <EraseFlashSector>:

/**
  * @brief Стирание сектора FLASH
  */
void EraseFlashSector(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
    FLASH_EraseInitTypeDef erase_init;
    uint32_t sector_error = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]

    HAL_FLASH_Unlock(); // Разблокируем FLASH для записи
 80013a2:	f000 fff1 	bl	8002388 <HAL_FLASH_Unlock>

    erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
    erase_init.Sector = FLASH_TARGET_SECTOR;
 80013aa:	2307      	movs	r3, #7
 80013ac:	60fb      	str	r3, [r7, #12]
    erase_init.NbSectors = 1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	613b      	str	r3, [r7, #16]
    erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80013b2:	2302      	movs	r3, #2
 80013b4:	617b      	str	r3, [r7, #20]

    if (HAL_FLASHEx_Erase(&erase_init, &sector_error) != HAL_OK) {
 80013b6:	463a      	mov	r2, r7
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f001 f945 	bl	800264c <HAL_FLASHEx_Erase>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00c      	beq.n	80013e2 <EraseFlashSector+0x4a>
        // Ошибка стирания
        snprintf(usb_msg, sizeof(usb_msg), "FLASH erase failed!\r\n");
 80013c8:	4a09      	ldr	r2, [pc, #36]	@ (80013f0 <EraseFlashSector+0x58>)
 80013ca:	2180      	movs	r1, #128	@ 0x80
 80013cc:	4809      	ldr	r0, [pc, #36]	@ (80013f4 <EraseFlashSector+0x5c>)
 80013ce:	f009 fe51 	bl	800b074 <sniprintf>
        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80013d2:	4808      	ldr	r0, [pc, #32]	@ (80013f4 <EraseFlashSector+0x5c>)
 80013d4:	f7fe ff4c 	bl	8000270 <strlen>
 80013d8:	4603      	mov	r3, r0
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <EraseFlashSector+0x5c>)
 80013de:	f008 fac7 	bl	8009970 <CDC_Transmit_FS>
    }

    HAL_FLASH_Lock(); // Блокируем FLASH после записи
 80013e2:	f000 fff3 	bl	80023cc <HAL_FLASH_Lock>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	0800e9ec 	.word	0x0800e9ec
 80013f4:	200051b0 	.word	0x200051b0

080013f8 <SaveToFlash>:
  * @brief Сохранение данных во FLASH
  * @param data Указатель на данные
  * @param size Размер данных в байтах
  * @return true если успешно, false если ошибка
  */
bool SaveToFlash(uint16_t* data, uint32_t size) {
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
    uint32_t address = FLASH_TARGET_ADDR;
 8001402:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <SaveToFlash+0x70>)
 8001404:	617b      	str	r3, [r7, #20]
    uint32_t num_words = size / sizeof(uint16_t);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]

    // Сначала стираем сектор
    EraseFlashSector();
 800140c:	f7ff ffc4 	bl	8001398 <EraseFlashSector>

    HAL_FLASH_Unlock(); // Разблокируем FLASH для записи
 8001410:	f000 ffba 	bl	8002388 <HAL_FLASH_Unlock>

    // Записываем данные по полусловам (16 бит)
    for (uint32_t i = 0; i < num_words; i++) {
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	e01b      	b.n	8001452 <SaveToFlash+0x5a>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data[i]) != HAL_OK) {
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	2200      	movs	r2, #0
 8001428:	461c      	mov	r4, r3
 800142a:	4615      	mov	r5, r2
 800142c:	4622      	mov	r2, r4
 800142e:	462b      	mov	r3, r5
 8001430:	6979      	ldr	r1, [r7, #20]
 8001432:	2001      	movs	r0, #1
 8001434:	f000 ff56 	bl	80022e4 <HAL_FLASH_Program>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <SaveToFlash+0x4e>
            HAL_FLASH_Lock(); // Блокируем FLASH в случае ошибки
 800143e:	f000 ffc5 	bl	80023cc <HAL_FLASH_Lock>
            return false;
 8001442:	2300      	movs	r3, #0
 8001444:	e00c      	b.n	8001460 <SaveToFlash+0x68>
        }
        address += sizeof(uint16_t);
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3302      	adds	r3, #2
 800144a:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < num_words; i++) {
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	3301      	adds	r3, #1
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	429a      	cmp	r2, r3
 8001458:	d3df      	bcc.n	800141a <SaveToFlash+0x22>
    }

    HAL_FLASH_Lock(); // Блокируем FLASH после записи
 800145a:	f000 ffb7 	bl	80023cc <HAL_FLASH_Lock>
    return true;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	08060000 	.word	0x08060000

0800146c <ReadFromFlash>:
  * @brief Чтение данных из FLASH
  * @param data Указатель на буфер для данных
  * @param size Размер данных в байтах
  * @return true если успешно, false если ошибка
  */
bool ReadFromFlash(uint16_t* data, uint32_t size) {
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
    uint32_t address = FLASH_TARGET_ADDR;
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <ReadFromFlash+0x4c>)
 8001478:	617b      	str	r3, [r7, #20]
    uint32_t num_words = size / sizeof(uint16_t);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]

    // Просто копируем данные из FLASH в RAM
    for (uint32_t i = 0; i < num_words; i++) {
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	e00d      	b.n	80014a2 <ReadFromFlash+0x36>
        data[i] = *(__IO uint16_t*)address;
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	440b      	add	r3, r1
 8001490:	8812      	ldrh	r2, [r2, #0]
 8001492:	b292      	uxth	r2, r2
 8001494:	801a      	strh	r2, [r3, #0]
        address += sizeof(uint16_t);
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3302      	adds	r3, #2
 800149a:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < num_words; i++) {
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	3301      	adds	r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3ed      	bcc.n	8001486 <ReadFromFlash+0x1a>
    }

    return true;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	371c      	adds	r7, #28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	08060000 	.word	0x08060000

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f000 fc5c 	bl	8001d7c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f872 	bl	80015ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f000 f97a 	bl	80017c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80014cc:	f000 f94e 	bl	800176c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80014d0:	f008 f990 	bl	80097f4 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 80014d4:	f000 f8d2 	bl	800167c <MX_DAC_Init>
  MX_TIM3_Init();
 80014d8:	f000 f8fa 	bl	80016d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80014dc:	482a      	ldr	r0, [pc, #168]	@ (8001588 <main+0xcc>)
 80014de:	f003 faf7 	bl	8004ad0 <HAL_TIM_Base_Start>
  ResetSPIReceiver();
 80014e2:	f7ff fd9d 	bl	8001020 <ResetSPIReceiver>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // LED off
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ec:	4827      	ldr	r0, [pc, #156]	@ (800158c <main+0xd0>)
 80014ee:	f001 fb81 	bl	8002bf4 <HAL_GPIO_WritePin>

  // Выводим сообщение о готовности (обновлено для 10000 значений)
  snprintf(usb_msg, sizeof(usb_msg), "System initialized. Waiting for SPI data (10000 values)...\r\n");
 80014f2:	4a27      	ldr	r2, [pc, #156]	@ (8001590 <main+0xd4>)
 80014f4:	2180      	movs	r1, #128	@ 0x80
 80014f6:	4827      	ldr	r0, [pc, #156]	@ (8001594 <main+0xd8>)
 80014f8:	f009 fdbc 	bl	800b074 <sniprintf>
  CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 80014fc:	4825      	ldr	r0, [pc, #148]	@ (8001594 <main+0xd8>)
 80014fe:	f7fe feb7 	bl	8000270 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	4619      	mov	r1, r3
 8001506:	4823      	ldr	r0, [pc, #140]	@ (8001594 <main+0xd8>)
 8001508:	f008 fa32 	bl	8009970 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    ProcessSPI_GPIO();
 800150c:	f7ff fe7c 	bl	8001208 <ProcessSPI_GPIO>

    if (spi_state == SPI_STATE_COMPLETE && !data_saved_to_flash) {
 8001510:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <main+0xdc>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d1f8      	bne.n	800150c <main+0x50>
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <main+0xe0>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	f083 0301 	eor.w	r3, r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f1      	beq.n	800150c <main+0x50>
      // Сохраняем данные в FLASH перед выводом
      if (SaveToFlash(spi_receiver.data, FLASH_DATA_SIZE)) {
 8001528:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800152c:	481c      	ldr	r0, [pc, #112]	@ (80015a0 <main+0xe4>)
 800152e:	f7ff ff63 	bl	80013f8 <SaveToFlash>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d010      	beq.n	800155a <main+0x9e>
        data_saved_to_flash = true;
 8001538:	4b18      	ldr	r3, [pc, #96]	@ (800159c <main+0xe0>)
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]
        snprintf(usb_msg, sizeof(usb_msg), "10000 values saved to FLASH successfully!\r\n");
 800153e:	4a19      	ldr	r2, [pc, #100]	@ (80015a4 <main+0xe8>)
 8001540:	2180      	movs	r1, #128	@ 0x80
 8001542:	4814      	ldr	r0, [pc, #80]	@ (8001594 <main+0xd8>)
 8001544:	f009 fd96 	bl	800b074 <sniprintf>
        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001548:	4812      	ldr	r0, [pc, #72]	@ (8001594 <main+0xd8>)
 800154a:	f7fe fe91 	bl	8000270 <strlen>
 800154e:	4603      	mov	r3, r0
 8001550:	4619      	mov	r1, r3
 8001552:	4810      	ldr	r0, [pc, #64]	@ (8001594 <main+0xd8>)
 8001554:	f008 fa0c 	bl	8009970 <CDC_Transmit_FS>
 8001558:	e00c      	b.n	8001574 <main+0xb8>
      } else {
        snprintf(usb_msg, sizeof(usb_msg), "Failed to save data to FLASH!\r\n");
 800155a:	4a13      	ldr	r2, [pc, #76]	@ (80015a8 <main+0xec>)
 800155c:	2180      	movs	r1, #128	@ 0x80
 800155e:	480d      	ldr	r0, [pc, #52]	@ (8001594 <main+0xd8>)
 8001560:	f009 fd88 	bl	800b074 <sniprintf>
        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001564:	480b      	ldr	r0, [pc, #44]	@ (8001594 <main+0xd8>)
 8001566:	f7fe fe83 	bl	8000270 <strlen>
 800156a:	4603      	mov	r3, r0
 800156c:	4619      	mov	r1, r3
 800156e:	4809      	ldr	r0, [pc, #36]	@ (8001594 <main+0xd8>)
 8001570:	f008 f9fe 	bl	8009970 <CDC_Transmit_FS>
      }

      // Выводим данные из FLASH
      PrintSPIData();
 8001574:	f7ff fd70 	bl	8001058 <PrintSPIData>
      ResetSPIReceiver();
 8001578:	f7ff fd52 	bl	8001020 <ResetSPIReceiver>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Toggle LED on complete
 800157c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001580:	4802      	ldr	r0, [pc, #8]	@ (800158c <main+0xd0>)
 8001582:	f001 fb50 	bl	8002c26 <HAL_GPIO_TogglePin>
    ProcessSPI_GPIO();
 8001586:	e7c1      	b.n	800150c <main+0x50>
 8001588:	200002f4 	.word	0x200002f4
 800158c:	40020800 	.word	0x40020800
 8001590:	0800ea04 	.word	0x0800ea04
 8001594:	200051b0 	.word	0x200051b0
 8001598:	200051ac 	.word	0x200051ac
 800159c:	20005230 	.word	0x20005230
 80015a0:	20000384 	.word	0x20000384
 80015a4:	0800ea44 	.word	0x0800ea44
 80015a8:	0800ea70 	.word	0x0800ea70

080015ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b094      	sub	sp, #80	@ 0x50
 80015b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	2230      	movs	r2, #48	@ 0x30
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f009 fdf5 	bl	800b1aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <SystemClock_Config+0xc8>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	4a26      	ldr	r2, [pc, #152]	@ (8001674 <SystemClock_Config+0xc8>)
 80015da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e0:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <SystemClock_Config+0xc8>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <SystemClock_Config+0xcc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a20      	ldr	r2, [pc, #128]	@ (8001678 <SystemClock_Config+0xcc>)
 80015f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <SystemClock_Config+0xcc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001608:	2301      	movs	r3, #1
 800160a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800160c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001612:	2302      	movs	r3, #2
 8001614:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001616:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800161a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800161c:	2304      	movs	r3, #4
 800161e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001620:	2348      	movs	r3, #72	@ 0x48
 8001622:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001624:	2302      	movs	r3, #2
 8001626:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001628:	2303      	movs	r3, #3
 800162a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fd65 	bl	8004100 <HAL_RCC_OscConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800163c:	f000 f966 	bl	800190c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001640:	230f      	movs	r3, #15
 8001642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001644:	2302      	movs	r3, #2
 8001646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800164c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2102      	movs	r1, #2
 800165c:	4618      	mov	r0, r3
 800165e:	f002 ffc7 	bl	80045f0 <HAL_RCC_ClockConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001668:	f000 f950 	bl	800190c <Error_Handler>
  }
}
 800166c:	bf00      	nop
 800166e:	3750      	adds	r7, #80	@ 0x50
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001682:	463b      	mov	r3, r7
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_DAC_Init+0x4c>)
 800168c:	4a0f      	ldr	r2, [pc, #60]	@ (80016cc <MX_DAC_Init+0x50>)
 800168e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001690:	480d      	ldr	r0, [pc, #52]	@ (80016c8 <MX_DAC_Init+0x4c>)
 8001692:	f000 fd1a 	bl	80020ca <HAL_DAC_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800169c:	f000 f936 	bl	800190c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	2200      	movs	r2, #0
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	@ (80016c8 <MX_DAC_Init+0x4c>)
 80016b0:	f000 fd2d 	bl	800210e <HAL_DAC_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80016ba:	f000 f927 	bl	800190c <Error_Handler>
  }
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200002e0 	.word	0x200002e0
 80016cc:	40007400 	.word	0x40007400

080016d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e4:	463b      	mov	r3, r7
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <MX_TIM3_Init+0x94>)
 80016ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001768 <MX_TIM3_Init+0x98>)
 80016f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <MX_TIM3_Init+0x94>)
 80016f4:	22a7      	movs	r2, #167	@ 0xa7
 80016f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <MX_TIM3_Init+0x94>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFFFFFF;
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <MX_TIM3_Init+0x94>)
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <MX_TIM3_Init+0x94>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800170c:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <MX_TIM3_Init+0x94>)
 800170e:	2280      	movs	r2, #128	@ 0x80
 8001710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001712:	4814      	ldr	r0, [pc, #80]	@ (8001764 <MX_TIM3_Init+0x94>)
 8001714:	f003 f98c 	bl	8004a30 <HAL_TIM_Base_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800171e:	f000 f8f5 	bl	800190c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001726:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4619      	mov	r1, r3
 800172e:	480d      	ldr	r0, [pc, #52]	@ (8001764 <MX_TIM3_Init+0x94>)
 8001730:	f003 fb26 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800173a:	f000 f8e7 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	@ (8001764 <MX_TIM3_Init+0x94>)
 800174c:	f003 fd52 	bl	80051f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001756:	f000 f8d9 	bl	800190c <Error_Handler>
  }
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200002f4 	.word	0x200002f4
 8001768:	40000400 	.word	0x40000400

0800176c <MX_USART1_UART_Init>:
  * @brief USART1 UART Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001772:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <MX_USART1_UART_Init+0x50>)
 8001774:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001778:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800177c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <MX_USART1_UART_Init+0x4c>)
 80017a4:	f003 fdb6 	bl	8005314 <HAL_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ae:	f000 f8ad 	bl	800190c <Error_Handler>
  }
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000033c 	.word	0x2000033c
 80017bc:	40011000 	.word	0x40011000

080017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b48      	ldr	r3, [pc, #288]	@ (80018fc <MX_GPIO_Init+0x13c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a47      	ldr	r2, [pc, #284]	@ (80018fc <MX_GPIO_Init+0x13c>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b45      	ldr	r3, [pc, #276]	@ (80018fc <MX_GPIO_Init+0x13c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b41      	ldr	r3, [pc, #260]	@ (80018fc <MX_GPIO_Init+0x13c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a40      	ldr	r2, [pc, #256]	@ (80018fc <MX_GPIO_Init+0x13c>)
 80017fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b3e      	ldr	r3, [pc, #248]	@ (80018fc <MX_GPIO_Init+0x13c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b3a      	ldr	r3, [pc, #232]	@ (80018fc <MX_GPIO_Init+0x13c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a39      	ldr	r2, [pc, #228]	@ (80018fc <MX_GPIO_Init+0x13c>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b37      	ldr	r3, [pc, #220]	@ (80018fc <MX_GPIO_Init+0x13c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b33      	ldr	r3, [pc, #204]	@ (80018fc <MX_GPIO_Init+0x13c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a32      	ldr	r2, [pc, #200]	@ (80018fc <MX_GPIO_Init+0x13c>)
 8001834:	f043 0308 	orr.w	r3, r3, #8
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b30      	ldr	r3, [pc, #192]	@ (80018fc <MX_GPIO_Init+0x13c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4b2c      	ldr	r3, [pc, #176]	@ (80018fc <MX_GPIO_Init+0x13c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a2b      	ldr	r2, [pc, #172]	@ (80018fc <MX_GPIO_Init+0x13c>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <MX_GPIO_Init+0x13c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|TH_CS_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 8001868:	4825      	ldr	r0, [pc, #148]	@ (8001900 <MX_GPIO_Init+0x140>)
 800186a:	f001 f9c3 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2120      	movs	r1, #32
 8001872:	4824      	ldr	r0, [pc, #144]	@ (8001904 <MX_GPIO_Init+0x144>)
 8001874:	f001 f9be 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	2102      	movs	r1, #2
 800187c:	4822      	ldr	r0, [pc, #136]	@ (8001908 <MX_GPIO_Init+0x148>)
 800187e:	f001 f9b9 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 TH_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|TH_CS_Pin;
 8001882:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4819      	ldr	r0, [pc, #100]	@ (8001900 <MX_GPIO_Init+0x140>)
 800189c:	f000 fff6 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018a0:	2320      	movs	r3, #32
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4813      	ldr	r0, [pc, #76]	@ (8001904 <MX_GPIO_Init+0x144>)
 80018b8:	f000 ffe8 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin MISO_Pin SCLK_Pin */
  GPIO_InitStruct.Pin = CS_Pin|MISO_Pin|SCLK_Pin;
 80018bc:	f24c 0301 	movw	r3, #49153	@ 0xc001
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	480d      	ldr	r0, [pc, #52]	@ (8001908 <MX_GPIO_Init+0x148>)
 80018d2:	f000 ffdb 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 80018d6:	2302      	movs	r3, #2
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4806      	ldr	r0, [pc, #24]	@ (8001908 <MX_GPIO_Init+0x148>)
 80018ee:	f000 ffcd 	bl	800288c <HAL_GPIO_Init>
}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	@ 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020800 	.word	0x40020800
 8001904:	40020000 	.word	0x40020000
 8001908:	40020c00 	.word	0x40020c00

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <Error_Handler+0x4>

08001914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <HAL_MspInit+0x4c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <HAL_MspInit+0x4c>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001928:	6453      	str	r3, [r2, #68]	@ 0x44
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_MspInit+0x4c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	4a08      	ldr	r2, [pc, #32]	@ (8001960 <HAL_MspInit+0x4c>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	@ 0x40
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	@ 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a17      	ldr	r2, [pc, #92]	@ (80019e0 <HAL_DAC_MspInit+0x7c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d127      	bne.n	80019d6 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <HAL_DAC_MspInit+0x80>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	4a15      	ldr	r2, [pc, #84]	@ (80019e4 <HAL_DAC_MspInit+0x80>)
 8001990:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001994:	6413      	str	r3, [r2, #64]	@ 0x40
 8001996:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <HAL_DAC_MspInit+0x80>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <HAL_DAC_MspInit+0x80>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	4a0e      	ldr	r2, [pc, #56]	@ (80019e4 <HAL_DAC_MspInit+0x80>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b2:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <HAL_DAC_MspInit+0x80>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019be:	2310      	movs	r3, #16
 80019c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c2:	2303      	movs	r3, #3
 80019c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <HAL_DAC_MspInit+0x84>)
 80019d2:	f000 ff5b 	bl	800288c <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	@ 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40007400 	.word	0x40007400
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020000 	.word	0x40020000

080019ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a34 <HAL_TIM_Base_MspInit+0x48>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d115      	bne.n	8001a2a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <HAL_TIM_Base_MspInit+0x4c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	4a0c      	ldr	r2, [pc, #48]	@ (8001a38 <HAL_TIM_Base_MspInit+0x4c>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <HAL_TIM_Base_MspInit+0x4c>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	201d      	movs	r0, #29
 8001a20:	f000 fb1d 	bl	800205e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a24:	201d      	movs	r0, #29
 8001a26:	f000 fb36 	bl	8002096 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40000400 	.word	0x40000400
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	@ 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad0 <HAL_UART_MspInit+0x94>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d133      	bne.n	8001ac6 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad4 <HAL_UART_MspInit+0x98>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a66:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad4 <HAL_UART_MspInit+0x98>)
 8001a68:	f043 0310 	orr.w	r3, r3, #16
 8001a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_UART_MspInit+0x98>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <HAL_UART_MspInit+0x98>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a14      	ldr	r2, [pc, #80]	@ (8001ad4 <HAL_UART_MspInit+0x98>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_UART_MspInit+0x98>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a96:	23c0      	movs	r3, #192	@ 0xc0
 8001a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4809      	ldr	r0, [pc, #36]	@ (8001ad8 <HAL_UART_MspInit+0x9c>)
 8001ab2:	f000 feeb 	bl	800288c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2025      	movs	r0, #37	@ 0x25
 8001abc:	f000 facf 	bl	800205e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ac0:	2025      	movs	r0, #37	@ 0x25
 8001ac2:	f000 fae8 	bl	8002096 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	@ 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40011000 	.word	0x40011000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020400 	.word	0x40020400

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <MemManage_Handler+0x4>

08001af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b32:	f000 f975 	bl	8001e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <TIM3_IRQHandler+0x10>)
 8001b42:	f003 f82d 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200002f4 	.word	0x200002f4

08001b50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <USART1_IRQHandler+0x10>)
 8001b56:	f003 fc2d 	bl	80053b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000033c 	.word	0x2000033c

08001b64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <OTG_FS_IRQHandler+0x10>)
 8001b6a:	f001 f9ba 	bl	8002ee2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000673c 	.word	0x2000673c

08001b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return 1;
 8001b7c:	2301      	movs	r3, #1
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_kill>:

int _kill(int pid, int sig)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b92:	f009 fb6f 	bl	800b274 <__errno>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2216      	movs	r2, #22
 8001b9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_exit>:

void _exit (int status)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ffe7 	bl	8001b88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bba:	bf00      	nop
 8001bbc:	e7fd      	b.n	8001bba <_exit+0x12>

08001bbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e00a      	b.n	8001be6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bd0:	f3af 8000 	nop.w
 8001bd4:	4601      	mov	r1, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	60ba      	str	r2, [r7, #8]
 8001bdc:	b2ca      	uxtb	r2, r1
 8001bde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3301      	adds	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	dbf0      	blt.n	8001bd0 <_read+0x12>
  }

  return len;
 8001bee:	687b      	ldr	r3, [r7, #4]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e009      	b.n	8001c1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbf1      	blt.n	8001c0a <_write+0x12>
  }
  return len;
 8001c26:	687b      	ldr	r3, [r7, #4]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_close>:

int _close(int file)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c58:	605a      	str	r2, [r3, #4]
  return 0;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_isatty>:

int _isatty(int file)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c70:	2301      	movs	r3, #1
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca0:	4a14      	ldr	r2, [pc, #80]	@ (8001cf4 <_sbrk+0x5c>)
 8001ca2:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <_sbrk+0x60>)
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cac:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <_sbrk+0x64>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <_sbrk+0x68>)
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d207      	bcs.n	8001cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc8:	f009 fad4 	bl	800b274 <__errno>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	220c      	movs	r2, #12
 8001cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	e009      	b.n	8001cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <_sbrk+0x64>)
 8001ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cea:	68fb      	ldr	r3, [r7, #12]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20020000 	.word	0x20020000
 8001cf8:	00000400 	.word	0x00000400
 8001cfc:	20005234 	.word	0x20005234
 8001d00:	20006f90 	.word	0x20006f90

08001d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <SystemInit+0x20>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d0e:	4a05      	ldr	r2, [pc, #20]	@ (8001d24 <SystemInit+0x20>)
 8001d10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d2c:	f7ff ffea 	bl	8001d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d30:	480c      	ldr	r0, [pc, #48]	@ (8001d64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d32:	490d      	ldr	r1, [pc, #52]	@ (8001d68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d34:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d48:	4c0a      	ldr	r4, [pc, #40]	@ (8001d74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d56:	f009 fa93 	bl	800b280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5a:	f7ff fbaf 	bl	80014bc <main>
  bx  lr    
 8001d5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d68:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001d6c:	0800ef2c 	.word	0x0800ef2c
  ldr r2, =_sbss
 8001d70:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001d74:	20006f8c 	.word	0x20006f8c

08001d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC_IRQHandler>
	...

08001d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d80:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0d      	ldr	r2, [pc, #52]	@ (8001dbc <HAL_Init+0x40>)
 8001d86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <HAL_Init+0x40>)
 8001d92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	@ (8001dbc <HAL_Init+0x40>)
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f000 f94f 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001daa:	200f      	movs	r0, #15
 8001dac:	f000 f808 	bl	8001dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db0:	f7ff fdb0 	bl	8001914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023c00 	.word	0x40023c00

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_InitTick+0x54>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <HAL_InitTick+0x58>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f967 	bl	80020b2 <HAL_SYSTICK_Config>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00e      	b.n	8001e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d80a      	bhi.n	8001e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df4:	2200      	movs	r2, #0
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f000 f92f 	bl	800205e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e00:	4a06      	ldr	r2, [pc, #24]	@ (8001e1c <HAL_InitTick+0x5c>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	20000004 	.word	0x20000004

08001e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_IncTick+0x20>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_IncTick+0x24>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a04      	ldr	r2, [pc, #16]	@ (8001e44 <HAL_IncTick+0x24>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000008 	.word	0x20000008
 8001e44:	20005238 	.word	0x20005238

08001e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	@ (8001e5c <HAL_GetTick+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20005238 	.word	0x20005238

08001e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff ffee 	bl	8001e48 <HAL_GetTick>
 8001e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e78:	d005      	beq.n	8001e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HAL_Delay+0x44>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e86:	bf00      	nop
 8001e88:	f7ff ffde 	bl	8001e48 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8f7      	bhi.n	8001e88 <HAL_Delay+0x28>
  {
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4907      	ldr	r1, [pc, #28]	@ (8001f44 <__NVIC_EnableIRQ+0x38>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	@ (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	@ (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	@ 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002014:	d301      	bcc.n	800201a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002016:	2301      	movs	r3, #1
 8002018:	e00f      	b.n	800203a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201a:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <SysTick_Config+0x40>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002022:	210f      	movs	r1, #15
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f7ff ff8e 	bl	8001f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <SysTick_Config+0x40>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002032:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <SysTick_Config+0x40>)
 8002034:	2207      	movs	r2, #7
 8002036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	e000e010 	.word	0xe000e010

08002048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff29 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff3e 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff8e 	bl	8001f9c <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5d 	bl	8001f48 <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff31 	bl	8001f0c <__NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffa2 	bl	8002004 <SysTick_Config>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e014      	b.n	8002106 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	791b      	ldrb	r3, [r3, #4]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff fc39 	bl	8001964 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800210e:	b480      	push	{r7}
 8002110:	b089      	sub	sp, #36	@ 0x24
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_DAC_ConfigChannel+0x1c>
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e042      	b.n	80021b4 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	795b      	ldrb	r3, [r3, #5]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_DAC_ConfigChannel+0x2c>
 8002136:	2302      	movs	r3, #2
 8002138:	e03c      	b.n	80021b4 <HAL_DAC_ConfigChannel+0xa6>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2202      	movs	r2, #2
 8002144:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6819      	ldr	r1, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	22c0      	movs	r2, #192	@ 0xc0
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43da      	mvns	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	400a      	ands	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80021b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3724      	adds	r7, #36	@ 0x24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021ce:	f7ff fe3b 	bl	8001e48 <HAL_GetTick>
 80021d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d008      	beq.n	80021f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2280      	movs	r2, #128	@ 0x80
 80021e4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e052      	b.n	8002298 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0216 	bic.w	r2, r2, #22
 8002200:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002210:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <HAL_DMA_Abort+0x62>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0208 	bic.w	r2, r2, #8
 8002230:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002242:	e013      	b.n	800226c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002244:	f7ff fe00 	bl	8001e48 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b05      	cmp	r3, #5
 8002250:	d90c      	bls.n	800226c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2220      	movs	r2, #32
 8002256:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2203      	movs	r2, #3
 800225c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e015      	b.n	8002298 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e4      	bne.n	8002244 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227e:	223f      	movs	r2, #63	@ 0x3f
 8002280:	409a      	lsls	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d004      	beq.n	80022be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2280      	movs	r2, #128	@ 0x80
 80022b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00c      	b.n	80022d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2205      	movs	r2, #5
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022f2:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <HAL_FLASH_Program+0x9c>)
 80022f4:	7e1b      	ldrb	r3, [r3, #24]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_FLASH_Program+0x1a>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e03b      	b.n	8002376 <HAL_FLASH_Program+0x92>
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <HAL_FLASH_Program+0x9c>)
 8002300:	2201      	movs	r2, #1
 8002302:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002304:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002308:	f000 f870 	bl	80023ec <FLASH_WaitForLastOperation>
 800230c:	4603      	mov	r3, r0
 800230e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d12b      	bne.n	800236e <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800231c:	783b      	ldrb	r3, [r7, #0]
 800231e:	4619      	mov	r1, r3
 8002320:	68b8      	ldr	r0, [r7, #8]
 8002322:	f000 f91b 	bl	800255c <FLASH_Program_Byte>
 8002326:	e016      	b.n	8002356 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d105      	bne.n	800233a <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800232e:	883b      	ldrh	r3, [r7, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	68b8      	ldr	r0, [r7, #8]
 8002334:	f000 f8ee 	bl	8002514 <FLASH_Program_HalfWord>
 8002338:	e00d      	b.n	8002356 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d105      	bne.n	800234c <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	4619      	mov	r1, r3
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f000 f8c3 	bl	80024d0 <FLASH_Program_Word>
 800234a:	e004      	b.n	8002356 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800234c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002350:	68b8      	ldr	r0, [r7, #8]
 8002352:	f000 f88b 	bl	800246c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002356:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800235a:	f000 f847 	bl	80023ec <FLASH_WaitForLastOperation>
 800235e:	4603      	mov	r3, r0
 8002360:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002362:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <HAL_FLASH_Program+0xa0>)
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	4a07      	ldr	r2, [pc, #28]	@ (8002384 <HAL_FLASH_Program+0xa0>)
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800236e:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <HAL_FLASH_Program+0x9c>)
 8002370:	2200      	movs	r2, #0
 8002372:	761a      	strb	r2, [r3, #24]

  return status;
 8002374:	7dfb      	ldrb	r3, [r7, #23]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000523c 	.word	0x2000523c
 8002384:	40023c00 	.word	0x40023c00

08002388 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002392:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <HAL_FLASH_Unlock+0x38>)
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	da0b      	bge.n	80023b2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800239a:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <HAL_FLASH_Unlock+0x38>)
 800239c:	4a09      	ldr	r2, [pc, #36]	@ (80023c4 <HAL_FLASH_Unlock+0x3c>)
 800239e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80023a0:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <HAL_FLASH_Unlock+0x38>)
 80023a2:	4a09      	ldr	r2, [pc, #36]	@ (80023c8 <HAL_FLASH_Unlock+0x40>)
 80023a4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_FLASH_Unlock+0x38>)
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	da01      	bge.n	80023b2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80023b2:	79fb      	ldrb	r3, [r7, #7]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40023c00 	.word	0x40023c00
 80023c4:	45670123 	.word	0x45670123
 80023c8:	cdef89ab 	.word	0xcdef89ab

080023cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80023d0:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <HAL_FLASH_Lock+0x1c>)
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	4a04      	ldr	r2, [pc, #16]	@ (80023e8 <HAL_FLASH_Lock+0x1c>)
 80023d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023da:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40023c00 	.word	0x40023c00

080023ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002464 <FLASH_WaitForLastOperation+0x78>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80023fe:	f7ff fd23 	bl	8001e48 <HAL_GetTick>
 8002402:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002404:	e010      	b.n	8002428 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d00c      	beq.n	8002428 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <FLASH_WaitForLastOperation+0x38>
 8002414:	f7ff fd18 	bl	8001e48 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	d201      	bcs.n	8002428 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e019      	b.n	800245c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002428:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <FLASH_WaitForLastOperation+0x7c>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1e8      	bne.n	8002406 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <FLASH_WaitForLastOperation+0x7c>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002440:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <FLASH_WaitForLastOperation+0x7c>)
 8002442:	2201      	movs	r2, #1
 8002444:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002446:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <FLASH_WaitForLastOperation+0x7c>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002452:	f000 f8a5 	bl	80025a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0

}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000523c 	.word	0x2000523c
 8002468:	40023c00 	.word	0x40023c00

0800246c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002478:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <FLASH_Program_DoubleWord+0x60>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	4a13      	ldr	r2, [pc, #76]	@ (80024cc <FLASH_Program_DoubleWord+0x60>)
 800247e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002482:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002484:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <FLASH_Program_DoubleWord+0x60>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	4a10      	ldr	r2, [pc, #64]	@ (80024cc <FLASH_Program_DoubleWord+0x60>)
 800248a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800248e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002490:	4b0e      	ldr	r3, [pc, #56]	@ (80024cc <FLASH_Program_DoubleWord+0x60>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	4a0d      	ldr	r2, [pc, #52]	@ (80024cc <FLASH_Program_DoubleWord+0x60>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80024a2:	f3bf 8f6f 	isb	sy
}
 80024a6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80024a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	000a      	movs	r2, r1
 80024b6:	2300      	movs	r3, #0
 80024b8:	68f9      	ldr	r1, [r7, #12]
 80024ba:	3104      	adds	r1, #4
 80024bc:	4613      	mov	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40023c00 	.word	0x40023c00

080024d0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024da:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <FLASH_Program_Word+0x40>)
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	4a0c      	ldr	r2, [pc, #48]	@ (8002510 <FLASH_Program_Word+0x40>)
 80024e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80024e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <FLASH_Program_Word+0x40>)
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	4a09      	ldr	r2, [pc, #36]	@ (8002510 <FLASH_Program_Word+0x40>)
 80024ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80024f2:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <FLASH_Program_Word+0x40>)
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	4a06      	ldr	r2, [pc, #24]	@ (8002510 <FLASH_Program_Word+0x40>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	601a      	str	r2, [r3, #0]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40023c00 	.word	0x40023c00

08002514 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002520:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <FLASH_Program_HalfWord+0x44>)
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	4a0c      	ldr	r2, [pc, #48]	@ (8002558 <FLASH_Program_HalfWord+0x44>)
 8002526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800252a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800252c:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <FLASH_Program_HalfWord+0x44>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	4a09      	ldr	r2, [pc, #36]	@ (8002558 <FLASH_Program_HalfWord+0x44>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002536:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002538:	4b07      	ldr	r3, [pc, #28]	@ (8002558 <FLASH_Program_HalfWord+0x44>)
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	4a06      	ldr	r2, [pc, #24]	@ (8002558 <FLASH_Program_HalfWord+0x44>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	801a      	strh	r2, [r3, #0]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40023c00 	.word	0x40023c00

0800255c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002568:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <FLASH_Program_Byte+0x40>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	4a0b      	ldr	r2, [pc, #44]	@ (800259c <FLASH_Program_Byte+0x40>)
 800256e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002572:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002574:	4b09      	ldr	r3, [pc, #36]	@ (800259c <FLASH_Program_Byte+0x40>)
 8002576:	4a09      	ldr	r2, [pc, #36]	@ (800259c <FLASH_Program_Byte+0x40>)
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800257c:	4b07      	ldr	r3, [pc, #28]	@ (800259c <FLASH_Program_Byte+0x40>)
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	4a06      	ldr	r2, [pc, #24]	@ (800259c <FLASH_Program_Byte+0x40>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	701a      	strb	r2, [r3, #0]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023c00 	.word	0x40023c00

080025a0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80025a4:	4b27      	ldr	r3, [pc, #156]	@ (8002644 <FLASH_SetErrorCode+0xa4>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025b0:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <FLASH_SetErrorCode+0xa8>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f043 0310 	orr.w	r3, r3, #16
 80025b8:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <FLASH_SetErrorCode+0xa8>)
 80025ba:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80025bc:	4b21      	ldr	r3, [pc, #132]	@ (8002644 <FLASH_SetErrorCode+0xa4>)
 80025be:	2210      	movs	r2, #16
 80025c0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80025c2:	4b20      	ldr	r3, [pc, #128]	@ (8002644 <FLASH_SetErrorCode+0xa4>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d008      	beq.n	80025e0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80025ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002648 <FLASH_SetErrorCode+0xa8>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f043 0308 	orr.w	r3, r3, #8
 80025d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002648 <FLASH_SetErrorCode+0xa8>)
 80025d8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80025da:	4b1a      	ldr	r3, [pc, #104]	@ (8002644 <FLASH_SetErrorCode+0xa4>)
 80025dc:	2220      	movs	r2, #32
 80025de:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80025e0:	4b18      	ldr	r3, [pc, #96]	@ (8002644 <FLASH_SetErrorCode+0xa4>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80025ec:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <FLASH_SetErrorCode+0xa8>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	4a14      	ldr	r2, [pc, #80]	@ (8002648 <FLASH_SetErrorCode+0xa8>)
 80025f6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80025f8:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <FLASH_SetErrorCode+0xa4>)
 80025fa:	2240      	movs	r2, #64	@ 0x40
 80025fc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80025fe:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <FLASH_SetErrorCode+0xa4>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800260a:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <FLASH_SetErrorCode+0xa8>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f043 0302 	orr.w	r3, r3, #2
 8002612:	4a0d      	ldr	r2, [pc, #52]	@ (8002648 <FLASH_SetErrorCode+0xa8>)
 8002614:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002616:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <FLASH_SetErrorCode+0xa4>)
 8002618:	2280      	movs	r2, #128	@ 0x80
 800261a:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800261c:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <FLASH_SetErrorCode+0xa4>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002628:	4b07      	ldr	r3, [pc, #28]	@ (8002648 <FLASH_SetErrorCode+0xa8>)
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f043 0320 	orr.w	r3, r3, #32
 8002630:	4a05      	ldr	r2, [pc, #20]	@ (8002648 <FLASH_SetErrorCode+0xa8>)
 8002632:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002634:	4b03      	ldr	r3, [pc, #12]	@ (8002644 <FLASH_SetErrorCode+0xa4>)
 8002636:	2202      	movs	r2, #2
 8002638:	60da      	str	r2, [r3, #12]
  }
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	40023c00 	.word	0x40023c00
 8002648:	2000523c 	.word	0x2000523c

0800264c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800265a:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <HAL_FLASHEx_Erase+0xd4>)
 800265c:	7e1b      	ldrb	r3, [r3, #24]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_FLASHEx_Erase+0x1a>
 8002662:	2302      	movs	r3, #2
 8002664:	e058      	b.n	8002718 <HAL_FLASHEx_Erase+0xcc>
 8002666:	4b2e      	ldr	r3, [pc, #184]	@ (8002720 <HAL_FLASHEx_Erase+0xd4>)
 8002668:	2201      	movs	r2, #1
 800266a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800266c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002670:	f7ff febc 	bl	80023ec <FLASH_WaitForLastOperation>
 8002674:	4603      	mov	r3, r0
 8002676:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d148      	bne.n	8002710 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f04f 32ff 	mov.w	r2, #4294967295
 8002684:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d115      	bne.n	80026ba <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f000 f844 	bl	8002728 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026a4:	f7ff fea2 	bl	80023ec <FLASH_WaitForLastOperation>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80026ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <HAL_FLASHEx_Erase+0xd8>)
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002724 <HAL_FLASHEx_Erase+0xd8>)
 80026b2:	f023 0304 	bic.w	r3, r3, #4
 80026b6:	6113      	str	r3, [r2, #16]
 80026b8:	e028      	b.n	800270c <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	e01c      	b.n	80026fc <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	4619      	mov	r1, r3
 80026ca:	68b8      	ldr	r0, [r7, #8]
 80026cc:	f000 f850 	bl	8002770 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026d4:	f7ff fe8a 	bl	80023ec <FLASH_WaitForLastOperation>
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80026dc:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <HAL_FLASHEx_Erase+0xd8>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	4a10      	ldr	r2, [pc, #64]	@ (8002724 <HAL_FLASHEx_Erase+0xd8>)
 80026e2:	f023 037a 	bic.w	r3, r3, #122	@ 0x7a
 80026e6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	601a      	str	r2, [r3, #0]
          break;
 80026f4:	e00a      	b.n	800270c <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	3301      	adds	r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4413      	add	r3, r2
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	429a      	cmp	r2, r3
 800270a:	d3da      	bcc.n	80026c2 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800270c:	f000 f878 	bl	8002800 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002710:	4b03      	ldr	r3, [pc, #12]	@ (8002720 <HAL_FLASHEx_Erase+0xd4>)
 8002712:	2200      	movs	r2, #0
 8002714:	761a      	strb	r2, [r3, #24]

  return status;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	2000523c 	.word	0x2000523c
 8002724:	40023c00 	.word	0x40023c00

08002728 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002734:	4b0d      	ldr	r3, [pc, #52]	@ (800276c <FLASH_MassErase+0x44>)
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	4a0c      	ldr	r2, [pc, #48]	@ (800276c <FLASH_MassErase+0x44>)
 800273a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800273e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002740:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <FLASH_MassErase+0x44>)
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	4a09      	ldr	r2, [pc, #36]	@ (800276c <FLASH_MassErase+0x44>)
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800274c:	4b07      	ldr	r3, [pc, #28]	@ (800276c <FLASH_MassErase+0x44>)
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	4313      	orrs	r3, r2
 8002756:	4a05      	ldr	r2, [pc, #20]	@ (800276c <FLASH_MassErase+0x44>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800275c:	6113      	str	r3, [r2, #16]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023c00 	.word	0x40023c00

08002770 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	e010      	b.n	80027ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d103      	bne.n	800279a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002792:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e009      	b.n	80027ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d103      	bne.n	80027a8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80027a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	e002      	b.n	80027ae <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80027a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027ac:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027ae:	4b13      	ldr	r3, [pc, #76]	@ (80027fc <FLASH_Erase_Sector+0x8c>)
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	4a12      	ldr	r2, [pc, #72]	@ (80027fc <FLASH_Erase_Sector+0x8c>)
 80027b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80027ba:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <FLASH_Erase_Sector+0x8c>)
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	490f      	ldr	r1, [pc, #60]	@ (80027fc <FLASH_Erase_Sector+0x8c>)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80027c6:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <FLASH_Erase_Sector+0x8c>)
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	4a0c      	ldr	r2, [pc, #48]	@ (80027fc <FLASH_Erase_Sector+0x8c>)
 80027cc:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 80027d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80027d2:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <FLASH_Erase_Sector+0x8c>)
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4313      	orrs	r3, r2
 80027dc:	4a07      	ldr	r2, [pc, #28]	@ (80027fc <FLASH_Erase_Sector+0x8c>)
 80027de:	f043 0302 	orr.w	r3, r3, #2
 80027e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80027e4:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <FLASH_Erase_Sector+0x8c>)
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	4a04      	ldr	r2, [pc, #16]	@ (80027fc <FLASH_Erase_Sector+0x8c>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ee:	6113      	str	r3, [r2, #16]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40023c00 	.word	0x40023c00

08002800 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002804:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <FLASH_FlushCaches+0x88>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800280c:	2b00      	cmp	r3, #0
 800280e:	d017      	beq.n	8002840 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002810:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <FLASH_FlushCaches+0x88>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <FLASH_FlushCaches+0x88>)
 8002816:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800281a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800281c:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <FLASH_FlushCaches+0x88>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a19      	ldr	r2, [pc, #100]	@ (8002888 <FLASH_FlushCaches+0x88>)
 8002822:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <FLASH_FlushCaches+0x88>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a16      	ldr	r2, [pc, #88]	@ (8002888 <FLASH_FlushCaches+0x88>)
 800282e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002832:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002834:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <FLASH_FlushCaches+0x88>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <FLASH_FlushCaches+0x88>)
 800283a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800283e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <FLASH_FlushCaches+0x88>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d017      	beq.n	800287c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800284c:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <FLASH_FlushCaches+0x88>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0d      	ldr	r2, [pc, #52]	@ (8002888 <FLASH_FlushCaches+0x88>)
 8002852:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002856:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <FLASH_FlushCaches+0x88>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <FLASH_FlushCaches+0x88>)
 800285e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <FLASH_FlushCaches+0x88>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a07      	ldr	r2, [pc, #28]	@ (8002888 <FLASH_FlushCaches+0x88>)
 800286a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800286e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002870:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <FLASH_FlushCaches+0x88>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a04      	ldr	r2, [pc, #16]	@ (8002888 <FLASH_FlushCaches+0x88>)
 8002876:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800287a:	6013      	str	r3, [r2, #0]
  }
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00

0800288c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	@ 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	e16b      	b.n	8002b80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a8:	2201      	movs	r2, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	f040 815a 	bne.w	8002b7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d005      	beq.n	80028de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d130      	bne.n	8002940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2203      	movs	r2, #3
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 0201 	and.w	r2, r3, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b03      	cmp	r3, #3
 800294a:	d017      	beq.n	800297c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	2203      	movs	r2, #3
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d123      	bne.n	80029d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3208      	adds	r2, #8
 8002990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	08da      	lsrs	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3208      	adds	r2, #8
 80029ca:	69b9      	ldr	r1, [r7, #24]
 80029cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0203 	and.w	r2, r3, #3
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80b4 	beq.w	8002b7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b60      	ldr	r3, [pc, #384]	@ (8002b98 <HAL_GPIO_Init+0x30c>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	4a5f      	ldr	r2, [pc, #380]	@ (8002b98 <HAL_GPIO_Init+0x30c>)
 8002a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a22:	4b5d      	ldr	r3, [pc, #372]	@ (8002b98 <HAL_GPIO_Init+0x30c>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8002b9c <HAL_GPIO_Init+0x310>)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	3302      	adds	r3, #2
 8002a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	220f      	movs	r2, #15
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a52      	ldr	r2, [pc, #328]	@ (8002ba0 <HAL_GPIO_Init+0x314>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d02b      	beq.n	8002ab2 <HAL_GPIO_Init+0x226>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a51      	ldr	r2, [pc, #324]	@ (8002ba4 <HAL_GPIO_Init+0x318>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d025      	beq.n	8002aae <HAL_GPIO_Init+0x222>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a50      	ldr	r2, [pc, #320]	@ (8002ba8 <HAL_GPIO_Init+0x31c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01f      	beq.n	8002aaa <HAL_GPIO_Init+0x21e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4f      	ldr	r2, [pc, #316]	@ (8002bac <HAL_GPIO_Init+0x320>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d019      	beq.n	8002aa6 <HAL_GPIO_Init+0x21a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4e      	ldr	r2, [pc, #312]	@ (8002bb0 <HAL_GPIO_Init+0x324>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_GPIO_Init+0x216>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4d      	ldr	r2, [pc, #308]	@ (8002bb4 <HAL_GPIO_Init+0x328>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00d      	beq.n	8002a9e <HAL_GPIO_Init+0x212>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4c      	ldr	r2, [pc, #304]	@ (8002bb8 <HAL_GPIO_Init+0x32c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d007      	beq.n	8002a9a <HAL_GPIO_Init+0x20e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002bbc <HAL_GPIO_Init+0x330>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d101      	bne.n	8002a96 <HAL_GPIO_Init+0x20a>
 8002a92:	2307      	movs	r3, #7
 8002a94:	e00e      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002a96:	2308      	movs	r3, #8
 8002a98:	e00c      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	e00a      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	e008      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e004      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e002      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	f002 0203 	and.w	r2, r2, #3
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	4093      	lsls	r3, r2
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac4:	4935      	ldr	r1, [pc, #212]	@ (8002b9c <HAL_GPIO_Init+0x310>)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	3302      	adds	r3, #2
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc0 <HAL_GPIO_Init+0x334>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002af6:	4a32      	ldr	r2, [pc, #200]	@ (8002bc0 <HAL_GPIO_Init+0x334>)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002afc:	4b30      	ldr	r3, [pc, #192]	@ (8002bc0 <HAL_GPIO_Init+0x334>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b20:	4a27      	ldr	r2, [pc, #156]	@ (8002bc0 <HAL_GPIO_Init+0x334>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b26:	4b26      	ldr	r3, [pc, #152]	@ (8002bc0 <HAL_GPIO_Init+0x334>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc0 <HAL_GPIO_Init+0x334>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <HAL_GPIO_Init+0x334>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b74:	4a12      	ldr	r2, [pc, #72]	@ (8002bc0 <HAL_GPIO_Init+0x334>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b0f      	cmp	r3, #15
 8002b84:	f67f ae90 	bls.w	80028a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3724      	adds	r7, #36	@ 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40013800 	.word	0x40013800
 8002ba0:	40020000 	.word	0x40020000
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	40020800 	.word	0x40020800
 8002bac:	40020c00 	.word	0x40020c00
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40021400 	.word	0x40021400
 8002bb8:	40021800 	.word	0x40021800
 8002bbc:	40021c00 	.word	0x40021c00
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	887b      	ldrh	r3, [r7, #2]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e001      	b.n	8002be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
 8002c00:	4613      	mov	r3, r2
 8002c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c04:	787b      	ldrb	r3, [r7, #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c10:	e003      	b.n	8002c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c12:	887b      	ldrh	r3, [r7, #2]
 8002c14:	041a      	lsls	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	619a      	str	r2, [r3, #24]
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c38:	887a      	ldrh	r2, [r7, #2]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	041a      	lsls	r2, r3, #16
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	43d9      	mvns	r1, r3
 8002c44:	887b      	ldrh	r3, [r7, #2]
 8002c46:	400b      	ands	r3, r1
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	619a      	str	r2, [r3, #24]
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af02      	add	r7, sp, #8
 8002c60:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e101      	b.n	8002e70 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f006 ffba 	bl	8009c00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2203      	movs	r2, #3
 8002c90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c9a:	d102      	bne.n	8002ca2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f003 fb7d 	bl	80063a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7c1a      	ldrb	r2, [r3, #16]
 8002cb4:	f88d 2000 	strb.w	r2, [sp]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cbc:	f003 fa5c 	bl	8006178 <USB_CoreInit>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0ce      	b.n	8002e70 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 fb75 	bl	80063c8 <USB_SetCurrentMode>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0bf      	b.n	8002e70 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e04a      	b.n	8002d8c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3315      	adds	r3, #21
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	3314      	adds	r3, #20
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	b298      	uxth	r0, r3
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	332e      	adds	r3, #46	@ 0x2e
 8002d32:	4602      	mov	r2, r0
 8002d34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	3318      	adds	r3, #24
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	331c      	adds	r3, #28
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3320      	adds	r3, #32
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3324      	adds	r3, #36	@ 0x24
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	791b      	ldrb	r3, [r3, #4]
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d3af      	bcc.n	8002cf6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
 8002d9a:	e044      	b.n	8002e26 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	3301      	adds	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	791b      	ldrb	r3, [r3, #4]
 8002e2a:	7bfa      	ldrb	r2, [r7, #15]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d3b5      	bcc.n	8002d9c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7c1a      	ldrb	r2, [r3, #16]
 8002e38:	f88d 2000 	strb.w	r2, [sp]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e40:	f003 fb0e 	bl	8006460 <USB_DevInit>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00c      	b.n	8002e70 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f004 fb58 	bl	800751e <USB_DevDisconnect>

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_PCD_Start+0x1c>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e022      	b.n	8002eda <HAL_PCD_Start+0x62>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d105      	bne.n	8002ebc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f003 fa5f 	bl	8006384 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f004 fb06 	bl	80074dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ee2:	b590      	push	{r4, r7, lr}
 8002ee4:	b08d      	sub	sp, #52	@ 0x34
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f004 fbc4 	bl	8007686 <USB_GetMode>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 848c 	bne.w	800381e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f004 fb28 	bl	8007560 <USB_ReadInterrupts>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8482 	beq.w	800381c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 fb15 	bl	8007560 <USB_ReadInterrupts>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d107      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f002 0202 	and.w	r2, r2, #2
 8002f4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f004 fb03 	bl	8007560 <USB_ReadInterrupts>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d161      	bne.n	8003028 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0210 	bic.w	r2, r2, #16
 8002f72:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f003 020f 	and.w	r2, r3, #15
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	3304      	adds	r3, #4
 8002f92:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002f9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f9e:	d124      	bne.n	8002fea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d035      	beq.n	8003018 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6a38      	ldr	r0, [r7, #32]
 8002fc0:	f004 f93a 	bl	8007238 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fd0:	441a      	add	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fe2:	441a      	add	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	615a      	str	r2, [r3, #20]
 8002fe8:	e016      	b.n	8003018 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002ff0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ff4:	d110      	bne.n	8003018 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ffc:	2208      	movs	r2, #8
 8002ffe:	4619      	mov	r1, r3
 8003000:	6a38      	ldr	r0, [r7, #32]
 8003002:	f004 f919 	bl	8007238 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003012:	441a      	add	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0210 	orr.w	r2, r2, #16
 8003026:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f004 fa97 	bl	8007560 <USB_ReadInterrupts>
 8003032:	4603      	mov	r3, r0
 8003034:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003038:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800303c:	f040 80a7 	bne.w	800318e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f004 fa9c 	bl	8007586 <USB_ReadDevAllOutEpInterrupt>
 800304e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003050:	e099      	b.n	8003186 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 808e 	beq.w	800317a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f004 fac0 	bl	80075ee <USB_ReadDevOutEPInterrupt>
 800306e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00c      	beq.n	8003094 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003086:	461a      	mov	r2, r3
 8003088:	2301      	movs	r3, #1
 800308a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800308c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fea4 	bl	8003ddc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00c      	beq.n	80030b8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030aa:	461a      	mov	r2, r3
 80030ac:	2308      	movs	r3, #8
 80030ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 ff7a 	bl	8003fac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ce:	461a      	mov	r2, r3
 80030d0:	2310      	movs	r3, #16
 80030d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d030      	beq.n	8003140 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e6:	2b80      	cmp	r3, #128	@ 0x80
 80030e8:	d109      	bne.n	80030fe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030fc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80030fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	3304      	adds	r3, #4
 8003112:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	78db      	ldrb	r3, [r3, #3]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d108      	bne.n	800312e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2200      	movs	r2, #0
 8003120:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	b2db      	uxtb	r3, r3
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f006 fe6f 	bl	8009e0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	4413      	add	r3, r2
 8003136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800313a:	461a      	mov	r2, r3
 800313c:	2302      	movs	r3, #2
 800313e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003156:	461a      	mov	r2, r3
 8003158:	2320      	movs	r3, #32
 800315a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003172:	461a      	mov	r2, r3
 8003174:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003178:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	3301      	adds	r3, #1
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	f47f af62 	bne.w	8003052 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f004 f9e4 	bl	8007560 <USB_ReadInterrupts>
 8003198:	4603      	mov	r3, r0
 800319a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800319e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031a2:	f040 80db 	bne.w	800335c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f004 fa05 	bl	80075ba <USB_ReadDevAllInEpInterrupt>
 80031b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80031b6:	e0cd      	b.n	8003354 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80031b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80c2 	beq.w	8003348 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f004 fa2b 	bl	800762a <USB_ReadDevInEPInterrupt>
 80031d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d057      	beq.n	8003290 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	2201      	movs	r2, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69f9      	ldr	r1, [r7, #28]
 80031fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003200:	4013      	ands	r3, r2
 8003202:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003210:	461a      	mov	r2, r3
 8003212:	2301      	movs	r3, #1
 8003214:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	799b      	ldrb	r3, [r3, #6]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d132      	bne.n	8003284 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3320      	adds	r3, #32
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4403      	add	r3, r0
 800323e:	331c      	adds	r3, #28
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4419      	add	r1, r3
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4403      	add	r3, r0
 8003252:	3320      	adds	r3, #32
 8003254:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	2b00      	cmp	r3, #0
 800325a:	d113      	bne.n	8003284 <HAL_PCD_IRQHandler+0x3a2>
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	3324      	adds	r3, #36	@ 0x24
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d108      	bne.n	8003284 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800327c:	461a      	mov	r2, r3
 800327e:	2101      	movs	r1, #1
 8003280:	f004 fa32 	bl	80076e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	b2db      	uxtb	r3, r3
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f006 fd39 	bl	8009d02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032a6:	461a      	mov	r2, r3
 80032a8:	2308      	movs	r3, #8
 80032aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032c2:	461a      	mov	r2, r3
 80032c4:	2310      	movs	r3, #16
 80032c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032de:	461a      	mov	r2, r3
 80032e0:	2340      	movs	r3, #64	@ 0x40
 80032e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d023      	beq.n	8003336 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80032ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032f0:	6a38      	ldr	r0, [r7, #32]
 80032f2:	f003 fa19 	bl	8006728 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80032f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	3310      	adds	r3, #16
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	3304      	adds	r3, #4
 8003308:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	78db      	ldrb	r3, [r3, #3]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d108      	bne.n	8003324 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	b2db      	uxtb	r3, r3
 800331c:	4619      	mov	r1, r3
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f006 fd86 	bl	8009e30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003330:	461a      	mov	r2, r3
 8003332:	2302      	movs	r3, #2
 8003334:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003340:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fcbd 	bl	8003cc2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	3301      	adds	r3, #1
 800334c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800334e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003356:	2b00      	cmp	r3, #0
 8003358:	f47f af2e 	bne.w	80031b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f004 f8fd 	bl	8007560 <USB_ReadInterrupts>
 8003366:	4603      	mov	r3, r0
 8003368:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800336c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003370:	d122      	bne.n	80033b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800338c:	2b01      	cmp	r3, #1
 800338e:	d108      	bne.n	80033a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003398:	2100      	movs	r1, #0
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fea4 	bl	80040e8 <HAL_PCDEx_LPM_Callback>
 80033a0:	e002      	b.n	80033a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f006 fd24 	bl	8009df0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80033b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f004 f8cf 	bl	8007560 <USB_ReadInterrupts>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033cc:	d112      	bne.n	80033f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d102      	bne.n	80033e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f006 fce0 	bl	8009da4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80033f2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f004 f8b1 	bl	8007560 <USB_ReadInterrupts>
 80033fe:	4603      	mov	r3, r0
 8003400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003408:	f040 80b7 	bne.w	800357a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2110      	movs	r1, #16
 8003426:	4618      	mov	r0, r3
 8003428:	f003 f97e 	bl	8006728 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800342c:	2300      	movs	r3, #0
 800342e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003430:	e046      	b.n	80034c0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800343e:	461a      	mov	r2, r3
 8003440:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003444:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003456:	0151      	lsls	r1, r2, #5
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	440a      	add	r2, r1
 800345c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003460:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003464:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003472:	461a      	mov	r2, r3
 8003474:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003478:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800347a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800348a:	0151      	lsls	r1, r2, #5
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	440a      	add	r2, r1
 8003490:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003494:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003498:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800349a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034aa:	0151      	lsls	r1, r2, #5
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	440a      	add	r2, r1
 80034b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80034b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034bc:	3301      	adds	r3, #1
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	791b      	ldrb	r3, [r3, #4]
 80034c4:	461a      	mov	r2, r3
 80034c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d3b2      	bcc.n	8003432 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034da:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80034de:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7bdb      	ldrb	r3, [r3, #15]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d016      	beq.n	8003516 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034f8:	f043 030b 	orr.w	r3, r3, #11
 80034fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800350e:	f043 030b 	orr.w	r3, r3, #11
 8003512:	6453      	str	r3, [r2, #68]	@ 0x44
 8003514:	e015      	b.n	8003542 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003524:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003528:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800352c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800353c:	f043 030b 	orr.w	r3, r3, #11
 8003540:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003550:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003554:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003564:	461a      	mov	r2, r3
 8003566:	f004 f8bf 	bl	80076e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f003 ffee 	bl	8007560 <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800358a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800358e:	d123      	bne.n	80035d8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f004 f884 	bl	80076a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f003 f93b 	bl	800681a <USB_GetDevSpeed>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681c      	ldr	r4, [r3, #0]
 80035b0:	f001 fa0a 	bl	80049c8 <HAL_RCC_GetHCLKFreq>
 80035b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035ba:	461a      	mov	r2, r3
 80035bc:	4620      	mov	r0, r4
 80035be:	f002 fe3f 	bl	8006240 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f006 fbc5 	bl	8009d52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80035d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f003 ffbf 	bl	8007560 <USB_ReadInterrupts>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d10a      	bne.n	8003602 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f006 fba2 	bl	8009d36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f002 0208 	and.w	r2, r2, #8
 8003600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f003 ffaa 	bl	8007560 <USB_ReadInterrupts>
 800360c:	4603      	mov	r3, r0
 800360e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003612:	2b80      	cmp	r3, #128	@ 0x80
 8003614:	d123      	bne.n	800365e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003622:	2301      	movs	r3, #1
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24
 8003626:	e014      	b.n	8003652 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d105      	bne.n	800364c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	b2db      	uxtb	r3, r3
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fb0a 	bl	8003c60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	3301      	adds	r3, #1
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	791b      	ldrb	r3, [r3, #4]
 8003656:	461a      	mov	r2, r3
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	4293      	cmp	r3, r2
 800365c:	d3e4      	bcc.n	8003628 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f003 ff7c 	bl	8007560 <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800366e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003672:	d13c      	bne.n	80036ee <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003674:	2301      	movs	r3, #1
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24
 8003678:	e02b      	b.n	80036d2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	3318      	adds	r3, #24
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d115      	bne.n	80036cc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80036a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	da12      	bge.n	80036cc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	3317      	adds	r3, #23
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	4619      	mov	r1, r3
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 faca 	bl	8003c60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	3301      	adds	r3, #1
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	791b      	ldrb	r3, [r3, #4]
 80036d6:	461a      	mov	r2, r3
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	4293      	cmp	r3, r2
 80036dc:	d3cd      	bcc.n	800367a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80036ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f003 ff34 	bl	8007560 <USB_ReadInterrupts>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003702:	d156      	bne.n	80037b2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003704:	2301      	movs	r3, #1
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
 8003708:	e045      	b.n	8003796 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d12e      	bne.n	8003790 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003732:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003734:	2b00      	cmp	r3, #0
 8003736:	da2b      	bge.n	8003790 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	0c1a      	lsrs	r2, r3, #16
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003742:	4053      	eors	r3, r2
 8003744:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003748:	2b00      	cmp	r3, #0
 800374a:	d121      	bne.n	8003790 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10a      	bne.n	8003790 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003788:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800378c:	6053      	str	r3, [r2, #4]
            break;
 800378e:	e008      	b.n	80037a2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003792:	3301      	adds	r3, #1
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	791b      	ldrb	r3, [r3, #4]
 800379a:	461a      	mov	r2, r3
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	4293      	cmp	r3, r2
 80037a0:	d3b3      	bcc.n	800370a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695a      	ldr	r2, [r3, #20]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80037b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 fed2 	bl	8007560 <USB_ReadInterrupts>
 80037bc:	4603      	mov	r3, r0
 80037be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80037c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c6:	d10a      	bne.n	80037de <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f006 fb43 	bl	8009e54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80037dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 febc 	bl	8007560 <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d115      	bne.n	800381e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f006 fb33 	bl	8009e70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	e000      	b.n	800381e <HAL_PCD_IRQHandler+0x93c>
      return;
 800381c:	bf00      	nop
    }
  }
}
 800381e:	3734      	adds	r7, #52	@ 0x34
 8003820:	46bd      	mov	sp, r7
 8003822:	bd90      	pop	{r4, r7, pc}

08003824 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_PCD_SetAddress+0x1a>
 800383a:	2302      	movs	r3, #2
 800383c:	e012      	b.n	8003864 <HAL_PCD_SetAddress+0x40>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f003 fe1b 	bl	8007490 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	4608      	mov	r0, r1
 8003876:	4611      	mov	r1, r2
 8003878:	461a      	mov	r2, r3
 800387a:	4603      	mov	r3, r0
 800387c:	70fb      	strb	r3, [r7, #3]
 800387e:	460b      	mov	r3, r1
 8003880:	803b      	strh	r3, [r7, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800388a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800388e:	2b00      	cmp	r3, #0
 8003890:	da0f      	bge.n	80038b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	f003 020f 	and.w	r2, r3, #15
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	3310      	adds	r3, #16
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	3304      	adds	r3, #4
 80038a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	705a      	strb	r2, [r3, #1]
 80038b0:	e00f      	b.n	80038d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	f003 020f 	and.w	r2, r3, #15
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	3304      	adds	r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80038de:	883b      	ldrh	r3, [r7, #0]
 80038e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	78ba      	ldrb	r2, [r7, #2]
 80038ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	785b      	ldrb	r3, [r3, #1]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003900:	78bb      	ldrb	r3, [r7, #2]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d102      	bne.n	800390c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_PCD_EP_Open+0xae>
 8003916:	2302      	movs	r3, #2
 8003918:	e00e      	b.n	8003938 <HAL_PCD_EP_Open+0xcc>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68f9      	ldr	r1, [r7, #12]
 8003928:	4618      	mov	r0, r3
 800392a:	f002 ff9b 	bl	8006864 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003936:	7afb      	ldrb	r3, [r7, #11]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800394c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003950:	2b00      	cmp	r3, #0
 8003952:	da0f      	bge.n	8003974 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	f003 020f 	and.w	r2, r3, #15
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	3310      	adds	r3, #16
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	3304      	adds	r3, #4
 800396a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	705a      	strb	r2, [r3, #1]
 8003972:	e00f      	b.n	8003994 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	f003 020f 	and.w	r2, r3, #15
 800397a:	4613      	mov	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	3304      	adds	r3, #4
 800398c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	b2da      	uxtb	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_PCD_EP_Close+0x6e>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e00e      	b.n	80039cc <HAL_PCD_EP_Close+0x8c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	4618      	mov	r0, r3
 80039be:	f002 ffd9 	bl	8006974 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	460b      	mov	r3, r1
 80039e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039e4:	7afb      	ldrb	r3, [r7, #11]
 80039e6:	f003 020f 	and.w	r2, r3, #15
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	3304      	adds	r3, #4
 80039fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2200      	movs	r2, #0
 8003a14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a16:	7afb      	ldrb	r3, [r7, #11]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	799b      	ldrb	r3, [r3, #6]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d102      	bne.n	8003a30 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	799b      	ldrb	r3, [r3, #6]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6979      	ldr	r1, [r7, #20]
 8003a3c:	f003 f876 	bl	8006b2c <USB_EPStartXfer>

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 020f 	and.w	r2, r3, #15
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003a6c:	681b      	ldr	r3, [r3, #0]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b086      	sub	sp, #24
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	460b      	mov	r3, r1
 8003a88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a8a:	7afb      	ldrb	r3, [r7, #11]
 8003a8c:	f003 020f 	and.w	r2, r3, #15
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	3310      	adds	r3, #16
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aba:	7afb      	ldrb	r3, [r7, #11]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	799b      	ldrb	r3, [r3, #6]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d102      	bne.n	8003ad4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	799b      	ldrb	r3, [r3, #6]
 8003adc:	461a      	mov	r2, r3
 8003ade:	6979      	ldr	r1, [r7, #20]
 8003ae0:	f003 f824 	bl	8006b2c <USB_EPStartXfer>

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	7912      	ldrb	r2, [r2, #4]
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e04f      	b.n	8003bac <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	da0f      	bge.n	8003b34 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 020f 	and.w	r2, r3, #15
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	3310      	adds	r3, #16
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	4413      	add	r3, r2
 8003b28:	3304      	adds	r3, #4
 8003b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	705a      	strb	r2, [r3, #1]
 8003b32:	e00d      	b.n	8003b50 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	3304      	adds	r3, #4
 8003b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_PCD_EP_SetStall+0x82>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e01d      	b.n	8003bac <HAL_PCD_EP_SetStall+0xbe>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68f9      	ldr	r1, [r7, #12]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f003 fbb2 	bl	80072e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7999      	ldrb	r1, [r3, #6]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f003 fda3 	bl	80076e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	7912      	ldrb	r2, [r2, #4]
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e042      	b.n	8003c58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	da0f      	bge.n	8003bfa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 020f 	and.w	r2, r3, #15
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	3310      	adds	r3, #16
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	3304      	adds	r3, #4
 8003bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	705a      	strb	r2, [r3, #1]
 8003bf8:	e00f      	b.n	8003c1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 020f 	and.w	r2, r3, #15
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	4413      	add	r3, r2
 8003c10:	3304      	adds	r3, #4
 8003c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_PCD_EP_ClrStall+0x86>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e00e      	b.n	8003c58 <HAL_PCD_EP_ClrStall+0xa4>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f003 fbbb 	bl	80073c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	da0c      	bge.n	8003c8e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	f003 020f 	and.w	r2, r3, #15
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	3310      	adds	r3, #16
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	4413      	add	r3, r2
 8003c88:	3304      	adds	r3, #4
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e00c      	b.n	8003ca8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	f003 020f 	and.w	r2, r3, #15
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68f9      	ldr	r1, [r7, #12]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f003 f9da 	bl	8007068 <USB_EPStopXfer>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003cb8:	7afb      	ldrb	r3, [r7, #11]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b08a      	sub	sp, #40	@ 0x28
 8003cc6:	af02      	add	r7, sp, #8
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	3310      	adds	r3, #16
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d901      	bls.n	8003cfa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06b      	b.n	8003dd2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d902      	bls.n	8003d16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3303      	adds	r3, #3
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d1e:	e02a      	b.n	8003d76 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d902      	bls.n	8003d3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	3303      	adds	r3, #3
 8003d40:	089b      	lsrs	r3, r3, #2
 8003d42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68d9      	ldr	r1, [r3, #12]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	4603      	mov	r3, r0
 8003d58:	6978      	ldr	r0, [r7, #20]
 8003d5a:	f003 fa2f 	bl	80071bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	441a      	add	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	441a      	add	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d809      	bhi.n	8003da0 <PCD_WriteEmptyTxFifo+0xde>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d203      	bcs.n	8003da0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1bf      	bne.n	8003d20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d811      	bhi.n	8003dd0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	2201      	movs	r2, #1
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	6939      	ldr	r1, [r7, #16]
 8003dc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dcc:	4013      	ands	r3, r2
 8003dce:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	333c      	adds	r3, #60	@ 0x3c
 8003df4:	3304      	adds	r3, #4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	799b      	ldrb	r3, [r3, #6]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d17b      	bne.n	8003f0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d015      	beq.n	8003e48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	4a61      	ldr	r2, [pc, #388]	@ (8003fa4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	f240 80b9 	bls.w	8003f98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80b3 	beq.w	8003f98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e44:	6093      	str	r3, [r2, #8]
 8003e46:	e0a7      	b.n	8003f98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d009      	beq.n	8003e66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2320      	movs	r3, #32
 8003e62:	6093      	str	r3, [r2, #8]
 8003e64:	e098      	b.n	8003f98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f040 8093 	bne.w	8003f98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	4a4b      	ldr	r2, [pc, #300]	@ (8003fa4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d90f      	bls.n	8003e9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e90:	461a      	mov	r2, r3
 8003e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e96:	6093      	str	r3, [r2, #8]
 8003e98:	e07e      	b.n	8003f98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4413      	add	r3, r2
 8003eac:	3304      	adds	r3, #4
 8003eae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a1a      	ldr	r2, [r3, #32]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	0159      	lsls	r1, r3, #5
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	440b      	add	r3, r1
 8003ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec6:	1ad2      	subs	r2, r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d114      	bne.n	8003efc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	f003 fbfe 	bl	80076e8 <USB_EP0_OutStart>
 8003eec:	e006      	b.n	8003efc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	441a      	add	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f005 fee2 	bl	8009ccc <HAL_PCD_DataOutStageCallback>
 8003f08:	e046      	b.n	8003f98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	4a26      	ldr	r2, [pc, #152]	@ (8003fa8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d124      	bne.n	8003f5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f2e:	6093      	str	r3, [r2, #8]
 8003f30:	e032      	b.n	8003f98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2320      	movs	r3, #32
 8003f4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f005 feb9 	bl	8009ccc <HAL_PCD_DataOutStageCallback>
 8003f5a:	e01d      	b.n	8003f98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d114      	bne.n	8003f8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d108      	bne.n	8003f8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f84:	461a      	mov	r2, r3
 8003f86:	2100      	movs	r1, #0
 8003f88:	f003 fbae 	bl	80076e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	4619      	mov	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f005 fe9a 	bl	8009ccc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3720      	adds	r7, #32
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	4f54300a 	.word	0x4f54300a
 8003fa8:	4f54310a 	.word	0x4f54310a

08003fac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	333c      	adds	r3, #60	@ 0x3c
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a15      	ldr	r2, [pc, #84]	@ (8004034 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d90e      	bls.n	8004000 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ffe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f005 fe51 	bl	8009ca8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4a0a      	ldr	r2, [pc, #40]	@ (8004034 <PCD_EP_OutSetupPacket_int+0x88>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d90c      	bls.n	8004028 <PCD_EP_OutSetupPacket_int+0x7c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	799b      	ldrb	r3, [r3, #6]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d108      	bne.n	8004028 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004020:	461a      	mov	r2, r3
 8004022:	2101      	movs	r1, #1
 8004024:	f003 fb60 	bl	80076e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	4f54300a 	.word	0x4f54300a

08004038 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	70fb      	strb	r3, [r7, #3]
 8004044:	4613      	mov	r3, r2
 8004046:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d107      	bne.n	8004066 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004056:	883b      	ldrh	r3, [r7, #0]
 8004058:	0419      	lsls	r1, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	430a      	orrs	r2, r1
 8004062:	629a      	str	r2, [r3, #40]	@ 0x28
 8004064:	e028      	b.n	80040b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406c:	0c1b      	lsrs	r3, r3, #16
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	4413      	add	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004074:	2300      	movs	r3, #0
 8004076:	73fb      	strb	r3, [r7, #15]
 8004078:	e00d      	b.n	8004096 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	3340      	adds	r3, #64	@ 0x40
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	4413      	add	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	3301      	adds	r3, #1
 8004094:	73fb      	strb	r3, [r7, #15]
 8004096:	7bfa      	ldrb	r2, [r7, #15]
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	3b01      	subs	r3, #1
 800409c:	429a      	cmp	r2, r3
 800409e:	d3ec      	bcc.n	800407a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040a0:	883b      	ldrh	r3, [r7, #0]
 80040a2:	0418      	lsls	r0, r3, #16
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6819      	ldr	r1, [r3, #0]
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	4302      	orrs	r2, r0
 80040b0:	3340      	adds	r3, #64	@ 0x40
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	460b      	mov	r3, r1
 80040d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	887a      	ldrh	r2, [r7, #2]
 80040d8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e267      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d075      	beq.n	800420a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800411e:	4b88      	ldr	r3, [pc, #544]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
 8004126:	2b04      	cmp	r3, #4
 8004128:	d00c      	beq.n	8004144 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412a:	4b85      	ldr	r3, [pc, #532]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004132:	2b08      	cmp	r3, #8
 8004134:	d112      	bne.n	800415c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004136:	4b82      	ldr	r3, [pc, #520]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800413e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004142:	d10b      	bne.n	800415c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004144:	4b7e      	ldr	r3, [pc, #504]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d05b      	beq.n	8004208 <HAL_RCC_OscConfig+0x108>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d157      	bne.n	8004208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e242      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004164:	d106      	bne.n	8004174 <HAL_RCC_OscConfig+0x74>
 8004166:	4b76      	ldr	r3, [pc, #472]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a75      	ldr	r2, [pc, #468]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e01d      	b.n	80041b0 <HAL_RCC_OscConfig+0xb0>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0x98>
 800417e:	4b70      	ldr	r3, [pc, #448]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6f      	ldr	r2, [pc, #444]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b6d      	ldr	r3, [pc, #436]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a6c      	ldr	r2, [pc, #432]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e00b      	b.n	80041b0 <HAL_RCC_OscConfig+0xb0>
 8004198:	4b69      	ldr	r3, [pc, #420]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a68      	ldr	r2, [pc, #416]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800419e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b66      	ldr	r3, [pc, #408]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a65      	ldr	r2, [pc, #404]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 80041aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d013      	beq.n	80041e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fd fe46 	bl	8001e48 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c0:	f7fd fe42 	bl	8001e48 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	@ 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e207      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0xc0>
 80041de:	e014      	b.n	800420a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e0:	f7fd fe32 	bl	8001e48 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e8:	f7fd fe2e 	bl	8001e48 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	@ 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e1f3      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fa:	4b51      	ldr	r3, [pc, #324]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0xe8>
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d063      	beq.n	80042de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004216:	4b4a      	ldr	r3, [pc, #296]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004222:	4b47      	ldr	r3, [pc, #284]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800422a:	2b08      	cmp	r3, #8
 800422c:	d11c      	bne.n	8004268 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800422e:	4b44      	ldr	r3, [pc, #272]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d116      	bne.n	8004268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423a:	4b41      	ldr	r3, [pc, #260]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_RCC_OscConfig+0x152>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d001      	beq.n	8004252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e1c7      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004252:	4b3b      	ldr	r3, [pc, #236]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4937      	ldr	r1, [pc, #220]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004266:	e03a      	b.n	80042de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004270:	4b34      	ldr	r3, [pc, #208]	@ (8004344 <HAL_RCC_OscConfig+0x244>)
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004276:	f7fd fde7 	bl	8001e48 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800427e:	f7fd fde3 	bl	8001e48 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e1a8      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004290:	4b2b      	ldr	r3, [pc, #172]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429c:	4b28      	ldr	r3, [pc, #160]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4925      	ldr	r1, [pc, #148]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	600b      	str	r3, [r1, #0]
 80042b0:	e015      	b.n	80042de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042b2:	4b24      	ldr	r3, [pc, #144]	@ (8004344 <HAL_RCC_OscConfig+0x244>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fd fdc6 	bl	8001e48 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c0:	f7fd fdc2 	bl	8001e48 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e187      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d036      	beq.n	8004358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d016      	beq.n	8004320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042f2:	4b15      	ldr	r3, [pc, #84]	@ (8004348 <HAL_RCC_OscConfig+0x248>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fd fda6 	bl	8001e48 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004300:	f7fd fda2 	bl	8001e48 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e167      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004312:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0x200>
 800431e:	e01b      	b.n	8004358 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004320:	4b09      	ldr	r3, [pc, #36]	@ (8004348 <HAL_RCC_OscConfig+0x248>)
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004326:	f7fd fd8f 	bl	8001e48 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800432c:	e00e      	b.n	800434c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800432e:	f7fd fd8b 	bl	8001e48 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d907      	bls.n	800434c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e150      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
 8004340:	40023800 	.word	0x40023800
 8004344:	42470000 	.word	0x42470000
 8004348:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434c:	4b88      	ldr	r3, [pc, #544]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800434e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ea      	bne.n	800432e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8097 	beq.w	8004494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004366:	2300      	movs	r3, #0
 8004368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800436a:	4b81      	ldr	r3, [pc, #516]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10f      	bne.n	8004396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	4b7d      	ldr	r3, [pc, #500]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	4a7c      	ldr	r2, [pc, #496]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004384:	6413      	str	r3, [r2, #64]	@ 0x40
 8004386:	4b7a      	ldr	r3, [pc, #488]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004396:	4b77      	ldr	r3, [pc, #476]	@ (8004574 <HAL_RCC_OscConfig+0x474>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d118      	bne.n	80043d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043a2:	4b74      	ldr	r3, [pc, #464]	@ (8004574 <HAL_RCC_OscConfig+0x474>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a73      	ldr	r2, [pc, #460]	@ (8004574 <HAL_RCC_OscConfig+0x474>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ae:	f7fd fd4b 	bl	8001e48 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b6:	f7fd fd47 	bl	8001e48 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e10c      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004574 <HAL_RCC_OscConfig+0x474>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d106      	bne.n	80043ea <HAL_RCC_OscConfig+0x2ea>
 80043dc:	4b64      	ldr	r3, [pc, #400]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e0:	4a63      	ldr	r2, [pc, #396]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e8:	e01c      	b.n	8004424 <HAL_RCC_OscConfig+0x324>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0x30c>
 80043f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f6:	4a5e      	ldr	r2, [pc, #376]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 80043f8:	f043 0304 	orr.w	r3, r3, #4
 80043fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80043fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004402:	4a5b      	ldr	r2, [pc, #364]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6713      	str	r3, [r2, #112]	@ 0x70
 800440a:	e00b      	b.n	8004424 <HAL_RCC_OscConfig+0x324>
 800440c:	4b58      	ldr	r3, [pc, #352]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004410:	4a57      	ldr	r2, [pc, #348]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	6713      	str	r3, [r2, #112]	@ 0x70
 8004418:	4b55      	ldr	r3, [pc, #340]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441c:	4a54      	ldr	r2, [pc, #336]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800441e:	f023 0304 	bic.w	r3, r3, #4
 8004422:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d015      	beq.n	8004458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442c:	f7fd fd0c 	bl	8001e48 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004432:	e00a      	b.n	800444a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004434:	f7fd fd08 	bl	8001e48 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e0cb      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444a:	4b49      	ldr	r3, [pc, #292]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0ee      	beq.n	8004434 <HAL_RCC_OscConfig+0x334>
 8004456:	e014      	b.n	8004482 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004458:	f7fd fcf6 	bl	8001e48 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800445e:	e00a      	b.n	8004476 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004460:	f7fd fcf2 	bl	8001e48 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e0b5      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004476:	4b3e      	ldr	r3, [pc, #248]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1ee      	bne.n	8004460 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004482:	7dfb      	ldrb	r3, [r7, #23]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004488:	4b39      	ldr	r3, [pc, #228]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	4a38      	ldr	r2, [pc, #224]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800448e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004492:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80a1 	beq.w	80045e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800449e:	4b34      	ldr	r3, [pc, #208]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d05c      	beq.n	8004564 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d141      	bne.n	8004536 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b2:	4b31      	ldr	r3, [pc, #196]	@ (8004578 <HAL_RCC_OscConfig+0x478>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fd fcc6 	bl	8001e48 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fd fcc2 	bl	8001e48 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e087      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d2:	4b27      	ldr	r3, [pc, #156]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69da      	ldr	r2, [r3, #28]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	019b      	lsls	r3, r3, #6
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	085b      	lsrs	r3, r3, #1
 80044f6:	3b01      	subs	r3, #1
 80044f8:	041b      	lsls	r3, r3, #16
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	061b      	lsls	r3, r3, #24
 8004502:	491b      	ldr	r1, [pc, #108]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004508:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <HAL_RCC_OscConfig+0x478>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450e:	f7fd fc9b 	bl	8001e48 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004516:	f7fd fc97 	bl	8001e48 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e05c      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004528:	4b11      	ldr	r3, [pc, #68]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x416>
 8004534:	e054      	b.n	80045e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b10      	ldr	r3, [pc, #64]	@ (8004578 <HAL_RCC_OscConfig+0x478>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fd fc84 	bl	8001e48 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004544:	f7fd fc80 	bl	8001e48 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e045      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004556:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x444>
 8004562:	e03d      	b.n	80045e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d107      	bne.n	800457c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e038      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
 8004570:	40023800 	.word	0x40023800
 8004574:	40007000 	.word	0x40007000
 8004578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800457c:	4b1b      	ldr	r3, [pc, #108]	@ (80045ec <HAL_RCC_OscConfig+0x4ec>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d028      	beq.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d121      	bne.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d11a      	bne.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045ac:	4013      	ands	r3, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d111      	bne.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	3b01      	subs	r3, #1
 80045c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d107      	bne.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800

080045f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0cc      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004604:	4b68      	ldr	r3, [pc, #416]	@ (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d90c      	bls.n	800462c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b65      	ldr	r3, [pc, #404]	@ (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b63      	ldr	r3, [pc, #396]	@ (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0b8      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d020      	beq.n	800467a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004644:	4b59      	ldr	r3, [pc, #356]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	4a58      	ldr	r2, [pc, #352]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800464e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800465c:	4b53      	ldr	r3, [pc, #332]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a52      	ldr	r2, [pc, #328]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004668:	4b50      	ldr	r3, [pc, #320]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	494d      	ldr	r1, [pc, #308]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	4313      	orrs	r3, r2
 8004678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d044      	beq.n	8004710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d107      	bne.n	800469e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	4b47      	ldr	r3, [pc, #284]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d119      	bne.n	80046ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e07f      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d003      	beq.n	80046ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d107      	bne.n	80046be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ae:	4b3f      	ldr	r3, [pc, #252]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e06f      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046be:	4b3b      	ldr	r3, [pc, #236]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e067      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ce:	4b37      	ldr	r3, [pc, #220]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f023 0203 	bic.w	r2, r3, #3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4934      	ldr	r1, [pc, #208]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046e0:	f7fd fbb2 	bl	8001e48 <HAL_GetTick>
 80046e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e6:	e00a      	b.n	80046fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e8:	f7fd fbae 	bl	8001e48 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e04f      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fe:	4b2b      	ldr	r3, [pc, #172]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 020c 	and.w	r2, r3, #12
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	429a      	cmp	r2, r3
 800470e:	d1eb      	bne.n	80046e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004710:	4b25      	ldr	r3, [pc, #148]	@ (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d20c      	bcs.n	8004738 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	4b22      	ldr	r3, [pc, #136]	@ (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b20      	ldr	r3, [pc, #128]	@ (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e032      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004744:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4916      	ldr	r1, [pc, #88]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004762:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	490e      	ldr	r1, [pc, #56]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004776:	f000 f821 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 800477a:	4602      	mov	r2, r0
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	490a      	ldr	r1, [pc, #40]	@ (80047b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004788:	5ccb      	ldrb	r3, [r1, r3]
 800478a:	fa22 f303 	lsr.w	r3, r2, r3
 800478e:	4a09      	ldr	r2, [pc, #36]	@ (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004792:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fd fb12 	bl	8001dc0 <HAL_InitTick>

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023c00 	.word	0x40023c00
 80047ac:	40023800 	.word	0x40023800
 80047b0:	0800ead8 	.word	0x0800ead8
 80047b4:	20000000 	.word	0x20000000
 80047b8:	20000004 	.word	0x20000004

080047bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c0:	b094      	sub	sp, #80	@ 0x50
 80047c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047d4:	4b79      	ldr	r3, [pc, #484]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 030c 	and.w	r3, r3, #12
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d00d      	beq.n	80047fc <HAL_RCC_GetSysClockFreq+0x40>
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	f200 80e1 	bhi.w	80049a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x34>
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d003      	beq.n	80047f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ee:	e0db      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047f0:	4b73      	ldr	r3, [pc, #460]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80047f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047f4:	e0db      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047f6:	4b73      	ldr	r3, [pc, #460]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80047f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047fa:	e0d8      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047fc:	4b6f      	ldr	r3, [pc, #444]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004804:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004806:	4b6d      	ldr	r3, [pc, #436]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d063      	beq.n	80048da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004812:	4b6a      	ldr	r3, [pc, #424]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	099b      	lsrs	r3, r3, #6
 8004818:	2200      	movs	r2, #0
 800481a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800481c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004824:	633b      	str	r3, [r7, #48]	@ 0x30
 8004826:	2300      	movs	r3, #0
 8004828:	637b      	str	r3, [r7, #52]	@ 0x34
 800482a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800482e:	4622      	mov	r2, r4
 8004830:	462b      	mov	r3, r5
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	0159      	lsls	r1, r3, #5
 800483c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004840:	0150      	lsls	r0, r2, #5
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4621      	mov	r1, r4
 8004848:	1a51      	subs	r1, r2, r1
 800484a:	6139      	str	r1, [r7, #16]
 800484c:	4629      	mov	r1, r5
 800484e:	eb63 0301 	sbc.w	r3, r3, r1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004860:	4659      	mov	r1, fp
 8004862:	018b      	lsls	r3, r1, #6
 8004864:	4651      	mov	r1, sl
 8004866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800486a:	4651      	mov	r1, sl
 800486c:	018a      	lsls	r2, r1, #6
 800486e:	4651      	mov	r1, sl
 8004870:	ebb2 0801 	subs.w	r8, r2, r1
 8004874:	4659      	mov	r1, fp
 8004876:	eb63 0901 	sbc.w	r9, r3, r1
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800488a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800488e:	4690      	mov	r8, r2
 8004890:	4699      	mov	r9, r3
 8004892:	4623      	mov	r3, r4
 8004894:	eb18 0303 	adds.w	r3, r8, r3
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	462b      	mov	r3, r5
 800489c:	eb49 0303 	adc.w	r3, r9, r3
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048ae:	4629      	mov	r1, r5
 80048b0:	024b      	lsls	r3, r1, #9
 80048b2:	4621      	mov	r1, r4
 80048b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048b8:	4621      	mov	r1, r4
 80048ba:	024a      	lsls	r2, r1, #9
 80048bc:	4610      	mov	r0, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048c2:	2200      	movs	r2, #0
 80048c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048cc:	f7fc f9dc 	bl	8000c88 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4613      	mov	r3, r2
 80048d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d8:	e058      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048da:	4b38      	ldr	r3, [pc, #224]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	099b      	lsrs	r3, r3, #6
 80048e0:	2200      	movs	r2, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	4611      	mov	r1, r2
 80048e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048ea:	623b      	str	r3, [r7, #32]
 80048ec:	2300      	movs	r3, #0
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	f04f 0000 	mov.w	r0, #0
 80048fc:	f04f 0100 	mov.w	r1, #0
 8004900:	0159      	lsls	r1, r3, #5
 8004902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004906:	0150      	lsls	r0, r2, #5
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4641      	mov	r1, r8
 800490e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004912:	4649      	mov	r1, r9
 8004914:	eb63 0b01 	sbc.w	fp, r3, r1
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004924:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004928:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800492c:	ebb2 040a 	subs.w	r4, r2, sl
 8004930:	eb63 050b 	sbc.w	r5, r3, fp
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	00eb      	lsls	r3, r5, #3
 800493e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004942:	00e2      	lsls	r2, r4, #3
 8004944:	4614      	mov	r4, r2
 8004946:	461d      	mov	r5, r3
 8004948:	4643      	mov	r3, r8
 800494a:	18e3      	adds	r3, r4, r3
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	464b      	mov	r3, r9
 8004950:	eb45 0303 	adc.w	r3, r5, r3
 8004954:	607b      	str	r3, [r7, #4]
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004962:	4629      	mov	r1, r5
 8004964:	028b      	lsls	r3, r1, #10
 8004966:	4621      	mov	r1, r4
 8004968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800496c:	4621      	mov	r1, r4
 800496e:	028a      	lsls	r2, r1, #10
 8004970:	4610      	mov	r0, r2
 8004972:	4619      	mov	r1, r3
 8004974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004976:	2200      	movs	r2, #0
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	61fa      	str	r2, [r7, #28]
 800497c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004980:	f7fc f982 	bl	8000c88 <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4613      	mov	r3, r2
 800498a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800498c:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x200>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	0c1b      	lsrs	r3, r3, #16
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	3301      	adds	r3, #1
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800499c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800499e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049a6:	e002      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049a8:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80049aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3750      	adds	r7, #80	@ 0x50
 80049b4:	46bd      	mov	sp, r7
 80049b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800
 80049c0:	00f42400 	.word	0x00f42400
 80049c4:	007a1200 	.word	0x007a1200

080049c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049cc:	4b03      	ldr	r3, [pc, #12]	@ (80049dc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ce:	681b      	ldr	r3, [r3, #0]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20000000 	.word	0x20000000

080049e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049e4:	f7ff fff0 	bl	80049c8 <HAL_RCC_GetHCLKFreq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4b05      	ldr	r3, [pc, #20]	@ (8004a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	0a9b      	lsrs	r3, r3, #10
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	4903      	ldr	r1, [pc, #12]	@ (8004a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f6:	5ccb      	ldrb	r3, [r1, r3]
 80049f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40023800 	.word	0x40023800
 8004a04:	0800eae8 	.word	0x0800eae8

08004a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a0c:	f7ff ffdc 	bl	80049c8 <HAL_RCC_GetHCLKFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	0b5b      	lsrs	r3, r3, #13
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	4903      	ldr	r1, [pc, #12]	@ (8004a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	0800eae8 	.word	0x0800eae8

08004a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e041      	b.n	8004ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fc ffc8 	bl	80019ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f000 fa80 	bl	8004f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d001      	beq.n	8004ae8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e046      	b.n	8004b76 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a23      	ldr	r2, [pc, #140]	@ (8004b84 <HAL_TIM_Base_Start+0xb4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d022      	beq.n	8004b40 <HAL_TIM_Base_Start+0x70>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b02:	d01d      	beq.n	8004b40 <HAL_TIM_Base_Start+0x70>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1f      	ldr	r2, [pc, #124]	@ (8004b88 <HAL_TIM_Base_Start+0xb8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d018      	beq.n	8004b40 <HAL_TIM_Base_Start+0x70>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1e      	ldr	r2, [pc, #120]	@ (8004b8c <HAL_TIM_Base_Start+0xbc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d013      	beq.n	8004b40 <HAL_TIM_Base_Start+0x70>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004b90 <HAL_TIM_Base_Start+0xc0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00e      	beq.n	8004b40 <HAL_TIM_Base_Start+0x70>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1b      	ldr	r2, [pc, #108]	@ (8004b94 <HAL_TIM_Base_Start+0xc4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d009      	beq.n	8004b40 <HAL_TIM_Base_Start+0x70>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a19      	ldr	r2, [pc, #100]	@ (8004b98 <HAL_TIM_Base_Start+0xc8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d004      	beq.n	8004b40 <HAL_TIM_Base_Start+0x70>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a18      	ldr	r2, [pc, #96]	@ (8004b9c <HAL_TIM_Base_Start+0xcc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d111      	bne.n	8004b64 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d010      	beq.n	8004b74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0201 	orr.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b62:	e007      	b.n	8004b74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40010000 	.word	0x40010000
 8004b88:	40000400 	.word	0x40000400
 8004b8c:	40000800 	.word	0x40000800
 8004b90:	40000c00 	.word	0x40000c00
 8004b94:	40010400 	.word	0x40010400
 8004b98:	40014000 	.word	0x40014000
 8004b9c:	40001800 	.word	0x40001800

08004ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d020      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01b      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0202 	mvn.w	r2, #2
 8004bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f9a3 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f995 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f9a6 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d020      	beq.n	8004c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0204 	mvn.w	r2, #4
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2202      	movs	r2, #2
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f97d 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f96f 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f980 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d020      	beq.n	8004c9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01b      	beq.n	8004c9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0208 	mvn.w	r2, #8
 8004c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2204      	movs	r2, #4
 8004c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f957 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004c88:	e005      	b.n	8004c96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f949 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f95a 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d020      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01b      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0210 	mvn.w	r2, #16
 8004cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f931 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f923 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f934 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0201 	mvn.w	r2, #1
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f901 	bl	8004f0e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00c      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fae8 	bl	8005300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00c      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d007      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f905 	bl	8004f5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00c      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0220 	mvn.w	r2, #32
 8004d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 faba 	bl	80052ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_ConfigClockSource+0x1c>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e0b4      	b.n	8004f06 <HAL_TIM_ConfigClockSource+0x186>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dd4:	d03e      	beq.n	8004e54 <HAL_TIM_ConfigClockSource+0xd4>
 8004dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dda:	f200 8087 	bhi.w	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de2:	f000 8086 	beq.w	8004ef2 <HAL_TIM_ConfigClockSource+0x172>
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dea:	d87f      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b70      	cmp	r3, #112	@ 0x70
 8004dee:	d01a      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0xa6>
 8004df0:	2b70      	cmp	r3, #112	@ 0x70
 8004df2:	d87b      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b60      	cmp	r3, #96	@ 0x60
 8004df6:	d050      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x11a>
 8004df8:	2b60      	cmp	r3, #96	@ 0x60
 8004dfa:	d877      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b50      	cmp	r3, #80	@ 0x50
 8004dfe:	d03c      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0xfa>
 8004e00:	2b50      	cmp	r3, #80	@ 0x50
 8004e02:	d873      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b40      	cmp	r3, #64	@ 0x40
 8004e06:	d058      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x13a>
 8004e08:	2b40      	cmp	r3, #64	@ 0x40
 8004e0a:	d86f      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b30      	cmp	r3, #48	@ 0x30
 8004e0e:	d064      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e10:	2b30      	cmp	r3, #48	@ 0x30
 8004e12:	d86b      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d060      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d867      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d05c      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d05a      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x15a>
 8004e24:	e062      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e36:	f000 f9bd 	bl	80051b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	609a      	str	r2, [r3, #8]
      break;
 8004e52:	e04f      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e64:	f000 f9a6 	bl	80051b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e76:	609a      	str	r2, [r3, #8]
      break;
 8004e78:	e03c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e86:	461a      	mov	r2, r3
 8004e88:	f000 f91a 	bl	80050c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2150      	movs	r1, #80	@ 0x50
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f973 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004e98:	e02c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f000 f939 	bl	800511e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2160      	movs	r1, #96	@ 0x60
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 f963 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004eb8:	e01c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f000 f8fa 	bl	80050c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2140      	movs	r1, #64	@ 0x40
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 f953 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004ed8:	e00c      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f000 f94a 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004eea:	e003      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef0:	e000      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a43      	ldr	r2, [pc, #268]	@ (8005094 <TIM_Base_SetConfig+0x120>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f92:	d00f      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a40      	ldr	r2, [pc, #256]	@ (8005098 <TIM_Base_SetConfig+0x124>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a3f      	ldr	r2, [pc, #252]	@ (800509c <TIM_Base_SetConfig+0x128>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d007      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3e      	ldr	r2, [pc, #248]	@ (80050a0 <TIM_Base_SetConfig+0x12c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a3d      	ldr	r2, [pc, #244]	@ (80050a4 <TIM_Base_SetConfig+0x130>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d108      	bne.n	8004fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a32      	ldr	r2, [pc, #200]	@ (8005094 <TIM_Base_SetConfig+0x120>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d02b      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd4:	d027      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2f      	ldr	r2, [pc, #188]	@ (8005098 <TIM_Base_SetConfig+0x124>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d023      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2e      	ldr	r2, [pc, #184]	@ (800509c <TIM_Base_SetConfig+0x128>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01f      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80050a0 <TIM_Base_SetConfig+0x12c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01b      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80050a4 <TIM_Base_SetConfig+0x130>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d017      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80050a8 <TIM_Base_SetConfig+0x134>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2a      	ldr	r2, [pc, #168]	@ (80050ac <TIM_Base_SetConfig+0x138>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00f      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a29      	ldr	r2, [pc, #164]	@ (80050b0 <TIM_Base_SetConfig+0x13c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a28      	ldr	r2, [pc, #160]	@ (80050b4 <TIM_Base_SetConfig+0x140>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a27      	ldr	r2, [pc, #156]	@ (80050b8 <TIM_Base_SetConfig+0x144>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a26      	ldr	r2, [pc, #152]	@ (80050bc <TIM_Base_SetConfig+0x148>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d108      	bne.n	8005038 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800502c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a0e      	ldr	r2, [pc, #56]	@ (8005094 <TIM_Base_SetConfig+0x120>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_Base_SetConfig+0xf2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a10      	ldr	r2, [pc, #64]	@ (80050a4 <TIM_Base_SetConfig+0x130>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d103      	bne.n	800506e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f043 0204 	orr.w	r2, r3, #4
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	601a      	str	r2, [r3, #0]
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40010400 	.word	0x40010400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800
 80050b4:	40001800 	.word	0x40001800
 80050b8:	40001c00 	.word	0x40001c00
 80050bc:	40002000 	.word	0x40002000

080050c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f023 0201 	bic.w	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f023 030a 	bic.w	r3, r3, #10
 80050fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800511e:	b480      	push	{r7}
 8005120:	b087      	sub	sp, #28
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f023 0210 	bic.w	r2, r3, #16
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005148:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	031b      	lsls	r3, r3, #12
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800515a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	f043 0307 	orr.w	r3, r3, #7
 80051a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	021a      	lsls	r2, r3, #8
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4313      	orrs	r3, r2
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005208:	2302      	movs	r3, #2
 800520a:	e05a      	b.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a21      	ldr	r2, [pc, #132]	@ (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d022      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005258:	d01d      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a1d      	ldr	r2, [pc, #116]	@ (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d018      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1b      	ldr	r2, [pc, #108]	@ (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d013      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1a      	ldr	r2, [pc, #104]	@ (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00e      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a18      	ldr	r2, [pc, #96]	@ (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d009      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a17      	ldr	r2, [pc, #92]	@ (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d004      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a15      	ldr	r2, [pc, #84]	@ (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d10c      	bne.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800529c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40010400 	.word	0x40010400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40001800 	.word	0x40001800

080052ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e042      	b.n	80053ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fc fb7e 	bl	8001a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	@ 0x24
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fc99 	bl	8005c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800536c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800537c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800538c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b0ba      	sub	sp, #232	@ 0xe8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053da:	2300      	movs	r3, #0
 80053dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10f      	bne.n	800541a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <HAL_UART_IRQHandler+0x66>
 8005406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fb7e 	bl	8005b14 <UART_Receive_IT>
      return;
 8005418:	e273      	b.n	8005902 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800541a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80de 	beq.w	80055e0 <HAL_UART_IRQHandler+0x22c>
 8005424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d106      	bne.n	800543e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005434:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80d1 	beq.w	80055e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800543e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00b      	beq.n	8005462 <HAL_UART_IRQHandler+0xae>
 800544a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545a:	f043 0201 	orr.w	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00b      	beq.n	8005486 <HAL_UART_IRQHandler+0xd2>
 800546e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	f043 0202 	orr.w	r2, r3, #2
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <HAL_UART_IRQHandler+0xf6>
 8005492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a2:	f043 0204 	orr.w	r2, r3, #4
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d011      	beq.n	80054da <HAL_UART_IRQHandler+0x126>
 80054b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d105      	bne.n	80054ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d2:	f043 0208 	orr.w	r2, r3, #8
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 820a 	beq.w	80058f8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d008      	beq.n	8005502 <HAL_UART_IRQHandler+0x14e>
 80054f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fb09 	bl	8005b14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550c:	2b40      	cmp	r3, #64	@ 0x40
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d103      	bne.n	800552e <HAL_UART_IRQHandler+0x17a>
 8005526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800552a:	2b00      	cmp	r3, #0
 800552c:	d04f      	beq.n	80055ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa14 	bl	800595c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553e:	2b40      	cmp	r3, #64	@ 0x40
 8005540:	d141      	bne.n	80055c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3314      	adds	r3, #20
 8005548:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005558:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800555c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3314      	adds	r3, #20
 800556a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800556e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800557a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1d9      	bne.n	8005542 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005592:	2b00      	cmp	r3, #0
 8005594:	d013      	beq.n	80055be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559a:	4a8a      	ldr	r2, [pc, #552]	@ (80057c4 <HAL_UART_IRQHandler+0x410>)
 800559c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fc fe7c 	bl	80022a0 <HAL_DMA_Abort_IT>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055b8:	4610      	mov	r0, r2
 80055ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055bc:	e00e      	b.n	80055dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f9b6 	bl	8005930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c4:	e00a      	b.n	80055dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f9b2 	bl	8005930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	e006      	b.n	80055dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f9ae 	bl	8005930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055da:	e18d      	b.n	80058f8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055dc:	bf00      	nop
    return;
 80055de:	e18b      	b.n	80058f8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	f040 8167 	bne.w	80058b8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 8160 	beq.w	80058b8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80055f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8159 	beq.w	80058b8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005606:	2300      	movs	r3, #0
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005626:	2b40      	cmp	r3, #64	@ 0x40
 8005628:	f040 80ce 	bne.w	80057c8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005638:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80a9 	beq.w	8005794 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800564a:	429a      	cmp	r2, r3
 800564c:	f080 80a2 	bcs.w	8005794 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005656:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005662:	f000 8088 	beq.w	8005776 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	330c      	adds	r3, #12
 800566c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800567c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005684:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	330c      	adds	r3, #12
 800568e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005692:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800569e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1d9      	bne.n	8005666 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3314      	adds	r3, #20
 80056b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056c4:	f023 0301 	bic.w	r3, r3, #1
 80056c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3314      	adds	r3, #20
 80056d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e1      	bne.n	80056b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3314      	adds	r3, #20
 80056f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005700:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005704:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3314      	adds	r3, #20
 800570e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005712:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005714:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005718:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e3      	bne.n	80056ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	330c      	adds	r3, #12
 800573a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005746:	f023 0310 	bic.w	r3, r3, #16
 800574a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005758:	65ba      	str	r2, [r7, #88]	@ 0x58
 800575a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800575e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e3      	bne.n	8005734 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005770:	4618      	mov	r0, r3
 8005772:	f7fc fd25 	bl	80021c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2202      	movs	r2, #2
 800577a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005784:	b29b      	uxth	r3, r3
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	b29b      	uxth	r3, r3
 800578a:	4619      	mov	r1, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f8d9 	bl	8005944 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005792:	e0b3      	b.n	80058fc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005798:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800579c:	429a      	cmp	r2, r3
 800579e:	f040 80ad 	bne.w	80058fc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057ac:	f040 80a6 	bne.w	80058fc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f8c1 	bl	8005944 <HAL_UARTEx_RxEventCallback>
      return;
 80057c2:	e09b      	b.n	80058fc <HAL_UART_IRQHandler+0x548>
 80057c4:	08005a23 	.word	0x08005a23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 808e 	beq.w	8005900 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80057e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 8089 	beq.w	8005900 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005804:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	330c      	adds	r3, #12
 800580e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005812:	647a      	str	r2, [r7, #68]	@ 0x44
 8005814:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005818:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e3      	bne.n	80057ee <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3314      	adds	r3, #20
 800582c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	623b      	str	r3, [r7, #32]
   return(result);
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3314      	adds	r3, #20
 8005846:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800584a:	633a      	str	r2, [r7, #48]	@ 0x30
 800584c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e3      	bne.n	8005826 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	330c      	adds	r3, #12
 8005872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	60fb      	str	r3, [r7, #12]
   return(result);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0310 	bic.w	r3, r3, #16
 8005882:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005890:	61fa      	str	r2, [r7, #28]
 8005892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	69b9      	ldr	r1, [r7, #24]
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	617b      	str	r3, [r7, #20]
   return(result);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e3      	bne.n	800586c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f847 	bl	8005944 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058b6:	e023      	b.n	8005900 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d009      	beq.n	80058d8 <HAL_UART_IRQHandler+0x524>
 80058c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f8b7 	bl	8005a44 <UART_Transmit_IT>
    return;
 80058d6:	e014      	b.n	8005902 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00e      	beq.n	8005902 <HAL_UART_IRQHandler+0x54e>
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f8f7 	bl	8005ae4 <UART_EndTransmit_IT>
    return;
 80058f6:	e004      	b.n	8005902 <HAL_UART_IRQHandler+0x54e>
    return;
 80058f8:	bf00      	nop
 80058fa:	e002      	b.n	8005902 <HAL_UART_IRQHandler+0x54e>
      return;
 80058fc:	bf00      	nop
 80058fe:	e000      	b.n	8005902 <HAL_UART_IRQHandler+0x54e>
      return;
 8005900:	bf00      	nop
  }
}
 8005902:	37e8      	adds	r7, #232	@ 0xe8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800595c:	b480      	push	{r7}
 800595e:	b095      	sub	sp, #84	@ 0x54
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	330c      	adds	r3, #12
 800596a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800597a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	330c      	adds	r3, #12
 8005982:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005984:	643a      	str	r2, [r7, #64]	@ 0x40
 8005986:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800598a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e5      	bne.n	8005964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3314      	adds	r3, #20
 800599e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3314      	adds	r3, #20
 80059b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e5      	bne.n	8005998 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d119      	bne.n	8005a08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	330c      	adds	r3, #12
 80059da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f023 0310 	bic.w	r3, r3, #16
 80059ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	330c      	adds	r3, #12
 80059f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059f4:	61ba      	str	r2, [r7, #24]
 80059f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	6979      	ldr	r1, [r7, #20]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	613b      	str	r3, [r7, #16]
   return(result);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e5      	bne.n	80059d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a16:	bf00      	nop
 8005a18:	3754      	adds	r7, #84	@ 0x54
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff ff7a 	bl	8005930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b21      	cmp	r3, #33	@ 0x21
 8005a56:	d13e      	bne.n	8005ad6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a60:	d114      	bne.n	8005a8c <UART_Transmit_IT+0x48>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d110      	bne.n	8005a8c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	1c9a      	adds	r2, r3, #2
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	621a      	str	r2, [r3, #32]
 8005a8a:	e008      	b.n	8005a9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	1c59      	adds	r1, r3, #1
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6211      	str	r1, [r2, #32]
 8005a96:	781a      	ldrb	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10f      	bne.n	8005ad2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ac0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ad0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e000      	b.n	8005ad8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ad6:	2302      	movs	r3, #2
  }
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005afa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff feff 	bl	8005908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08c      	sub	sp, #48	@ 0x30
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b22      	cmp	r3, #34	@ 0x22
 8005b2e:	f040 80aa 	bne.w	8005c86 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b3a:	d115      	bne.n	8005b68 <UART_Receive_IT+0x54>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d111      	bne.n	8005b68 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b48:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b60:	1c9a      	adds	r2, r3, #2
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b66:	e024      	b.n	8005bb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b76:	d007      	beq.n	8005b88 <UART_Receive_IT+0x74>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <UART_Receive_IT+0x82>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d106      	bne.n	8005b96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	e008      	b.n	8005ba8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d15d      	bne.n	8005c82 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0220 	bic.w	r2, r2, #32
 8005bd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005be4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695a      	ldr	r2, [r3, #20]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0201 	bic.w	r2, r2, #1
 8005bf4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d135      	bne.n	8005c78 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	330c      	adds	r3, #12
 8005c18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	613b      	str	r3, [r7, #16]
   return(result);
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f023 0310 	bic.w	r3, r3, #16
 8005c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	330c      	adds	r3, #12
 8005c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c32:	623a      	str	r2, [r7, #32]
 8005c34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	69f9      	ldr	r1, [r7, #28]
 8005c38:	6a3a      	ldr	r2, [r7, #32]
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e5      	bne.n	8005c12 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b10      	cmp	r3, #16
 8005c52:	d10a      	bne.n	8005c6a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff fe67 	bl	8005944 <HAL_UARTEx_RxEventCallback>
 8005c76:	e002      	b.n	8005c7e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff fe4f 	bl	800591c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e002      	b.n	8005c88 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	e000      	b.n	8005c88 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c86:	2302      	movs	r3, #2
  }
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3730      	adds	r7, #48	@ 0x30
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c94:	b0c0      	sub	sp, #256	@ 0x100
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cac:	68d9      	ldr	r1, [r3, #12]
 8005cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	ea40 0301 	orr.w	r3, r0, r1
 8005cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ce8:	f021 010c 	bic.w	r1, r1, #12
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cf6:	430b      	orrs	r3, r1
 8005cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0a:	6999      	ldr	r1, [r3, #24]
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	ea40 0301 	orr.w	r3, r0, r1
 8005d16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b8f      	ldr	r3, [pc, #572]	@ (8005f5c <UART_SetConfig+0x2cc>)
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d005      	beq.n	8005d30 <UART_SetConfig+0xa0>
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b8d      	ldr	r3, [pc, #564]	@ (8005f60 <UART_SetConfig+0x2d0>)
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d104      	bne.n	8005d3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d30:	f7fe fe6a 	bl	8004a08 <HAL_RCC_GetPCLK2Freq>
 8005d34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d38:	e003      	b.n	8005d42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d3a:	f7fe fe51 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8005d3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d4c:	f040 810c 	bne.w	8005f68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d54:	2200      	movs	r2, #0
 8005d56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d62:	4622      	mov	r2, r4
 8005d64:	462b      	mov	r3, r5
 8005d66:	1891      	adds	r1, r2, r2
 8005d68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d6a:	415b      	adcs	r3, r3
 8005d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d72:	4621      	mov	r1, r4
 8005d74:	eb12 0801 	adds.w	r8, r2, r1
 8005d78:	4629      	mov	r1, r5
 8005d7a:	eb43 0901 	adc.w	r9, r3, r1
 8005d7e:	f04f 0200 	mov.w	r2, #0
 8005d82:	f04f 0300 	mov.w	r3, #0
 8005d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d92:	4690      	mov	r8, r2
 8005d94:	4699      	mov	r9, r3
 8005d96:	4623      	mov	r3, r4
 8005d98:	eb18 0303 	adds.w	r3, r8, r3
 8005d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005da0:	462b      	mov	r3, r5
 8005da2:	eb49 0303 	adc.w	r3, r9, r3
 8005da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005db6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	18db      	adds	r3, r3, r3
 8005dc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	eb42 0303 	adc.w	r3, r2, r3
 8005dca:	657b      	str	r3, [r7, #84]	@ 0x54
 8005dcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005dd4:	f7fa ff58 	bl	8000c88 <__aeabi_uldivmod>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4b61      	ldr	r3, [pc, #388]	@ (8005f64 <UART_SetConfig+0x2d4>)
 8005dde:	fba3 2302 	umull	r2, r3, r3, r2
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	011c      	lsls	r4, r3, #4
 8005de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005df0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005df4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005df8:	4642      	mov	r2, r8
 8005dfa:	464b      	mov	r3, r9
 8005dfc:	1891      	adds	r1, r2, r2
 8005dfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e00:	415b      	adcs	r3, r3
 8005e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e08:	4641      	mov	r1, r8
 8005e0a:	eb12 0a01 	adds.w	sl, r2, r1
 8005e0e:	4649      	mov	r1, r9
 8005e10:	eb43 0b01 	adc.w	fp, r3, r1
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e28:	4692      	mov	sl, r2
 8005e2a:	469b      	mov	fp, r3
 8005e2c:	4643      	mov	r3, r8
 8005e2e:	eb1a 0303 	adds.w	r3, sl, r3
 8005e32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e36:	464b      	mov	r3, r9
 8005e38:	eb4b 0303 	adc.w	r3, fp, r3
 8005e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e54:	460b      	mov	r3, r1
 8005e56:	18db      	adds	r3, r3, r3
 8005e58:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	eb42 0303 	adc.w	r3, r2, r3
 8005e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e6a:	f7fa ff0d 	bl	8000c88 <__aeabi_uldivmod>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	4b3b      	ldr	r3, [pc, #236]	@ (8005f64 <UART_SetConfig+0x2d4>)
 8005e76:	fba3 2301 	umull	r2, r3, r3, r1
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	2264      	movs	r2, #100	@ 0x64
 8005e7e:	fb02 f303 	mul.w	r3, r2, r3
 8005e82:	1acb      	subs	r3, r1, r3
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e8a:	4b36      	ldr	r3, [pc, #216]	@ (8005f64 <UART_SetConfig+0x2d4>)
 8005e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e98:	441c      	add	r4, r3
 8005e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ea4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005eac:	4642      	mov	r2, r8
 8005eae:	464b      	mov	r3, r9
 8005eb0:	1891      	adds	r1, r2, r2
 8005eb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005eb4:	415b      	adcs	r3, r3
 8005eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	1851      	adds	r1, r2, r1
 8005ec0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	414b      	adcs	r3, r1
 8005ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	f04f 0300 	mov.w	r3, #0
 8005ed0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ed4:	4659      	mov	r1, fp
 8005ed6:	00cb      	lsls	r3, r1, #3
 8005ed8:	4651      	mov	r1, sl
 8005eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ede:	4651      	mov	r1, sl
 8005ee0:	00ca      	lsls	r2, r1, #3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4642      	mov	r2, r8
 8005eea:	189b      	adds	r3, r3, r2
 8005eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ef0:	464b      	mov	r3, r9
 8005ef2:	460a      	mov	r2, r1
 8005ef4:	eb42 0303 	adc.w	r3, r2, r3
 8005ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f10:	460b      	mov	r3, r1
 8005f12:	18db      	adds	r3, r3, r3
 8005f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f16:	4613      	mov	r3, r2
 8005f18:	eb42 0303 	adc.w	r3, r2, r3
 8005f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f26:	f7fa feaf 	bl	8000c88 <__aeabi_uldivmod>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f64 <UART_SetConfig+0x2d4>)
 8005f30:	fba3 1302 	umull	r1, r3, r3, r2
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	2164      	movs	r1, #100	@ 0x64
 8005f38:	fb01 f303 	mul.w	r3, r1, r3
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	3332      	adds	r3, #50	@ 0x32
 8005f42:	4a08      	ldr	r2, [pc, #32]	@ (8005f64 <UART_SetConfig+0x2d4>)
 8005f44:	fba2 2303 	umull	r2, r3, r2, r3
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	f003 0207 	and.w	r2, r3, #7
 8005f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4422      	add	r2, r4
 8005f56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f58:	e106      	b.n	8006168 <UART_SetConfig+0x4d8>
 8005f5a:	bf00      	nop
 8005f5c:	40011000 	.word	0x40011000
 8005f60:	40011400 	.word	0x40011400
 8005f64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f7a:	4642      	mov	r2, r8
 8005f7c:	464b      	mov	r3, r9
 8005f7e:	1891      	adds	r1, r2, r2
 8005f80:	6239      	str	r1, [r7, #32]
 8005f82:	415b      	adcs	r3, r3
 8005f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	1854      	adds	r4, r2, r1
 8005f8e:	4649      	mov	r1, r9
 8005f90:	eb43 0501 	adc.w	r5, r3, r1
 8005f94:	f04f 0200 	mov.w	r2, #0
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	00eb      	lsls	r3, r5, #3
 8005f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fa2:	00e2      	lsls	r2, r4, #3
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	461d      	mov	r5, r3
 8005fa8:	4643      	mov	r3, r8
 8005faa:	18e3      	adds	r3, r4, r3
 8005fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	eb45 0303 	adc.w	r3, r5, r3
 8005fb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005fca:	f04f 0200 	mov.w	r2, #0
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	008b      	lsls	r3, r1, #2
 8005fda:	4621      	mov	r1, r4
 8005fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	008a      	lsls	r2, r1, #2
 8005fe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005fe8:	f7fa fe4e 	bl	8000c88 <__aeabi_uldivmod>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4b60      	ldr	r3, [pc, #384]	@ (8006174 <UART_SetConfig+0x4e4>)
 8005ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	011c      	lsls	r4, r3, #4
 8005ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006004:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800600c:	4642      	mov	r2, r8
 800600e:	464b      	mov	r3, r9
 8006010:	1891      	adds	r1, r2, r2
 8006012:	61b9      	str	r1, [r7, #24]
 8006014:	415b      	adcs	r3, r3
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800601c:	4641      	mov	r1, r8
 800601e:	1851      	adds	r1, r2, r1
 8006020:	6139      	str	r1, [r7, #16]
 8006022:	4649      	mov	r1, r9
 8006024:	414b      	adcs	r3, r1
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	f04f 0200 	mov.w	r2, #0
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006034:	4659      	mov	r1, fp
 8006036:	00cb      	lsls	r3, r1, #3
 8006038:	4651      	mov	r1, sl
 800603a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800603e:	4651      	mov	r1, sl
 8006040:	00ca      	lsls	r2, r1, #3
 8006042:	4610      	mov	r0, r2
 8006044:	4619      	mov	r1, r3
 8006046:	4603      	mov	r3, r0
 8006048:	4642      	mov	r2, r8
 800604a:	189b      	adds	r3, r3, r2
 800604c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006050:	464b      	mov	r3, r9
 8006052:	460a      	mov	r2, r1
 8006054:	eb42 0303 	adc.w	r3, r2, r3
 8006058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006066:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006074:	4649      	mov	r1, r9
 8006076:	008b      	lsls	r3, r1, #2
 8006078:	4641      	mov	r1, r8
 800607a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800607e:	4641      	mov	r1, r8
 8006080:	008a      	lsls	r2, r1, #2
 8006082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006086:	f7fa fdff 	bl	8000c88 <__aeabi_uldivmod>
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	4611      	mov	r1, r2
 8006090:	4b38      	ldr	r3, [pc, #224]	@ (8006174 <UART_SetConfig+0x4e4>)
 8006092:	fba3 2301 	umull	r2, r3, r3, r1
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	2264      	movs	r2, #100	@ 0x64
 800609a:	fb02 f303 	mul.w	r3, r2, r3
 800609e:	1acb      	subs	r3, r1, r3
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	3332      	adds	r3, #50	@ 0x32
 80060a4:	4a33      	ldr	r2, [pc, #204]	@ (8006174 <UART_SetConfig+0x4e4>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060b0:	441c      	add	r4, r3
 80060b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060b6:	2200      	movs	r2, #0
 80060b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80060ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80060bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	1891      	adds	r1, r2, r2
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	415b      	adcs	r3, r3
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060d0:	4641      	mov	r1, r8
 80060d2:	1851      	adds	r1, r2, r1
 80060d4:	6039      	str	r1, [r7, #0]
 80060d6:	4649      	mov	r1, r9
 80060d8:	414b      	adcs	r3, r1
 80060da:	607b      	str	r3, [r7, #4]
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060e8:	4659      	mov	r1, fp
 80060ea:	00cb      	lsls	r3, r1, #3
 80060ec:	4651      	mov	r1, sl
 80060ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060f2:	4651      	mov	r1, sl
 80060f4:	00ca      	lsls	r2, r1, #3
 80060f6:	4610      	mov	r0, r2
 80060f8:	4619      	mov	r1, r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	4642      	mov	r2, r8
 80060fe:	189b      	adds	r3, r3, r2
 8006100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006102:	464b      	mov	r3, r9
 8006104:	460a      	mov	r2, r1
 8006106:	eb42 0303 	adc.w	r3, r2, r3
 800610a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	663b      	str	r3, [r7, #96]	@ 0x60
 8006116:	667a      	str	r2, [r7, #100]	@ 0x64
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006124:	4649      	mov	r1, r9
 8006126:	008b      	lsls	r3, r1, #2
 8006128:	4641      	mov	r1, r8
 800612a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800612e:	4641      	mov	r1, r8
 8006130:	008a      	lsls	r2, r1, #2
 8006132:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006136:	f7fa fda7 	bl	8000c88 <__aeabi_uldivmod>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4b0d      	ldr	r3, [pc, #52]	@ (8006174 <UART_SetConfig+0x4e4>)
 8006140:	fba3 1302 	umull	r1, r3, r3, r2
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	2164      	movs	r1, #100	@ 0x64
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	3332      	adds	r3, #50	@ 0x32
 8006152:	4a08      	ldr	r2, [pc, #32]	@ (8006174 <UART_SetConfig+0x4e4>)
 8006154:	fba2 2303 	umull	r2, r3, r2, r3
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	f003 020f 	and.w	r2, r3, #15
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4422      	add	r2, r4
 8006166:	609a      	str	r2, [r3, #8]
}
 8006168:	bf00      	nop
 800616a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800616e:	46bd      	mov	sp, r7
 8006170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006174:	51eb851f 	.word	0x51eb851f

08006178 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006178:	b084      	sub	sp, #16
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	f107 001c 	add.w	r0, r7, #28
 8006186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800618a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800618e:	2b01      	cmp	r3, #1
 8006190:	d123      	bne.n	80061da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006196:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80061a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d105      	bne.n	80061ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 fae8 	bl	80077a4 <USB_CoreReset>
 80061d4:	4603      	mov	r3, r0
 80061d6:	73fb      	strb	r3, [r7, #15]
 80061d8:	e01b      	b.n	8006212 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 fadc 	bl	80077a4 <USB_CoreReset>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	639a      	str	r2, [r3, #56]	@ 0x38
 8006204:	e005      	b.n	8006212 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006212:	7fbb      	ldrb	r3, [r7, #30]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d10b      	bne.n	8006230 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f043 0206 	orr.w	r2, r3, #6
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f043 0220 	orr.w	r2, r3, #32
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006230:	7bfb      	ldrb	r3, [r7, #15]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800623c:	b004      	add	sp, #16
 800623e:	4770      	bx	lr

08006240 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	4613      	mov	r3, r2
 800624c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d165      	bne.n	8006320 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4a41      	ldr	r2, [pc, #260]	@ (800635c <USB_SetTurnaroundTime+0x11c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d906      	bls.n	800626a <USB_SetTurnaroundTime+0x2a>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4a40      	ldr	r2, [pc, #256]	@ (8006360 <USB_SetTurnaroundTime+0x120>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d202      	bcs.n	800626a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006264:	230f      	movs	r3, #15
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	e062      	b.n	8006330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	4a3c      	ldr	r2, [pc, #240]	@ (8006360 <USB_SetTurnaroundTime+0x120>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d306      	bcc.n	8006280 <USB_SetTurnaroundTime+0x40>
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	4a3b      	ldr	r2, [pc, #236]	@ (8006364 <USB_SetTurnaroundTime+0x124>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d202      	bcs.n	8006280 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800627a:	230e      	movs	r3, #14
 800627c:	617b      	str	r3, [r7, #20]
 800627e:	e057      	b.n	8006330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4a38      	ldr	r2, [pc, #224]	@ (8006364 <USB_SetTurnaroundTime+0x124>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d306      	bcc.n	8006296 <USB_SetTurnaroundTime+0x56>
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	4a37      	ldr	r2, [pc, #220]	@ (8006368 <USB_SetTurnaroundTime+0x128>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d202      	bcs.n	8006296 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006290:	230d      	movs	r3, #13
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	e04c      	b.n	8006330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4a33      	ldr	r2, [pc, #204]	@ (8006368 <USB_SetTurnaroundTime+0x128>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d306      	bcc.n	80062ac <USB_SetTurnaroundTime+0x6c>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	4a32      	ldr	r2, [pc, #200]	@ (800636c <USB_SetTurnaroundTime+0x12c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d802      	bhi.n	80062ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062a6:	230c      	movs	r3, #12
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	e041      	b.n	8006330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4a2f      	ldr	r2, [pc, #188]	@ (800636c <USB_SetTurnaroundTime+0x12c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d906      	bls.n	80062c2 <USB_SetTurnaroundTime+0x82>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006370 <USB_SetTurnaroundTime+0x130>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d802      	bhi.n	80062c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062bc:	230b      	movs	r3, #11
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	e036      	b.n	8006330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006370 <USB_SetTurnaroundTime+0x130>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d906      	bls.n	80062d8 <USB_SetTurnaroundTime+0x98>
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4a29      	ldr	r2, [pc, #164]	@ (8006374 <USB_SetTurnaroundTime+0x134>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d802      	bhi.n	80062d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062d2:	230a      	movs	r3, #10
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	e02b      	b.n	8006330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4a26      	ldr	r2, [pc, #152]	@ (8006374 <USB_SetTurnaroundTime+0x134>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d906      	bls.n	80062ee <USB_SetTurnaroundTime+0xae>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4a25      	ldr	r2, [pc, #148]	@ (8006378 <USB_SetTurnaroundTime+0x138>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d202      	bcs.n	80062ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062e8:	2309      	movs	r3, #9
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	e020      	b.n	8006330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4a21      	ldr	r2, [pc, #132]	@ (8006378 <USB_SetTurnaroundTime+0x138>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d306      	bcc.n	8006304 <USB_SetTurnaroundTime+0xc4>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	4a20      	ldr	r2, [pc, #128]	@ (800637c <USB_SetTurnaroundTime+0x13c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d802      	bhi.n	8006304 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062fe:	2308      	movs	r3, #8
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	e015      	b.n	8006330 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4a1d      	ldr	r2, [pc, #116]	@ (800637c <USB_SetTurnaroundTime+0x13c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d906      	bls.n	800631a <USB_SetTurnaroundTime+0xda>
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4a1c      	ldr	r2, [pc, #112]	@ (8006380 <USB_SetTurnaroundTime+0x140>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d202      	bcs.n	800631a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006314:	2307      	movs	r3, #7
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	e00a      	b.n	8006330 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800631a:	2306      	movs	r3, #6
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	e007      	b.n	8006330 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006326:	2309      	movs	r3, #9
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	e001      	b.n	8006330 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800632c:	2309      	movs	r3, #9
 800632e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	029b      	lsls	r3, r3, #10
 8006344:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006348:	431a      	orrs	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	371c      	adds	r7, #28
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	00d8acbf 	.word	0x00d8acbf
 8006360:	00e4e1c0 	.word	0x00e4e1c0
 8006364:	00f42400 	.word	0x00f42400
 8006368:	01067380 	.word	0x01067380
 800636c:	011a499f 	.word	0x011a499f
 8006370:	01312cff 	.word	0x01312cff
 8006374:	014ca43f 	.word	0x014ca43f
 8006378:	016e3600 	.word	0x016e3600
 800637c:	01a6ab1f 	.word	0x01a6ab1f
 8006380:	01e84800 	.word	0x01e84800

08006384 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f043 0201 	orr.w	r2, r3, #1
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f023 0201 	bic.w	r2, r3, #1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d115      	bne.n	8006416 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063f6:	200a      	movs	r0, #10
 80063f8:	f7fb fd32 	bl	8001e60 <HAL_Delay>
      ms += 10U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	330a      	adds	r3, #10
 8006400:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 f93f 	bl	8007686 <USB_GetMode>
 8006408:	4603      	mov	r3, r0
 800640a:	2b01      	cmp	r3, #1
 800640c:	d01e      	beq.n	800644c <USB_SetCurrentMode+0x84>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2bc7      	cmp	r3, #199	@ 0xc7
 8006412:	d9f0      	bls.n	80063f6 <USB_SetCurrentMode+0x2e>
 8006414:	e01a      	b.n	800644c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d115      	bne.n	8006448 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006428:	200a      	movs	r0, #10
 800642a:	f7fb fd19 	bl	8001e60 <HAL_Delay>
      ms += 10U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	330a      	adds	r3, #10
 8006432:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 f926 	bl	8007686 <USB_GetMode>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <USB_SetCurrentMode+0x84>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2bc7      	cmp	r3, #199	@ 0xc7
 8006444:	d9f0      	bls.n	8006428 <USB_SetCurrentMode+0x60>
 8006446:	e001      	b.n	800644c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e005      	b.n	8006458 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006450:	d101      	bne.n	8006456 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006460:	b084      	sub	sp, #16
 8006462:	b580      	push	{r7, lr}
 8006464:	b086      	sub	sp, #24
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800646e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800647a:	2300      	movs	r3, #0
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	e009      	b.n	8006494 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	3340      	adds	r3, #64	@ 0x40
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	2200      	movs	r2, #0
 800648c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	3301      	adds	r3, #1
 8006492:	613b      	str	r3, [r7, #16]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	2b0e      	cmp	r3, #14
 8006498:	d9f2      	bls.n	8006480 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800649a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d11c      	bne.n	80064dc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064b0:	f043 0302 	orr.w	r3, r3, #2
 80064b4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80064da:	e00b      	b.n	80064f4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064fa:	461a      	mov	r2, r3
 80064fc:	2300      	movs	r3, #0
 80064fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006500:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006504:	2b01      	cmp	r3, #1
 8006506:	d10d      	bne.n	8006524 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006510:	2100      	movs	r1, #0
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f968 	bl	80067e8 <USB_SetDevSpeed>
 8006518:	e008      	b.n	800652c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800651a:	2101      	movs	r1, #1
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f963 	bl	80067e8 <USB_SetDevSpeed>
 8006522:	e003      	b.n	800652c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006524:	2103      	movs	r1, #3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f95e 	bl	80067e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800652c:	2110      	movs	r1, #16
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f8fa 	bl	8006728 <USB_FlushTxFifo>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f924 	bl	800678c <USB_FlushRxFifo>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006554:	461a      	mov	r2, r3
 8006556:	2300      	movs	r3, #0
 8006558:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006560:	461a      	mov	r2, r3
 8006562:	2300      	movs	r3, #0
 8006564:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800656c:	461a      	mov	r2, r3
 800656e:	2300      	movs	r3, #0
 8006570:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	e043      	b.n	8006600 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800658a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800658e:	d118      	bne.n	80065c2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a2:	461a      	mov	r2, r3
 80065a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80065a8:	6013      	str	r3, [r2, #0]
 80065aa:	e013      	b.n	80065d4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b8:	461a      	mov	r2, r3
 80065ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	e008      	b.n	80065d4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ce:	461a      	mov	r2, r3
 80065d0:	2300      	movs	r3, #0
 80065d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e0:	461a      	mov	r2, r3
 80065e2:	2300      	movs	r3, #0
 80065e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f2:	461a      	mov	r2, r3
 80065f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	3301      	adds	r3, #1
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006604:	461a      	mov	r2, r3
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	4293      	cmp	r3, r2
 800660a:	d3b5      	bcc.n	8006578 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800660c:	2300      	movs	r3, #0
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	e043      	b.n	800669a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4413      	add	r3, r2
 800661a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006624:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006628:	d118      	bne.n	800665c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10a      	bne.n	8006646 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800663c:	461a      	mov	r2, r3
 800663e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	e013      	b.n	800666e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006652:	461a      	mov	r2, r3
 8006654:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	e008      	b.n	800666e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006668:	461a      	mov	r2, r3
 800666a:	2300      	movs	r3, #0
 800666c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800667a:	461a      	mov	r2, r3
 800667c:	2300      	movs	r3, #0
 800667e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668c:	461a      	mov	r2, r3
 800668e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006692:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	3301      	adds	r3, #1
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800669e:	461a      	mov	r2, r3
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d3b5      	bcc.n	8006612 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80066c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d105      	bne.n	80066dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f043 0210 	orr.w	r2, r3, #16
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	699a      	ldr	r2, [r3, #24]
 80066e0:	4b10      	ldr	r3, [pc, #64]	@ (8006724 <USB_DevInit+0x2c4>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f043 0208 	orr.w	r2, r3, #8
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006700:	2b01      	cmp	r3, #1
 8006702:	d107      	bne.n	8006714 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800670c:	f043 0304 	orr.w	r3, r3, #4
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006714:	7dfb      	ldrb	r3, [r7, #23]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006720:	b004      	add	sp, #16
 8006722:	4770      	bx	lr
 8006724:	803c3800 	.word	0x803c3800

08006728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3301      	adds	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006742:	d901      	bls.n	8006748 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e01b      	b.n	8006780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	daf2      	bge.n	8006736 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	019b      	lsls	r3, r3, #6
 8006758:	f043 0220 	orr.w	r2, r3, #32
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3301      	adds	r3, #1
 8006764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800676c:	d901      	bls.n	8006772 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e006      	b.n	8006780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b20      	cmp	r3, #32
 800677c:	d0f0      	beq.n	8006760 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3301      	adds	r3, #1
 800679c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067a4:	d901      	bls.n	80067aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e018      	b.n	80067dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	daf2      	bge.n	8006798 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2210      	movs	r2, #16
 80067ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3301      	adds	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067c8:	d901      	bls.n	80067ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e006      	b.n	80067dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0310 	and.w	r3, r3, #16
 80067d6:	2b10      	cmp	r3, #16
 80067d8:	d0f0      	beq.n	80067bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006808:	4313      	orrs	r3, r2
 800680a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800681a:	b480      	push	{r7}
 800681c:	b087      	sub	sp, #28
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 0306 	and.w	r3, r3, #6
 8006832:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d102      	bne.n	8006840 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800683a:	2300      	movs	r3, #0
 800683c:	75fb      	strb	r3, [r7, #23]
 800683e:	e00a      	b.n	8006856 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b02      	cmp	r3, #2
 8006844:	d002      	beq.n	800684c <USB_GetDevSpeed+0x32>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b06      	cmp	r3, #6
 800684a:	d102      	bne.n	8006852 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800684c:	2302      	movs	r3, #2
 800684e:	75fb      	strb	r3, [r7, #23]
 8006850:	e001      	b.n	8006856 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006852:	230f      	movs	r3, #15
 8006854:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006856:	7dfb      	ldrb	r3, [r7, #23]
}
 8006858:	4618      	mov	r0, r3
 800685a:	371c      	adds	r7, #28
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d13a      	bne.n	80068f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006886:	69da      	ldr	r2, [r3, #28]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	2101      	movs	r1, #1
 8006892:	fa01 f303 	lsl.w	r3, r1, r3
 8006896:	b29b      	uxth	r3, r3
 8006898:	68f9      	ldr	r1, [r7, #12]
 800689a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800689e:	4313      	orrs	r3, r2
 80068a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d155      	bne.n	8006964 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	791b      	ldrb	r3, [r3, #4]
 80068d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	059b      	lsls	r3, r3, #22
 80068da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068dc:	4313      	orrs	r3, r2
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	0151      	lsls	r1, r2, #5
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	440a      	add	r2, r1
 80068e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	e036      	b.n	8006964 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068fc:	69da      	ldr	r2, [r3, #28]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	2101      	movs	r1, #1
 8006908:	fa01 f303 	lsl.w	r3, r1, r3
 800690c:	041b      	lsls	r3, r3, #16
 800690e:	68f9      	ldr	r1, [r7, #12]
 8006910:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006914:	4313      	orrs	r3, r2
 8006916:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d11a      	bne.n	8006964 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	791b      	ldrb	r3, [r3, #4]
 8006948:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800694a:	430b      	orrs	r3, r1
 800694c:	4313      	orrs	r3, r2
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800695a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800695e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006962:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
	...

08006974 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	785b      	ldrb	r3, [r3, #1]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d161      	bne.n	8006a54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069a6:	d11f      	bne.n	80069e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	f003 030f 	and.w	r3, r3, #15
 80069f8:	2101      	movs	r1, #1
 80069fa:	fa01 f303 	lsl.w	r3, r1, r3
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	43db      	mvns	r3, r3
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a08:	4013      	ands	r3, r2
 8006a0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a12:	69da      	ldr	r2, [r3, #28]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	f003 030f 	and.w	r3, r3, #15
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	43db      	mvns	r3, r3
 8006a26:	68f9      	ldr	r1, [r7, #12]
 8006a28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	0159      	lsls	r1, r3, #5
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	440b      	add	r3, r1
 8006a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4b35      	ldr	r3, [pc, #212]	@ (8006b24 <USB_DeactivateEndpoint+0x1b0>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	600b      	str	r3, [r1, #0]
 8006a52:	e060      	b.n	8006b16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a6a:	d11f      	bne.n	8006aac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	0151      	lsls	r1, r2, #5
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	440a      	add	r2, r1
 8006a82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	0151      	lsls	r1, r2, #5
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	440a      	add	r2, r1
 8006aa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aa6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006aaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	f003 030f 	and.w	r3, r3, #15
 8006abc:	2101      	movs	r1, #1
 8006abe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac2:	041b      	lsls	r3, r3, #16
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	68f9      	ldr	r1, [r7, #12]
 8006ac8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006acc:	4013      	ands	r3, r2
 8006ace:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad6:	69da      	ldr	r2, [r3, #28]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	f003 030f 	and.w	r3, r3, #15
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae6:	041b      	lsls	r3, r3, #16
 8006ae8:	43db      	mvns	r3, r3
 8006aea:	68f9      	ldr	r1, [r7, #12]
 8006aec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006af0:	4013      	ands	r3, r2
 8006af2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	0159      	lsls	r1, r3, #5
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	440b      	add	r3, r1
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4b05      	ldr	r3, [pc, #20]	@ (8006b28 <USB_DeactivateEndpoint+0x1b4>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	ec337800 	.word	0xec337800
 8006b28:	eff37800 	.word	0xeff37800

08006b2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	@ 0x28
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	785b      	ldrb	r3, [r3, #1]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	f040 817f 	bne.w	8006e4c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d132      	bne.n	8006bbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	0151      	lsls	r1, r2, #5
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	440a      	add	r2, r1
 8006b6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b70:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b74:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bb4:	0cdb      	lsrs	r3, r3, #19
 8006bb6:	04db      	lsls	r3, r3, #19
 8006bb8:	6113      	str	r3, [r2, #16]
 8006bba:	e097      	b.n	8006cec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	0151      	lsls	r1, r2, #5
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	440a      	add	r2, r1
 8006bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bd6:	0cdb      	lsrs	r3, r3, #19
 8006bd8:	04db      	lsls	r3, r3, #19
 8006bda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bf6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006bfa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006bfe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d11a      	bne.n	8006c3c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d903      	bls.n	8006c1a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c38:	6113      	str	r3, [r2, #16]
 8006c3a:	e044      	b.n	8006cc6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	691a      	ldr	r2, [r3, #16]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	4413      	add	r3, r2
 8006c46:	1e5a      	subs	r2, r3, #1
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c50:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	8afb      	ldrh	r3, [r7, #22]
 8006c62:	04d9      	lsls	r1, r3, #19
 8006c64:	4ba4      	ldr	r3, [pc, #656]	@ (8006ef8 <USB_EPStartXfer+0x3cc>)
 8006c66:	400b      	ands	r3, r1
 8006c68:	69b9      	ldr	r1, [r7, #24]
 8006c6a:	0148      	lsls	r0, r1, #5
 8006c6c:	69f9      	ldr	r1, [r7, #28]
 8006c6e:	4401      	add	r1, r0
 8006c70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c74:	4313      	orrs	r3, r2
 8006c76:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	791b      	ldrb	r3, [r3, #4]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d122      	bne.n	8006cc6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c9a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006c9e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cac:	691a      	ldr	r2, [r3, #16]
 8006cae:	8afb      	ldrh	r3, [r7, #22]
 8006cb0:	075b      	lsls	r3, r3, #29
 8006cb2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006cb6:	69b9      	ldr	r1, [r7, #24]
 8006cb8:	0148      	lsls	r0, r1, #5
 8006cba:	69f9      	ldr	r1, [r7, #28]
 8006cbc:	4401      	add	r1, r0
 8006cbe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cdc:	69b9      	ldr	r1, [r7, #24]
 8006cde:	0148      	lsls	r0, r1, #5
 8006ce0:	69f9      	ldr	r1, [r7, #28]
 8006ce2:	4401      	add	r1, r0
 8006ce4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d14b      	bne.n	8006d8a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d06:	461a      	mov	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	791b      	ldrb	r3, [r3, #4]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d128      	bne.n	8006d68 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d110      	bne.n	8006d48 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	0151      	lsls	r1, r2, #5
 8006d38:	69fa      	ldr	r2, [r7, #28]
 8006d3a:	440a      	add	r2, r1
 8006d3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	e00f      	b.n	8006d68 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d66:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	e166      	b.n	8007058 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	0151      	lsls	r1, r2, #5
 8006d9c:	69fa      	ldr	r2, [r7, #28]
 8006d9e:	440a      	add	r2, r1
 8006da0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006da4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006da8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	791b      	ldrb	r3, [r3, #4]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d015      	beq.n	8006dde <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 814e 	beq.w	8007058 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	2101      	movs	r1, #1
 8006dce:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd2:	69f9      	ldr	r1, [r7, #28]
 8006dd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	634b      	str	r3, [r1, #52]	@ 0x34
 8006ddc:	e13c      	b.n	8007058 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d110      	bne.n	8006e10 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	69fa      	ldr	r2, [r7, #28]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	e00f      	b.n	8006e30 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e2e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	68d9      	ldr	r1, [r3, #12]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	781a      	ldrb	r2, [r3, #0]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	b298      	uxth	r0, r3
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	4603      	mov	r3, r0
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f9b9 	bl	80071bc <USB_WritePacket>
 8006e4a:	e105      	b.n	8007058 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	0151      	lsls	r1, r2, #5
 8006e5e:	69fa      	ldr	r2, [r7, #28]
 8006e60:	440a      	add	r2, r1
 8006e62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e66:	0cdb      	lsrs	r3, r3, #19
 8006e68:	04db      	lsls	r3, r3, #19
 8006e6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e86:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e8a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e8e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d132      	bne.n	8006efc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	689a      	ldr	r2, [r3, #8]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eba:	691a      	ldr	r2, [r3, #16]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ec4:	69b9      	ldr	r1, [r7, #24]
 8006ec6:	0148      	lsls	r0, r1, #5
 8006ec8:	69f9      	ldr	r1, [r7, #28]
 8006eca:	4401      	add	r1, r0
 8006ecc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	0151      	lsls	r1, r2, #5
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	440a      	add	r2, r1
 8006eea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ef2:	6113      	str	r3, [r2, #16]
 8006ef4:	e062      	b.n	8006fbc <USB_EPStartXfer+0x490>
 8006ef6:	bf00      	nop
 8006ef8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d123      	bne.n	8006f4c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f10:	691a      	ldr	r2, [r3, #16]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f1a:	69b9      	ldr	r1, [r7, #24]
 8006f1c:	0148      	lsls	r0, r1, #5
 8006f1e:	69f9      	ldr	r1, [r7, #28]
 8006f20:	4401      	add	r1, r0
 8006f22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f26:	4313      	orrs	r3, r2
 8006f28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	0151      	lsls	r1, r2, #5
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	440a      	add	r2, r1
 8006f40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f48:	6113      	str	r3, [r2, #16]
 8006f4a:	e037      	b.n	8006fbc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	4413      	add	r3, r2
 8006f56:	1e5a      	subs	r2, r3, #1
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f60:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	8afa      	ldrh	r2, [r7, #22]
 8006f68:	fb03 f202 	mul.w	r2, r3, r2
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f7c:	691a      	ldr	r2, [r3, #16]
 8006f7e:	8afb      	ldrh	r3, [r7, #22]
 8006f80:	04d9      	lsls	r1, r3, #19
 8006f82:	4b38      	ldr	r3, [pc, #224]	@ (8007064 <USB_EPStartXfer+0x538>)
 8006f84:	400b      	ands	r3, r1
 8006f86:	69b9      	ldr	r1, [r7, #24]
 8006f88:	0148      	lsls	r0, r1, #5
 8006f8a:	69f9      	ldr	r1, [r7, #28]
 8006f8c:	4401      	add	r1, r0
 8006f8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f92:	4313      	orrs	r3, r2
 8006f94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa2:	691a      	ldr	r2, [r3, #16]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fac:	69b9      	ldr	r1, [r7, #24]
 8006fae:	0148      	lsls	r0, r1, #5
 8006fb0:	69f9      	ldr	r1, [r7, #28]
 8006fb2:	4401      	add	r1, r0
 8006fb4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d10d      	bne.n	8006fde <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d009      	beq.n	8006fde <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	68d9      	ldr	r1, [r3, #12]
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fda:	460a      	mov	r2, r1
 8006fdc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	791b      	ldrb	r3, [r3, #4]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d128      	bne.n	8007038 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d110      	bne.n	8007018 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	0151      	lsls	r1, r2, #5
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	440a      	add	r2, r1
 800700c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007010:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	e00f      	b.n	8007038 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	440a      	add	r2, r1
 800702e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007036:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	440a      	add	r2, r1
 800704e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007052:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007056:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	1ff80000 	.word	0x1ff80000

08007068 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	785b      	ldrb	r3, [r3, #1]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d14a      	bne.n	800711c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800709a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800709e:	f040 8086 	bne.w	80071ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	7812      	ldrb	r2, [r2, #0]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	7812      	ldrb	r2, [r2, #0]
 80070da:	0151      	lsls	r1, r2, #5
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	440a      	add	r2, r1
 80070e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3301      	adds	r3, #1
 80070ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d902      	bls.n	8007100 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	75fb      	strb	r3, [r7, #23]
          break;
 80070fe:	e056      	b.n	80071ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007114:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007118:	d0e7      	beq.n	80070ea <USB_EPStopXfer+0x82>
 800711a:	e048      	b.n	80071ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007134:	d13b      	bne.n	80071ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	7812      	ldrb	r2, [r2, #0]
 800714a:	0151      	lsls	r1, r2, #5
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	440a      	add	r2, r1
 8007150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007154:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007158:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	7812      	ldrb	r2, [r2, #0]
 800716e:	0151      	lsls	r1, r2, #5
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	440a      	add	r2, r1
 8007174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007178:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800717c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3301      	adds	r3, #1
 8007182:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f242 7210 	movw	r2, #10000	@ 0x2710
 800718a:	4293      	cmp	r3, r2
 800718c:	d902      	bls.n	8007194 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	75fb      	strb	r3, [r7, #23]
          break;
 8007192:	e00c      	b.n	80071ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071ac:	d0e7      	beq.n	800717e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071bc:	b480      	push	{r7}
 80071be:	b089      	sub	sp, #36	@ 0x24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	4611      	mov	r1, r2
 80071c8:	461a      	mov	r2, r3
 80071ca:	460b      	mov	r3, r1
 80071cc:	71fb      	strb	r3, [r7, #7]
 80071ce:	4613      	mov	r3, r2
 80071d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d123      	bne.n	800722a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071e2:	88bb      	ldrh	r3, [r7, #4]
 80071e4:	3303      	adds	r3, #3
 80071e6:	089b      	lsrs	r3, r3, #2
 80071e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071ea:	2300      	movs	r3, #0
 80071ec:	61bb      	str	r3, [r7, #24]
 80071ee:	e018      	b.n	8007222 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	031a      	lsls	r2, r3, #12
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071fc:	461a      	mov	r2, r3
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	3301      	adds	r3, #1
 8007208:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	3301      	adds	r3, #1
 800720e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	3301      	adds	r3, #1
 8007214:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	3301      	adds	r3, #1
 800721a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	3301      	adds	r3, #1
 8007220:	61bb      	str	r3, [r7, #24]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	429a      	cmp	r2, r3
 8007228:	d3e2      	bcc.n	80071f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3724      	adds	r7, #36	@ 0x24
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007238:	b480      	push	{r7}
 800723a:	b08b      	sub	sp, #44	@ 0x2c
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	4613      	mov	r3, r2
 8007244:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	089b      	lsrs	r3, r3, #2
 8007252:	b29b      	uxth	r3, r3
 8007254:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	f003 0303 	and.w	r3, r3, #3
 800725c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800725e:	2300      	movs	r3, #0
 8007260:	623b      	str	r3, [r7, #32]
 8007262:	e014      	b.n	800728e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007272:	3301      	adds	r3, #1
 8007274:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	3301      	adds	r3, #1
 800727a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	3301      	adds	r3, #1
 8007280:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	3301      	adds	r3, #1
 8007286:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	3301      	adds	r3, #1
 800728c:	623b      	str	r3, [r7, #32]
 800728e:	6a3a      	ldr	r2, [r7, #32]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	429a      	cmp	r2, r3
 8007294:	d3e6      	bcc.n	8007264 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007296:	8bfb      	ldrh	r3, [r7, #30]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01e      	beq.n	80072da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072a6:	461a      	mov	r2, r3
 80072a8:	f107 0310 	add.w	r3, r7, #16
 80072ac:	6812      	ldr	r2, [r2, #0]
 80072ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	fa22 f303 	lsr.w	r3, r2, r3
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	701a      	strb	r2, [r3, #0]
      i++;
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	3301      	adds	r3, #1
 80072c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80072c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ca:	3301      	adds	r3, #1
 80072cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80072ce:	8bfb      	ldrh	r3, [r7, #30]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072d4:	8bfb      	ldrh	r3, [r7, #30]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1ea      	bne.n	80072b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072dc:	4618      	mov	r0, r3
 80072de:	372c      	adds	r7, #44	@ 0x2c
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d12c      	bne.n	800735e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	db12      	blt.n	800733c <USB_EPSetStall+0x54>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00f      	beq.n	800733c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	0151      	lsls	r1, r2, #5
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	440a      	add	r2, r1
 8007332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007336:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800733a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	440a      	add	r2, r1
 8007352:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007356:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	e02b      	b.n	80073b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	db12      	blt.n	8007396 <USB_EPSetStall+0xae>
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00f      	beq.n	8007396 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	0151      	lsls	r1, r2, #5
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	440a      	add	r2, r1
 800738c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007390:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007394:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d128      	bne.n	8007432 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	791b      	ldrb	r3, [r3, #4]
 8007404:	2b03      	cmp	r3, #3
 8007406:	d003      	beq.n	8007410 <USB_EPClearStall+0x4c>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	791b      	ldrb	r3, [r3, #4]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d138      	bne.n	8007482 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800742a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	e027      	b.n	8007482 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	0151      	lsls	r1, r2, #5
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	440a      	add	r2, r1
 8007448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800744c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007450:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	791b      	ldrb	r3, [r3, #4]
 8007456:	2b03      	cmp	r3, #3
 8007458:	d003      	beq.n	8007462 <USB_EPClearStall+0x9e>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	791b      	ldrb	r3, [r3, #4]
 800745e:	2b02      	cmp	r3, #2
 8007460:	d10f      	bne.n	8007482 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	0151      	lsls	r1, r2, #5
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	440a      	add	r2, r1
 8007478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800747c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007480:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80074b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80074c4:	68f9      	ldr	r1, [r7, #12]
 80074c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074ca:	4313      	orrs	r3, r2
 80074cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80074f6:	f023 0303 	bic.w	r3, r3, #3
 80074fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800750a:	f023 0302 	bic.w	r3, r3, #2
 800750e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007538:	f023 0303 	bic.w	r3, r3, #3
 800753c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800754c:	f043 0302 	orr.w	r3, r3, #2
 8007550:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4013      	ands	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007578:	68fb      	ldr	r3, [r7, #12]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007586:	b480      	push	{r7}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	4013      	ands	r3, r2
 80075a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	0c1b      	lsrs	r3, r3, #16
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b085      	sub	sp, #20
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	4013      	ands	r3, r2
 80075dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	b29b      	uxth	r3, r3
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b085      	sub	sp, #20
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4413      	add	r3, r2
 8007606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	4013      	ands	r3, r2
 800761a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800761c:	68bb      	ldr	r3, [r7, #8]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800762a:	b480      	push	{r7}
 800762c:	b087      	sub	sp, #28
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800764a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800764c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	f003 030f 	and.w	r3, r3, #15
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	fa22 f303 	lsr.w	r3, r2, r3
 800765a:	01db      	lsls	r3, r3, #7
 800765c:	b2db      	uxtb	r3, r3
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	4313      	orrs	r3, r2
 8007662:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4013      	ands	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007678:	68bb      	ldr	r3, [r7, #8]
}
 800767a:	4618      	mov	r0, r3
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	f003 0301 	and.w	r3, r3, #1
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80076c0:	f023 0307 	bic.w	r3, r3, #7
 80076c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	460b      	mov	r3, r1
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	333c      	adds	r3, #60	@ 0x3c
 80076fe:	3304      	adds	r3, #4
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	4a26      	ldr	r2, [pc, #152]	@ (80077a0 <USB_EP0_OutStart+0xb8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d90a      	bls.n	8007722 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007718:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800771c:	d101      	bne.n	8007722 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	e037      	b.n	8007792 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007728:	461a      	mov	r2, r3
 800772a:	2300      	movs	r3, #0
 800772c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800773c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007750:	f043 0318 	orr.w	r3, r3, #24
 8007754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007764:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007768:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800776a:	7afb      	ldrb	r3, [r7, #11]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d10f      	bne.n	8007790 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800778a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800778e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	4f54300a 	.word	0x4f54300a

080077a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3301      	adds	r3, #1
 80077b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077bc:	d901      	bls.n	80077c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e022      	b.n	8007808 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	daf2      	bge.n	80077b0 <USB_CoreReset+0xc>

  count = 10U;
 80077ca:	230a      	movs	r3, #10
 80077cc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80077ce:	e002      	b.n	80077d6 <USB_CoreReset+0x32>
  {
    count--;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f9      	bne.n	80077d0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f043 0201 	orr.w	r2, r3, #1
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3301      	adds	r3, #1
 80077ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077f4:	d901      	bls.n	80077fa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e006      	b.n	8007808 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b01      	cmp	r3, #1
 8007804:	d0f0      	beq.n	80077e8 <USB_CoreReset+0x44>

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007820:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007824:	f002 fcbc 	bl	800a1a0 <USBD_static_malloc>
 8007828:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d109      	bne.n	8007844 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	32b0      	adds	r2, #176	@ 0xb0
 800783a:	2100      	movs	r1, #0
 800783c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007840:	2302      	movs	r3, #2
 8007842:	e0d4      	b.n	80079ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007844:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007848:	2100      	movs	r1, #0
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f003 fcad 	bl	800b1aa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	32b0      	adds	r2, #176	@ 0xb0
 800785a:	68f9      	ldr	r1, [r7, #12]
 800785c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	32b0      	adds	r2, #176	@ 0xb0
 800786a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	7c1b      	ldrb	r3, [r3, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d138      	bne.n	80078ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800787c:	4b5e      	ldr	r3, [pc, #376]	@ (80079f8 <USBD_CDC_Init+0x1e4>)
 800787e:	7819      	ldrb	r1, [r3, #0]
 8007880:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007884:	2202      	movs	r2, #2
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f002 fb67 	bl	8009f5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800788c:	4b5a      	ldr	r3, [pc, #360]	@ (80079f8 <USBD_CDC_Init+0x1e4>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	f003 020f 	and.w	r2, r3, #15
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	440b      	add	r3, r1
 80078a0:	3323      	adds	r3, #35	@ 0x23
 80078a2:	2201      	movs	r2, #1
 80078a4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80078a6:	4b55      	ldr	r3, [pc, #340]	@ (80079fc <USBD_CDC_Init+0x1e8>)
 80078a8:	7819      	ldrb	r1, [r3, #0]
 80078aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078ae:	2202      	movs	r2, #2
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f002 fb52 	bl	8009f5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80078b6:	4b51      	ldr	r3, [pc, #324]	@ (80079fc <USBD_CDC_Init+0x1e8>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	f003 020f 	and.w	r2, r3, #15
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	4613      	mov	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	440b      	add	r3, r1
 80078ca:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80078ce:	2201      	movs	r2, #1
 80078d0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078d2:	4b4b      	ldr	r3, [pc, #300]	@ (8007a00 <USBD_CDC_Init+0x1ec>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	f003 020f 	and.w	r2, r3, #15
 80078da:	6879      	ldr	r1, [r7, #4]
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	440b      	add	r3, r1
 80078e6:	331c      	adds	r3, #28
 80078e8:	2210      	movs	r2, #16
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	e035      	b.n	800795a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80078ee:	4b42      	ldr	r3, [pc, #264]	@ (80079f8 <USBD_CDC_Init+0x1e4>)
 80078f0:	7819      	ldrb	r1, [r3, #0]
 80078f2:	2340      	movs	r3, #64	@ 0x40
 80078f4:	2202      	movs	r2, #2
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f002 fb2f 	bl	8009f5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80078fc:	4b3e      	ldr	r3, [pc, #248]	@ (80079f8 <USBD_CDC_Init+0x1e4>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	f003 020f 	and.w	r2, r3, #15
 8007904:	6879      	ldr	r1, [r7, #4]
 8007906:	4613      	mov	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	440b      	add	r3, r1
 8007910:	3323      	adds	r3, #35	@ 0x23
 8007912:	2201      	movs	r2, #1
 8007914:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007916:	4b39      	ldr	r3, [pc, #228]	@ (80079fc <USBD_CDC_Init+0x1e8>)
 8007918:	7819      	ldrb	r1, [r3, #0]
 800791a:	2340      	movs	r3, #64	@ 0x40
 800791c:	2202      	movs	r2, #2
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f002 fb1b 	bl	8009f5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007924:	4b35      	ldr	r3, [pc, #212]	@ (80079fc <USBD_CDC_Init+0x1e8>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	f003 020f 	and.w	r2, r3, #15
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	440b      	add	r3, r1
 8007938:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800793c:	2201      	movs	r2, #1
 800793e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007940:	4b2f      	ldr	r3, [pc, #188]	@ (8007a00 <USBD_CDC_Init+0x1ec>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	f003 020f 	and.w	r2, r3, #15
 8007948:	6879      	ldr	r1, [r7, #4]
 800794a:	4613      	mov	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	440b      	add	r3, r1
 8007954:	331c      	adds	r3, #28
 8007956:	2210      	movs	r2, #16
 8007958:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800795a:	4b29      	ldr	r3, [pc, #164]	@ (8007a00 <USBD_CDC_Init+0x1ec>)
 800795c:	7819      	ldrb	r1, [r3, #0]
 800795e:	2308      	movs	r3, #8
 8007960:	2203      	movs	r2, #3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f002 faf9 	bl	8009f5a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007968:	4b25      	ldr	r3, [pc, #148]	@ (8007a00 <USBD_CDC_Init+0x1ec>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	f003 020f 	and.w	r2, r3, #15
 8007970:	6879      	ldr	r1, [r7, #4]
 8007972:	4613      	mov	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	440b      	add	r3, r1
 800797c:	3323      	adds	r3, #35	@ 0x23
 800797e:	2201      	movs	r2, #1
 8007980:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	33b0      	adds	r3, #176	@ 0xb0
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80079b8:	2302      	movs	r3, #2
 80079ba:	e018      	b.n	80079ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7c1b      	ldrb	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10a      	bne.n	80079da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079c4:	4b0d      	ldr	r3, [pc, #52]	@ (80079fc <USBD_CDC_Init+0x1e8>)
 80079c6:	7819      	ldrb	r1, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f002 fbb0 	bl	800a138 <USBD_LL_PrepareReceive>
 80079d8:	e008      	b.n	80079ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079da:	4b08      	ldr	r3, [pc, #32]	@ (80079fc <USBD_CDC_Init+0x1e8>)
 80079dc:	7819      	ldrb	r1, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079e4:	2340      	movs	r3, #64	@ 0x40
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f002 fba6 	bl	800a138 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20000093 	.word	0x20000093
 80079fc:	20000094 	.word	0x20000094
 8007a00:	20000095 	.word	0x20000095

08007a04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007a10:	4b3a      	ldr	r3, [pc, #232]	@ (8007afc <USBD_CDC_DeInit+0xf8>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f002 fac5 	bl	8009fa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007a1c:	4b37      	ldr	r3, [pc, #220]	@ (8007afc <USBD_CDC_DeInit+0xf8>)
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	f003 020f 	and.w	r2, r3, #15
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	440b      	add	r3, r1
 8007a30:	3323      	adds	r3, #35	@ 0x23
 8007a32:	2200      	movs	r2, #0
 8007a34:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007a36:	4b32      	ldr	r3, [pc, #200]	@ (8007b00 <USBD_CDC_DeInit+0xfc>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f002 fab2 	bl	8009fa6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007a42:	4b2f      	ldr	r3, [pc, #188]	@ (8007b00 <USBD_CDC_DeInit+0xfc>)
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	f003 020f 	and.w	r2, r3, #15
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	440b      	add	r3, r1
 8007a56:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007a5e:	4b29      	ldr	r3, [pc, #164]	@ (8007b04 <USBD_CDC_DeInit+0x100>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f002 fa9e 	bl	8009fa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007a6a:	4b26      	ldr	r3, [pc, #152]	@ (8007b04 <USBD_CDC_DeInit+0x100>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	f003 020f 	and.w	r2, r3, #15
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	3323      	adds	r3, #35	@ 0x23
 8007a80:	2200      	movs	r2, #0
 8007a82:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007a84:	4b1f      	ldr	r3, [pc, #124]	@ (8007b04 <USBD_CDC_DeInit+0x100>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	f003 020f 	and.w	r2, r3, #15
 8007a8c:	6879      	ldr	r1, [r7, #4]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	440b      	add	r3, r1
 8007a98:	331c      	adds	r3, #28
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	32b0      	adds	r2, #176	@ 0xb0
 8007aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01f      	beq.n	8007af0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	33b0      	adds	r3, #176	@ 0xb0
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	32b0      	adds	r2, #176	@ 0xb0
 8007ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f002 fb72 	bl	800a1bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	32b0      	adds	r2, #176	@ 0xb0
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20000093 	.word	0x20000093
 8007b00:	20000094 	.word	0x20000094
 8007b04:	20000095 	.word	0x20000095

08007b08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	32b0      	adds	r2, #176	@ 0xb0
 8007b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e0bf      	b.n	8007cb8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d050      	beq.n	8007be6 <USBD_CDC_Setup+0xde>
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	f040 80af 	bne.w	8007ca8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	88db      	ldrh	r3, [r3, #6]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d03a      	beq.n	8007bc8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	b25b      	sxtb	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	da1b      	bge.n	8007b94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	33b0      	adds	r3, #176	@ 0xb0
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007b72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	88d2      	ldrh	r2, [r2, #6]
 8007b78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	88db      	ldrh	r3, [r3, #6]
 8007b7e:	2b07      	cmp	r3, #7
 8007b80:	bf28      	it	cs
 8007b82:	2307      	movcs	r3, #7
 8007b84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	89fa      	ldrh	r2, [r7, #14]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 fda9 	bl	80096e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007b92:	e090      	b.n	8007cb6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	785a      	ldrb	r2, [r3, #1]
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	88db      	ldrh	r3, [r3, #6]
 8007ba2:	2b3f      	cmp	r3, #63	@ 0x3f
 8007ba4:	d803      	bhi.n	8007bae <USBD_CDC_Setup+0xa6>
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	88db      	ldrh	r3, [r3, #6]
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	e000      	b.n	8007bb0 <USBD_CDC_Setup+0xa8>
 8007bae:	2240      	movs	r2, #64	@ 0x40
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007bb6:	6939      	ldr	r1, [r7, #16]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 fdbe 	bl	8009742 <USBD_CtlPrepareRx>
      break;
 8007bc6:	e076      	b.n	8007cb6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	33b0      	adds	r3, #176	@ 0xb0
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	7850      	ldrb	r0, [r2, #1]
 8007bde:	2200      	movs	r2, #0
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	4798      	blx	r3
      break;
 8007be4:	e067      	b.n	8007cb6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	785b      	ldrb	r3, [r3, #1]
 8007bea:	2b0b      	cmp	r3, #11
 8007bec:	d851      	bhi.n	8007c92 <USBD_CDC_Setup+0x18a>
 8007bee:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf4 <USBD_CDC_Setup+0xec>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c25 	.word	0x08007c25
 8007bf8:	08007ca1 	.word	0x08007ca1
 8007bfc:	08007c93 	.word	0x08007c93
 8007c00:	08007c93 	.word	0x08007c93
 8007c04:	08007c93 	.word	0x08007c93
 8007c08:	08007c93 	.word	0x08007c93
 8007c0c:	08007c93 	.word	0x08007c93
 8007c10:	08007c93 	.word	0x08007c93
 8007c14:	08007c93 	.word	0x08007c93
 8007c18:	08007c93 	.word	0x08007c93
 8007c1c:	08007c4f 	.word	0x08007c4f
 8007c20:	08007c79 	.word	0x08007c79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d107      	bne.n	8007c40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c30:	f107 030a 	add.w	r3, r7, #10
 8007c34:	2202      	movs	r2, #2
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 fd53 	bl	80096e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c3e:	e032      	b.n	8007ca6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f001 fcd1 	bl	80095ea <USBD_CtlError>
            ret = USBD_FAIL;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	75fb      	strb	r3, [r7, #23]
          break;
 8007c4c:	e02b      	b.n	8007ca6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d107      	bne.n	8007c6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c5a:	f107 030d 	add.w	r3, r7, #13
 8007c5e:	2201      	movs	r2, #1
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f001 fd3e 	bl	80096e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c68:	e01d      	b.n	8007ca6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 fcbc 	bl	80095ea <USBD_CtlError>
            ret = USBD_FAIL;
 8007c72:	2303      	movs	r3, #3
 8007c74:	75fb      	strb	r3, [r7, #23]
          break;
 8007c76:	e016      	b.n	8007ca6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	d00f      	beq.n	8007ca4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 fcaf 	bl	80095ea <USBD_CtlError>
            ret = USBD_FAIL;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c90:	e008      	b.n	8007ca4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 fca8 	bl	80095ea <USBD_CtlError>
          ret = USBD_FAIL;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c9e:	e002      	b.n	8007ca6 <USBD_CDC_Setup+0x19e>
          break;
 8007ca0:	bf00      	nop
 8007ca2:	e008      	b.n	8007cb6 <USBD_CDC_Setup+0x1ae>
          break;
 8007ca4:	bf00      	nop
      }
      break;
 8007ca6:	e006      	b.n	8007cb6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 fc9d 	bl	80095ea <USBD_CtlError>
      ret = USBD_FAIL;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb4:	bf00      	nop
  }

  return (uint8_t)ret;
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	32b0      	adds	r2, #176	@ 0xb0
 8007cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d101      	bne.n	8007cea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e065      	b.n	8007db6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	32b0      	adds	r2, #176	@ 0xb0
 8007cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	f003 020f 	and.w	r2, r3, #15
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	3314      	adds	r3, #20
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d02f      	beq.n	8007d74 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007d14:	78fb      	ldrb	r3, [r7, #3]
 8007d16:	f003 020f 	and.w	r2, r3, #15
 8007d1a:	6879      	ldr	r1, [r7, #4]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	440b      	add	r3, r1
 8007d26:	3314      	adds	r3, #20
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	f003 010f 	and.w	r1, r3, #15
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	460b      	mov	r3, r1
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	440b      	add	r3, r1
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4403      	add	r3, r0
 8007d3c:	331c      	adds	r3, #28
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d44:	fb01 f303 	mul.w	r3, r1, r3
 8007d48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d112      	bne.n	8007d74 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007d4e:	78fb      	ldrb	r3, [r7, #3]
 8007d50:	f003 020f 	and.w	r2, r3, #15
 8007d54:	6879      	ldr	r1, [r7, #4]
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	440b      	add	r3, r1
 8007d60:	3314      	adds	r3, #20
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d66:	78f9      	ldrb	r1, [r7, #3]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f002 f9c2 	bl	800a0f6 <USBD_LL_Transmit>
 8007d72:	e01f      	b.n	8007db4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	33b0      	adds	r3, #176	@ 0xb0
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d010      	beq.n	8007db4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	33b0      	adds	r3, #176	@ 0xb0
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	32b0      	adds	r2, #176	@ 0xb0
 8007dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	32b0      	adds	r2, #176	@ 0xb0
 8007de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e01a      	b.n	8007e26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f002 f9c0 	bl	800a17a <USBD_LL_GetRxDataSize>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	33b0      	adds	r3, #176	@ 0xb0
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007e20:	4611      	mov	r1, r2
 8007e22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	32b0      	adds	r2, #176	@ 0xb0
 8007e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e024      	b.n	8007e9a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	33b0      	adds	r3, #176	@ 0xb0
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d019      	beq.n	8007e98 <USBD_CDC_EP0_RxReady+0x6a>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007e6a:	2bff      	cmp	r3, #255	@ 0xff
 8007e6c:	d014      	beq.n	8007e98 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	33b0      	adds	r3, #176	@ 0xb0
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007e86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	22ff      	movs	r2, #255	@ 0xff
 8007e94:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007eac:	2182      	movs	r1, #130	@ 0x82
 8007eae:	4818      	ldr	r0, [pc, #96]	@ (8007f10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007eb0:	f000 fd62 	bl	8008978 <USBD_GetEpDesc>
 8007eb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	4815      	ldr	r0, [pc, #84]	@ (8007f10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007eba:	f000 fd5d 	bl	8008978 <USBD_GetEpDesc>
 8007ebe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ec0:	2181      	movs	r1, #129	@ 0x81
 8007ec2:	4813      	ldr	r0, [pc, #76]	@ (8007f10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ec4:	f000 fd58 	bl	8008978 <USBD_GetEpDesc>
 8007ec8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2210      	movs	r2, #16
 8007ed4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d006      	beq.n	8007eea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ee4:	711a      	strb	r2, [r3, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d006      	beq.n	8007efe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ef8:	711a      	strb	r2, [r3, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2243      	movs	r2, #67	@ 0x43
 8007f02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f04:	4b02      	ldr	r3, [pc, #8]	@ (8007f10 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000050 	.word	0x20000050

08007f14 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f1c:	2182      	movs	r1, #130	@ 0x82
 8007f1e:	4818      	ldr	r0, [pc, #96]	@ (8007f80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f20:	f000 fd2a 	bl	8008978 <USBD_GetEpDesc>
 8007f24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f26:	2101      	movs	r1, #1
 8007f28:	4815      	ldr	r0, [pc, #84]	@ (8007f80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f2a:	f000 fd25 	bl	8008978 <USBD_GetEpDesc>
 8007f2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f30:	2181      	movs	r1, #129	@ 0x81
 8007f32:	4813      	ldr	r0, [pc, #76]	@ (8007f80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f34:	f000 fd20 	bl	8008978 <USBD_GetEpDesc>
 8007f38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	2210      	movs	r2, #16
 8007f44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d006      	beq.n	8007f5a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	711a      	strb	r2, [r3, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f042 0202 	orr.w	r2, r2, #2
 8007f58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d006      	beq.n	8007f6e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	711a      	strb	r2, [r3, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f042 0202 	orr.w	r2, r2, #2
 8007f6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2243      	movs	r2, #67	@ 0x43
 8007f72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f74:	4b02      	ldr	r3, [pc, #8]	@ (8007f80 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20000050 	.word	0x20000050

08007f84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f8c:	2182      	movs	r1, #130	@ 0x82
 8007f8e:	4818      	ldr	r0, [pc, #96]	@ (8007ff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f90:	f000 fcf2 	bl	8008978 <USBD_GetEpDesc>
 8007f94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f96:	2101      	movs	r1, #1
 8007f98:	4815      	ldr	r0, [pc, #84]	@ (8007ff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f9a:	f000 fced 	bl	8008978 <USBD_GetEpDesc>
 8007f9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007fa0:	2181      	movs	r1, #129	@ 0x81
 8007fa2:	4813      	ldr	r0, [pc, #76]	@ (8007ff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007fa4:	f000 fce8 	bl	8008978 <USBD_GetEpDesc>
 8007fa8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	2210      	movs	r2, #16
 8007fb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d006      	beq.n	8007fca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fc4:	711a      	strb	r2, [r3, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d006      	beq.n	8007fde <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fd8:	711a      	strb	r2, [r3, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2243      	movs	r2, #67	@ 0x43
 8007fe2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fe4:	4b02      	ldr	r3, [pc, #8]	@ (8007ff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000050 	.word	0x20000050

08007ff4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	220a      	movs	r2, #10
 8008000:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008002:	4b03      	ldr	r3, [pc, #12]	@ (8008010 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008004:	4618      	mov	r0, r3
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	2000000c 	.word	0x2000000c

08008014 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008024:	2303      	movs	r3, #3
 8008026:	e009      	b.n	800803c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	33b0      	adds	r3, #176	@ 0xb0
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	32b0      	adds	r2, #176	@ 0xb0
 800805e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008062:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800806a:	2303      	movs	r3, #3
 800806c:	e008      	b.n	8008080 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	371c      	adds	r7, #28
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	32b0      	adds	r2, #176	@ 0xb0
 80080a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e004      	b.n	80080ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
	...

080080c8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	32b0      	adds	r2, #176	@ 0xb0
 80080da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080de:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80080e0:	2301      	movs	r3, #1
 80080e2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e025      	b.n	800813a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d11f      	bne.n	8008138 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008100:	4b10      	ldr	r3, [pc, #64]	@ (8008144 <USBD_CDC_TransmitPacket+0x7c>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	f003 020f 	and.w	r2, r3, #15
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4613      	mov	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4403      	add	r3, r0
 800811a:	3314      	adds	r3, #20
 800811c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800811e:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <USBD_CDC_TransmitPacket+0x7c>)
 8008120:	7819      	ldrb	r1, [r3, #0]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 ffe1 	bl	800a0f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20000093 	.word	0x20000093

08008148 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	32b0      	adds	r2, #176	@ 0xb0
 800815a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	32b0      	adds	r2, #176	@ 0xb0
 800816a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008172:	2303      	movs	r3, #3
 8008174:	e018      	b.n	80081a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	7c1b      	ldrb	r3, [r3, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10a      	bne.n	8008194 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800817e:	4b0c      	ldr	r3, [pc, #48]	@ (80081b0 <USBD_CDC_ReceivePacket+0x68>)
 8008180:	7819      	ldrb	r1, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 ffd3 	bl	800a138 <USBD_LL_PrepareReceive>
 8008192:	e008      	b.n	80081a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008194:	4b06      	ldr	r3, [pc, #24]	@ (80081b0 <USBD_CDC_ReceivePacket+0x68>)
 8008196:	7819      	ldrb	r1, [r3, #0]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800819e:	2340      	movs	r3, #64	@ 0x40
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 ffc9 	bl	800a138 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20000094 	.word	0x20000094

080081b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	4613      	mov	r3, r2
 80081c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e01f      	b.n	800820c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	79fa      	ldrb	r2, [r7, #7]
 80081fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f001 fe43 	bl	8009e8c <USBD_LL_Init>
 8008206:	4603      	mov	r3, r0
 8008208:	75fb      	strb	r3, [r7, #23]

  return ret;
 800820a:	7dfb      	ldrb	r3, [r7, #23]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008228:	2303      	movs	r3, #3
 800822a:	e025      	b.n	8008278 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	32ae      	adds	r2, #174	@ 0xae
 800823e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00f      	beq.n	8008268 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	32ae      	adds	r2, #174	@ 0xae
 8008252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008258:	f107 020e 	add.w	r2, r7, #14
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
 8008260:	4602      	mov	r2, r0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 fe4b 	bl	8009f24 <USBD_LL_Start>
 800828e:	4603      	mov	r3, r0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	460b      	mov	r3, r1
 80082b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d009      	beq.n	80082dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	78fa      	ldrb	r2, [r7, #3]
 80082d2:	4611      	mov	r1, r2
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	460b      	mov	r3, r1
 80082f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	78fa      	ldrb	r2, [r7, #3]
 8008300:	4611      	mov	r1, r2
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800830c:	2303      	movs	r3, #3
 800830e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	4618      	mov	r0, r3
 800832e:	f001 f922 	bl	8009576 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008340:	461a      	mov	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800834e:	f003 031f 	and.w	r3, r3, #31
 8008352:	2b02      	cmp	r3, #2
 8008354:	d01a      	beq.n	800838c <USBD_LL_SetupStage+0x72>
 8008356:	2b02      	cmp	r3, #2
 8008358:	d822      	bhi.n	80083a0 <USBD_LL_SetupStage+0x86>
 800835a:	2b00      	cmp	r3, #0
 800835c:	d002      	beq.n	8008364 <USBD_LL_SetupStage+0x4a>
 800835e:	2b01      	cmp	r3, #1
 8008360:	d00a      	beq.n	8008378 <USBD_LL_SetupStage+0x5e>
 8008362:	e01d      	b.n	80083a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fb77 	bl	8008a60 <USBD_StdDevReq>
 8008372:	4603      	mov	r3, r0
 8008374:	73fb      	strb	r3, [r7, #15]
      break;
 8008376:	e020      	b.n	80083ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800837e:	4619      	mov	r1, r3
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fbdf 	bl	8008b44 <USBD_StdItfReq>
 8008386:	4603      	mov	r3, r0
 8008388:	73fb      	strb	r3, [r7, #15]
      break;
 800838a:	e016      	b.n	80083ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fc41 	bl	8008c1c <USBD_StdEPReq>
 800839a:	4603      	mov	r3, r0
 800839c:	73fb      	strb	r3, [r7, #15]
      break;
 800839e:	e00c      	b.n	80083ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 fe18 	bl	8009fe4 <USBD_LL_StallEP>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]
      break;
 80083b8:	bf00      	nop
  }

  return ret;
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	460b      	mov	r3, r1
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80083d6:	7afb      	ldrb	r3, [r7, #11]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d177      	bne.n	80084cc <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80083e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	f040 80a1 	bne.w	8008532 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	8992      	ldrh	r2, [r2, #12]
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d91c      	bls.n	8008436 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	8992      	ldrh	r2, [r2, #12]
 8008404:	1a9a      	subs	r2, r3, r2
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	8992      	ldrh	r2, [r2, #12]
 8008412:	441a      	add	r2, r3
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	6919      	ldr	r1, [r3, #16]
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	899b      	ldrh	r3, [r3, #12]
 8008420:	461a      	mov	r2, r3
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	4293      	cmp	r3, r2
 8008428:	bf38      	it	cc
 800842a:	4613      	movcc	r3, r2
 800842c:	461a      	mov	r2, r3
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f001 f9a8 	bl	8009784 <USBD_CtlContinueRx>
 8008434:	e07d      	b.n	8008532 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800843c:	f003 031f 	and.w	r3, r3, #31
 8008440:	2b02      	cmp	r3, #2
 8008442:	d014      	beq.n	800846e <USBD_LL_DataOutStage+0xaa>
 8008444:	2b02      	cmp	r3, #2
 8008446:	d81d      	bhi.n	8008484 <USBD_LL_DataOutStage+0xc0>
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <USBD_LL_DataOutStage+0x8e>
 800844c:	2b01      	cmp	r3, #1
 800844e:	d003      	beq.n	8008458 <USBD_LL_DataOutStage+0x94>
 8008450:	e018      	b.n	8008484 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	75bb      	strb	r3, [r7, #22]
            break;
 8008456:	e018      	b.n	800848a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800845e:	b2db      	uxtb	r3, r3
 8008460:	4619      	mov	r1, r3
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 fa6e 	bl	8008944 <USBD_CoreFindIF>
 8008468:	4603      	mov	r3, r0
 800846a:	75bb      	strb	r3, [r7, #22]
            break;
 800846c:	e00d      	b.n	800848a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008474:	b2db      	uxtb	r3, r3
 8008476:	4619      	mov	r1, r3
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 fa70 	bl	800895e <USBD_CoreFindEP>
 800847e:	4603      	mov	r3, r0
 8008480:	75bb      	strb	r3, [r7, #22]
            break;
 8008482:	e002      	b.n	800848a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008484:	2300      	movs	r3, #0
 8008486:	75bb      	strb	r3, [r7, #22]
            break;
 8008488:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800848a:	7dbb      	ldrb	r3, [r7, #22]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d119      	bne.n	80084c4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b03      	cmp	r3, #3
 800849a:	d113      	bne.n	80084c4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800849c:	7dba      	ldrb	r2, [r7, #22]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	32ae      	adds	r2, #174	@ 0xae
 80084a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00b      	beq.n	80084c4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80084ac:	7dba      	ldrb	r2, [r7, #22]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80084b4:	7dba      	ldrb	r2, [r7, #22]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	32ae      	adds	r2, #174	@ 0xae
 80084ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f001 f96e 	bl	80097a6 <USBD_CtlSendStatus>
 80084ca:	e032      	b.n	8008532 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80084cc:	7afb      	ldrb	r3, [r7, #11]
 80084ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	4619      	mov	r1, r3
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f000 fa41 	bl	800895e <USBD_CoreFindEP>
 80084dc:	4603      	mov	r3, r0
 80084de:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084e0:	7dbb      	ldrb	r3, [r7, #22]
 80084e2:	2bff      	cmp	r3, #255	@ 0xff
 80084e4:	d025      	beq.n	8008532 <USBD_LL_DataOutStage+0x16e>
 80084e6:	7dbb      	ldrb	r3, [r7, #22]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d122      	bne.n	8008532 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b03      	cmp	r3, #3
 80084f6:	d117      	bne.n	8008528 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80084f8:	7dba      	ldrb	r2, [r7, #22]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	32ae      	adds	r2, #174	@ 0xae
 80084fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00f      	beq.n	8008528 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008508:	7dba      	ldrb	r2, [r7, #22]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008510:	7dba      	ldrb	r2, [r7, #22]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	32ae      	adds	r2, #174	@ 0xae
 8008516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	7afa      	ldrb	r2, [r7, #11]
 800851e:	4611      	mov	r1, r2
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	4798      	blx	r3
 8008524:	4603      	mov	r3, r0
 8008526:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	e000      	b.n	8008534 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	460b      	mov	r3, r1
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800854a:	7afb      	ldrb	r3, [r7, #11]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d178      	bne.n	8008642 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3314      	adds	r3, #20
 8008554:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800855c:	2b02      	cmp	r3, #2
 800855e:	d163      	bne.n	8008628 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	8992      	ldrh	r2, [r2, #12]
 8008568:	4293      	cmp	r3, r2
 800856a:	d91c      	bls.n	80085a6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	8992      	ldrh	r2, [r2, #12]
 8008574:	1a9a      	subs	r2, r3, r2
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	8992      	ldrh	r2, [r2, #12]
 8008582:	441a      	add	r2, r3
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	6919      	ldr	r1, [r3, #16]
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	461a      	mov	r2, r3
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f001 f8c4 	bl	8009720 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008598:	2300      	movs	r3, #0
 800859a:	2200      	movs	r2, #0
 800859c:	2100      	movs	r1, #0
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f001 fdca 	bl	800a138 <USBD_LL_PrepareReceive>
 80085a4:	e040      	b.n	8008628 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	899b      	ldrh	r3, [r3, #12]
 80085aa:	461a      	mov	r2, r3
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d11c      	bne.n	80085ee <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085bc:	4293      	cmp	r3, r2
 80085be:	d316      	bcc.n	80085ee <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d20f      	bcs.n	80085ee <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085ce:	2200      	movs	r2, #0
 80085d0:	2100      	movs	r1, #0
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f001 f8a4 	bl	8009720 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085e0:	2300      	movs	r3, #0
 80085e2:	2200      	movs	r2, #0
 80085e4:	2100      	movs	r1, #0
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f001 fda6 	bl	800a138 <USBD_LL_PrepareReceive>
 80085ec:	e01c      	b.n	8008628 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d10f      	bne.n	800861a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d009      	beq.n	800861a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800861a:	2180      	movs	r1, #128	@ 0x80
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f001 fce1 	bl	8009fe4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f001 f8d2 	bl	80097cc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d03a      	beq.n	80086a8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7ff fe30 	bl	8008298 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008640:	e032      	b.n	80086a8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008642:	7afb      	ldrb	r3, [r7, #11]
 8008644:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008648:	b2db      	uxtb	r3, r3
 800864a:	4619      	mov	r1, r3
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 f986 	bl	800895e <USBD_CoreFindEP>
 8008652:	4603      	mov	r3, r0
 8008654:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	2bff      	cmp	r3, #255	@ 0xff
 800865a:	d025      	beq.n	80086a8 <USBD_LL_DataInStage+0x16c>
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d122      	bne.n	80086a8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b03      	cmp	r3, #3
 800866c:	d11c      	bne.n	80086a8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800866e:	7dfa      	ldrb	r2, [r7, #23]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	32ae      	adds	r2, #174	@ 0xae
 8008674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d014      	beq.n	80086a8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800867e:	7dfa      	ldrb	r2, [r7, #23]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008686:	7dfa      	ldrb	r2, [r7, #23]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	32ae      	adds	r2, #174	@ 0xae
 800868c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	7afa      	ldrb	r2, [r7, #11]
 8008694:	4611      	mov	r1, r2
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	4798      	blx	r3
 800869a:	4603      	mov	r3, r0
 800869c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800869e:	7dbb      	ldrb	r3, [r7, #22]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80086a4:	7dbb      	ldrb	r3, [r7, #22]
 80086a6:	e000      	b.n	80086aa <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d014      	beq.n	8008718 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00e      	beq.n	8008718 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	6852      	ldr	r2, [r2, #4]
 8008706:	b2d2      	uxtb	r2, r2
 8008708:	4611      	mov	r1, r2
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	4798      	blx	r3
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008714:	2303      	movs	r3, #3
 8008716:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008718:	2340      	movs	r3, #64	@ 0x40
 800871a:	2200      	movs	r2, #0
 800871c:	2100      	movs	r1, #0
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f001 fc1b 	bl	8009f5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2240      	movs	r2, #64	@ 0x40
 8008730:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008734:	2340      	movs	r3, #64	@ 0x40
 8008736:	2200      	movs	r2, #0
 8008738:	2180      	movs	r1, #128	@ 0x80
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 fc0d 	bl	8009f5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2240      	movs	r2, #64	@ 0x40
 800874c:	841a      	strh	r2, [r3, #32]

  return ret;
 800874e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	78fa      	ldrb	r2, [r7, #3]
 8008768:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b04      	cmp	r3, #4
 800878a:	d006      	beq.n	800879a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008792:	b2da      	uxtb	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2204      	movs	r2, #4
 800879e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	d106      	bne.n	80087d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d110      	bne.n	8008816 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00b      	beq.n	8008816 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d005      	beq.n	8008816 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	32ae      	adds	r2, #174	@ 0xae
 8008836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800883e:	2303      	movs	r3, #3
 8008840:	e01c      	b.n	800887c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b03      	cmp	r3, #3
 800884c:	d115      	bne.n	800887a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	32ae      	adds	r2, #174	@ 0xae
 8008858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	32ae      	adds	r2, #174	@ 0xae
 800886c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	78fa      	ldrb	r2, [r7, #3]
 8008874:	4611      	mov	r1, r2
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	460b      	mov	r3, r1
 800888e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	32ae      	adds	r2, #174	@ 0xae
 800889a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e01c      	b.n	80088e0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d115      	bne.n	80088de <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	32ae      	adds	r2, #174	@ 0xae
 80088bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00b      	beq.n	80088de <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	32ae      	adds	r2, #174	@ 0xae
 80088d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d6:	78fa      	ldrb	r2, [r7, #3]
 80088d8:	4611      	mov	r1, r2
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00e      	beq.n	800893a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	6852      	ldr	r2, [r2, #4]
 8008928:	b2d2      	uxtb	r2, r2
 800892a:	4611      	mov	r1, r2
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	4798      	blx	r3
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008936:	2303      	movs	r3, #3
 8008938:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800893a:	7bfb      	ldrb	r3, [r7, #15]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008950:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800896a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800898c:	2300      	movs	r3, #0
 800898e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	885b      	ldrh	r3, [r3, #2]
 8008994:	b29b      	uxth	r3, r3
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	7812      	ldrb	r2, [r2, #0]
 800899a:	4293      	cmp	r3, r2
 800899c:	d91f      	bls.n	80089de <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80089a4:	e013      	b.n	80089ce <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80089a6:	f107 030a 	add.w	r3, r7, #10
 80089aa:	4619      	mov	r1, r3
 80089ac:	6978      	ldr	r0, [r7, #20]
 80089ae:	f000 f81b 	bl	80089e8 <USBD_GetNextDesc>
 80089b2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	785b      	ldrb	r3, [r3, #1]
 80089b8:	2b05      	cmp	r3, #5
 80089ba:	d108      	bne.n	80089ce <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	789b      	ldrb	r3, [r3, #2]
 80089c4:	78fa      	ldrb	r2, [r7, #3]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d008      	beq.n	80089dc <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	885b      	ldrh	r3, [r3, #2]
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	897b      	ldrh	r3, [r7, #10]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d8e5      	bhi.n	80089a6 <USBD_GetEpDesc+0x2e>
 80089da:	e000      	b.n	80089de <USBD_GetEpDesc+0x66>
          break;
 80089dc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80089de:	693b      	ldr	r3, [r7, #16]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	881b      	ldrh	r3, [r3, #0]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	7812      	ldrb	r2, [r2, #0]
 80089fe:	4413      	add	r3, r2
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4413      	add	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a12:	68fb      	ldr	r3, [r7, #12]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	3301      	adds	r3, #1
 8008a36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008a42:	021b      	lsls	r3, r3, #8
 8008a44:	b21a      	sxth	r2, r3
 8008a46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	b21b      	sxth	r3, r3
 8008a4e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a50:	89fb      	ldrh	r3, [r7, #14]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	371c      	adds	r7, #28
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
	...

08008a60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a76:	2b40      	cmp	r3, #64	@ 0x40
 8008a78:	d005      	beq.n	8008a86 <USBD_StdDevReq+0x26>
 8008a7a:	2b40      	cmp	r3, #64	@ 0x40
 8008a7c:	d857      	bhi.n	8008b2e <USBD_StdDevReq+0xce>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00f      	beq.n	8008aa2 <USBD_StdDevReq+0x42>
 8008a82:	2b20      	cmp	r3, #32
 8008a84:	d153      	bne.n	8008b2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	32ae      	adds	r2, #174	@ 0xae
 8008a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	4798      	blx	r3
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa0:	e04a      	b.n	8008b38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	2b09      	cmp	r3, #9
 8008aa8:	d83b      	bhi.n	8008b22 <USBD_StdDevReq+0xc2>
 8008aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab0 <USBD_StdDevReq+0x50>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008b05 	.word	0x08008b05
 8008ab4:	08008b19 	.word	0x08008b19
 8008ab8:	08008b23 	.word	0x08008b23
 8008abc:	08008b0f 	.word	0x08008b0f
 8008ac0:	08008b23 	.word	0x08008b23
 8008ac4:	08008ae3 	.word	0x08008ae3
 8008ac8:	08008ad9 	.word	0x08008ad9
 8008acc:	08008b23 	.word	0x08008b23
 8008ad0:	08008afb 	.word	0x08008afb
 8008ad4:	08008aed 	.word	0x08008aed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa3e 	bl	8008f5c <USBD_GetDescriptor>
          break;
 8008ae0:	e024      	b.n	8008b2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fba3 	bl	8009230 <USBD_SetAddress>
          break;
 8008aea:	e01f      	b.n	8008b2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fbe2 	bl	80092b8 <USBD_SetConfig>
 8008af4:	4603      	mov	r3, r0
 8008af6:	73fb      	strb	r3, [r7, #15]
          break;
 8008af8:	e018      	b.n	8008b2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fc85 	bl	800940c <USBD_GetConfig>
          break;
 8008b02:	e013      	b.n	8008b2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fcb6 	bl	8009478 <USBD_GetStatus>
          break;
 8008b0c:	e00e      	b.n	8008b2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fce5 	bl	80094e0 <USBD_SetFeature>
          break;
 8008b16:	e009      	b.n	8008b2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fd09 	bl	8009532 <USBD_ClrFeature>
          break;
 8008b20:	e004      	b.n	8008b2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fd60 	bl	80095ea <USBD_CtlError>
          break;
 8008b2a:	bf00      	nop
      }
      break;
 8008b2c:	e004      	b.n	8008b38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fd5a 	bl	80095ea <USBD_CtlError>
      break;
 8008b36:	bf00      	nop
  }

  return ret;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop

08008b44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b5a:	2b40      	cmp	r3, #64	@ 0x40
 8008b5c:	d005      	beq.n	8008b6a <USBD_StdItfReq+0x26>
 8008b5e:	2b40      	cmp	r3, #64	@ 0x40
 8008b60:	d852      	bhi.n	8008c08 <USBD_StdItfReq+0xc4>
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <USBD_StdItfReq+0x26>
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	d14e      	bne.n	8008c08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	3b01      	subs	r3, #1
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d840      	bhi.n	8008bfa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	889b      	ldrh	r3, [r3, #4]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d836      	bhi.n	8008bf0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	889b      	ldrh	r3, [r3, #4]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff feda 	bl	8008944 <USBD_CoreFindIF>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	2bff      	cmp	r3, #255	@ 0xff
 8008b98:	d01d      	beq.n	8008bd6 <USBD_StdItfReq+0x92>
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d11a      	bne.n	8008bd6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ba0:	7bba      	ldrb	r2, [r7, #14]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	32ae      	adds	r2, #174	@ 0xae
 8008ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00f      	beq.n	8008bd0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008bb0:	7bba      	ldrb	r2, [r7, #14]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008bb8:	7bba      	ldrb	r2, [r7, #14]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	32ae      	adds	r2, #174	@ 0xae
 8008bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	4798      	blx	r3
 8008bca:	4603      	mov	r3, r0
 8008bcc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008bce:	e004      	b.n	8008bda <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008bd4:	e001      	b.n	8008bda <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	88db      	ldrh	r3, [r3, #6]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d110      	bne.n	8008c04 <USBD_StdItfReq+0xc0>
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10d      	bne.n	8008c04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fddc 	bl	80097a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008bee:	e009      	b.n	8008c04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fcf9 	bl	80095ea <USBD_CtlError>
          break;
 8008bf8:	e004      	b.n	8008c04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fcf4 	bl	80095ea <USBD_CtlError>
          break;
 8008c02:	e000      	b.n	8008c06 <USBD_StdItfReq+0xc2>
          break;
 8008c04:	bf00      	nop
      }
      break;
 8008c06:	e004      	b.n	8008c12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fced 	bl	80095ea <USBD_CtlError>
      break;
 8008c10:	bf00      	nop
  }

  return ret;
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	889b      	ldrh	r3, [r3, #4]
 8008c2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c38:	2b40      	cmp	r3, #64	@ 0x40
 8008c3a:	d007      	beq.n	8008c4c <USBD_StdEPReq+0x30>
 8008c3c:	2b40      	cmp	r3, #64	@ 0x40
 8008c3e:	f200 8181 	bhi.w	8008f44 <USBD_StdEPReq+0x328>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d02a      	beq.n	8008c9c <USBD_StdEPReq+0x80>
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	f040 817c 	bne.w	8008f44 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff fe84 	bl	800895e <USBD_CoreFindEP>
 8008c56:	4603      	mov	r3, r0
 8008c58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c5a:	7b7b      	ldrb	r3, [r7, #13]
 8008c5c:	2bff      	cmp	r3, #255	@ 0xff
 8008c5e:	f000 8176 	beq.w	8008f4e <USBD_StdEPReq+0x332>
 8008c62:	7b7b      	ldrb	r3, [r7, #13]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f040 8172 	bne.w	8008f4e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008c6a:	7b7a      	ldrb	r2, [r7, #13]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008c72:	7b7a      	ldrb	r2, [r7, #13]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	32ae      	adds	r2, #174	@ 0xae
 8008c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 8165 	beq.w	8008f4e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008c84:	7b7a      	ldrb	r2, [r7, #13]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	32ae      	adds	r2, #174	@ 0xae
 8008c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	4798      	blx	r3
 8008c96:	4603      	mov	r3, r0
 8008c98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c9a:	e158      	b.n	8008f4e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	785b      	ldrb	r3, [r3, #1]
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d008      	beq.n	8008cb6 <USBD_StdEPReq+0x9a>
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	f300 8147 	bgt.w	8008f38 <USBD_StdEPReq+0x31c>
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 809b 	beq.w	8008de6 <USBD_StdEPReq+0x1ca>
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d03c      	beq.n	8008d2e <USBD_StdEPReq+0x112>
 8008cb4:	e140      	b.n	8008f38 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d002      	beq.n	8008cc8 <USBD_StdEPReq+0xac>
 8008cc2:	2b03      	cmp	r3, #3
 8008cc4:	d016      	beq.n	8008cf4 <USBD_StdEPReq+0xd8>
 8008cc6:	e02c      	b.n	8008d22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00d      	beq.n	8008cea <USBD_StdEPReq+0xce>
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
 8008cd0:	2b80      	cmp	r3, #128	@ 0x80
 8008cd2:	d00a      	beq.n	8008cea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 f983 	bl	8009fe4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cde:	2180      	movs	r1, #128	@ 0x80
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 f97f 	bl	8009fe4 <USBD_LL_StallEP>
 8008ce6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ce8:	e020      	b.n	8008d2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fc7c 	bl	80095ea <USBD_CtlError>
              break;
 8008cf2:	e01b      	b.n	8008d2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	885b      	ldrh	r3, [r3, #2]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10e      	bne.n	8008d1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00b      	beq.n	8008d1a <USBD_StdEPReq+0xfe>
 8008d02:	7bbb      	ldrb	r3, [r7, #14]
 8008d04:	2b80      	cmp	r3, #128	@ 0x80
 8008d06:	d008      	beq.n	8008d1a <USBD_StdEPReq+0xfe>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	88db      	ldrh	r3, [r3, #6]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d104      	bne.n	8008d1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d10:	7bbb      	ldrb	r3, [r7, #14]
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 f965 	bl	8009fe4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fd43 	bl	80097a6 <USBD_CtlSendStatus>

              break;
 8008d20:	e004      	b.n	8008d2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fc60 	bl	80095ea <USBD_CtlError>
              break;
 8008d2a:	bf00      	nop
          }
          break;
 8008d2c:	e109      	b.n	8008f42 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d002      	beq.n	8008d40 <USBD_StdEPReq+0x124>
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d016      	beq.n	8008d6c <USBD_StdEPReq+0x150>
 8008d3e:	e04b      	b.n	8008dd8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00d      	beq.n	8008d62 <USBD_StdEPReq+0x146>
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
 8008d48:	2b80      	cmp	r3, #128	@ 0x80
 8008d4a:	d00a      	beq.n	8008d62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 f947 	bl	8009fe4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d56:	2180      	movs	r1, #128	@ 0x80
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f001 f943 	bl	8009fe4 <USBD_LL_StallEP>
 8008d5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d60:	e040      	b.n	8008de4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fc40 	bl	80095ea <USBD_CtlError>
              break;
 8008d6a:	e03b      	b.n	8008de4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	885b      	ldrh	r3, [r3, #2]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d136      	bne.n	8008de2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d004      	beq.n	8008d88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 f94d 	bl	800a022 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fd0c 	bl	80097a6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7ff fde3 	bl	800895e <USBD_CoreFindEP>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d9c:	7b7b      	ldrb	r3, [r7, #13]
 8008d9e:	2bff      	cmp	r3, #255	@ 0xff
 8008da0:	d01f      	beq.n	8008de2 <USBD_StdEPReq+0x1c6>
 8008da2:	7b7b      	ldrb	r3, [r7, #13]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d11c      	bne.n	8008de2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008da8:	7b7a      	ldrb	r2, [r7, #13]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008db0:	7b7a      	ldrb	r2, [r7, #13]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	32ae      	adds	r2, #174	@ 0xae
 8008db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d010      	beq.n	8008de2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008dc0:	7b7a      	ldrb	r2, [r7, #13]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	32ae      	adds	r2, #174	@ 0xae
 8008dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	4798      	blx	r3
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008dd6:	e004      	b.n	8008de2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fc05 	bl	80095ea <USBD_CtlError>
              break;
 8008de0:	e000      	b.n	8008de4 <USBD_StdEPReq+0x1c8>
              break;
 8008de2:	bf00      	nop
          }
          break;
 8008de4:	e0ad      	b.n	8008f42 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d002      	beq.n	8008df8 <USBD_StdEPReq+0x1dc>
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d033      	beq.n	8008e5e <USBD_StdEPReq+0x242>
 8008df6:	e099      	b.n	8008f2c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d007      	beq.n	8008e0e <USBD_StdEPReq+0x1f2>
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	2b80      	cmp	r3, #128	@ 0x80
 8008e02:	d004      	beq.n	8008e0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fbef 	bl	80095ea <USBD_CtlError>
                break;
 8008e0c:	e093      	b.n	8008f36 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	da0b      	bge.n	8008e2e <USBD_StdEPReq+0x212>
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	3310      	adds	r3, #16
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	4413      	add	r3, r2
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	e00b      	b.n	8008e46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e34:	4613      	mov	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4413      	add	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	4413      	add	r3, r2
 8008e44:	3304      	adds	r3, #4
 8008e46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	330e      	adds	r3, #14
 8008e52:	2202      	movs	r2, #2
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fc44 	bl	80096e4 <USBD_CtlSendData>
              break;
 8008e5c:	e06b      	b.n	8008f36 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	da11      	bge.n	8008e8a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e66:	7bbb      	ldrb	r3, [r7, #14]
 8008e68:	f003 020f 	and.w	r2, r3, #15
 8008e6c:	6879      	ldr	r1, [r7, #4]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	440b      	add	r3, r1
 8008e78:	3323      	adds	r3, #35	@ 0x23
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d117      	bne.n	8008eb0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fbb1 	bl	80095ea <USBD_CtlError>
                  break;
 8008e88:	e055      	b.n	8008f36 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	f003 020f 	and.w	r2, r3, #15
 8008e90:	6879      	ldr	r1, [r7, #4]
 8008e92:	4613      	mov	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	440b      	add	r3, r1
 8008e9c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d104      	bne.n	8008eb0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fb9e 	bl	80095ea <USBD_CtlError>
                  break;
 8008eae:	e042      	b.n	8008f36 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	da0b      	bge.n	8008ed0 <USBD_StdEPReq+0x2b4>
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	3310      	adds	r3, #16
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	4413      	add	r3, r2
 8008ecc:	3304      	adds	r3, #4
 8008ece:	e00b      	b.n	8008ee8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
 8008ed2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008eea:	7bbb      	ldrb	r3, [r7, #14]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <USBD_StdEPReq+0x2da>
 8008ef0:	7bbb      	ldrb	r3, [r7, #14]
 8008ef2:	2b80      	cmp	r3, #128	@ 0x80
 8008ef4:	d103      	bne.n	8008efe <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	739a      	strb	r2, [r3, #14]
 8008efc:	e00e      	b.n	8008f1c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f001 f8ac 	bl	800a060 <USBD_LL_IsStallEP>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2201      	movs	r2, #1
 8008f12:	739a      	strb	r2, [r3, #14]
 8008f14:	e002      	b.n	8008f1c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	330e      	adds	r3, #14
 8008f20:	2202      	movs	r2, #2
 8008f22:	4619      	mov	r1, r3
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fbdd 	bl	80096e4 <USBD_CtlSendData>
              break;
 8008f2a:	e004      	b.n	8008f36 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fb5b 	bl	80095ea <USBD_CtlError>
              break;
 8008f34:	bf00      	nop
          }
          break;
 8008f36:	e004      	b.n	8008f42 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fb55 	bl	80095ea <USBD_CtlError>
          break;
 8008f40:	bf00      	nop
      }
      break;
 8008f42:	e005      	b.n	8008f50 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fb4f 	bl	80095ea <USBD_CtlError>
      break;
 8008f4c:	e000      	b.n	8008f50 <USBD_StdEPReq+0x334>
      break;
 8008f4e:	bf00      	nop
  }

  return ret;
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
	...

08008f5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	885b      	ldrh	r3, [r3, #2]
 8008f76:	0a1b      	lsrs	r3, r3, #8
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	2b06      	cmp	r3, #6
 8008f7e:	f200 8128 	bhi.w	80091d2 <USBD_GetDescriptor+0x276>
 8008f82:	a201      	add	r2, pc, #4	@ (adr r2, 8008f88 <USBD_GetDescriptor+0x2c>)
 8008f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f88:	08008fa5 	.word	0x08008fa5
 8008f8c:	08008fbd 	.word	0x08008fbd
 8008f90:	08008ffd 	.word	0x08008ffd
 8008f94:	080091d3 	.word	0x080091d3
 8008f98:	080091d3 	.word	0x080091d3
 8008f9c:	08009173 	.word	0x08009173
 8008fa0:	0800919f 	.word	0x0800919f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	7c12      	ldrb	r2, [r2, #16]
 8008fb0:	f107 0108 	add.w	r1, r7, #8
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
 8008fb8:	60f8      	str	r0, [r7, #12]
      break;
 8008fba:	e112      	b.n	80091e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	7c1b      	ldrb	r3, [r3, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10d      	bne.n	8008fe0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fcc:	f107 0208 	add.w	r2, r7, #8
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	4798      	blx	r3
 8008fd4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	2202      	movs	r2, #2
 8008fdc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008fde:	e100      	b.n	80091e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe8:	f107 0208 	add.w	r2, r7, #8
 8008fec:	4610      	mov	r0, r2
 8008fee:	4798      	blx	r3
 8008ff0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	701a      	strb	r2, [r3, #0]
      break;
 8008ffa:	e0f2      	b.n	80091e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	885b      	ldrh	r3, [r3, #2]
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b05      	cmp	r3, #5
 8009004:	f200 80ac 	bhi.w	8009160 <USBD_GetDescriptor+0x204>
 8009008:	a201      	add	r2, pc, #4	@ (adr r2, 8009010 <USBD_GetDescriptor+0xb4>)
 800900a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900e:	bf00      	nop
 8009010:	08009029 	.word	0x08009029
 8009014:	0800905d 	.word	0x0800905d
 8009018:	08009091 	.word	0x08009091
 800901c:	080090c5 	.word	0x080090c5
 8009020:	080090f9 	.word	0x080090f9
 8009024:	0800912d 	.word	0x0800912d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00b      	beq.n	800904c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	7c12      	ldrb	r2, [r2, #16]
 8009040:	f107 0108 	add.w	r1, r7, #8
 8009044:	4610      	mov	r0, r2
 8009046:	4798      	blx	r3
 8009048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800904a:	e091      	b.n	8009170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 facb 	bl	80095ea <USBD_CtlError>
            err++;
 8009054:	7afb      	ldrb	r3, [r7, #11]
 8009056:	3301      	adds	r3, #1
 8009058:	72fb      	strb	r3, [r7, #11]
          break;
 800905a:	e089      	b.n	8009170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00b      	beq.n	8009080 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	7c12      	ldrb	r2, [r2, #16]
 8009074:	f107 0108 	add.w	r1, r7, #8
 8009078:	4610      	mov	r0, r2
 800907a:	4798      	blx	r3
 800907c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800907e:	e077      	b.n	8009170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fab1 	bl	80095ea <USBD_CtlError>
            err++;
 8009088:	7afb      	ldrb	r3, [r7, #11]
 800908a:	3301      	adds	r3, #1
 800908c:	72fb      	strb	r3, [r7, #11]
          break;
 800908e:	e06f      	b.n	8009170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00b      	beq.n	80090b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	7c12      	ldrb	r2, [r2, #16]
 80090a8:	f107 0108 	add.w	r1, r7, #8
 80090ac:	4610      	mov	r0, r2
 80090ae:	4798      	blx	r3
 80090b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090b2:	e05d      	b.n	8009170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fa97 	bl	80095ea <USBD_CtlError>
            err++;
 80090bc:	7afb      	ldrb	r3, [r7, #11]
 80090be:	3301      	adds	r3, #1
 80090c0:	72fb      	strb	r3, [r7, #11]
          break;
 80090c2:	e055      	b.n	8009170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00b      	beq.n	80090e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	7c12      	ldrb	r2, [r2, #16]
 80090dc:	f107 0108 	add.w	r1, r7, #8
 80090e0:	4610      	mov	r0, r2
 80090e2:	4798      	blx	r3
 80090e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090e6:	e043      	b.n	8009170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fa7d 	bl	80095ea <USBD_CtlError>
            err++;
 80090f0:	7afb      	ldrb	r3, [r7, #11]
 80090f2:	3301      	adds	r3, #1
 80090f4:	72fb      	strb	r3, [r7, #11]
          break;
 80090f6:	e03b      	b.n	8009170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00b      	beq.n	800911c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	7c12      	ldrb	r2, [r2, #16]
 8009110:	f107 0108 	add.w	r1, r7, #8
 8009114:	4610      	mov	r0, r2
 8009116:	4798      	blx	r3
 8009118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800911a:	e029      	b.n	8009170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fa63 	bl	80095ea <USBD_CtlError>
            err++;
 8009124:	7afb      	ldrb	r3, [r7, #11]
 8009126:	3301      	adds	r3, #1
 8009128:	72fb      	strb	r3, [r7, #11]
          break;
 800912a:	e021      	b.n	8009170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	7c12      	ldrb	r2, [r2, #16]
 8009144:	f107 0108 	add.w	r1, r7, #8
 8009148:	4610      	mov	r0, r2
 800914a:	4798      	blx	r3
 800914c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800914e:	e00f      	b.n	8009170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fa49 	bl	80095ea <USBD_CtlError>
            err++;
 8009158:	7afb      	ldrb	r3, [r7, #11]
 800915a:	3301      	adds	r3, #1
 800915c:	72fb      	strb	r3, [r7, #11]
          break;
 800915e:	e007      	b.n	8009170 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fa41 	bl	80095ea <USBD_CtlError>
          err++;
 8009168:	7afb      	ldrb	r3, [r7, #11]
 800916a:	3301      	adds	r3, #1
 800916c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800916e:	bf00      	nop
      }
      break;
 8009170:	e037      	b.n	80091e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	7c1b      	ldrb	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d109      	bne.n	800918e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009182:	f107 0208 	add.w	r2, r7, #8
 8009186:	4610      	mov	r0, r2
 8009188:	4798      	blx	r3
 800918a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800918c:	e029      	b.n	80091e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fa2a 	bl	80095ea <USBD_CtlError>
        err++;
 8009196:	7afb      	ldrb	r3, [r7, #11]
 8009198:	3301      	adds	r3, #1
 800919a:	72fb      	strb	r3, [r7, #11]
      break;
 800919c:	e021      	b.n	80091e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	7c1b      	ldrb	r3, [r3, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10d      	bne.n	80091c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ae:	f107 0208 	add.w	r2, r7, #8
 80091b2:	4610      	mov	r0, r2
 80091b4:	4798      	blx	r3
 80091b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	3301      	adds	r3, #1
 80091bc:	2207      	movs	r2, #7
 80091be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091c0:	e00f      	b.n	80091e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fa10 	bl	80095ea <USBD_CtlError>
        err++;
 80091ca:	7afb      	ldrb	r3, [r7, #11]
 80091cc:	3301      	adds	r3, #1
 80091ce:	72fb      	strb	r3, [r7, #11]
      break;
 80091d0:	e007      	b.n	80091e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fa08 	bl	80095ea <USBD_CtlError>
      err++;
 80091da:	7afb      	ldrb	r3, [r7, #11]
 80091dc:	3301      	adds	r3, #1
 80091de:	72fb      	strb	r3, [r7, #11]
      break;
 80091e0:	bf00      	nop
  }

  if (err != 0U)
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d11e      	bne.n	8009226 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	88db      	ldrh	r3, [r3, #6]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d016      	beq.n	800921e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80091f0:	893b      	ldrh	r3, [r7, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00e      	beq.n	8009214 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	88da      	ldrh	r2, [r3, #6]
 80091fa:	893b      	ldrh	r3, [r7, #8]
 80091fc:	4293      	cmp	r3, r2
 80091fe:	bf28      	it	cs
 8009200:	4613      	movcs	r3, r2
 8009202:	b29b      	uxth	r3, r3
 8009204:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009206:	893b      	ldrh	r3, [r7, #8]
 8009208:	461a      	mov	r2, r3
 800920a:	68f9      	ldr	r1, [r7, #12]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fa69 	bl	80096e4 <USBD_CtlSendData>
 8009212:	e009      	b.n	8009228 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f9e7 	bl	80095ea <USBD_CtlError>
 800921c:	e004      	b.n	8009228 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fac1 	bl	80097a6 <USBD_CtlSendStatus>
 8009224:	e000      	b.n	8009228 <USBD_GetDescriptor+0x2cc>
    return;
 8009226:	bf00      	nop
  }
}
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop

08009230 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	889b      	ldrh	r3, [r3, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d131      	bne.n	80092a6 <USBD_SetAddress+0x76>
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	88db      	ldrh	r3, [r3, #6]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d12d      	bne.n	80092a6 <USBD_SetAddress+0x76>
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	885b      	ldrh	r3, [r3, #2]
 800924e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009250:	d829      	bhi.n	80092a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	885b      	ldrh	r3, [r3, #2]
 8009256:	b2db      	uxtb	r3, r3
 8009258:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800925c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b03      	cmp	r3, #3
 8009268:	d104      	bne.n	8009274 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f9bc 	bl	80095ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009272:	e01d      	b.n	80092b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7bfa      	ldrb	r2, [r7, #15]
 8009278:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 ff19 	bl	800a0b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fa8d 	bl	80097a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d004      	beq.n	800929c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2202      	movs	r2, #2
 8009296:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800929a:	e009      	b.n	80092b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a4:	e004      	b.n	80092b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f99e 	bl	80095ea <USBD_CtlError>
  }
}
 80092ae:	bf00      	nop
 80092b0:	bf00      	nop
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	885b      	ldrh	r3, [r3, #2]
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	4b4e      	ldr	r3, [pc, #312]	@ (8009408 <USBD_SetConfig+0x150>)
 80092ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092d0:	4b4d      	ldr	r3, [pc, #308]	@ (8009408 <USBD_SetConfig+0x150>)
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d905      	bls.n	80092e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f985 	bl	80095ea <USBD_CtlError>
    return USBD_FAIL;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e08c      	b.n	80093fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d002      	beq.n	80092f6 <USBD_SetConfig+0x3e>
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d029      	beq.n	8009348 <USBD_SetConfig+0x90>
 80092f4:	e075      	b.n	80093e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80092f6:	4b44      	ldr	r3, [pc, #272]	@ (8009408 <USBD_SetConfig+0x150>)
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d020      	beq.n	8009340 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80092fe:	4b42      	ldr	r3, [pc, #264]	@ (8009408 <USBD_SetConfig+0x150>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009308:	4b3f      	ldr	r3, [pc, #252]	@ (8009408 <USBD_SetConfig+0x150>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7fe ffcd 	bl	80082ae <USBD_SetClassConfig>
 8009314:	4603      	mov	r3, r0
 8009316:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d008      	beq.n	8009330 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f962 	bl	80095ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2202      	movs	r2, #2
 800932a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800932e:	e065      	b.n	80093fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fa38 	bl	80097a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2203      	movs	r2, #3
 800933a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800933e:	e05d      	b.n	80093fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fa30 	bl	80097a6 <USBD_CtlSendStatus>
      break;
 8009346:	e059      	b.n	80093fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009348:	4b2f      	ldr	r3, [pc, #188]	@ (8009408 <USBD_SetConfig+0x150>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d112      	bne.n	8009376 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2202      	movs	r2, #2
 8009354:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009358:	4b2b      	ldr	r3, [pc, #172]	@ (8009408 <USBD_SetConfig+0x150>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009362:	4b29      	ldr	r3, [pc, #164]	@ (8009408 <USBD_SetConfig+0x150>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7fe ffbc 	bl	80082e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fa19 	bl	80097a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009374:	e042      	b.n	80093fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009376:	4b24      	ldr	r3, [pc, #144]	@ (8009408 <USBD_SetConfig+0x150>)
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	461a      	mov	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	429a      	cmp	r2, r3
 8009382:	d02a      	beq.n	80093da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	b2db      	uxtb	r3, r3
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7fe ffaa 	bl	80082e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009392:	4b1d      	ldr	r3, [pc, #116]	@ (8009408 <USBD_SetConfig+0x150>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	461a      	mov	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800939c:	4b1a      	ldr	r3, [pc, #104]	@ (8009408 <USBD_SetConfig+0x150>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7fe ff83 	bl	80082ae <USBD_SetClassConfig>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00f      	beq.n	80093d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f918 	bl	80095ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7fe ff8f 	bl	80082e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2202      	movs	r2, #2
 80093cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80093d0:	e014      	b.n	80093fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f9e7 	bl	80097a6 <USBD_CtlSendStatus>
      break;
 80093d8:	e010      	b.n	80093fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f9e3 	bl	80097a6 <USBD_CtlSendStatus>
      break;
 80093e0:	e00c      	b.n	80093fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f900 	bl	80095ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093ea:	4b07      	ldr	r3, [pc, #28]	@ (8009408 <USBD_SetConfig+0x150>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7fe ff78 	bl	80082e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80093f6:	2303      	movs	r3, #3
 80093f8:	73fb      	strb	r3, [r7, #15]
      break;
 80093fa:	bf00      	nop
  }

  return ret;
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	2000525c 	.word	0x2000525c

0800940c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	88db      	ldrh	r3, [r3, #6]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d004      	beq.n	8009428 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f8e2 	bl	80095ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009426:	e023      	b.n	8009470 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b02      	cmp	r3, #2
 8009432:	dc02      	bgt.n	800943a <USBD_GetConfig+0x2e>
 8009434:	2b00      	cmp	r3, #0
 8009436:	dc03      	bgt.n	8009440 <USBD_GetConfig+0x34>
 8009438:	e015      	b.n	8009466 <USBD_GetConfig+0x5a>
 800943a:	2b03      	cmp	r3, #3
 800943c:	d00b      	beq.n	8009456 <USBD_GetConfig+0x4a>
 800943e:	e012      	b.n	8009466 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	3308      	adds	r3, #8
 800944a:	2201      	movs	r2, #1
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f948 	bl	80096e4 <USBD_CtlSendData>
        break;
 8009454:	e00c      	b.n	8009470 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	3304      	adds	r3, #4
 800945a:	2201      	movs	r2, #1
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f940 	bl	80096e4 <USBD_CtlSendData>
        break;
 8009464:	e004      	b.n	8009470 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f8be 	bl	80095ea <USBD_CtlError>
        break;
 800946e:	bf00      	nop
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009488:	b2db      	uxtb	r3, r3
 800948a:	3b01      	subs	r3, #1
 800948c:	2b02      	cmp	r3, #2
 800948e:	d81e      	bhi.n	80094ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	88db      	ldrh	r3, [r3, #6]
 8009494:	2b02      	cmp	r3, #2
 8009496:	d004      	beq.n	80094a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f8a5 	bl	80095ea <USBD_CtlError>
        break;
 80094a0:	e01a      	b.n	80094d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	f043 0202 	orr.w	r2, r3, #2
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	330c      	adds	r3, #12
 80094c2:	2202      	movs	r2, #2
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f90c 	bl	80096e4 <USBD_CtlSendData>
      break;
 80094cc:	e004      	b.n	80094d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f88a 	bl	80095ea <USBD_CtlError>
      break;
 80094d6:	bf00      	nop
  }
}
 80094d8:	bf00      	nop
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	885b      	ldrh	r3, [r3, #2]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d107      	bne.n	8009502 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f953 	bl	80097a6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009500:	e013      	b.n	800952a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	885b      	ldrh	r3, [r3, #2]
 8009506:	2b02      	cmp	r3, #2
 8009508:	d10b      	bne.n	8009522 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	889b      	ldrh	r3, [r3, #4]
 800950e:	0a1b      	lsrs	r3, r3, #8
 8009510:	b29b      	uxth	r3, r3
 8009512:	b2da      	uxtb	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f943 	bl	80097a6 <USBD_CtlSendStatus>
}
 8009520:	e003      	b.n	800952a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f860 	bl	80095ea <USBD_CtlError>
}
 800952a:	bf00      	nop
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b082      	sub	sp, #8
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009542:	b2db      	uxtb	r3, r3
 8009544:	3b01      	subs	r3, #1
 8009546:	2b02      	cmp	r3, #2
 8009548:	d80b      	bhi.n	8009562 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	885b      	ldrh	r3, [r3, #2]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d10c      	bne.n	800956c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f923 	bl	80097a6 <USBD_CtlSendStatus>
      }
      break;
 8009560:	e004      	b.n	800956c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f840 	bl	80095ea <USBD_CtlError>
      break;
 800956a:	e000      	b.n	800956e <USBD_ClrFeature+0x3c>
      break;
 800956c:	bf00      	nop
  }
}
 800956e:	bf00      	nop
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	781a      	ldrb	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	3301      	adds	r3, #1
 8009590:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	781a      	ldrb	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f7ff fa3d 	bl	8008a20 <SWAPBYTE>
 80095a6:	4603      	mov	r3, r0
 80095a8:	461a      	mov	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3301      	adds	r3, #1
 80095b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3301      	adds	r3, #1
 80095b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff fa30 	bl	8008a20 <SWAPBYTE>
 80095c0:	4603      	mov	r3, r0
 80095c2:	461a      	mov	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3301      	adds	r3, #1
 80095cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3301      	adds	r3, #1
 80095d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f7ff fa23 	bl	8008a20 <SWAPBYTE>
 80095da:	4603      	mov	r3, r0
 80095dc:	461a      	mov	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	80da      	strh	r2, [r3, #6]
}
 80095e2:	bf00      	nop
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b082      	sub	sp, #8
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80095f4:	2180      	movs	r1, #128	@ 0x80
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fcf4 	bl	8009fe4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095fc:	2100      	movs	r1, #0
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fcf0 	bl	8009fe4 <USBD_LL_StallEP>
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009618:	2300      	movs	r3, #0
 800961a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d042      	beq.n	80096a8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009626:	6938      	ldr	r0, [r7, #16]
 8009628:	f000 f842 	bl	80096b0 <USBD_GetLen>
 800962c:	4603      	mov	r3, r0
 800962e:	3301      	adds	r3, #1
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009636:	d808      	bhi.n	800964a <USBD_GetString+0x3e>
 8009638:	6938      	ldr	r0, [r7, #16]
 800963a:	f000 f839 	bl	80096b0 <USBD_GetLen>
 800963e:	4603      	mov	r3, r0
 8009640:	3301      	adds	r3, #1
 8009642:	b29b      	uxth	r3, r3
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	b29a      	uxth	r2, r3
 8009648:	e001      	b.n	800964e <USBD_GetString+0x42>
 800964a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	4413      	add	r3, r2
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	7812      	ldrb	r2, [r2, #0]
 800965c:	701a      	strb	r2, [r3, #0]
  idx++;
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	3301      	adds	r3, #1
 8009662:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	4413      	add	r3, r2
 800966a:	2203      	movs	r2, #3
 800966c:	701a      	strb	r2, [r3, #0]
  idx++;
 800966e:	7dfb      	ldrb	r3, [r7, #23]
 8009670:	3301      	adds	r3, #1
 8009672:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009674:	e013      	b.n	800969e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009676:	7dfb      	ldrb	r3, [r7, #23]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	4413      	add	r3, r2
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	7812      	ldrb	r2, [r2, #0]
 8009680:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	3301      	adds	r3, #1
 8009686:	613b      	str	r3, [r7, #16]
    idx++;
 8009688:	7dfb      	ldrb	r3, [r7, #23]
 800968a:	3301      	adds	r3, #1
 800968c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800968e:	7dfb      	ldrb	r3, [r7, #23]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	4413      	add	r3, r2
 8009694:	2200      	movs	r2, #0
 8009696:	701a      	strb	r2, [r3, #0]
    idx++;
 8009698:	7dfb      	ldrb	r3, [r7, #23]
 800969a:	3301      	adds	r3, #1
 800969c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1e7      	bne.n	8009676 <USBD_GetString+0x6a>
 80096a6:	e000      	b.n	80096aa <USBD_GetString+0x9e>
    return;
 80096a8:	bf00      	nop
  }
}
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80096c0:	e005      	b.n	80096ce <USBD_GetLen+0x1e>
  {
    len++;
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	3301      	adds	r3, #1
 80096c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	3301      	adds	r3, #1
 80096cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1f5      	bne.n	80096c2 <USBD_GetLen+0x12>
  }

  return len;
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	2100      	movs	r1, #0
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f000 fcf0 	bl	800a0f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	2100      	movs	r1, #0
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 fcdf 	bl	800a0f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	60f8      	str	r0, [r7, #12]
 800974a:	60b9      	str	r1, [r7, #8]
 800974c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2203      	movs	r2, #3
 8009752:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	2100      	movs	r1, #0
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 fcdf 	bl	800a138 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	2100      	movs	r1, #0
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f000 fcce 	bl	800a138 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b082      	sub	sp, #8
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2204      	movs	r2, #4
 80097b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80097b6:	2300      	movs	r3, #0
 80097b8:	2200      	movs	r2, #0
 80097ba:	2100      	movs	r1, #0
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fc9a 	bl	800a0f6 <USBD_LL_Transmit>

  return USBD_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2205      	movs	r2, #5
 80097d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097dc:	2300      	movs	r3, #0
 80097de:	2200      	movs	r2, #0
 80097e0:	2100      	movs	r1, #0
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fca8 	bl	800a138 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80097f8:	2200      	movs	r2, #0
 80097fa:	4912      	ldr	r1, [pc, #72]	@ (8009844 <MX_USB_DEVICE_Init+0x50>)
 80097fc:	4812      	ldr	r0, [pc, #72]	@ (8009848 <MX_USB_DEVICE_Init+0x54>)
 80097fe:	f7fe fcd9 	bl	80081b4 <USBD_Init>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009808:	f7f8 f880 	bl	800190c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800980c:	490f      	ldr	r1, [pc, #60]	@ (800984c <MX_USB_DEVICE_Init+0x58>)
 800980e:	480e      	ldr	r0, [pc, #56]	@ (8009848 <MX_USB_DEVICE_Init+0x54>)
 8009810:	f7fe fd00 	bl	8008214 <USBD_RegisterClass>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800981a:	f7f8 f877 	bl	800190c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800981e:	490c      	ldr	r1, [pc, #48]	@ (8009850 <MX_USB_DEVICE_Init+0x5c>)
 8009820:	4809      	ldr	r0, [pc, #36]	@ (8009848 <MX_USB_DEVICE_Init+0x54>)
 8009822:	f7fe fbf7 	bl	8008014 <USBD_CDC_RegisterInterface>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800982c:	f7f8 f86e 	bl	800190c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009830:	4805      	ldr	r0, [pc, #20]	@ (8009848 <MX_USB_DEVICE_Init+0x54>)
 8009832:	f7fe fd25 	bl	8008280 <USBD_Start>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800983c:	f7f8 f866 	bl	800190c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009840:	bf00      	nop
 8009842:	bd80      	pop	{r7, pc}
 8009844:	200000ac 	.word	0x200000ac
 8009848:	20005260 	.word	0x20005260
 800984c:	20000018 	.word	0x20000018
 8009850:	20000098 	.word	0x20000098

08009854 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009858:	2200      	movs	r2, #0
 800985a:	4905      	ldr	r1, [pc, #20]	@ (8009870 <CDC_Init_FS+0x1c>)
 800985c:	4805      	ldr	r0, [pc, #20]	@ (8009874 <CDC_Init_FS+0x20>)
 800985e:	f7fe fbf3 	bl	8008048 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009862:	4905      	ldr	r1, [pc, #20]	@ (8009878 <CDC_Init_FS+0x24>)
 8009864:	4803      	ldr	r0, [pc, #12]	@ (8009874 <CDC_Init_FS+0x20>)
 8009866:	f7fe fc11 	bl	800808c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800986a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800986c:	4618      	mov	r0, r3
 800986e:	bd80      	pop	{r7, pc}
 8009870:	20005d3c 	.word	0x20005d3c
 8009874:	20005260 	.word	0x20005260
 8009878:	2000553c 	.word	0x2000553c

0800987c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800987c:	b480      	push	{r7}
 800987e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009880:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009882:	4618      	mov	r0, r3
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	6039      	str	r1, [r7, #0]
 8009896:	71fb      	strb	r3, [r7, #7]
 8009898:	4613      	mov	r3, r2
 800989a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	2b23      	cmp	r3, #35	@ 0x23
 80098a0:	d84a      	bhi.n	8009938 <CDC_Control_FS+0xac>
 80098a2:	a201      	add	r2, pc, #4	@ (adr r2, 80098a8 <CDC_Control_FS+0x1c>)
 80098a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a8:	08009939 	.word	0x08009939
 80098ac:	08009939 	.word	0x08009939
 80098b0:	08009939 	.word	0x08009939
 80098b4:	08009939 	.word	0x08009939
 80098b8:	08009939 	.word	0x08009939
 80098bc:	08009939 	.word	0x08009939
 80098c0:	08009939 	.word	0x08009939
 80098c4:	08009939 	.word	0x08009939
 80098c8:	08009939 	.word	0x08009939
 80098cc:	08009939 	.word	0x08009939
 80098d0:	08009939 	.word	0x08009939
 80098d4:	08009939 	.word	0x08009939
 80098d8:	08009939 	.word	0x08009939
 80098dc:	08009939 	.word	0x08009939
 80098e0:	08009939 	.word	0x08009939
 80098e4:	08009939 	.word	0x08009939
 80098e8:	08009939 	.word	0x08009939
 80098ec:	08009939 	.word	0x08009939
 80098f0:	08009939 	.word	0x08009939
 80098f4:	08009939 	.word	0x08009939
 80098f8:	08009939 	.word	0x08009939
 80098fc:	08009939 	.word	0x08009939
 8009900:	08009939 	.word	0x08009939
 8009904:	08009939 	.word	0x08009939
 8009908:	08009939 	.word	0x08009939
 800990c:	08009939 	.word	0x08009939
 8009910:	08009939 	.word	0x08009939
 8009914:	08009939 	.word	0x08009939
 8009918:	08009939 	.word	0x08009939
 800991c:	08009939 	.word	0x08009939
 8009920:	08009939 	.word	0x08009939
 8009924:	08009939 	.word	0x08009939
 8009928:	08009939 	.word	0x08009939
 800992c:	08009939 	.word	0x08009939
 8009930:	08009939 	.word	0x08009939
 8009934:	08009939 	.word	0x08009939
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009938:	bf00      	nop
  }

  return (USBD_OK);
 800993a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	4805      	ldr	r0, [pc, #20]	@ (800996c <CDC_Receive_FS+0x24>)
 8009956:	f7fe fb99 	bl	800808c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800995a:	4804      	ldr	r0, [pc, #16]	@ (800996c <CDC_Receive_FS+0x24>)
 800995c:	f7fe fbf4 	bl	8008148 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009960:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20005260 	.word	0x20005260

08009970 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009980:	4b0d      	ldr	r3, [pc, #52]	@ (80099b8 <CDC_Transmit_FS+0x48>)
 8009982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009986:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009992:	2301      	movs	r3, #1
 8009994:	e00b      	b.n	80099ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009996:	887b      	ldrh	r3, [r7, #2]
 8009998:	461a      	mov	r2, r3
 800999a:	6879      	ldr	r1, [r7, #4]
 800999c:	4806      	ldr	r0, [pc, #24]	@ (80099b8 <CDC_Transmit_FS+0x48>)
 800999e:	f7fe fb53 	bl	8008048 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80099a2:	4805      	ldr	r0, [pc, #20]	@ (80099b8 <CDC_Transmit_FS+0x48>)
 80099a4:	f7fe fb90 	bl	80080c8 <USBD_CDC_TransmitPacket>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20005260 	.word	0x20005260

080099bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80099bc:	b480      	push	{r7}
 80099be:	b087      	sub	sp, #28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	4613      	mov	r3, r2
 80099c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80099ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	371c      	adds	r7, #28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
	...

080099e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	6039      	str	r1, [r7, #0]
 80099ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2212      	movs	r2, #18
 80099f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80099f2:	4b03      	ldr	r3, [pc, #12]	@ (8009a00 <USBD_FS_DeviceDescriptor+0x20>)
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	200000c8 	.word	0x200000c8

08009a04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	6039      	str	r1, [r7, #0]
 8009a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	2204      	movs	r2, #4
 8009a14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a16:	4b03      	ldr	r3, [pc, #12]	@ (8009a24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	200000dc 	.word	0x200000dc

08009a28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	6039      	str	r1, [r7, #0]
 8009a32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a34:	79fb      	ldrb	r3, [r7, #7]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d105      	bne.n	8009a46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	4907      	ldr	r1, [pc, #28]	@ (8009a5c <USBD_FS_ProductStrDescriptor+0x34>)
 8009a3e:	4808      	ldr	r0, [pc, #32]	@ (8009a60 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a40:	f7ff fde4 	bl	800960c <USBD_GetString>
 8009a44:	e004      	b.n	8009a50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	4904      	ldr	r1, [pc, #16]	@ (8009a5c <USBD_FS_ProductStrDescriptor+0x34>)
 8009a4a:	4805      	ldr	r0, [pc, #20]	@ (8009a60 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a4c:	f7ff fdde 	bl	800960c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a50:	4b02      	ldr	r3, [pc, #8]	@ (8009a5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	2000653c 	.word	0x2000653c
 8009a60:	0800ea90 	.word	0x0800ea90

08009a64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	6039      	str	r1, [r7, #0]
 8009a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	4904      	ldr	r1, [pc, #16]	@ (8009a84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a74:	4804      	ldr	r0, [pc, #16]	@ (8009a88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a76:	f7ff fdc9 	bl	800960c <USBD_GetString>
  return USBD_StrDesc;
 8009a7a:	4b02      	ldr	r3, [pc, #8]	@ (8009a84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	2000653c 	.word	0x2000653c
 8009a88:	0800eaa8 	.word	0x0800eaa8

08009a8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	6039      	str	r1, [r7, #0]
 8009a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	221a      	movs	r2, #26
 8009a9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a9e:	f000 f843 	bl	8009b28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009aa2:	4b02      	ldr	r3, [pc, #8]	@ (8009aac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	200000e0 	.word	0x200000e0

08009ab0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	6039      	str	r1, [r7, #0]
 8009aba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d105      	bne.n	8009ace <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	4907      	ldr	r1, [pc, #28]	@ (8009ae4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ac6:	4808      	ldr	r0, [pc, #32]	@ (8009ae8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ac8:	f7ff fda0 	bl	800960c <USBD_GetString>
 8009acc:	e004      	b.n	8009ad8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	4904      	ldr	r1, [pc, #16]	@ (8009ae4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ad2:	4805      	ldr	r0, [pc, #20]	@ (8009ae8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ad4:	f7ff fd9a 	bl	800960c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ad8:	4b02      	ldr	r3, [pc, #8]	@ (8009ae4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	2000653c 	.word	0x2000653c
 8009ae8:	0800eabc 	.word	0x0800eabc

08009aec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	6039      	str	r1, [r7, #0]
 8009af6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d105      	bne.n	8009b0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	4907      	ldr	r1, [pc, #28]	@ (8009b20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b02:	4808      	ldr	r0, [pc, #32]	@ (8009b24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b04:	f7ff fd82 	bl	800960c <USBD_GetString>
 8009b08:	e004      	b.n	8009b14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	4904      	ldr	r1, [pc, #16]	@ (8009b20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b0e:	4805      	ldr	r0, [pc, #20]	@ (8009b24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b10:	f7ff fd7c 	bl	800960c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b14:	4b02      	ldr	r3, [pc, #8]	@ (8009b20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	2000653c 	.word	0x2000653c
 8009b24:	0800eac8 	.word	0x0800eac8

08009b28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b6c <Get_SerialNum+0x44>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b34:	4b0e      	ldr	r3, [pc, #56]	@ (8009b70 <Get_SerialNum+0x48>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009b74 <Get_SerialNum+0x4c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4413      	add	r3, r2
 8009b46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d009      	beq.n	8009b62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b4e:	2208      	movs	r2, #8
 8009b50:	4909      	ldr	r1, [pc, #36]	@ (8009b78 <Get_SerialNum+0x50>)
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f000 f814 	bl	8009b80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b58:	2204      	movs	r2, #4
 8009b5a:	4908      	ldr	r1, [pc, #32]	@ (8009b7c <Get_SerialNum+0x54>)
 8009b5c:	68b8      	ldr	r0, [r7, #8]
 8009b5e:	f000 f80f 	bl	8009b80 <IntToUnicode>
  }
}
 8009b62:	bf00      	nop
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	1fff7a10 	.word	0x1fff7a10
 8009b70:	1fff7a14 	.word	0x1fff7a14
 8009b74:	1fff7a18 	.word	0x1fff7a18
 8009b78:	200000e2 	.word	0x200000e2
 8009b7c:	200000f2 	.word	0x200000f2

08009b80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b087      	sub	sp, #28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b92:	2300      	movs	r3, #0
 8009b94:	75fb      	strb	r3, [r7, #23]
 8009b96:	e027      	b.n	8009be8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	0f1b      	lsrs	r3, r3, #28
 8009b9c:	2b09      	cmp	r3, #9
 8009b9e:	d80b      	bhi.n	8009bb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	0f1b      	lsrs	r3, r3, #28
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	7dfb      	ldrb	r3, [r7, #23]
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	4619      	mov	r1, r3
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	440b      	add	r3, r1
 8009bb0:	3230      	adds	r2, #48	@ 0x30
 8009bb2:	b2d2      	uxtb	r2, r2
 8009bb4:	701a      	strb	r2, [r3, #0]
 8009bb6:	e00a      	b.n	8009bce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	0f1b      	lsrs	r3, r3, #28
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	005b      	lsls	r3, r3, #1
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	440b      	add	r3, r1
 8009bc8:	3237      	adds	r2, #55	@ 0x37
 8009bca:	b2d2      	uxtb	r2, r2
 8009bcc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	011b      	lsls	r3, r3, #4
 8009bd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009bd4:	7dfb      	ldrb	r3, [r7, #23]
 8009bd6:	005b      	lsls	r3, r3, #1
 8009bd8:	3301      	adds	r3, #1
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	4413      	add	r3, r2
 8009bde:	2200      	movs	r2, #0
 8009be0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	3301      	adds	r3, #1
 8009be6:	75fb      	strb	r3, [r7, #23]
 8009be8:	7dfa      	ldrb	r2, [r7, #23]
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d3d3      	bcc.n	8009b98 <IntToUnicode+0x18>
  }
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
	...

08009c00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b08a      	sub	sp, #40	@ 0x28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c08:	f107 0314 	add.w	r3, r7, #20
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	601a      	str	r2, [r3, #0]
 8009c10:	605a      	str	r2, [r3, #4]
 8009c12:	609a      	str	r2, [r3, #8]
 8009c14:	60da      	str	r2, [r3, #12]
 8009c16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c20:	d13a      	bne.n	8009c98 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c22:	2300      	movs	r3, #0
 8009c24:	613b      	str	r3, [r7, #16]
 8009c26:	4b1e      	ldr	r3, [pc, #120]	@ (8009ca0 <HAL_PCD_MspInit+0xa0>)
 8009c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8009ca0 <HAL_PCD_MspInit+0xa0>)
 8009c2c:	f043 0301 	orr.w	r3, r3, #1
 8009c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c32:	4b1b      	ldr	r3, [pc, #108]	@ (8009ca0 <HAL_PCD_MspInit+0xa0>)
 8009c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	613b      	str	r3, [r7, #16]
 8009c3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009c3e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c44:	2302      	movs	r3, #2
 8009c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c50:	230a      	movs	r3, #10
 8009c52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c54:	f107 0314 	add.w	r3, r7, #20
 8009c58:	4619      	mov	r1, r3
 8009c5a:	4812      	ldr	r0, [pc, #72]	@ (8009ca4 <HAL_PCD_MspInit+0xa4>)
 8009c5c:	f7f8 fe16 	bl	800288c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c60:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca0 <HAL_PCD_MspInit+0xa0>)
 8009c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c64:	4a0e      	ldr	r2, [pc, #56]	@ (8009ca0 <HAL_PCD_MspInit+0xa0>)
 8009c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c6a:	6353      	str	r3, [r2, #52]	@ 0x34
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca0 <HAL_PCD_MspInit+0xa0>)
 8009c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c74:	4a0a      	ldr	r2, [pc, #40]	@ (8009ca0 <HAL_PCD_MspInit+0xa0>)
 8009c76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c7c:	4b08      	ldr	r3, [pc, #32]	@ (8009ca0 <HAL_PCD_MspInit+0xa0>)
 8009c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c84:	60fb      	str	r3, [r7, #12]
 8009c86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	2043      	movs	r0, #67	@ 0x43
 8009c8e:	f7f8 f9e6 	bl	800205e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c92:	2043      	movs	r0, #67	@ 0x43
 8009c94:	f7f8 f9ff 	bl	8002096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c98:	bf00      	nop
 8009c9a:	3728      	adds	r7, #40	@ 0x28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	40023800 	.word	0x40023800
 8009ca4:	40020000 	.word	0x40020000

08009ca8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	f7fe fb2b 	bl	800831a <USBD_LL_SetupStage>
}
 8009cc4:	bf00      	nop
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009cde:	78fa      	ldrb	r2, [r7, #3]
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	00db      	lsls	r3, r3, #3
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	440b      	add	r3, r1
 8009cec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	78fb      	ldrb	r3, [r7, #3]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	f7fe fb65 	bl	80083c4 <USBD_LL_DataOutStage>
}
 8009cfa:	bf00      	nop
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b082      	sub	sp, #8
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009d14:	78fa      	ldrb	r2, [r7, #3]
 8009d16:	6879      	ldr	r1, [r7, #4]
 8009d18:	4613      	mov	r3, r2
 8009d1a:	00db      	lsls	r3, r3, #3
 8009d1c:	4413      	add	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	440b      	add	r3, r1
 8009d22:	3320      	adds	r3, #32
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	78fb      	ldrb	r3, [r7, #3]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	f7fe fc07 	bl	800853c <USBD_LL_DataInStage>
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fe fd4b 	bl	80087e0 <USBD_LL_SOF>
}
 8009d4a:	bf00      	nop
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	79db      	ldrb	r3, [r3, #7]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d102      	bne.n	8009d6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73fb      	strb	r3, [r7, #15]
 8009d6a:	e008      	b.n	8009d7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	79db      	ldrb	r3, [r3, #7]
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d102      	bne.n	8009d7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009d74:	2301      	movs	r3, #1
 8009d76:	73fb      	strb	r3, [r7, #15]
 8009d78:	e001      	b.n	8009d7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009d7a:	f7f7 fdc7 	bl	800190c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d84:	7bfa      	ldrb	r2, [r7, #15]
 8009d86:	4611      	mov	r1, r2
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fe fce5 	bl	8008758 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe fc8c 	bl	80086b2 <USBD_LL_Reset>
}
 8009d9a:	bf00      	nop
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
	...

08009da4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe fce0 	bl	8008778 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	6812      	ldr	r2, [r2, #0]
 8009dc6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009dca:	f043 0301 	orr.w	r3, r3, #1
 8009dce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	7adb      	ldrb	r3, [r3, #11]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d005      	beq.n	8009de4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dd8:	4b04      	ldr	r3, [pc, #16]	@ (8009dec <HAL_PCD_SuspendCallback+0x48>)
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	4a03      	ldr	r2, [pc, #12]	@ (8009dec <HAL_PCD_SuspendCallback+0x48>)
 8009dde:	f043 0306 	orr.w	r3, r3, #6
 8009de2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	e000ed00 	.word	0xe000ed00

08009df0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fe fcd6 	bl	80087b0 <USBD_LL_Resume>
}
 8009e04:	bf00      	nop
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e1e:	78fa      	ldrb	r2, [r7, #3]
 8009e20:	4611      	mov	r1, r2
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fe fd2e 	bl	8008884 <USBD_LL_IsoOUTIncomplete>
}
 8009e28:	bf00      	nop
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e42:	78fa      	ldrb	r2, [r7, #3]
 8009e44:	4611      	mov	r1, r2
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fe fcea 	bl	8008820 <USBD_LL_IsoINIncomplete>
}
 8009e4c:	bf00      	nop
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fe fd40 	bl	80088e8 <USBD_LL_DevConnected>
}
 8009e68:	bf00      	nop
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fe fd3d 	bl	80088fe <USBD_LL_DevDisconnected>
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d13c      	bne.n	8009f16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009e9c:	4a20      	ldr	r2, [pc, #128]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009ea8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009eac:	4b1c      	ldr	r3, [pc, #112]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009eae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009eb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009eb6:	2204      	movs	r2, #4
 8009eb8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009eba:	4b19      	ldr	r3, [pc, #100]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ec0:	4b17      	ldr	r3, [pc, #92]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ec6:	4b16      	ldr	r3, [pc, #88]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009ec8:	2202      	movs	r2, #2
 8009eca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ecc:	4b14      	ldr	r3, [pc, #80]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009ece:	2200      	movs	r2, #0
 8009ed0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ed2:	4b13      	ldr	r3, [pc, #76]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ed8:	4b11      	ldr	r3, [pc, #68]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009ede:	4b10      	ldr	r3, [pc, #64]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009eea:	480d      	ldr	r0, [pc, #52]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009eec:	f7f8 feb5 	bl	8002c5a <HAL_PCD_Init>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ef6:	f7f7 fd09 	bl	800190c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009efa:	2180      	movs	r1, #128	@ 0x80
 8009efc:	4808      	ldr	r0, [pc, #32]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009efe:	f7fa f8e2 	bl	80040c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f02:	2240      	movs	r2, #64	@ 0x40
 8009f04:	2100      	movs	r1, #0
 8009f06:	4806      	ldr	r0, [pc, #24]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009f08:	f7fa f896 	bl	8004038 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009f0c:	2280      	movs	r2, #128	@ 0x80
 8009f0e:	2101      	movs	r1, #1
 8009f10:	4803      	ldr	r0, [pc, #12]	@ (8009f20 <USBD_LL_Init+0x94>)
 8009f12:	f7fa f891 	bl	8004038 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	2000673c 	.word	0x2000673c

08009f24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7f8 ff9c 	bl	8002e78 <HAL_PCD_Start>
 8009f40:	4603      	mov	r3, r0
 8009f42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 f942 	bl	800a1d0 <USBD_Get_USB_Status>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f50:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	4608      	mov	r0, r1
 8009f64:	4611      	mov	r1, r2
 8009f66:	461a      	mov	r2, r3
 8009f68:	4603      	mov	r3, r0
 8009f6a:	70fb      	strb	r3, [r7, #3]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	70bb      	strb	r3, [r7, #2]
 8009f70:	4613      	mov	r3, r2
 8009f72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009f82:	78bb      	ldrb	r3, [r7, #2]
 8009f84:	883a      	ldrh	r2, [r7, #0]
 8009f86:	78f9      	ldrb	r1, [r7, #3]
 8009f88:	f7f9 fc70 	bl	800386c <HAL_PCD_EP_Open>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 f91c 	bl	800a1d0 <USBD_Get_USB_Status>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b084      	sub	sp, #16
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fc0:	78fa      	ldrb	r2, [r7, #3]
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7f9 fcbb 	bl	8003940 <HAL_PCD_EP_Close>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f000 f8fd 	bl	800a1d0 <USBD_Get_USB_Status>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fda:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ffe:	78fa      	ldrb	r2, [r7, #3]
 800a000:	4611      	mov	r1, r2
 800a002:	4618      	mov	r0, r3
 800a004:	f7f9 fd73 	bl	8003aee <HAL_PCD_EP_SetStall>
 800a008:	4603      	mov	r3, r0
 800a00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 f8de 	bl	800a1d0 <USBD_Get_USB_Status>
 800a014:	4603      	mov	r3, r0
 800a016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a018:	7bbb      	ldrb	r3, [r7, #14]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b084      	sub	sp, #16
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	460b      	mov	r3, r1
 800a02c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a03c:	78fa      	ldrb	r2, [r7, #3]
 800a03e:	4611      	mov	r1, r2
 800a040:	4618      	mov	r0, r3
 800a042:	f7f9 fdb7 	bl	8003bb4 <HAL_PCD_EP_ClrStall>
 800a046:	4603      	mov	r3, r0
 800a048:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a04a:	7bfb      	ldrb	r3, [r7, #15]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 f8bf 	bl	800a1d0 <USBD_Get_USB_Status>
 800a052:	4603      	mov	r3, r0
 800a054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a056:	7bbb      	ldrb	r3, [r7, #14]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a072:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	da0b      	bge.n	800a094 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a07c:	78fb      	ldrb	r3, [r7, #3]
 800a07e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a082:	68f9      	ldr	r1, [r7, #12]
 800a084:	4613      	mov	r3, r2
 800a086:	00db      	lsls	r3, r3, #3
 800a088:	4413      	add	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	440b      	add	r3, r1
 800a08e:	3316      	adds	r3, #22
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	e00b      	b.n	800a0ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	4613      	mov	r3, r2
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	4413      	add	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	440b      	add	r3, r1
 800a0a6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a0aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0d2:	78fa      	ldrb	r2, [r7, #3]
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7f9 fba4 	bl	8003824 <HAL_PCD_SetAddress>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 f874 	bl	800a1d0 <USBD_Get_USB_Status>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b086      	sub	sp, #24
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	60f8      	str	r0, [r7, #12]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	603b      	str	r3, [r7, #0]
 800a102:	460b      	mov	r3, r1
 800a104:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a114:	7af9      	ldrb	r1, [r7, #11]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	f7f9 fcae 	bl	8003a7a <HAL_PCD_EP_Transmit>
 800a11e:	4603      	mov	r3, r0
 800a120:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a122:	7dfb      	ldrb	r3, [r7, #23]
 800a124:	4618      	mov	r0, r3
 800a126:	f000 f853 	bl	800a1d0 <USBD_Get_USB_Status>
 800a12a:	4603      	mov	r3, r0
 800a12c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a12e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	607a      	str	r2, [r7, #4]
 800a142:	603b      	str	r3, [r7, #0]
 800a144:	460b      	mov	r3, r1
 800a146:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a156:	7af9      	ldrb	r1, [r7, #11]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	f7f9 fc3a 	bl	80039d4 <HAL_PCD_EP_Receive>
 800a160:	4603      	mov	r3, r0
 800a162:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	4618      	mov	r0, r3
 800a168:	f000 f832 	bl	800a1d0 <USBD_Get_USB_Status>
 800a16c:	4603      	mov	r3, r0
 800a16e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a170:	7dbb      	ldrb	r3, [r7, #22]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3718      	adds	r7, #24
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	460b      	mov	r3, r1
 800a184:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a18c:	78fa      	ldrb	r2, [r7, #3]
 800a18e:	4611      	mov	r1, r2
 800a190:	4618      	mov	r0, r3
 800a192:	f7f9 fc5a 	bl	8003a4a <HAL_PCD_EP_GetRxCount>
 800a196:	4603      	mov	r3, r0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a1a8:	4b03      	ldr	r3, [pc, #12]	@ (800a1b8 <USBD_static_malloc+0x18>)
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	20006c20 	.word	0x20006c20

0800a1bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]

}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1de:	79fb      	ldrb	r3, [r7, #7]
 800a1e0:	2b03      	cmp	r3, #3
 800a1e2:	d817      	bhi.n	800a214 <USBD_Get_USB_Status+0x44>
 800a1e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ec <USBD_Get_USB_Status+0x1c>)
 800a1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ea:	bf00      	nop
 800a1ec:	0800a1fd 	.word	0x0800a1fd
 800a1f0:	0800a203 	.word	0x0800a203
 800a1f4:	0800a209 	.word	0x0800a209
 800a1f8:	0800a20f 	.word	0x0800a20f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a200:	e00b      	b.n	800a21a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a202:	2303      	movs	r3, #3
 800a204:	73fb      	strb	r3, [r7, #15]
    break;
 800a206:	e008      	b.n	800a21a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a208:	2301      	movs	r3, #1
 800a20a:	73fb      	strb	r3, [r7, #15]
    break;
 800a20c:	e005      	b.n	800a21a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a20e:	2303      	movs	r3, #3
 800a210:	73fb      	strb	r3, [r7, #15]
    break;
 800a212:	e002      	b.n	800a21a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a214:	2303      	movs	r3, #3
 800a216:	73fb      	strb	r3, [r7, #15]
    break;
 800a218:	bf00      	nop
  }
  return usb_status;
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <__cvt>:
 800a228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a22c:	ec57 6b10 	vmov	r6, r7, d0
 800a230:	2f00      	cmp	r7, #0
 800a232:	460c      	mov	r4, r1
 800a234:	4619      	mov	r1, r3
 800a236:	463b      	mov	r3, r7
 800a238:	bfbb      	ittet	lt
 800a23a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a23e:	461f      	movlt	r7, r3
 800a240:	2300      	movge	r3, #0
 800a242:	232d      	movlt	r3, #45	@ 0x2d
 800a244:	700b      	strb	r3, [r1, #0]
 800a246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a248:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a24c:	4691      	mov	r9, r2
 800a24e:	f023 0820 	bic.w	r8, r3, #32
 800a252:	bfbc      	itt	lt
 800a254:	4632      	movlt	r2, r6
 800a256:	4616      	movlt	r6, r2
 800a258:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a25c:	d005      	beq.n	800a26a <__cvt+0x42>
 800a25e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a262:	d100      	bne.n	800a266 <__cvt+0x3e>
 800a264:	3401      	adds	r4, #1
 800a266:	2102      	movs	r1, #2
 800a268:	e000      	b.n	800a26c <__cvt+0x44>
 800a26a:	2103      	movs	r1, #3
 800a26c:	ab03      	add	r3, sp, #12
 800a26e:	9301      	str	r3, [sp, #4]
 800a270:	ab02      	add	r3, sp, #8
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	ec47 6b10 	vmov	d0, r6, r7
 800a278:	4653      	mov	r3, sl
 800a27a:	4622      	mov	r2, r4
 800a27c:	f001 f8b8 	bl	800b3f0 <_dtoa_r>
 800a280:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a284:	4605      	mov	r5, r0
 800a286:	d119      	bne.n	800a2bc <__cvt+0x94>
 800a288:	f019 0f01 	tst.w	r9, #1
 800a28c:	d00e      	beq.n	800a2ac <__cvt+0x84>
 800a28e:	eb00 0904 	add.w	r9, r0, r4
 800a292:	2200      	movs	r2, #0
 800a294:	2300      	movs	r3, #0
 800a296:	4630      	mov	r0, r6
 800a298:	4639      	mov	r1, r7
 800a29a:	f7f6 fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 800a29e:	b108      	cbz	r0, 800a2a4 <__cvt+0x7c>
 800a2a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2a4:	2230      	movs	r2, #48	@ 0x30
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	454b      	cmp	r3, r9
 800a2aa:	d31e      	bcc.n	800a2ea <__cvt+0xc2>
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2b0:	1b5b      	subs	r3, r3, r5
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	6013      	str	r3, [r2, #0]
 800a2b6:	b004      	add	sp, #16
 800a2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a2c0:	eb00 0904 	add.w	r9, r0, r4
 800a2c4:	d1e5      	bne.n	800a292 <__cvt+0x6a>
 800a2c6:	7803      	ldrb	r3, [r0, #0]
 800a2c8:	2b30      	cmp	r3, #48	@ 0x30
 800a2ca:	d10a      	bne.n	800a2e2 <__cvt+0xba>
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	f7f6 fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2d8:	b918      	cbnz	r0, 800a2e2 <__cvt+0xba>
 800a2da:	f1c4 0401 	rsb	r4, r4, #1
 800a2de:	f8ca 4000 	str.w	r4, [sl]
 800a2e2:	f8da 3000 	ldr.w	r3, [sl]
 800a2e6:	4499      	add	r9, r3
 800a2e8:	e7d3      	b.n	800a292 <__cvt+0x6a>
 800a2ea:	1c59      	adds	r1, r3, #1
 800a2ec:	9103      	str	r1, [sp, #12]
 800a2ee:	701a      	strb	r2, [r3, #0]
 800a2f0:	e7d9      	b.n	800a2a6 <__cvt+0x7e>

0800a2f2 <__exponent>:
 800a2f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2f4:	2900      	cmp	r1, #0
 800a2f6:	bfba      	itte	lt
 800a2f8:	4249      	neglt	r1, r1
 800a2fa:	232d      	movlt	r3, #45	@ 0x2d
 800a2fc:	232b      	movge	r3, #43	@ 0x2b
 800a2fe:	2909      	cmp	r1, #9
 800a300:	7002      	strb	r2, [r0, #0]
 800a302:	7043      	strb	r3, [r0, #1]
 800a304:	dd29      	ble.n	800a35a <__exponent+0x68>
 800a306:	f10d 0307 	add.w	r3, sp, #7
 800a30a:	461d      	mov	r5, r3
 800a30c:	270a      	movs	r7, #10
 800a30e:	461a      	mov	r2, r3
 800a310:	fbb1 f6f7 	udiv	r6, r1, r7
 800a314:	fb07 1416 	mls	r4, r7, r6, r1
 800a318:	3430      	adds	r4, #48	@ 0x30
 800a31a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a31e:	460c      	mov	r4, r1
 800a320:	2c63      	cmp	r4, #99	@ 0x63
 800a322:	f103 33ff 	add.w	r3, r3, #4294967295
 800a326:	4631      	mov	r1, r6
 800a328:	dcf1      	bgt.n	800a30e <__exponent+0x1c>
 800a32a:	3130      	adds	r1, #48	@ 0x30
 800a32c:	1e94      	subs	r4, r2, #2
 800a32e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a332:	1c41      	adds	r1, r0, #1
 800a334:	4623      	mov	r3, r4
 800a336:	42ab      	cmp	r3, r5
 800a338:	d30a      	bcc.n	800a350 <__exponent+0x5e>
 800a33a:	f10d 0309 	add.w	r3, sp, #9
 800a33e:	1a9b      	subs	r3, r3, r2
 800a340:	42ac      	cmp	r4, r5
 800a342:	bf88      	it	hi
 800a344:	2300      	movhi	r3, #0
 800a346:	3302      	adds	r3, #2
 800a348:	4403      	add	r3, r0
 800a34a:	1a18      	subs	r0, r3, r0
 800a34c:	b003      	add	sp, #12
 800a34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a350:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a354:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a358:	e7ed      	b.n	800a336 <__exponent+0x44>
 800a35a:	2330      	movs	r3, #48	@ 0x30
 800a35c:	3130      	adds	r1, #48	@ 0x30
 800a35e:	7083      	strb	r3, [r0, #2]
 800a360:	70c1      	strb	r1, [r0, #3]
 800a362:	1d03      	adds	r3, r0, #4
 800a364:	e7f1      	b.n	800a34a <__exponent+0x58>
	...

0800a368 <_printf_float>:
 800a368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36c:	b08d      	sub	sp, #52	@ 0x34
 800a36e:	460c      	mov	r4, r1
 800a370:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a374:	4616      	mov	r6, r2
 800a376:	461f      	mov	r7, r3
 800a378:	4605      	mov	r5, r0
 800a37a:	f000 ff31 	bl	800b1e0 <_localeconv_r>
 800a37e:	6803      	ldr	r3, [r0, #0]
 800a380:	9304      	str	r3, [sp, #16]
 800a382:	4618      	mov	r0, r3
 800a384:	f7f5 ff74 	bl	8000270 <strlen>
 800a388:	2300      	movs	r3, #0
 800a38a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a38c:	f8d8 3000 	ldr.w	r3, [r8]
 800a390:	9005      	str	r0, [sp, #20]
 800a392:	3307      	adds	r3, #7
 800a394:	f023 0307 	bic.w	r3, r3, #7
 800a398:	f103 0208 	add.w	r2, r3, #8
 800a39c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a3a0:	f8d4 b000 	ldr.w	fp, [r4]
 800a3a4:	f8c8 2000 	str.w	r2, [r8]
 800a3a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a3b0:	9307      	str	r3, [sp, #28]
 800a3b2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a3b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a3ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3be:	4b9c      	ldr	r3, [pc, #624]	@ (800a630 <_printf_float+0x2c8>)
 800a3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c4:	f7f6 fbb2 	bl	8000b2c <__aeabi_dcmpun>
 800a3c8:	bb70      	cbnz	r0, 800a428 <_printf_float+0xc0>
 800a3ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3ce:	4b98      	ldr	r3, [pc, #608]	@ (800a630 <_printf_float+0x2c8>)
 800a3d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d4:	f7f6 fb8c 	bl	8000af0 <__aeabi_dcmple>
 800a3d8:	bb30      	cbnz	r0, 800a428 <_printf_float+0xc0>
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4640      	mov	r0, r8
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	f7f6 fb7b 	bl	8000adc <__aeabi_dcmplt>
 800a3e6:	b110      	cbz	r0, 800a3ee <_printf_float+0x86>
 800a3e8:	232d      	movs	r3, #45	@ 0x2d
 800a3ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3ee:	4a91      	ldr	r2, [pc, #580]	@ (800a634 <_printf_float+0x2cc>)
 800a3f0:	4b91      	ldr	r3, [pc, #580]	@ (800a638 <_printf_float+0x2d0>)
 800a3f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a3f6:	bf8c      	ite	hi
 800a3f8:	4690      	movhi	r8, r2
 800a3fa:	4698      	movls	r8, r3
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	6123      	str	r3, [r4, #16]
 800a400:	f02b 0304 	bic.w	r3, fp, #4
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	f04f 0900 	mov.w	r9, #0
 800a40a:	9700      	str	r7, [sp, #0]
 800a40c:	4633      	mov	r3, r6
 800a40e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a410:	4621      	mov	r1, r4
 800a412:	4628      	mov	r0, r5
 800a414:	f000 f9d2 	bl	800a7bc <_printf_common>
 800a418:	3001      	adds	r0, #1
 800a41a:	f040 808d 	bne.w	800a538 <_printf_float+0x1d0>
 800a41e:	f04f 30ff 	mov.w	r0, #4294967295
 800a422:	b00d      	add	sp, #52	@ 0x34
 800a424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a428:	4642      	mov	r2, r8
 800a42a:	464b      	mov	r3, r9
 800a42c:	4640      	mov	r0, r8
 800a42e:	4649      	mov	r1, r9
 800a430:	f7f6 fb7c 	bl	8000b2c <__aeabi_dcmpun>
 800a434:	b140      	cbz	r0, 800a448 <_printf_float+0xe0>
 800a436:	464b      	mov	r3, r9
 800a438:	2b00      	cmp	r3, #0
 800a43a:	bfbc      	itt	lt
 800a43c:	232d      	movlt	r3, #45	@ 0x2d
 800a43e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a442:	4a7e      	ldr	r2, [pc, #504]	@ (800a63c <_printf_float+0x2d4>)
 800a444:	4b7e      	ldr	r3, [pc, #504]	@ (800a640 <_printf_float+0x2d8>)
 800a446:	e7d4      	b.n	800a3f2 <_printf_float+0x8a>
 800a448:	6863      	ldr	r3, [r4, #4]
 800a44a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a44e:	9206      	str	r2, [sp, #24]
 800a450:	1c5a      	adds	r2, r3, #1
 800a452:	d13b      	bne.n	800a4cc <_printf_float+0x164>
 800a454:	2306      	movs	r3, #6
 800a456:	6063      	str	r3, [r4, #4]
 800a458:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a45c:	2300      	movs	r3, #0
 800a45e:	6022      	str	r2, [r4, #0]
 800a460:	9303      	str	r3, [sp, #12]
 800a462:	ab0a      	add	r3, sp, #40	@ 0x28
 800a464:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a468:	ab09      	add	r3, sp, #36	@ 0x24
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	6861      	ldr	r1, [r4, #4]
 800a46e:	ec49 8b10 	vmov	d0, r8, r9
 800a472:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a476:	4628      	mov	r0, r5
 800a478:	f7ff fed6 	bl	800a228 <__cvt>
 800a47c:	9b06      	ldr	r3, [sp, #24]
 800a47e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a480:	2b47      	cmp	r3, #71	@ 0x47
 800a482:	4680      	mov	r8, r0
 800a484:	d129      	bne.n	800a4da <_printf_float+0x172>
 800a486:	1cc8      	adds	r0, r1, #3
 800a488:	db02      	blt.n	800a490 <_printf_float+0x128>
 800a48a:	6863      	ldr	r3, [r4, #4]
 800a48c:	4299      	cmp	r1, r3
 800a48e:	dd41      	ble.n	800a514 <_printf_float+0x1ac>
 800a490:	f1aa 0a02 	sub.w	sl, sl, #2
 800a494:	fa5f fa8a 	uxtb.w	sl, sl
 800a498:	3901      	subs	r1, #1
 800a49a:	4652      	mov	r2, sl
 800a49c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a4a0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4a2:	f7ff ff26 	bl	800a2f2 <__exponent>
 800a4a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4a8:	1813      	adds	r3, r2, r0
 800a4aa:	2a01      	cmp	r2, #1
 800a4ac:	4681      	mov	r9, r0
 800a4ae:	6123      	str	r3, [r4, #16]
 800a4b0:	dc02      	bgt.n	800a4b8 <_printf_float+0x150>
 800a4b2:	6822      	ldr	r2, [r4, #0]
 800a4b4:	07d2      	lsls	r2, r2, #31
 800a4b6:	d501      	bpl.n	800a4bc <_printf_float+0x154>
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	6123      	str	r3, [r4, #16]
 800a4bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d0a2      	beq.n	800a40a <_printf_float+0xa2>
 800a4c4:	232d      	movs	r3, #45	@ 0x2d
 800a4c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4ca:	e79e      	b.n	800a40a <_printf_float+0xa2>
 800a4cc:	9a06      	ldr	r2, [sp, #24]
 800a4ce:	2a47      	cmp	r2, #71	@ 0x47
 800a4d0:	d1c2      	bne.n	800a458 <_printf_float+0xf0>
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1c0      	bne.n	800a458 <_printf_float+0xf0>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e7bd      	b.n	800a456 <_printf_float+0xee>
 800a4da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a4de:	d9db      	bls.n	800a498 <_printf_float+0x130>
 800a4e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a4e4:	d118      	bne.n	800a518 <_printf_float+0x1b0>
 800a4e6:	2900      	cmp	r1, #0
 800a4e8:	6863      	ldr	r3, [r4, #4]
 800a4ea:	dd0b      	ble.n	800a504 <_printf_float+0x19c>
 800a4ec:	6121      	str	r1, [r4, #16]
 800a4ee:	b913      	cbnz	r3, 800a4f6 <_printf_float+0x18e>
 800a4f0:	6822      	ldr	r2, [r4, #0]
 800a4f2:	07d0      	lsls	r0, r2, #31
 800a4f4:	d502      	bpl.n	800a4fc <_printf_float+0x194>
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	440b      	add	r3, r1
 800a4fa:	6123      	str	r3, [r4, #16]
 800a4fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a4fe:	f04f 0900 	mov.w	r9, #0
 800a502:	e7db      	b.n	800a4bc <_printf_float+0x154>
 800a504:	b913      	cbnz	r3, 800a50c <_printf_float+0x1a4>
 800a506:	6822      	ldr	r2, [r4, #0]
 800a508:	07d2      	lsls	r2, r2, #31
 800a50a:	d501      	bpl.n	800a510 <_printf_float+0x1a8>
 800a50c:	3302      	adds	r3, #2
 800a50e:	e7f4      	b.n	800a4fa <_printf_float+0x192>
 800a510:	2301      	movs	r3, #1
 800a512:	e7f2      	b.n	800a4fa <_printf_float+0x192>
 800a514:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a51a:	4299      	cmp	r1, r3
 800a51c:	db05      	blt.n	800a52a <_printf_float+0x1c2>
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	6121      	str	r1, [r4, #16]
 800a522:	07d8      	lsls	r0, r3, #31
 800a524:	d5ea      	bpl.n	800a4fc <_printf_float+0x194>
 800a526:	1c4b      	adds	r3, r1, #1
 800a528:	e7e7      	b.n	800a4fa <_printf_float+0x192>
 800a52a:	2900      	cmp	r1, #0
 800a52c:	bfd4      	ite	le
 800a52e:	f1c1 0202 	rsble	r2, r1, #2
 800a532:	2201      	movgt	r2, #1
 800a534:	4413      	add	r3, r2
 800a536:	e7e0      	b.n	800a4fa <_printf_float+0x192>
 800a538:	6823      	ldr	r3, [r4, #0]
 800a53a:	055a      	lsls	r2, r3, #21
 800a53c:	d407      	bmi.n	800a54e <_printf_float+0x1e6>
 800a53e:	6923      	ldr	r3, [r4, #16]
 800a540:	4642      	mov	r2, r8
 800a542:	4631      	mov	r1, r6
 800a544:	4628      	mov	r0, r5
 800a546:	47b8      	blx	r7
 800a548:	3001      	adds	r0, #1
 800a54a:	d12b      	bne.n	800a5a4 <_printf_float+0x23c>
 800a54c:	e767      	b.n	800a41e <_printf_float+0xb6>
 800a54e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a552:	f240 80dd 	bls.w	800a710 <_printf_float+0x3a8>
 800a556:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a55a:	2200      	movs	r2, #0
 800a55c:	2300      	movs	r3, #0
 800a55e:	f7f6 fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a562:	2800      	cmp	r0, #0
 800a564:	d033      	beq.n	800a5ce <_printf_float+0x266>
 800a566:	4a37      	ldr	r2, [pc, #220]	@ (800a644 <_printf_float+0x2dc>)
 800a568:	2301      	movs	r3, #1
 800a56a:	4631      	mov	r1, r6
 800a56c:	4628      	mov	r0, r5
 800a56e:	47b8      	blx	r7
 800a570:	3001      	adds	r0, #1
 800a572:	f43f af54 	beq.w	800a41e <_printf_float+0xb6>
 800a576:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a57a:	4543      	cmp	r3, r8
 800a57c:	db02      	blt.n	800a584 <_printf_float+0x21c>
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	07d8      	lsls	r0, r3, #31
 800a582:	d50f      	bpl.n	800a5a4 <_printf_float+0x23c>
 800a584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a588:	4631      	mov	r1, r6
 800a58a:	4628      	mov	r0, r5
 800a58c:	47b8      	blx	r7
 800a58e:	3001      	adds	r0, #1
 800a590:	f43f af45 	beq.w	800a41e <_printf_float+0xb6>
 800a594:	f04f 0900 	mov.w	r9, #0
 800a598:	f108 38ff 	add.w	r8, r8, #4294967295
 800a59c:	f104 0a1a 	add.w	sl, r4, #26
 800a5a0:	45c8      	cmp	r8, r9
 800a5a2:	dc09      	bgt.n	800a5b8 <_printf_float+0x250>
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	079b      	lsls	r3, r3, #30
 800a5a8:	f100 8103 	bmi.w	800a7b2 <_printf_float+0x44a>
 800a5ac:	68e0      	ldr	r0, [r4, #12]
 800a5ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5b0:	4298      	cmp	r0, r3
 800a5b2:	bfb8      	it	lt
 800a5b4:	4618      	movlt	r0, r3
 800a5b6:	e734      	b.n	800a422 <_printf_float+0xba>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	4631      	mov	r1, r6
 800a5be:	4628      	mov	r0, r5
 800a5c0:	47b8      	blx	r7
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	f43f af2b 	beq.w	800a41e <_printf_float+0xb6>
 800a5c8:	f109 0901 	add.w	r9, r9, #1
 800a5cc:	e7e8      	b.n	800a5a0 <_printf_float+0x238>
 800a5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	dc39      	bgt.n	800a648 <_printf_float+0x2e0>
 800a5d4:	4a1b      	ldr	r2, [pc, #108]	@ (800a644 <_printf_float+0x2dc>)
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	4631      	mov	r1, r6
 800a5da:	4628      	mov	r0, r5
 800a5dc:	47b8      	blx	r7
 800a5de:	3001      	adds	r0, #1
 800a5e0:	f43f af1d 	beq.w	800a41e <_printf_float+0xb6>
 800a5e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a5e8:	ea59 0303 	orrs.w	r3, r9, r3
 800a5ec:	d102      	bne.n	800a5f4 <_printf_float+0x28c>
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	07d9      	lsls	r1, r3, #31
 800a5f2:	d5d7      	bpl.n	800a5a4 <_printf_float+0x23c>
 800a5f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5f8:	4631      	mov	r1, r6
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	47b8      	blx	r7
 800a5fe:	3001      	adds	r0, #1
 800a600:	f43f af0d 	beq.w	800a41e <_printf_float+0xb6>
 800a604:	f04f 0a00 	mov.w	sl, #0
 800a608:	f104 0b1a 	add.w	fp, r4, #26
 800a60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a60e:	425b      	negs	r3, r3
 800a610:	4553      	cmp	r3, sl
 800a612:	dc01      	bgt.n	800a618 <_printf_float+0x2b0>
 800a614:	464b      	mov	r3, r9
 800a616:	e793      	b.n	800a540 <_printf_float+0x1d8>
 800a618:	2301      	movs	r3, #1
 800a61a:	465a      	mov	r2, fp
 800a61c:	4631      	mov	r1, r6
 800a61e:	4628      	mov	r0, r5
 800a620:	47b8      	blx	r7
 800a622:	3001      	adds	r0, #1
 800a624:	f43f aefb 	beq.w	800a41e <_printf_float+0xb6>
 800a628:	f10a 0a01 	add.w	sl, sl, #1
 800a62c:	e7ee      	b.n	800a60c <_printf_float+0x2a4>
 800a62e:	bf00      	nop
 800a630:	7fefffff 	.word	0x7fefffff
 800a634:	0800eaf4 	.word	0x0800eaf4
 800a638:	0800eaf0 	.word	0x0800eaf0
 800a63c:	0800eafc 	.word	0x0800eafc
 800a640:	0800eaf8 	.word	0x0800eaf8
 800a644:	0800eb00 	.word	0x0800eb00
 800a648:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a64a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a64e:	4553      	cmp	r3, sl
 800a650:	bfa8      	it	ge
 800a652:	4653      	movge	r3, sl
 800a654:	2b00      	cmp	r3, #0
 800a656:	4699      	mov	r9, r3
 800a658:	dc36      	bgt.n	800a6c8 <_printf_float+0x360>
 800a65a:	f04f 0b00 	mov.w	fp, #0
 800a65e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a662:	f104 021a 	add.w	r2, r4, #26
 800a666:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a668:	9306      	str	r3, [sp, #24]
 800a66a:	eba3 0309 	sub.w	r3, r3, r9
 800a66e:	455b      	cmp	r3, fp
 800a670:	dc31      	bgt.n	800a6d6 <_printf_float+0x36e>
 800a672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a674:	459a      	cmp	sl, r3
 800a676:	dc3a      	bgt.n	800a6ee <_printf_float+0x386>
 800a678:	6823      	ldr	r3, [r4, #0]
 800a67a:	07da      	lsls	r2, r3, #31
 800a67c:	d437      	bmi.n	800a6ee <_printf_float+0x386>
 800a67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a680:	ebaa 0903 	sub.w	r9, sl, r3
 800a684:	9b06      	ldr	r3, [sp, #24]
 800a686:	ebaa 0303 	sub.w	r3, sl, r3
 800a68a:	4599      	cmp	r9, r3
 800a68c:	bfa8      	it	ge
 800a68e:	4699      	movge	r9, r3
 800a690:	f1b9 0f00 	cmp.w	r9, #0
 800a694:	dc33      	bgt.n	800a6fe <_printf_float+0x396>
 800a696:	f04f 0800 	mov.w	r8, #0
 800a69a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a69e:	f104 0b1a 	add.w	fp, r4, #26
 800a6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a4:	ebaa 0303 	sub.w	r3, sl, r3
 800a6a8:	eba3 0309 	sub.w	r3, r3, r9
 800a6ac:	4543      	cmp	r3, r8
 800a6ae:	f77f af79 	ble.w	800a5a4 <_printf_float+0x23c>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	465a      	mov	r2, fp
 800a6b6:	4631      	mov	r1, r6
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	47b8      	blx	r7
 800a6bc:	3001      	adds	r0, #1
 800a6be:	f43f aeae 	beq.w	800a41e <_printf_float+0xb6>
 800a6c2:	f108 0801 	add.w	r8, r8, #1
 800a6c6:	e7ec      	b.n	800a6a2 <_printf_float+0x33a>
 800a6c8:	4642      	mov	r2, r8
 800a6ca:	4631      	mov	r1, r6
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	47b8      	blx	r7
 800a6d0:	3001      	adds	r0, #1
 800a6d2:	d1c2      	bne.n	800a65a <_printf_float+0x2f2>
 800a6d4:	e6a3      	b.n	800a41e <_printf_float+0xb6>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	4631      	mov	r1, r6
 800a6da:	4628      	mov	r0, r5
 800a6dc:	9206      	str	r2, [sp, #24]
 800a6de:	47b8      	blx	r7
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	f43f ae9c 	beq.w	800a41e <_printf_float+0xb6>
 800a6e6:	9a06      	ldr	r2, [sp, #24]
 800a6e8:	f10b 0b01 	add.w	fp, fp, #1
 800a6ec:	e7bb      	b.n	800a666 <_printf_float+0x2fe>
 800a6ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6f2:	4631      	mov	r1, r6
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	47b8      	blx	r7
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d1c0      	bne.n	800a67e <_printf_float+0x316>
 800a6fc:	e68f      	b.n	800a41e <_printf_float+0xb6>
 800a6fe:	9a06      	ldr	r2, [sp, #24]
 800a700:	464b      	mov	r3, r9
 800a702:	4442      	add	r2, r8
 800a704:	4631      	mov	r1, r6
 800a706:	4628      	mov	r0, r5
 800a708:	47b8      	blx	r7
 800a70a:	3001      	adds	r0, #1
 800a70c:	d1c3      	bne.n	800a696 <_printf_float+0x32e>
 800a70e:	e686      	b.n	800a41e <_printf_float+0xb6>
 800a710:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a714:	f1ba 0f01 	cmp.w	sl, #1
 800a718:	dc01      	bgt.n	800a71e <_printf_float+0x3b6>
 800a71a:	07db      	lsls	r3, r3, #31
 800a71c:	d536      	bpl.n	800a78c <_printf_float+0x424>
 800a71e:	2301      	movs	r3, #1
 800a720:	4642      	mov	r2, r8
 800a722:	4631      	mov	r1, r6
 800a724:	4628      	mov	r0, r5
 800a726:	47b8      	blx	r7
 800a728:	3001      	adds	r0, #1
 800a72a:	f43f ae78 	beq.w	800a41e <_printf_float+0xb6>
 800a72e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a732:	4631      	mov	r1, r6
 800a734:	4628      	mov	r0, r5
 800a736:	47b8      	blx	r7
 800a738:	3001      	adds	r0, #1
 800a73a:	f43f ae70 	beq.w	800a41e <_printf_float+0xb6>
 800a73e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a742:	2200      	movs	r2, #0
 800a744:	2300      	movs	r3, #0
 800a746:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a74a:	f7f6 f9bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800a74e:	b9c0      	cbnz	r0, 800a782 <_printf_float+0x41a>
 800a750:	4653      	mov	r3, sl
 800a752:	f108 0201 	add.w	r2, r8, #1
 800a756:	4631      	mov	r1, r6
 800a758:	4628      	mov	r0, r5
 800a75a:	47b8      	blx	r7
 800a75c:	3001      	adds	r0, #1
 800a75e:	d10c      	bne.n	800a77a <_printf_float+0x412>
 800a760:	e65d      	b.n	800a41e <_printf_float+0xb6>
 800a762:	2301      	movs	r3, #1
 800a764:	465a      	mov	r2, fp
 800a766:	4631      	mov	r1, r6
 800a768:	4628      	mov	r0, r5
 800a76a:	47b8      	blx	r7
 800a76c:	3001      	adds	r0, #1
 800a76e:	f43f ae56 	beq.w	800a41e <_printf_float+0xb6>
 800a772:	f108 0801 	add.w	r8, r8, #1
 800a776:	45d0      	cmp	r8, sl
 800a778:	dbf3      	blt.n	800a762 <_printf_float+0x3fa>
 800a77a:	464b      	mov	r3, r9
 800a77c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a780:	e6df      	b.n	800a542 <_printf_float+0x1da>
 800a782:	f04f 0800 	mov.w	r8, #0
 800a786:	f104 0b1a 	add.w	fp, r4, #26
 800a78a:	e7f4      	b.n	800a776 <_printf_float+0x40e>
 800a78c:	2301      	movs	r3, #1
 800a78e:	4642      	mov	r2, r8
 800a790:	e7e1      	b.n	800a756 <_printf_float+0x3ee>
 800a792:	2301      	movs	r3, #1
 800a794:	464a      	mov	r2, r9
 800a796:	4631      	mov	r1, r6
 800a798:	4628      	mov	r0, r5
 800a79a:	47b8      	blx	r7
 800a79c:	3001      	adds	r0, #1
 800a79e:	f43f ae3e 	beq.w	800a41e <_printf_float+0xb6>
 800a7a2:	f108 0801 	add.w	r8, r8, #1
 800a7a6:	68e3      	ldr	r3, [r4, #12]
 800a7a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7aa:	1a5b      	subs	r3, r3, r1
 800a7ac:	4543      	cmp	r3, r8
 800a7ae:	dcf0      	bgt.n	800a792 <_printf_float+0x42a>
 800a7b0:	e6fc      	b.n	800a5ac <_printf_float+0x244>
 800a7b2:	f04f 0800 	mov.w	r8, #0
 800a7b6:	f104 0919 	add.w	r9, r4, #25
 800a7ba:	e7f4      	b.n	800a7a6 <_printf_float+0x43e>

0800a7bc <_printf_common>:
 800a7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c0:	4616      	mov	r6, r2
 800a7c2:	4698      	mov	r8, r3
 800a7c4:	688a      	ldr	r2, [r1, #8]
 800a7c6:	690b      	ldr	r3, [r1, #16]
 800a7c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	bfb8      	it	lt
 800a7d0:	4613      	movlt	r3, r2
 800a7d2:	6033      	str	r3, [r6, #0]
 800a7d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a7d8:	4607      	mov	r7, r0
 800a7da:	460c      	mov	r4, r1
 800a7dc:	b10a      	cbz	r2, 800a7e2 <_printf_common+0x26>
 800a7de:	3301      	adds	r3, #1
 800a7e0:	6033      	str	r3, [r6, #0]
 800a7e2:	6823      	ldr	r3, [r4, #0]
 800a7e4:	0699      	lsls	r1, r3, #26
 800a7e6:	bf42      	ittt	mi
 800a7e8:	6833      	ldrmi	r3, [r6, #0]
 800a7ea:	3302      	addmi	r3, #2
 800a7ec:	6033      	strmi	r3, [r6, #0]
 800a7ee:	6825      	ldr	r5, [r4, #0]
 800a7f0:	f015 0506 	ands.w	r5, r5, #6
 800a7f4:	d106      	bne.n	800a804 <_printf_common+0x48>
 800a7f6:	f104 0a19 	add.w	sl, r4, #25
 800a7fa:	68e3      	ldr	r3, [r4, #12]
 800a7fc:	6832      	ldr	r2, [r6, #0]
 800a7fe:	1a9b      	subs	r3, r3, r2
 800a800:	42ab      	cmp	r3, r5
 800a802:	dc26      	bgt.n	800a852 <_printf_common+0x96>
 800a804:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a808:	6822      	ldr	r2, [r4, #0]
 800a80a:	3b00      	subs	r3, #0
 800a80c:	bf18      	it	ne
 800a80e:	2301      	movne	r3, #1
 800a810:	0692      	lsls	r2, r2, #26
 800a812:	d42b      	bmi.n	800a86c <_printf_common+0xb0>
 800a814:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a818:	4641      	mov	r1, r8
 800a81a:	4638      	mov	r0, r7
 800a81c:	47c8      	blx	r9
 800a81e:	3001      	adds	r0, #1
 800a820:	d01e      	beq.n	800a860 <_printf_common+0xa4>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	6922      	ldr	r2, [r4, #16]
 800a826:	f003 0306 	and.w	r3, r3, #6
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	bf02      	ittt	eq
 800a82e:	68e5      	ldreq	r5, [r4, #12]
 800a830:	6833      	ldreq	r3, [r6, #0]
 800a832:	1aed      	subeq	r5, r5, r3
 800a834:	68a3      	ldr	r3, [r4, #8]
 800a836:	bf0c      	ite	eq
 800a838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a83c:	2500      	movne	r5, #0
 800a83e:	4293      	cmp	r3, r2
 800a840:	bfc4      	itt	gt
 800a842:	1a9b      	subgt	r3, r3, r2
 800a844:	18ed      	addgt	r5, r5, r3
 800a846:	2600      	movs	r6, #0
 800a848:	341a      	adds	r4, #26
 800a84a:	42b5      	cmp	r5, r6
 800a84c:	d11a      	bne.n	800a884 <_printf_common+0xc8>
 800a84e:	2000      	movs	r0, #0
 800a850:	e008      	b.n	800a864 <_printf_common+0xa8>
 800a852:	2301      	movs	r3, #1
 800a854:	4652      	mov	r2, sl
 800a856:	4641      	mov	r1, r8
 800a858:	4638      	mov	r0, r7
 800a85a:	47c8      	blx	r9
 800a85c:	3001      	adds	r0, #1
 800a85e:	d103      	bne.n	800a868 <_printf_common+0xac>
 800a860:	f04f 30ff 	mov.w	r0, #4294967295
 800a864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a868:	3501      	adds	r5, #1
 800a86a:	e7c6      	b.n	800a7fa <_printf_common+0x3e>
 800a86c:	18e1      	adds	r1, r4, r3
 800a86e:	1c5a      	adds	r2, r3, #1
 800a870:	2030      	movs	r0, #48	@ 0x30
 800a872:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a876:	4422      	add	r2, r4
 800a878:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a87c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a880:	3302      	adds	r3, #2
 800a882:	e7c7      	b.n	800a814 <_printf_common+0x58>
 800a884:	2301      	movs	r3, #1
 800a886:	4622      	mov	r2, r4
 800a888:	4641      	mov	r1, r8
 800a88a:	4638      	mov	r0, r7
 800a88c:	47c8      	blx	r9
 800a88e:	3001      	adds	r0, #1
 800a890:	d0e6      	beq.n	800a860 <_printf_common+0xa4>
 800a892:	3601      	adds	r6, #1
 800a894:	e7d9      	b.n	800a84a <_printf_common+0x8e>
	...

0800a898 <_printf_i>:
 800a898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a89c:	7e0f      	ldrb	r7, [r1, #24]
 800a89e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8a0:	2f78      	cmp	r7, #120	@ 0x78
 800a8a2:	4691      	mov	r9, r2
 800a8a4:	4680      	mov	r8, r0
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	469a      	mov	sl, r3
 800a8aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8ae:	d807      	bhi.n	800a8c0 <_printf_i+0x28>
 800a8b0:	2f62      	cmp	r7, #98	@ 0x62
 800a8b2:	d80a      	bhi.n	800a8ca <_printf_i+0x32>
 800a8b4:	2f00      	cmp	r7, #0
 800a8b6:	f000 80d1 	beq.w	800aa5c <_printf_i+0x1c4>
 800a8ba:	2f58      	cmp	r7, #88	@ 0x58
 800a8bc:	f000 80b8 	beq.w	800aa30 <_printf_i+0x198>
 800a8c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8c8:	e03a      	b.n	800a940 <_printf_i+0xa8>
 800a8ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8ce:	2b15      	cmp	r3, #21
 800a8d0:	d8f6      	bhi.n	800a8c0 <_printf_i+0x28>
 800a8d2:	a101      	add	r1, pc, #4	@ (adr r1, 800a8d8 <_printf_i+0x40>)
 800a8d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8d8:	0800a931 	.word	0x0800a931
 800a8dc:	0800a945 	.word	0x0800a945
 800a8e0:	0800a8c1 	.word	0x0800a8c1
 800a8e4:	0800a8c1 	.word	0x0800a8c1
 800a8e8:	0800a8c1 	.word	0x0800a8c1
 800a8ec:	0800a8c1 	.word	0x0800a8c1
 800a8f0:	0800a945 	.word	0x0800a945
 800a8f4:	0800a8c1 	.word	0x0800a8c1
 800a8f8:	0800a8c1 	.word	0x0800a8c1
 800a8fc:	0800a8c1 	.word	0x0800a8c1
 800a900:	0800a8c1 	.word	0x0800a8c1
 800a904:	0800aa43 	.word	0x0800aa43
 800a908:	0800a96f 	.word	0x0800a96f
 800a90c:	0800a9fd 	.word	0x0800a9fd
 800a910:	0800a8c1 	.word	0x0800a8c1
 800a914:	0800a8c1 	.word	0x0800a8c1
 800a918:	0800aa65 	.word	0x0800aa65
 800a91c:	0800a8c1 	.word	0x0800a8c1
 800a920:	0800a96f 	.word	0x0800a96f
 800a924:	0800a8c1 	.word	0x0800a8c1
 800a928:	0800a8c1 	.word	0x0800a8c1
 800a92c:	0800aa05 	.word	0x0800aa05
 800a930:	6833      	ldr	r3, [r6, #0]
 800a932:	1d1a      	adds	r2, r3, #4
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	6032      	str	r2, [r6, #0]
 800a938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a93c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a940:	2301      	movs	r3, #1
 800a942:	e09c      	b.n	800aa7e <_printf_i+0x1e6>
 800a944:	6833      	ldr	r3, [r6, #0]
 800a946:	6820      	ldr	r0, [r4, #0]
 800a948:	1d19      	adds	r1, r3, #4
 800a94a:	6031      	str	r1, [r6, #0]
 800a94c:	0606      	lsls	r6, r0, #24
 800a94e:	d501      	bpl.n	800a954 <_printf_i+0xbc>
 800a950:	681d      	ldr	r5, [r3, #0]
 800a952:	e003      	b.n	800a95c <_printf_i+0xc4>
 800a954:	0645      	lsls	r5, r0, #25
 800a956:	d5fb      	bpl.n	800a950 <_printf_i+0xb8>
 800a958:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a95c:	2d00      	cmp	r5, #0
 800a95e:	da03      	bge.n	800a968 <_printf_i+0xd0>
 800a960:	232d      	movs	r3, #45	@ 0x2d
 800a962:	426d      	negs	r5, r5
 800a964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a968:	4858      	ldr	r0, [pc, #352]	@ (800aacc <_printf_i+0x234>)
 800a96a:	230a      	movs	r3, #10
 800a96c:	e011      	b.n	800a992 <_printf_i+0xfa>
 800a96e:	6821      	ldr	r1, [r4, #0]
 800a970:	6833      	ldr	r3, [r6, #0]
 800a972:	0608      	lsls	r0, r1, #24
 800a974:	f853 5b04 	ldr.w	r5, [r3], #4
 800a978:	d402      	bmi.n	800a980 <_printf_i+0xe8>
 800a97a:	0649      	lsls	r1, r1, #25
 800a97c:	bf48      	it	mi
 800a97e:	b2ad      	uxthmi	r5, r5
 800a980:	2f6f      	cmp	r7, #111	@ 0x6f
 800a982:	4852      	ldr	r0, [pc, #328]	@ (800aacc <_printf_i+0x234>)
 800a984:	6033      	str	r3, [r6, #0]
 800a986:	bf14      	ite	ne
 800a988:	230a      	movne	r3, #10
 800a98a:	2308      	moveq	r3, #8
 800a98c:	2100      	movs	r1, #0
 800a98e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a992:	6866      	ldr	r6, [r4, #4]
 800a994:	60a6      	str	r6, [r4, #8]
 800a996:	2e00      	cmp	r6, #0
 800a998:	db05      	blt.n	800a9a6 <_printf_i+0x10e>
 800a99a:	6821      	ldr	r1, [r4, #0]
 800a99c:	432e      	orrs	r6, r5
 800a99e:	f021 0104 	bic.w	r1, r1, #4
 800a9a2:	6021      	str	r1, [r4, #0]
 800a9a4:	d04b      	beq.n	800aa3e <_printf_i+0x1a6>
 800a9a6:	4616      	mov	r6, r2
 800a9a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9ac:	fb03 5711 	mls	r7, r3, r1, r5
 800a9b0:	5dc7      	ldrb	r7, [r0, r7]
 800a9b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9b6:	462f      	mov	r7, r5
 800a9b8:	42bb      	cmp	r3, r7
 800a9ba:	460d      	mov	r5, r1
 800a9bc:	d9f4      	bls.n	800a9a8 <_printf_i+0x110>
 800a9be:	2b08      	cmp	r3, #8
 800a9c0:	d10b      	bne.n	800a9da <_printf_i+0x142>
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	07df      	lsls	r7, r3, #31
 800a9c6:	d508      	bpl.n	800a9da <_printf_i+0x142>
 800a9c8:	6923      	ldr	r3, [r4, #16]
 800a9ca:	6861      	ldr	r1, [r4, #4]
 800a9cc:	4299      	cmp	r1, r3
 800a9ce:	bfde      	ittt	le
 800a9d0:	2330      	movle	r3, #48	@ 0x30
 800a9d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9da:	1b92      	subs	r2, r2, r6
 800a9dc:	6122      	str	r2, [r4, #16]
 800a9de:	f8cd a000 	str.w	sl, [sp]
 800a9e2:	464b      	mov	r3, r9
 800a9e4:	aa03      	add	r2, sp, #12
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	4640      	mov	r0, r8
 800a9ea:	f7ff fee7 	bl	800a7bc <_printf_common>
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	d14a      	bne.n	800aa88 <_printf_i+0x1f0>
 800a9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f6:	b004      	add	sp, #16
 800a9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9fc:	6823      	ldr	r3, [r4, #0]
 800a9fe:	f043 0320 	orr.w	r3, r3, #32
 800aa02:	6023      	str	r3, [r4, #0]
 800aa04:	4832      	ldr	r0, [pc, #200]	@ (800aad0 <_printf_i+0x238>)
 800aa06:	2778      	movs	r7, #120	@ 0x78
 800aa08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	6831      	ldr	r1, [r6, #0]
 800aa10:	061f      	lsls	r7, r3, #24
 800aa12:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa16:	d402      	bmi.n	800aa1e <_printf_i+0x186>
 800aa18:	065f      	lsls	r7, r3, #25
 800aa1a:	bf48      	it	mi
 800aa1c:	b2ad      	uxthmi	r5, r5
 800aa1e:	6031      	str	r1, [r6, #0]
 800aa20:	07d9      	lsls	r1, r3, #31
 800aa22:	bf44      	itt	mi
 800aa24:	f043 0320 	orrmi.w	r3, r3, #32
 800aa28:	6023      	strmi	r3, [r4, #0]
 800aa2a:	b11d      	cbz	r5, 800aa34 <_printf_i+0x19c>
 800aa2c:	2310      	movs	r3, #16
 800aa2e:	e7ad      	b.n	800a98c <_printf_i+0xf4>
 800aa30:	4826      	ldr	r0, [pc, #152]	@ (800aacc <_printf_i+0x234>)
 800aa32:	e7e9      	b.n	800aa08 <_printf_i+0x170>
 800aa34:	6823      	ldr	r3, [r4, #0]
 800aa36:	f023 0320 	bic.w	r3, r3, #32
 800aa3a:	6023      	str	r3, [r4, #0]
 800aa3c:	e7f6      	b.n	800aa2c <_printf_i+0x194>
 800aa3e:	4616      	mov	r6, r2
 800aa40:	e7bd      	b.n	800a9be <_printf_i+0x126>
 800aa42:	6833      	ldr	r3, [r6, #0]
 800aa44:	6825      	ldr	r5, [r4, #0]
 800aa46:	6961      	ldr	r1, [r4, #20]
 800aa48:	1d18      	adds	r0, r3, #4
 800aa4a:	6030      	str	r0, [r6, #0]
 800aa4c:	062e      	lsls	r6, r5, #24
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	d501      	bpl.n	800aa56 <_printf_i+0x1be>
 800aa52:	6019      	str	r1, [r3, #0]
 800aa54:	e002      	b.n	800aa5c <_printf_i+0x1c4>
 800aa56:	0668      	lsls	r0, r5, #25
 800aa58:	d5fb      	bpl.n	800aa52 <_printf_i+0x1ba>
 800aa5a:	8019      	strh	r1, [r3, #0]
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	6123      	str	r3, [r4, #16]
 800aa60:	4616      	mov	r6, r2
 800aa62:	e7bc      	b.n	800a9de <_printf_i+0x146>
 800aa64:	6833      	ldr	r3, [r6, #0]
 800aa66:	1d1a      	adds	r2, r3, #4
 800aa68:	6032      	str	r2, [r6, #0]
 800aa6a:	681e      	ldr	r6, [r3, #0]
 800aa6c:	6862      	ldr	r2, [r4, #4]
 800aa6e:	2100      	movs	r1, #0
 800aa70:	4630      	mov	r0, r6
 800aa72:	f7f5 fbad 	bl	80001d0 <memchr>
 800aa76:	b108      	cbz	r0, 800aa7c <_printf_i+0x1e4>
 800aa78:	1b80      	subs	r0, r0, r6
 800aa7a:	6060      	str	r0, [r4, #4]
 800aa7c:	6863      	ldr	r3, [r4, #4]
 800aa7e:	6123      	str	r3, [r4, #16]
 800aa80:	2300      	movs	r3, #0
 800aa82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa86:	e7aa      	b.n	800a9de <_printf_i+0x146>
 800aa88:	6923      	ldr	r3, [r4, #16]
 800aa8a:	4632      	mov	r2, r6
 800aa8c:	4649      	mov	r1, r9
 800aa8e:	4640      	mov	r0, r8
 800aa90:	47d0      	blx	sl
 800aa92:	3001      	adds	r0, #1
 800aa94:	d0ad      	beq.n	800a9f2 <_printf_i+0x15a>
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	079b      	lsls	r3, r3, #30
 800aa9a:	d413      	bmi.n	800aac4 <_printf_i+0x22c>
 800aa9c:	68e0      	ldr	r0, [r4, #12]
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	4298      	cmp	r0, r3
 800aaa2:	bfb8      	it	lt
 800aaa4:	4618      	movlt	r0, r3
 800aaa6:	e7a6      	b.n	800a9f6 <_printf_i+0x15e>
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	4632      	mov	r2, r6
 800aaac:	4649      	mov	r1, r9
 800aaae:	4640      	mov	r0, r8
 800aab0:	47d0      	blx	sl
 800aab2:	3001      	adds	r0, #1
 800aab4:	d09d      	beq.n	800a9f2 <_printf_i+0x15a>
 800aab6:	3501      	adds	r5, #1
 800aab8:	68e3      	ldr	r3, [r4, #12]
 800aaba:	9903      	ldr	r1, [sp, #12]
 800aabc:	1a5b      	subs	r3, r3, r1
 800aabe:	42ab      	cmp	r3, r5
 800aac0:	dcf2      	bgt.n	800aaa8 <_printf_i+0x210>
 800aac2:	e7eb      	b.n	800aa9c <_printf_i+0x204>
 800aac4:	2500      	movs	r5, #0
 800aac6:	f104 0619 	add.w	r6, r4, #25
 800aaca:	e7f5      	b.n	800aab8 <_printf_i+0x220>
 800aacc:	0800eb02 	.word	0x0800eb02
 800aad0:	0800eb13 	.word	0x0800eb13

0800aad4 <_scanf_float>:
 800aad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad8:	b087      	sub	sp, #28
 800aada:	4691      	mov	r9, r2
 800aadc:	9303      	str	r3, [sp, #12]
 800aade:	688b      	ldr	r3, [r1, #8]
 800aae0:	1e5a      	subs	r2, r3, #1
 800aae2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aae6:	bf81      	itttt	hi
 800aae8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aaec:	eb03 0b05 	addhi.w	fp, r3, r5
 800aaf0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aaf4:	608b      	strhi	r3, [r1, #8]
 800aaf6:	680b      	ldr	r3, [r1, #0]
 800aaf8:	460a      	mov	r2, r1
 800aafa:	f04f 0500 	mov.w	r5, #0
 800aafe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ab02:	f842 3b1c 	str.w	r3, [r2], #28
 800ab06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	bf98      	it	ls
 800ab10:	f04f 0b00 	movls.w	fp, #0
 800ab14:	9201      	str	r2, [sp, #4]
 800ab16:	4616      	mov	r6, r2
 800ab18:	46aa      	mov	sl, r5
 800ab1a:	462f      	mov	r7, r5
 800ab1c:	9502      	str	r5, [sp, #8]
 800ab1e:	68a2      	ldr	r2, [r4, #8]
 800ab20:	b15a      	cbz	r2, 800ab3a <_scanf_float+0x66>
 800ab22:	f8d9 3000 	ldr.w	r3, [r9]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	2b4e      	cmp	r3, #78	@ 0x4e
 800ab2a:	d863      	bhi.n	800abf4 <_scanf_float+0x120>
 800ab2c:	2b40      	cmp	r3, #64	@ 0x40
 800ab2e:	d83b      	bhi.n	800aba8 <_scanf_float+0xd4>
 800ab30:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ab34:	b2c8      	uxtb	r0, r1
 800ab36:	280e      	cmp	r0, #14
 800ab38:	d939      	bls.n	800abae <_scanf_float+0xda>
 800ab3a:	b11f      	cbz	r7, 800ab44 <_scanf_float+0x70>
 800ab3c:	6823      	ldr	r3, [r4, #0]
 800ab3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab42:	6023      	str	r3, [r4, #0]
 800ab44:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab48:	f1ba 0f01 	cmp.w	sl, #1
 800ab4c:	f200 8114 	bhi.w	800ad78 <_scanf_float+0x2a4>
 800ab50:	9b01      	ldr	r3, [sp, #4]
 800ab52:	429e      	cmp	r6, r3
 800ab54:	f200 8105 	bhi.w	800ad62 <_scanf_float+0x28e>
 800ab58:	2001      	movs	r0, #1
 800ab5a:	b007      	add	sp, #28
 800ab5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab60:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ab64:	2a0d      	cmp	r2, #13
 800ab66:	d8e8      	bhi.n	800ab3a <_scanf_float+0x66>
 800ab68:	a101      	add	r1, pc, #4	@ (adr r1, 800ab70 <_scanf_float+0x9c>)
 800ab6a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ab6e:	bf00      	nop
 800ab70:	0800acb9 	.word	0x0800acb9
 800ab74:	0800ab3b 	.word	0x0800ab3b
 800ab78:	0800ab3b 	.word	0x0800ab3b
 800ab7c:	0800ab3b 	.word	0x0800ab3b
 800ab80:	0800ad15 	.word	0x0800ad15
 800ab84:	0800acef 	.word	0x0800acef
 800ab88:	0800ab3b 	.word	0x0800ab3b
 800ab8c:	0800ab3b 	.word	0x0800ab3b
 800ab90:	0800acc7 	.word	0x0800acc7
 800ab94:	0800ab3b 	.word	0x0800ab3b
 800ab98:	0800ab3b 	.word	0x0800ab3b
 800ab9c:	0800ab3b 	.word	0x0800ab3b
 800aba0:	0800ab3b 	.word	0x0800ab3b
 800aba4:	0800ac83 	.word	0x0800ac83
 800aba8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800abac:	e7da      	b.n	800ab64 <_scanf_float+0x90>
 800abae:	290e      	cmp	r1, #14
 800abb0:	d8c3      	bhi.n	800ab3a <_scanf_float+0x66>
 800abb2:	a001      	add	r0, pc, #4	@ (adr r0, 800abb8 <_scanf_float+0xe4>)
 800abb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800abb8:	0800ac73 	.word	0x0800ac73
 800abbc:	0800ab3b 	.word	0x0800ab3b
 800abc0:	0800ac73 	.word	0x0800ac73
 800abc4:	0800ad03 	.word	0x0800ad03
 800abc8:	0800ab3b 	.word	0x0800ab3b
 800abcc:	0800ac15 	.word	0x0800ac15
 800abd0:	0800ac59 	.word	0x0800ac59
 800abd4:	0800ac59 	.word	0x0800ac59
 800abd8:	0800ac59 	.word	0x0800ac59
 800abdc:	0800ac59 	.word	0x0800ac59
 800abe0:	0800ac59 	.word	0x0800ac59
 800abe4:	0800ac59 	.word	0x0800ac59
 800abe8:	0800ac59 	.word	0x0800ac59
 800abec:	0800ac59 	.word	0x0800ac59
 800abf0:	0800ac59 	.word	0x0800ac59
 800abf4:	2b6e      	cmp	r3, #110	@ 0x6e
 800abf6:	d809      	bhi.n	800ac0c <_scanf_float+0x138>
 800abf8:	2b60      	cmp	r3, #96	@ 0x60
 800abfa:	d8b1      	bhi.n	800ab60 <_scanf_float+0x8c>
 800abfc:	2b54      	cmp	r3, #84	@ 0x54
 800abfe:	d07b      	beq.n	800acf8 <_scanf_float+0x224>
 800ac00:	2b59      	cmp	r3, #89	@ 0x59
 800ac02:	d19a      	bne.n	800ab3a <_scanf_float+0x66>
 800ac04:	2d07      	cmp	r5, #7
 800ac06:	d198      	bne.n	800ab3a <_scanf_float+0x66>
 800ac08:	2508      	movs	r5, #8
 800ac0a:	e02f      	b.n	800ac6c <_scanf_float+0x198>
 800ac0c:	2b74      	cmp	r3, #116	@ 0x74
 800ac0e:	d073      	beq.n	800acf8 <_scanf_float+0x224>
 800ac10:	2b79      	cmp	r3, #121	@ 0x79
 800ac12:	e7f6      	b.n	800ac02 <_scanf_float+0x12e>
 800ac14:	6821      	ldr	r1, [r4, #0]
 800ac16:	05c8      	lsls	r0, r1, #23
 800ac18:	d51e      	bpl.n	800ac58 <_scanf_float+0x184>
 800ac1a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ac1e:	6021      	str	r1, [r4, #0]
 800ac20:	3701      	adds	r7, #1
 800ac22:	f1bb 0f00 	cmp.w	fp, #0
 800ac26:	d003      	beq.n	800ac30 <_scanf_float+0x15c>
 800ac28:	3201      	adds	r2, #1
 800ac2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac2e:	60a2      	str	r2, [r4, #8]
 800ac30:	68a3      	ldr	r3, [r4, #8]
 800ac32:	3b01      	subs	r3, #1
 800ac34:	60a3      	str	r3, [r4, #8]
 800ac36:	6923      	ldr	r3, [r4, #16]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	6123      	str	r3, [r4, #16]
 800ac3c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ac40:	3b01      	subs	r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f8c9 3004 	str.w	r3, [r9, #4]
 800ac48:	f340 8082 	ble.w	800ad50 <_scanf_float+0x27c>
 800ac4c:	f8d9 3000 	ldr.w	r3, [r9]
 800ac50:	3301      	adds	r3, #1
 800ac52:	f8c9 3000 	str.w	r3, [r9]
 800ac56:	e762      	b.n	800ab1e <_scanf_float+0x4a>
 800ac58:	eb1a 0105 	adds.w	r1, sl, r5
 800ac5c:	f47f af6d 	bne.w	800ab3a <_scanf_float+0x66>
 800ac60:	6822      	ldr	r2, [r4, #0]
 800ac62:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ac66:	6022      	str	r2, [r4, #0]
 800ac68:	460d      	mov	r5, r1
 800ac6a:	468a      	mov	sl, r1
 800ac6c:	f806 3b01 	strb.w	r3, [r6], #1
 800ac70:	e7de      	b.n	800ac30 <_scanf_float+0x15c>
 800ac72:	6822      	ldr	r2, [r4, #0]
 800ac74:	0610      	lsls	r0, r2, #24
 800ac76:	f57f af60 	bpl.w	800ab3a <_scanf_float+0x66>
 800ac7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ac7e:	6022      	str	r2, [r4, #0]
 800ac80:	e7f4      	b.n	800ac6c <_scanf_float+0x198>
 800ac82:	f1ba 0f00 	cmp.w	sl, #0
 800ac86:	d10c      	bne.n	800aca2 <_scanf_float+0x1ce>
 800ac88:	b977      	cbnz	r7, 800aca8 <_scanf_float+0x1d4>
 800ac8a:	6822      	ldr	r2, [r4, #0]
 800ac8c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ac90:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ac94:	d108      	bne.n	800aca8 <_scanf_float+0x1d4>
 800ac96:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac9a:	6022      	str	r2, [r4, #0]
 800ac9c:	f04f 0a01 	mov.w	sl, #1
 800aca0:	e7e4      	b.n	800ac6c <_scanf_float+0x198>
 800aca2:	f1ba 0f02 	cmp.w	sl, #2
 800aca6:	d050      	beq.n	800ad4a <_scanf_float+0x276>
 800aca8:	2d01      	cmp	r5, #1
 800acaa:	d002      	beq.n	800acb2 <_scanf_float+0x1de>
 800acac:	2d04      	cmp	r5, #4
 800acae:	f47f af44 	bne.w	800ab3a <_scanf_float+0x66>
 800acb2:	3501      	adds	r5, #1
 800acb4:	b2ed      	uxtb	r5, r5
 800acb6:	e7d9      	b.n	800ac6c <_scanf_float+0x198>
 800acb8:	f1ba 0f01 	cmp.w	sl, #1
 800acbc:	f47f af3d 	bne.w	800ab3a <_scanf_float+0x66>
 800acc0:	f04f 0a02 	mov.w	sl, #2
 800acc4:	e7d2      	b.n	800ac6c <_scanf_float+0x198>
 800acc6:	b975      	cbnz	r5, 800ace6 <_scanf_float+0x212>
 800acc8:	2f00      	cmp	r7, #0
 800acca:	f47f af37 	bne.w	800ab3c <_scanf_float+0x68>
 800acce:	6822      	ldr	r2, [r4, #0]
 800acd0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800acd4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800acd8:	f040 8103 	bne.w	800aee2 <_scanf_float+0x40e>
 800acdc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ace0:	6022      	str	r2, [r4, #0]
 800ace2:	2501      	movs	r5, #1
 800ace4:	e7c2      	b.n	800ac6c <_scanf_float+0x198>
 800ace6:	2d03      	cmp	r5, #3
 800ace8:	d0e3      	beq.n	800acb2 <_scanf_float+0x1de>
 800acea:	2d05      	cmp	r5, #5
 800acec:	e7df      	b.n	800acae <_scanf_float+0x1da>
 800acee:	2d02      	cmp	r5, #2
 800acf0:	f47f af23 	bne.w	800ab3a <_scanf_float+0x66>
 800acf4:	2503      	movs	r5, #3
 800acf6:	e7b9      	b.n	800ac6c <_scanf_float+0x198>
 800acf8:	2d06      	cmp	r5, #6
 800acfa:	f47f af1e 	bne.w	800ab3a <_scanf_float+0x66>
 800acfe:	2507      	movs	r5, #7
 800ad00:	e7b4      	b.n	800ac6c <_scanf_float+0x198>
 800ad02:	6822      	ldr	r2, [r4, #0]
 800ad04:	0591      	lsls	r1, r2, #22
 800ad06:	f57f af18 	bpl.w	800ab3a <_scanf_float+0x66>
 800ad0a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ad0e:	6022      	str	r2, [r4, #0]
 800ad10:	9702      	str	r7, [sp, #8]
 800ad12:	e7ab      	b.n	800ac6c <_scanf_float+0x198>
 800ad14:	6822      	ldr	r2, [r4, #0]
 800ad16:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ad1a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ad1e:	d005      	beq.n	800ad2c <_scanf_float+0x258>
 800ad20:	0550      	lsls	r0, r2, #21
 800ad22:	f57f af0a 	bpl.w	800ab3a <_scanf_float+0x66>
 800ad26:	2f00      	cmp	r7, #0
 800ad28:	f000 80db 	beq.w	800aee2 <_scanf_float+0x40e>
 800ad2c:	0591      	lsls	r1, r2, #22
 800ad2e:	bf58      	it	pl
 800ad30:	9902      	ldrpl	r1, [sp, #8]
 800ad32:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ad36:	bf58      	it	pl
 800ad38:	1a79      	subpl	r1, r7, r1
 800ad3a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ad3e:	bf58      	it	pl
 800ad40:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ad44:	6022      	str	r2, [r4, #0]
 800ad46:	2700      	movs	r7, #0
 800ad48:	e790      	b.n	800ac6c <_scanf_float+0x198>
 800ad4a:	f04f 0a03 	mov.w	sl, #3
 800ad4e:	e78d      	b.n	800ac6c <_scanf_float+0x198>
 800ad50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ad54:	4649      	mov	r1, r9
 800ad56:	4640      	mov	r0, r8
 800ad58:	4798      	blx	r3
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	f43f aedf 	beq.w	800ab1e <_scanf_float+0x4a>
 800ad60:	e6eb      	b.n	800ab3a <_scanf_float+0x66>
 800ad62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad6a:	464a      	mov	r2, r9
 800ad6c:	4640      	mov	r0, r8
 800ad6e:	4798      	blx	r3
 800ad70:	6923      	ldr	r3, [r4, #16]
 800ad72:	3b01      	subs	r3, #1
 800ad74:	6123      	str	r3, [r4, #16]
 800ad76:	e6eb      	b.n	800ab50 <_scanf_float+0x7c>
 800ad78:	1e6b      	subs	r3, r5, #1
 800ad7a:	2b06      	cmp	r3, #6
 800ad7c:	d824      	bhi.n	800adc8 <_scanf_float+0x2f4>
 800ad7e:	2d02      	cmp	r5, #2
 800ad80:	d836      	bhi.n	800adf0 <_scanf_float+0x31c>
 800ad82:	9b01      	ldr	r3, [sp, #4]
 800ad84:	429e      	cmp	r6, r3
 800ad86:	f67f aee7 	bls.w	800ab58 <_scanf_float+0x84>
 800ad8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad92:	464a      	mov	r2, r9
 800ad94:	4640      	mov	r0, r8
 800ad96:	4798      	blx	r3
 800ad98:	6923      	ldr	r3, [r4, #16]
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	6123      	str	r3, [r4, #16]
 800ad9e:	e7f0      	b.n	800ad82 <_scanf_float+0x2ae>
 800ada0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ada4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ada8:	464a      	mov	r2, r9
 800adaa:	4640      	mov	r0, r8
 800adac:	4798      	blx	r3
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	3b01      	subs	r3, #1
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adb8:	fa5f fa8a 	uxtb.w	sl, sl
 800adbc:	f1ba 0f02 	cmp.w	sl, #2
 800adc0:	d1ee      	bne.n	800ada0 <_scanf_float+0x2cc>
 800adc2:	3d03      	subs	r5, #3
 800adc4:	b2ed      	uxtb	r5, r5
 800adc6:	1b76      	subs	r6, r6, r5
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	05da      	lsls	r2, r3, #23
 800adcc:	d530      	bpl.n	800ae30 <_scanf_float+0x35c>
 800adce:	055b      	lsls	r3, r3, #21
 800add0:	d511      	bpl.n	800adf6 <_scanf_float+0x322>
 800add2:	9b01      	ldr	r3, [sp, #4]
 800add4:	429e      	cmp	r6, r3
 800add6:	f67f aebf 	bls.w	800ab58 <_scanf_float+0x84>
 800adda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800adde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ade2:	464a      	mov	r2, r9
 800ade4:	4640      	mov	r0, r8
 800ade6:	4798      	blx	r3
 800ade8:	6923      	ldr	r3, [r4, #16]
 800adea:	3b01      	subs	r3, #1
 800adec:	6123      	str	r3, [r4, #16]
 800adee:	e7f0      	b.n	800add2 <_scanf_float+0x2fe>
 800adf0:	46aa      	mov	sl, r5
 800adf2:	46b3      	mov	fp, r6
 800adf4:	e7de      	b.n	800adb4 <_scanf_float+0x2e0>
 800adf6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800adfa:	6923      	ldr	r3, [r4, #16]
 800adfc:	2965      	cmp	r1, #101	@ 0x65
 800adfe:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae02:	f106 35ff 	add.w	r5, r6, #4294967295
 800ae06:	6123      	str	r3, [r4, #16]
 800ae08:	d00c      	beq.n	800ae24 <_scanf_float+0x350>
 800ae0a:	2945      	cmp	r1, #69	@ 0x45
 800ae0c:	d00a      	beq.n	800ae24 <_scanf_float+0x350>
 800ae0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae12:	464a      	mov	r2, r9
 800ae14:	4640      	mov	r0, r8
 800ae16:	4798      	blx	r3
 800ae18:	6923      	ldr	r3, [r4, #16]
 800ae1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	1eb5      	subs	r5, r6, #2
 800ae22:	6123      	str	r3, [r4, #16]
 800ae24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae28:	464a      	mov	r2, r9
 800ae2a:	4640      	mov	r0, r8
 800ae2c:	4798      	blx	r3
 800ae2e:	462e      	mov	r6, r5
 800ae30:	6822      	ldr	r2, [r4, #0]
 800ae32:	f012 0210 	ands.w	r2, r2, #16
 800ae36:	d001      	beq.n	800ae3c <_scanf_float+0x368>
 800ae38:	2000      	movs	r0, #0
 800ae3a:	e68e      	b.n	800ab5a <_scanf_float+0x86>
 800ae3c:	7032      	strb	r2, [r6, #0]
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ae44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae48:	d125      	bne.n	800ae96 <_scanf_float+0x3c2>
 800ae4a:	9b02      	ldr	r3, [sp, #8]
 800ae4c:	429f      	cmp	r7, r3
 800ae4e:	d00a      	beq.n	800ae66 <_scanf_float+0x392>
 800ae50:	1bda      	subs	r2, r3, r7
 800ae52:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ae56:	429e      	cmp	r6, r3
 800ae58:	bf28      	it	cs
 800ae5a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ae5e:	4922      	ldr	r1, [pc, #136]	@ (800aee8 <_scanf_float+0x414>)
 800ae60:	4630      	mov	r0, r6
 800ae62:	f000 f93d 	bl	800b0e0 <siprintf>
 800ae66:	9901      	ldr	r1, [sp, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	f002 fc3c 	bl	800d6e8 <_strtod_r>
 800ae70:	9b03      	ldr	r3, [sp, #12]
 800ae72:	6821      	ldr	r1, [r4, #0]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f011 0f02 	tst.w	r1, #2
 800ae7a:	ec57 6b10 	vmov	r6, r7, d0
 800ae7e:	f103 0204 	add.w	r2, r3, #4
 800ae82:	d015      	beq.n	800aeb0 <_scanf_float+0x3dc>
 800ae84:	9903      	ldr	r1, [sp, #12]
 800ae86:	600a      	str	r2, [r1, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	e9c3 6700 	strd	r6, r7, [r3]
 800ae8e:	68e3      	ldr	r3, [r4, #12]
 800ae90:	3301      	adds	r3, #1
 800ae92:	60e3      	str	r3, [r4, #12]
 800ae94:	e7d0      	b.n	800ae38 <_scanf_float+0x364>
 800ae96:	9b04      	ldr	r3, [sp, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d0e4      	beq.n	800ae66 <_scanf_float+0x392>
 800ae9c:	9905      	ldr	r1, [sp, #20]
 800ae9e:	230a      	movs	r3, #10
 800aea0:	3101      	adds	r1, #1
 800aea2:	4640      	mov	r0, r8
 800aea4:	f002 fca0 	bl	800d7e8 <_strtol_r>
 800aea8:	9b04      	ldr	r3, [sp, #16]
 800aeaa:	9e05      	ldr	r6, [sp, #20]
 800aeac:	1ac2      	subs	r2, r0, r3
 800aeae:	e7d0      	b.n	800ae52 <_scanf_float+0x37e>
 800aeb0:	f011 0f04 	tst.w	r1, #4
 800aeb4:	9903      	ldr	r1, [sp, #12]
 800aeb6:	600a      	str	r2, [r1, #0]
 800aeb8:	d1e6      	bne.n	800ae88 <_scanf_float+0x3b4>
 800aeba:	681d      	ldr	r5, [r3, #0]
 800aebc:	4632      	mov	r2, r6
 800aebe:	463b      	mov	r3, r7
 800aec0:	4630      	mov	r0, r6
 800aec2:	4639      	mov	r1, r7
 800aec4:	f7f5 fe32 	bl	8000b2c <__aeabi_dcmpun>
 800aec8:	b128      	cbz	r0, 800aed6 <_scanf_float+0x402>
 800aeca:	4808      	ldr	r0, [pc, #32]	@ (800aeec <_scanf_float+0x418>)
 800aecc:	f000 fa00 	bl	800b2d0 <nanf>
 800aed0:	ed85 0a00 	vstr	s0, [r5]
 800aed4:	e7db      	b.n	800ae8e <_scanf_float+0x3ba>
 800aed6:	4630      	mov	r0, r6
 800aed8:	4639      	mov	r1, r7
 800aeda:	f7f5 fe85 	bl	8000be8 <__aeabi_d2f>
 800aede:	6028      	str	r0, [r5, #0]
 800aee0:	e7d5      	b.n	800ae8e <_scanf_float+0x3ba>
 800aee2:	2700      	movs	r7, #0
 800aee4:	e62e      	b.n	800ab44 <_scanf_float+0x70>
 800aee6:	bf00      	nop
 800aee8:	0800eb24 	.word	0x0800eb24
 800aeec:	0800ec65 	.word	0x0800ec65

0800aef0 <std>:
 800aef0:	2300      	movs	r3, #0
 800aef2:	b510      	push	{r4, lr}
 800aef4:	4604      	mov	r4, r0
 800aef6:	e9c0 3300 	strd	r3, r3, [r0]
 800aefa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aefe:	6083      	str	r3, [r0, #8]
 800af00:	8181      	strh	r1, [r0, #12]
 800af02:	6643      	str	r3, [r0, #100]	@ 0x64
 800af04:	81c2      	strh	r2, [r0, #14]
 800af06:	6183      	str	r3, [r0, #24]
 800af08:	4619      	mov	r1, r3
 800af0a:	2208      	movs	r2, #8
 800af0c:	305c      	adds	r0, #92	@ 0x5c
 800af0e:	f000 f94c 	bl	800b1aa <memset>
 800af12:	4b0d      	ldr	r3, [pc, #52]	@ (800af48 <std+0x58>)
 800af14:	6263      	str	r3, [r4, #36]	@ 0x24
 800af16:	4b0d      	ldr	r3, [pc, #52]	@ (800af4c <std+0x5c>)
 800af18:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af1a:	4b0d      	ldr	r3, [pc, #52]	@ (800af50 <std+0x60>)
 800af1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800af1e:	4b0d      	ldr	r3, [pc, #52]	@ (800af54 <std+0x64>)
 800af20:	6323      	str	r3, [r4, #48]	@ 0x30
 800af22:	4b0d      	ldr	r3, [pc, #52]	@ (800af58 <std+0x68>)
 800af24:	6224      	str	r4, [r4, #32]
 800af26:	429c      	cmp	r4, r3
 800af28:	d006      	beq.n	800af38 <std+0x48>
 800af2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af2e:	4294      	cmp	r4, r2
 800af30:	d002      	beq.n	800af38 <std+0x48>
 800af32:	33d0      	adds	r3, #208	@ 0xd0
 800af34:	429c      	cmp	r4, r3
 800af36:	d105      	bne.n	800af44 <std+0x54>
 800af38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af40:	f000 b9c2 	b.w	800b2c8 <__retarget_lock_init_recursive>
 800af44:	bd10      	pop	{r4, pc}
 800af46:	bf00      	nop
 800af48:	0800b125 	.word	0x0800b125
 800af4c:	0800b147 	.word	0x0800b147
 800af50:	0800b17f 	.word	0x0800b17f
 800af54:	0800b1a3 	.word	0x0800b1a3
 800af58:	20006e40 	.word	0x20006e40

0800af5c <stdio_exit_handler>:
 800af5c:	4a02      	ldr	r2, [pc, #8]	@ (800af68 <stdio_exit_handler+0xc>)
 800af5e:	4903      	ldr	r1, [pc, #12]	@ (800af6c <stdio_exit_handler+0x10>)
 800af60:	4803      	ldr	r0, [pc, #12]	@ (800af70 <stdio_exit_handler+0x14>)
 800af62:	f000 b869 	b.w	800b038 <_fwalk_sglue>
 800af66:	bf00      	nop
 800af68:	200000fc 	.word	0x200000fc
 800af6c:	0800dba5 	.word	0x0800dba5
 800af70:	2000010c 	.word	0x2000010c

0800af74 <cleanup_stdio>:
 800af74:	6841      	ldr	r1, [r0, #4]
 800af76:	4b0c      	ldr	r3, [pc, #48]	@ (800afa8 <cleanup_stdio+0x34>)
 800af78:	4299      	cmp	r1, r3
 800af7a:	b510      	push	{r4, lr}
 800af7c:	4604      	mov	r4, r0
 800af7e:	d001      	beq.n	800af84 <cleanup_stdio+0x10>
 800af80:	f002 fe10 	bl	800dba4 <_fflush_r>
 800af84:	68a1      	ldr	r1, [r4, #8]
 800af86:	4b09      	ldr	r3, [pc, #36]	@ (800afac <cleanup_stdio+0x38>)
 800af88:	4299      	cmp	r1, r3
 800af8a:	d002      	beq.n	800af92 <cleanup_stdio+0x1e>
 800af8c:	4620      	mov	r0, r4
 800af8e:	f002 fe09 	bl	800dba4 <_fflush_r>
 800af92:	68e1      	ldr	r1, [r4, #12]
 800af94:	4b06      	ldr	r3, [pc, #24]	@ (800afb0 <cleanup_stdio+0x3c>)
 800af96:	4299      	cmp	r1, r3
 800af98:	d004      	beq.n	800afa4 <cleanup_stdio+0x30>
 800af9a:	4620      	mov	r0, r4
 800af9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa0:	f002 be00 	b.w	800dba4 <_fflush_r>
 800afa4:	bd10      	pop	{r4, pc}
 800afa6:	bf00      	nop
 800afa8:	20006e40 	.word	0x20006e40
 800afac:	20006ea8 	.word	0x20006ea8
 800afb0:	20006f10 	.word	0x20006f10

0800afb4 <global_stdio_init.part.0>:
 800afb4:	b510      	push	{r4, lr}
 800afb6:	4b0b      	ldr	r3, [pc, #44]	@ (800afe4 <global_stdio_init.part.0+0x30>)
 800afb8:	4c0b      	ldr	r4, [pc, #44]	@ (800afe8 <global_stdio_init.part.0+0x34>)
 800afba:	4a0c      	ldr	r2, [pc, #48]	@ (800afec <global_stdio_init.part.0+0x38>)
 800afbc:	601a      	str	r2, [r3, #0]
 800afbe:	4620      	mov	r0, r4
 800afc0:	2200      	movs	r2, #0
 800afc2:	2104      	movs	r1, #4
 800afc4:	f7ff ff94 	bl	800aef0 <std>
 800afc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800afcc:	2201      	movs	r2, #1
 800afce:	2109      	movs	r1, #9
 800afd0:	f7ff ff8e 	bl	800aef0 <std>
 800afd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800afd8:	2202      	movs	r2, #2
 800afda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afde:	2112      	movs	r1, #18
 800afe0:	f7ff bf86 	b.w	800aef0 <std>
 800afe4:	20006f78 	.word	0x20006f78
 800afe8:	20006e40 	.word	0x20006e40
 800afec:	0800af5d 	.word	0x0800af5d

0800aff0 <__sfp_lock_acquire>:
 800aff0:	4801      	ldr	r0, [pc, #4]	@ (800aff8 <__sfp_lock_acquire+0x8>)
 800aff2:	f000 b96a 	b.w	800b2ca <__retarget_lock_acquire_recursive>
 800aff6:	bf00      	nop
 800aff8:	20006f81 	.word	0x20006f81

0800affc <__sfp_lock_release>:
 800affc:	4801      	ldr	r0, [pc, #4]	@ (800b004 <__sfp_lock_release+0x8>)
 800affe:	f000 b965 	b.w	800b2cc <__retarget_lock_release_recursive>
 800b002:	bf00      	nop
 800b004:	20006f81 	.word	0x20006f81

0800b008 <__sinit>:
 800b008:	b510      	push	{r4, lr}
 800b00a:	4604      	mov	r4, r0
 800b00c:	f7ff fff0 	bl	800aff0 <__sfp_lock_acquire>
 800b010:	6a23      	ldr	r3, [r4, #32]
 800b012:	b11b      	cbz	r3, 800b01c <__sinit+0x14>
 800b014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b018:	f7ff bff0 	b.w	800affc <__sfp_lock_release>
 800b01c:	4b04      	ldr	r3, [pc, #16]	@ (800b030 <__sinit+0x28>)
 800b01e:	6223      	str	r3, [r4, #32]
 800b020:	4b04      	ldr	r3, [pc, #16]	@ (800b034 <__sinit+0x2c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1f5      	bne.n	800b014 <__sinit+0xc>
 800b028:	f7ff ffc4 	bl	800afb4 <global_stdio_init.part.0>
 800b02c:	e7f2      	b.n	800b014 <__sinit+0xc>
 800b02e:	bf00      	nop
 800b030:	0800af75 	.word	0x0800af75
 800b034:	20006f78 	.word	0x20006f78

0800b038 <_fwalk_sglue>:
 800b038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b03c:	4607      	mov	r7, r0
 800b03e:	4688      	mov	r8, r1
 800b040:	4614      	mov	r4, r2
 800b042:	2600      	movs	r6, #0
 800b044:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b048:	f1b9 0901 	subs.w	r9, r9, #1
 800b04c:	d505      	bpl.n	800b05a <_fwalk_sglue+0x22>
 800b04e:	6824      	ldr	r4, [r4, #0]
 800b050:	2c00      	cmp	r4, #0
 800b052:	d1f7      	bne.n	800b044 <_fwalk_sglue+0xc>
 800b054:	4630      	mov	r0, r6
 800b056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b05a:	89ab      	ldrh	r3, [r5, #12]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d907      	bls.n	800b070 <_fwalk_sglue+0x38>
 800b060:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b064:	3301      	adds	r3, #1
 800b066:	d003      	beq.n	800b070 <_fwalk_sglue+0x38>
 800b068:	4629      	mov	r1, r5
 800b06a:	4638      	mov	r0, r7
 800b06c:	47c0      	blx	r8
 800b06e:	4306      	orrs	r6, r0
 800b070:	3568      	adds	r5, #104	@ 0x68
 800b072:	e7e9      	b.n	800b048 <_fwalk_sglue+0x10>

0800b074 <sniprintf>:
 800b074:	b40c      	push	{r2, r3}
 800b076:	b530      	push	{r4, r5, lr}
 800b078:	4b18      	ldr	r3, [pc, #96]	@ (800b0dc <sniprintf+0x68>)
 800b07a:	1e0c      	subs	r4, r1, #0
 800b07c:	681d      	ldr	r5, [r3, #0]
 800b07e:	b09d      	sub	sp, #116	@ 0x74
 800b080:	da08      	bge.n	800b094 <sniprintf+0x20>
 800b082:	238b      	movs	r3, #139	@ 0x8b
 800b084:	602b      	str	r3, [r5, #0]
 800b086:	f04f 30ff 	mov.w	r0, #4294967295
 800b08a:	b01d      	add	sp, #116	@ 0x74
 800b08c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b090:	b002      	add	sp, #8
 800b092:	4770      	bx	lr
 800b094:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b098:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b09c:	f04f 0300 	mov.w	r3, #0
 800b0a0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b0a2:	bf14      	ite	ne
 800b0a4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0a8:	4623      	moveq	r3, r4
 800b0aa:	9304      	str	r3, [sp, #16]
 800b0ac:	9307      	str	r3, [sp, #28]
 800b0ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b0b2:	9002      	str	r0, [sp, #8]
 800b0b4:	9006      	str	r0, [sp, #24]
 800b0b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b0ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b0bc:	ab21      	add	r3, sp, #132	@ 0x84
 800b0be:	a902      	add	r1, sp, #8
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	9301      	str	r3, [sp, #4]
 800b0c4:	f002 fbee 	bl	800d8a4 <_svfiprintf_r>
 800b0c8:	1c43      	adds	r3, r0, #1
 800b0ca:	bfbc      	itt	lt
 800b0cc:	238b      	movlt	r3, #139	@ 0x8b
 800b0ce:	602b      	strlt	r3, [r5, #0]
 800b0d0:	2c00      	cmp	r4, #0
 800b0d2:	d0da      	beq.n	800b08a <sniprintf+0x16>
 800b0d4:	9b02      	ldr	r3, [sp, #8]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	701a      	strb	r2, [r3, #0]
 800b0da:	e7d6      	b.n	800b08a <sniprintf+0x16>
 800b0dc:	20000108 	.word	0x20000108

0800b0e0 <siprintf>:
 800b0e0:	b40e      	push	{r1, r2, r3}
 800b0e2:	b510      	push	{r4, lr}
 800b0e4:	b09d      	sub	sp, #116	@ 0x74
 800b0e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b0e8:	9002      	str	r0, [sp, #8]
 800b0ea:	9006      	str	r0, [sp, #24]
 800b0ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b0f0:	480a      	ldr	r0, [pc, #40]	@ (800b11c <siprintf+0x3c>)
 800b0f2:	9107      	str	r1, [sp, #28]
 800b0f4:	9104      	str	r1, [sp, #16]
 800b0f6:	490a      	ldr	r1, [pc, #40]	@ (800b120 <siprintf+0x40>)
 800b0f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0fc:	9105      	str	r1, [sp, #20]
 800b0fe:	2400      	movs	r4, #0
 800b100:	a902      	add	r1, sp, #8
 800b102:	6800      	ldr	r0, [r0, #0]
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b108:	f002 fbcc 	bl	800d8a4 <_svfiprintf_r>
 800b10c:	9b02      	ldr	r3, [sp, #8]
 800b10e:	701c      	strb	r4, [r3, #0]
 800b110:	b01d      	add	sp, #116	@ 0x74
 800b112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b116:	b003      	add	sp, #12
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop
 800b11c:	20000108 	.word	0x20000108
 800b120:	ffff0208 	.word	0xffff0208

0800b124 <__sread>:
 800b124:	b510      	push	{r4, lr}
 800b126:	460c      	mov	r4, r1
 800b128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b12c:	f000 f87e 	bl	800b22c <_read_r>
 800b130:	2800      	cmp	r0, #0
 800b132:	bfab      	itete	ge
 800b134:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b136:	89a3      	ldrhlt	r3, [r4, #12]
 800b138:	181b      	addge	r3, r3, r0
 800b13a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b13e:	bfac      	ite	ge
 800b140:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b142:	81a3      	strhlt	r3, [r4, #12]
 800b144:	bd10      	pop	{r4, pc}

0800b146 <__swrite>:
 800b146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b14a:	461f      	mov	r7, r3
 800b14c:	898b      	ldrh	r3, [r1, #12]
 800b14e:	05db      	lsls	r3, r3, #23
 800b150:	4605      	mov	r5, r0
 800b152:	460c      	mov	r4, r1
 800b154:	4616      	mov	r6, r2
 800b156:	d505      	bpl.n	800b164 <__swrite+0x1e>
 800b158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b15c:	2302      	movs	r3, #2
 800b15e:	2200      	movs	r2, #0
 800b160:	f000 f852 	bl	800b208 <_lseek_r>
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b16a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b16e:	81a3      	strh	r3, [r4, #12]
 800b170:	4632      	mov	r2, r6
 800b172:	463b      	mov	r3, r7
 800b174:	4628      	mov	r0, r5
 800b176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b17a:	f000 b869 	b.w	800b250 <_write_r>

0800b17e <__sseek>:
 800b17e:	b510      	push	{r4, lr}
 800b180:	460c      	mov	r4, r1
 800b182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b186:	f000 f83f 	bl	800b208 <_lseek_r>
 800b18a:	1c43      	adds	r3, r0, #1
 800b18c:	89a3      	ldrh	r3, [r4, #12]
 800b18e:	bf15      	itete	ne
 800b190:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b192:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b196:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b19a:	81a3      	strheq	r3, [r4, #12]
 800b19c:	bf18      	it	ne
 800b19e:	81a3      	strhne	r3, [r4, #12]
 800b1a0:	bd10      	pop	{r4, pc}

0800b1a2 <__sclose>:
 800b1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a6:	f000 b81f 	b.w	800b1e8 <_close_r>

0800b1aa <memset>:
 800b1aa:	4402      	add	r2, r0
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d100      	bne.n	800b1b4 <memset+0xa>
 800b1b2:	4770      	bx	lr
 800b1b4:	f803 1b01 	strb.w	r1, [r3], #1
 800b1b8:	e7f9      	b.n	800b1ae <memset+0x4>

0800b1ba <strncat>:
 800b1ba:	b530      	push	{r4, r5, lr}
 800b1bc:	4604      	mov	r4, r0
 800b1be:	7825      	ldrb	r5, [r4, #0]
 800b1c0:	4623      	mov	r3, r4
 800b1c2:	3401      	adds	r4, #1
 800b1c4:	2d00      	cmp	r5, #0
 800b1c6:	d1fa      	bne.n	800b1be <strncat+0x4>
 800b1c8:	3a01      	subs	r2, #1
 800b1ca:	d304      	bcc.n	800b1d6 <strncat+0x1c>
 800b1cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1d0:	f803 4b01 	strb.w	r4, [r3], #1
 800b1d4:	b904      	cbnz	r4, 800b1d8 <strncat+0x1e>
 800b1d6:	bd30      	pop	{r4, r5, pc}
 800b1d8:	2a00      	cmp	r2, #0
 800b1da:	d1f5      	bne.n	800b1c8 <strncat+0xe>
 800b1dc:	701a      	strb	r2, [r3, #0]
 800b1de:	e7f3      	b.n	800b1c8 <strncat+0xe>

0800b1e0 <_localeconv_r>:
 800b1e0:	4800      	ldr	r0, [pc, #0]	@ (800b1e4 <_localeconv_r+0x4>)
 800b1e2:	4770      	bx	lr
 800b1e4:	20000248 	.word	0x20000248

0800b1e8 <_close_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4d06      	ldr	r5, [pc, #24]	@ (800b204 <_close_r+0x1c>)
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	602b      	str	r3, [r5, #0]
 800b1f4:	f7f6 fd1c 	bl	8001c30 <_close>
 800b1f8:	1c43      	adds	r3, r0, #1
 800b1fa:	d102      	bne.n	800b202 <_close_r+0x1a>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	b103      	cbz	r3, 800b202 <_close_r+0x1a>
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	20006f7c 	.word	0x20006f7c

0800b208 <_lseek_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	4d07      	ldr	r5, [pc, #28]	@ (800b228 <_lseek_r+0x20>)
 800b20c:	4604      	mov	r4, r0
 800b20e:	4608      	mov	r0, r1
 800b210:	4611      	mov	r1, r2
 800b212:	2200      	movs	r2, #0
 800b214:	602a      	str	r2, [r5, #0]
 800b216:	461a      	mov	r2, r3
 800b218:	f7f6 fd31 	bl	8001c7e <_lseek>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d102      	bne.n	800b226 <_lseek_r+0x1e>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	b103      	cbz	r3, 800b226 <_lseek_r+0x1e>
 800b224:	6023      	str	r3, [r4, #0]
 800b226:	bd38      	pop	{r3, r4, r5, pc}
 800b228:	20006f7c 	.word	0x20006f7c

0800b22c <_read_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	4d07      	ldr	r5, [pc, #28]	@ (800b24c <_read_r+0x20>)
 800b230:	4604      	mov	r4, r0
 800b232:	4608      	mov	r0, r1
 800b234:	4611      	mov	r1, r2
 800b236:	2200      	movs	r2, #0
 800b238:	602a      	str	r2, [r5, #0]
 800b23a:	461a      	mov	r2, r3
 800b23c:	f7f6 fcbf 	bl	8001bbe <_read>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	d102      	bne.n	800b24a <_read_r+0x1e>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	b103      	cbz	r3, 800b24a <_read_r+0x1e>
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	bd38      	pop	{r3, r4, r5, pc}
 800b24c:	20006f7c 	.word	0x20006f7c

0800b250 <_write_r>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4d07      	ldr	r5, [pc, #28]	@ (800b270 <_write_r+0x20>)
 800b254:	4604      	mov	r4, r0
 800b256:	4608      	mov	r0, r1
 800b258:	4611      	mov	r1, r2
 800b25a:	2200      	movs	r2, #0
 800b25c:	602a      	str	r2, [r5, #0]
 800b25e:	461a      	mov	r2, r3
 800b260:	f7f6 fcca 	bl	8001bf8 <_write>
 800b264:	1c43      	adds	r3, r0, #1
 800b266:	d102      	bne.n	800b26e <_write_r+0x1e>
 800b268:	682b      	ldr	r3, [r5, #0]
 800b26a:	b103      	cbz	r3, 800b26e <_write_r+0x1e>
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	bd38      	pop	{r3, r4, r5, pc}
 800b270:	20006f7c 	.word	0x20006f7c

0800b274 <__errno>:
 800b274:	4b01      	ldr	r3, [pc, #4]	@ (800b27c <__errno+0x8>)
 800b276:	6818      	ldr	r0, [r3, #0]
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	20000108 	.word	0x20000108

0800b280 <__libc_init_array>:
 800b280:	b570      	push	{r4, r5, r6, lr}
 800b282:	4d0d      	ldr	r5, [pc, #52]	@ (800b2b8 <__libc_init_array+0x38>)
 800b284:	4c0d      	ldr	r4, [pc, #52]	@ (800b2bc <__libc_init_array+0x3c>)
 800b286:	1b64      	subs	r4, r4, r5
 800b288:	10a4      	asrs	r4, r4, #2
 800b28a:	2600      	movs	r6, #0
 800b28c:	42a6      	cmp	r6, r4
 800b28e:	d109      	bne.n	800b2a4 <__libc_init_array+0x24>
 800b290:	4d0b      	ldr	r5, [pc, #44]	@ (800b2c0 <__libc_init_array+0x40>)
 800b292:	4c0c      	ldr	r4, [pc, #48]	@ (800b2c4 <__libc_init_array+0x44>)
 800b294:	f003 fb76 	bl	800e984 <_init>
 800b298:	1b64      	subs	r4, r4, r5
 800b29a:	10a4      	asrs	r4, r4, #2
 800b29c:	2600      	movs	r6, #0
 800b29e:	42a6      	cmp	r6, r4
 800b2a0:	d105      	bne.n	800b2ae <__libc_init_array+0x2e>
 800b2a2:	bd70      	pop	{r4, r5, r6, pc}
 800b2a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2a8:	4798      	blx	r3
 800b2aa:	3601      	adds	r6, #1
 800b2ac:	e7ee      	b.n	800b28c <__libc_init_array+0xc>
 800b2ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2b2:	4798      	blx	r3
 800b2b4:	3601      	adds	r6, #1
 800b2b6:	e7f2      	b.n	800b29e <__libc_init_array+0x1e>
 800b2b8:	0800ef24 	.word	0x0800ef24
 800b2bc:	0800ef24 	.word	0x0800ef24
 800b2c0:	0800ef24 	.word	0x0800ef24
 800b2c4:	0800ef28 	.word	0x0800ef28

0800b2c8 <__retarget_lock_init_recursive>:
 800b2c8:	4770      	bx	lr

0800b2ca <__retarget_lock_acquire_recursive>:
 800b2ca:	4770      	bx	lr

0800b2cc <__retarget_lock_release_recursive>:
 800b2cc:	4770      	bx	lr
	...

0800b2d0 <nanf>:
 800b2d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b2d8 <nanf+0x8>
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	7fc00000 	.word	0x7fc00000

0800b2dc <quorem>:
 800b2dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e0:	6903      	ldr	r3, [r0, #16]
 800b2e2:	690c      	ldr	r4, [r1, #16]
 800b2e4:	42a3      	cmp	r3, r4
 800b2e6:	4607      	mov	r7, r0
 800b2e8:	db7e      	blt.n	800b3e8 <quorem+0x10c>
 800b2ea:	3c01      	subs	r4, #1
 800b2ec:	f101 0814 	add.w	r8, r1, #20
 800b2f0:	00a3      	lsls	r3, r4, #2
 800b2f2:	f100 0514 	add.w	r5, r0, #20
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b302:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b306:	3301      	adds	r3, #1
 800b308:	429a      	cmp	r2, r3
 800b30a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b30e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b312:	d32e      	bcc.n	800b372 <quorem+0x96>
 800b314:	f04f 0a00 	mov.w	sl, #0
 800b318:	46c4      	mov	ip, r8
 800b31a:	46ae      	mov	lr, r5
 800b31c:	46d3      	mov	fp, sl
 800b31e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b322:	b298      	uxth	r0, r3
 800b324:	fb06 a000 	mla	r0, r6, r0, sl
 800b328:	0c02      	lsrs	r2, r0, #16
 800b32a:	0c1b      	lsrs	r3, r3, #16
 800b32c:	fb06 2303 	mla	r3, r6, r3, r2
 800b330:	f8de 2000 	ldr.w	r2, [lr]
 800b334:	b280      	uxth	r0, r0
 800b336:	b292      	uxth	r2, r2
 800b338:	1a12      	subs	r2, r2, r0
 800b33a:	445a      	add	r2, fp
 800b33c:	f8de 0000 	ldr.w	r0, [lr]
 800b340:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b344:	b29b      	uxth	r3, r3
 800b346:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b34a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b34e:	b292      	uxth	r2, r2
 800b350:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b354:	45e1      	cmp	r9, ip
 800b356:	f84e 2b04 	str.w	r2, [lr], #4
 800b35a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b35e:	d2de      	bcs.n	800b31e <quorem+0x42>
 800b360:	9b00      	ldr	r3, [sp, #0]
 800b362:	58eb      	ldr	r3, [r5, r3]
 800b364:	b92b      	cbnz	r3, 800b372 <quorem+0x96>
 800b366:	9b01      	ldr	r3, [sp, #4]
 800b368:	3b04      	subs	r3, #4
 800b36a:	429d      	cmp	r5, r3
 800b36c:	461a      	mov	r2, r3
 800b36e:	d32f      	bcc.n	800b3d0 <quorem+0xf4>
 800b370:	613c      	str	r4, [r7, #16]
 800b372:	4638      	mov	r0, r7
 800b374:	f001 f9c8 	bl	800c708 <__mcmp>
 800b378:	2800      	cmp	r0, #0
 800b37a:	db25      	blt.n	800b3c8 <quorem+0xec>
 800b37c:	4629      	mov	r1, r5
 800b37e:	2000      	movs	r0, #0
 800b380:	f858 2b04 	ldr.w	r2, [r8], #4
 800b384:	f8d1 c000 	ldr.w	ip, [r1]
 800b388:	fa1f fe82 	uxth.w	lr, r2
 800b38c:	fa1f f38c 	uxth.w	r3, ip
 800b390:	eba3 030e 	sub.w	r3, r3, lr
 800b394:	4403      	add	r3, r0
 800b396:	0c12      	lsrs	r2, r2, #16
 800b398:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b39c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3a6:	45c1      	cmp	r9, r8
 800b3a8:	f841 3b04 	str.w	r3, [r1], #4
 800b3ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b3b0:	d2e6      	bcs.n	800b380 <quorem+0xa4>
 800b3b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3ba:	b922      	cbnz	r2, 800b3c6 <quorem+0xea>
 800b3bc:	3b04      	subs	r3, #4
 800b3be:	429d      	cmp	r5, r3
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	d30b      	bcc.n	800b3dc <quorem+0x100>
 800b3c4:	613c      	str	r4, [r7, #16]
 800b3c6:	3601      	adds	r6, #1
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	b003      	add	sp, #12
 800b3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d0:	6812      	ldr	r2, [r2, #0]
 800b3d2:	3b04      	subs	r3, #4
 800b3d4:	2a00      	cmp	r2, #0
 800b3d6:	d1cb      	bne.n	800b370 <quorem+0x94>
 800b3d8:	3c01      	subs	r4, #1
 800b3da:	e7c6      	b.n	800b36a <quorem+0x8e>
 800b3dc:	6812      	ldr	r2, [r2, #0]
 800b3de:	3b04      	subs	r3, #4
 800b3e0:	2a00      	cmp	r2, #0
 800b3e2:	d1ef      	bne.n	800b3c4 <quorem+0xe8>
 800b3e4:	3c01      	subs	r4, #1
 800b3e6:	e7ea      	b.n	800b3be <quorem+0xe2>
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	e7ee      	b.n	800b3ca <quorem+0xee>
 800b3ec:	0000      	movs	r0, r0
	...

0800b3f0 <_dtoa_r>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	69c7      	ldr	r7, [r0, #28]
 800b3f6:	b097      	sub	sp, #92	@ 0x5c
 800b3f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b3fc:	ec55 4b10 	vmov	r4, r5, d0
 800b400:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b402:	9107      	str	r1, [sp, #28]
 800b404:	4681      	mov	r9, r0
 800b406:	920c      	str	r2, [sp, #48]	@ 0x30
 800b408:	9311      	str	r3, [sp, #68]	@ 0x44
 800b40a:	b97f      	cbnz	r7, 800b42c <_dtoa_r+0x3c>
 800b40c:	2010      	movs	r0, #16
 800b40e:	f000 fe09 	bl	800c024 <malloc>
 800b412:	4602      	mov	r2, r0
 800b414:	f8c9 001c 	str.w	r0, [r9, #28]
 800b418:	b920      	cbnz	r0, 800b424 <_dtoa_r+0x34>
 800b41a:	4ba9      	ldr	r3, [pc, #676]	@ (800b6c0 <_dtoa_r+0x2d0>)
 800b41c:	21ef      	movs	r1, #239	@ 0xef
 800b41e:	48a9      	ldr	r0, [pc, #676]	@ (800b6c4 <_dtoa_r+0x2d4>)
 800b420:	f002 fc3a 	bl	800dc98 <__assert_func>
 800b424:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b428:	6007      	str	r7, [r0, #0]
 800b42a:	60c7      	str	r7, [r0, #12]
 800b42c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b430:	6819      	ldr	r1, [r3, #0]
 800b432:	b159      	cbz	r1, 800b44c <_dtoa_r+0x5c>
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	604a      	str	r2, [r1, #4]
 800b438:	2301      	movs	r3, #1
 800b43a:	4093      	lsls	r3, r2
 800b43c:	608b      	str	r3, [r1, #8]
 800b43e:	4648      	mov	r0, r9
 800b440:	f000 fee6 	bl	800c210 <_Bfree>
 800b444:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b448:	2200      	movs	r2, #0
 800b44a:	601a      	str	r2, [r3, #0]
 800b44c:	1e2b      	subs	r3, r5, #0
 800b44e:	bfb9      	ittee	lt
 800b450:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b454:	9305      	strlt	r3, [sp, #20]
 800b456:	2300      	movge	r3, #0
 800b458:	6033      	strge	r3, [r6, #0]
 800b45a:	9f05      	ldr	r7, [sp, #20]
 800b45c:	4b9a      	ldr	r3, [pc, #616]	@ (800b6c8 <_dtoa_r+0x2d8>)
 800b45e:	bfbc      	itt	lt
 800b460:	2201      	movlt	r2, #1
 800b462:	6032      	strlt	r2, [r6, #0]
 800b464:	43bb      	bics	r3, r7
 800b466:	d112      	bne.n	800b48e <_dtoa_r+0x9e>
 800b468:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b46a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b474:	4323      	orrs	r3, r4
 800b476:	f000 855a 	beq.w	800bf2e <_dtoa_r+0xb3e>
 800b47a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b47c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b6dc <_dtoa_r+0x2ec>
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 855c 	beq.w	800bf3e <_dtoa_r+0xb4e>
 800b486:	f10a 0303 	add.w	r3, sl, #3
 800b48a:	f000 bd56 	b.w	800bf3a <_dtoa_r+0xb4a>
 800b48e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b492:	2200      	movs	r2, #0
 800b494:	ec51 0b17 	vmov	r0, r1, d7
 800b498:	2300      	movs	r3, #0
 800b49a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b49e:	f7f5 fb13 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4a2:	4680      	mov	r8, r0
 800b4a4:	b158      	cbz	r0, 800b4be <_dtoa_r+0xce>
 800b4a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b4ae:	b113      	cbz	r3, 800b4b6 <_dtoa_r+0xc6>
 800b4b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b4b2:	4b86      	ldr	r3, [pc, #536]	@ (800b6cc <_dtoa_r+0x2dc>)
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b6e0 <_dtoa_r+0x2f0>
 800b4ba:	f000 bd40 	b.w	800bf3e <_dtoa_r+0xb4e>
 800b4be:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b4c2:	aa14      	add	r2, sp, #80	@ 0x50
 800b4c4:	a915      	add	r1, sp, #84	@ 0x54
 800b4c6:	4648      	mov	r0, r9
 800b4c8:	f001 fa3e 	bl	800c948 <__d2b>
 800b4cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b4d0:	9002      	str	r0, [sp, #8]
 800b4d2:	2e00      	cmp	r6, #0
 800b4d4:	d078      	beq.n	800b5c8 <_dtoa_r+0x1d8>
 800b4d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4d8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b4dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b4e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b4e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b4ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	4b76      	ldr	r3, [pc, #472]	@ (800b6d0 <_dtoa_r+0x2e0>)
 800b4f6:	f7f4 fec7 	bl	8000288 <__aeabi_dsub>
 800b4fa:	a36b      	add	r3, pc, #428	@ (adr r3, 800b6a8 <_dtoa_r+0x2b8>)
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f7f5 f87a 	bl	80005f8 <__aeabi_dmul>
 800b504:	a36a      	add	r3, pc, #424	@ (adr r3, 800b6b0 <_dtoa_r+0x2c0>)
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	f7f4 febf 	bl	800028c <__adddf3>
 800b50e:	4604      	mov	r4, r0
 800b510:	4630      	mov	r0, r6
 800b512:	460d      	mov	r5, r1
 800b514:	f7f5 f806 	bl	8000524 <__aeabi_i2d>
 800b518:	a367      	add	r3, pc, #412	@ (adr r3, 800b6b8 <_dtoa_r+0x2c8>)
 800b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51e:	f7f5 f86b 	bl	80005f8 <__aeabi_dmul>
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	4620      	mov	r0, r4
 800b528:	4629      	mov	r1, r5
 800b52a:	f7f4 feaf 	bl	800028c <__adddf3>
 800b52e:	4604      	mov	r4, r0
 800b530:	460d      	mov	r5, r1
 800b532:	f7f5 fb11 	bl	8000b58 <__aeabi_d2iz>
 800b536:	2200      	movs	r2, #0
 800b538:	4607      	mov	r7, r0
 800b53a:	2300      	movs	r3, #0
 800b53c:	4620      	mov	r0, r4
 800b53e:	4629      	mov	r1, r5
 800b540:	f7f5 facc 	bl	8000adc <__aeabi_dcmplt>
 800b544:	b140      	cbz	r0, 800b558 <_dtoa_r+0x168>
 800b546:	4638      	mov	r0, r7
 800b548:	f7f4 ffec 	bl	8000524 <__aeabi_i2d>
 800b54c:	4622      	mov	r2, r4
 800b54e:	462b      	mov	r3, r5
 800b550:	f7f5 faba 	bl	8000ac8 <__aeabi_dcmpeq>
 800b554:	b900      	cbnz	r0, 800b558 <_dtoa_r+0x168>
 800b556:	3f01      	subs	r7, #1
 800b558:	2f16      	cmp	r7, #22
 800b55a:	d852      	bhi.n	800b602 <_dtoa_r+0x212>
 800b55c:	4b5d      	ldr	r3, [pc, #372]	@ (800b6d4 <_dtoa_r+0x2e4>)
 800b55e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b566:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b56a:	f7f5 fab7 	bl	8000adc <__aeabi_dcmplt>
 800b56e:	2800      	cmp	r0, #0
 800b570:	d049      	beq.n	800b606 <_dtoa_r+0x216>
 800b572:	3f01      	subs	r7, #1
 800b574:	2300      	movs	r3, #0
 800b576:	9310      	str	r3, [sp, #64]	@ 0x40
 800b578:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b57a:	1b9b      	subs	r3, r3, r6
 800b57c:	1e5a      	subs	r2, r3, #1
 800b57e:	bf45      	ittet	mi
 800b580:	f1c3 0301 	rsbmi	r3, r3, #1
 800b584:	9300      	strmi	r3, [sp, #0]
 800b586:	2300      	movpl	r3, #0
 800b588:	2300      	movmi	r3, #0
 800b58a:	9206      	str	r2, [sp, #24]
 800b58c:	bf54      	ite	pl
 800b58e:	9300      	strpl	r3, [sp, #0]
 800b590:	9306      	strmi	r3, [sp, #24]
 800b592:	2f00      	cmp	r7, #0
 800b594:	db39      	blt.n	800b60a <_dtoa_r+0x21a>
 800b596:	9b06      	ldr	r3, [sp, #24]
 800b598:	970d      	str	r7, [sp, #52]	@ 0x34
 800b59a:	443b      	add	r3, r7
 800b59c:	9306      	str	r3, [sp, #24]
 800b59e:	2300      	movs	r3, #0
 800b5a0:	9308      	str	r3, [sp, #32]
 800b5a2:	9b07      	ldr	r3, [sp, #28]
 800b5a4:	2b09      	cmp	r3, #9
 800b5a6:	d863      	bhi.n	800b670 <_dtoa_r+0x280>
 800b5a8:	2b05      	cmp	r3, #5
 800b5aa:	bfc4      	itt	gt
 800b5ac:	3b04      	subgt	r3, #4
 800b5ae:	9307      	strgt	r3, [sp, #28]
 800b5b0:	9b07      	ldr	r3, [sp, #28]
 800b5b2:	f1a3 0302 	sub.w	r3, r3, #2
 800b5b6:	bfcc      	ite	gt
 800b5b8:	2400      	movgt	r4, #0
 800b5ba:	2401      	movle	r4, #1
 800b5bc:	2b03      	cmp	r3, #3
 800b5be:	d863      	bhi.n	800b688 <_dtoa_r+0x298>
 800b5c0:	e8df f003 	tbb	[pc, r3]
 800b5c4:	2b375452 	.word	0x2b375452
 800b5c8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b5cc:	441e      	add	r6, r3
 800b5ce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b5d2:	2b20      	cmp	r3, #32
 800b5d4:	bfc1      	itttt	gt
 800b5d6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b5da:	409f      	lslgt	r7, r3
 800b5dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b5e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b5e4:	bfd6      	itet	le
 800b5e6:	f1c3 0320 	rsble	r3, r3, #32
 800b5ea:	ea47 0003 	orrgt.w	r0, r7, r3
 800b5ee:	fa04 f003 	lslle.w	r0, r4, r3
 800b5f2:	f7f4 ff87 	bl	8000504 <__aeabi_ui2d>
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b5fc:	3e01      	subs	r6, #1
 800b5fe:	9212      	str	r2, [sp, #72]	@ 0x48
 800b600:	e776      	b.n	800b4f0 <_dtoa_r+0x100>
 800b602:	2301      	movs	r3, #1
 800b604:	e7b7      	b.n	800b576 <_dtoa_r+0x186>
 800b606:	9010      	str	r0, [sp, #64]	@ 0x40
 800b608:	e7b6      	b.n	800b578 <_dtoa_r+0x188>
 800b60a:	9b00      	ldr	r3, [sp, #0]
 800b60c:	1bdb      	subs	r3, r3, r7
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	427b      	negs	r3, r7
 800b612:	9308      	str	r3, [sp, #32]
 800b614:	2300      	movs	r3, #0
 800b616:	930d      	str	r3, [sp, #52]	@ 0x34
 800b618:	e7c3      	b.n	800b5a2 <_dtoa_r+0x1b2>
 800b61a:	2301      	movs	r3, #1
 800b61c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b61e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b620:	eb07 0b03 	add.w	fp, r7, r3
 800b624:	f10b 0301 	add.w	r3, fp, #1
 800b628:	2b01      	cmp	r3, #1
 800b62a:	9303      	str	r3, [sp, #12]
 800b62c:	bfb8      	it	lt
 800b62e:	2301      	movlt	r3, #1
 800b630:	e006      	b.n	800b640 <_dtoa_r+0x250>
 800b632:	2301      	movs	r3, #1
 800b634:	9309      	str	r3, [sp, #36]	@ 0x24
 800b636:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b638:	2b00      	cmp	r3, #0
 800b63a:	dd28      	ble.n	800b68e <_dtoa_r+0x29e>
 800b63c:	469b      	mov	fp, r3
 800b63e:	9303      	str	r3, [sp, #12]
 800b640:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b644:	2100      	movs	r1, #0
 800b646:	2204      	movs	r2, #4
 800b648:	f102 0514 	add.w	r5, r2, #20
 800b64c:	429d      	cmp	r5, r3
 800b64e:	d926      	bls.n	800b69e <_dtoa_r+0x2ae>
 800b650:	6041      	str	r1, [r0, #4]
 800b652:	4648      	mov	r0, r9
 800b654:	f000 fd9c 	bl	800c190 <_Balloc>
 800b658:	4682      	mov	sl, r0
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d142      	bne.n	800b6e4 <_dtoa_r+0x2f4>
 800b65e:	4b1e      	ldr	r3, [pc, #120]	@ (800b6d8 <_dtoa_r+0x2e8>)
 800b660:	4602      	mov	r2, r0
 800b662:	f240 11af 	movw	r1, #431	@ 0x1af
 800b666:	e6da      	b.n	800b41e <_dtoa_r+0x2e>
 800b668:	2300      	movs	r3, #0
 800b66a:	e7e3      	b.n	800b634 <_dtoa_r+0x244>
 800b66c:	2300      	movs	r3, #0
 800b66e:	e7d5      	b.n	800b61c <_dtoa_r+0x22c>
 800b670:	2401      	movs	r4, #1
 800b672:	2300      	movs	r3, #0
 800b674:	9307      	str	r3, [sp, #28]
 800b676:	9409      	str	r4, [sp, #36]	@ 0x24
 800b678:	f04f 3bff 	mov.w	fp, #4294967295
 800b67c:	2200      	movs	r2, #0
 800b67e:	f8cd b00c 	str.w	fp, [sp, #12]
 800b682:	2312      	movs	r3, #18
 800b684:	920c      	str	r2, [sp, #48]	@ 0x30
 800b686:	e7db      	b.n	800b640 <_dtoa_r+0x250>
 800b688:	2301      	movs	r3, #1
 800b68a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b68c:	e7f4      	b.n	800b678 <_dtoa_r+0x288>
 800b68e:	f04f 0b01 	mov.w	fp, #1
 800b692:	f8cd b00c 	str.w	fp, [sp, #12]
 800b696:	465b      	mov	r3, fp
 800b698:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b69c:	e7d0      	b.n	800b640 <_dtoa_r+0x250>
 800b69e:	3101      	adds	r1, #1
 800b6a0:	0052      	lsls	r2, r2, #1
 800b6a2:	e7d1      	b.n	800b648 <_dtoa_r+0x258>
 800b6a4:	f3af 8000 	nop.w
 800b6a8:	636f4361 	.word	0x636f4361
 800b6ac:	3fd287a7 	.word	0x3fd287a7
 800b6b0:	8b60c8b3 	.word	0x8b60c8b3
 800b6b4:	3fc68a28 	.word	0x3fc68a28
 800b6b8:	509f79fb 	.word	0x509f79fb
 800b6bc:	3fd34413 	.word	0x3fd34413
 800b6c0:	0800eb36 	.word	0x0800eb36
 800b6c4:	0800eb4d 	.word	0x0800eb4d
 800b6c8:	7ff00000 	.word	0x7ff00000
 800b6cc:	0800eb01 	.word	0x0800eb01
 800b6d0:	3ff80000 	.word	0x3ff80000
 800b6d4:	0800ed00 	.word	0x0800ed00
 800b6d8:	0800eba5 	.word	0x0800eba5
 800b6dc:	0800eb32 	.word	0x0800eb32
 800b6e0:	0800eb00 	.word	0x0800eb00
 800b6e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b6e8:	6018      	str	r0, [r3, #0]
 800b6ea:	9b03      	ldr	r3, [sp, #12]
 800b6ec:	2b0e      	cmp	r3, #14
 800b6ee:	f200 80a1 	bhi.w	800b834 <_dtoa_r+0x444>
 800b6f2:	2c00      	cmp	r4, #0
 800b6f4:	f000 809e 	beq.w	800b834 <_dtoa_r+0x444>
 800b6f8:	2f00      	cmp	r7, #0
 800b6fa:	dd33      	ble.n	800b764 <_dtoa_r+0x374>
 800b6fc:	4b9c      	ldr	r3, [pc, #624]	@ (800b970 <_dtoa_r+0x580>)
 800b6fe:	f007 020f 	and.w	r2, r7, #15
 800b702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b706:	ed93 7b00 	vldr	d7, [r3]
 800b70a:	05f8      	lsls	r0, r7, #23
 800b70c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b710:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b714:	d516      	bpl.n	800b744 <_dtoa_r+0x354>
 800b716:	4b97      	ldr	r3, [pc, #604]	@ (800b974 <_dtoa_r+0x584>)
 800b718:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b71c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b720:	f7f5 f894 	bl	800084c <__aeabi_ddiv>
 800b724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b728:	f004 040f 	and.w	r4, r4, #15
 800b72c:	2603      	movs	r6, #3
 800b72e:	4d91      	ldr	r5, [pc, #580]	@ (800b974 <_dtoa_r+0x584>)
 800b730:	b954      	cbnz	r4, 800b748 <_dtoa_r+0x358>
 800b732:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b736:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b73a:	f7f5 f887 	bl	800084c <__aeabi_ddiv>
 800b73e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b742:	e028      	b.n	800b796 <_dtoa_r+0x3a6>
 800b744:	2602      	movs	r6, #2
 800b746:	e7f2      	b.n	800b72e <_dtoa_r+0x33e>
 800b748:	07e1      	lsls	r1, r4, #31
 800b74a:	d508      	bpl.n	800b75e <_dtoa_r+0x36e>
 800b74c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b750:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b754:	f7f4 ff50 	bl	80005f8 <__aeabi_dmul>
 800b758:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b75c:	3601      	adds	r6, #1
 800b75e:	1064      	asrs	r4, r4, #1
 800b760:	3508      	adds	r5, #8
 800b762:	e7e5      	b.n	800b730 <_dtoa_r+0x340>
 800b764:	f000 80af 	beq.w	800b8c6 <_dtoa_r+0x4d6>
 800b768:	427c      	negs	r4, r7
 800b76a:	4b81      	ldr	r3, [pc, #516]	@ (800b970 <_dtoa_r+0x580>)
 800b76c:	4d81      	ldr	r5, [pc, #516]	@ (800b974 <_dtoa_r+0x584>)
 800b76e:	f004 020f 	and.w	r2, r4, #15
 800b772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b77e:	f7f4 ff3b 	bl	80005f8 <__aeabi_dmul>
 800b782:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b786:	1124      	asrs	r4, r4, #4
 800b788:	2300      	movs	r3, #0
 800b78a:	2602      	movs	r6, #2
 800b78c:	2c00      	cmp	r4, #0
 800b78e:	f040 808f 	bne.w	800b8b0 <_dtoa_r+0x4c0>
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1d3      	bne.n	800b73e <_dtoa_r+0x34e>
 800b796:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b798:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f000 8094 	beq.w	800b8ca <_dtoa_r+0x4da>
 800b7a2:	4b75      	ldr	r3, [pc, #468]	@ (800b978 <_dtoa_r+0x588>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7f5 f997 	bl	8000adc <__aeabi_dcmplt>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f000 808b 	beq.w	800b8ca <_dtoa_r+0x4da>
 800b7b4:	9b03      	ldr	r3, [sp, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 8087 	beq.w	800b8ca <_dtoa_r+0x4da>
 800b7bc:	f1bb 0f00 	cmp.w	fp, #0
 800b7c0:	dd34      	ble.n	800b82c <_dtoa_r+0x43c>
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	4b6d      	ldr	r3, [pc, #436]	@ (800b97c <_dtoa_r+0x58c>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	f7f4 ff15 	bl	80005f8 <__aeabi_dmul>
 800b7ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7d2:	f107 38ff 	add.w	r8, r7, #4294967295
 800b7d6:	3601      	adds	r6, #1
 800b7d8:	465c      	mov	r4, fp
 800b7da:	4630      	mov	r0, r6
 800b7dc:	f7f4 fea2 	bl	8000524 <__aeabi_i2d>
 800b7e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7e4:	f7f4 ff08 	bl	80005f8 <__aeabi_dmul>
 800b7e8:	4b65      	ldr	r3, [pc, #404]	@ (800b980 <_dtoa_r+0x590>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f7f4 fd4e 	bl	800028c <__adddf3>
 800b7f0:	4605      	mov	r5, r0
 800b7f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b7f6:	2c00      	cmp	r4, #0
 800b7f8:	d16a      	bne.n	800b8d0 <_dtoa_r+0x4e0>
 800b7fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7fe:	4b61      	ldr	r3, [pc, #388]	@ (800b984 <_dtoa_r+0x594>)
 800b800:	2200      	movs	r2, #0
 800b802:	f7f4 fd41 	bl	8000288 <__aeabi_dsub>
 800b806:	4602      	mov	r2, r0
 800b808:	460b      	mov	r3, r1
 800b80a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b80e:	462a      	mov	r2, r5
 800b810:	4633      	mov	r3, r6
 800b812:	f7f5 f981 	bl	8000b18 <__aeabi_dcmpgt>
 800b816:	2800      	cmp	r0, #0
 800b818:	f040 8298 	bne.w	800bd4c <_dtoa_r+0x95c>
 800b81c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b820:	462a      	mov	r2, r5
 800b822:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b826:	f7f5 f959 	bl	8000adc <__aeabi_dcmplt>
 800b82a:	bb38      	cbnz	r0, 800b87c <_dtoa_r+0x48c>
 800b82c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b830:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b834:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b836:	2b00      	cmp	r3, #0
 800b838:	f2c0 8157 	blt.w	800baea <_dtoa_r+0x6fa>
 800b83c:	2f0e      	cmp	r7, #14
 800b83e:	f300 8154 	bgt.w	800baea <_dtoa_r+0x6fa>
 800b842:	4b4b      	ldr	r3, [pc, #300]	@ (800b970 <_dtoa_r+0x580>)
 800b844:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b848:	ed93 7b00 	vldr	d7, [r3]
 800b84c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b84e:	2b00      	cmp	r3, #0
 800b850:	ed8d 7b00 	vstr	d7, [sp]
 800b854:	f280 80e5 	bge.w	800ba22 <_dtoa_r+0x632>
 800b858:	9b03      	ldr	r3, [sp, #12]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f300 80e1 	bgt.w	800ba22 <_dtoa_r+0x632>
 800b860:	d10c      	bne.n	800b87c <_dtoa_r+0x48c>
 800b862:	4b48      	ldr	r3, [pc, #288]	@ (800b984 <_dtoa_r+0x594>)
 800b864:	2200      	movs	r2, #0
 800b866:	ec51 0b17 	vmov	r0, r1, d7
 800b86a:	f7f4 fec5 	bl	80005f8 <__aeabi_dmul>
 800b86e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b872:	f7f5 f947 	bl	8000b04 <__aeabi_dcmpge>
 800b876:	2800      	cmp	r0, #0
 800b878:	f000 8266 	beq.w	800bd48 <_dtoa_r+0x958>
 800b87c:	2400      	movs	r4, #0
 800b87e:	4625      	mov	r5, r4
 800b880:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b882:	4656      	mov	r6, sl
 800b884:	ea6f 0803 	mvn.w	r8, r3
 800b888:	2700      	movs	r7, #0
 800b88a:	4621      	mov	r1, r4
 800b88c:	4648      	mov	r0, r9
 800b88e:	f000 fcbf 	bl	800c210 <_Bfree>
 800b892:	2d00      	cmp	r5, #0
 800b894:	f000 80bd 	beq.w	800ba12 <_dtoa_r+0x622>
 800b898:	b12f      	cbz	r7, 800b8a6 <_dtoa_r+0x4b6>
 800b89a:	42af      	cmp	r7, r5
 800b89c:	d003      	beq.n	800b8a6 <_dtoa_r+0x4b6>
 800b89e:	4639      	mov	r1, r7
 800b8a0:	4648      	mov	r0, r9
 800b8a2:	f000 fcb5 	bl	800c210 <_Bfree>
 800b8a6:	4629      	mov	r1, r5
 800b8a8:	4648      	mov	r0, r9
 800b8aa:	f000 fcb1 	bl	800c210 <_Bfree>
 800b8ae:	e0b0      	b.n	800ba12 <_dtoa_r+0x622>
 800b8b0:	07e2      	lsls	r2, r4, #31
 800b8b2:	d505      	bpl.n	800b8c0 <_dtoa_r+0x4d0>
 800b8b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8b8:	f7f4 fe9e 	bl	80005f8 <__aeabi_dmul>
 800b8bc:	3601      	adds	r6, #1
 800b8be:	2301      	movs	r3, #1
 800b8c0:	1064      	asrs	r4, r4, #1
 800b8c2:	3508      	adds	r5, #8
 800b8c4:	e762      	b.n	800b78c <_dtoa_r+0x39c>
 800b8c6:	2602      	movs	r6, #2
 800b8c8:	e765      	b.n	800b796 <_dtoa_r+0x3a6>
 800b8ca:	9c03      	ldr	r4, [sp, #12]
 800b8cc:	46b8      	mov	r8, r7
 800b8ce:	e784      	b.n	800b7da <_dtoa_r+0x3ea>
 800b8d0:	4b27      	ldr	r3, [pc, #156]	@ (800b970 <_dtoa_r+0x580>)
 800b8d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b8d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8dc:	4454      	add	r4, sl
 800b8de:	2900      	cmp	r1, #0
 800b8e0:	d054      	beq.n	800b98c <_dtoa_r+0x59c>
 800b8e2:	4929      	ldr	r1, [pc, #164]	@ (800b988 <_dtoa_r+0x598>)
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	f7f4 ffb1 	bl	800084c <__aeabi_ddiv>
 800b8ea:	4633      	mov	r3, r6
 800b8ec:	462a      	mov	r2, r5
 800b8ee:	f7f4 fccb 	bl	8000288 <__aeabi_dsub>
 800b8f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b8f6:	4656      	mov	r6, sl
 800b8f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8fc:	f7f5 f92c 	bl	8000b58 <__aeabi_d2iz>
 800b900:	4605      	mov	r5, r0
 800b902:	f7f4 fe0f 	bl	8000524 <__aeabi_i2d>
 800b906:	4602      	mov	r2, r0
 800b908:	460b      	mov	r3, r1
 800b90a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b90e:	f7f4 fcbb 	bl	8000288 <__aeabi_dsub>
 800b912:	3530      	adds	r5, #48	@ 0x30
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b91c:	f806 5b01 	strb.w	r5, [r6], #1
 800b920:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b924:	f7f5 f8da 	bl	8000adc <__aeabi_dcmplt>
 800b928:	2800      	cmp	r0, #0
 800b92a:	d172      	bne.n	800ba12 <_dtoa_r+0x622>
 800b92c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b930:	4911      	ldr	r1, [pc, #68]	@ (800b978 <_dtoa_r+0x588>)
 800b932:	2000      	movs	r0, #0
 800b934:	f7f4 fca8 	bl	8000288 <__aeabi_dsub>
 800b938:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b93c:	f7f5 f8ce 	bl	8000adc <__aeabi_dcmplt>
 800b940:	2800      	cmp	r0, #0
 800b942:	f040 80b4 	bne.w	800baae <_dtoa_r+0x6be>
 800b946:	42a6      	cmp	r6, r4
 800b948:	f43f af70 	beq.w	800b82c <_dtoa_r+0x43c>
 800b94c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b950:	4b0a      	ldr	r3, [pc, #40]	@ (800b97c <_dtoa_r+0x58c>)
 800b952:	2200      	movs	r2, #0
 800b954:	f7f4 fe50 	bl	80005f8 <__aeabi_dmul>
 800b958:	4b08      	ldr	r3, [pc, #32]	@ (800b97c <_dtoa_r+0x58c>)
 800b95a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b95e:	2200      	movs	r2, #0
 800b960:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b964:	f7f4 fe48 	bl	80005f8 <__aeabi_dmul>
 800b968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b96c:	e7c4      	b.n	800b8f8 <_dtoa_r+0x508>
 800b96e:	bf00      	nop
 800b970:	0800ed00 	.word	0x0800ed00
 800b974:	0800ecd8 	.word	0x0800ecd8
 800b978:	3ff00000 	.word	0x3ff00000
 800b97c:	40240000 	.word	0x40240000
 800b980:	401c0000 	.word	0x401c0000
 800b984:	40140000 	.word	0x40140000
 800b988:	3fe00000 	.word	0x3fe00000
 800b98c:	4631      	mov	r1, r6
 800b98e:	4628      	mov	r0, r5
 800b990:	f7f4 fe32 	bl	80005f8 <__aeabi_dmul>
 800b994:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b998:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b99a:	4656      	mov	r6, sl
 800b99c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9a0:	f7f5 f8da 	bl	8000b58 <__aeabi_d2iz>
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	f7f4 fdbd 	bl	8000524 <__aeabi_i2d>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9b2:	f7f4 fc69 	bl	8000288 <__aeabi_dsub>
 800b9b6:	3530      	adds	r5, #48	@ 0x30
 800b9b8:	f806 5b01 	strb.w	r5, [r6], #1
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	42a6      	cmp	r6, r4
 800b9c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9c6:	f04f 0200 	mov.w	r2, #0
 800b9ca:	d124      	bne.n	800ba16 <_dtoa_r+0x626>
 800b9cc:	4baf      	ldr	r3, [pc, #700]	@ (800bc8c <_dtoa_r+0x89c>)
 800b9ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b9d2:	f7f4 fc5b 	bl	800028c <__adddf3>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	460b      	mov	r3, r1
 800b9da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9de:	f7f5 f89b 	bl	8000b18 <__aeabi_dcmpgt>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d163      	bne.n	800baae <_dtoa_r+0x6be>
 800b9e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b9ea:	49a8      	ldr	r1, [pc, #672]	@ (800bc8c <_dtoa_r+0x89c>)
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	f7f4 fc4b 	bl	8000288 <__aeabi_dsub>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9fa:	f7f5 f86f 	bl	8000adc <__aeabi_dcmplt>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	f43f af14 	beq.w	800b82c <_dtoa_r+0x43c>
 800ba04:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ba06:	1e73      	subs	r3, r6, #1
 800ba08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba0e:	2b30      	cmp	r3, #48	@ 0x30
 800ba10:	d0f8      	beq.n	800ba04 <_dtoa_r+0x614>
 800ba12:	4647      	mov	r7, r8
 800ba14:	e03b      	b.n	800ba8e <_dtoa_r+0x69e>
 800ba16:	4b9e      	ldr	r3, [pc, #632]	@ (800bc90 <_dtoa_r+0x8a0>)
 800ba18:	f7f4 fdee 	bl	80005f8 <__aeabi_dmul>
 800ba1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba20:	e7bc      	b.n	800b99c <_dtoa_r+0x5ac>
 800ba22:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ba26:	4656      	mov	r6, sl
 800ba28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	4629      	mov	r1, r5
 800ba30:	f7f4 ff0c 	bl	800084c <__aeabi_ddiv>
 800ba34:	f7f5 f890 	bl	8000b58 <__aeabi_d2iz>
 800ba38:	4680      	mov	r8, r0
 800ba3a:	f7f4 fd73 	bl	8000524 <__aeabi_i2d>
 800ba3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba42:	f7f4 fdd9 	bl	80005f8 <__aeabi_dmul>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ba52:	f7f4 fc19 	bl	8000288 <__aeabi_dsub>
 800ba56:	f806 4b01 	strb.w	r4, [r6], #1
 800ba5a:	9d03      	ldr	r5, [sp, #12]
 800ba5c:	eba6 040a 	sub.w	r4, r6, sl
 800ba60:	42a5      	cmp	r5, r4
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	d133      	bne.n	800bad0 <_dtoa_r+0x6e0>
 800ba68:	f7f4 fc10 	bl	800028c <__adddf3>
 800ba6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba70:	4604      	mov	r4, r0
 800ba72:	460d      	mov	r5, r1
 800ba74:	f7f5 f850 	bl	8000b18 <__aeabi_dcmpgt>
 800ba78:	b9c0      	cbnz	r0, 800baac <_dtoa_r+0x6bc>
 800ba7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba7e:	4620      	mov	r0, r4
 800ba80:	4629      	mov	r1, r5
 800ba82:	f7f5 f821 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba86:	b110      	cbz	r0, 800ba8e <_dtoa_r+0x69e>
 800ba88:	f018 0f01 	tst.w	r8, #1
 800ba8c:	d10e      	bne.n	800baac <_dtoa_r+0x6bc>
 800ba8e:	9902      	ldr	r1, [sp, #8]
 800ba90:	4648      	mov	r0, r9
 800ba92:	f000 fbbd 	bl	800c210 <_Bfree>
 800ba96:	2300      	movs	r3, #0
 800ba98:	7033      	strb	r3, [r6, #0]
 800ba9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba9c:	3701      	adds	r7, #1
 800ba9e:	601f      	str	r7, [r3, #0]
 800baa0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 824b 	beq.w	800bf3e <_dtoa_r+0xb4e>
 800baa8:	601e      	str	r6, [r3, #0]
 800baaa:	e248      	b.n	800bf3e <_dtoa_r+0xb4e>
 800baac:	46b8      	mov	r8, r7
 800baae:	4633      	mov	r3, r6
 800bab0:	461e      	mov	r6, r3
 800bab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bab6:	2a39      	cmp	r2, #57	@ 0x39
 800bab8:	d106      	bne.n	800bac8 <_dtoa_r+0x6d8>
 800baba:	459a      	cmp	sl, r3
 800babc:	d1f8      	bne.n	800bab0 <_dtoa_r+0x6c0>
 800babe:	2230      	movs	r2, #48	@ 0x30
 800bac0:	f108 0801 	add.w	r8, r8, #1
 800bac4:	f88a 2000 	strb.w	r2, [sl]
 800bac8:	781a      	ldrb	r2, [r3, #0]
 800baca:	3201      	adds	r2, #1
 800bacc:	701a      	strb	r2, [r3, #0]
 800bace:	e7a0      	b.n	800ba12 <_dtoa_r+0x622>
 800bad0:	4b6f      	ldr	r3, [pc, #444]	@ (800bc90 <_dtoa_r+0x8a0>)
 800bad2:	2200      	movs	r2, #0
 800bad4:	f7f4 fd90 	bl	80005f8 <__aeabi_dmul>
 800bad8:	2200      	movs	r2, #0
 800bada:	2300      	movs	r3, #0
 800badc:	4604      	mov	r4, r0
 800bade:	460d      	mov	r5, r1
 800bae0:	f7f4 fff2 	bl	8000ac8 <__aeabi_dcmpeq>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d09f      	beq.n	800ba28 <_dtoa_r+0x638>
 800bae8:	e7d1      	b.n	800ba8e <_dtoa_r+0x69e>
 800baea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baec:	2a00      	cmp	r2, #0
 800baee:	f000 80ea 	beq.w	800bcc6 <_dtoa_r+0x8d6>
 800baf2:	9a07      	ldr	r2, [sp, #28]
 800baf4:	2a01      	cmp	r2, #1
 800baf6:	f300 80cd 	bgt.w	800bc94 <_dtoa_r+0x8a4>
 800bafa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bafc:	2a00      	cmp	r2, #0
 800bafe:	f000 80c1 	beq.w	800bc84 <_dtoa_r+0x894>
 800bb02:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bb06:	9c08      	ldr	r4, [sp, #32]
 800bb08:	9e00      	ldr	r6, [sp, #0]
 800bb0a:	9a00      	ldr	r2, [sp, #0]
 800bb0c:	441a      	add	r2, r3
 800bb0e:	9200      	str	r2, [sp, #0]
 800bb10:	9a06      	ldr	r2, [sp, #24]
 800bb12:	2101      	movs	r1, #1
 800bb14:	441a      	add	r2, r3
 800bb16:	4648      	mov	r0, r9
 800bb18:	9206      	str	r2, [sp, #24]
 800bb1a:	f000 fc77 	bl	800c40c <__i2b>
 800bb1e:	4605      	mov	r5, r0
 800bb20:	b166      	cbz	r6, 800bb3c <_dtoa_r+0x74c>
 800bb22:	9b06      	ldr	r3, [sp, #24]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	dd09      	ble.n	800bb3c <_dtoa_r+0x74c>
 800bb28:	42b3      	cmp	r3, r6
 800bb2a:	9a00      	ldr	r2, [sp, #0]
 800bb2c:	bfa8      	it	ge
 800bb2e:	4633      	movge	r3, r6
 800bb30:	1ad2      	subs	r2, r2, r3
 800bb32:	9200      	str	r2, [sp, #0]
 800bb34:	9a06      	ldr	r2, [sp, #24]
 800bb36:	1af6      	subs	r6, r6, r3
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	9306      	str	r3, [sp, #24]
 800bb3c:	9b08      	ldr	r3, [sp, #32]
 800bb3e:	b30b      	cbz	r3, 800bb84 <_dtoa_r+0x794>
 800bb40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	f000 80c6 	beq.w	800bcd4 <_dtoa_r+0x8e4>
 800bb48:	2c00      	cmp	r4, #0
 800bb4a:	f000 80c0 	beq.w	800bcce <_dtoa_r+0x8de>
 800bb4e:	4629      	mov	r1, r5
 800bb50:	4622      	mov	r2, r4
 800bb52:	4648      	mov	r0, r9
 800bb54:	f000 fd12 	bl	800c57c <__pow5mult>
 800bb58:	9a02      	ldr	r2, [sp, #8]
 800bb5a:	4601      	mov	r1, r0
 800bb5c:	4605      	mov	r5, r0
 800bb5e:	4648      	mov	r0, r9
 800bb60:	f000 fc6a 	bl	800c438 <__multiply>
 800bb64:	9902      	ldr	r1, [sp, #8]
 800bb66:	4680      	mov	r8, r0
 800bb68:	4648      	mov	r0, r9
 800bb6a:	f000 fb51 	bl	800c210 <_Bfree>
 800bb6e:	9b08      	ldr	r3, [sp, #32]
 800bb70:	1b1b      	subs	r3, r3, r4
 800bb72:	9308      	str	r3, [sp, #32]
 800bb74:	f000 80b1 	beq.w	800bcda <_dtoa_r+0x8ea>
 800bb78:	9a08      	ldr	r2, [sp, #32]
 800bb7a:	4641      	mov	r1, r8
 800bb7c:	4648      	mov	r0, r9
 800bb7e:	f000 fcfd 	bl	800c57c <__pow5mult>
 800bb82:	9002      	str	r0, [sp, #8]
 800bb84:	2101      	movs	r1, #1
 800bb86:	4648      	mov	r0, r9
 800bb88:	f000 fc40 	bl	800c40c <__i2b>
 800bb8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb8e:	4604      	mov	r4, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 81d8 	beq.w	800bf46 <_dtoa_r+0xb56>
 800bb96:	461a      	mov	r2, r3
 800bb98:	4601      	mov	r1, r0
 800bb9a:	4648      	mov	r0, r9
 800bb9c:	f000 fcee 	bl	800c57c <__pow5mult>
 800bba0:	9b07      	ldr	r3, [sp, #28]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	4604      	mov	r4, r0
 800bba6:	f300 809f 	bgt.w	800bce8 <_dtoa_r+0x8f8>
 800bbaa:	9b04      	ldr	r3, [sp, #16]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f040 8097 	bne.w	800bce0 <_dtoa_r+0x8f0>
 800bbb2:	9b05      	ldr	r3, [sp, #20]
 800bbb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f040 8093 	bne.w	800bce4 <_dtoa_r+0x8f4>
 800bbbe:	9b05      	ldr	r3, [sp, #20]
 800bbc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbc4:	0d1b      	lsrs	r3, r3, #20
 800bbc6:	051b      	lsls	r3, r3, #20
 800bbc8:	b133      	cbz	r3, 800bbd8 <_dtoa_r+0x7e8>
 800bbca:	9b00      	ldr	r3, [sp, #0]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	9b06      	ldr	r3, [sp, #24]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	9306      	str	r3, [sp, #24]
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	9308      	str	r3, [sp, #32]
 800bbda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 81b8 	beq.w	800bf52 <_dtoa_r+0xb62>
 800bbe2:	6923      	ldr	r3, [r4, #16]
 800bbe4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bbe8:	6918      	ldr	r0, [r3, #16]
 800bbea:	f000 fbc3 	bl	800c374 <__hi0bits>
 800bbee:	f1c0 0020 	rsb	r0, r0, #32
 800bbf2:	9b06      	ldr	r3, [sp, #24]
 800bbf4:	4418      	add	r0, r3
 800bbf6:	f010 001f 	ands.w	r0, r0, #31
 800bbfa:	f000 8082 	beq.w	800bd02 <_dtoa_r+0x912>
 800bbfe:	f1c0 0320 	rsb	r3, r0, #32
 800bc02:	2b04      	cmp	r3, #4
 800bc04:	dd73      	ble.n	800bcee <_dtoa_r+0x8fe>
 800bc06:	9b00      	ldr	r3, [sp, #0]
 800bc08:	f1c0 001c 	rsb	r0, r0, #28
 800bc0c:	4403      	add	r3, r0
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	9b06      	ldr	r3, [sp, #24]
 800bc12:	4403      	add	r3, r0
 800bc14:	4406      	add	r6, r0
 800bc16:	9306      	str	r3, [sp, #24]
 800bc18:	9b00      	ldr	r3, [sp, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	dd05      	ble.n	800bc2a <_dtoa_r+0x83a>
 800bc1e:	9902      	ldr	r1, [sp, #8]
 800bc20:	461a      	mov	r2, r3
 800bc22:	4648      	mov	r0, r9
 800bc24:	f000 fd04 	bl	800c630 <__lshift>
 800bc28:	9002      	str	r0, [sp, #8]
 800bc2a:	9b06      	ldr	r3, [sp, #24]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	dd05      	ble.n	800bc3c <_dtoa_r+0x84c>
 800bc30:	4621      	mov	r1, r4
 800bc32:	461a      	mov	r2, r3
 800bc34:	4648      	mov	r0, r9
 800bc36:	f000 fcfb 	bl	800c630 <__lshift>
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d061      	beq.n	800bd06 <_dtoa_r+0x916>
 800bc42:	9802      	ldr	r0, [sp, #8]
 800bc44:	4621      	mov	r1, r4
 800bc46:	f000 fd5f 	bl	800c708 <__mcmp>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	da5b      	bge.n	800bd06 <_dtoa_r+0x916>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	9902      	ldr	r1, [sp, #8]
 800bc52:	220a      	movs	r2, #10
 800bc54:	4648      	mov	r0, r9
 800bc56:	f000 fafd 	bl	800c254 <__multadd>
 800bc5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc5c:	9002      	str	r0, [sp, #8]
 800bc5e:	f107 38ff 	add.w	r8, r7, #4294967295
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f000 8177 	beq.w	800bf56 <_dtoa_r+0xb66>
 800bc68:	4629      	mov	r1, r5
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	220a      	movs	r2, #10
 800bc6e:	4648      	mov	r0, r9
 800bc70:	f000 faf0 	bl	800c254 <__multadd>
 800bc74:	f1bb 0f00 	cmp.w	fp, #0
 800bc78:	4605      	mov	r5, r0
 800bc7a:	dc6f      	bgt.n	800bd5c <_dtoa_r+0x96c>
 800bc7c:	9b07      	ldr	r3, [sp, #28]
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	dc49      	bgt.n	800bd16 <_dtoa_r+0x926>
 800bc82:	e06b      	b.n	800bd5c <_dtoa_r+0x96c>
 800bc84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bc86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bc8a:	e73c      	b.n	800bb06 <_dtoa_r+0x716>
 800bc8c:	3fe00000 	.word	0x3fe00000
 800bc90:	40240000 	.word	0x40240000
 800bc94:	9b03      	ldr	r3, [sp, #12]
 800bc96:	1e5c      	subs	r4, r3, #1
 800bc98:	9b08      	ldr	r3, [sp, #32]
 800bc9a:	42a3      	cmp	r3, r4
 800bc9c:	db09      	blt.n	800bcb2 <_dtoa_r+0x8c2>
 800bc9e:	1b1c      	subs	r4, r3, r4
 800bca0:	9b03      	ldr	r3, [sp, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f6bf af30 	bge.w	800bb08 <_dtoa_r+0x718>
 800bca8:	9b00      	ldr	r3, [sp, #0]
 800bcaa:	9a03      	ldr	r2, [sp, #12]
 800bcac:	1a9e      	subs	r6, r3, r2
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e72b      	b.n	800bb0a <_dtoa_r+0x71a>
 800bcb2:	9b08      	ldr	r3, [sp, #32]
 800bcb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcb6:	9408      	str	r4, [sp, #32]
 800bcb8:	1ae3      	subs	r3, r4, r3
 800bcba:	441a      	add	r2, r3
 800bcbc:	9e00      	ldr	r6, [sp, #0]
 800bcbe:	9b03      	ldr	r3, [sp, #12]
 800bcc0:	920d      	str	r2, [sp, #52]	@ 0x34
 800bcc2:	2400      	movs	r4, #0
 800bcc4:	e721      	b.n	800bb0a <_dtoa_r+0x71a>
 800bcc6:	9c08      	ldr	r4, [sp, #32]
 800bcc8:	9e00      	ldr	r6, [sp, #0]
 800bcca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bccc:	e728      	b.n	800bb20 <_dtoa_r+0x730>
 800bcce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bcd2:	e751      	b.n	800bb78 <_dtoa_r+0x788>
 800bcd4:	9a08      	ldr	r2, [sp, #32]
 800bcd6:	9902      	ldr	r1, [sp, #8]
 800bcd8:	e750      	b.n	800bb7c <_dtoa_r+0x78c>
 800bcda:	f8cd 8008 	str.w	r8, [sp, #8]
 800bcde:	e751      	b.n	800bb84 <_dtoa_r+0x794>
 800bce0:	2300      	movs	r3, #0
 800bce2:	e779      	b.n	800bbd8 <_dtoa_r+0x7e8>
 800bce4:	9b04      	ldr	r3, [sp, #16]
 800bce6:	e777      	b.n	800bbd8 <_dtoa_r+0x7e8>
 800bce8:	2300      	movs	r3, #0
 800bcea:	9308      	str	r3, [sp, #32]
 800bcec:	e779      	b.n	800bbe2 <_dtoa_r+0x7f2>
 800bcee:	d093      	beq.n	800bc18 <_dtoa_r+0x828>
 800bcf0:	9a00      	ldr	r2, [sp, #0]
 800bcf2:	331c      	adds	r3, #28
 800bcf4:	441a      	add	r2, r3
 800bcf6:	9200      	str	r2, [sp, #0]
 800bcf8:	9a06      	ldr	r2, [sp, #24]
 800bcfa:	441a      	add	r2, r3
 800bcfc:	441e      	add	r6, r3
 800bcfe:	9206      	str	r2, [sp, #24]
 800bd00:	e78a      	b.n	800bc18 <_dtoa_r+0x828>
 800bd02:	4603      	mov	r3, r0
 800bd04:	e7f4      	b.n	800bcf0 <_dtoa_r+0x900>
 800bd06:	9b03      	ldr	r3, [sp, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	46b8      	mov	r8, r7
 800bd0c:	dc20      	bgt.n	800bd50 <_dtoa_r+0x960>
 800bd0e:	469b      	mov	fp, r3
 800bd10:	9b07      	ldr	r3, [sp, #28]
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	dd1e      	ble.n	800bd54 <_dtoa_r+0x964>
 800bd16:	f1bb 0f00 	cmp.w	fp, #0
 800bd1a:	f47f adb1 	bne.w	800b880 <_dtoa_r+0x490>
 800bd1e:	4621      	mov	r1, r4
 800bd20:	465b      	mov	r3, fp
 800bd22:	2205      	movs	r2, #5
 800bd24:	4648      	mov	r0, r9
 800bd26:	f000 fa95 	bl	800c254 <__multadd>
 800bd2a:	4601      	mov	r1, r0
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	9802      	ldr	r0, [sp, #8]
 800bd30:	f000 fcea 	bl	800c708 <__mcmp>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	f77f ada3 	ble.w	800b880 <_dtoa_r+0x490>
 800bd3a:	4656      	mov	r6, sl
 800bd3c:	2331      	movs	r3, #49	@ 0x31
 800bd3e:	f806 3b01 	strb.w	r3, [r6], #1
 800bd42:	f108 0801 	add.w	r8, r8, #1
 800bd46:	e59f      	b.n	800b888 <_dtoa_r+0x498>
 800bd48:	9c03      	ldr	r4, [sp, #12]
 800bd4a:	46b8      	mov	r8, r7
 800bd4c:	4625      	mov	r5, r4
 800bd4e:	e7f4      	b.n	800bd3a <_dtoa_r+0x94a>
 800bd50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bd54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f000 8101 	beq.w	800bf5e <_dtoa_r+0xb6e>
 800bd5c:	2e00      	cmp	r6, #0
 800bd5e:	dd05      	ble.n	800bd6c <_dtoa_r+0x97c>
 800bd60:	4629      	mov	r1, r5
 800bd62:	4632      	mov	r2, r6
 800bd64:	4648      	mov	r0, r9
 800bd66:	f000 fc63 	bl	800c630 <__lshift>
 800bd6a:	4605      	mov	r5, r0
 800bd6c:	9b08      	ldr	r3, [sp, #32]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d05c      	beq.n	800be2c <_dtoa_r+0xa3c>
 800bd72:	6869      	ldr	r1, [r5, #4]
 800bd74:	4648      	mov	r0, r9
 800bd76:	f000 fa0b 	bl	800c190 <_Balloc>
 800bd7a:	4606      	mov	r6, r0
 800bd7c:	b928      	cbnz	r0, 800bd8a <_dtoa_r+0x99a>
 800bd7e:	4b82      	ldr	r3, [pc, #520]	@ (800bf88 <_dtoa_r+0xb98>)
 800bd80:	4602      	mov	r2, r0
 800bd82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bd86:	f7ff bb4a 	b.w	800b41e <_dtoa_r+0x2e>
 800bd8a:	692a      	ldr	r2, [r5, #16]
 800bd8c:	3202      	adds	r2, #2
 800bd8e:	0092      	lsls	r2, r2, #2
 800bd90:	f105 010c 	add.w	r1, r5, #12
 800bd94:	300c      	adds	r0, #12
 800bd96:	f001 ff69 	bl	800dc6c <memcpy>
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	4631      	mov	r1, r6
 800bd9e:	4648      	mov	r0, r9
 800bda0:	f000 fc46 	bl	800c630 <__lshift>
 800bda4:	f10a 0301 	add.w	r3, sl, #1
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	eb0a 030b 	add.w	r3, sl, fp
 800bdae:	9308      	str	r3, [sp, #32]
 800bdb0:	9b04      	ldr	r3, [sp, #16]
 800bdb2:	f003 0301 	and.w	r3, r3, #1
 800bdb6:	462f      	mov	r7, r5
 800bdb8:	9306      	str	r3, [sp, #24]
 800bdba:	4605      	mov	r5, r0
 800bdbc:	9b00      	ldr	r3, [sp, #0]
 800bdbe:	9802      	ldr	r0, [sp, #8]
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	f103 3bff 	add.w	fp, r3, #4294967295
 800bdc6:	f7ff fa89 	bl	800b2dc <quorem>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	3330      	adds	r3, #48	@ 0x30
 800bdce:	9003      	str	r0, [sp, #12]
 800bdd0:	4639      	mov	r1, r7
 800bdd2:	9802      	ldr	r0, [sp, #8]
 800bdd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdd6:	f000 fc97 	bl	800c708 <__mcmp>
 800bdda:	462a      	mov	r2, r5
 800bddc:	9004      	str	r0, [sp, #16]
 800bdde:	4621      	mov	r1, r4
 800bde0:	4648      	mov	r0, r9
 800bde2:	f000 fcad 	bl	800c740 <__mdiff>
 800bde6:	68c2      	ldr	r2, [r0, #12]
 800bde8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdea:	4606      	mov	r6, r0
 800bdec:	bb02      	cbnz	r2, 800be30 <_dtoa_r+0xa40>
 800bdee:	4601      	mov	r1, r0
 800bdf0:	9802      	ldr	r0, [sp, #8]
 800bdf2:	f000 fc89 	bl	800c708 <__mcmp>
 800bdf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	4631      	mov	r1, r6
 800bdfc:	4648      	mov	r0, r9
 800bdfe:	920c      	str	r2, [sp, #48]	@ 0x30
 800be00:	9309      	str	r3, [sp, #36]	@ 0x24
 800be02:	f000 fa05 	bl	800c210 <_Bfree>
 800be06:	9b07      	ldr	r3, [sp, #28]
 800be08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800be0a:	9e00      	ldr	r6, [sp, #0]
 800be0c:	ea42 0103 	orr.w	r1, r2, r3
 800be10:	9b06      	ldr	r3, [sp, #24]
 800be12:	4319      	orrs	r1, r3
 800be14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be16:	d10d      	bne.n	800be34 <_dtoa_r+0xa44>
 800be18:	2b39      	cmp	r3, #57	@ 0x39
 800be1a:	d027      	beq.n	800be6c <_dtoa_r+0xa7c>
 800be1c:	9a04      	ldr	r2, [sp, #16]
 800be1e:	2a00      	cmp	r2, #0
 800be20:	dd01      	ble.n	800be26 <_dtoa_r+0xa36>
 800be22:	9b03      	ldr	r3, [sp, #12]
 800be24:	3331      	adds	r3, #49	@ 0x31
 800be26:	f88b 3000 	strb.w	r3, [fp]
 800be2a:	e52e      	b.n	800b88a <_dtoa_r+0x49a>
 800be2c:	4628      	mov	r0, r5
 800be2e:	e7b9      	b.n	800bda4 <_dtoa_r+0x9b4>
 800be30:	2201      	movs	r2, #1
 800be32:	e7e2      	b.n	800bdfa <_dtoa_r+0xa0a>
 800be34:	9904      	ldr	r1, [sp, #16]
 800be36:	2900      	cmp	r1, #0
 800be38:	db04      	blt.n	800be44 <_dtoa_r+0xa54>
 800be3a:	9807      	ldr	r0, [sp, #28]
 800be3c:	4301      	orrs	r1, r0
 800be3e:	9806      	ldr	r0, [sp, #24]
 800be40:	4301      	orrs	r1, r0
 800be42:	d120      	bne.n	800be86 <_dtoa_r+0xa96>
 800be44:	2a00      	cmp	r2, #0
 800be46:	ddee      	ble.n	800be26 <_dtoa_r+0xa36>
 800be48:	9902      	ldr	r1, [sp, #8]
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	2201      	movs	r2, #1
 800be4e:	4648      	mov	r0, r9
 800be50:	f000 fbee 	bl	800c630 <__lshift>
 800be54:	4621      	mov	r1, r4
 800be56:	9002      	str	r0, [sp, #8]
 800be58:	f000 fc56 	bl	800c708 <__mcmp>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	9b00      	ldr	r3, [sp, #0]
 800be60:	dc02      	bgt.n	800be68 <_dtoa_r+0xa78>
 800be62:	d1e0      	bne.n	800be26 <_dtoa_r+0xa36>
 800be64:	07da      	lsls	r2, r3, #31
 800be66:	d5de      	bpl.n	800be26 <_dtoa_r+0xa36>
 800be68:	2b39      	cmp	r3, #57	@ 0x39
 800be6a:	d1da      	bne.n	800be22 <_dtoa_r+0xa32>
 800be6c:	2339      	movs	r3, #57	@ 0x39
 800be6e:	f88b 3000 	strb.w	r3, [fp]
 800be72:	4633      	mov	r3, r6
 800be74:	461e      	mov	r6, r3
 800be76:	3b01      	subs	r3, #1
 800be78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800be7c:	2a39      	cmp	r2, #57	@ 0x39
 800be7e:	d04e      	beq.n	800bf1e <_dtoa_r+0xb2e>
 800be80:	3201      	adds	r2, #1
 800be82:	701a      	strb	r2, [r3, #0]
 800be84:	e501      	b.n	800b88a <_dtoa_r+0x49a>
 800be86:	2a00      	cmp	r2, #0
 800be88:	dd03      	ble.n	800be92 <_dtoa_r+0xaa2>
 800be8a:	2b39      	cmp	r3, #57	@ 0x39
 800be8c:	d0ee      	beq.n	800be6c <_dtoa_r+0xa7c>
 800be8e:	3301      	adds	r3, #1
 800be90:	e7c9      	b.n	800be26 <_dtoa_r+0xa36>
 800be92:	9a00      	ldr	r2, [sp, #0]
 800be94:	9908      	ldr	r1, [sp, #32]
 800be96:	f802 3c01 	strb.w	r3, [r2, #-1]
 800be9a:	428a      	cmp	r2, r1
 800be9c:	d028      	beq.n	800bef0 <_dtoa_r+0xb00>
 800be9e:	9902      	ldr	r1, [sp, #8]
 800bea0:	2300      	movs	r3, #0
 800bea2:	220a      	movs	r2, #10
 800bea4:	4648      	mov	r0, r9
 800bea6:	f000 f9d5 	bl	800c254 <__multadd>
 800beaa:	42af      	cmp	r7, r5
 800beac:	9002      	str	r0, [sp, #8]
 800beae:	f04f 0300 	mov.w	r3, #0
 800beb2:	f04f 020a 	mov.w	r2, #10
 800beb6:	4639      	mov	r1, r7
 800beb8:	4648      	mov	r0, r9
 800beba:	d107      	bne.n	800becc <_dtoa_r+0xadc>
 800bebc:	f000 f9ca 	bl	800c254 <__multadd>
 800bec0:	4607      	mov	r7, r0
 800bec2:	4605      	mov	r5, r0
 800bec4:	9b00      	ldr	r3, [sp, #0]
 800bec6:	3301      	adds	r3, #1
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	e777      	b.n	800bdbc <_dtoa_r+0x9cc>
 800becc:	f000 f9c2 	bl	800c254 <__multadd>
 800bed0:	4629      	mov	r1, r5
 800bed2:	4607      	mov	r7, r0
 800bed4:	2300      	movs	r3, #0
 800bed6:	220a      	movs	r2, #10
 800bed8:	4648      	mov	r0, r9
 800beda:	f000 f9bb 	bl	800c254 <__multadd>
 800bede:	4605      	mov	r5, r0
 800bee0:	e7f0      	b.n	800bec4 <_dtoa_r+0xad4>
 800bee2:	f1bb 0f00 	cmp.w	fp, #0
 800bee6:	bfcc      	ite	gt
 800bee8:	465e      	movgt	r6, fp
 800beea:	2601      	movle	r6, #1
 800beec:	4456      	add	r6, sl
 800beee:	2700      	movs	r7, #0
 800bef0:	9902      	ldr	r1, [sp, #8]
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	2201      	movs	r2, #1
 800bef6:	4648      	mov	r0, r9
 800bef8:	f000 fb9a 	bl	800c630 <__lshift>
 800befc:	4621      	mov	r1, r4
 800befe:	9002      	str	r0, [sp, #8]
 800bf00:	f000 fc02 	bl	800c708 <__mcmp>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	dcb4      	bgt.n	800be72 <_dtoa_r+0xa82>
 800bf08:	d102      	bne.n	800bf10 <_dtoa_r+0xb20>
 800bf0a:	9b00      	ldr	r3, [sp, #0]
 800bf0c:	07db      	lsls	r3, r3, #31
 800bf0e:	d4b0      	bmi.n	800be72 <_dtoa_r+0xa82>
 800bf10:	4633      	mov	r3, r6
 800bf12:	461e      	mov	r6, r3
 800bf14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf18:	2a30      	cmp	r2, #48	@ 0x30
 800bf1a:	d0fa      	beq.n	800bf12 <_dtoa_r+0xb22>
 800bf1c:	e4b5      	b.n	800b88a <_dtoa_r+0x49a>
 800bf1e:	459a      	cmp	sl, r3
 800bf20:	d1a8      	bne.n	800be74 <_dtoa_r+0xa84>
 800bf22:	2331      	movs	r3, #49	@ 0x31
 800bf24:	f108 0801 	add.w	r8, r8, #1
 800bf28:	f88a 3000 	strb.w	r3, [sl]
 800bf2c:	e4ad      	b.n	800b88a <_dtoa_r+0x49a>
 800bf2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf30:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bf8c <_dtoa_r+0xb9c>
 800bf34:	b11b      	cbz	r3, 800bf3e <_dtoa_r+0xb4e>
 800bf36:	f10a 0308 	add.w	r3, sl, #8
 800bf3a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bf3c:	6013      	str	r3, [r2, #0]
 800bf3e:	4650      	mov	r0, sl
 800bf40:	b017      	add	sp, #92	@ 0x5c
 800bf42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf46:	9b07      	ldr	r3, [sp, #28]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	f77f ae2e 	ble.w	800bbaa <_dtoa_r+0x7ba>
 800bf4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf50:	9308      	str	r3, [sp, #32]
 800bf52:	2001      	movs	r0, #1
 800bf54:	e64d      	b.n	800bbf2 <_dtoa_r+0x802>
 800bf56:	f1bb 0f00 	cmp.w	fp, #0
 800bf5a:	f77f aed9 	ble.w	800bd10 <_dtoa_r+0x920>
 800bf5e:	4656      	mov	r6, sl
 800bf60:	9802      	ldr	r0, [sp, #8]
 800bf62:	4621      	mov	r1, r4
 800bf64:	f7ff f9ba 	bl	800b2dc <quorem>
 800bf68:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bf6c:	f806 3b01 	strb.w	r3, [r6], #1
 800bf70:	eba6 020a 	sub.w	r2, r6, sl
 800bf74:	4593      	cmp	fp, r2
 800bf76:	ddb4      	ble.n	800bee2 <_dtoa_r+0xaf2>
 800bf78:	9902      	ldr	r1, [sp, #8]
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	220a      	movs	r2, #10
 800bf7e:	4648      	mov	r0, r9
 800bf80:	f000 f968 	bl	800c254 <__multadd>
 800bf84:	9002      	str	r0, [sp, #8]
 800bf86:	e7eb      	b.n	800bf60 <_dtoa_r+0xb70>
 800bf88:	0800eba5 	.word	0x0800eba5
 800bf8c:	0800eb29 	.word	0x0800eb29

0800bf90 <_free_r>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	4605      	mov	r5, r0
 800bf94:	2900      	cmp	r1, #0
 800bf96:	d041      	beq.n	800c01c <_free_r+0x8c>
 800bf98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf9c:	1f0c      	subs	r4, r1, #4
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	bfb8      	it	lt
 800bfa2:	18e4      	addlt	r4, r4, r3
 800bfa4:	f000 f8e8 	bl	800c178 <__malloc_lock>
 800bfa8:	4a1d      	ldr	r2, [pc, #116]	@ (800c020 <_free_r+0x90>)
 800bfaa:	6813      	ldr	r3, [r2, #0]
 800bfac:	b933      	cbnz	r3, 800bfbc <_free_r+0x2c>
 800bfae:	6063      	str	r3, [r4, #4]
 800bfb0:	6014      	str	r4, [r2, #0]
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfb8:	f000 b8e4 	b.w	800c184 <__malloc_unlock>
 800bfbc:	42a3      	cmp	r3, r4
 800bfbe:	d908      	bls.n	800bfd2 <_free_r+0x42>
 800bfc0:	6820      	ldr	r0, [r4, #0]
 800bfc2:	1821      	adds	r1, r4, r0
 800bfc4:	428b      	cmp	r3, r1
 800bfc6:	bf01      	itttt	eq
 800bfc8:	6819      	ldreq	r1, [r3, #0]
 800bfca:	685b      	ldreq	r3, [r3, #4]
 800bfcc:	1809      	addeq	r1, r1, r0
 800bfce:	6021      	streq	r1, [r4, #0]
 800bfd0:	e7ed      	b.n	800bfae <_free_r+0x1e>
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	b10b      	cbz	r3, 800bfdc <_free_r+0x4c>
 800bfd8:	42a3      	cmp	r3, r4
 800bfda:	d9fa      	bls.n	800bfd2 <_free_r+0x42>
 800bfdc:	6811      	ldr	r1, [r2, #0]
 800bfde:	1850      	adds	r0, r2, r1
 800bfe0:	42a0      	cmp	r0, r4
 800bfe2:	d10b      	bne.n	800bffc <_free_r+0x6c>
 800bfe4:	6820      	ldr	r0, [r4, #0]
 800bfe6:	4401      	add	r1, r0
 800bfe8:	1850      	adds	r0, r2, r1
 800bfea:	4283      	cmp	r3, r0
 800bfec:	6011      	str	r1, [r2, #0]
 800bfee:	d1e0      	bne.n	800bfb2 <_free_r+0x22>
 800bff0:	6818      	ldr	r0, [r3, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	6053      	str	r3, [r2, #4]
 800bff6:	4408      	add	r0, r1
 800bff8:	6010      	str	r0, [r2, #0]
 800bffa:	e7da      	b.n	800bfb2 <_free_r+0x22>
 800bffc:	d902      	bls.n	800c004 <_free_r+0x74>
 800bffe:	230c      	movs	r3, #12
 800c000:	602b      	str	r3, [r5, #0]
 800c002:	e7d6      	b.n	800bfb2 <_free_r+0x22>
 800c004:	6820      	ldr	r0, [r4, #0]
 800c006:	1821      	adds	r1, r4, r0
 800c008:	428b      	cmp	r3, r1
 800c00a:	bf04      	itt	eq
 800c00c:	6819      	ldreq	r1, [r3, #0]
 800c00e:	685b      	ldreq	r3, [r3, #4]
 800c010:	6063      	str	r3, [r4, #4]
 800c012:	bf04      	itt	eq
 800c014:	1809      	addeq	r1, r1, r0
 800c016:	6021      	streq	r1, [r4, #0]
 800c018:	6054      	str	r4, [r2, #4]
 800c01a:	e7ca      	b.n	800bfb2 <_free_r+0x22>
 800c01c:	bd38      	pop	{r3, r4, r5, pc}
 800c01e:	bf00      	nop
 800c020:	20006f88 	.word	0x20006f88

0800c024 <malloc>:
 800c024:	4b02      	ldr	r3, [pc, #8]	@ (800c030 <malloc+0xc>)
 800c026:	4601      	mov	r1, r0
 800c028:	6818      	ldr	r0, [r3, #0]
 800c02a:	f000 b825 	b.w	800c078 <_malloc_r>
 800c02e:	bf00      	nop
 800c030:	20000108 	.word	0x20000108

0800c034 <sbrk_aligned>:
 800c034:	b570      	push	{r4, r5, r6, lr}
 800c036:	4e0f      	ldr	r6, [pc, #60]	@ (800c074 <sbrk_aligned+0x40>)
 800c038:	460c      	mov	r4, r1
 800c03a:	6831      	ldr	r1, [r6, #0]
 800c03c:	4605      	mov	r5, r0
 800c03e:	b911      	cbnz	r1, 800c046 <sbrk_aligned+0x12>
 800c040:	f001 fe04 	bl	800dc4c <_sbrk_r>
 800c044:	6030      	str	r0, [r6, #0]
 800c046:	4621      	mov	r1, r4
 800c048:	4628      	mov	r0, r5
 800c04a:	f001 fdff 	bl	800dc4c <_sbrk_r>
 800c04e:	1c43      	adds	r3, r0, #1
 800c050:	d103      	bne.n	800c05a <sbrk_aligned+0x26>
 800c052:	f04f 34ff 	mov.w	r4, #4294967295
 800c056:	4620      	mov	r0, r4
 800c058:	bd70      	pop	{r4, r5, r6, pc}
 800c05a:	1cc4      	adds	r4, r0, #3
 800c05c:	f024 0403 	bic.w	r4, r4, #3
 800c060:	42a0      	cmp	r0, r4
 800c062:	d0f8      	beq.n	800c056 <sbrk_aligned+0x22>
 800c064:	1a21      	subs	r1, r4, r0
 800c066:	4628      	mov	r0, r5
 800c068:	f001 fdf0 	bl	800dc4c <_sbrk_r>
 800c06c:	3001      	adds	r0, #1
 800c06e:	d1f2      	bne.n	800c056 <sbrk_aligned+0x22>
 800c070:	e7ef      	b.n	800c052 <sbrk_aligned+0x1e>
 800c072:	bf00      	nop
 800c074:	20006f84 	.word	0x20006f84

0800c078 <_malloc_r>:
 800c078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c07c:	1ccd      	adds	r5, r1, #3
 800c07e:	f025 0503 	bic.w	r5, r5, #3
 800c082:	3508      	adds	r5, #8
 800c084:	2d0c      	cmp	r5, #12
 800c086:	bf38      	it	cc
 800c088:	250c      	movcc	r5, #12
 800c08a:	2d00      	cmp	r5, #0
 800c08c:	4606      	mov	r6, r0
 800c08e:	db01      	blt.n	800c094 <_malloc_r+0x1c>
 800c090:	42a9      	cmp	r1, r5
 800c092:	d904      	bls.n	800c09e <_malloc_r+0x26>
 800c094:	230c      	movs	r3, #12
 800c096:	6033      	str	r3, [r6, #0]
 800c098:	2000      	movs	r0, #0
 800c09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c09e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c174 <_malloc_r+0xfc>
 800c0a2:	f000 f869 	bl	800c178 <__malloc_lock>
 800c0a6:	f8d8 3000 	ldr.w	r3, [r8]
 800c0aa:	461c      	mov	r4, r3
 800c0ac:	bb44      	cbnz	r4, 800c100 <_malloc_r+0x88>
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	f7ff ffbf 	bl	800c034 <sbrk_aligned>
 800c0b6:	1c43      	adds	r3, r0, #1
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	d158      	bne.n	800c16e <_malloc_r+0xf6>
 800c0bc:	f8d8 4000 	ldr.w	r4, [r8]
 800c0c0:	4627      	mov	r7, r4
 800c0c2:	2f00      	cmp	r7, #0
 800c0c4:	d143      	bne.n	800c14e <_malloc_r+0xd6>
 800c0c6:	2c00      	cmp	r4, #0
 800c0c8:	d04b      	beq.n	800c162 <_malloc_r+0xea>
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	4639      	mov	r1, r7
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	eb04 0903 	add.w	r9, r4, r3
 800c0d4:	f001 fdba 	bl	800dc4c <_sbrk_r>
 800c0d8:	4581      	cmp	r9, r0
 800c0da:	d142      	bne.n	800c162 <_malloc_r+0xea>
 800c0dc:	6821      	ldr	r1, [r4, #0]
 800c0de:	1a6d      	subs	r5, r5, r1
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	f7ff ffa6 	bl	800c034 <sbrk_aligned>
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d03a      	beq.n	800c162 <_malloc_r+0xea>
 800c0ec:	6823      	ldr	r3, [r4, #0]
 800c0ee:	442b      	add	r3, r5
 800c0f0:	6023      	str	r3, [r4, #0]
 800c0f2:	f8d8 3000 	ldr.w	r3, [r8]
 800c0f6:	685a      	ldr	r2, [r3, #4]
 800c0f8:	bb62      	cbnz	r2, 800c154 <_malloc_r+0xdc>
 800c0fa:	f8c8 7000 	str.w	r7, [r8]
 800c0fe:	e00f      	b.n	800c120 <_malloc_r+0xa8>
 800c100:	6822      	ldr	r2, [r4, #0]
 800c102:	1b52      	subs	r2, r2, r5
 800c104:	d420      	bmi.n	800c148 <_malloc_r+0xd0>
 800c106:	2a0b      	cmp	r2, #11
 800c108:	d917      	bls.n	800c13a <_malloc_r+0xc2>
 800c10a:	1961      	adds	r1, r4, r5
 800c10c:	42a3      	cmp	r3, r4
 800c10e:	6025      	str	r5, [r4, #0]
 800c110:	bf18      	it	ne
 800c112:	6059      	strne	r1, [r3, #4]
 800c114:	6863      	ldr	r3, [r4, #4]
 800c116:	bf08      	it	eq
 800c118:	f8c8 1000 	streq.w	r1, [r8]
 800c11c:	5162      	str	r2, [r4, r5]
 800c11e:	604b      	str	r3, [r1, #4]
 800c120:	4630      	mov	r0, r6
 800c122:	f000 f82f 	bl	800c184 <__malloc_unlock>
 800c126:	f104 000b 	add.w	r0, r4, #11
 800c12a:	1d23      	adds	r3, r4, #4
 800c12c:	f020 0007 	bic.w	r0, r0, #7
 800c130:	1ac2      	subs	r2, r0, r3
 800c132:	bf1c      	itt	ne
 800c134:	1a1b      	subne	r3, r3, r0
 800c136:	50a3      	strne	r3, [r4, r2]
 800c138:	e7af      	b.n	800c09a <_malloc_r+0x22>
 800c13a:	6862      	ldr	r2, [r4, #4]
 800c13c:	42a3      	cmp	r3, r4
 800c13e:	bf0c      	ite	eq
 800c140:	f8c8 2000 	streq.w	r2, [r8]
 800c144:	605a      	strne	r2, [r3, #4]
 800c146:	e7eb      	b.n	800c120 <_malloc_r+0xa8>
 800c148:	4623      	mov	r3, r4
 800c14a:	6864      	ldr	r4, [r4, #4]
 800c14c:	e7ae      	b.n	800c0ac <_malloc_r+0x34>
 800c14e:	463c      	mov	r4, r7
 800c150:	687f      	ldr	r7, [r7, #4]
 800c152:	e7b6      	b.n	800c0c2 <_malloc_r+0x4a>
 800c154:	461a      	mov	r2, r3
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	42a3      	cmp	r3, r4
 800c15a:	d1fb      	bne.n	800c154 <_malloc_r+0xdc>
 800c15c:	2300      	movs	r3, #0
 800c15e:	6053      	str	r3, [r2, #4]
 800c160:	e7de      	b.n	800c120 <_malloc_r+0xa8>
 800c162:	230c      	movs	r3, #12
 800c164:	6033      	str	r3, [r6, #0]
 800c166:	4630      	mov	r0, r6
 800c168:	f000 f80c 	bl	800c184 <__malloc_unlock>
 800c16c:	e794      	b.n	800c098 <_malloc_r+0x20>
 800c16e:	6005      	str	r5, [r0, #0]
 800c170:	e7d6      	b.n	800c120 <_malloc_r+0xa8>
 800c172:	bf00      	nop
 800c174:	20006f88 	.word	0x20006f88

0800c178 <__malloc_lock>:
 800c178:	4801      	ldr	r0, [pc, #4]	@ (800c180 <__malloc_lock+0x8>)
 800c17a:	f7ff b8a6 	b.w	800b2ca <__retarget_lock_acquire_recursive>
 800c17e:	bf00      	nop
 800c180:	20006f80 	.word	0x20006f80

0800c184 <__malloc_unlock>:
 800c184:	4801      	ldr	r0, [pc, #4]	@ (800c18c <__malloc_unlock+0x8>)
 800c186:	f7ff b8a1 	b.w	800b2cc <__retarget_lock_release_recursive>
 800c18a:	bf00      	nop
 800c18c:	20006f80 	.word	0x20006f80

0800c190 <_Balloc>:
 800c190:	b570      	push	{r4, r5, r6, lr}
 800c192:	69c6      	ldr	r6, [r0, #28]
 800c194:	4604      	mov	r4, r0
 800c196:	460d      	mov	r5, r1
 800c198:	b976      	cbnz	r6, 800c1b8 <_Balloc+0x28>
 800c19a:	2010      	movs	r0, #16
 800c19c:	f7ff ff42 	bl	800c024 <malloc>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	61e0      	str	r0, [r4, #28]
 800c1a4:	b920      	cbnz	r0, 800c1b0 <_Balloc+0x20>
 800c1a6:	4b18      	ldr	r3, [pc, #96]	@ (800c208 <_Balloc+0x78>)
 800c1a8:	4818      	ldr	r0, [pc, #96]	@ (800c20c <_Balloc+0x7c>)
 800c1aa:	216b      	movs	r1, #107	@ 0x6b
 800c1ac:	f001 fd74 	bl	800dc98 <__assert_func>
 800c1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1b4:	6006      	str	r6, [r0, #0]
 800c1b6:	60c6      	str	r6, [r0, #12]
 800c1b8:	69e6      	ldr	r6, [r4, #28]
 800c1ba:	68f3      	ldr	r3, [r6, #12]
 800c1bc:	b183      	cbz	r3, 800c1e0 <_Balloc+0x50>
 800c1be:	69e3      	ldr	r3, [r4, #28]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1c6:	b9b8      	cbnz	r0, 800c1f8 <_Balloc+0x68>
 800c1c8:	2101      	movs	r1, #1
 800c1ca:	fa01 f605 	lsl.w	r6, r1, r5
 800c1ce:	1d72      	adds	r2, r6, #5
 800c1d0:	0092      	lsls	r2, r2, #2
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f001 fd7e 	bl	800dcd4 <_calloc_r>
 800c1d8:	b160      	cbz	r0, 800c1f4 <_Balloc+0x64>
 800c1da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c1de:	e00e      	b.n	800c1fe <_Balloc+0x6e>
 800c1e0:	2221      	movs	r2, #33	@ 0x21
 800c1e2:	2104      	movs	r1, #4
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f001 fd75 	bl	800dcd4 <_calloc_r>
 800c1ea:	69e3      	ldr	r3, [r4, #28]
 800c1ec:	60f0      	str	r0, [r6, #12]
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1e4      	bne.n	800c1be <_Balloc+0x2e>
 800c1f4:	2000      	movs	r0, #0
 800c1f6:	bd70      	pop	{r4, r5, r6, pc}
 800c1f8:	6802      	ldr	r2, [r0, #0]
 800c1fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c1fe:	2300      	movs	r3, #0
 800c200:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c204:	e7f7      	b.n	800c1f6 <_Balloc+0x66>
 800c206:	bf00      	nop
 800c208:	0800eb36 	.word	0x0800eb36
 800c20c:	0800ebb6 	.word	0x0800ebb6

0800c210 <_Bfree>:
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	69c6      	ldr	r6, [r0, #28]
 800c214:	4605      	mov	r5, r0
 800c216:	460c      	mov	r4, r1
 800c218:	b976      	cbnz	r6, 800c238 <_Bfree+0x28>
 800c21a:	2010      	movs	r0, #16
 800c21c:	f7ff ff02 	bl	800c024 <malloc>
 800c220:	4602      	mov	r2, r0
 800c222:	61e8      	str	r0, [r5, #28]
 800c224:	b920      	cbnz	r0, 800c230 <_Bfree+0x20>
 800c226:	4b09      	ldr	r3, [pc, #36]	@ (800c24c <_Bfree+0x3c>)
 800c228:	4809      	ldr	r0, [pc, #36]	@ (800c250 <_Bfree+0x40>)
 800c22a:	218f      	movs	r1, #143	@ 0x8f
 800c22c:	f001 fd34 	bl	800dc98 <__assert_func>
 800c230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c234:	6006      	str	r6, [r0, #0]
 800c236:	60c6      	str	r6, [r0, #12]
 800c238:	b13c      	cbz	r4, 800c24a <_Bfree+0x3a>
 800c23a:	69eb      	ldr	r3, [r5, #28]
 800c23c:	6862      	ldr	r2, [r4, #4]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c244:	6021      	str	r1, [r4, #0]
 800c246:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c24a:	bd70      	pop	{r4, r5, r6, pc}
 800c24c:	0800eb36 	.word	0x0800eb36
 800c250:	0800ebb6 	.word	0x0800ebb6

0800c254 <__multadd>:
 800c254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c258:	690d      	ldr	r5, [r1, #16]
 800c25a:	4607      	mov	r7, r0
 800c25c:	460c      	mov	r4, r1
 800c25e:	461e      	mov	r6, r3
 800c260:	f101 0c14 	add.w	ip, r1, #20
 800c264:	2000      	movs	r0, #0
 800c266:	f8dc 3000 	ldr.w	r3, [ip]
 800c26a:	b299      	uxth	r1, r3
 800c26c:	fb02 6101 	mla	r1, r2, r1, r6
 800c270:	0c1e      	lsrs	r6, r3, #16
 800c272:	0c0b      	lsrs	r3, r1, #16
 800c274:	fb02 3306 	mla	r3, r2, r6, r3
 800c278:	b289      	uxth	r1, r1
 800c27a:	3001      	adds	r0, #1
 800c27c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c280:	4285      	cmp	r5, r0
 800c282:	f84c 1b04 	str.w	r1, [ip], #4
 800c286:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c28a:	dcec      	bgt.n	800c266 <__multadd+0x12>
 800c28c:	b30e      	cbz	r6, 800c2d2 <__multadd+0x7e>
 800c28e:	68a3      	ldr	r3, [r4, #8]
 800c290:	42ab      	cmp	r3, r5
 800c292:	dc19      	bgt.n	800c2c8 <__multadd+0x74>
 800c294:	6861      	ldr	r1, [r4, #4]
 800c296:	4638      	mov	r0, r7
 800c298:	3101      	adds	r1, #1
 800c29a:	f7ff ff79 	bl	800c190 <_Balloc>
 800c29e:	4680      	mov	r8, r0
 800c2a0:	b928      	cbnz	r0, 800c2ae <__multadd+0x5a>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c2d8 <__multadd+0x84>)
 800c2a6:	480d      	ldr	r0, [pc, #52]	@ (800c2dc <__multadd+0x88>)
 800c2a8:	21ba      	movs	r1, #186	@ 0xba
 800c2aa:	f001 fcf5 	bl	800dc98 <__assert_func>
 800c2ae:	6922      	ldr	r2, [r4, #16]
 800c2b0:	3202      	adds	r2, #2
 800c2b2:	f104 010c 	add.w	r1, r4, #12
 800c2b6:	0092      	lsls	r2, r2, #2
 800c2b8:	300c      	adds	r0, #12
 800c2ba:	f001 fcd7 	bl	800dc6c <memcpy>
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4638      	mov	r0, r7
 800c2c2:	f7ff ffa5 	bl	800c210 <_Bfree>
 800c2c6:	4644      	mov	r4, r8
 800c2c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2cc:	3501      	adds	r5, #1
 800c2ce:	615e      	str	r6, [r3, #20]
 800c2d0:	6125      	str	r5, [r4, #16]
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2d8:	0800eba5 	.word	0x0800eba5
 800c2dc:	0800ebb6 	.word	0x0800ebb6

0800c2e0 <__s2b>:
 800c2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2e4:	460c      	mov	r4, r1
 800c2e6:	4615      	mov	r5, r2
 800c2e8:	461f      	mov	r7, r3
 800c2ea:	2209      	movs	r2, #9
 800c2ec:	3308      	adds	r3, #8
 800c2ee:	4606      	mov	r6, r0
 800c2f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	db09      	blt.n	800c310 <__s2b+0x30>
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f7ff ff47 	bl	800c190 <_Balloc>
 800c302:	b940      	cbnz	r0, 800c316 <__s2b+0x36>
 800c304:	4602      	mov	r2, r0
 800c306:	4b19      	ldr	r3, [pc, #100]	@ (800c36c <__s2b+0x8c>)
 800c308:	4819      	ldr	r0, [pc, #100]	@ (800c370 <__s2b+0x90>)
 800c30a:	21d3      	movs	r1, #211	@ 0xd3
 800c30c:	f001 fcc4 	bl	800dc98 <__assert_func>
 800c310:	0052      	lsls	r2, r2, #1
 800c312:	3101      	adds	r1, #1
 800c314:	e7f0      	b.n	800c2f8 <__s2b+0x18>
 800c316:	9b08      	ldr	r3, [sp, #32]
 800c318:	6143      	str	r3, [r0, #20]
 800c31a:	2d09      	cmp	r5, #9
 800c31c:	f04f 0301 	mov.w	r3, #1
 800c320:	6103      	str	r3, [r0, #16]
 800c322:	dd16      	ble.n	800c352 <__s2b+0x72>
 800c324:	f104 0909 	add.w	r9, r4, #9
 800c328:	46c8      	mov	r8, r9
 800c32a:	442c      	add	r4, r5
 800c32c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c330:	4601      	mov	r1, r0
 800c332:	3b30      	subs	r3, #48	@ 0x30
 800c334:	220a      	movs	r2, #10
 800c336:	4630      	mov	r0, r6
 800c338:	f7ff ff8c 	bl	800c254 <__multadd>
 800c33c:	45a0      	cmp	r8, r4
 800c33e:	d1f5      	bne.n	800c32c <__s2b+0x4c>
 800c340:	f1a5 0408 	sub.w	r4, r5, #8
 800c344:	444c      	add	r4, r9
 800c346:	1b2d      	subs	r5, r5, r4
 800c348:	1963      	adds	r3, r4, r5
 800c34a:	42bb      	cmp	r3, r7
 800c34c:	db04      	blt.n	800c358 <__s2b+0x78>
 800c34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c352:	340a      	adds	r4, #10
 800c354:	2509      	movs	r5, #9
 800c356:	e7f6      	b.n	800c346 <__s2b+0x66>
 800c358:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c35c:	4601      	mov	r1, r0
 800c35e:	3b30      	subs	r3, #48	@ 0x30
 800c360:	220a      	movs	r2, #10
 800c362:	4630      	mov	r0, r6
 800c364:	f7ff ff76 	bl	800c254 <__multadd>
 800c368:	e7ee      	b.n	800c348 <__s2b+0x68>
 800c36a:	bf00      	nop
 800c36c:	0800eba5 	.word	0x0800eba5
 800c370:	0800ebb6 	.word	0x0800ebb6

0800c374 <__hi0bits>:
 800c374:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c378:	4603      	mov	r3, r0
 800c37a:	bf36      	itet	cc
 800c37c:	0403      	lslcc	r3, r0, #16
 800c37e:	2000      	movcs	r0, #0
 800c380:	2010      	movcc	r0, #16
 800c382:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c386:	bf3c      	itt	cc
 800c388:	021b      	lslcc	r3, r3, #8
 800c38a:	3008      	addcc	r0, #8
 800c38c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c390:	bf3c      	itt	cc
 800c392:	011b      	lslcc	r3, r3, #4
 800c394:	3004      	addcc	r0, #4
 800c396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c39a:	bf3c      	itt	cc
 800c39c:	009b      	lslcc	r3, r3, #2
 800c39e:	3002      	addcc	r0, #2
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	db05      	blt.n	800c3b0 <__hi0bits+0x3c>
 800c3a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c3a8:	f100 0001 	add.w	r0, r0, #1
 800c3ac:	bf08      	it	eq
 800c3ae:	2020      	moveq	r0, #32
 800c3b0:	4770      	bx	lr

0800c3b2 <__lo0bits>:
 800c3b2:	6803      	ldr	r3, [r0, #0]
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	f013 0007 	ands.w	r0, r3, #7
 800c3ba:	d00b      	beq.n	800c3d4 <__lo0bits+0x22>
 800c3bc:	07d9      	lsls	r1, r3, #31
 800c3be:	d421      	bmi.n	800c404 <__lo0bits+0x52>
 800c3c0:	0798      	lsls	r0, r3, #30
 800c3c2:	bf49      	itett	mi
 800c3c4:	085b      	lsrmi	r3, r3, #1
 800c3c6:	089b      	lsrpl	r3, r3, #2
 800c3c8:	2001      	movmi	r0, #1
 800c3ca:	6013      	strmi	r3, [r2, #0]
 800c3cc:	bf5c      	itt	pl
 800c3ce:	6013      	strpl	r3, [r2, #0]
 800c3d0:	2002      	movpl	r0, #2
 800c3d2:	4770      	bx	lr
 800c3d4:	b299      	uxth	r1, r3
 800c3d6:	b909      	cbnz	r1, 800c3dc <__lo0bits+0x2a>
 800c3d8:	0c1b      	lsrs	r3, r3, #16
 800c3da:	2010      	movs	r0, #16
 800c3dc:	b2d9      	uxtb	r1, r3
 800c3de:	b909      	cbnz	r1, 800c3e4 <__lo0bits+0x32>
 800c3e0:	3008      	adds	r0, #8
 800c3e2:	0a1b      	lsrs	r3, r3, #8
 800c3e4:	0719      	lsls	r1, r3, #28
 800c3e6:	bf04      	itt	eq
 800c3e8:	091b      	lsreq	r3, r3, #4
 800c3ea:	3004      	addeq	r0, #4
 800c3ec:	0799      	lsls	r1, r3, #30
 800c3ee:	bf04      	itt	eq
 800c3f0:	089b      	lsreq	r3, r3, #2
 800c3f2:	3002      	addeq	r0, #2
 800c3f4:	07d9      	lsls	r1, r3, #31
 800c3f6:	d403      	bmi.n	800c400 <__lo0bits+0x4e>
 800c3f8:	085b      	lsrs	r3, r3, #1
 800c3fa:	f100 0001 	add.w	r0, r0, #1
 800c3fe:	d003      	beq.n	800c408 <__lo0bits+0x56>
 800c400:	6013      	str	r3, [r2, #0]
 800c402:	4770      	bx	lr
 800c404:	2000      	movs	r0, #0
 800c406:	4770      	bx	lr
 800c408:	2020      	movs	r0, #32
 800c40a:	4770      	bx	lr

0800c40c <__i2b>:
 800c40c:	b510      	push	{r4, lr}
 800c40e:	460c      	mov	r4, r1
 800c410:	2101      	movs	r1, #1
 800c412:	f7ff febd 	bl	800c190 <_Balloc>
 800c416:	4602      	mov	r2, r0
 800c418:	b928      	cbnz	r0, 800c426 <__i2b+0x1a>
 800c41a:	4b05      	ldr	r3, [pc, #20]	@ (800c430 <__i2b+0x24>)
 800c41c:	4805      	ldr	r0, [pc, #20]	@ (800c434 <__i2b+0x28>)
 800c41e:	f240 1145 	movw	r1, #325	@ 0x145
 800c422:	f001 fc39 	bl	800dc98 <__assert_func>
 800c426:	2301      	movs	r3, #1
 800c428:	6144      	str	r4, [r0, #20]
 800c42a:	6103      	str	r3, [r0, #16]
 800c42c:	bd10      	pop	{r4, pc}
 800c42e:	bf00      	nop
 800c430:	0800eba5 	.word	0x0800eba5
 800c434:	0800ebb6 	.word	0x0800ebb6

0800c438 <__multiply>:
 800c438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c43c:	4617      	mov	r7, r2
 800c43e:	690a      	ldr	r2, [r1, #16]
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	429a      	cmp	r2, r3
 800c444:	bfa8      	it	ge
 800c446:	463b      	movge	r3, r7
 800c448:	4689      	mov	r9, r1
 800c44a:	bfa4      	itt	ge
 800c44c:	460f      	movge	r7, r1
 800c44e:	4699      	movge	r9, r3
 800c450:	693d      	ldr	r5, [r7, #16]
 800c452:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	6879      	ldr	r1, [r7, #4]
 800c45a:	eb05 060a 	add.w	r6, r5, sl
 800c45e:	42b3      	cmp	r3, r6
 800c460:	b085      	sub	sp, #20
 800c462:	bfb8      	it	lt
 800c464:	3101      	addlt	r1, #1
 800c466:	f7ff fe93 	bl	800c190 <_Balloc>
 800c46a:	b930      	cbnz	r0, 800c47a <__multiply+0x42>
 800c46c:	4602      	mov	r2, r0
 800c46e:	4b41      	ldr	r3, [pc, #260]	@ (800c574 <__multiply+0x13c>)
 800c470:	4841      	ldr	r0, [pc, #260]	@ (800c578 <__multiply+0x140>)
 800c472:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c476:	f001 fc0f 	bl	800dc98 <__assert_func>
 800c47a:	f100 0414 	add.w	r4, r0, #20
 800c47e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c482:	4623      	mov	r3, r4
 800c484:	2200      	movs	r2, #0
 800c486:	4573      	cmp	r3, lr
 800c488:	d320      	bcc.n	800c4cc <__multiply+0x94>
 800c48a:	f107 0814 	add.w	r8, r7, #20
 800c48e:	f109 0114 	add.w	r1, r9, #20
 800c492:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c496:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c49a:	9302      	str	r3, [sp, #8]
 800c49c:	1beb      	subs	r3, r5, r7
 800c49e:	3b15      	subs	r3, #21
 800c4a0:	f023 0303 	bic.w	r3, r3, #3
 800c4a4:	3304      	adds	r3, #4
 800c4a6:	3715      	adds	r7, #21
 800c4a8:	42bd      	cmp	r5, r7
 800c4aa:	bf38      	it	cc
 800c4ac:	2304      	movcc	r3, #4
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	9b02      	ldr	r3, [sp, #8]
 800c4b2:	9103      	str	r1, [sp, #12]
 800c4b4:	428b      	cmp	r3, r1
 800c4b6:	d80c      	bhi.n	800c4d2 <__multiply+0x9a>
 800c4b8:	2e00      	cmp	r6, #0
 800c4ba:	dd03      	ble.n	800c4c4 <__multiply+0x8c>
 800c4bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d055      	beq.n	800c570 <__multiply+0x138>
 800c4c4:	6106      	str	r6, [r0, #16]
 800c4c6:	b005      	add	sp, #20
 800c4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4cc:	f843 2b04 	str.w	r2, [r3], #4
 800c4d0:	e7d9      	b.n	800c486 <__multiply+0x4e>
 800c4d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c4d6:	f1ba 0f00 	cmp.w	sl, #0
 800c4da:	d01f      	beq.n	800c51c <__multiply+0xe4>
 800c4dc:	46c4      	mov	ip, r8
 800c4de:	46a1      	mov	r9, r4
 800c4e0:	2700      	movs	r7, #0
 800c4e2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c4e6:	f8d9 3000 	ldr.w	r3, [r9]
 800c4ea:	fa1f fb82 	uxth.w	fp, r2
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800c4f4:	443b      	add	r3, r7
 800c4f6:	f8d9 7000 	ldr.w	r7, [r9]
 800c4fa:	0c12      	lsrs	r2, r2, #16
 800c4fc:	0c3f      	lsrs	r7, r7, #16
 800c4fe:	fb0a 7202 	mla	r2, sl, r2, r7
 800c502:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c506:	b29b      	uxth	r3, r3
 800c508:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c50c:	4565      	cmp	r5, ip
 800c50e:	f849 3b04 	str.w	r3, [r9], #4
 800c512:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c516:	d8e4      	bhi.n	800c4e2 <__multiply+0xaa>
 800c518:	9b01      	ldr	r3, [sp, #4]
 800c51a:	50e7      	str	r7, [r4, r3]
 800c51c:	9b03      	ldr	r3, [sp, #12]
 800c51e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c522:	3104      	adds	r1, #4
 800c524:	f1b9 0f00 	cmp.w	r9, #0
 800c528:	d020      	beq.n	800c56c <__multiply+0x134>
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	4647      	mov	r7, r8
 800c52e:	46a4      	mov	ip, r4
 800c530:	f04f 0a00 	mov.w	sl, #0
 800c534:	f8b7 b000 	ldrh.w	fp, [r7]
 800c538:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c53c:	fb09 220b 	mla	r2, r9, fp, r2
 800c540:	4452      	add	r2, sl
 800c542:	b29b      	uxth	r3, r3
 800c544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c548:	f84c 3b04 	str.w	r3, [ip], #4
 800c54c:	f857 3b04 	ldr.w	r3, [r7], #4
 800c550:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c554:	f8bc 3000 	ldrh.w	r3, [ip]
 800c558:	fb09 330a 	mla	r3, r9, sl, r3
 800c55c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c560:	42bd      	cmp	r5, r7
 800c562:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c566:	d8e5      	bhi.n	800c534 <__multiply+0xfc>
 800c568:	9a01      	ldr	r2, [sp, #4]
 800c56a:	50a3      	str	r3, [r4, r2]
 800c56c:	3404      	adds	r4, #4
 800c56e:	e79f      	b.n	800c4b0 <__multiply+0x78>
 800c570:	3e01      	subs	r6, #1
 800c572:	e7a1      	b.n	800c4b8 <__multiply+0x80>
 800c574:	0800eba5 	.word	0x0800eba5
 800c578:	0800ebb6 	.word	0x0800ebb6

0800c57c <__pow5mult>:
 800c57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c580:	4615      	mov	r5, r2
 800c582:	f012 0203 	ands.w	r2, r2, #3
 800c586:	4607      	mov	r7, r0
 800c588:	460e      	mov	r6, r1
 800c58a:	d007      	beq.n	800c59c <__pow5mult+0x20>
 800c58c:	4c25      	ldr	r4, [pc, #148]	@ (800c624 <__pow5mult+0xa8>)
 800c58e:	3a01      	subs	r2, #1
 800c590:	2300      	movs	r3, #0
 800c592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c596:	f7ff fe5d 	bl	800c254 <__multadd>
 800c59a:	4606      	mov	r6, r0
 800c59c:	10ad      	asrs	r5, r5, #2
 800c59e:	d03d      	beq.n	800c61c <__pow5mult+0xa0>
 800c5a0:	69fc      	ldr	r4, [r7, #28]
 800c5a2:	b97c      	cbnz	r4, 800c5c4 <__pow5mult+0x48>
 800c5a4:	2010      	movs	r0, #16
 800c5a6:	f7ff fd3d 	bl	800c024 <malloc>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	61f8      	str	r0, [r7, #28]
 800c5ae:	b928      	cbnz	r0, 800c5bc <__pow5mult+0x40>
 800c5b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c628 <__pow5mult+0xac>)
 800c5b2:	481e      	ldr	r0, [pc, #120]	@ (800c62c <__pow5mult+0xb0>)
 800c5b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c5b8:	f001 fb6e 	bl	800dc98 <__assert_func>
 800c5bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c5c0:	6004      	str	r4, [r0, #0]
 800c5c2:	60c4      	str	r4, [r0, #12]
 800c5c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c5c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c5cc:	b94c      	cbnz	r4, 800c5e2 <__pow5mult+0x66>
 800c5ce:	f240 2171 	movw	r1, #625	@ 0x271
 800c5d2:	4638      	mov	r0, r7
 800c5d4:	f7ff ff1a 	bl	800c40c <__i2b>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5de:	4604      	mov	r4, r0
 800c5e0:	6003      	str	r3, [r0, #0]
 800c5e2:	f04f 0900 	mov.w	r9, #0
 800c5e6:	07eb      	lsls	r3, r5, #31
 800c5e8:	d50a      	bpl.n	800c600 <__pow5mult+0x84>
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	4622      	mov	r2, r4
 800c5ee:	4638      	mov	r0, r7
 800c5f0:	f7ff ff22 	bl	800c438 <__multiply>
 800c5f4:	4631      	mov	r1, r6
 800c5f6:	4680      	mov	r8, r0
 800c5f8:	4638      	mov	r0, r7
 800c5fa:	f7ff fe09 	bl	800c210 <_Bfree>
 800c5fe:	4646      	mov	r6, r8
 800c600:	106d      	asrs	r5, r5, #1
 800c602:	d00b      	beq.n	800c61c <__pow5mult+0xa0>
 800c604:	6820      	ldr	r0, [r4, #0]
 800c606:	b938      	cbnz	r0, 800c618 <__pow5mult+0x9c>
 800c608:	4622      	mov	r2, r4
 800c60a:	4621      	mov	r1, r4
 800c60c:	4638      	mov	r0, r7
 800c60e:	f7ff ff13 	bl	800c438 <__multiply>
 800c612:	6020      	str	r0, [r4, #0]
 800c614:	f8c0 9000 	str.w	r9, [r0]
 800c618:	4604      	mov	r4, r0
 800c61a:	e7e4      	b.n	800c5e6 <__pow5mult+0x6a>
 800c61c:	4630      	mov	r0, r6
 800c61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c622:	bf00      	nop
 800c624:	0800ecc8 	.word	0x0800ecc8
 800c628:	0800eb36 	.word	0x0800eb36
 800c62c:	0800ebb6 	.word	0x0800ebb6

0800c630 <__lshift>:
 800c630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c634:	460c      	mov	r4, r1
 800c636:	6849      	ldr	r1, [r1, #4]
 800c638:	6923      	ldr	r3, [r4, #16]
 800c63a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c63e:	68a3      	ldr	r3, [r4, #8]
 800c640:	4607      	mov	r7, r0
 800c642:	4691      	mov	r9, r2
 800c644:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c648:	f108 0601 	add.w	r6, r8, #1
 800c64c:	42b3      	cmp	r3, r6
 800c64e:	db0b      	blt.n	800c668 <__lshift+0x38>
 800c650:	4638      	mov	r0, r7
 800c652:	f7ff fd9d 	bl	800c190 <_Balloc>
 800c656:	4605      	mov	r5, r0
 800c658:	b948      	cbnz	r0, 800c66e <__lshift+0x3e>
 800c65a:	4602      	mov	r2, r0
 800c65c:	4b28      	ldr	r3, [pc, #160]	@ (800c700 <__lshift+0xd0>)
 800c65e:	4829      	ldr	r0, [pc, #164]	@ (800c704 <__lshift+0xd4>)
 800c660:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c664:	f001 fb18 	bl	800dc98 <__assert_func>
 800c668:	3101      	adds	r1, #1
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	e7ee      	b.n	800c64c <__lshift+0x1c>
 800c66e:	2300      	movs	r3, #0
 800c670:	f100 0114 	add.w	r1, r0, #20
 800c674:	f100 0210 	add.w	r2, r0, #16
 800c678:	4618      	mov	r0, r3
 800c67a:	4553      	cmp	r3, sl
 800c67c:	db33      	blt.n	800c6e6 <__lshift+0xb6>
 800c67e:	6920      	ldr	r0, [r4, #16]
 800c680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c684:	f104 0314 	add.w	r3, r4, #20
 800c688:	f019 091f 	ands.w	r9, r9, #31
 800c68c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c690:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c694:	d02b      	beq.n	800c6ee <__lshift+0xbe>
 800c696:	f1c9 0e20 	rsb	lr, r9, #32
 800c69a:	468a      	mov	sl, r1
 800c69c:	2200      	movs	r2, #0
 800c69e:	6818      	ldr	r0, [r3, #0]
 800c6a0:	fa00 f009 	lsl.w	r0, r0, r9
 800c6a4:	4310      	orrs	r0, r2
 800c6a6:	f84a 0b04 	str.w	r0, [sl], #4
 800c6aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ae:	459c      	cmp	ip, r3
 800c6b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c6b4:	d8f3      	bhi.n	800c69e <__lshift+0x6e>
 800c6b6:	ebac 0304 	sub.w	r3, ip, r4
 800c6ba:	3b15      	subs	r3, #21
 800c6bc:	f023 0303 	bic.w	r3, r3, #3
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	f104 0015 	add.w	r0, r4, #21
 800c6c6:	4560      	cmp	r0, ip
 800c6c8:	bf88      	it	hi
 800c6ca:	2304      	movhi	r3, #4
 800c6cc:	50ca      	str	r2, [r1, r3]
 800c6ce:	b10a      	cbz	r2, 800c6d4 <__lshift+0xa4>
 800c6d0:	f108 0602 	add.w	r6, r8, #2
 800c6d4:	3e01      	subs	r6, #1
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	612e      	str	r6, [r5, #16]
 800c6da:	4621      	mov	r1, r4
 800c6dc:	f7ff fd98 	bl	800c210 <_Bfree>
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	e7c5      	b.n	800c67a <__lshift+0x4a>
 800c6ee:	3904      	subs	r1, #4
 800c6f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6f8:	459c      	cmp	ip, r3
 800c6fa:	d8f9      	bhi.n	800c6f0 <__lshift+0xc0>
 800c6fc:	e7ea      	b.n	800c6d4 <__lshift+0xa4>
 800c6fe:	bf00      	nop
 800c700:	0800eba5 	.word	0x0800eba5
 800c704:	0800ebb6 	.word	0x0800ebb6

0800c708 <__mcmp>:
 800c708:	690a      	ldr	r2, [r1, #16]
 800c70a:	4603      	mov	r3, r0
 800c70c:	6900      	ldr	r0, [r0, #16]
 800c70e:	1a80      	subs	r0, r0, r2
 800c710:	b530      	push	{r4, r5, lr}
 800c712:	d10e      	bne.n	800c732 <__mcmp+0x2a>
 800c714:	3314      	adds	r3, #20
 800c716:	3114      	adds	r1, #20
 800c718:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c71c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c720:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c724:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c728:	4295      	cmp	r5, r2
 800c72a:	d003      	beq.n	800c734 <__mcmp+0x2c>
 800c72c:	d205      	bcs.n	800c73a <__mcmp+0x32>
 800c72e:	f04f 30ff 	mov.w	r0, #4294967295
 800c732:	bd30      	pop	{r4, r5, pc}
 800c734:	42a3      	cmp	r3, r4
 800c736:	d3f3      	bcc.n	800c720 <__mcmp+0x18>
 800c738:	e7fb      	b.n	800c732 <__mcmp+0x2a>
 800c73a:	2001      	movs	r0, #1
 800c73c:	e7f9      	b.n	800c732 <__mcmp+0x2a>
	...

0800c740 <__mdiff>:
 800c740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	4689      	mov	r9, r1
 800c746:	4606      	mov	r6, r0
 800c748:	4611      	mov	r1, r2
 800c74a:	4648      	mov	r0, r9
 800c74c:	4614      	mov	r4, r2
 800c74e:	f7ff ffdb 	bl	800c708 <__mcmp>
 800c752:	1e05      	subs	r5, r0, #0
 800c754:	d112      	bne.n	800c77c <__mdiff+0x3c>
 800c756:	4629      	mov	r1, r5
 800c758:	4630      	mov	r0, r6
 800c75a:	f7ff fd19 	bl	800c190 <_Balloc>
 800c75e:	4602      	mov	r2, r0
 800c760:	b928      	cbnz	r0, 800c76e <__mdiff+0x2e>
 800c762:	4b3f      	ldr	r3, [pc, #252]	@ (800c860 <__mdiff+0x120>)
 800c764:	f240 2137 	movw	r1, #567	@ 0x237
 800c768:	483e      	ldr	r0, [pc, #248]	@ (800c864 <__mdiff+0x124>)
 800c76a:	f001 fa95 	bl	800dc98 <__assert_func>
 800c76e:	2301      	movs	r3, #1
 800c770:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c774:	4610      	mov	r0, r2
 800c776:	b003      	add	sp, #12
 800c778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77c:	bfbc      	itt	lt
 800c77e:	464b      	movlt	r3, r9
 800c780:	46a1      	movlt	r9, r4
 800c782:	4630      	mov	r0, r6
 800c784:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c788:	bfba      	itte	lt
 800c78a:	461c      	movlt	r4, r3
 800c78c:	2501      	movlt	r5, #1
 800c78e:	2500      	movge	r5, #0
 800c790:	f7ff fcfe 	bl	800c190 <_Balloc>
 800c794:	4602      	mov	r2, r0
 800c796:	b918      	cbnz	r0, 800c7a0 <__mdiff+0x60>
 800c798:	4b31      	ldr	r3, [pc, #196]	@ (800c860 <__mdiff+0x120>)
 800c79a:	f240 2145 	movw	r1, #581	@ 0x245
 800c79e:	e7e3      	b.n	800c768 <__mdiff+0x28>
 800c7a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c7a4:	6926      	ldr	r6, [r4, #16]
 800c7a6:	60c5      	str	r5, [r0, #12]
 800c7a8:	f109 0310 	add.w	r3, r9, #16
 800c7ac:	f109 0514 	add.w	r5, r9, #20
 800c7b0:	f104 0e14 	add.w	lr, r4, #20
 800c7b4:	f100 0b14 	add.w	fp, r0, #20
 800c7b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c7bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c7c0:	9301      	str	r3, [sp, #4]
 800c7c2:	46d9      	mov	r9, fp
 800c7c4:	f04f 0c00 	mov.w	ip, #0
 800c7c8:	9b01      	ldr	r3, [sp, #4]
 800c7ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c7ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c7d2:	9301      	str	r3, [sp, #4]
 800c7d4:	fa1f f38a 	uxth.w	r3, sl
 800c7d8:	4619      	mov	r1, r3
 800c7da:	b283      	uxth	r3, r0
 800c7dc:	1acb      	subs	r3, r1, r3
 800c7de:	0c00      	lsrs	r0, r0, #16
 800c7e0:	4463      	add	r3, ip
 800c7e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c7e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c7f0:	4576      	cmp	r6, lr
 800c7f2:	f849 3b04 	str.w	r3, [r9], #4
 800c7f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7fa:	d8e5      	bhi.n	800c7c8 <__mdiff+0x88>
 800c7fc:	1b33      	subs	r3, r6, r4
 800c7fe:	3b15      	subs	r3, #21
 800c800:	f023 0303 	bic.w	r3, r3, #3
 800c804:	3415      	adds	r4, #21
 800c806:	3304      	adds	r3, #4
 800c808:	42a6      	cmp	r6, r4
 800c80a:	bf38      	it	cc
 800c80c:	2304      	movcc	r3, #4
 800c80e:	441d      	add	r5, r3
 800c810:	445b      	add	r3, fp
 800c812:	461e      	mov	r6, r3
 800c814:	462c      	mov	r4, r5
 800c816:	4544      	cmp	r4, r8
 800c818:	d30e      	bcc.n	800c838 <__mdiff+0xf8>
 800c81a:	f108 0103 	add.w	r1, r8, #3
 800c81e:	1b49      	subs	r1, r1, r5
 800c820:	f021 0103 	bic.w	r1, r1, #3
 800c824:	3d03      	subs	r5, #3
 800c826:	45a8      	cmp	r8, r5
 800c828:	bf38      	it	cc
 800c82a:	2100      	movcc	r1, #0
 800c82c:	440b      	add	r3, r1
 800c82e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c832:	b191      	cbz	r1, 800c85a <__mdiff+0x11a>
 800c834:	6117      	str	r7, [r2, #16]
 800c836:	e79d      	b.n	800c774 <__mdiff+0x34>
 800c838:	f854 1b04 	ldr.w	r1, [r4], #4
 800c83c:	46e6      	mov	lr, ip
 800c83e:	0c08      	lsrs	r0, r1, #16
 800c840:	fa1c fc81 	uxtah	ip, ip, r1
 800c844:	4471      	add	r1, lr
 800c846:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c84a:	b289      	uxth	r1, r1
 800c84c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c850:	f846 1b04 	str.w	r1, [r6], #4
 800c854:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c858:	e7dd      	b.n	800c816 <__mdiff+0xd6>
 800c85a:	3f01      	subs	r7, #1
 800c85c:	e7e7      	b.n	800c82e <__mdiff+0xee>
 800c85e:	bf00      	nop
 800c860:	0800eba5 	.word	0x0800eba5
 800c864:	0800ebb6 	.word	0x0800ebb6

0800c868 <__ulp>:
 800c868:	b082      	sub	sp, #8
 800c86a:	ed8d 0b00 	vstr	d0, [sp]
 800c86e:	9a01      	ldr	r2, [sp, #4]
 800c870:	4b0f      	ldr	r3, [pc, #60]	@ (800c8b0 <__ulp+0x48>)
 800c872:	4013      	ands	r3, r2
 800c874:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c878:	2b00      	cmp	r3, #0
 800c87a:	dc08      	bgt.n	800c88e <__ulp+0x26>
 800c87c:	425b      	negs	r3, r3
 800c87e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c882:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c886:	da04      	bge.n	800c892 <__ulp+0x2a>
 800c888:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c88c:	4113      	asrs	r3, r2
 800c88e:	2200      	movs	r2, #0
 800c890:	e008      	b.n	800c8a4 <__ulp+0x3c>
 800c892:	f1a2 0314 	sub.w	r3, r2, #20
 800c896:	2b1e      	cmp	r3, #30
 800c898:	bfda      	itte	le
 800c89a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c89e:	40da      	lsrle	r2, r3
 800c8a0:	2201      	movgt	r2, #1
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	ec41 0b10 	vmov	d0, r0, r1
 800c8ac:	b002      	add	sp, #8
 800c8ae:	4770      	bx	lr
 800c8b0:	7ff00000 	.word	0x7ff00000

0800c8b4 <__b2d>:
 800c8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b8:	6906      	ldr	r6, [r0, #16]
 800c8ba:	f100 0814 	add.w	r8, r0, #20
 800c8be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c8c2:	1f37      	subs	r7, r6, #4
 800c8c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	f7ff fd53 	bl	800c374 <__hi0bits>
 800c8ce:	f1c0 0320 	rsb	r3, r0, #32
 800c8d2:	280a      	cmp	r0, #10
 800c8d4:	600b      	str	r3, [r1, #0]
 800c8d6:	491b      	ldr	r1, [pc, #108]	@ (800c944 <__b2d+0x90>)
 800c8d8:	dc15      	bgt.n	800c906 <__b2d+0x52>
 800c8da:	f1c0 0c0b 	rsb	ip, r0, #11
 800c8de:	fa22 f30c 	lsr.w	r3, r2, ip
 800c8e2:	45b8      	cmp	r8, r7
 800c8e4:	ea43 0501 	orr.w	r5, r3, r1
 800c8e8:	bf34      	ite	cc
 800c8ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c8ee:	2300      	movcs	r3, #0
 800c8f0:	3015      	adds	r0, #21
 800c8f2:	fa02 f000 	lsl.w	r0, r2, r0
 800c8f6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c8fa:	4303      	orrs	r3, r0
 800c8fc:	461c      	mov	r4, r3
 800c8fe:	ec45 4b10 	vmov	d0, r4, r5
 800c902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c906:	45b8      	cmp	r8, r7
 800c908:	bf3a      	itte	cc
 800c90a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c90e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c912:	2300      	movcs	r3, #0
 800c914:	380b      	subs	r0, #11
 800c916:	d012      	beq.n	800c93e <__b2d+0x8a>
 800c918:	f1c0 0120 	rsb	r1, r0, #32
 800c91c:	fa23 f401 	lsr.w	r4, r3, r1
 800c920:	4082      	lsls	r2, r0
 800c922:	4322      	orrs	r2, r4
 800c924:	4547      	cmp	r7, r8
 800c926:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c92a:	bf8c      	ite	hi
 800c92c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c930:	2200      	movls	r2, #0
 800c932:	4083      	lsls	r3, r0
 800c934:	40ca      	lsrs	r2, r1
 800c936:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c93a:	4313      	orrs	r3, r2
 800c93c:	e7de      	b.n	800c8fc <__b2d+0x48>
 800c93e:	ea42 0501 	orr.w	r5, r2, r1
 800c942:	e7db      	b.n	800c8fc <__b2d+0x48>
 800c944:	3ff00000 	.word	0x3ff00000

0800c948 <__d2b>:
 800c948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c94c:	460f      	mov	r7, r1
 800c94e:	2101      	movs	r1, #1
 800c950:	ec59 8b10 	vmov	r8, r9, d0
 800c954:	4616      	mov	r6, r2
 800c956:	f7ff fc1b 	bl	800c190 <_Balloc>
 800c95a:	4604      	mov	r4, r0
 800c95c:	b930      	cbnz	r0, 800c96c <__d2b+0x24>
 800c95e:	4602      	mov	r2, r0
 800c960:	4b23      	ldr	r3, [pc, #140]	@ (800c9f0 <__d2b+0xa8>)
 800c962:	4824      	ldr	r0, [pc, #144]	@ (800c9f4 <__d2b+0xac>)
 800c964:	f240 310f 	movw	r1, #783	@ 0x30f
 800c968:	f001 f996 	bl	800dc98 <__assert_func>
 800c96c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c970:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c974:	b10d      	cbz	r5, 800c97a <__d2b+0x32>
 800c976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c97a:	9301      	str	r3, [sp, #4]
 800c97c:	f1b8 0300 	subs.w	r3, r8, #0
 800c980:	d023      	beq.n	800c9ca <__d2b+0x82>
 800c982:	4668      	mov	r0, sp
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	f7ff fd14 	bl	800c3b2 <__lo0bits>
 800c98a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c98e:	b1d0      	cbz	r0, 800c9c6 <__d2b+0x7e>
 800c990:	f1c0 0320 	rsb	r3, r0, #32
 800c994:	fa02 f303 	lsl.w	r3, r2, r3
 800c998:	430b      	orrs	r3, r1
 800c99a:	40c2      	lsrs	r2, r0
 800c99c:	6163      	str	r3, [r4, #20]
 800c99e:	9201      	str	r2, [sp, #4]
 800c9a0:	9b01      	ldr	r3, [sp, #4]
 800c9a2:	61a3      	str	r3, [r4, #24]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	bf0c      	ite	eq
 800c9a8:	2201      	moveq	r2, #1
 800c9aa:	2202      	movne	r2, #2
 800c9ac:	6122      	str	r2, [r4, #16]
 800c9ae:	b1a5      	cbz	r5, 800c9da <__d2b+0x92>
 800c9b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c9b4:	4405      	add	r5, r0
 800c9b6:	603d      	str	r5, [r7, #0]
 800c9b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c9bc:	6030      	str	r0, [r6, #0]
 800c9be:	4620      	mov	r0, r4
 800c9c0:	b003      	add	sp, #12
 800c9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9c6:	6161      	str	r1, [r4, #20]
 800c9c8:	e7ea      	b.n	800c9a0 <__d2b+0x58>
 800c9ca:	a801      	add	r0, sp, #4
 800c9cc:	f7ff fcf1 	bl	800c3b2 <__lo0bits>
 800c9d0:	9b01      	ldr	r3, [sp, #4]
 800c9d2:	6163      	str	r3, [r4, #20]
 800c9d4:	3020      	adds	r0, #32
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	e7e8      	b.n	800c9ac <__d2b+0x64>
 800c9da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c9de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c9e2:	6038      	str	r0, [r7, #0]
 800c9e4:	6918      	ldr	r0, [r3, #16]
 800c9e6:	f7ff fcc5 	bl	800c374 <__hi0bits>
 800c9ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c9ee:	e7e5      	b.n	800c9bc <__d2b+0x74>
 800c9f0:	0800eba5 	.word	0x0800eba5
 800c9f4:	0800ebb6 	.word	0x0800ebb6

0800c9f8 <__ratio>:
 800c9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fc:	b085      	sub	sp, #20
 800c9fe:	e9cd 1000 	strd	r1, r0, [sp]
 800ca02:	a902      	add	r1, sp, #8
 800ca04:	f7ff ff56 	bl	800c8b4 <__b2d>
 800ca08:	9800      	ldr	r0, [sp, #0]
 800ca0a:	a903      	add	r1, sp, #12
 800ca0c:	ec55 4b10 	vmov	r4, r5, d0
 800ca10:	f7ff ff50 	bl	800c8b4 <__b2d>
 800ca14:	9b01      	ldr	r3, [sp, #4]
 800ca16:	6919      	ldr	r1, [r3, #16]
 800ca18:	9b00      	ldr	r3, [sp, #0]
 800ca1a:	691b      	ldr	r3, [r3, #16]
 800ca1c:	1ac9      	subs	r1, r1, r3
 800ca1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ca22:	1a9b      	subs	r3, r3, r2
 800ca24:	ec5b ab10 	vmov	sl, fp, d0
 800ca28:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	bfce      	itee	gt
 800ca30:	462a      	movgt	r2, r5
 800ca32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ca36:	465a      	movle	r2, fp
 800ca38:	462f      	mov	r7, r5
 800ca3a:	46d9      	mov	r9, fp
 800ca3c:	bfcc      	ite	gt
 800ca3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ca42:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ca46:	464b      	mov	r3, r9
 800ca48:	4652      	mov	r2, sl
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	4639      	mov	r1, r7
 800ca4e:	f7f3 fefd 	bl	800084c <__aeabi_ddiv>
 800ca52:	ec41 0b10 	vmov	d0, r0, r1
 800ca56:	b005      	add	sp, #20
 800ca58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca5c <__copybits>:
 800ca5c:	3901      	subs	r1, #1
 800ca5e:	b570      	push	{r4, r5, r6, lr}
 800ca60:	1149      	asrs	r1, r1, #5
 800ca62:	6914      	ldr	r4, [r2, #16]
 800ca64:	3101      	adds	r1, #1
 800ca66:	f102 0314 	add.w	r3, r2, #20
 800ca6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ca72:	1f05      	subs	r5, r0, #4
 800ca74:	42a3      	cmp	r3, r4
 800ca76:	d30c      	bcc.n	800ca92 <__copybits+0x36>
 800ca78:	1aa3      	subs	r3, r4, r2
 800ca7a:	3b11      	subs	r3, #17
 800ca7c:	f023 0303 	bic.w	r3, r3, #3
 800ca80:	3211      	adds	r2, #17
 800ca82:	42a2      	cmp	r2, r4
 800ca84:	bf88      	it	hi
 800ca86:	2300      	movhi	r3, #0
 800ca88:	4418      	add	r0, r3
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	4288      	cmp	r0, r1
 800ca8e:	d305      	bcc.n	800ca9c <__copybits+0x40>
 800ca90:	bd70      	pop	{r4, r5, r6, pc}
 800ca92:	f853 6b04 	ldr.w	r6, [r3], #4
 800ca96:	f845 6f04 	str.w	r6, [r5, #4]!
 800ca9a:	e7eb      	b.n	800ca74 <__copybits+0x18>
 800ca9c:	f840 3b04 	str.w	r3, [r0], #4
 800caa0:	e7f4      	b.n	800ca8c <__copybits+0x30>

0800caa2 <__any_on>:
 800caa2:	f100 0214 	add.w	r2, r0, #20
 800caa6:	6900      	ldr	r0, [r0, #16]
 800caa8:	114b      	asrs	r3, r1, #5
 800caaa:	4298      	cmp	r0, r3
 800caac:	b510      	push	{r4, lr}
 800caae:	db11      	blt.n	800cad4 <__any_on+0x32>
 800cab0:	dd0a      	ble.n	800cac8 <__any_on+0x26>
 800cab2:	f011 011f 	ands.w	r1, r1, #31
 800cab6:	d007      	beq.n	800cac8 <__any_on+0x26>
 800cab8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cabc:	fa24 f001 	lsr.w	r0, r4, r1
 800cac0:	fa00 f101 	lsl.w	r1, r0, r1
 800cac4:	428c      	cmp	r4, r1
 800cac6:	d10b      	bne.n	800cae0 <__any_on+0x3e>
 800cac8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cacc:	4293      	cmp	r3, r2
 800cace:	d803      	bhi.n	800cad8 <__any_on+0x36>
 800cad0:	2000      	movs	r0, #0
 800cad2:	bd10      	pop	{r4, pc}
 800cad4:	4603      	mov	r3, r0
 800cad6:	e7f7      	b.n	800cac8 <__any_on+0x26>
 800cad8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cadc:	2900      	cmp	r1, #0
 800cade:	d0f5      	beq.n	800cacc <__any_on+0x2a>
 800cae0:	2001      	movs	r0, #1
 800cae2:	e7f6      	b.n	800cad2 <__any_on+0x30>

0800cae4 <sulp>:
 800cae4:	b570      	push	{r4, r5, r6, lr}
 800cae6:	4604      	mov	r4, r0
 800cae8:	460d      	mov	r5, r1
 800caea:	ec45 4b10 	vmov	d0, r4, r5
 800caee:	4616      	mov	r6, r2
 800caf0:	f7ff feba 	bl	800c868 <__ulp>
 800caf4:	ec51 0b10 	vmov	r0, r1, d0
 800caf8:	b17e      	cbz	r6, 800cb1a <sulp+0x36>
 800cafa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cafe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	dd09      	ble.n	800cb1a <sulp+0x36>
 800cb06:	051b      	lsls	r3, r3, #20
 800cb08:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cb0c:	2400      	movs	r4, #0
 800cb0e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cb12:	4622      	mov	r2, r4
 800cb14:	462b      	mov	r3, r5
 800cb16:	f7f3 fd6f 	bl	80005f8 <__aeabi_dmul>
 800cb1a:	ec41 0b10 	vmov	d0, r0, r1
 800cb1e:	bd70      	pop	{r4, r5, r6, pc}

0800cb20 <_strtod_l>:
 800cb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb24:	b09f      	sub	sp, #124	@ 0x7c
 800cb26:	460c      	mov	r4, r1
 800cb28:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	921a      	str	r2, [sp, #104]	@ 0x68
 800cb2e:	9005      	str	r0, [sp, #20]
 800cb30:	f04f 0a00 	mov.w	sl, #0
 800cb34:	f04f 0b00 	mov.w	fp, #0
 800cb38:	460a      	mov	r2, r1
 800cb3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb3c:	7811      	ldrb	r1, [r2, #0]
 800cb3e:	292b      	cmp	r1, #43	@ 0x2b
 800cb40:	d04a      	beq.n	800cbd8 <_strtod_l+0xb8>
 800cb42:	d838      	bhi.n	800cbb6 <_strtod_l+0x96>
 800cb44:	290d      	cmp	r1, #13
 800cb46:	d832      	bhi.n	800cbae <_strtod_l+0x8e>
 800cb48:	2908      	cmp	r1, #8
 800cb4a:	d832      	bhi.n	800cbb2 <_strtod_l+0x92>
 800cb4c:	2900      	cmp	r1, #0
 800cb4e:	d03b      	beq.n	800cbc8 <_strtod_l+0xa8>
 800cb50:	2200      	movs	r2, #0
 800cb52:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cb56:	782a      	ldrb	r2, [r5, #0]
 800cb58:	2a30      	cmp	r2, #48	@ 0x30
 800cb5a:	f040 80b2 	bne.w	800ccc2 <_strtod_l+0x1a2>
 800cb5e:	786a      	ldrb	r2, [r5, #1]
 800cb60:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cb64:	2a58      	cmp	r2, #88	@ 0x58
 800cb66:	d16e      	bne.n	800cc46 <_strtod_l+0x126>
 800cb68:	9302      	str	r3, [sp, #8]
 800cb6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb6c:	9301      	str	r3, [sp, #4]
 800cb6e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cb70:	9300      	str	r3, [sp, #0]
 800cb72:	4a8f      	ldr	r2, [pc, #572]	@ (800cdb0 <_strtod_l+0x290>)
 800cb74:	9805      	ldr	r0, [sp, #20]
 800cb76:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cb78:	a919      	add	r1, sp, #100	@ 0x64
 800cb7a:	f001 f927 	bl	800ddcc <__gethex>
 800cb7e:	f010 060f 	ands.w	r6, r0, #15
 800cb82:	4604      	mov	r4, r0
 800cb84:	d005      	beq.n	800cb92 <_strtod_l+0x72>
 800cb86:	2e06      	cmp	r6, #6
 800cb88:	d128      	bne.n	800cbdc <_strtod_l+0xbc>
 800cb8a:	3501      	adds	r5, #1
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	9519      	str	r5, [sp, #100]	@ 0x64
 800cb90:	930e      	str	r3, [sp, #56]	@ 0x38
 800cb92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f040 858e 	bne.w	800d6b6 <_strtod_l+0xb96>
 800cb9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb9c:	b1cb      	cbz	r3, 800cbd2 <_strtod_l+0xb2>
 800cb9e:	4652      	mov	r2, sl
 800cba0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cba4:	ec43 2b10 	vmov	d0, r2, r3
 800cba8:	b01f      	add	sp, #124	@ 0x7c
 800cbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbae:	2920      	cmp	r1, #32
 800cbb0:	d1ce      	bne.n	800cb50 <_strtod_l+0x30>
 800cbb2:	3201      	adds	r2, #1
 800cbb4:	e7c1      	b.n	800cb3a <_strtod_l+0x1a>
 800cbb6:	292d      	cmp	r1, #45	@ 0x2d
 800cbb8:	d1ca      	bne.n	800cb50 <_strtod_l+0x30>
 800cbba:	2101      	movs	r1, #1
 800cbbc:	910e      	str	r1, [sp, #56]	@ 0x38
 800cbbe:	1c51      	adds	r1, r2, #1
 800cbc0:	9119      	str	r1, [sp, #100]	@ 0x64
 800cbc2:	7852      	ldrb	r2, [r2, #1]
 800cbc4:	2a00      	cmp	r2, #0
 800cbc6:	d1c5      	bne.n	800cb54 <_strtod_l+0x34>
 800cbc8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cbca:	9419      	str	r4, [sp, #100]	@ 0x64
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f040 8570 	bne.w	800d6b2 <_strtod_l+0xb92>
 800cbd2:	4652      	mov	r2, sl
 800cbd4:	465b      	mov	r3, fp
 800cbd6:	e7e5      	b.n	800cba4 <_strtod_l+0x84>
 800cbd8:	2100      	movs	r1, #0
 800cbda:	e7ef      	b.n	800cbbc <_strtod_l+0x9c>
 800cbdc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cbde:	b13a      	cbz	r2, 800cbf0 <_strtod_l+0xd0>
 800cbe0:	2135      	movs	r1, #53	@ 0x35
 800cbe2:	a81c      	add	r0, sp, #112	@ 0x70
 800cbe4:	f7ff ff3a 	bl	800ca5c <__copybits>
 800cbe8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbea:	9805      	ldr	r0, [sp, #20]
 800cbec:	f7ff fb10 	bl	800c210 <_Bfree>
 800cbf0:	3e01      	subs	r6, #1
 800cbf2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cbf4:	2e04      	cmp	r6, #4
 800cbf6:	d806      	bhi.n	800cc06 <_strtod_l+0xe6>
 800cbf8:	e8df f006 	tbb	[pc, r6]
 800cbfc:	201d0314 	.word	0x201d0314
 800cc00:	14          	.byte	0x14
 800cc01:	00          	.byte	0x00
 800cc02:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cc06:	05e1      	lsls	r1, r4, #23
 800cc08:	bf48      	it	mi
 800cc0a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cc0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc12:	0d1b      	lsrs	r3, r3, #20
 800cc14:	051b      	lsls	r3, r3, #20
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d1bb      	bne.n	800cb92 <_strtod_l+0x72>
 800cc1a:	f7fe fb2b 	bl	800b274 <__errno>
 800cc1e:	2322      	movs	r3, #34	@ 0x22
 800cc20:	6003      	str	r3, [r0, #0]
 800cc22:	e7b6      	b.n	800cb92 <_strtod_l+0x72>
 800cc24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cc28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cc2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cc30:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cc34:	e7e7      	b.n	800cc06 <_strtod_l+0xe6>
 800cc36:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800cdb8 <_strtod_l+0x298>
 800cc3a:	e7e4      	b.n	800cc06 <_strtod_l+0xe6>
 800cc3c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cc40:	f04f 3aff 	mov.w	sl, #4294967295
 800cc44:	e7df      	b.n	800cc06 <_strtod_l+0xe6>
 800cc46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc48:	1c5a      	adds	r2, r3, #1
 800cc4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc4c:	785b      	ldrb	r3, [r3, #1]
 800cc4e:	2b30      	cmp	r3, #48	@ 0x30
 800cc50:	d0f9      	beq.n	800cc46 <_strtod_l+0x126>
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d09d      	beq.n	800cb92 <_strtod_l+0x72>
 800cc56:	2301      	movs	r3, #1
 800cc58:	2700      	movs	r7, #0
 800cc5a:	9308      	str	r3, [sp, #32]
 800cc5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc5e:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc60:	970b      	str	r7, [sp, #44]	@ 0x2c
 800cc62:	46b9      	mov	r9, r7
 800cc64:	220a      	movs	r2, #10
 800cc66:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cc68:	7805      	ldrb	r5, [r0, #0]
 800cc6a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cc6e:	b2d9      	uxtb	r1, r3
 800cc70:	2909      	cmp	r1, #9
 800cc72:	d928      	bls.n	800ccc6 <_strtod_l+0x1a6>
 800cc74:	494f      	ldr	r1, [pc, #316]	@ (800cdb4 <_strtod_l+0x294>)
 800cc76:	2201      	movs	r2, #1
 800cc78:	f000 ffd6 	bl	800dc28 <strncmp>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	d032      	beq.n	800cce6 <_strtod_l+0x1c6>
 800cc80:	2000      	movs	r0, #0
 800cc82:	462a      	mov	r2, r5
 800cc84:	900a      	str	r0, [sp, #40]	@ 0x28
 800cc86:	464d      	mov	r5, r9
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2a65      	cmp	r2, #101	@ 0x65
 800cc8c:	d001      	beq.n	800cc92 <_strtod_l+0x172>
 800cc8e:	2a45      	cmp	r2, #69	@ 0x45
 800cc90:	d114      	bne.n	800ccbc <_strtod_l+0x19c>
 800cc92:	b91d      	cbnz	r5, 800cc9c <_strtod_l+0x17c>
 800cc94:	9a08      	ldr	r2, [sp, #32]
 800cc96:	4302      	orrs	r2, r0
 800cc98:	d096      	beq.n	800cbc8 <_strtod_l+0xa8>
 800cc9a:	2500      	movs	r5, #0
 800cc9c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cc9e:	1c62      	adds	r2, r4, #1
 800cca0:	9219      	str	r2, [sp, #100]	@ 0x64
 800cca2:	7862      	ldrb	r2, [r4, #1]
 800cca4:	2a2b      	cmp	r2, #43	@ 0x2b
 800cca6:	d07a      	beq.n	800cd9e <_strtod_l+0x27e>
 800cca8:	2a2d      	cmp	r2, #45	@ 0x2d
 800ccaa:	d07e      	beq.n	800cdaa <_strtod_l+0x28a>
 800ccac:	f04f 0c00 	mov.w	ip, #0
 800ccb0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ccb4:	2909      	cmp	r1, #9
 800ccb6:	f240 8085 	bls.w	800cdc4 <_strtod_l+0x2a4>
 800ccba:	9419      	str	r4, [sp, #100]	@ 0x64
 800ccbc:	f04f 0800 	mov.w	r8, #0
 800ccc0:	e0a5      	b.n	800ce0e <_strtod_l+0x2ee>
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	e7c8      	b.n	800cc58 <_strtod_l+0x138>
 800ccc6:	f1b9 0f08 	cmp.w	r9, #8
 800ccca:	bfd8      	it	le
 800cccc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ccce:	f100 0001 	add.w	r0, r0, #1
 800ccd2:	bfda      	itte	le
 800ccd4:	fb02 3301 	mlale	r3, r2, r1, r3
 800ccd8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ccda:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ccde:	f109 0901 	add.w	r9, r9, #1
 800cce2:	9019      	str	r0, [sp, #100]	@ 0x64
 800cce4:	e7bf      	b.n	800cc66 <_strtod_l+0x146>
 800cce6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cce8:	1c5a      	adds	r2, r3, #1
 800ccea:	9219      	str	r2, [sp, #100]	@ 0x64
 800ccec:	785a      	ldrb	r2, [r3, #1]
 800ccee:	f1b9 0f00 	cmp.w	r9, #0
 800ccf2:	d03b      	beq.n	800cd6c <_strtod_l+0x24c>
 800ccf4:	900a      	str	r0, [sp, #40]	@ 0x28
 800ccf6:	464d      	mov	r5, r9
 800ccf8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ccfc:	2b09      	cmp	r3, #9
 800ccfe:	d912      	bls.n	800cd26 <_strtod_l+0x206>
 800cd00:	2301      	movs	r3, #1
 800cd02:	e7c2      	b.n	800cc8a <_strtod_l+0x16a>
 800cd04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd06:	1c5a      	adds	r2, r3, #1
 800cd08:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd0a:	785a      	ldrb	r2, [r3, #1]
 800cd0c:	3001      	adds	r0, #1
 800cd0e:	2a30      	cmp	r2, #48	@ 0x30
 800cd10:	d0f8      	beq.n	800cd04 <_strtod_l+0x1e4>
 800cd12:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cd16:	2b08      	cmp	r3, #8
 800cd18:	f200 84d2 	bhi.w	800d6c0 <_strtod_l+0xba0>
 800cd1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd1e:	900a      	str	r0, [sp, #40]	@ 0x28
 800cd20:	2000      	movs	r0, #0
 800cd22:	930c      	str	r3, [sp, #48]	@ 0x30
 800cd24:	4605      	mov	r5, r0
 800cd26:	3a30      	subs	r2, #48	@ 0x30
 800cd28:	f100 0301 	add.w	r3, r0, #1
 800cd2c:	d018      	beq.n	800cd60 <_strtod_l+0x240>
 800cd2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd30:	4419      	add	r1, r3
 800cd32:	910a      	str	r1, [sp, #40]	@ 0x28
 800cd34:	462e      	mov	r6, r5
 800cd36:	f04f 0e0a 	mov.w	lr, #10
 800cd3a:	1c71      	adds	r1, r6, #1
 800cd3c:	eba1 0c05 	sub.w	ip, r1, r5
 800cd40:	4563      	cmp	r3, ip
 800cd42:	dc15      	bgt.n	800cd70 <_strtod_l+0x250>
 800cd44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800cd48:	182b      	adds	r3, r5, r0
 800cd4a:	2b08      	cmp	r3, #8
 800cd4c:	f105 0501 	add.w	r5, r5, #1
 800cd50:	4405      	add	r5, r0
 800cd52:	dc1a      	bgt.n	800cd8a <_strtod_l+0x26a>
 800cd54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cd56:	230a      	movs	r3, #10
 800cd58:	fb03 2301 	mla	r3, r3, r1, r2
 800cd5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd5e:	2300      	movs	r3, #0
 800cd60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd62:	1c51      	adds	r1, r2, #1
 800cd64:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd66:	7852      	ldrb	r2, [r2, #1]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	e7c5      	b.n	800ccf8 <_strtod_l+0x1d8>
 800cd6c:	4648      	mov	r0, r9
 800cd6e:	e7ce      	b.n	800cd0e <_strtod_l+0x1ee>
 800cd70:	2e08      	cmp	r6, #8
 800cd72:	dc05      	bgt.n	800cd80 <_strtod_l+0x260>
 800cd74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800cd76:	fb0e f606 	mul.w	r6, lr, r6
 800cd7a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800cd7c:	460e      	mov	r6, r1
 800cd7e:	e7dc      	b.n	800cd3a <_strtod_l+0x21a>
 800cd80:	2910      	cmp	r1, #16
 800cd82:	bfd8      	it	le
 800cd84:	fb0e f707 	mulle.w	r7, lr, r7
 800cd88:	e7f8      	b.n	800cd7c <_strtod_l+0x25c>
 800cd8a:	2b0f      	cmp	r3, #15
 800cd8c:	bfdc      	itt	le
 800cd8e:	230a      	movle	r3, #10
 800cd90:	fb03 2707 	mlale	r7, r3, r7, r2
 800cd94:	e7e3      	b.n	800cd5e <_strtod_l+0x23e>
 800cd96:	2300      	movs	r3, #0
 800cd98:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e77a      	b.n	800cc94 <_strtod_l+0x174>
 800cd9e:	f04f 0c00 	mov.w	ip, #0
 800cda2:	1ca2      	adds	r2, r4, #2
 800cda4:	9219      	str	r2, [sp, #100]	@ 0x64
 800cda6:	78a2      	ldrb	r2, [r4, #2]
 800cda8:	e782      	b.n	800ccb0 <_strtod_l+0x190>
 800cdaa:	f04f 0c01 	mov.w	ip, #1
 800cdae:	e7f8      	b.n	800cda2 <_strtod_l+0x282>
 800cdb0:	0800eddc 	.word	0x0800eddc
 800cdb4:	0800ec0f 	.word	0x0800ec0f
 800cdb8:	7ff00000 	.word	0x7ff00000
 800cdbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cdbe:	1c51      	adds	r1, r2, #1
 800cdc0:	9119      	str	r1, [sp, #100]	@ 0x64
 800cdc2:	7852      	ldrb	r2, [r2, #1]
 800cdc4:	2a30      	cmp	r2, #48	@ 0x30
 800cdc6:	d0f9      	beq.n	800cdbc <_strtod_l+0x29c>
 800cdc8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cdcc:	2908      	cmp	r1, #8
 800cdce:	f63f af75 	bhi.w	800ccbc <_strtod_l+0x19c>
 800cdd2:	3a30      	subs	r2, #48	@ 0x30
 800cdd4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdd6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cdd8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cdda:	f04f 080a 	mov.w	r8, #10
 800cdde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cde0:	1c56      	adds	r6, r2, #1
 800cde2:	9619      	str	r6, [sp, #100]	@ 0x64
 800cde4:	7852      	ldrb	r2, [r2, #1]
 800cde6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cdea:	f1be 0f09 	cmp.w	lr, #9
 800cdee:	d939      	bls.n	800ce64 <_strtod_l+0x344>
 800cdf0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cdf2:	1a76      	subs	r6, r6, r1
 800cdf4:	2e08      	cmp	r6, #8
 800cdf6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cdfa:	dc03      	bgt.n	800ce04 <_strtod_l+0x2e4>
 800cdfc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cdfe:	4588      	cmp	r8, r1
 800ce00:	bfa8      	it	ge
 800ce02:	4688      	movge	r8, r1
 800ce04:	f1bc 0f00 	cmp.w	ip, #0
 800ce08:	d001      	beq.n	800ce0e <_strtod_l+0x2ee>
 800ce0a:	f1c8 0800 	rsb	r8, r8, #0
 800ce0e:	2d00      	cmp	r5, #0
 800ce10:	d14e      	bne.n	800ceb0 <_strtod_l+0x390>
 800ce12:	9908      	ldr	r1, [sp, #32]
 800ce14:	4308      	orrs	r0, r1
 800ce16:	f47f aebc 	bne.w	800cb92 <_strtod_l+0x72>
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f47f aed4 	bne.w	800cbc8 <_strtod_l+0xa8>
 800ce20:	2a69      	cmp	r2, #105	@ 0x69
 800ce22:	d028      	beq.n	800ce76 <_strtod_l+0x356>
 800ce24:	dc25      	bgt.n	800ce72 <_strtod_l+0x352>
 800ce26:	2a49      	cmp	r2, #73	@ 0x49
 800ce28:	d025      	beq.n	800ce76 <_strtod_l+0x356>
 800ce2a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ce2c:	f47f aecc 	bne.w	800cbc8 <_strtod_l+0xa8>
 800ce30:	499a      	ldr	r1, [pc, #616]	@ (800d09c <_strtod_l+0x57c>)
 800ce32:	a819      	add	r0, sp, #100	@ 0x64
 800ce34:	f001 f9ec 	bl	800e210 <__match>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	f43f aec5 	beq.w	800cbc8 <_strtod_l+0xa8>
 800ce3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	2b28      	cmp	r3, #40	@ 0x28
 800ce44:	d12e      	bne.n	800cea4 <_strtod_l+0x384>
 800ce46:	4996      	ldr	r1, [pc, #600]	@ (800d0a0 <_strtod_l+0x580>)
 800ce48:	aa1c      	add	r2, sp, #112	@ 0x70
 800ce4a:	a819      	add	r0, sp, #100	@ 0x64
 800ce4c:	f001 f9f4 	bl	800e238 <__hexnan>
 800ce50:	2805      	cmp	r0, #5
 800ce52:	d127      	bne.n	800cea4 <_strtod_l+0x384>
 800ce54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ce56:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ce5a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ce5e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ce62:	e696      	b.n	800cb92 <_strtod_l+0x72>
 800ce64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce66:	fb08 2101 	mla	r1, r8, r1, r2
 800ce6a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ce6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce70:	e7b5      	b.n	800cdde <_strtod_l+0x2be>
 800ce72:	2a6e      	cmp	r2, #110	@ 0x6e
 800ce74:	e7da      	b.n	800ce2c <_strtod_l+0x30c>
 800ce76:	498b      	ldr	r1, [pc, #556]	@ (800d0a4 <_strtod_l+0x584>)
 800ce78:	a819      	add	r0, sp, #100	@ 0x64
 800ce7a:	f001 f9c9 	bl	800e210 <__match>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	f43f aea2 	beq.w	800cbc8 <_strtod_l+0xa8>
 800ce84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce86:	4988      	ldr	r1, [pc, #544]	@ (800d0a8 <_strtod_l+0x588>)
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	a819      	add	r0, sp, #100	@ 0x64
 800ce8c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce8e:	f001 f9bf 	bl	800e210 <__match>
 800ce92:	b910      	cbnz	r0, 800ce9a <_strtod_l+0x37a>
 800ce94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce96:	3301      	adds	r3, #1
 800ce98:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce9a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d0b8 <_strtod_l+0x598>
 800ce9e:	f04f 0a00 	mov.w	sl, #0
 800cea2:	e676      	b.n	800cb92 <_strtod_l+0x72>
 800cea4:	4881      	ldr	r0, [pc, #516]	@ (800d0ac <_strtod_l+0x58c>)
 800cea6:	f000 feef 	bl	800dc88 <nan>
 800ceaa:	ec5b ab10 	vmov	sl, fp, d0
 800ceae:	e670      	b.n	800cb92 <_strtod_l+0x72>
 800ceb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceb2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ceb4:	eba8 0303 	sub.w	r3, r8, r3
 800ceb8:	f1b9 0f00 	cmp.w	r9, #0
 800cebc:	bf08      	it	eq
 800cebe:	46a9      	moveq	r9, r5
 800cec0:	2d10      	cmp	r5, #16
 800cec2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cec4:	462c      	mov	r4, r5
 800cec6:	bfa8      	it	ge
 800cec8:	2410      	movge	r4, #16
 800ceca:	f7f3 fb1b 	bl	8000504 <__aeabi_ui2d>
 800cece:	2d09      	cmp	r5, #9
 800ced0:	4682      	mov	sl, r0
 800ced2:	468b      	mov	fp, r1
 800ced4:	dc13      	bgt.n	800cefe <_strtod_l+0x3de>
 800ced6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	f43f ae5a 	beq.w	800cb92 <_strtod_l+0x72>
 800cede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cee0:	dd78      	ble.n	800cfd4 <_strtod_l+0x4b4>
 800cee2:	2b16      	cmp	r3, #22
 800cee4:	dc5f      	bgt.n	800cfa6 <_strtod_l+0x486>
 800cee6:	4972      	ldr	r1, [pc, #456]	@ (800d0b0 <_strtod_l+0x590>)
 800cee8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ceec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cef0:	4652      	mov	r2, sl
 800cef2:	465b      	mov	r3, fp
 800cef4:	f7f3 fb80 	bl	80005f8 <__aeabi_dmul>
 800cef8:	4682      	mov	sl, r0
 800cefa:	468b      	mov	fp, r1
 800cefc:	e649      	b.n	800cb92 <_strtod_l+0x72>
 800cefe:	4b6c      	ldr	r3, [pc, #432]	@ (800d0b0 <_strtod_l+0x590>)
 800cf00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cf08:	f7f3 fb76 	bl	80005f8 <__aeabi_dmul>
 800cf0c:	4682      	mov	sl, r0
 800cf0e:	4638      	mov	r0, r7
 800cf10:	468b      	mov	fp, r1
 800cf12:	f7f3 faf7 	bl	8000504 <__aeabi_ui2d>
 800cf16:	4602      	mov	r2, r0
 800cf18:	460b      	mov	r3, r1
 800cf1a:	4650      	mov	r0, sl
 800cf1c:	4659      	mov	r1, fp
 800cf1e:	f7f3 f9b5 	bl	800028c <__adddf3>
 800cf22:	2d0f      	cmp	r5, #15
 800cf24:	4682      	mov	sl, r0
 800cf26:	468b      	mov	fp, r1
 800cf28:	ddd5      	ble.n	800ced6 <_strtod_l+0x3b6>
 800cf2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf2c:	1b2c      	subs	r4, r5, r4
 800cf2e:	441c      	add	r4, r3
 800cf30:	2c00      	cmp	r4, #0
 800cf32:	f340 8093 	ble.w	800d05c <_strtod_l+0x53c>
 800cf36:	f014 030f 	ands.w	r3, r4, #15
 800cf3a:	d00a      	beq.n	800cf52 <_strtod_l+0x432>
 800cf3c:	495c      	ldr	r1, [pc, #368]	@ (800d0b0 <_strtod_l+0x590>)
 800cf3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf42:	4652      	mov	r2, sl
 800cf44:	465b      	mov	r3, fp
 800cf46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf4a:	f7f3 fb55 	bl	80005f8 <__aeabi_dmul>
 800cf4e:	4682      	mov	sl, r0
 800cf50:	468b      	mov	fp, r1
 800cf52:	f034 040f 	bics.w	r4, r4, #15
 800cf56:	d073      	beq.n	800d040 <_strtod_l+0x520>
 800cf58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cf5c:	dd49      	ble.n	800cff2 <_strtod_l+0x4d2>
 800cf5e:	2400      	movs	r4, #0
 800cf60:	46a0      	mov	r8, r4
 800cf62:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cf64:	46a1      	mov	r9, r4
 800cf66:	9a05      	ldr	r2, [sp, #20]
 800cf68:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d0b8 <_strtod_l+0x598>
 800cf6c:	2322      	movs	r3, #34	@ 0x22
 800cf6e:	6013      	str	r3, [r2, #0]
 800cf70:	f04f 0a00 	mov.w	sl, #0
 800cf74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	f43f ae0b 	beq.w	800cb92 <_strtod_l+0x72>
 800cf7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf7e:	9805      	ldr	r0, [sp, #20]
 800cf80:	f7ff f946 	bl	800c210 <_Bfree>
 800cf84:	9805      	ldr	r0, [sp, #20]
 800cf86:	4649      	mov	r1, r9
 800cf88:	f7ff f942 	bl	800c210 <_Bfree>
 800cf8c:	9805      	ldr	r0, [sp, #20]
 800cf8e:	4641      	mov	r1, r8
 800cf90:	f7ff f93e 	bl	800c210 <_Bfree>
 800cf94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cf96:	9805      	ldr	r0, [sp, #20]
 800cf98:	f7ff f93a 	bl	800c210 <_Bfree>
 800cf9c:	9805      	ldr	r0, [sp, #20]
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	f7ff f936 	bl	800c210 <_Bfree>
 800cfa4:	e5f5      	b.n	800cb92 <_strtod_l+0x72>
 800cfa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfa8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cfac:	4293      	cmp	r3, r2
 800cfae:	dbbc      	blt.n	800cf2a <_strtod_l+0x40a>
 800cfb0:	4c3f      	ldr	r4, [pc, #252]	@ (800d0b0 <_strtod_l+0x590>)
 800cfb2:	f1c5 050f 	rsb	r5, r5, #15
 800cfb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cfba:	4652      	mov	r2, sl
 800cfbc:	465b      	mov	r3, fp
 800cfbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfc2:	f7f3 fb19 	bl	80005f8 <__aeabi_dmul>
 800cfc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfc8:	1b5d      	subs	r5, r3, r5
 800cfca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cfce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cfd2:	e78f      	b.n	800cef4 <_strtod_l+0x3d4>
 800cfd4:	3316      	adds	r3, #22
 800cfd6:	dba8      	blt.n	800cf2a <_strtod_l+0x40a>
 800cfd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfda:	eba3 0808 	sub.w	r8, r3, r8
 800cfde:	4b34      	ldr	r3, [pc, #208]	@ (800d0b0 <_strtod_l+0x590>)
 800cfe0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cfe4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cfe8:	4650      	mov	r0, sl
 800cfea:	4659      	mov	r1, fp
 800cfec:	f7f3 fc2e 	bl	800084c <__aeabi_ddiv>
 800cff0:	e782      	b.n	800cef8 <_strtod_l+0x3d8>
 800cff2:	2300      	movs	r3, #0
 800cff4:	4f2f      	ldr	r7, [pc, #188]	@ (800d0b4 <_strtod_l+0x594>)
 800cff6:	1124      	asrs	r4, r4, #4
 800cff8:	4650      	mov	r0, sl
 800cffa:	4659      	mov	r1, fp
 800cffc:	461e      	mov	r6, r3
 800cffe:	2c01      	cmp	r4, #1
 800d000:	dc21      	bgt.n	800d046 <_strtod_l+0x526>
 800d002:	b10b      	cbz	r3, 800d008 <_strtod_l+0x4e8>
 800d004:	4682      	mov	sl, r0
 800d006:	468b      	mov	fp, r1
 800d008:	492a      	ldr	r1, [pc, #168]	@ (800d0b4 <_strtod_l+0x594>)
 800d00a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d00e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d012:	4652      	mov	r2, sl
 800d014:	465b      	mov	r3, fp
 800d016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d01a:	f7f3 faed 	bl	80005f8 <__aeabi_dmul>
 800d01e:	4b26      	ldr	r3, [pc, #152]	@ (800d0b8 <_strtod_l+0x598>)
 800d020:	460a      	mov	r2, r1
 800d022:	400b      	ands	r3, r1
 800d024:	4925      	ldr	r1, [pc, #148]	@ (800d0bc <_strtod_l+0x59c>)
 800d026:	428b      	cmp	r3, r1
 800d028:	4682      	mov	sl, r0
 800d02a:	d898      	bhi.n	800cf5e <_strtod_l+0x43e>
 800d02c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d030:	428b      	cmp	r3, r1
 800d032:	bf86      	itte	hi
 800d034:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d0c0 <_strtod_l+0x5a0>
 800d038:	f04f 3aff 	movhi.w	sl, #4294967295
 800d03c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d040:	2300      	movs	r3, #0
 800d042:	9308      	str	r3, [sp, #32]
 800d044:	e076      	b.n	800d134 <_strtod_l+0x614>
 800d046:	07e2      	lsls	r2, r4, #31
 800d048:	d504      	bpl.n	800d054 <_strtod_l+0x534>
 800d04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d04e:	f7f3 fad3 	bl	80005f8 <__aeabi_dmul>
 800d052:	2301      	movs	r3, #1
 800d054:	3601      	adds	r6, #1
 800d056:	1064      	asrs	r4, r4, #1
 800d058:	3708      	adds	r7, #8
 800d05a:	e7d0      	b.n	800cffe <_strtod_l+0x4de>
 800d05c:	d0f0      	beq.n	800d040 <_strtod_l+0x520>
 800d05e:	4264      	negs	r4, r4
 800d060:	f014 020f 	ands.w	r2, r4, #15
 800d064:	d00a      	beq.n	800d07c <_strtod_l+0x55c>
 800d066:	4b12      	ldr	r3, [pc, #72]	@ (800d0b0 <_strtod_l+0x590>)
 800d068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d06c:	4650      	mov	r0, sl
 800d06e:	4659      	mov	r1, fp
 800d070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d074:	f7f3 fbea 	bl	800084c <__aeabi_ddiv>
 800d078:	4682      	mov	sl, r0
 800d07a:	468b      	mov	fp, r1
 800d07c:	1124      	asrs	r4, r4, #4
 800d07e:	d0df      	beq.n	800d040 <_strtod_l+0x520>
 800d080:	2c1f      	cmp	r4, #31
 800d082:	dd1f      	ble.n	800d0c4 <_strtod_l+0x5a4>
 800d084:	2400      	movs	r4, #0
 800d086:	46a0      	mov	r8, r4
 800d088:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d08a:	46a1      	mov	r9, r4
 800d08c:	9a05      	ldr	r2, [sp, #20]
 800d08e:	2322      	movs	r3, #34	@ 0x22
 800d090:	f04f 0a00 	mov.w	sl, #0
 800d094:	f04f 0b00 	mov.w	fp, #0
 800d098:	6013      	str	r3, [r2, #0]
 800d09a:	e76b      	b.n	800cf74 <_strtod_l+0x454>
 800d09c:	0800eafd 	.word	0x0800eafd
 800d0a0:	0800edc8 	.word	0x0800edc8
 800d0a4:	0800eaf5 	.word	0x0800eaf5
 800d0a8:	0800eb2c 	.word	0x0800eb2c
 800d0ac:	0800ec65 	.word	0x0800ec65
 800d0b0:	0800ed00 	.word	0x0800ed00
 800d0b4:	0800ecd8 	.word	0x0800ecd8
 800d0b8:	7ff00000 	.word	0x7ff00000
 800d0bc:	7ca00000 	.word	0x7ca00000
 800d0c0:	7fefffff 	.word	0x7fefffff
 800d0c4:	f014 0310 	ands.w	r3, r4, #16
 800d0c8:	bf18      	it	ne
 800d0ca:	236a      	movne	r3, #106	@ 0x6a
 800d0cc:	4ea9      	ldr	r6, [pc, #676]	@ (800d374 <_strtod_l+0x854>)
 800d0ce:	9308      	str	r3, [sp, #32]
 800d0d0:	4650      	mov	r0, sl
 800d0d2:	4659      	mov	r1, fp
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	07e7      	lsls	r7, r4, #31
 800d0d8:	d504      	bpl.n	800d0e4 <_strtod_l+0x5c4>
 800d0da:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d0de:	f7f3 fa8b 	bl	80005f8 <__aeabi_dmul>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	1064      	asrs	r4, r4, #1
 800d0e6:	f106 0608 	add.w	r6, r6, #8
 800d0ea:	d1f4      	bne.n	800d0d6 <_strtod_l+0x5b6>
 800d0ec:	b10b      	cbz	r3, 800d0f2 <_strtod_l+0x5d2>
 800d0ee:	4682      	mov	sl, r0
 800d0f0:	468b      	mov	fp, r1
 800d0f2:	9b08      	ldr	r3, [sp, #32]
 800d0f4:	b1b3      	cbz	r3, 800d124 <_strtod_l+0x604>
 800d0f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d0fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	4659      	mov	r1, fp
 800d102:	dd0f      	ble.n	800d124 <_strtod_l+0x604>
 800d104:	2b1f      	cmp	r3, #31
 800d106:	dd56      	ble.n	800d1b6 <_strtod_l+0x696>
 800d108:	2b34      	cmp	r3, #52	@ 0x34
 800d10a:	bfde      	ittt	le
 800d10c:	f04f 33ff 	movle.w	r3, #4294967295
 800d110:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d114:	4093      	lslle	r3, r2
 800d116:	f04f 0a00 	mov.w	sl, #0
 800d11a:	bfcc      	ite	gt
 800d11c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d120:	ea03 0b01 	andle.w	fp, r3, r1
 800d124:	2200      	movs	r2, #0
 800d126:	2300      	movs	r3, #0
 800d128:	4650      	mov	r0, sl
 800d12a:	4659      	mov	r1, fp
 800d12c:	f7f3 fccc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d130:	2800      	cmp	r0, #0
 800d132:	d1a7      	bne.n	800d084 <_strtod_l+0x564>
 800d134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d13a:	9805      	ldr	r0, [sp, #20]
 800d13c:	462b      	mov	r3, r5
 800d13e:	464a      	mov	r2, r9
 800d140:	f7ff f8ce 	bl	800c2e0 <__s2b>
 800d144:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d146:	2800      	cmp	r0, #0
 800d148:	f43f af09 	beq.w	800cf5e <_strtod_l+0x43e>
 800d14c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d14e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d150:	2a00      	cmp	r2, #0
 800d152:	eba3 0308 	sub.w	r3, r3, r8
 800d156:	bfa8      	it	ge
 800d158:	2300      	movge	r3, #0
 800d15a:	9312      	str	r3, [sp, #72]	@ 0x48
 800d15c:	2400      	movs	r4, #0
 800d15e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d162:	9316      	str	r3, [sp, #88]	@ 0x58
 800d164:	46a0      	mov	r8, r4
 800d166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d168:	9805      	ldr	r0, [sp, #20]
 800d16a:	6859      	ldr	r1, [r3, #4]
 800d16c:	f7ff f810 	bl	800c190 <_Balloc>
 800d170:	4681      	mov	r9, r0
 800d172:	2800      	cmp	r0, #0
 800d174:	f43f aef7 	beq.w	800cf66 <_strtod_l+0x446>
 800d178:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d17a:	691a      	ldr	r2, [r3, #16]
 800d17c:	3202      	adds	r2, #2
 800d17e:	f103 010c 	add.w	r1, r3, #12
 800d182:	0092      	lsls	r2, r2, #2
 800d184:	300c      	adds	r0, #12
 800d186:	f000 fd71 	bl	800dc6c <memcpy>
 800d18a:	ec4b ab10 	vmov	d0, sl, fp
 800d18e:	9805      	ldr	r0, [sp, #20]
 800d190:	aa1c      	add	r2, sp, #112	@ 0x70
 800d192:	a91b      	add	r1, sp, #108	@ 0x6c
 800d194:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d198:	f7ff fbd6 	bl	800c948 <__d2b>
 800d19c:	901a      	str	r0, [sp, #104]	@ 0x68
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	f43f aee1 	beq.w	800cf66 <_strtod_l+0x446>
 800d1a4:	9805      	ldr	r0, [sp, #20]
 800d1a6:	2101      	movs	r1, #1
 800d1a8:	f7ff f930 	bl	800c40c <__i2b>
 800d1ac:	4680      	mov	r8, r0
 800d1ae:	b948      	cbnz	r0, 800d1c4 <_strtod_l+0x6a4>
 800d1b0:	f04f 0800 	mov.w	r8, #0
 800d1b4:	e6d7      	b.n	800cf66 <_strtod_l+0x446>
 800d1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d1be:	ea03 0a0a 	and.w	sl, r3, sl
 800d1c2:	e7af      	b.n	800d124 <_strtod_l+0x604>
 800d1c4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d1c6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d1c8:	2d00      	cmp	r5, #0
 800d1ca:	bfab      	itete	ge
 800d1cc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d1ce:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d1d0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d1d2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d1d4:	bfac      	ite	ge
 800d1d6:	18ef      	addge	r7, r5, r3
 800d1d8:	1b5e      	sublt	r6, r3, r5
 800d1da:	9b08      	ldr	r3, [sp, #32]
 800d1dc:	1aed      	subs	r5, r5, r3
 800d1de:	4415      	add	r5, r2
 800d1e0:	4b65      	ldr	r3, [pc, #404]	@ (800d378 <_strtod_l+0x858>)
 800d1e2:	3d01      	subs	r5, #1
 800d1e4:	429d      	cmp	r5, r3
 800d1e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d1ea:	da50      	bge.n	800d28e <_strtod_l+0x76e>
 800d1ec:	1b5b      	subs	r3, r3, r5
 800d1ee:	2b1f      	cmp	r3, #31
 800d1f0:	eba2 0203 	sub.w	r2, r2, r3
 800d1f4:	f04f 0101 	mov.w	r1, #1
 800d1f8:	dc3d      	bgt.n	800d276 <_strtod_l+0x756>
 800d1fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d1fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d200:	2300      	movs	r3, #0
 800d202:	9310      	str	r3, [sp, #64]	@ 0x40
 800d204:	18bd      	adds	r5, r7, r2
 800d206:	9b08      	ldr	r3, [sp, #32]
 800d208:	42af      	cmp	r7, r5
 800d20a:	4416      	add	r6, r2
 800d20c:	441e      	add	r6, r3
 800d20e:	463b      	mov	r3, r7
 800d210:	bfa8      	it	ge
 800d212:	462b      	movge	r3, r5
 800d214:	42b3      	cmp	r3, r6
 800d216:	bfa8      	it	ge
 800d218:	4633      	movge	r3, r6
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	bfc2      	ittt	gt
 800d21e:	1aed      	subgt	r5, r5, r3
 800d220:	1af6      	subgt	r6, r6, r3
 800d222:	1aff      	subgt	r7, r7, r3
 800d224:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d226:	2b00      	cmp	r3, #0
 800d228:	dd16      	ble.n	800d258 <_strtod_l+0x738>
 800d22a:	4641      	mov	r1, r8
 800d22c:	9805      	ldr	r0, [sp, #20]
 800d22e:	461a      	mov	r2, r3
 800d230:	f7ff f9a4 	bl	800c57c <__pow5mult>
 800d234:	4680      	mov	r8, r0
 800d236:	2800      	cmp	r0, #0
 800d238:	d0ba      	beq.n	800d1b0 <_strtod_l+0x690>
 800d23a:	4601      	mov	r1, r0
 800d23c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d23e:	9805      	ldr	r0, [sp, #20]
 800d240:	f7ff f8fa 	bl	800c438 <__multiply>
 800d244:	900a      	str	r0, [sp, #40]	@ 0x28
 800d246:	2800      	cmp	r0, #0
 800d248:	f43f ae8d 	beq.w	800cf66 <_strtod_l+0x446>
 800d24c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d24e:	9805      	ldr	r0, [sp, #20]
 800d250:	f7fe ffde 	bl	800c210 <_Bfree>
 800d254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d256:	931a      	str	r3, [sp, #104]	@ 0x68
 800d258:	2d00      	cmp	r5, #0
 800d25a:	dc1d      	bgt.n	800d298 <_strtod_l+0x778>
 800d25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d25e:	2b00      	cmp	r3, #0
 800d260:	dd23      	ble.n	800d2aa <_strtod_l+0x78a>
 800d262:	4649      	mov	r1, r9
 800d264:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d266:	9805      	ldr	r0, [sp, #20]
 800d268:	f7ff f988 	bl	800c57c <__pow5mult>
 800d26c:	4681      	mov	r9, r0
 800d26e:	b9e0      	cbnz	r0, 800d2aa <_strtod_l+0x78a>
 800d270:	f04f 0900 	mov.w	r9, #0
 800d274:	e677      	b.n	800cf66 <_strtod_l+0x446>
 800d276:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d27a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d27e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d282:	35e2      	adds	r5, #226	@ 0xe2
 800d284:	fa01 f305 	lsl.w	r3, r1, r5
 800d288:	9310      	str	r3, [sp, #64]	@ 0x40
 800d28a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d28c:	e7ba      	b.n	800d204 <_strtod_l+0x6e4>
 800d28e:	2300      	movs	r3, #0
 800d290:	9310      	str	r3, [sp, #64]	@ 0x40
 800d292:	2301      	movs	r3, #1
 800d294:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d296:	e7b5      	b.n	800d204 <_strtod_l+0x6e4>
 800d298:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d29a:	9805      	ldr	r0, [sp, #20]
 800d29c:	462a      	mov	r2, r5
 800d29e:	f7ff f9c7 	bl	800c630 <__lshift>
 800d2a2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d1d9      	bne.n	800d25c <_strtod_l+0x73c>
 800d2a8:	e65d      	b.n	800cf66 <_strtod_l+0x446>
 800d2aa:	2e00      	cmp	r6, #0
 800d2ac:	dd07      	ble.n	800d2be <_strtod_l+0x79e>
 800d2ae:	4649      	mov	r1, r9
 800d2b0:	9805      	ldr	r0, [sp, #20]
 800d2b2:	4632      	mov	r2, r6
 800d2b4:	f7ff f9bc 	bl	800c630 <__lshift>
 800d2b8:	4681      	mov	r9, r0
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	d0d8      	beq.n	800d270 <_strtod_l+0x750>
 800d2be:	2f00      	cmp	r7, #0
 800d2c0:	dd08      	ble.n	800d2d4 <_strtod_l+0x7b4>
 800d2c2:	4641      	mov	r1, r8
 800d2c4:	9805      	ldr	r0, [sp, #20]
 800d2c6:	463a      	mov	r2, r7
 800d2c8:	f7ff f9b2 	bl	800c630 <__lshift>
 800d2cc:	4680      	mov	r8, r0
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	f43f ae49 	beq.w	800cf66 <_strtod_l+0x446>
 800d2d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2d6:	9805      	ldr	r0, [sp, #20]
 800d2d8:	464a      	mov	r2, r9
 800d2da:	f7ff fa31 	bl	800c740 <__mdiff>
 800d2de:	4604      	mov	r4, r0
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	f43f ae40 	beq.w	800cf66 <_strtod_l+0x446>
 800d2e6:	68c3      	ldr	r3, [r0, #12]
 800d2e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	60c3      	str	r3, [r0, #12]
 800d2ee:	4641      	mov	r1, r8
 800d2f0:	f7ff fa0a 	bl	800c708 <__mcmp>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	da45      	bge.n	800d384 <_strtod_l+0x864>
 800d2f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2fa:	ea53 030a 	orrs.w	r3, r3, sl
 800d2fe:	d16b      	bne.n	800d3d8 <_strtod_l+0x8b8>
 800d300:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d304:	2b00      	cmp	r3, #0
 800d306:	d167      	bne.n	800d3d8 <_strtod_l+0x8b8>
 800d308:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d30c:	0d1b      	lsrs	r3, r3, #20
 800d30e:	051b      	lsls	r3, r3, #20
 800d310:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d314:	d960      	bls.n	800d3d8 <_strtod_l+0x8b8>
 800d316:	6963      	ldr	r3, [r4, #20]
 800d318:	b913      	cbnz	r3, 800d320 <_strtod_l+0x800>
 800d31a:	6923      	ldr	r3, [r4, #16]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	dd5b      	ble.n	800d3d8 <_strtod_l+0x8b8>
 800d320:	4621      	mov	r1, r4
 800d322:	2201      	movs	r2, #1
 800d324:	9805      	ldr	r0, [sp, #20]
 800d326:	f7ff f983 	bl	800c630 <__lshift>
 800d32a:	4641      	mov	r1, r8
 800d32c:	4604      	mov	r4, r0
 800d32e:	f7ff f9eb 	bl	800c708 <__mcmp>
 800d332:	2800      	cmp	r0, #0
 800d334:	dd50      	ble.n	800d3d8 <_strtod_l+0x8b8>
 800d336:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d33a:	9a08      	ldr	r2, [sp, #32]
 800d33c:	0d1b      	lsrs	r3, r3, #20
 800d33e:	051b      	lsls	r3, r3, #20
 800d340:	2a00      	cmp	r2, #0
 800d342:	d06a      	beq.n	800d41a <_strtod_l+0x8fa>
 800d344:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d348:	d867      	bhi.n	800d41a <_strtod_l+0x8fa>
 800d34a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d34e:	f67f ae9d 	bls.w	800d08c <_strtod_l+0x56c>
 800d352:	4b0a      	ldr	r3, [pc, #40]	@ (800d37c <_strtod_l+0x85c>)
 800d354:	4650      	mov	r0, sl
 800d356:	4659      	mov	r1, fp
 800d358:	2200      	movs	r2, #0
 800d35a:	f7f3 f94d 	bl	80005f8 <__aeabi_dmul>
 800d35e:	4b08      	ldr	r3, [pc, #32]	@ (800d380 <_strtod_l+0x860>)
 800d360:	400b      	ands	r3, r1
 800d362:	4682      	mov	sl, r0
 800d364:	468b      	mov	fp, r1
 800d366:	2b00      	cmp	r3, #0
 800d368:	f47f ae08 	bne.w	800cf7c <_strtod_l+0x45c>
 800d36c:	9a05      	ldr	r2, [sp, #20]
 800d36e:	2322      	movs	r3, #34	@ 0x22
 800d370:	6013      	str	r3, [r2, #0]
 800d372:	e603      	b.n	800cf7c <_strtod_l+0x45c>
 800d374:	0800edf0 	.word	0x0800edf0
 800d378:	fffffc02 	.word	0xfffffc02
 800d37c:	39500000 	.word	0x39500000
 800d380:	7ff00000 	.word	0x7ff00000
 800d384:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d388:	d165      	bne.n	800d456 <_strtod_l+0x936>
 800d38a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d38c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d390:	b35a      	cbz	r2, 800d3ea <_strtod_l+0x8ca>
 800d392:	4a9f      	ldr	r2, [pc, #636]	@ (800d610 <_strtod_l+0xaf0>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d12b      	bne.n	800d3f0 <_strtod_l+0x8d0>
 800d398:	9b08      	ldr	r3, [sp, #32]
 800d39a:	4651      	mov	r1, sl
 800d39c:	b303      	cbz	r3, 800d3e0 <_strtod_l+0x8c0>
 800d39e:	4b9d      	ldr	r3, [pc, #628]	@ (800d614 <_strtod_l+0xaf4>)
 800d3a0:	465a      	mov	r2, fp
 800d3a2:	4013      	ands	r3, r2
 800d3a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d3a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ac:	d81b      	bhi.n	800d3e6 <_strtod_l+0x8c6>
 800d3ae:	0d1b      	lsrs	r3, r3, #20
 800d3b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d3b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d3b8:	4299      	cmp	r1, r3
 800d3ba:	d119      	bne.n	800d3f0 <_strtod_l+0x8d0>
 800d3bc:	4b96      	ldr	r3, [pc, #600]	@ (800d618 <_strtod_l+0xaf8>)
 800d3be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d102      	bne.n	800d3ca <_strtod_l+0x8aa>
 800d3c4:	3101      	adds	r1, #1
 800d3c6:	f43f adce 	beq.w	800cf66 <_strtod_l+0x446>
 800d3ca:	4b92      	ldr	r3, [pc, #584]	@ (800d614 <_strtod_l+0xaf4>)
 800d3cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3ce:	401a      	ands	r2, r3
 800d3d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d3d4:	f04f 0a00 	mov.w	sl, #0
 800d3d8:	9b08      	ldr	r3, [sp, #32]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1b9      	bne.n	800d352 <_strtod_l+0x832>
 800d3de:	e5cd      	b.n	800cf7c <_strtod_l+0x45c>
 800d3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3e4:	e7e8      	b.n	800d3b8 <_strtod_l+0x898>
 800d3e6:	4613      	mov	r3, r2
 800d3e8:	e7e6      	b.n	800d3b8 <_strtod_l+0x898>
 800d3ea:	ea53 030a 	orrs.w	r3, r3, sl
 800d3ee:	d0a2      	beq.n	800d336 <_strtod_l+0x816>
 800d3f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d3f2:	b1db      	cbz	r3, 800d42c <_strtod_l+0x90c>
 800d3f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3f6:	4213      	tst	r3, r2
 800d3f8:	d0ee      	beq.n	800d3d8 <_strtod_l+0x8b8>
 800d3fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3fc:	9a08      	ldr	r2, [sp, #32]
 800d3fe:	4650      	mov	r0, sl
 800d400:	4659      	mov	r1, fp
 800d402:	b1bb      	cbz	r3, 800d434 <_strtod_l+0x914>
 800d404:	f7ff fb6e 	bl	800cae4 <sulp>
 800d408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d40c:	ec53 2b10 	vmov	r2, r3, d0
 800d410:	f7f2 ff3c 	bl	800028c <__adddf3>
 800d414:	4682      	mov	sl, r0
 800d416:	468b      	mov	fp, r1
 800d418:	e7de      	b.n	800d3d8 <_strtod_l+0x8b8>
 800d41a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d41e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d422:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d426:	f04f 3aff 	mov.w	sl, #4294967295
 800d42a:	e7d5      	b.n	800d3d8 <_strtod_l+0x8b8>
 800d42c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d42e:	ea13 0f0a 	tst.w	r3, sl
 800d432:	e7e1      	b.n	800d3f8 <_strtod_l+0x8d8>
 800d434:	f7ff fb56 	bl	800cae4 <sulp>
 800d438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d43c:	ec53 2b10 	vmov	r2, r3, d0
 800d440:	f7f2 ff22 	bl	8000288 <__aeabi_dsub>
 800d444:	2200      	movs	r2, #0
 800d446:	2300      	movs	r3, #0
 800d448:	4682      	mov	sl, r0
 800d44a:	468b      	mov	fp, r1
 800d44c:	f7f3 fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d450:	2800      	cmp	r0, #0
 800d452:	d0c1      	beq.n	800d3d8 <_strtod_l+0x8b8>
 800d454:	e61a      	b.n	800d08c <_strtod_l+0x56c>
 800d456:	4641      	mov	r1, r8
 800d458:	4620      	mov	r0, r4
 800d45a:	f7ff facd 	bl	800c9f8 <__ratio>
 800d45e:	ec57 6b10 	vmov	r6, r7, d0
 800d462:	2200      	movs	r2, #0
 800d464:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d468:	4630      	mov	r0, r6
 800d46a:	4639      	mov	r1, r7
 800d46c:	f7f3 fb40 	bl	8000af0 <__aeabi_dcmple>
 800d470:	2800      	cmp	r0, #0
 800d472:	d06f      	beq.n	800d554 <_strtod_l+0xa34>
 800d474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d476:	2b00      	cmp	r3, #0
 800d478:	d17a      	bne.n	800d570 <_strtod_l+0xa50>
 800d47a:	f1ba 0f00 	cmp.w	sl, #0
 800d47e:	d158      	bne.n	800d532 <_strtod_l+0xa12>
 800d480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d486:	2b00      	cmp	r3, #0
 800d488:	d15a      	bne.n	800d540 <_strtod_l+0xa20>
 800d48a:	4b64      	ldr	r3, [pc, #400]	@ (800d61c <_strtod_l+0xafc>)
 800d48c:	2200      	movs	r2, #0
 800d48e:	4630      	mov	r0, r6
 800d490:	4639      	mov	r1, r7
 800d492:	f7f3 fb23 	bl	8000adc <__aeabi_dcmplt>
 800d496:	2800      	cmp	r0, #0
 800d498:	d159      	bne.n	800d54e <_strtod_l+0xa2e>
 800d49a:	4630      	mov	r0, r6
 800d49c:	4639      	mov	r1, r7
 800d49e:	4b60      	ldr	r3, [pc, #384]	@ (800d620 <_strtod_l+0xb00>)
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f7f3 f8a9 	bl	80005f8 <__aeabi_dmul>
 800d4a6:	4606      	mov	r6, r0
 800d4a8:	460f      	mov	r7, r1
 800d4aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d4ae:	9606      	str	r6, [sp, #24]
 800d4b0:	9307      	str	r3, [sp, #28]
 800d4b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4b6:	4d57      	ldr	r5, [pc, #348]	@ (800d614 <_strtod_l+0xaf4>)
 800d4b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d4bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4be:	401d      	ands	r5, r3
 800d4c0:	4b58      	ldr	r3, [pc, #352]	@ (800d624 <_strtod_l+0xb04>)
 800d4c2:	429d      	cmp	r5, r3
 800d4c4:	f040 80b2 	bne.w	800d62c <_strtod_l+0xb0c>
 800d4c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d4ce:	ec4b ab10 	vmov	d0, sl, fp
 800d4d2:	f7ff f9c9 	bl	800c868 <__ulp>
 800d4d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4da:	ec51 0b10 	vmov	r0, r1, d0
 800d4de:	f7f3 f88b 	bl	80005f8 <__aeabi_dmul>
 800d4e2:	4652      	mov	r2, sl
 800d4e4:	465b      	mov	r3, fp
 800d4e6:	f7f2 fed1 	bl	800028c <__adddf3>
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	4949      	ldr	r1, [pc, #292]	@ (800d614 <_strtod_l+0xaf4>)
 800d4ee:	4a4e      	ldr	r2, [pc, #312]	@ (800d628 <_strtod_l+0xb08>)
 800d4f0:	4019      	ands	r1, r3
 800d4f2:	4291      	cmp	r1, r2
 800d4f4:	4682      	mov	sl, r0
 800d4f6:	d942      	bls.n	800d57e <_strtod_l+0xa5e>
 800d4f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d4fa:	4b47      	ldr	r3, [pc, #284]	@ (800d618 <_strtod_l+0xaf8>)
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d103      	bne.n	800d508 <_strtod_l+0x9e8>
 800d500:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d502:	3301      	adds	r3, #1
 800d504:	f43f ad2f 	beq.w	800cf66 <_strtod_l+0x446>
 800d508:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d618 <_strtod_l+0xaf8>
 800d50c:	f04f 3aff 	mov.w	sl, #4294967295
 800d510:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d512:	9805      	ldr	r0, [sp, #20]
 800d514:	f7fe fe7c 	bl	800c210 <_Bfree>
 800d518:	9805      	ldr	r0, [sp, #20]
 800d51a:	4649      	mov	r1, r9
 800d51c:	f7fe fe78 	bl	800c210 <_Bfree>
 800d520:	9805      	ldr	r0, [sp, #20]
 800d522:	4641      	mov	r1, r8
 800d524:	f7fe fe74 	bl	800c210 <_Bfree>
 800d528:	9805      	ldr	r0, [sp, #20]
 800d52a:	4621      	mov	r1, r4
 800d52c:	f7fe fe70 	bl	800c210 <_Bfree>
 800d530:	e619      	b.n	800d166 <_strtod_l+0x646>
 800d532:	f1ba 0f01 	cmp.w	sl, #1
 800d536:	d103      	bne.n	800d540 <_strtod_l+0xa20>
 800d538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f43f ada6 	beq.w	800d08c <_strtod_l+0x56c>
 800d540:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d5f0 <_strtod_l+0xad0>
 800d544:	4f35      	ldr	r7, [pc, #212]	@ (800d61c <_strtod_l+0xafc>)
 800d546:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d54a:	2600      	movs	r6, #0
 800d54c:	e7b1      	b.n	800d4b2 <_strtod_l+0x992>
 800d54e:	4f34      	ldr	r7, [pc, #208]	@ (800d620 <_strtod_l+0xb00>)
 800d550:	2600      	movs	r6, #0
 800d552:	e7aa      	b.n	800d4aa <_strtod_l+0x98a>
 800d554:	4b32      	ldr	r3, [pc, #200]	@ (800d620 <_strtod_l+0xb00>)
 800d556:	4630      	mov	r0, r6
 800d558:	4639      	mov	r1, r7
 800d55a:	2200      	movs	r2, #0
 800d55c:	f7f3 f84c 	bl	80005f8 <__aeabi_dmul>
 800d560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d562:	4606      	mov	r6, r0
 800d564:	460f      	mov	r7, r1
 800d566:	2b00      	cmp	r3, #0
 800d568:	d09f      	beq.n	800d4aa <_strtod_l+0x98a>
 800d56a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d56e:	e7a0      	b.n	800d4b2 <_strtod_l+0x992>
 800d570:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d5f8 <_strtod_l+0xad8>
 800d574:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d578:	ec57 6b17 	vmov	r6, r7, d7
 800d57c:	e799      	b.n	800d4b2 <_strtod_l+0x992>
 800d57e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d582:	9b08      	ldr	r3, [sp, #32]
 800d584:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d1c1      	bne.n	800d510 <_strtod_l+0x9f0>
 800d58c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d590:	0d1b      	lsrs	r3, r3, #20
 800d592:	051b      	lsls	r3, r3, #20
 800d594:	429d      	cmp	r5, r3
 800d596:	d1bb      	bne.n	800d510 <_strtod_l+0x9f0>
 800d598:	4630      	mov	r0, r6
 800d59a:	4639      	mov	r1, r7
 800d59c:	f7f3 fb8c 	bl	8000cb8 <__aeabi_d2lz>
 800d5a0:	f7f2 fffc 	bl	800059c <__aeabi_l2d>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	4639      	mov	r1, r7
 800d5ac:	f7f2 fe6c 	bl	8000288 <__aeabi_dsub>
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d5b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d5bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5be:	ea46 060a 	orr.w	r6, r6, sl
 800d5c2:	431e      	orrs	r6, r3
 800d5c4:	d06f      	beq.n	800d6a6 <_strtod_l+0xb86>
 800d5c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d600 <_strtod_l+0xae0>)
 800d5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5cc:	f7f3 fa86 	bl	8000adc <__aeabi_dcmplt>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	f47f acd3 	bne.w	800cf7c <_strtod_l+0x45c>
 800d5d6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d608 <_strtod_l+0xae8>)
 800d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5e0:	f7f3 fa9a 	bl	8000b18 <__aeabi_dcmpgt>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d093      	beq.n	800d510 <_strtod_l+0x9f0>
 800d5e8:	e4c8      	b.n	800cf7c <_strtod_l+0x45c>
 800d5ea:	bf00      	nop
 800d5ec:	f3af 8000 	nop.w
 800d5f0:	00000000 	.word	0x00000000
 800d5f4:	bff00000 	.word	0xbff00000
 800d5f8:	00000000 	.word	0x00000000
 800d5fc:	3ff00000 	.word	0x3ff00000
 800d600:	94a03595 	.word	0x94a03595
 800d604:	3fdfffff 	.word	0x3fdfffff
 800d608:	35afe535 	.word	0x35afe535
 800d60c:	3fe00000 	.word	0x3fe00000
 800d610:	000fffff 	.word	0x000fffff
 800d614:	7ff00000 	.word	0x7ff00000
 800d618:	7fefffff 	.word	0x7fefffff
 800d61c:	3ff00000 	.word	0x3ff00000
 800d620:	3fe00000 	.word	0x3fe00000
 800d624:	7fe00000 	.word	0x7fe00000
 800d628:	7c9fffff 	.word	0x7c9fffff
 800d62c:	9b08      	ldr	r3, [sp, #32]
 800d62e:	b323      	cbz	r3, 800d67a <_strtod_l+0xb5a>
 800d630:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d634:	d821      	bhi.n	800d67a <_strtod_l+0xb5a>
 800d636:	a328      	add	r3, pc, #160	@ (adr r3, 800d6d8 <_strtod_l+0xbb8>)
 800d638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63c:	4630      	mov	r0, r6
 800d63e:	4639      	mov	r1, r7
 800d640:	f7f3 fa56 	bl	8000af0 <__aeabi_dcmple>
 800d644:	b1a0      	cbz	r0, 800d670 <_strtod_l+0xb50>
 800d646:	4639      	mov	r1, r7
 800d648:	4630      	mov	r0, r6
 800d64a:	f7f3 faad 	bl	8000ba8 <__aeabi_d2uiz>
 800d64e:	2801      	cmp	r0, #1
 800d650:	bf38      	it	cc
 800d652:	2001      	movcc	r0, #1
 800d654:	f7f2 ff56 	bl	8000504 <__aeabi_ui2d>
 800d658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d65a:	4606      	mov	r6, r0
 800d65c:	460f      	mov	r7, r1
 800d65e:	b9fb      	cbnz	r3, 800d6a0 <_strtod_l+0xb80>
 800d660:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d664:	9014      	str	r0, [sp, #80]	@ 0x50
 800d666:	9315      	str	r3, [sp, #84]	@ 0x54
 800d668:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d66c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d670:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d672:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d676:	1b5b      	subs	r3, r3, r5
 800d678:	9311      	str	r3, [sp, #68]	@ 0x44
 800d67a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d67e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d682:	f7ff f8f1 	bl	800c868 <__ulp>
 800d686:	4650      	mov	r0, sl
 800d688:	ec53 2b10 	vmov	r2, r3, d0
 800d68c:	4659      	mov	r1, fp
 800d68e:	f7f2 ffb3 	bl	80005f8 <__aeabi_dmul>
 800d692:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d696:	f7f2 fdf9 	bl	800028c <__adddf3>
 800d69a:	4682      	mov	sl, r0
 800d69c:	468b      	mov	fp, r1
 800d69e:	e770      	b.n	800d582 <_strtod_l+0xa62>
 800d6a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d6a4:	e7e0      	b.n	800d668 <_strtod_l+0xb48>
 800d6a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d6e0 <_strtod_l+0xbc0>)
 800d6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ac:	f7f3 fa16 	bl	8000adc <__aeabi_dcmplt>
 800d6b0:	e798      	b.n	800d5e4 <_strtod_l+0xac4>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	930e      	str	r3, [sp, #56]	@ 0x38
 800d6b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d6b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6ba:	6013      	str	r3, [r2, #0]
 800d6bc:	f7ff ba6d 	b.w	800cb9a <_strtod_l+0x7a>
 800d6c0:	2a65      	cmp	r2, #101	@ 0x65
 800d6c2:	f43f ab68 	beq.w	800cd96 <_strtod_l+0x276>
 800d6c6:	2a45      	cmp	r2, #69	@ 0x45
 800d6c8:	f43f ab65 	beq.w	800cd96 <_strtod_l+0x276>
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	f7ff bba0 	b.w	800ce12 <_strtod_l+0x2f2>
 800d6d2:	bf00      	nop
 800d6d4:	f3af 8000 	nop.w
 800d6d8:	ffc00000 	.word	0xffc00000
 800d6dc:	41dfffff 	.word	0x41dfffff
 800d6e0:	94a03595 	.word	0x94a03595
 800d6e4:	3fcfffff 	.word	0x3fcfffff

0800d6e8 <_strtod_r>:
 800d6e8:	4b01      	ldr	r3, [pc, #4]	@ (800d6f0 <_strtod_r+0x8>)
 800d6ea:	f7ff ba19 	b.w	800cb20 <_strtod_l>
 800d6ee:	bf00      	nop
 800d6f0:	20000158 	.word	0x20000158

0800d6f4 <_strtol_l.isra.0>:
 800d6f4:	2b24      	cmp	r3, #36	@ 0x24
 800d6f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6fa:	4686      	mov	lr, r0
 800d6fc:	4690      	mov	r8, r2
 800d6fe:	d801      	bhi.n	800d704 <_strtol_l.isra.0+0x10>
 800d700:	2b01      	cmp	r3, #1
 800d702:	d106      	bne.n	800d712 <_strtol_l.isra.0+0x1e>
 800d704:	f7fd fdb6 	bl	800b274 <__errno>
 800d708:	2316      	movs	r3, #22
 800d70a:	6003      	str	r3, [r0, #0]
 800d70c:	2000      	movs	r0, #0
 800d70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d712:	4834      	ldr	r0, [pc, #208]	@ (800d7e4 <_strtol_l.isra.0+0xf0>)
 800d714:	460d      	mov	r5, r1
 800d716:	462a      	mov	r2, r5
 800d718:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d71c:	5d06      	ldrb	r6, [r0, r4]
 800d71e:	f016 0608 	ands.w	r6, r6, #8
 800d722:	d1f8      	bne.n	800d716 <_strtol_l.isra.0+0x22>
 800d724:	2c2d      	cmp	r4, #45	@ 0x2d
 800d726:	d110      	bne.n	800d74a <_strtol_l.isra.0+0x56>
 800d728:	782c      	ldrb	r4, [r5, #0]
 800d72a:	2601      	movs	r6, #1
 800d72c:	1c95      	adds	r5, r2, #2
 800d72e:	f033 0210 	bics.w	r2, r3, #16
 800d732:	d115      	bne.n	800d760 <_strtol_l.isra.0+0x6c>
 800d734:	2c30      	cmp	r4, #48	@ 0x30
 800d736:	d10d      	bne.n	800d754 <_strtol_l.isra.0+0x60>
 800d738:	782a      	ldrb	r2, [r5, #0]
 800d73a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d73e:	2a58      	cmp	r2, #88	@ 0x58
 800d740:	d108      	bne.n	800d754 <_strtol_l.isra.0+0x60>
 800d742:	786c      	ldrb	r4, [r5, #1]
 800d744:	3502      	adds	r5, #2
 800d746:	2310      	movs	r3, #16
 800d748:	e00a      	b.n	800d760 <_strtol_l.isra.0+0x6c>
 800d74a:	2c2b      	cmp	r4, #43	@ 0x2b
 800d74c:	bf04      	itt	eq
 800d74e:	782c      	ldrbeq	r4, [r5, #0]
 800d750:	1c95      	addeq	r5, r2, #2
 800d752:	e7ec      	b.n	800d72e <_strtol_l.isra.0+0x3a>
 800d754:	2b00      	cmp	r3, #0
 800d756:	d1f6      	bne.n	800d746 <_strtol_l.isra.0+0x52>
 800d758:	2c30      	cmp	r4, #48	@ 0x30
 800d75a:	bf14      	ite	ne
 800d75c:	230a      	movne	r3, #10
 800d75e:	2308      	moveq	r3, #8
 800d760:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d764:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d768:	2200      	movs	r2, #0
 800d76a:	fbbc f9f3 	udiv	r9, ip, r3
 800d76e:	4610      	mov	r0, r2
 800d770:	fb03 ca19 	mls	sl, r3, r9, ip
 800d774:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d778:	2f09      	cmp	r7, #9
 800d77a:	d80f      	bhi.n	800d79c <_strtol_l.isra.0+0xa8>
 800d77c:	463c      	mov	r4, r7
 800d77e:	42a3      	cmp	r3, r4
 800d780:	dd1b      	ble.n	800d7ba <_strtol_l.isra.0+0xc6>
 800d782:	1c57      	adds	r7, r2, #1
 800d784:	d007      	beq.n	800d796 <_strtol_l.isra.0+0xa2>
 800d786:	4581      	cmp	r9, r0
 800d788:	d314      	bcc.n	800d7b4 <_strtol_l.isra.0+0xc0>
 800d78a:	d101      	bne.n	800d790 <_strtol_l.isra.0+0x9c>
 800d78c:	45a2      	cmp	sl, r4
 800d78e:	db11      	blt.n	800d7b4 <_strtol_l.isra.0+0xc0>
 800d790:	fb00 4003 	mla	r0, r0, r3, r4
 800d794:	2201      	movs	r2, #1
 800d796:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d79a:	e7eb      	b.n	800d774 <_strtol_l.isra.0+0x80>
 800d79c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d7a0:	2f19      	cmp	r7, #25
 800d7a2:	d801      	bhi.n	800d7a8 <_strtol_l.isra.0+0xb4>
 800d7a4:	3c37      	subs	r4, #55	@ 0x37
 800d7a6:	e7ea      	b.n	800d77e <_strtol_l.isra.0+0x8a>
 800d7a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d7ac:	2f19      	cmp	r7, #25
 800d7ae:	d804      	bhi.n	800d7ba <_strtol_l.isra.0+0xc6>
 800d7b0:	3c57      	subs	r4, #87	@ 0x57
 800d7b2:	e7e4      	b.n	800d77e <_strtol_l.isra.0+0x8a>
 800d7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b8:	e7ed      	b.n	800d796 <_strtol_l.isra.0+0xa2>
 800d7ba:	1c53      	adds	r3, r2, #1
 800d7bc:	d108      	bne.n	800d7d0 <_strtol_l.isra.0+0xdc>
 800d7be:	2322      	movs	r3, #34	@ 0x22
 800d7c0:	f8ce 3000 	str.w	r3, [lr]
 800d7c4:	4660      	mov	r0, ip
 800d7c6:	f1b8 0f00 	cmp.w	r8, #0
 800d7ca:	d0a0      	beq.n	800d70e <_strtol_l.isra.0+0x1a>
 800d7cc:	1e69      	subs	r1, r5, #1
 800d7ce:	e006      	b.n	800d7de <_strtol_l.isra.0+0xea>
 800d7d0:	b106      	cbz	r6, 800d7d4 <_strtol_l.isra.0+0xe0>
 800d7d2:	4240      	negs	r0, r0
 800d7d4:	f1b8 0f00 	cmp.w	r8, #0
 800d7d8:	d099      	beq.n	800d70e <_strtol_l.isra.0+0x1a>
 800d7da:	2a00      	cmp	r2, #0
 800d7dc:	d1f6      	bne.n	800d7cc <_strtol_l.isra.0+0xd8>
 800d7de:	f8c8 1000 	str.w	r1, [r8]
 800d7e2:	e794      	b.n	800d70e <_strtol_l.isra.0+0x1a>
 800d7e4:	0800ee19 	.word	0x0800ee19

0800d7e8 <_strtol_r>:
 800d7e8:	f7ff bf84 	b.w	800d6f4 <_strtol_l.isra.0>

0800d7ec <__ssputs_r>:
 800d7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7f0:	688e      	ldr	r6, [r1, #8]
 800d7f2:	461f      	mov	r7, r3
 800d7f4:	42be      	cmp	r6, r7
 800d7f6:	680b      	ldr	r3, [r1, #0]
 800d7f8:	4682      	mov	sl, r0
 800d7fa:	460c      	mov	r4, r1
 800d7fc:	4690      	mov	r8, r2
 800d7fe:	d82d      	bhi.n	800d85c <__ssputs_r+0x70>
 800d800:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d804:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d808:	d026      	beq.n	800d858 <__ssputs_r+0x6c>
 800d80a:	6965      	ldr	r5, [r4, #20]
 800d80c:	6909      	ldr	r1, [r1, #16]
 800d80e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d812:	eba3 0901 	sub.w	r9, r3, r1
 800d816:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d81a:	1c7b      	adds	r3, r7, #1
 800d81c:	444b      	add	r3, r9
 800d81e:	106d      	asrs	r5, r5, #1
 800d820:	429d      	cmp	r5, r3
 800d822:	bf38      	it	cc
 800d824:	461d      	movcc	r5, r3
 800d826:	0553      	lsls	r3, r2, #21
 800d828:	d527      	bpl.n	800d87a <__ssputs_r+0x8e>
 800d82a:	4629      	mov	r1, r5
 800d82c:	f7fe fc24 	bl	800c078 <_malloc_r>
 800d830:	4606      	mov	r6, r0
 800d832:	b360      	cbz	r0, 800d88e <__ssputs_r+0xa2>
 800d834:	6921      	ldr	r1, [r4, #16]
 800d836:	464a      	mov	r2, r9
 800d838:	f000 fa18 	bl	800dc6c <memcpy>
 800d83c:	89a3      	ldrh	r3, [r4, #12]
 800d83e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d846:	81a3      	strh	r3, [r4, #12]
 800d848:	6126      	str	r6, [r4, #16]
 800d84a:	6165      	str	r5, [r4, #20]
 800d84c:	444e      	add	r6, r9
 800d84e:	eba5 0509 	sub.w	r5, r5, r9
 800d852:	6026      	str	r6, [r4, #0]
 800d854:	60a5      	str	r5, [r4, #8]
 800d856:	463e      	mov	r6, r7
 800d858:	42be      	cmp	r6, r7
 800d85a:	d900      	bls.n	800d85e <__ssputs_r+0x72>
 800d85c:	463e      	mov	r6, r7
 800d85e:	6820      	ldr	r0, [r4, #0]
 800d860:	4632      	mov	r2, r6
 800d862:	4641      	mov	r1, r8
 800d864:	f000 f9c6 	bl	800dbf4 <memmove>
 800d868:	68a3      	ldr	r3, [r4, #8]
 800d86a:	1b9b      	subs	r3, r3, r6
 800d86c:	60a3      	str	r3, [r4, #8]
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	4433      	add	r3, r6
 800d872:	6023      	str	r3, [r4, #0]
 800d874:	2000      	movs	r0, #0
 800d876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d87a:	462a      	mov	r2, r5
 800d87c:	f000 fd89 	bl	800e392 <_realloc_r>
 800d880:	4606      	mov	r6, r0
 800d882:	2800      	cmp	r0, #0
 800d884:	d1e0      	bne.n	800d848 <__ssputs_r+0x5c>
 800d886:	6921      	ldr	r1, [r4, #16]
 800d888:	4650      	mov	r0, sl
 800d88a:	f7fe fb81 	bl	800bf90 <_free_r>
 800d88e:	230c      	movs	r3, #12
 800d890:	f8ca 3000 	str.w	r3, [sl]
 800d894:	89a3      	ldrh	r3, [r4, #12]
 800d896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d89a:	81a3      	strh	r3, [r4, #12]
 800d89c:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a0:	e7e9      	b.n	800d876 <__ssputs_r+0x8a>
	...

0800d8a4 <_svfiprintf_r>:
 800d8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a8:	4698      	mov	r8, r3
 800d8aa:	898b      	ldrh	r3, [r1, #12]
 800d8ac:	061b      	lsls	r3, r3, #24
 800d8ae:	b09d      	sub	sp, #116	@ 0x74
 800d8b0:	4607      	mov	r7, r0
 800d8b2:	460d      	mov	r5, r1
 800d8b4:	4614      	mov	r4, r2
 800d8b6:	d510      	bpl.n	800d8da <_svfiprintf_r+0x36>
 800d8b8:	690b      	ldr	r3, [r1, #16]
 800d8ba:	b973      	cbnz	r3, 800d8da <_svfiprintf_r+0x36>
 800d8bc:	2140      	movs	r1, #64	@ 0x40
 800d8be:	f7fe fbdb 	bl	800c078 <_malloc_r>
 800d8c2:	6028      	str	r0, [r5, #0]
 800d8c4:	6128      	str	r0, [r5, #16]
 800d8c6:	b930      	cbnz	r0, 800d8d6 <_svfiprintf_r+0x32>
 800d8c8:	230c      	movs	r3, #12
 800d8ca:	603b      	str	r3, [r7, #0]
 800d8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d0:	b01d      	add	sp, #116	@ 0x74
 800d8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d6:	2340      	movs	r3, #64	@ 0x40
 800d8d8:	616b      	str	r3, [r5, #20]
 800d8da:	2300      	movs	r3, #0
 800d8dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8de:	2320      	movs	r3, #32
 800d8e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8e8:	2330      	movs	r3, #48	@ 0x30
 800d8ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800da88 <_svfiprintf_r+0x1e4>
 800d8ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8f2:	f04f 0901 	mov.w	r9, #1
 800d8f6:	4623      	mov	r3, r4
 800d8f8:	469a      	mov	sl, r3
 800d8fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8fe:	b10a      	cbz	r2, 800d904 <_svfiprintf_r+0x60>
 800d900:	2a25      	cmp	r2, #37	@ 0x25
 800d902:	d1f9      	bne.n	800d8f8 <_svfiprintf_r+0x54>
 800d904:	ebba 0b04 	subs.w	fp, sl, r4
 800d908:	d00b      	beq.n	800d922 <_svfiprintf_r+0x7e>
 800d90a:	465b      	mov	r3, fp
 800d90c:	4622      	mov	r2, r4
 800d90e:	4629      	mov	r1, r5
 800d910:	4638      	mov	r0, r7
 800d912:	f7ff ff6b 	bl	800d7ec <__ssputs_r>
 800d916:	3001      	adds	r0, #1
 800d918:	f000 80a7 	beq.w	800da6a <_svfiprintf_r+0x1c6>
 800d91c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d91e:	445a      	add	r2, fp
 800d920:	9209      	str	r2, [sp, #36]	@ 0x24
 800d922:	f89a 3000 	ldrb.w	r3, [sl]
 800d926:	2b00      	cmp	r3, #0
 800d928:	f000 809f 	beq.w	800da6a <_svfiprintf_r+0x1c6>
 800d92c:	2300      	movs	r3, #0
 800d92e:	f04f 32ff 	mov.w	r2, #4294967295
 800d932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d936:	f10a 0a01 	add.w	sl, sl, #1
 800d93a:	9304      	str	r3, [sp, #16]
 800d93c:	9307      	str	r3, [sp, #28]
 800d93e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d942:	931a      	str	r3, [sp, #104]	@ 0x68
 800d944:	4654      	mov	r4, sl
 800d946:	2205      	movs	r2, #5
 800d948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d94c:	484e      	ldr	r0, [pc, #312]	@ (800da88 <_svfiprintf_r+0x1e4>)
 800d94e:	f7f2 fc3f 	bl	80001d0 <memchr>
 800d952:	9a04      	ldr	r2, [sp, #16]
 800d954:	b9d8      	cbnz	r0, 800d98e <_svfiprintf_r+0xea>
 800d956:	06d0      	lsls	r0, r2, #27
 800d958:	bf44      	itt	mi
 800d95a:	2320      	movmi	r3, #32
 800d95c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d960:	0711      	lsls	r1, r2, #28
 800d962:	bf44      	itt	mi
 800d964:	232b      	movmi	r3, #43	@ 0x2b
 800d966:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d96a:	f89a 3000 	ldrb.w	r3, [sl]
 800d96e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d970:	d015      	beq.n	800d99e <_svfiprintf_r+0xfa>
 800d972:	9a07      	ldr	r2, [sp, #28]
 800d974:	4654      	mov	r4, sl
 800d976:	2000      	movs	r0, #0
 800d978:	f04f 0c0a 	mov.w	ip, #10
 800d97c:	4621      	mov	r1, r4
 800d97e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d982:	3b30      	subs	r3, #48	@ 0x30
 800d984:	2b09      	cmp	r3, #9
 800d986:	d94b      	bls.n	800da20 <_svfiprintf_r+0x17c>
 800d988:	b1b0      	cbz	r0, 800d9b8 <_svfiprintf_r+0x114>
 800d98a:	9207      	str	r2, [sp, #28]
 800d98c:	e014      	b.n	800d9b8 <_svfiprintf_r+0x114>
 800d98e:	eba0 0308 	sub.w	r3, r0, r8
 800d992:	fa09 f303 	lsl.w	r3, r9, r3
 800d996:	4313      	orrs	r3, r2
 800d998:	9304      	str	r3, [sp, #16]
 800d99a:	46a2      	mov	sl, r4
 800d99c:	e7d2      	b.n	800d944 <_svfiprintf_r+0xa0>
 800d99e:	9b03      	ldr	r3, [sp, #12]
 800d9a0:	1d19      	adds	r1, r3, #4
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	9103      	str	r1, [sp, #12]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	bfbb      	ittet	lt
 800d9aa:	425b      	neglt	r3, r3
 800d9ac:	f042 0202 	orrlt.w	r2, r2, #2
 800d9b0:	9307      	strge	r3, [sp, #28]
 800d9b2:	9307      	strlt	r3, [sp, #28]
 800d9b4:	bfb8      	it	lt
 800d9b6:	9204      	strlt	r2, [sp, #16]
 800d9b8:	7823      	ldrb	r3, [r4, #0]
 800d9ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9bc:	d10a      	bne.n	800d9d4 <_svfiprintf_r+0x130>
 800d9be:	7863      	ldrb	r3, [r4, #1]
 800d9c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9c2:	d132      	bne.n	800da2a <_svfiprintf_r+0x186>
 800d9c4:	9b03      	ldr	r3, [sp, #12]
 800d9c6:	1d1a      	adds	r2, r3, #4
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	9203      	str	r2, [sp, #12]
 800d9cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9d0:	3402      	adds	r4, #2
 800d9d2:	9305      	str	r3, [sp, #20]
 800d9d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800da98 <_svfiprintf_r+0x1f4>
 800d9d8:	7821      	ldrb	r1, [r4, #0]
 800d9da:	2203      	movs	r2, #3
 800d9dc:	4650      	mov	r0, sl
 800d9de:	f7f2 fbf7 	bl	80001d0 <memchr>
 800d9e2:	b138      	cbz	r0, 800d9f4 <_svfiprintf_r+0x150>
 800d9e4:	9b04      	ldr	r3, [sp, #16]
 800d9e6:	eba0 000a 	sub.w	r0, r0, sl
 800d9ea:	2240      	movs	r2, #64	@ 0x40
 800d9ec:	4082      	lsls	r2, r0
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	3401      	adds	r4, #1
 800d9f2:	9304      	str	r3, [sp, #16]
 800d9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f8:	4824      	ldr	r0, [pc, #144]	@ (800da8c <_svfiprintf_r+0x1e8>)
 800d9fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d9fe:	2206      	movs	r2, #6
 800da00:	f7f2 fbe6 	bl	80001d0 <memchr>
 800da04:	2800      	cmp	r0, #0
 800da06:	d036      	beq.n	800da76 <_svfiprintf_r+0x1d2>
 800da08:	4b21      	ldr	r3, [pc, #132]	@ (800da90 <_svfiprintf_r+0x1ec>)
 800da0a:	bb1b      	cbnz	r3, 800da54 <_svfiprintf_r+0x1b0>
 800da0c:	9b03      	ldr	r3, [sp, #12]
 800da0e:	3307      	adds	r3, #7
 800da10:	f023 0307 	bic.w	r3, r3, #7
 800da14:	3308      	adds	r3, #8
 800da16:	9303      	str	r3, [sp, #12]
 800da18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da1a:	4433      	add	r3, r6
 800da1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800da1e:	e76a      	b.n	800d8f6 <_svfiprintf_r+0x52>
 800da20:	fb0c 3202 	mla	r2, ip, r2, r3
 800da24:	460c      	mov	r4, r1
 800da26:	2001      	movs	r0, #1
 800da28:	e7a8      	b.n	800d97c <_svfiprintf_r+0xd8>
 800da2a:	2300      	movs	r3, #0
 800da2c:	3401      	adds	r4, #1
 800da2e:	9305      	str	r3, [sp, #20]
 800da30:	4619      	mov	r1, r3
 800da32:	f04f 0c0a 	mov.w	ip, #10
 800da36:	4620      	mov	r0, r4
 800da38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da3c:	3a30      	subs	r2, #48	@ 0x30
 800da3e:	2a09      	cmp	r2, #9
 800da40:	d903      	bls.n	800da4a <_svfiprintf_r+0x1a6>
 800da42:	2b00      	cmp	r3, #0
 800da44:	d0c6      	beq.n	800d9d4 <_svfiprintf_r+0x130>
 800da46:	9105      	str	r1, [sp, #20]
 800da48:	e7c4      	b.n	800d9d4 <_svfiprintf_r+0x130>
 800da4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800da4e:	4604      	mov	r4, r0
 800da50:	2301      	movs	r3, #1
 800da52:	e7f0      	b.n	800da36 <_svfiprintf_r+0x192>
 800da54:	ab03      	add	r3, sp, #12
 800da56:	9300      	str	r3, [sp, #0]
 800da58:	462a      	mov	r2, r5
 800da5a:	4b0e      	ldr	r3, [pc, #56]	@ (800da94 <_svfiprintf_r+0x1f0>)
 800da5c:	a904      	add	r1, sp, #16
 800da5e:	4638      	mov	r0, r7
 800da60:	f7fc fc82 	bl	800a368 <_printf_float>
 800da64:	1c42      	adds	r2, r0, #1
 800da66:	4606      	mov	r6, r0
 800da68:	d1d6      	bne.n	800da18 <_svfiprintf_r+0x174>
 800da6a:	89ab      	ldrh	r3, [r5, #12]
 800da6c:	065b      	lsls	r3, r3, #25
 800da6e:	f53f af2d 	bmi.w	800d8cc <_svfiprintf_r+0x28>
 800da72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da74:	e72c      	b.n	800d8d0 <_svfiprintf_r+0x2c>
 800da76:	ab03      	add	r3, sp, #12
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	462a      	mov	r2, r5
 800da7c:	4b05      	ldr	r3, [pc, #20]	@ (800da94 <_svfiprintf_r+0x1f0>)
 800da7e:	a904      	add	r1, sp, #16
 800da80:	4638      	mov	r0, r7
 800da82:	f7fc ff09 	bl	800a898 <_printf_i>
 800da86:	e7ed      	b.n	800da64 <_svfiprintf_r+0x1c0>
 800da88:	0800ec11 	.word	0x0800ec11
 800da8c:	0800ec1b 	.word	0x0800ec1b
 800da90:	0800a369 	.word	0x0800a369
 800da94:	0800d7ed 	.word	0x0800d7ed
 800da98:	0800ec17 	.word	0x0800ec17

0800da9c <__sflush_r>:
 800da9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800daa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa4:	0716      	lsls	r6, r2, #28
 800daa6:	4605      	mov	r5, r0
 800daa8:	460c      	mov	r4, r1
 800daaa:	d454      	bmi.n	800db56 <__sflush_r+0xba>
 800daac:	684b      	ldr	r3, [r1, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	dc02      	bgt.n	800dab8 <__sflush_r+0x1c>
 800dab2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	dd48      	ble.n	800db4a <__sflush_r+0xae>
 800dab8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800daba:	2e00      	cmp	r6, #0
 800dabc:	d045      	beq.n	800db4a <__sflush_r+0xae>
 800dabe:	2300      	movs	r3, #0
 800dac0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dac4:	682f      	ldr	r7, [r5, #0]
 800dac6:	6a21      	ldr	r1, [r4, #32]
 800dac8:	602b      	str	r3, [r5, #0]
 800daca:	d030      	beq.n	800db2e <__sflush_r+0x92>
 800dacc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dace:	89a3      	ldrh	r3, [r4, #12]
 800dad0:	0759      	lsls	r1, r3, #29
 800dad2:	d505      	bpl.n	800dae0 <__sflush_r+0x44>
 800dad4:	6863      	ldr	r3, [r4, #4]
 800dad6:	1ad2      	subs	r2, r2, r3
 800dad8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dada:	b10b      	cbz	r3, 800dae0 <__sflush_r+0x44>
 800dadc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dade:	1ad2      	subs	r2, r2, r3
 800dae0:	2300      	movs	r3, #0
 800dae2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dae4:	6a21      	ldr	r1, [r4, #32]
 800dae6:	4628      	mov	r0, r5
 800dae8:	47b0      	blx	r6
 800daea:	1c43      	adds	r3, r0, #1
 800daec:	89a3      	ldrh	r3, [r4, #12]
 800daee:	d106      	bne.n	800dafe <__sflush_r+0x62>
 800daf0:	6829      	ldr	r1, [r5, #0]
 800daf2:	291d      	cmp	r1, #29
 800daf4:	d82b      	bhi.n	800db4e <__sflush_r+0xb2>
 800daf6:	4a2a      	ldr	r2, [pc, #168]	@ (800dba0 <__sflush_r+0x104>)
 800daf8:	40ca      	lsrs	r2, r1
 800dafa:	07d6      	lsls	r6, r2, #31
 800dafc:	d527      	bpl.n	800db4e <__sflush_r+0xb2>
 800dafe:	2200      	movs	r2, #0
 800db00:	6062      	str	r2, [r4, #4]
 800db02:	04d9      	lsls	r1, r3, #19
 800db04:	6922      	ldr	r2, [r4, #16]
 800db06:	6022      	str	r2, [r4, #0]
 800db08:	d504      	bpl.n	800db14 <__sflush_r+0x78>
 800db0a:	1c42      	adds	r2, r0, #1
 800db0c:	d101      	bne.n	800db12 <__sflush_r+0x76>
 800db0e:	682b      	ldr	r3, [r5, #0]
 800db10:	b903      	cbnz	r3, 800db14 <__sflush_r+0x78>
 800db12:	6560      	str	r0, [r4, #84]	@ 0x54
 800db14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db16:	602f      	str	r7, [r5, #0]
 800db18:	b1b9      	cbz	r1, 800db4a <__sflush_r+0xae>
 800db1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db1e:	4299      	cmp	r1, r3
 800db20:	d002      	beq.n	800db28 <__sflush_r+0x8c>
 800db22:	4628      	mov	r0, r5
 800db24:	f7fe fa34 	bl	800bf90 <_free_r>
 800db28:	2300      	movs	r3, #0
 800db2a:	6363      	str	r3, [r4, #52]	@ 0x34
 800db2c:	e00d      	b.n	800db4a <__sflush_r+0xae>
 800db2e:	2301      	movs	r3, #1
 800db30:	4628      	mov	r0, r5
 800db32:	47b0      	blx	r6
 800db34:	4602      	mov	r2, r0
 800db36:	1c50      	adds	r0, r2, #1
 800db38:	d1c9      	bne.n	800dace <__sflush_r+0x32>
 800db3a:	682b      	ldr	r3, [r5, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d0c6      	beq.n	800dace <__sflush_r+0x32>
 800db40:	2b1d      	cmp	r3, #29
 800db42:	d001      	beq.n	800db48 <__sflush_r+0xac>
 800db44:	2b16      	cmp	r3, #22
 800db46:	d11e      	bne.n	800db86 <__sflush_r+0xea>
 800db48:	602f      	str	r7, [r5, #0]
 800db4a:	2000      	movs	r0, #0
 800db4c:	e022      	b.n	800db94 <__sflush_r+0xf8>
 800db4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db52:	b21b      	sxth	r3, r3
 800db54:	e01b      	b.n	800db8e <__sflush_r+0xf2>
 800db56:	690f      	ldr	r7, [r1, #16]
 800db58:	2f00      	cmp	r7, #0
 800db5a:	d0f6      	beq.n	800db4a <__sflush_r+0xae>
 800db5c:	0793      	lsls	r3, r2, #30
 800db5e:	680e      	ldr	r6, [r1, #0]
 800db60:	bf08      	it	eq
 800db62:	694b      	ldreq	r3, [r1, #20]
 800db64:	600f      	str	r7, [r1, #0]
 800db66:	bf18      	it	ne
 800db68:	2300      	movne	r3, #0
 800db6a:	eba6 0807 	sub.w	r8, r6, r7
 800db6e:	608b      	str	r3, [r1, #8]
 800db70:	f1b8 0f00 	cmp.w	r8, #0
 800db74:	dde9      	ble.n	800db4a <__sflush_r+0xae>
 800db76:	6a21      	ldr	r1, [r4, #32]
 800db78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800db7a:	4643      	mov	r3, r8
 800db7c:	463a      	mov	r2, r7
 800db7e:	4628      	mov	r0, r5
 800db80:	47b0      	blx	r6
 800db82:	2800      	cmp	r0, #0
 800db84:	dc08      	bgt.n	800db98 <__sflush_r+0xfc>
 800db86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db8e:	81a3      	strh	r3, [r4, #12]
 800db90:	f04f 30ff 	mov.w	r0, #4294967295
 800db94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db98:	4407      	add	r7, r0
 800db9a:	eba8 0800 	sub.w	r8, r8, r0
 800db9e:	e7e7      	b.n	800db70 <__sflush_r+0xd4>
 800dba0:	20400001 	.word	0x20400001

0800dba4 <_fflush_r>:
 800dba4:	b538      	push	{r3, r4, r5, lr}
 800dba6:	690b      	ldr	r3, [r1, #16]
 800dba8:	4605      	mov	r5, r0
 800dbaa:	460c      	mov	r4, r1
 800dbac:	b913      	cbnz	r3, 800dbb4 <_fflush_r+0x10>
 800dbae:	2500      	movs	r5, #0
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	bd38      	pop	{r3, r4, r5, pc}
 800dbb4:	b118      	cbz	r0, 800dbbe <_fflush_r+0x1a>
 800dbb6:	6a03      	ldr	r3, [r0, #32]
 800dbb8:	b90b      	cbnz	r3, 800dbbe <_fflush_r+0x1a>
 800dbba:	f7fd fa25 	bl	800b008 <__sinit>
 800dbbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d0f3      	beq.n	800dbae <_fflush_r+0xa>
 800dbc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dbc8:	07d0      	lsls	r0, r2, #31
 800dbca:	d404      	bmi.n	800dbd6 <_fflush_r+0x32>
 800dbcc:	0599      	lsls	r1, r3, #22
 800dbce:	d402      	bmi.n	800dbd6 <_fflush_r+0x32>
 800dbd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbd2:	f7fd fb7a 	bl	800b2ca <__retarget_lock_acquire_recursive>
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	4621      	mov	r1, r4
 800dbda:	f7ff ff5f 	bl	800da9c <__sflush_r>
 800dbde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbe0:	07da      	lsls	r2, r3, #31
 800dbe2:	4605      	mov	r5, r0
 800dbe4:	d4e4      	bmi.n	800dbb0 <_fflush_r+0xc>
 800dbe6:	89a3      	ldrh	r3, [r4, #12]
 800dbe8:	059b      	lsls	r3, r3, #22
 800dbea:	d4e1      	bmi.n	800dbb0 <_fflush_r+0xc>
 800dbec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbee:	f7fd fb6d 	bl	800b2cc <__retarget_lock_release_recursive>
 800dbf2:	e7dd      	b.n	800dbb0 <_fflush_r+0xc>

0800dbf4 <memmove>:
 800dbf4:	4288      	cmp	r0, r1
 800dbf6:	b510      	push	{r4, lr}
 800dbf8:	eb01 0402 	add.w	r4, r1, r2
 800dbfc:	d902      	bls.n	800dc04 <memmove+0x10>
 800dbfe:	4284      	cmp	r4, r0
 800dc00:	4623      	mov	r3, r4
 800dc02:	d807      	bhi.n	800dc14 <memmove+0x20>
 800dc04:	1e43      	subs	r3, r0, #1
 800dc06:	42a1      	cmp	r1, r4
 800dc08:	d008      	beq.n	800dc1c <memmove+0x28>
 800dc0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc12:	e7f8      	b.n	800dc06 <memmove+0x12>
 800dc14:	4402      	add	r2, r0
 800dc16:	4601      	mov	r1, r0
 800dc18:	428a      	cmp	r2, r1
 800dc1a:	d100      	bne.n	800dc1e <memmove+0x2a>
 800dc1c:	bd10      	pop	{r4, pc}
 800dc1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc26:	e7f7      	b.n	800dc18 <memmove+0x24>

0800dc28 <strncmp>:
 800dc28:	b510      	push	{r4, lr}
 800dc2a:	b16a      	cbz	r2, 800dc48 <strncmp+0x20>
 800dc2c:	3901      	subs	r1, #1
 800dc2e:	1884      	adds	r4, r0, r2
 800dc30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d103      	bne.n	800dc44 <strncmp+0x1c>
 800dc3c:	42a0      	cmp	r0, r4
 800dc3e:	d001      	beq.n	800dc44 <strncmp+0x1c>
 800dc40:	2a00      	cmp	r2, #0
 800dc42:	d1f5      	bne.n	800dc30 <strncmp+0x8>
 800dc44:	1ad0      	subs	r0, r2, r3
 800dc46:	bd10      	pop	{r4, pc}
 800dc48:	4610      	mov	r0, r2
 800dc4a:	e7fc      	b.n	800dc46 <strncmp+0x1e>

0800dc4c <_sbrk_r>:
 800dc4c:	b538      	push	{r3, r4, r5, lr}
 800dc4e:	4d06      	ldr	r5, [pc, #24]	@ (800dc68 <_sbrk_r+0x1c>)
 800dc50:	2300      	movs	r3, #0
 800dc52:	4604      	mov	r4, r0
 800dc54:	4608      	mov	r0, r1
 800dc56:	602b      	str	r3, [r5, #0]
 800dc58:	f7f4 f81e 	bl	8001c98 <_sbrk>
 800dc5c:	1c43      	adds	r3, r0, #1
 800dc5e:	d102      	bne.n	800dc66 <_sbrk_r+0x1a>
 800dc60:	682b      	ldr	r3, [r5, #0]
 800dc62:	b103      	cbz	r3, 800dc66 <_sbrk_r+0x1a>
 800dc64:	6023      	str	r3, [r4, #0]
 800dc66:	bd38      	pop	{r3, r4, r5, pc}
 800dc68:	20006f7c 	.word	0x20006f7c

0800dc6c <memcpy>:
 800dc6c:	440a      	add	r2, r1
 800dc6e:	4291      	cmp	r1, r2
 800dc70:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc74:	d100      	bne.n	800dc78 <memcpy+0xc>
 800dc76:	4770      	bx	lr
 800dc78:	b510      	push	{r4, lr}
 800dc7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc82:	4291      	cmp	r1, r2
 800dc84:	d1f9      	bne.n	800dc7a <memcpy+0xe>
 800dc86:	bd10      	pop	{r4, pc}

0800dc88 <nan>:
 800dc88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dc90 <nan+0x8>
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop
 800dc90:	00000000 	.word	0x00000000
 800dc94:	7ff80000 	.word	0x7ff80000

0800dc98 <__assert_func>:
 800dc98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc9a:	4614      	mov	r4, r2
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	4b09      	ldr	r3, [pc, #36]	@ (800dcc4 <__assert_func+0x2c>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4605      	mov	r5, r0
 800dca4:	68d8      	ldr	r0, [r3, #12]
 800dca6:	b14c      	cbz	r4, 800dcbc <__assert_func+0x24>
 800dca8:	4b07      	ldr	r3, [pc, #28]	@ (800dcc8 <__assert_func+0x30>)
 800dcaa:	9100      	str	r1, [sp, #0]
 800dcac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dcb0:	4906      	ldr	r1, [pc, #24]	@ (800dccc <__assert_func+0x34>)
 800dcb2:	462b      	mov	r3, r5
 800dcb4:	f000 fba8 	bl	800e408 <fiprintf>
 800dcb8:	f000 fbb8 	bl	800e42c <abort>
 800dcbc:	4b04      	ldr	r3, [pc, #16]	@ (800dcd0 <__assert_func+0x38>)
 800dcbe:	461c      	mov	r4, r3
 800dcc0:	e7f3      	b.n	800dcaa <__assert_func+0x12>
 800dcc2:	bf00      	nop
 800dcc4:	20000108 	.word	0x20000108
 800dcc8:	0800ec2a 	.word	0x0800ec2a
 800dccc:	0800ec37 	.word	0x0800ec37
 800dcd0:	0800ec65 	.word	0x0800ec65

0800dcd4 <_calloc_r>:
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	fba1 5402 	umull	r5, r4, r1, r2
 800dcda:	b934      	cbnz	r4, 800dcea <_calloc_r+0x16>
 800dcdc:	4629      	mov	r1, r5
 800dcde:	f7fe f9cb 	bl	800c078 <_malloc_r>
 800dce2:	4606      	mov	r6, r0
 800dce4:	b928      	cbnz	r0, 800dcf2 <_calloc_r+0x1e>
 800dce6:	4630      	mov	r0, r6
 800dce8:	bd70      	pop	{r4, r5, r6, pc}
 800dcea:	220c      	movs	r2, #12
 800dcec:	6002      	str	r2, [r0, #0]
 800dcee:	2600      	movs	r6, #0
 800dcf0:	e7f9      	b.n	800dce6 <_calloc_r+0x12>
 800dcf2:	462a      	mov	r2, r5
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	f7fd fa58 	bl	800b1aa <memset>
 800dcfa:	e7f4      	b.n	800dce6 <_calloc_r+0x12>

0800dcfc <rshift>:
 800dcfc:	6903      	ldr	r3, [r0, #16]
 800dcfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd0a:	f100 0414 	add.w	r4, r0, #20
 800dd0e:	dd45      	ble.n	800dd9c <rshift+0xa0>
 800dd10:	f011 011f 	ands.w	r1, r1, #31
 800dd14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd1c:	d10c      	bne.n	800dd38 <rshift+0x3c>
 800dd1e:	f100 0710 	add.w	r7, r0, #16
 800dd22:	4629      	mov	r1, r5
 800dd24:	42b1      	cmp	r1, r6
 800dd26:	d334      	bcc.n	800dd92 <rshift+0x96>
 800dd28:	1a9b      	subs	r3, r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	1eea      	subs	r2, r5, #3
 800dd2e:	4296      	cmp	r6, r2
 800dd30:	bf38      	it	cc
 800dd32:	2300      	movcc	r3, #0
 800dd34:	4423      	add	r3, r4
 800dd36:	e015      	b.n	800dd64 <rshift+0x68>
 800dd38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd3c:	f1c1 0820 	rsb	r8, r1, #32
 800dd40:	40cf      	lsrs	r7, r1
 800dd42:	f105 0e04 	add.w	lr, r5, #4
 800dd46:	46a1      	mov	r9, r4
 800dd48:	4576      	cmp	r6, lr
 800dd4a:	46f4      	mov	ip, lr
 800dd4c:	d815      	bhi.n	800dd7a <rshift+0x7e>
 800dd4e:	1a9a      	subs	r2, r3, r2
 800dd50:	0092      	lsls	r2, r2, #2
 800dd52:	3a04      	subs	r2, #4
 800dd54:	3501      	adds	r5, #1
 800dd56:	42ae      	cmp	r6, r5
 800dd58:	bf38      	it	cc
 800dd5a:	2200      	movcc	r2, #0
 800dd5c:	18a3      	adds	r3, r4, r2
 800dd5e:	50a7      	str	r7, [r4, r2]
 800dd60:	b107      	cbz	r7, 800dd64 <rshift+0x68>
 800dd62:	3304      	adds	r3, #4
 800dd64:	1b1a      	subs	r2, r3, r4
 800dd66:	42a3      	cmp	r3, r4
 800dd68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dd6c:	bf08      	it	eq
 800dd6e:	2300      	moveq	r3, #0
 800dd70:	6102      	str	r2, [r0, #16]
 800dd72:	bf08      	it	eq
 800dd74:	6143      	streq	r3, [r0, #20]
 800dd76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd7a:	f8dc c000 	ldr.w	ip, [ip]
 800dd7e:	fa0c fc08 	lsl.w	ip, ip, r8
 800dd82:	ea4c 0707 	orr.w	r7, ip, r7
 800dd86:	f849 7b04 	str.w	r7, [r9], #4
 800dd8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dd8e:	40cf      	lsrs	r7, r1
 800dd90:	e7da      	b.n	800dd48 <rshift+0x4c>
 800dd92:	f851 cb04 	ldr.w	ip, [r1], #4
 800dd96:	f847 cf04 	str.w	ip, [r7, #4]!
 800dd9a:	e7c3      	b.n	800dd24 <rshift+0x28>
 800dd9c:	4623      	mov	r3, r4
 800dd9e:	e7e1      	b.n	800dd64 <rshift+0x68>

0800dda0 <__hexdig_fun>:
 800dda0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dda4:	2b09      	cmp	r3, #9
 800dda6:	d802      	bhi.n	800ddae <__hexdig_fun+0xe>
 800dda8:	3820      	subs	r0, #32
 800ddaa:	b2c0      	uxtb	r0, r0
 800ddac:	4770      	bx	lr
 800ddae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ddb2:	2b05      	cmp	r3, #5
 800ddb4:	d801      	bhi.n	800ddba <__hexdig_fun+0x1a>
 800ddb6:	3847      	subs	r0, #71	@ 0x47
 800ddb8:	e7f7      	b.n	800ddaa <__hexdig_fun+0xa>
 800ddba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ddbe:	2b05      	cmp	r3, #5
 800ddc0:	d801      	bhi.n	800ddc6 <__hexdig_fun+0x26>
 800ddc2:	3827      	subs	r0, #39	@ 0x27
 800ddc4:	e7f1      	b.n	800ddaa <__hexdig_fun+0xa>
 800ddc6:	2000      	movs	r0, #0
 800ddc8:	4770      	bx	lr
	...

0800ddcc <__gethex>:
 800ddcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd0:	b085      	sub	sp, #20
 800ddd2:	468a      	mov	sl, r1
 800ddd4:	9302      	str	r3, [sp, #8]
 800ddd6:	680b      	ldr	r3, [r1, #0]
 800ddd8:	9001      	str	r0, [sp, #4]
 800ddda:	4690      	mov	r8, r2
 800dddc:	1c9c      	adds	r4, r3, #2
 800ddde:	46a1      	mov	r9, r4
 800dde0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dde4:	2830      	cmp	r0, #48	@ 0x30
 800dde6:	d0fa      	beq.n	800ddde <__gethex+0x12>
 800dde8:	eba9 0303 	sub.w	r3, r9, r3
 800ddec:	f1a3 0b02 	sub.w	fp, r3, #2
 800ddf0:	f7ff ffd6 	bl	800dda0 <__hexdig_fun>
 800ddf4:	4605      	mov	r5, r0
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d168      	bne.n	800decc <__gethex+0x100>
 800ddfa:	49a0      	ldr	r1, [pc, #640]	@ (800e07c <__gethex+0x2b0>)
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	4648      	mov	r0, r9
 800de00:	f7ff ff12 	bl	800dc28 <strncmp>
 800de04:	4607      	mov	r7, r0
 800de06:	2800      	cmp	r0, #0
 800de08:	d167      	bne.n	800deda <__gethex+0x10e>
 800de0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800de0e:	4626      	mov	r6, r4
 800de10:	f7ff ffc6 	bl	800dda0 <__hexdig_fun>
 800de14:	2800      	cmp	r0, #0
 800de16:	d062      	beq.n	800dede <__gethex+0x112>
 800de18:	4623      	mov	r3, r4
 800de1a:	7818      	ldrb	r0, [r3, #0]
 800de1c:	2830      	cmp	r0, #48	@ 0x30
 800de1e:	4699      	mov	r9, r3
 800de20:	f103 0301 	add.w	r3, r3, #1
 800de24:	d0f9      	beq.n	800de1a <__gethex+0x4e>
 800de26:	f7ff ffbb 	bl	800dda0 <__hexdig_fun>
 800de2a:	fab0 f580 	clz	r5, r0
 800de2e:	096d      	lsrs	r5, r5, #5
 800de30:	f04f 0b01 	mov.w	fp, #1
 800de34:	464a      	mov	r2, r9
 800de36:	4616      	mov	r6, r2
 800de38:	3201      	adds	r2, #1
 800de3a:	7830      	ldrb	r0, [r6, #0]
 800de3c:	f7ff ffb0 	bl	800dda0 <__hexdig_fun>
 800de40:	2800      	cmp	r0, #0
 800de42:	d1f8      	bne.n	800de36 <__gethex+0x6a>
 800de44:	498d      	ldr	r1, [pc, #564]	@ (800e07c <__gethex+0x2b0>)
 800de46:	2201      	movs	r2, #1
 800de48:	4630      	mov	r0, r6
 800de4a:	f7ff feed 	bl	800dc28 <strncmp>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d13f      	bne.n	800ded2 <__gethex+0x106>
 800de52:	b944      	cbnz	r4, 800de66 <__gethex+0x9a>
 800de54:	1c74      	adds	r4, r6, #1
 800de56:	4622      	mov	r2, r4
 800de58:	4616      	mov	r6, r2
 800de5a:	3201      	adds	r2, #1
 800de5c:	7830      	ldrb	r0, [r6, #0]
 800de5e:	f7ff ff9f 	bl	800dda0 <__hexdig_fun>
 800de62:	2800      	cmp	r0, #0
 800de64:	d1f8      	bne.n	800de58 <__gethex+0x8c>
 800de66:	1ba4      	subs	r4, r4, r6
 800de68:	00a7      	lsls	r7, r4, #2
 800de6a:	7833      	ldrb	r3, [r6, #0]
 800de6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800de70:	2b50      	cmp	r3, #80	@ 0x50
 800de72:	d13e      	bne.n	800def2 <__gethex+0x126>
 800de74:	7873      	ldrb	r3, [r6, #1]
 800de76:	2b2b      	cmp	r3, #43	@ 0x2b
 800de78:	d033      	beq.n	800dee2 <__gethex+0x116>
 800de7a:	2b2d      	cmp	r3, #45	@ 0x2d
 800de7c:	d034      	beq.n	800dee8 <__gethex+0x11c>
 800de7e:	1c71      	adds	r1, r6, #1
 800de80:	2400      	movs	r4, #0
 800de82:	7808      	ldrb	r0, [r1, #0]
 800de84:	f7ff ff8c 	bl	800dda0 <__hexdig_fun>
 800de88:	1e43      	subs	r3, r0, #1
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	2b18      	cmp	r3, #24
 800de8e:	d830      	bhi.n	800def2 <__gethex+0x126>
 800de90:	f1a0 0210 	sub.w	r2, r0, #16
 800de94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800de98:	f7ff ff82 	bl	800dda0 <__hexdig_fun>
 800de9c:	f100 3cff 	add.w	ip, r0, #4294967295
 800dea0:	fa5f fc8c 	uxtb.w	ip, ip
 800dea4:	f1bc 0f18 	cmp.w	ip, #24
 800dea8:	f04f 030a 	mov.w	r3, #10
 800deac:	d91e      	bls.n	800deec <__gethex+0x120>
 800deae:	b104      	cbz	r4, 800deb2 <__gethex+0xe6>
 800deb0:	4252      	negs	r2, r2
 800deb2:	4417      	add	r7, r2
 800deb4:	f8ca 1000 	str.w	r1, [sl]
 800deb8:	b1ed      	cbz	r5, 800def6 <__gethex+0x12a>
 800deba:	f1bb 0f00 	cmp.w	fp, #0
 800debe:	bf0c      	ite	eq
 800dec0:	2506      	moveq	r5, #6
 800dec2:	2500      	movne	r5, #0
 800dec4:	4628      	mov	r0, r5
 800dec6:	b005      	add	sp, #20
 800dec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800decc:	2500      	movs	r5, #0
 800dece:	462c      	mov	r4, r5
 800ded0:	e7b0      	b.n	800de34 <__gethex+0x68>
 800ded2:	2c00      	cmp	r4, #0
 800ded4:	d1c7      	bne.n	800de66 <__gethex+0x9a>
 800ded6:	4627      	mov	r7, r4
 800ded8:	e7c7      	b.n	800de6a <__gethex+0x9e>
 800deda:	464e      	mov	r6, r9
 800dedc:	462f      	mov	r7, r5
 800dede:	2501      	movs	r5, #1
 800dee0:	e7c3      	b.n	800de6a <__gethex+0x9e>
 800dee2:	2400      	movs	r4, #0
 800dee4:	1cb1      	adds	r1, r6, #2
 800dee6:	e7cc      	b.n	800de82 <__gethex+0xb6>
 800dee8:	2401      	movs	r4, #1
 800deea:	e7fb      	b.n	800dee4 <__gethex+0x118>
 800deec:	fb03 0002 	mla	r0, r3, r2, r0
 800def0:	e7ce      	b.n	800de90 <__gethex+0xc4>
 800def2:	4631      	mov	r1, r6
 800def4:	e7de      	b.n	800deb4 <__gethex+0xe8>
 800def6:	eba6 0309 	sub.w	r3, r6, r9
 800defa:	3b01      	subs	r3, #1
 800defc:	4629      	mov	r1, r5
 800defe:	2b07      	cmp	r3, #7
 800df00:	dc0a      	bgt.n	800df18 <__gethex+0x14c>
 800df02:	9801      	ldr	r0, [sp, #4]
 800df04:	f7fe f944 	bl	800c190 <_Balloc>
 800df08:	4604      	mov	r4, r0
 800df0a:	b940      	cbnz	r0, 800df1e <__gethex+0x152>
 800df0c:	4b5c      	ldr	r3, [pc, #368]	@ (800e080 <__gethex+0x2b4>)
 800df0e:	4602      	mov	r2, r0
 800df10:	21e4      	movs	r1, #228	@ 0xe4
 800df12:	485c      	ldr	r0, [pc, #368]	@ (800e084 <__gethex+0x2b8>)
 800df14:	f7ff fec0 	bl	800dc98 <__assert_func>
 800df18:	3101      	adds	r1, #1
 800df1a:	105b      	asrs	r3, r3, #1
 800df1c:	e7ef      	b.n	800defe <__gethex+0x132>
 800df1e:	f100 0a14 	add.w	sl, r0, #20
 800df22:	2300      	movs	r3, #0
 800df24:	4655      	mov	r5, sl
 800df26:	469b      	mov	fp, r3
 800df28:	45b1      	cmp	r9, r6
 800df2a:	d337      	bcc.n	800df9c <__gethex+0x1d0>
 800df2c:	f845 bb04 	str.w	fp, [r5], #4
 800df30:	eba5 050a 	sub.w	r5, r5, sl
 800df34:	10ad      	asrs	r5, r5, #2
 800df36:	6125      	str	r5, [r4, #16]
 800df38:	4658      	mov	r0, fp
 800df3a:	f7fe fa1b 	bl	800c374 <__hi0bits>
 800df3e:	016d      	lsls	r5, r5, #5
 800df40:	f8d8 6000 	ldr.w	r6, [r8]
 800df44:	1a2d      	subs	r5, r5, r0
 800df46:	42b5      	cmp	r5, r6
 800df48:	dd54      	ble.n	800dff4 <__gethex+0x228>
 800df4a:	1bad      	subs	r5, r5, r6
 800df4c:	4629      	mov	r1, r5
 800df4e:	4620      	mov	r0, r4
 800df50:	f7fe fda7 	bl	800caa2 <__any_on>
 800df54:	4681      	mov	r9, r0
 800df56:	b178      	cbz	r0, 800df78 <__gethex+0x1ac>
 800df58:	1e6b      	subs	r3, r5, #1
 800df5a:	1159      	asrs	r1, r3, #5
 800df5c:	f003 021f 	and.w	r2, r3, #31
 800df60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800df64:	f04f 0901 	mov.w	r9, #1
 800df68:	fa09 f202 	lsl.w	r2, r9, r2
 800df6c:	420a      	tst	r2, r1
 800df6e:	d003      	beq.n	800df78 <__gethex+0x1ac>
 800df70:	454b      	cmp	r3, r9
 800df72:	dc36      	bgt.n	800dfe2 <__gethex+0x216>
 800df74:	f04f 0902 	mov.w	r9, #2
 800df78:	4629      	mov	r1, r5
 800df7a:	4620      	mov	r0, r4
 800df7c:	f7ff febe 	bl	800dcfc <rshift>
 800df80:	442f      	add	r7, r5
 800df82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df86:	42bb      	cmp	r3, r7
 800df88:	da42      	bge.n	800e010 <__gethex+0x244>
 800df8a:	9801      	ldr	r0, [sp, #4]
 800df8c:	4621      	mov	r1, r4
 800df8e:	f7fe f93f 	bl	800c210 <_Bfree>
 800df92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df94:	2300      	movs	r3, #0
 800df96:	6013      	str	r3, [r2, #0]
 800df98:	25a3      	movs	r5, #163	@ 0xa3
 800df9a:	e793      	b.n	800dec4 <__gethex+0xf8>
 800df9c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dfa0:	2a2e      	cmp	r2, #46	@ 0x2e
 800dfa2:	d012      	beq.n	800dfca <__gethex+0x1fe>
 800dfa4:	2b20      	cmp	r3, #32
 800dfa6:	d104      	bne.n	800dfb2 <__gethex+0x1e6>
 800dfa8:	f845 bb04 	str.w	fp, [r5], #4
 800dfac:	f04f 0b00 	mov.w	fp, #0
 800dfb0:	465b      	mov	r3, fp
 800dfb2:	7830      	ldrb	r0, [r6, #0]
 800dfb4:	9303      	str	r3, [sp, #12]
 800dfb6:	f7ff fef3 	bl	800dda0 <__hexdig_fun>
 800dfba:	9b03      	ldr	r3, [sp, #12]
 800dfbc:	f000 000f 	and.w	r0, r0, #15
 800dfc0:	4098      	lsls	r0, r3
 800dfc2:	ea4b 0b00 	orr.w	fp, fp, r0
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	e7ae      	b.n	800df28 <__gethex+0x15c>
 800dfca:	45b1      	cmp	r9, r6
 800dfcc:	d8ea      	bhi.n	800dfa4 <__gethex+0x1d8>
 800dfce:	492b      	ldr	r1, [pc, #172]	@ (800e07c <__gethex+0x2b0>)
 800dfd0:	9303      	str	r3, [sp, #12]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	4630      	mov	r0, r6
 800dfd6:	f7ff fe27 	bl	800dc28 <strncmp>
 800dfda:	9b03      	ldr	r3, [sp, #12]
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d1e1      	bne.n	800dfa4 <__gethex+0x1d8>
 800dfe0:	e7a2      	b.n	800df28 <__gethex+0x15c>
 800dfe2:	1ea9      	subs	r1, r5, #2
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f7fe fd5c 	bl	800caa2 <__any_on>
 800dfea:	2800      	cmp	r0, #0
 800dfec:	d0c2      	beq.n	800df74 <__gethex+0x1a8>
 800dfee:	f04f 0903 	mov.w	r9, #3
 800dff2:	e7c1      	b.n	800df78 <__gethex+0x1ac>
 800dff4:	da09      	bge.n	800e00a <__gethex+0x23e>
 800dff6:	1b75      	subs	r5, r6, r5
 800dff8:	4621      	mov	r1, r4
 800dffa:	9801      	ldr	r0, [sp, #4]
 800dffc:	462a      	mov	r2, r5
 800dffe:	f7fe fb17 	bl	800c630 <__lshift>
 800e002:	1b7f      	subs	r7, r7, r5
 800e004:	4604      	mov	r4, r0
 800e006:	f100 0a14 	add.w	sl, r0, #20
 800e00a:	f04f 0900 	mov.w	r9, #0
 800e00e:	e7b8      	b.n	800df82 <__gethex+0x1b6>
 800e010:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e014:	42bd      	cmp	r5, r7
 800e016:	dd6f      	ble.n	800e0f8 <__gethex+0x32c>
 800e018:	1bed      	subs	r5, r5, r7
 800e01a:	42ae      	cmp	r6, r5
 800e01c:	dc34      	bgt.n	800e088 <__gethex+0x2bc>
 800e01e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e022:	2b02      	cmp	r3, #2
 800e024:	d022      	beq.n	800e06c <__gethex+0x2a0>
 800e026:	2b03      	cmp	r3, #3
 800e028:	d024      	beq.n	800e074 <__gethex+0x2a8>
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d115      	bne.n	800e05a <__gethex+0x28e>
 800e02e:	42ae      	cmp	r6, r5
 800e030:	d113      	bne.n	800e05a <__gethex+0x28e>
 800e032:	2e01      	cmp	r6, #1
 800e034:	d10b      	bne.n	800e04e <__gethex+0x282>
 800e036:	9a02      	ldr	r2, [sp, #8]
 800e038:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e03c:	6013      	str	r3, [r2, #0]
 800e03e:	2301      	movs	r3, #1
 800e040:	6123      	str	r3, [r4, #16]
 800e042:	f8ca 3000 	str.w	r3, [sl]
 800e046:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e048:	2562      	movs	r5, #98	@ 0x62
 800e04a:	601c      	str	r4, [r3, #0]
 800e04c:	e73a      	b.n	800dec4 <__gethex+0xf8>
 800e04e:	1e71      	subs	r1, r6, #1
 800e050:	4620      	mov	r0, r4
 800e052:	f7fe fd26 	bl	800caa2 <__any_on>
 800e056:	2800      	cmp	r0, #0
 800e058:	d1ed      	bne.n	800e036 <__gethex+0x26a>
 800e05a:	9801      	ldr	r0, [sp, #4]
 800e05c:	4621      	mov	r1, r4
 800e05e:	f7fe f8d7 	bl	800c210 <_Bfree>
 800e062:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e064:	2300      	movs	r3, #0
 800e066:	6013      	str	r3, [r2, #0]
 800e068:	2550      	movs	r5, #80	@ 0x50
 800e06a:	e72b      	b.n	800dec4 <__gethex+0xf8>
 800e06c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d1f3      	bne.n	800e05a <__gethex+0x28e>
 800e072:	e7e0      	b.n	800e036 <__gethex+0x26a>
 800e074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e076:	2b00      	cmp	r3, #0
 800e078:	d1dd      	bne.n	800e036 <__gethex+0x26a>
 800e07a:	e7ee      	b.n	800e05a <__gethex+0x28e>
 800e07c:	0800ec0f 	.word	0x0800ec0f
 800e080:	0800eba5 	.word	0x0800eba5
 800e084:	0800ec66 	.word	0x0800ec66
 800e088:	1e6f      	subs	r7, r5, #1
 800e08a:	f1b9 0f00 	cmp.w	r9, #0
 800e08e:	d130      	bne.n	800e0f2 <__gethex+0x326>
 800e090:	b127      	cbz	r7, 800e09c <__gethex+0x2d0>
 800e092:	4639      	mov	r1, r7
 800e094:	4620      	mov	r0, r4
 800e096:	f7fe fd04 	bl	800caa2 <__any_on>
 800e09a:	4681      	mov	r9, r0
 800e09c:	117a      	asrs	r2, r7, #5
 800e09e:	2301      	movs	r3, #1
 800e0a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e0a4:	f007 071f 	and.w	r7, r7, #31
 800e0a8:	40bb      	lsls	r3, r7
 800e0aa:	4213      	tst	r3, r2
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	bf18      	it	ne
 800e0b2:	f049 0902 	orrne.w	r9, r9, #2
 800e0b6:	f7ff fe21 	bl	800dcfc <rshift>
 800e0ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e0be:	1b76      	subs	r6, r6, r5
 800e0c0:	2502      	movs	r5, #2
 800e0c2:	f1b9 0f00 	cmp.w	r9, #0
 800e0c6:	d047      	beq.n	800e158 <__gethex+0x38c>
 800e0c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0cc:	2b02      	cmp	r3, #2
 800e0ce:	d015      	beq.n	800e0fc <__gethex+0x330>
 800e0d0:	2b03      	cmp	r3, #3
 800e0d2:	d017      	beq.n	800e104 <__gethex+0x338>
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d109      	bne.n	800e0ec <__gethex+0x320>
 800e0d8:	f019 0f02 	tst.w	r9, #2
 800e0dc:	d006      	beq.n	800e0ec <__gethex+0x320>
 800e0de:	f8da 3000 	ldr.w	r3, [sl]
 800e0e2:	ea49 0903 	orr.w	r9, r9, r3
 800e0e6:	f019 0f01 	tst.w	r9, #1
 800e0ea:	d10e      	bne.n	800e10a <__gethex+0x33e>
 800e0ec:	f045 0510 	orr.w	r5, r5, #16
 800e0f0:	e032      	b.n	800e158 <__gethex+0x38c>
 800e0f2:	f04f 0901 	mov.w	r9, #1
 800e0f6:	e7d1      	b.n	800e09c <__gethex+0x2d0>
 800e0f8:	2501      	movs	r5, #1
 800e0fa:	e7e2      	b.n	800e0c2 <__gethex+0x2f6>
 800e0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0fe:	f1c3 0301 	rsb	r3, r3, #1
 800e102:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e106:	2b00      	cmp	r3, #0
 800e108:	d0f0      	beq.n	800e0ec <__gethex+0x320>
 800e10a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e10e:	f104 0314 	add.w	r3, r4, #20
 800e112:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e116:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e11a:	f04f 0c00 	mov.w	ip, #0
 800e11e:	4618      	mov	r0, r3
 800e120:	f853 2b04 	ldr.w	r2, [r3], #4
 800e124:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e128:	d01b      	beq.n	800e162 <__gethex+0x396>
 800e12a:	3201      	adds	r2, #1
 800e12c:	6002      	str	r2, [r0, #0]
 800e12e:	2d02      	cmp	r5, #2
 800e130:	f104 0314 	add.w	r3, r4, #20
 800e134:	d13c      	bne.n	800e1b0 <__gethex+0x3e4>
 800e136:	f8d8 2000 	ldr.w	r2, [r8]
 800e13a:	3a01      	subs	r2, #1
 800e13c:	42b2      	cmp	r2, r6
 800e13e:	d109      	bne.n	800e154 <__gethex+0x388>
 800e140:	1171      	asrs	r1, r6, #5
 800e142:	2201      	movs	r2, #1
 800e144:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e148:	f006 061f 	and.w	r6, r6, #31
 800e14c:	fa02 f606 	lsl.w	r6, r2, r6
 800e150:	421e      	tst	r6, r3
 800e152:	d13a      	bne.n	800e1ca <__gethex+0x3fe>
 800e154:	f045 0520 	orr.w	r5, r5, #32
 800e158:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e15a:	601c      	str	r4, [r3, #0]
 800e15c:	9b02      	ldr	r3, [sp, #8]
 800e15e:	601f      	str	r7, [r3, #0]
 800e160:	e6b0      	b.n	800dec4 <__gethex+0xf8>
 800e162:	4299      	cmp	r1, r3
 800e164:	f843 cc04 	str.w	ip, [r3, #-4]
 800e168:	d8d9      	bhi.n	800e11e <__gethex+0x352>
 800e16a:	68a3      	ldr	r3, [r4, #8]
 800e16c:	459b      	cmp	fp, r3
 800e16e:	db17      	blt.n	800e1a0 <__gethex+0x3d4>
 800e170:	6861      	ldr	r1, [r4, #4]
 800e172:	9801      	ldr	r0, [sp, #4]
 800e174:	3101      	adds	r1, #1
 800e176:	f7fe f80b 	bl	800c190 <_Balloc>
 800e17a:	4681      	mov	r9, r0
 800e17c:	b918      	cbnz	r0, 800e186 <__gethex+0x3ba>
 800e17e:	4b1a      	ldr	r3, [pc, #104]	@ (800e1e8 <__gethex+0x41c>)
 800e180:	4602      	mov	r2, r0
 800e182:	2184      	movs	r1, #132	@ 0x84
 800e184:	e6c5      	b.n	800df12 <__gethex+0x146>
 800e186:	6922      	ldr	r2, [r4, #16]
 800e188:	3202      	adds	r2, #2
 800e18a:	f104 010c 	add.w	r1, r4, #12
 800e18e:	0092      	lsls	r2, r2, #2
 800e190:	300c      	adds	r0, #12
 800e192:	f7ff fd6b 	bl	800dc6c <memcpy>
 800e196:	4621      	mov	r1, r4
 800e198:	9801      	ldr	r0, [sp, #4]
 800e19a:	f7fe f839 	bl	800c210 <_Bfree>
 800e19e:	464c      	mov	r4, r9
 800e1a0:	6923      	ldr	r3, [r4, #16]
 800e1a2:	1c5a      	adds	r2, r3, #1
 800e1a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e1a8:	6122      	str	r2, [r4, #16]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	615a      	str	r2, [r3, #20]
 800e1ae:	e7be      	b.n	800e12e <__gethex+0x362>
 800e1b0:	6922      	ldr	r2, [r4, #16]
 800e1b2:	455a      	cmp	r2, fp
 800e1b4:	dd0b      	ble.n	800e1ce <__gethex+0x402>
 800e1b6:	2101      	movs	r1, #1
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f7ff fd9f 	bl	800dcfc <rshift>
 800e1be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e1c2:	3701      	adds	r7, #1
 800e1c4:	42bb      	cmp	r3, r7
 800e1c6:	f6ff aee0 	blt.w	800df8a <__gethex+0x1be>
 800e1ca:	2501      	movs	r5, #1
 800e1cc:	e7c2      	b.n	800e154 <__gethex+0x388>
 800e1ce:	f016 061f 	ands.w	r6, r6, #31
 800e1d2:	d0fa      	beq.n	800e1ca <__gethex+0x3fe>
 800e1d4:	4453      	add	r3, sl
 800e1d6:	f1c6 0620 	rsb	r6, r6, #32
 800e1da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e1de:	f7fe f8c9 	bl	800c374 <__hi0bits>
 800e1e2:	42b0      	cmp	r0, r6
 800e1e4:	dbe7      	blt.n	800e1b6 <__gethex+0x3ea>
 800e1e6:	e7f0      	b.n	800e1ca <__gethex+0x3fe>
 800e1e8:	0800eba5 	.word	0x0800eba5

0800e1ec <L_shift>:
 800e1ec:	f1c2 0208 	rsb	r2, r2, #8
 800e1f0:	0092      	lsls	r2, r2, #2
 800e1f2:	b570      	push	{r4, r5, r6, lr}
 800e1f4:	f1c2 0620 	rsb	r6, r2, #32
 800e1f8:	6843      	ldr	r3, [r0, #4]
 800e1fa:	6804      	ldr	r4, [r0, #0]
 800e1fc:	fa03 f506 	lsl.w	r5, r3, r6
 800e200:	432c      	orrs	r4, r5
 800e202:	40d3      	lsrs	r3, r2
 800e204:	6004      	str	r4, [r0, #0]
 800e206:	f840 3f04 	str.w	r3, [r0, #4]!
 800e20a:	4288      	cmp	r0, r1
 800e20c:	d3f4      	bcc.n	800e1f8 <L_shift+0xc>
 800e20e:	bd70      	pop	{r4, r5, r6, pc}

0800e210 <__match>:
 800e210:	b530      	push	{r4, r5, lr}
 800e212:	6803      	ldr	r3, [r0, #0]
 800e214:	3301      	adds	r3, #1
 800e216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e21a:	b914      	cbnz	r4, 800e222 <__match+0x12>
 800e21c:	6003      	str	r3, [r0, #0]
 800e21e:	2001      	movs	r0, #1
 800e220:	bd30      	pop	{r4, r5, pc}
 800e222:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e226:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e22a:	2d19      	cmp	r5, #25
 800e22c:	bf98      	it	ls
 800e22e:	3220      	addls	r2, #32
 800e230:	42a2      	cmp	r2, r4
 800e232:	d0f0      	beq.n	800e216 <__match+0x6>
 800e234:	2000      	movs	r0, #0
 800e236:	e7f3      	b.n	800e220 <__match+0x10>

0800e238 <__hexnan>:
 800e238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23c:	680b      	ldr	r3, [r1, #0]
 800e23e:	6801      	ldr	r1, [r0, #0]
 800e240:	115e      	asrs	r6, r3, #5
 800e242:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e246:	f013 031f 	ands.w	r3, r3, #31
 800e24a:	b087      	sub	sp, #28
 800e24c:	bf18      	it	ne
 800e24e:	3604      	addne	r6, #4
 800e250:	2500      	movs	r5, #0
 800e252:	1f37      	subs	r7, r6, #4
 800e254:	4682      	mov	sl, r0
 800e256:	4690      	mov	r8, r2
 800e258:	9301      	str	r3, [sp, #4]
 800e25a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e25e:	46b9      	mov	r9, r7
 800e260:	463c      	mov	r4, r7
 800e262:	9502      	str	r5, [sp, #8]
 800e264:	46ab      	mov	fp, r5
 800e266:	784a      	ldrb	r2, [r1, #1]
 800e268:	1c4b      	adds	r3, r1, #1
 800e26a:	9303      	str	r3, [sp, #12]
 800e26c:	b342      	cbz	r2, 800e2c0 <__hexnan+0x88>
 800e26e:	4610      	mov	r0, r2
 800e270:	9105      	str	r1, [sp, #20]
 800e272:	9204      	str	r2, [sp, #16]
 800e274:	f7ff fd94 	bl	800dda0 <__hexdig_fun>
 800e278:	2800      	cmp	r0, #0
 800e27a:	d151      	bne.n	800e320 <__hexnan+0xe8>
 800e27c:	9a04      	ldr	r2, [sp, #16]
 800e27e:	9905      	ldr	r1, [sp, #20]
 800e280:	2a20      	cmp	r2, #32
 800e282:	d818      	bhi.n	800e2b6 <__hexnan+0x7e>
 800e284:	9b02      	ldr	r3, [sp, #8]
 800e286:	459b      	cmp	fp, r3
 800e288:	dd13      	ble.n	800e2b2 <__hexnan+0x7a>
 800e28a:	454c      	cmp	r4, r9
 800e28c:	d206      	bcs.n	800e29c <__hexnan+0x64>
 800e28e:	2d07      	cmp	r5, #7
 800e290:	dc04      	bgt.n	800e29c <__hexnan+0x64>
 800e292:	462a      	mov	r2, r5
 800e294:	4649      	mov	r1, r9
 800e296:	4620      	mov	r0, r4
 800e298:	f7ff ffa8 	bl	800e1ec <L_shift>
 800e29c:	4544      	cmp	r4, r8
 800e29e:	d952      	bls.n	800e346 <__hexnan+0x10e>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	f1a4 0904 	sub.w	r9, r4, #4
 800e2a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e2aa:	f8cd b008 	str.w	fp, [sp, #8]
 800e2ae:	464c      	mov	r4, r9
 800e2b0:	461d      	mov	r5, r3
 800e2b2:	9903      	ldr	r1, [sp, #12]
 800e2b4:	e7d7      	b.n	800e266 <__hexnan+0x2e>
 800e2b6:	2a29      	cmp	r2, #41	@ 0x29
 800e2b8:	d157      	bne.n	800e36a <__hexnan+0x132>
 800e2ba:	3102      	adds	r1, #2
 800e2bc:	f8ca 1000 	str.w	r1, [sl]
 800e2c0:	f1bb 0f00 	cmp.w	fp, #0
 800e2c4:	d051      	beq.n	800e36a <__hexnan+0x132>
 800e2c6:	454c      	cmp	r4, r9
 800e2c8:	d206      	bcs.n	800e2d8 <__hexnan+0xa0>
 800e2ca:	2d07      	cmp	r5, #7
 800e2cc:	dc04      	bgt.n	800e2d8 <__hexnan+0xa0>
 800e2ce:	462a      	mov	r2, r5
 800e2d0:	4649      	mov	r1, r9
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f7ff ff8a 	bl	800e1ec <L_shift>
 800e2d8:	4544      	cmp	r4, r8
 800e2da:	d936      	bls.n	800e34a <__hexnan+0x112>
 800e2dc:	f1a8 0204 	sub.w	r2, r8, #4
 800e2e0:	4623      	mov	r3, r4
 800e2e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e2e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e2ea:	429f      	cmp	r7, r3
 800e2ec:	d2f9      	bcs.n	800e2e2 <__hexnan+0xaa>
 800e2ee:	1b3b      	subs	r3, r7, r4
 800e2f0:	f023 0303 	bic.w	r3, r3, #3
 800e2f4:	3304      	adds	r3, #4
 800e2f6:	3401      	adds	r4, #1
 800e2f8:	3e03      	subs	r6, #3
 800e2fa:	42b4      	cmp	r4, r6
 800e2fc:	bf88      	it	hi
 800e2fe:	2304      	movhi	r3, #4
 800e300:	4443      	add	r3, r8
 800e302:	2200      	movs	r2, #0
 800e304:	f843 2b04 	str.w	r2, [r3], #4
 800e308:	429f      	cmp	r7, r3
 800e30a:	d2fb      	bcs.n	800e304 <__hexnan+0xcc>
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	b91b      	cbnz	r3, 800e318 <__hexnan+0xe0>
 800e310:	4547      	cmp	r7, r8
 800e312:	d128      	bne.n	800e366 <__hexnan+0x12e>
 800e314:	2301      	movs	r3, #1
 800e316:	603b      	str	r3, [r7, #0]
 800e318:	2005      	movs	r0, #5
 800e31a:	b007      	add	sp, #28
 800e31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e320:	3501      	adds	r5, #1
 800e322:	2d08      	cmp	r5, #8
 800e324:	f10b 0b01 	add.w	fp, fp, #1
 800e328:	dd06      	ble.n	800e338 <__hexnan+0x100>
 800e32a:	4544      	cmp	r4, r8
 800e32c:	d9c1      	bls.n	800e2b2 <__hexnan+0x7a>
 800e32e:	2300      	movs	r3, #0
 800e330:	f844 3c04 	str.w	r3, [r4, #-4]
 800e334:	2501      	movs	r5, #1
 800e336:	3c04      	subs	r4, #4
 800e338:	6822      	ldr	r2, [r4, #0]
 800e33a:	f000 000f 	and.w	r0, r0, #15
 800e33e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e342:	6020      	str	r0, [r4, #0]
 800e344:	e7b5      	b.n	800e2b2 <__hexnan+0x7a>
 800e346:	2508      	movs	r5, #8
 800e348:	e7b3      	b.n	800e2b2 <__hexnan+0x7a>
 800e34a:	9b01      	ldr	r3, [sp, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d0dd      	beq.n	800e30c <__hexnan+0xd4>
 800e350:	f1c3 0320 	rsb	r3, r3, #32
 800e354:	f04f 32ff 	mov.w	r2, #4294967295
 800e358:	40da      	lsrs	r2, r3
 800e35a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e35e:	4013      	ands	r3, r2
 800e360:	f846 3c04 	str.w	r3, [r6, #-4]
 800e364:	e7d2      	b.n	800e30c <__hexnan+0xd4>
 800e366:	3f04      	subs	r7, #4
 800e368:	e7d0      	b.n	800e30c <__hexnan+0xd4>
 800e36a:	2004      	movs	r0, #4
 800e36c:	e7d5      	b.n	800e31a <__hexnan+0xe2>

0800e36e <__ascii_mbtowc>:
 800e36e:	b082      	sub	sp, #8
 800e370:	b901      	cbnz	r1, 800e374 <__ascii_mbtowc+0x6>
 800e372:	a901      	add	r1, sp, #4
 800e374:	b142      	cbz	r2, 800e388 <__ascii_mbtowc+0x1a>
 800e376:	b14b      	cbz	r3, 800e38c <__ascii_mbtowc+0x1e>
 800e378:	7813      	ldrb	r3, [r2, #0]
 800e37a:	600b      	str	r3, [r1, #0]
 800e37c:	7812      	ldrb	r2, [r2, #0]
 800e37e:	1e10      	subs	r0, r2, #0
 800e380:	bf18      	it	ne
 800e382:	2001      	movne	r0, #1
 800e384:	b002      	add	sp, #8
 800e386:	4770      	bx	lr
 800e388:	4610      	mov	r0, r2
 800e38a:	e7fb      	b.n	800e384 <__ascii_mbtowc+0x16>
 800e38c:	f06f 0001 	mvn.w	r0, #1
 800e390:	e7f8      	b.n	800e384 <__ascii_mbtowc+0x16>

0800e392 <_realloc_r>:
 800e392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e396:	4607      	mov	r7, r0
 800e398:	4614      	mov	r4, r2
 800e39a:	460d      	mov	r5, r1
 800e39c:	b921      	cbnz	r1, 800e3a8 <_realloc_r+0x16>
 800e39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3a2:	4611      	mov	r1, r2
 800e3a4:	f7fd be68 	b.w	800c078 <_malloc_r>
 800e3a8:	b92a      	cbnz	r2, 800e3b6 <_realloc_r+0x24>
 800e3aa:	f7fd fdf1 	bl	800bf90 <_free_r>
 800e3ae:	4625      	mov	r5, r4
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3b6:	f000 f840 	bl	800e43a <_malloc_usable_size_r>
 800e3ba:	4284      	cmp	r4, r0
 800e3bc:	4606      	mov	r6, r0
 800e3be:	d802      	bhi.n	800e3c6 <_realloc_r+0x34>
 800e3c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3c4:	d8f4      	bhi.n	800e3b0 <_realloc_r+0x1e>
 800e3c6:	4621      	mov	r1, r4
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	f7fd fe55 	bl	800c078 <_malloc_r>
 800e3ce:	4680      	mov	r8, r0
 800e3d0:	b908      	cbnz	r0, 800e3d6 <_realloc_r+0x44>
 800e3d2:	4645      	mov	r5, r8
 800e3d4:	e7ec      	b.n	800e3b0 <_realloc_r+0x1e>
 800e3d6:	42b4      	cmp	r4, r6
 800e3d8:	4622      	mov	r2, r4
 800e3da:	4629      	mov	r1, r5
 800e3dc:	bf28      	it	cs
 800e3de:	4632      	movcs	r2, r6
 800e3e0:	f7ff fc44 	bl	800dc6c <memcpy>
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	f7fd fdd2 	bl	800bf90 <_free_r>
 800e3ec:	e7f1      	b.n	800e3d2 <_realloc_r+0x40>

0800e3ee <__ascii_wctomb>:
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	4608      	mov	r0, r1
 800e3f2:	b141      	cbz	r1, 800e406 <__ascii_wctomb+0x18>
 800e3f4:	2aff      	cmp	r2, #255	@ 0xff
 800e3f6:	d904      	bls.n	800e402 <__ascii_wctomb+0x14>
 800e3f8:	228a      	movs	r2, #138	@ 0x8a
 800e3fa:	601a      	str	r2, [r3, #0]
 800e3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e400:	4770      	bx	lr
 800e402:	700a      	strb	r2, [r1, #0]
 800e404:	2001      	movs	r0, #1
 800e406:	4770      	bx	lr

0800e408 <fiprintf>:
 800e408:	b40e      	push	{r1, r2, r3}
 800e40a:	b503      	push	{r0, r1, lr}
 800e40c:	4601      	mov	r1, r0
 800e40e:	ab03      	add	r3, sp, #12
 800e410:	4805      	ldr	r0, [pc, #20]	@ (800e428 <fiprintf+0x20>)
 800e412:	f853 2b04 	ldr.w	r2, [r3], #4
 800e416:	6800      	ldr	r0, [r0, #0]
 800e418:	9301      	str	r3, [sp, #4]
 800e41a:	f000 f83f 	bl	800e49c <_vfiprintf_r>
 800e41e:	b002      	add	sp, #8
 800e420:	f85d eb04 	ldr.w	lr, [sp], #4
 800e424:	b003      	add	sp, #12
 800e426:	4770      	bx	lr
 800e428:	20000108 	.word	0x20000108

0800e42c <abort>:
 800e42c:	b508      	push	{r3, lr}
 800e42e:	2006      	movs	r0, #6
 800e430:	f000 fa08 	bl	800e844 <raise>
 800e434:	2001      	movs	r0, #1
 800e436:	f7f3 fbb7 	bl	8001ba8 <_exit>

0800e43a <_malloc_usable_size_r>:
 800e43a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e43e:	1f18      	subs	r0, r3, #4
 800e440:	2b00      	cmp	r3, #0
 800e442:	bfbc      	itt	lt
 800e444:	580b      	ldrlt	r3, [r1, r0]
 800e446:	18c0      	addlt	r0, r0, r3
 800e448:	4770      	bx	lr

0800e44a <__sfputc_r>:
 800e44a:	6893      	ldr	r3, [r2, #8]
 800e44c:	3b01      	subs	r3, #1
 800e44e:	2b00      	cmp	r3, #0
 800e450:	b410      	push	{r4}
 800e452:	6093      	str	r3, [r2, #8]
 800e454:	da08      	bge.n	800e468 <__sfputc_r+0x1e>
 800e456:	6994      	ldr	r4, [r2, #24]
 800e458:	42a3      	cmp	r3, r4
 800e45a:	db01      	blt.n	800e460 <__sfputc_r+0x16>
 800e45c:	290a      	cmp	r1, #10
 800e45e:	d103      	bne.n	800e468 <__sfputc_r+0x1e>
 800e460:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e464:	f000 b932 	b.w	800e6cc <__swbuf_r>
 800e468:	6813      	ldr	r3, [r2, #0]
 800e46a:	1c58      	adds	r0, r3, #1
 800e46c:	6010      	str	r0, [r2, #0]
 800e46e:	7019      	strb	r1, [r3, #0]
 800e470:	4608      	mov	r0, r1
 800e472:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <__sfputs_r>:
 800e478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e47a:	4606      	mov	r6, r0
 800e47c:	460f      	mov	r7, r1
 800e47e:	4614      	mov	r4, r2
 800e480:	18d5      	adds	r5, r2, r3
 800e482:	42ac      	cmp	r4, r5
 800e484:	d101      	bne.n	800e48a <__sfputs_r+0x12>
 800e486:	2000      	movs	r0, #0
 800e488:	e007      	b.n	800e49a <__sfputs_r+0x22>
 800e48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e48e:	463a      	mov	r2, r7
 800e490:	4630      	mov	r0, r6
 800e492:	f7ff ffda 	bl	800e44a <__sfputc_r>
 800e496:	1c43      	adds	r3, r0, #1
 800e498:	d1f3      	bne.n	800e482 <__sfputs_r+0xa>
 800e49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e49c <_vfiprintf_r>:
 800e49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a0:	460d      	mov	r5, r1
 800e4a2:	b09d      	sub	sp, #116	@ 0x74
 800e4a4:	4614      	mov	r4, r2
 800e4a6:	4698      	mov	r8, r3
 800e4a8:	4606      	mov	r6, r0
 800e4aa:	b118      	cbz	r0, 800e4b4 <_vfiprintf_r+0x18>
 800e4ac:	6a03      	ldr	r3, [r0, #32]
 800e4ae:	b90b      	cbnz	r3, 800e4b4 <_vfiprintf_r+0x18>
 800e4b0:	f7fc fdaa 	bl	800b008 <__sinit>
 800e4b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4b6:	07d9      	lsls	r1, r3, #31
 800e4b8:	d405      	bmi.n	800e4c6 <_vfiprintf_r+0x2a>
 800e4ba:	89ab      	ldrh	r3, [r5, #12]
 800e4bc:	059a      	lsls	r2, r3, #22
 800e4be:	d402      	bmi.n	800e4c6 <_vfiprintf_r+0x2a>
 800e4c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4c2:	f7fc ff02 	bl	800b2ca <__retarget_lock_acquire_recursive>
 800e4c6:	89ab      	ldrh	r3, [r5, #12]
 800e4c8:	071b      	lsls	r3, r3, #28
 800e4ca:	d501      	bpl.n	800e4d0 <_vfiprintf_r+0x34>
 800e4cc:	692b      	ldr	r3, [r5, #16]
 800e4ce:	b99b      	cbnz	r3, 800e4f8 <_vfiprintf_r+0x5c>
 800e4d0:	4629      	mov	r1, r5
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f000 f938 	bl	800e748 <__swsetup_r>
 800e4d8:	b170      	cbz	r0, 800e4f8 <_vfiprintf_r+0x5c>
 800e4da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4dc:	07dc      	lsls	r4, r3, #31
 800e4de:	d504      	bpl.n	800e4ea <_vfiprintf_r+0x4e>
 800e4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e4:	b01d      	add	sp, #116	@ 0x74
 800e4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ea:	89ab      	ldrh	r3, [r5, #12]
 800e4ec:	0598      	lsls	r0, r3, #22
 800e4ee:	d4f7      	bmi.n	800e4e0 <_vfiprintf_r+0x44>
 800e4f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4f2:	f7fc feeb 	bl	800b2cc <__retarget_lock_release_recursive>
 800e4f6:	e7f3      	b.n	800e4e0 <_vfiprintf_r+0x44>
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4fc:	2320      	movs	r3, #32
 800e4fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e502:	f8cd 800c 	str.w	r8, [sp, #12]
 800e506:	2330      	movs	r3, #48	@ 0x30
 800e508:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e6b8 <_vfiprintf_r+0x21c>
 800e50c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e510:	f04f 0901 	mov.w	r9, #1
 800e514:	4623      	mov	r3, r4
 800e516:	469a      	mov	sl, r3
 800e518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e51c:	b10a      	cbz	r2, 800e522 <_vfiprintf_r+0x86>
 800e51e:	2a25      	cmp	r2, #37	@ 0x25
 800e520:	d1f9      	bne.n	800e516 <_vfiprintf_r+0x7a>
 800e522:	ebba 0b04 	subs.w	fp, sl, r4
 800e526:	d00b      	beq.n	800e540 <_vfiprintf_r+0xa4>
 800e528:	465b      	mov	r3, fp
 800e52a:	4622      	mov	r2, r4
 800e52c:	4629      	mov	r1, r5
 800e52e:	4630      	mov	r0, r6
 800e530:	f7ff ffa2 	bl	800e478 <__sfputs_r>
 800e534:	3001      	adds	r0, #1
 800e536:	f000 80a7 	beq.w	800e688 <_vfiprintf_r+0x1ec>
 800e53a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e53c:	445a      	add	r2, fp
 800e53e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e540:	f89a 3000 	ldrb.w	r3, [sl]
 800e544:	2b00      	cmp	r3, #0
 800e546:	f000 809f 	beq.w	800e688 <_vfiprintf_r+0x1ec>
 800e54a:	2300      	movs	r3, #0
 800e54c:	f04f 32ff 	mov.w	r2, #4294967295
 800e550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e554:	f10a 0a01 	add.w	sl, sl, #1
 800e558:	9304      	str	r3, [sp, #16]
 800e55a:	9307      	str	r3, [sp, #28]
 800e55c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e560:	931a      	str	r3, [sp, #104]	@ 0x68
 800e562:	4654      	mov	r4, sl
 800e564:	2205      	movs	r2, #5
 800e566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e56a:	4853      	ldr	r0, [pc, #332]	@ (800e6b8 <_vfiprintf_r+0x21c>)
 800e56c:	f7f1 fe30 	bl	80001d0 <memchr>
 800e570:	9a04      	ldr	r2, [sp, #16]
 800e572:	b9d8      	cbnz	r0, 800e5ac <_vfiprintf_r+0x110>
 800e574:	06d1      	lsls	r1, r2, #27
 800e576:	bf44      	itt	mi
 800e578:	2320      	movmi	r3, #32
 800e57a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e57e:	0713      	lsls	r3, r2, #28
 800e580:	bf44      	itt	mi
 800e582:	232b      	movmi	r3, #43	@ 0x2b
 800e584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e588:	f89a 3000 	ldrb.w	r3, [sl]
 800e58c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e58e:	d015      	beq.n	800e5bc <_vfiprintf_r+0x120>
 800e590:	9a07      	ldr	r2, [sp, #28]
 800e592:	4654      	mov	r4, sl
 800e594:	2000      	movs	r0, #0
 800e596:	f04f 0c0a 	mov.w	ip, #10
 800e59a:	4621      	mov	r1, r4
 800e59c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5a0:	3b30      	subs	r3, #48	@ 0x30
 800e5a2:	2b09      	cmp	r3, #9
 800e5a4:	d94b      	bls.n	800e63e <_vfiprintf_r+0x1a2>
 800e5a6:	b1b0      	cbz	r0, 800e5d6 <_vfiprintf_r+0x13a>
 800e5a8:	9207      	str	r2, [sp, #28]
 800e5aa:	e014      	b.n	800e5d6 <_vfiprintf_r+0x13a>
 800e5ac:	eba0 0308 	sub.w	r3, r0, r8
 800e5b0:	fa09 f303 	lsl.w	r3, r9, r3
 800e5b4:	4313      	orrs	r3, r2
 800e5b6:	9304      	str	r3, [sp, #16]
 800e5b8:	46a2      	mov	sl, r4
 800e5ba:	e7d2      	b.n	800e562 <_vfiprintf_r+0xc6>
 800e5bc:	9b03      	ldr	r3, [sp, #12]
 800e5be:	1d19      	adds	r1, r3, #4
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	9103      	str	r1, [sp, #12]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	bfbb      	ittet	lt
 800e5c8:	425b      	neglt	r3, r3
 800e5ca:	f042 0202 	orrlt.w	r2, r2, #2
 800e5ce:	9307      	strge	r3, [sp, #28]
 800e5d0:	9307      	strlt	r3, [sp, #28]
 800e5d2:	bfb8      	it	lt
 800e5d4:	9204      	strlt	r2, [sp, #16]
 800e5d6:	7823      	ldrb	r3, [r4, #0]
 800e5d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5da:	d10a      	bne.n	800e5f2 <_vfiprintf_r+0x156>
 800e5dc:	7863      	ldrb	r3, [r4, #1]
 800e5de:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5e0:	d132      	bne.n	800e648 <_vfiprintf_r+0x1ac>
 800e5e2:	9b03      	ldr	r3, [sp, #12]
 800e5e4:	1d1a      	adds	r2, r3, #4
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	9203      	str	r2, [sp, #12]
 800e5ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5ee:	3402      	adds	r4, #2
 800e5f0:	9305      	str	r3, [sp, #20]
 800e5f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e6c8 <_vfiprintf_r+0x22c>
 800e5f6:	7821      	ldrb	r1, [r4, #0]
 800e5f8:	2203      	movs	r2, #3
 800e5fa:	4650      	mov	r0, sl
 800e5fc:	f7f1 fde8 	bl	80001d0 <memchr>
 800e600:	b138      	cbz	r0, 800e612 <_vfiprintf_r+0x176>
 800e602:	9b04      	ldr	r3, [sp, #16]
 800e604:	eba0 000a 	sub.w	r0, r0, sl
 800e608:	2240      	movs	r2, #64	@ 0x40
 800e60a:	4082      	lsls	r2, r0
 800e60c:	4313      	orrs	r3, r2
 800e60e:	3401      	adds	r4, #1
 800e610:	9304      	str	r3, [sp, #16]
 800e612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e616:	4829      	ldr	r0, [pc, #164]	@ (800e6bc <_vfiprintf_r+0x220>)
 800e618:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e61c:	2206      	movs	r2, #6
 800e61e:	f7f1 fdd7 	bl	80001d0 <memchr>
 800e622:	2800      	cmp	r0, #0
 800e624:	d03f      	beq.n	800e6a6 <_vfiprintf_r+0x20a>
 800e626:	4b26      	ldr	r3, [pc, #152]	@ (800e6c0 <_vfiprintf_r+0x224>)
 800e628:	bb1b      	cbnz	r3, 800e672 <_vfiprintf_r+0x1d6>
 800e62a:	9b03      	ldr	r3, [sp, #12]
 800e62c:	3307      	adds	r3, #7
 800e62e:	f023 0307 	bic.w	r3, r3, #7
 800e632:	3308      	adds	r3, #8
 800e634:	9303      	str	r3, [sp, #12]
 800e636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e638:	443b      	add	r3, r7
 800e63a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e63c:	e76a      	b.n	800e514 <_vfiprintf_r+0x78>
 800e63e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e642:	460c      	mov	r4, r1
 800e644:	2001      	movs	r0, #1
 800e646:	e7a8      	b.n	800e59a <_vfiprintf_r+0xfe>
 800e648:	2300      	movs	r3, #0
 800e64a:	3401      	adds	r4, #1
 800e64c:	9305      	str	r3, [sp, #20]
 800e64e:	4619      	mov	r1, r3
 800e650:	f04f 0c0a 	mov.w	ip, #10
 800e654:	4620      	mov	r0, r4
 800e656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e65a:	3a30      	subs	r2, #48	@ 0x30
 800e65c:	2a09      	cmp	r2, #9
 800e65e:	d903      	bls.n	800e668 <_vfiprintf_r+0x1cc>
 800e660:	2b00      	cmp	r3, #0
 800e662:	d0c6      	beq.n	800e5f2 <_vfiprintf_r+0x156>
 800e664:	9105      	str	r1, [sp, #20]
 800e666:	e7c4      	b.n	800e5f2 <_vfiprintf_r+0x156>
 800e668:	fb0c 2101 	mla	r1, ip, r1, r2
 800e66c:	4604      	mov	r4, r0
 800e66e:	2301      	movs	r3, #1
 800e670:	e7f0      	b.n	800e654 <_vfiprintf_r+0x1b8>
 800e672:	ab03      	add	r3, sp, #12
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	462a      	mov	r2, r5
 800e678:	4b12      	ldr	r3, [pc, #72]	@ (800e6c4 <_vfiprintf_r+0x228>)
 800e67a:	a904      	add	r1, sp, #16
 800e67c:	4630      	mov	r0, r6
 800e67e:	f7fb fe73 	bl	800a368 <_printf_float>
 800e682:	4607      	mov	r7, r0
 800e684:	1c78      	adds	r0, r7, #1
 800e686:	d1d6      	bne.n	800e636 <_vfiprintf_r+0x19a>
 800e688:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e68a:	07d9      	lsls	r1, r3, #31
 800e68c:	d405      	bmi.n	800e69a <_vfiprintf_r+0x1fe>
 800e68e:	89ab      	ldrh	r3, [r5, #12]
 800e690:	059a      	lsls	r2, r3, #22
 800e692:	d402      	bmi.n	800e69a <_vfiprintf_r+0x1fe>
 800e694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e696:	f7fc fe19 	bl	800b2cc <__retarget_lock_release_recursive>
 800e69a:	89ab      	ldrh	r3, [r5, #12]
 800e69c:	065b      	lsls	r3, r3, #25
 800e69e:	f53f af1f 	bmi.w	800e4e0 <_vfiprintf_r+0x44>
 800e6a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e6a4:	e71e      	b.n	800e4e4 <_vfiprintf_r+0x48>
 800e6a6:	ab03      	add	r3, sp, #12
 800e6a8:	9300      	str	r3, [sp, #0]
 800e6aa:	462a      	mov	r2, r5
 800e6ac:	4b05      	ldr	r3, [pc, #20]	@ (800e6c4 <_vfiprintf_r+0x228>)
 800e6ae:	a904      	add	r1, sp, #16
 800e6b0:	4630      	mov	r0, r6
 800e6b2:	f7fc f8f1 	bl	800a898 <_printf_i>
 800e6b6:	e7e4      	b.n	800e682 <_vfiprintf_r+0x1e6>
 800e6b8:	0800ec11 	.word	0x0800ec11
 800e6bc:	0800ec1b 	.word	0x0800ec1b
 800e6c0:	0800a369 	.word	0x0800a369
 800e6c4:	0800e479 	.word	0x0800e479
 800e6c8:	0800ec17 	.word	0x0800ec17

0800e6cc <__swbuf_r>:
 800e6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ce:	460e      	mov	r6, r1
 800e6d0:	4614      	mov	r4, r2
 800e6d2:	4605      	mov	r5, r0
 800e6d4:	b118      	cbz	r0, 800e6de <__swbuf_r+0x12>
 800e6d6:	6a03      	ldr	r3, [r0, #32]
 800e6d8:	b90b      	cbnz	r3, 800e6de <__swbuf_r+0x12>
 800e6da:	f7fc fc95 	bl	800b008 <__sinit>
 800e6de:	69a3      	ldr	r3, [r4, #24]
 800e6e0:	60a3      	str	r3, [r4, #8]
 800e6e2:	89a3      	ldrh	r3, [r4, #12]
 800e6e4:	071a      	lsls	r2, r3, #28
 800e6e6:	d501      	bpl.n	800e6ec <__swbuf_r+0x20>
 800e6e8:	6923      	ldr	r3, [r4, #16]
 800e6ea:	b943      	cbnz	r3, 800e6fe <__swbuf_r+0x32>
 800e6ec:	4621      	mov	r1, r4
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f000 f82a 	bl	800e748 <__swsetup_r>
 800e6f4:	b118      	cbz	r0, 800e6fe <__swbuf_r+0x32>
 800e6f6:	f04f 37ff 	mov.w	r7, #4294967295
 800e6fa:	4638      	mov	r0, r7
 800e6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6fe:	6823      	ldr	r3, [r4, #0]
 800e700:	6922      	ldr	r2, [r4, #16]
 800e702:	1a98      	subs	r0, r3, r2
 800e704:	6963      	ldr	r3, [r4, #20]
 800e706:	b2f6      	uxtb	r6, r6
 800e708:	4283      	cmp	r3, r0
 800e70a:	4637      	mov	r7, r6
 800e70c:	dc05      	bgt.n	800e71a <__swbuf_r+0x4e>
 800e70e:	4621      	mov	r1, r4
 800e710:	4628      	mov	r0, r5
 800e712:	f7ff fa47 	bl	800dba4 <_fflush_r>
 800e716:	2800      	cmp	r0, #0
 800e718:	d1ed      	bne.n	800e6f6 <__swbuf_r+0x2a>
 800e71a:	68a3      	ldr	r3, [r4, #8]
 800e71c:	3b01      	subs	r3, #1
 800e71e:	60a3      	str	r3, [r4, #8]
 800e720:	6823      	ldr	r3, [r4, #0]
 800e722:	1c5a      	adds	r2, r3, #1
 800e724:	6022      	str	r2, [r4, #0]
 800e726:	701e      	strb	r6, [r3, #0]
 800e728:	6962      	ldr	r2, [r4, #20]
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d004      	beq.n	800e73a <__swbuf_r+0x6e>
 800e730:	89a3      	ldrh	r3, [r4, #12]
 800e732:	07db      	lsls	r3, r3, #31
 800e734:	d5e1      	bpl.n	800e6fa <__swbuf_r+0x2e>
 800e736:	2e0a      	cmp	r6, #10
 800e738:	d1df      	bne.n	800e6fa <__swbuf_r+0x2e>
 800e73a:	4621      	mov	r1, r4
 800e73c:	4628      	mov	r0, r5
 800e73e:	f7ff fa31 	bl	800dba4 <_fflush_r>
 800e742:	2800      	cmp	r0, #0
 800e744:	d0d9      	beq.n	800e6fa <__swbuf_r+0x2e>
 800e746:	e7d6      	b.n	800e6f6 <__swbuf_r+0x2a>

0800e748 <__swsetup_r>:
 800e748:	b538      	push	{r3, r4, r5, lr}
 800e74a:	4b29      	ldr	r3, [pc, #164]	@ (800e7f0 <__swsetup_r+0xa8>)
 800e74c:	4605      	mov	r5, r0
 800e74e:	6818      	ldr	r0, [r3, #0]
 800e750:	460c      	mov	r4, r1
 800e752:	b118      	cbz	r0, 800e75c <__swsetup_r+0x14>
 800e754:	6a03      	ldr	r3, [r0, #32]
 800e756:	b90b      	cbnz	r3, 800e75c <__swsetup_r+0x14>
 800e758:	f7fc fc56 	bl	800b008 <__sinit>
 800e75c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e760:	0719      	lsls	r1, r3, #28
 800e762:	d422      	bmi.n	800e7aa <__swsetup_r+0x62>
 800e764:	06da      	lsls	r2, r3, #27
 800e766:	d407      	bmi.n	800e778 <__swsetup_r+0x30>
 800e768:	2209      	movs	r2, #9
 800e76a:	602a      	str	r2, [r5, #0]
 800e76c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e770:	81a3      	strh	r3, [r4, #12]
 800e772:	f04f 30ff 	mov.w	r0, #4294967295
 800e776:	e033      	b.n	800e7e0 <__swsetup_r+0x98>
 800e778:	0758      	lsls	r0, r3, #29
 800e77a:	d512      	bpl.n	800e7a2 <__swsetup_r+0x5a>
 800e77c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e77e:	b141      	cbz	r1, 800e792 <__swsetup_r+0x4a>
 800e780:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e784:	4299      	cmp	r1, r3
 800e786:	d002      	beq.n	800e78e <__swsetup_r+0x46>
 800e788:	4628      	mov	r0, r5
 800e78a:	f7fd fc01 	bl	800bf90 <_free_r>
 800e78e:	2300      	movs	r3, #0
 800e790:	6363      	str	r3, [r4, #52]	@ 0x34
 800e792:	89a3      	ldrh	r3, [r4, #12]
 800e794:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e798:	81a3      	strh	r3, [r4, #12]
 800e79a:	2300      	movs	r3, #0
 800e79c:	6063      	str	r3, [r4, #4]
 800e79e:	6923      	ldr	r3, [r4, #16]
 800e7a0:	6023      	str	r3, [r4, #0]
 800e7a2:	89a3      	ldrh	r3, [r4, #12]
 800e7a4:	f043 0308 	orr.w	r3, r3, #8
 800e7a8:	81a3      	strh	r3, [r4, #12]
 800e7aa:	6923      	ldr	r3, [r4, #16]
 800e7ac:	b94b      	cbnz	r3, 800e7c2 <__swsetup_r+0x7a>
 800e7ae:	89a3      	ldrh	r3, [r4, #12]
 800e7b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e7b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7b8:	d003      	beq.n	800e7c2 <__swsetup_r+0x7a>
 800e7ba:	4621      	mov	r1, r4
 800e7bc:	4628      	mov	r0, r5
 800e7be:	f000 f883 	bl	800e8c8 <__smakebuf_r>
 800e7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7c6:	f013 0201 	ands.w	r2, r3, #1
 800e7ca:	d00a      	beq.n	800e7e2 <__swsetup_r+0x9a>
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	60a2      	str	r2, [r4, #8]
 800e7d0:	6962      	ldr	r2, [r4, #20]
 800e7d2:	4252      	negs	r2, r2
 800e7d4:	61a2      	str	r2, [r4, #24]
 800e7d6:	6922      	ldr	r2, [r4, #16]
 800e7d8:	b942      	cbnz	r2, 800e7ec <__swsetup_r+0xa4>
 800e7da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e7de:	d1c5      	bne.n	800e76c <__swsetup_r+0x24>
 800e7e0:	bd38      	pop	{r3, r4, r5, pc}
 800e7e2:	0799      	lsls	r1, r3, #30
 800e7e4:	bf58      	it	pl
 800e7e6:	6962      	ldrpl	r2, [r4, #20]
 800e7e8:	60a2      	str	r2, [r4, #8]
 800e7ea:	e7f4      	b.n	800e7d6 <__swsetup_r+0x8e>
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	e7f7      	b.n	800e7e0 <__swsetup_r+0x98>
 800e7f0:	20000108 	.word	0x20000108

0800e7f4 <_raise_r>:
 800e7f4:	291f      	cmp	r1, #31
 800e7f6:	b538      	push	{r3, r4, r5, lr}
 800e7f8:	4605      	mov	r5, r0
 800e7fa:	460c      	mov	r4, r1
 800e7fc:	d904      	bls.n	800e808 <_raise_r+0x14>
 800e7fe:	2316      	movs	r3, #22
 800e800:	6003      	str	r3, [r0, #0]
 800e802:	f04f 30ff 	mov.w	r0, #4294967295
 800e806:	bd38      	pop	{r3, r4, r5, pc}
 800e808:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e80a:	b112      	cbz	r2, 800e812 <_raise_r+0x1e>
 800e80c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e810:	b94b      	cbnz	r3, 800e826 <_raise_r+0x32>
 800e812:	4628      	mov	r0, r5
 800e814:	f000 f830 	bl	800e878 <_getpid_r>
 800e818:	4622      	mov	r2, r4
 800e81a:	4601      	mov	r1, r0
 800e81c:	4628      	mov	r0, r5
 800e81e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e822:	f000 b817 	b.w	800e854 <_kill_r>
 800e826:	2b01      	cmp	r3, #1
 800e828:	d00a      	beq.n	800e840 <_raise_r+0x4c>
 800e82a:	1c59      	adds	r1, r3, #1
 800e82c:	d103      	bne.n	800e836 <_raise_r+0x42>
 800e82e:	2316      	movs	r3, #22
 800e830:	6003      	str	r3, [r0, #0]
 800e832:	2001      	movs	r0, #1
 800e834:	e7e7      	b.n	800e806 <_raise_r+0x12>
 800e836:	2100      	movs	r1, #0
 800e838:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e83c:	4620      	mov	r0, r4
 800e83e:	4798      	blx	r3
 800e840:	2000      	movs	r0, #0
 800e842:	e7e0      	b.n	800e806 <_raise_r+0x12>

0800e844 <raise>:
 800e844:	4b02      	ldr	r3, [pc, #8]	@ (800e850 <raise+0xc>)
 800e846:	4601      	mov	r1, r0
 800e848:	6818      	ldr	r0, [r3, #0]
 800e84a:	f7ff bfd3 	b.w	800e7f4 <_raise_r>
 800e84e:	bf00      	nop
 800e850:	20000108 	.word	0x20000108

0800e854 <_kill_r>:
 800e854:	b538      	push	{r3, r4, r5, lr}
 800e856:	4d07      	ldr	r5, [pc, #28]	@ (800e874 <_kill_r+0x20>)
 800e858:	2300      	movs	r3, #0
 800e85a:	4604      	mov	r4, r0
 800e85c:	4608      	mov	r0, r1
 800e85e:	4611      	mov	r1, r2
 800e860:	602b      	str	r3, [r5, #0]
 800e862:	f7f3 f991 	bl	8001b88 <_kill>
 800e866:	1c43      	adds	r3, r0, #1
 800e868:	d102      	bne.n	800e870 <_kill_r+0x1c>
 800e86a:	682b      	ldr	r3, [r5, #0]
 800e86c:	b103      	cbz	r3, 800e870 <_kill_r+0x1c>
 800e86e:	6023      	str	r3, [r4, #0]
 800e870:	bd38      	pop	{r3, r4, r5, pc}
 800e872:	bf00      	nop
 800e874:	20006f7c 	.word	0x20006f7c

0800e878 <_getpid_r>:
 800e878:	f7f3 b97e 	b.w	8001b78 <_getpid>

0800e87c <__swhatbuf_r>:
 800e87c:	b570      	push	{r4, r5, r6, lr}
 800e87e:	460c      	mov	r4, r1
 800e880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e884:	2900      	cmp	r1, #0
 800e886:	b096      	sub	sp, #88	@ 0x58
 800e888:	4615      	mov	r5, r2
 800e88a:	461e      	mov	r6, r3
 800e88c:	da0d      	bge.n	800e8aa <__swhatbuf_r+0x2e>
 800e88e:	89a3      	ldrh	r3, [r4, #12]
 800e890:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e894:	f04f 0100 	mov.w	r1, #0
 800e898:	bf14      	ite	ne
 800e89a:	2340      	movne	r3, #64	@ 0x40
 800e89c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	6031      	str	r1, [r6, #0]
 800e8a4:	602b      	str	r3, [r5, #0]
 800e8a6:	b016      	add	sp, #88	@ 0x58
 800e8a8:	bd70      	pop	{r4, r5, r6, pc}
 800e8aa:	466a      	mov	r2, sp
 800e8ac:	f000 f848 	bl	800e940 <_fstat_r>
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	dbec      	blt.n	800e88e <__swhatbuf_r+0x12>
 800e8b4:	9901      	ldr	r1, [sp, #4]
 800e8b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e8ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e8be:	4259      	negs	r1, r3
 800e8c0:	4159      	adcs	r1, r3
 800e8c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e8c6:	e7eb      	b.n	800e8a0 <__swhatbuf_r+0x24>

0800e8c8 <__smakebuf_r>:
 800e8c8:	898b      	ldrh	r3, [r1, #12]
 800e8ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8cc:	079d      	lsls	r5, r3, #30
 800e8ce:	4606      	mov	r6, r0
 800e8d0:	460c      	mov	r4, r1
 800e8d2:	d507      	bpl.n	800e8e4 <__smakebuf_r+0x1c>
 800e8d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e8d8:	6023      	str	r3, [r4, #0]
 800e8da:	6123      	str	r3, [r4, #16]
 800e8dc:	2301      	movs	r3, #1
 800e8de:	6163      	str	r3, [r4, #20]
 800e8e0:	b003      	add	sp, #12
 800e8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8e4:	ab01      	add	r3, sp, #4
 800e8e6:	466a      	mov	r2, sp
 800e8e8:	f7ff ffc8 	bl	800e87c <__swhatbuf_r>
 800e8ec:	9f00      	ldr	r7, [sp, #0]
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	f7fd fbc0 	bl	800c078 <_malloc_r>
 800e8f8:	b948      	cbnz	r0, 800e90e <__smakebuf_r+0x46>
 800e8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8fe:	059a      	lsls	r2, r3, #22
 800e900:	d4ee      	bmi.n	800e8e0 <__smakebuf_r+0x18>
 800e902:	f023 0303 	bic.w	r3, r3, #3
 800e906:	f043 0302 	orr.w	r3, r3, #2
 800e90a:	81a3      	strh	r3, [r4, #12]
 800e90c:	e7e2      	b.n	800e8d4 <__smakebuf_r+0xc>
 800e90e:	89a3      	ldrh	r3, [r4, #12]
 800e910:	6020      	str	r0, [r4, #0]
 800e912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e916:	81a3      	strh	r3, [r4, #12]
 800e918:	9b01      	ldr	r3, [sp, #4]
 800e91a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e91e:	b15b      	cbz	r3, 800e938 <__smakebuf_r+0x70>
 800e920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e924:	4630      	mov	r0, r6
 800e926:	f000 f81d 	bl	800e964 <_isatty_r>
 800e92a:	b128      	cbz	r0, 800e938 <__smakebuf_r+0x70>
 800e92c:	89a3      	ldrh	r3, [r4, #12]
 800e92e:	f023 0303 	bic.w	r3, r3, #3
 800e932:	f043 0301 	orr.w	r3, r3, #1
 800e936:	81a3      	strh	r3, [r4, #12]
 800e938:	89a3      	ldrh	r3, [r4, #12]
 800e93a:	431d      	orrs	r5, r3
 800e93c:	81a5      	strh	r5, [r4, #12]
 800e93e:	e7cf      	b.n	800e8e0 <__smakebuf_r+0x18>

0800e940 <_fstat_r>:
 800e940:	b538      	push	{r3, r4, r5, lr}
 800e942:	4d07      	ldr	r5, [pc, #28]	@ (800e960 <_fstat_r+0x20>)
 800e944:	2300      	movs	r3, #0
 800e946:	4604      	mov	r4, r0
 800e948:	4608      	mov	r0, r1
 800e94a:	4611      	mov	r1, r2
 800e94c:	602b      	str	r3, [r5, #0]
 800e94e:	f7f3 f97b 	bl	8001c48 <_fstat>
 800e952:	1c43      	adds	r3, r0, #1
 800e954:	d102      	bne.n	800e95c <_fstat_r+0x1c>
 800e956:	682b      	ldr	r3, [r5, #0]
 800e958:	b103      	cbz	r3, 800e95c <_fstat_r+0x1c>
 800e95a:	6023      	str	r3, [r4, #0]
 800e95c:	bd38      	pop	{r3, r4, r5, pc}
 800e95e:	bf00      	nop
 800e960:	20006f7c 	.word	0x20006f7c

0800e964 <_isatty_r>:
 800e964:	b538      	push	{r3, r4, r5, lr}
 800e966:	4d06      	ldr	r5, [pc, #24]	@ (800e980 <_isatty_r+0x1c>)
 800e968:	2300      	movs	r3, #0
 800e96a:	4604      	mov	r4, r0
 800e96c:	4608      	mov	r0, r1
 800e96e:	602b      	str	r3, [r5, #0]
 800e970:	f7f3 f97a 	bl	8001c68 <_isatty>
 800e974:	1c43      	adds	r3, r0, #1
 800e976:	d102      	bne.n	800e97e <_isatty_r+0x1a>
 800e978:	682b      	ldr	r3, [r5, #0]
 800e97a:	b103      	cbz	r3, 800e97e <_isatty_r+0x1a>
 800e97c:	6023      	str	r3, [r4, #0]
 800e97e:	bd38      	pop	{r3, r4, r5, pc}
 800e980:	20006f7c 	.word	0x20006f7c

0800e984 <_init>:
 800e984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e986:	bf00      	nop
 800e988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e98a:	bc08      	pop	{r3}
 800e98c:	469e      	mov	lr, r3
 800e98e:	4770      	bx	lr

0800e990 <_fini>:
 800e990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e992:	bf00      	nop
 800e994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e996:	bc08      	pop	{r3}
 800e998:	469e      	mov	lr, r3
 800e99a:	4770      	bx	lr
