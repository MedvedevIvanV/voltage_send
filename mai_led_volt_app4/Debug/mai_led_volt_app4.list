
mai_led_volt_app4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005a808  08012b98  08012b98  00013b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806d3a0  0806d3a0  0006f2d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0806d3a0  0806d3a0  0006e3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806d3a8  0806d3a8  0006f2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806d3a8  0806d3a8  0006e3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0806d3ac  0806d3ac  0006e3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0806d3b0  0006f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0006f2d0  2**0
                  CONTENTS
 10 .bss          0001a04c  200002d0  200002d0  0006f2d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001a31c  2001a31c  0006f2d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0006f2d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025cc9  00000000  00000000  0006f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c15  00000000  00000000  00094fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e58  00000000  00000000  0009abe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016b6  00000000  00000000  0009ca38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026157  00000000  00000000  0009e0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024e89  00000000  00000000  000c4245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3cd5  00000000  00000000  000e90ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  001bcda3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097e4  00000000  00000000  001bce60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  001c6644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000e41  00000000  00000000  001c66b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000098  00000000  00000000  001c74f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012b7c 	.word	0x08012b7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	08012b7c 	.word	0x08012b7c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <SendUSBDebugMessage>:

/**
  * @brief Отправка отладочного сообщения через USB
  * @param message Текст сообщения
  */
void SendUSBDebugMessage(const char *message) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
    if (USB_CONNECTED()) {
 8001048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800104c:	4810      	ldr	r0, [pc, #64]	@ (8001090 <SendUSBDebugMessage+0x50>)
 800104e:	f003 fccb 	bl	80049e8 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d017      	beq.n	8001088 <SendUSBDebugMessage+0x48>
        snprintf(usb_msg, sizeof(usb_msg), "[%lu] %s\r\n", HAL_GetTick(), message);
 8001058:	f002 fee0 	bl	8003e1c <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4613      	mov	r3, r2
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <SendUSBDebugMessage+0x54>)
 8001066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106a:	480b      	ldr	r0, [pc, #44]	@ (8001098 <SendUSBDebugMessage+0x58>)
 800106c:	f00e faae 	bl	800f5cc <sniprintf>
        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <SendUSBDebugMessage+0x58>)
 8001072:	f7ff f90d 	bl	8000290 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29b      	uxth	r3, r3
 800107a:	4619      	mov	r1, r3
 800107c:	4806      	ldr	r0, [pc, #24]	@ (8001098 <SendUSBDebugMessage+0x58>)
 800107e:	f00b fe85 	bl	800cd8c <CDC_Transmit_FS>
        HAL_Delay(10); // Задержка для стабильной работы USB
 8001082:	200a      	movs	r0, #10
 8001084:	f002 fed6 	bl	8003e34 <HAL_Delay>
    }
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40020000 	.word	0x40020000
 8001094:	08012b98 	.word	0x08012b98
 8001098:	20000438 	.word	0x20000438

0800109c <GenerateStartPulse>:

/**
  * @brief Генерация стартового импульса для ПЛИС
  * @note Импульс длительностью 200 нс на пине PD6
  */
void GenerateStartPulse(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
    // Устанавливаем высокий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2140      	movs	r1, #64	@ 0x40
 80010a6:	480a      	ldr	r0, [pc, #40]	@ (80010d0 <GenerateStartPulse+0x34>)
 80010a8:	f003 fcb6 	bl	8004a18 <HAL_GPIO_WritePin>

    // Задержка для формирования импульса 200 нс
    for(volatile int i = 0; i < 34; i++);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	e002      	b.n	80010b8 <GenerateStartPulse+0x1c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b21      	cmp	r3, #33	@ 0x21
 80010bc:	ddf9      	ble.n	80010b2 <GenerateStartPulse+0x16>

    // Устанавливаем низкий уровень на PD6
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2140      	movs	r1, #64	@ 0x40
 80010c2:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <GenerateStartPulse+0x34>)
 80010c4:	f003 fca8 	bl	8004a18 <HAL_GPIO_WritePin>

}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <ProcessUSBCommand>:

/**
  * @brief Обработка команд от USB - не использовать!
  * @param cmd Полученная команда
  */
void ProcessUSBCommand(uint8_t cmd) {
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
    switch(cmd) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b31      	cmp	r3, #49	@ 0x31
            break;

        default:
            // Неизвестная команда
          //  SendUSBDebugMessage("Unknown command received");
            break;
 80010e2:	bf00      	nop
    }
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <ParseParameters>:

/**
  * @brief Парсинг параметров из строки
  * @param params_str Строка с параметрами (после "SETPARAMS=")
  */
void ParseParameters(const char* params_str) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b0d2      	sub	sp, #328	@ 0x148
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80010fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80010fe:	6018      	str	r0, [r3, #0]
    char buffer[USB_RX_BUFFER_SIZE];
    strncpy(buffer, params_str, sizeof(buffer) - 1);
 8001100:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001104:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001108:	f107 000c 	add.w	r0, r7, #12
 800110c:	f240 122b 	movw	r2, #299	@ 0x12b
 8001110:	6819      	ldr	r1, [r3, #0]
 8001112:	f00e fb4b 	bl	800f7ac <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 8001116:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800111a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800111e:	2200      	movs	r2, #0
 8001120:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b

    // Загружаем текущие параметры (если еще не инициализированы)
    if (!parameters_initialized) {
 8001124:	4bb7      	ldr	r3, [pc, #732]	@ (8001404 <ParseParameters+0x314>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	f083 0301 	eor.w	r3, r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <ParseParameters+0x46>
        LoadParametersFromFlash();
 8001132:	f002 fa17 	bl	8003564 <LoadParametersFromFlash>
    }

    char* token = strtok(buffer, "|");
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	49b3      	ldr	r1, [pc, #716]	@ (8001408 <ParseParameters+0x318>)
 800113c:	4618      	mov	r0, r3
 800113e:	f00e fb49 	bl	800f7d4 <strtok>
 8001142:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144

    while (token != NULL) {
 8001146:	e14c      	b.n	80013e2 <ParseParameters+0x2f2>
        char* equals_sign = strchr(token, '=');
 8001148:	213d      	movs	r1, #61	@ 0x3d
 800114a:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 800114e:	f00e fb0e 	bl	800f76e <strchr>
 8001152:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
        if (equals_sign != NULL) {
 8001156:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 813b 	beq.w	80013d6 <ParseParameters+0x2e6>
            *equals_sign = '\0'; // Разделяем на имя и значение
 8001160:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
            char* param_name = token;
 8001168:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800116c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
            char* param_value = equals_sign + 1;
 8001170:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001174:	3301      	adds	r3, #1
 8001176:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

            // Парсим параметры
            if (strcmp(param_name, "wave_speed") == 0) {
 800117a:	49a4      	ldr	r1, [pc, #656]	@ (800140c <ParseParameters+0x31c>)
 800117c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001180:	f7ff f826 	bl	80001d0 <strcmp>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10d      	bne.n	80011a6 <ParseParameters+0xb6>
                params.wave_speed = atof(param_value);
 800118a:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800118e:	f00c fc25 	bl	800d9dc <atof>
 8001192:	ec53 2b10 	vmov	r2, r3, d0
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fd35 	bl	8000c08 <__aeabi_d2f>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a9b      	ldr	r2, [pc, #620]	@ (8001410 <ParseParameters+0x320>)
 80011a2:	6053      	str	r3, [r2, #4]
 80011a4:	e117      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "threshold") == 0) {
 80011a6:	499b      	ldr	r1, [pc, #620]	@ (8001414 <ParseParameters+0x324>)
 80011a8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80011ac:	f7ff f810 	bl	80001d0 <strcmp>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10d      	bne.n	80011d2 <ParseParameters+0xe2>
                params.threshold = atof(param_value);
 80011b6:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80011ba:	f00c fc0f 	bl	800d9dc <atof>
 80011be:	ec53 2b10 	vmov	r2, r3, d0
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fd1f 	bl	8000c08 <__aeabi_d2f>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a90      	ldr	r2, [pc, #576]	@ (8001410 <ParseParameters+0x320>)
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	e101      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "threshold_zero_crossing") == 0) {
 80011d2:	4991      	ldr	r1, [pc, #580]	@ (8001418 <ParseParameters+0x328>)
 80011d4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80011d8:	f7fe fffa 	bl	80001d0 <strcmp>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10d      	bne.n	80011fe <ParseParameters+0x10e>
                params.threshold_zero_crossing = atof(param_value);
 80011e2:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80011e6:	f00c fbf9 	bl	800d9dc <atof>
 80011ea:	ec53 2b10 	vmov	r2, r3, d0
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fd09 	bl	8000c08 <__aeabi_d2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a85      	ldr	r2, [pc, #532]	@ (8001410 <ParseParameters+0x320>)
 80011fa:	61d3      	str	r3, [r2, #28]
 80011fc:	e0eb      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "start_index") == 0) {
 80011fe:	4987      	ldr	r1, [pc, #540]	@ (800141c <ParseParameters+0x32c>)
 8001200:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001204:	f7fe ffe4 	bl	80001d0 <strcmp>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d108      	bne.n	8001220 <ParseParameters+0x130>
                params.start_index = atoi(param_value);
 800120e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001212:	f00c fbe6 	bl	800d9e2 <atoi>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	4b7d      	ldr	r3, [pc, #500]	@ (8001410 <ParseParameters+0x320>)
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e0da      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "probe_length") == 0) {
 8001220:	497f      	ldr	r1, [pc, #508]	@ (8001420 <ParseParameters+0x330>)
 8001222:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001226:	f7fe ffd3 	bl	80001d0 <strcmp>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d108      	bne.n	8001242 <ParseParameters+0x152>
                params.probe_length = atoi(param_value);
 8001230:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001234:	f00c fbd5 	bl	800d9e2 <atoi>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b74      	ldr	r3, [pc, #464]	@ (8001410 <ParseParameters+0x320>)
 800123e:	621a      	str	r2, [r3, #32]
 8001240:	e0c9      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "strobe_left1") == 0) {
 8001242:	4978      	ldr	r1, [pc, #480]	@ (8001424 <ParseParameters+0x334>)
 8001244:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001248:	f7fe ffc2 	bl	80001d0 <strcmp>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d108      	bne.n	8001264 <ParseParameters+0x174>
                params.first_left_strobe = atoi(param_value);
 8001252:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001256:	f00c fbc4 	bl	800d9e2 <atoi>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b6c      	ldr	r3, [pc, #432]	@ (8001410 <ParseParameters+0x320>)
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	e0b8      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "strobe_right1") == 0) {
 8001264:	4970      	ldr	r1, [pc, #448]	@ (8001428 <ParseParameters+0x338>)
 8001266:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800126a:	f7fe ffb1 	bl	80001d0 <strcmp>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d108      	bne.n	8001286 <ParseParameters+0x196>
                params.first_right_strobe = atoi(param_value);
 8001274:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001278:	f00c fbb3 	bl	800d9e2 <atoi>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	4b63      	ldr	r3, [pc, #396]	@ (8001410 <ParseParameters+0x320>)
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	e0a7      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "strobe_left2") == 0) {
 8001286:	4969      	ldr	r1, [pc, #420]	@ (800142c <ParseParameters+0x33c>)
 8001288:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800128c:	f7fe ffa0 	bl	80001d0 <strcmp>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d108      	bne.n	80012a8 <ParseParameters+0x1b8>
                params.second_left_strobe = atoi(param_value);
 8001296:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800129a:	f00c fba2 	bl	800d9e2 <atoi>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001410 <ParseParameters+0x320>)
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	e096      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "strobe_right2") == 0) {
 80012a8:	4961      	ldr	r1, [pc, #388]	@ (8001430 <ParseParameters+0x340>)
 80012aa:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012ae:	f7fe ff8f 	bl	80001d0 <strcmp>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d108      	bne.n	80012ca <ParseParameters+0x1da>
                params.second_right_strobe = atoi(param_value);
 80012b8:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012bc:	f00c fb91 	bl	800d9e2 <atoi>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b52      	ldr	r3, [pc, #328]	@ (8001410 <ParseParameters+0x320>)
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	e085      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "method") == 0) {
 80012ca:	495a      	ldr	r1, [pc, #360]	@ (8001434 <ParseParameters+0x344>)
 80012cc:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012d0:	f7fe ff7e 	bl	80001d0 <strcmp>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d108      	bne.n	80012ec <ParseParameters+0x1fc>
                params.method = atoi(param_value);
 80012da:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80012de:	f00c fb80 	bl	800d9e2 <atoi>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001410 <ParseParameters+0x320>)
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80012ea:	e074      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "end_index") == 0) {
 80012ec:	4952      	ldr	r1, [pc, #328]	@ (8001438 <ParseParameters+0x348>)
 80012ee:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80012f2:	f7fe ff6d 	bl	80001d0 <strcmp>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d108      	bne.n	800130e <ParseParameters+0x21e>
                params.end_index = atoi(param_value);
 80012fc:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001300:	f00c fb6f 	bl	800d9e2 <atoi>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b41      	ldr	r3, [pc, #260]	@ (8001410 <ParseParameters+0x320>)
 800130a:	629a      	str	r2, [r3, #40]	@ 0x28
 800130c:	e063      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "cycle_number") == 0) {
 800130e:	494b      	ldr	r1, [pc, #300]	@ (800143c <ParseParameters+0x34c>)
 8001310:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001314:	f7fe ff5c 	bl	80001d0 <strcmp>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d108      	bne.n	8001330 <ParseParameters+0x240>
                params.cycle_number = atoi(param_value);
 800131e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001322:	f00c fb5e 	bl	800d9e2 <atoi>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b39      	ldr	r3, [pc, #228]	@ (8001410 <ParseParameters+0x320>)
 800132c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800132e:	e052      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "sensor_number") == 0) {
 8001330:	4943      	ldr	r1, [pc, #268]	@ (8001440 <ParseParameters+0x350>)
 8001332:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001336:	f7fe ff4b 	bl	80001d0 <strcmp>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d10a      	bne.n	8001356 <ParseParameters+0x266>
                strncpy(params.sensor_number, param_value, sizeof(params.sensor_number) - 1);
 8001340:	2204      	movs	r2, #4
 8001342:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8001346:	483f      	ldr	r0, [pc, #252]	@ (8001444 <ParseParameters+0x354>)
 8001348:	f00e fa30 	bl	800f7ac <strncpy>
                params.sensor_number[sizeof(params.sensor_number) - 1] = '\0';
 800134c:	4b30      	ldr	r3, [pc, #192]	@ (8001410 <ParseParameters+0x320>)
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8001354:	e03f      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "gain") == 0) {
 8001356:	493c      	ldr	r1, [pc, #240]	@ (8001448 <ParseParameters+0x358>)
 8001358:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800135c:	f7fe ff38 	bl	80001d0 <strcmp>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10d      	bne.n	8001382 <ParseParameters+0x292>
                params.gain = atof(param_value);
 8001366:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800136a:	f00c fb37 	bl	800d9dc <atof>
 800136e:	ec53 2b10 	vmov	r2, r3, d0
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fc47 	bl	8000c08 <__aeabi_d2f>
 800137a:	4603      	mov	r3, r0
 800137c:	4a24      	ldr	r2, [pc, #144]	@ (8001410 <ParseParameters+0x320>)
 800137e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001380:	e029      	b.n	80013d6 <ParseParameters+0x2e6>
            } else if (strcmp(param_name, "start_date") == 0) {
 8001382:	4932      	ldr	r1, [pc, #200]	@ (800144c <ParseParameters+0x35c>)
 8001384:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001388:	f7fe ff22 	bl	80001d0 <strcmp>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d109      	bne.n	80013a6 <ParseParameters+0x2b6>
                // Сохраняем start_date во временную переменную (НЕ во Flash)
                strncpy(start_date, param_value, sizeof(start_date) - 1);
 8001392:	2213      	movs	r2, #19
 8001394:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8001398:	482d      	ldr	r0, [pc, #180]	@ (8001450 <ParseParameters+0x360>)
 800139a:	f00e fa07 	bl	800f7ac <strncpy>
                start_date[sizeof(start_date) - 1] = '\0';
 800139e:	4b2c      	ldr	r3, [pc, #176]	@ (8001450 <ParseParameters+0x360>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	74da      	strb	r2, [r3, #19]
 80013a4:	e017      	b.n	80013d6 <ParseParameters+0x2e6>
              //  SendUSBDebugMessage("Start date parsed (not saved to Flash)");
            } else if (strcmp(param_name, "period") == 0) {
 80013a6:	492b      	ldr	r1, [pc, #172]	@ (8001454 <ParseParameters+0x364>)
 80013a8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80013ac:	f7fe ff10 	bl	80001d0 <strcmp>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10f      	bne.n	80013d6 <ParseParameters+0x2e6>
                // Сохраняем period во временную переменную (НЕ во Flash)
                period = atoi(param_value);
 80013b6:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80013ba:	f00c fb12 	bl	800d9e2 <atoi>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b25      	ldr	r3, [pc, #148]	@ (8001458 <ParseParameters+0x368>)
 80013c4:	601a      	str	r2, [r3, #0]
                snprintf(usb_msg, sizeof(usb_msg), "Period parsed: %lu (not saved to Flash)", period);
 80013c6:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <ParseParameters+0x368>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a24      	ldr	r2, [pc, #144]	@ (800145c <ParseParameters+0x36c>)
 80013cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013d0:	4823      	ldr	r0, [pc, #140]	@ (8001460 <ParseParameters+0x370>)
 80013d2:	f00e f8fb 	bl	800f5cc <sniprintf>
               // SendUSBDebugMessage(usb_msg);
            }
        }
        token = strtok(NULL, "|");
 80013d6:	490c      	ldr	r1, [pc, #48]	@ (8001408 <ParseParameters+0x318>)
 80013d8:	2000      	movs	r0, #0
 80013da:	f00e f9fb 	bl	800f7d4 <strtok>
 80013de:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    while (token != NULL) {
 80013e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f47f aeae 	bne.w	8001148 <ParseParameters+0x58>
    }

    // Сохраняем обновленные параметры в Flash (без start_date и period)
    SaveParametersToFlash();
 80013ec:	f002 f8e8 	bl	80035c0 <SaveParametersToFlash>

    // ОТПРАВЛЯЕМ ДАННЫЕ НА ДЕЖУРНЫЙ МК ПО UART
    SendDateTimeToBackupMCU();
 80013f0:	f000 f8cc 	bl	800158c <SendDateTimeToBackupMCU>

    // Устанавливаем флаг для запуска расчета
    calculate_thickness_requested = true;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <ParseParameters+0x374>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
  //  SendUSBDebugMessage("Parameters parsed and saved successfully - calculation requested");
}
 80013fa:	bf00      	nop
 80013fc:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000a6b0 	.word	0x2000a6b0
 8001408:	08012ba4 	.word	0x08012ba4
 800140c:	08012ba8 	.word	0x08012ba8
 8001410:	2000a670 	.word	0x2000a670
 8001414:	08012bb4 	.word	0x08012bb4
 8001418:	08012bc0 	.word	0x08012bc0
 800141c:	08012bd8 	.word	0x08012bd8
 8001420:	08012be4 	.word	0x08012be4
 8001424:	08012bf4 	.word	0x08012bf4
 8001428:	08012c04 	.word	0x08012c04
 800142c:	08012c14 	.word	0x08012c14
 8001430:	08012c24 	.word	0x08012c24
 8001434:	08012c34 	.word	0x08012c34
 8001438:	08012c3c 	.word	0x08012c3c
 800143c:	08012c48 	.word	0x08012c48
 8001440:	08012c58 	.word	0x08012c58
 8001444:	2000a6a0 	.word	0x2000a6a0
 8001448:	08012c68 	.word	0x08012c68
 800144c:	08012c70 	.word	0x08012c70
 8001450:	20000838 	.word	0x20000838
 8001454:	08012c7c 	.word	0x08012c7c
 8001458:	2000084c 	.word	0x2000084c
 800145c:	08012c84 	.word	0x08012c84
 8001460:	20000438 	.word	0x20000438
 8001464:	2000a6b1 	.word	0x2000a6b1

08001468 <SendParametersResponse>:

/**
  * @brief Отправка текущих параметров обратно в приложение
  */
void SendParametersResponse(void) {
 8001468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800146c:	b0a1      	sub	sp, #132	@ 0x84
 800146e:	af16      	add	r7, sp, #88	@ 0x58
    if (!parameters_initialized) {
 8001470:	4b3e      	ldr	r3, [pc, #248]	@ (800156c <SendParametersResponse+0x104>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	f083 0301 	eor.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d171      	bne.n	8001562 <SendParametersResponse+0xfa>
      //  SendUSBDebugMessage("Parameters not initialized yet");
        return;
    }
    uint8_t usb_status = USB_CONNECTED();
 800147e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001482:	483b      	ldr	r0, [pc, #236]	@ (8001570 <SendParametersResponse+0x108>)
 8001484:	f003 fab0 	bl	80049e8 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    snprintf(usb_msg, sizeof(usb_msg),
        "wave_speed=%.1f|threshold=%.1f|threshold_zero_crossing=%.1f|"
        "start_index=%lu|probe_length=%lu|strobe_left1=%lu|strobe_right1=%lu|"
        "strobe_left2=%lu|strobe_right2=%lu|method=%lu|end_index=%lu|cycle_number=%lu|"
        "sensor_number=%s|gain=%.1f|start_date=%s|period=%lu;USB:%u\r\n",
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800148e:	4b39      	ldr	r3, [pc, #228]	@ (8001574 <SendParametersResponse+0x10c>)
 8001490:	685b      	ldr	r3, [r3, #4]
    snprintf(usb_msg, sizeof(usb_msg),
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f868 	bl	8000568 <__aeabi_f2d>
 8001498:	4604      	mov	r4, r0
 800149a:	460d      	mov	r5, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800149c:	4b35      	ldr	r3, [pc, #212]	@ (8001574 <SendParametersResponse+0x10c>)
 800149e:	699b      	ldr	r3, [r3, #24]
    snprintf(usb_msg, sizeof(usb_msg),
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f861 	bl	8000568 <__aeabi_f2d>
 80014a6:	4680      	mov	r8, r0
 80014a8:	4689      	mov	r9, r1
        params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80014aa:	4b32      	ldr	r3, [pc, #200]	@ (8001574 <SendParametersResponse+0x10c>)
 80014ac:	69db      	ldr	r3, [r3, #28]
    snprintf(usb_msg, sizeof(usb_msg),
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f85a 	bl	8000568 <__aeabi_f2d>
 80014b4:	4682      	mov	sl, r0
 80014b6:	468b      	mov	fp, r1
 80014b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <SendParametersResponse+0x10c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <SendParametersResponse+0x10c>)
 80014c0:	6a1a      	ldr	r2, [r3, #32]
 80014c2:	61ba      	str	r2, [r7, #24]
 80014c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001574 <SendParametersResponse+0x10c>)
 80014c6:	6899      	ldr	r1, [r3, #8]
 80014c8:	6179      	str	r1, [r7, #20]
 80014ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <SendParametersResponse+0x10c>)
 80014cc:	68d8      	ldr	r0, [r3, #12]
 80014ce:	6138      	str	r0, [r7, #16]
 80014d0:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <SendParametersResponse+0x10c>)
 80014d2:	691e      	ldr	r6, [r3, #16]
 80014d4:	60fe      	str	r6, [r7, #12]
 80014d6:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <SendParametersResponse+0x10c>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	4b25      	ldr	r3, [pc, #148]	@ (8001574 <SendParametersResponse+0x10c>)
 80014de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	4b24      	ldr	r3, [pc, #144]	@ (8001574 <SendParametersResponse+0x10c>)
 80014e4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80014e6:	6039      	str	r1, [r7, #0]
 80014e8:	4b22      	ldr	r3, [pc, #136]	@ (8001574 <SendParametersResponse+0x10c>)
 80014ea:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
        params.start_index, params.probe_length, params.first_left_strobe, params.first_right_strobe,
        params.second_left_strobe, params.second_right_strobe, params.method, params.end_index, params.cycle_number,
        params.sensor_number, params.gain, start_date, period, usb_status);
 80014ec:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <SendParametersResponse+0x10c>)
 80014ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    snprintf(usb_msg, sizeof(usb_msg),
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f839 	bl	8000568 <__aeabi_f2d>
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <SendParametersResponse+0x110>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014fe:	9314      	str	r3, [sp, #80]	@ 0x50
 8001500:	9213      	str	r2, [sp, #76]	@ 0x4c
 8001502:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <SendParametersResponse+0x114>)
 8001504:	9312      	str	r3, [sp, #72]	@ 0x48
 8001506:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800150a:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <SendParametersResponse+0x118>)
 800150c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800150e:	960e      	str	r6, [sp, #56]	@ 0x38
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	910d      	str	r1, [sp, #52]	@ 0x34
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	920c      	str	r2, [sp, #48]	@ 0x30
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800151c:	68fe      	ldr	r6, [r7, #12]
 800151e:	960a      	str	r6, [sp, #40]	@ 0x28
 8001520:	6938      	ldr	r0, [r7, #16]
 8001522:	9009      	str	r0, [sp, #36]	@ 0x24
 8001524:	6979      	ldr	r1, [r7, #20]
 8001526:	9108      	str	r1, [sp, #32]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	9207      	str	r2, [sp, #28]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	9306      	str	r3, [sp, #24]
 8001530:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001534:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001538:	e9cd 4500 	strd	r4, r5, [sp]
 800153c:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <SendParametersResponse+0x11c>)
 800153e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001542:	4811      	ldr	r0, [pc, #68]	@ (8001588 <SendParametersResponse+0x120>)
 8001544:	f00e f842 	bl	800f5cc <sniprintf>

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001548:	480f      	ldr	r0, [pc, #60]	@ (8001588 <SendParametersResponse+0x120>)
 800154a:	f7fe fea1 	bl	8000290 <strlen>
 800154e:	4603      	mov	r3, r0
 8001550:	b29b      	uxth	r3, r3
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	@ (8001588 <SendParametersResponse+0x120>)
 8001556:	f00b fc19 	bl	800cd8c <CDC_Transmit_FS>
    HAL_Delay(10);
 800155a:	200a      	movs	r0, #10
 800155c:	f002 fc6a 	bl	8003e34 <HAL_Delay>
 8001560:	e000      	b.n	8001564 <SendParametersResponse+0xfc>
        return;
 8001562:	bf00      	nop
}
 8001564:	372c      	adds	r7, #44	@ 0x2c
 8001566:	46bd      	mov	sp, r7
 8001568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800156c:	2000a6b0 	.word	0x2000a6b0
 8001570:	40020000 	.word	0x40020000
 8001574:	2000a670 	.word	0x2000a670
 8001578:	2000084c 	.word	0x2000084c
 800157c:	20000838 	.word	0x20000838
 8001580:	2000a6a0 	.word	0x2000a6a0
 8001584:	08012cac 	.word	0x08012cac
 8001588:	20000438 	.word	0x20000438

0800158c <SendDateTimeToBackupMCU>:

/**
  * @brief Отправка даты/времени и периода на дежурный МК по UART
  */
// Функция отправки данных
void SendDateTimeToBackupMCU(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af04      	add	r7, sp, #16
    // Проверяем что данные не пустые
    if (strlen(start_date) > 0 && period > 0) {
 8001592:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <SendDateTimeToBackupMCU+0x68>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d028      	beq.n	80015ec <SendDateTimeToBackupMCU+0x60>
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <SendDateTimeToBackupMCU+0x6c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d024      	beq.n	80015ec <SendDateTimeToBackupMCU+0x60>
        // Получаем статус USB подключения
        uint8_t usb_status = USB_CONNECTED();
 80015a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015a6:	4815      	ldr	r0, [pc, #84]	@ (80015fc <SendDateTimeToBackupMCU+0x70>)
 80015a8:	f003 fa1e 	bl	80049e8 <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]

        // Формируем сообщение в формате: "DATE:YYYY-MM-DD;TIME:HH:MM:SS;PERIOD:XXXXX;USB:X"
        snprintf(uart_tx_buf, UART_TX_BUF_SIZE,
 80015b0:	4913      	ldr	r1, [pc, #76]	@ (8001600 <SendDateTimeToBackupMCU+0x74>)
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <SendDateTimeToBackupMCU+0x6c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	79fa      	ldrb	r2, [r7, #7]
 80015b8:	9202      	str	r2, [sp, #8]
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	9100      	str	r1, [sp, #0]
 80015be:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <SendDateTimeToBackupMCU+0x68>)
 80015c0:	4a10      	ldr	r2, [pc, #64]	@ (8001604 <SendDateTimeToBackupMCU+0x78>)
 80015c2:	2180      	movs	r1, #128	@ 0x80
 80015c4:	4810      	ldr	r0, [pc, #64]	@ (8001608 <SendDateTimeToBackupMCU+0x7c>)
 80015c6:	f00e f801 	bl	800f5cc <sniprintf>
                 "DATE:%.10s;TIME:%.8s;PERIOD:%lu;USB:%u\r\n",
                 start_date, start_date + 11, period, usb_status);

        // Отправляем по UART
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx_buf, strlen(uart_tx_buf), 100);
 80015ca:	480f      	ldr	r0, [pc, #60]	@ (8001608 <SendDateTimeToBackupMCU+0x7c>)
 80015cc:	f7fe fe60 	bl	8000290 <strlen>
 80015d0:	4603      	mov	r3, r0
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	2364      	movs	r3, #100	@ 0x64
 80015d6:	490c      	ldr	r1, [pc, #48]	@ (8001608 <SendDateTimeToBackupMCU+0x7c>)
 80015d8:	480c      	ldr	r0, [pc, #48]	@ (800160c <SendDateTimeToBackupMCU+0x80>)
 80015da:	f006 fa7d 	bl	8007ad8 <HAL_UART_Transmit>

        // Отладочное сообщение по USB
        snprintf(usb_msg, sizeof(usb_msg), "Sent to backup MCU: %s", uart_tx_buf);
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <SendDateTimeToBackupMCU+0x7c>)
 80015e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001610 <SendDateTimeToBackupMCU+0x84>)
 80015e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015e6:	480b      	ldr	r0, [pc, #44]	@ (8001614 <SendDateTimeToBackupMCU+0x88>)
 80015e8:	f00d fff0 	bl	800f5cc <sniprintf>
       // SendUSBDebugMessage(usb_msg);
    } else {
       // SendUSBDebugMessage("No date/time data to send to backup MCU");
    }
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000838 	.word	0x20000838
 80015f8:	2000084c 	.word	0x2000084c
 80015fc:	40020000 	.word	0x40020000
 8001600:	20000843 	.word	0x20000843
 8001604:	08012db8 	.word	0x08012db8
 8001608:	20000850 	.word	0x20000850
 800160c:	200003a0 	.word	0x200003a0
 8001610:	08012de4 	.word	0x08012de4
 8001614:	20000438 	.word	0x20000438

08001618 <ProcessUARTCommand>:
/**
  * @brief Обработка команды от дежурного МК через UART
  * @param data Данные для обработки
  * @param len Длина данных
  */
void ProcessUARTCommand(uint8_t* data, uint8_t len) {
 8001618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800161c:	b0c1      	sub	sp, #260	@ 0x104
 800161e:	af1e      	add	r7, sp, #120	@ 0x78
 8001620:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8001622:	460b      	mov	r3, r1
 8001624:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    HAL_Delay(150);
 8001628:	2096      	movs	r0, #150	@ 0x96
 800162a:	f002 fc03 	bl	8003e34 <HAL_Delay>

    // Загружаем конфигурацию ПЛИС
    FPGA_LoadConfig();
 800162e:	f000 fdbd 	bl	80021ac <FPGA_LoadConfig>

    // Уменьшаем дополнительную паузу
    HAL_Delay(10);
 8001632:	200a      	movs	r0, #10
 8001634:	f002 fbfe 	bl	8003e34 <HAL_Delay>

	ReadFPGAData(); // Теперь эта функция делает все: START + многократное чтение + усреднение
 8001638:	f000 ff34 	bl	80024a4 <ReadFPGAData>

	    if (fpga_data.data_ready) {
 800163c:	4b67      	ldr	r3, [pc, #412]	@ (80017dc <ProcessUARTCommand+0x1c4>)
 800163e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001642:	f893 3710 	ldrb.w	r3, [r3, #1808]	@ 0x710
 8001646:	2b00      	cmp	r3, #0
 8001648:	d02f      	beq.n	80016aa <ProcessUARTCommand+0x92>

	        // СРАЗУ ВЫЧИСЛЯЕМ ТОЛЩИНУ ПО УСРЕДНЕННОМУ МАССИВУ
	        if (parameters_initialized && averaging_complete) {
 800164a:	4b65      	ldr	r3, [pc, #404]	@ (80017e0 <ProcessUARTCommand+0x1c8>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d025      	beq.n	800169e <ProcessUARTCommand+0x86>
 8001652:	4b64      	ldr	r3, [pc, #400]	@ (80017e4 <ProcessUARTCommand+0x1cc>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d021      	beq.n	800169e <ProcessUARTCommand+0x86>
	            calculate_thickness_requested = true;
 800165a:	4b63      	ldr	r3, [pc, #396]	@ (80017e8 <ProcessUARTCommand+0x1d0>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]

	            uint32_t start_time = HAL_GetTick();
 8001660:	f002 fbdc 	bl	8003e1c <HAL_GetTick>
 8001664:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	            while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8001668:	e00b      	b.n	8001682 <ProcessUARTCommand+0x6a>
	                if (calculate_thickness_requested) {
 800166a:	4b5f      	ldr	r3, [pc, #380]	@ (80017e8 <ProcessUARTCommand+0x1d0>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <ProcessUARTCommand+0x64>
	                    calculate_thickness_requested = false;
 8001672:	4b5d      	ldr	r3, [pc, #372]	@ (80017e8 <ProcessUARTCommand+0x1d0>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
	                    ProcessDataByMethod(); // Теперь использует averaged_fpga_data
 8001678:	f002 facc 	bl	8003c14 <ProcessDataByMethod>
	                }
	                HAL_Delay(10);
 800167c:	200a      	movs	r0, #10
 800167e:	f002 fbd9 	bl	8003e34 <HAL_Delay>
	            while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8001682:	4b59      	ldr	r3, [pc, #356]	@ (80017e8 <ProcessUARTCommand+0x1d0>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d009      	beq.n	800169e <ProcessUARTCommand+0x86>
 800168a:	f002 fbc7 	bl	8003e1c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3287 	movw	r2, #4999	@ 0x1387
 800169a:	4293      	cmp	r3, r2
 800169c:	d9e5      	bls.n	800166a <ProcessUARTCommand+0x52>
	            }
	        }
	      //  SendUSBDebugMessage("Averaged data received from FPGA:");
	       // PrintDataToUSB();
	        fpga_data.data_ready = false;
 800169e:	4b4f      	ldr	r3, [pc, #316]	@ (80017dc <ProcessUARTCommand+0x1c4>)
 80016a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2710 	strb.w	r2, [r3, #1808]	@ 0x710
	    }
    // Поиск всех параметров в данных
    char* date_ptr = strstr((char*)data, "DATE:");
 80016aa:	4950      	ldr	r1, [pc, #320]	@ (80017ec <ProcessUARTCommand+0x1d4>)
 80016ac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016ae:	f00e f8ed 	bl	800f88c <strstr>
 80016b2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    char* time_ptr = strstr((char*)data, ";TIME:");
 80016b6:	494e      	ldr	r1, [pc, #312]	@ (80017f0 <ProcessUARTCommand+0x1d8>)
 80016b8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016ba:	f00e f8e7 	bl	800f88c <strstr>
 80016be:	67f8      	str	r0, [r7, #124]	@ 0x7c
    char* period_ptr = strstr((char*)data, ";PERIOD:");
 80016c0:	494c      	ldr	r1, [pc, #304]	@ (80017f4 <ProcessUARTCommand+0x1dc>)
 80016c2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016c4:	f00e f8e2 	bl	800f88c <strstr>
 80016c8:	67b8      	str	r0, [r7, #120]	@ 0x78
    char* voltage_ptr = strstr((char*)data, ";VOLTAGE:");
 80016ca:	494b      	ldr	r1, [pc, #300]	@ (80017f8 <ProcessUARTCommand+0x1e0>)
 80016cc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016ce:	f00e f8dd 	bl	800f88c <strstr>
 80016d2:	6778      	str	r0, [r7, #116]	@ 0x74
    char* temp_ptr = strstr((char*)data, ";TEMP:");
 80016d4:	4949      	ldr	r1, [pc, #292]	@ (80017fc <ProcessUARTCommand+0x1e4>)
 80016d6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016d8:	f00e f8d8 	bl	800f88c <strstr>
 80016dc:	6738      	str	r0, [r7, #112]	@ 0x70

    // Инициализация значений по умолчанию
    int year = 0, month = 0, day = 0, hour = 0, min = 0, sec = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016e2:	2300      	movs	r3, #0
 80016e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80016e6:	2300      	movs	r3, #0
 80016e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80016ea:	2300      	movs	r3, #0
 80016ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80016ee:	2300      	movs	r3, #0
 80016f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016f2:	2300      	movs	r3, #0
 80016f4:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t received_period = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	653b      	str	r3, [r7, #80]	@ 0x50
    received_voltage = 0.0f;
 80016fa:	4b41      	ldr	r3, [pc, #260]	@ (8001800 <ProcessUARTCommand+0x1e8>)
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
    received_temp = 0.0f;
 8001702:	4b40      	ldr	r3, [pc, #256]	@ (8001804 <ProcessUARTCommand+0x1ec>)
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	601a      	str	r2, [r3, #0]

    // Парсинг доступных параметров
    if(date_ptr) sscanf(date_ptr, "DATE:%d-%d-%d", &year, &month, &day);
 800170a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00c      	beq.n	800172c <ProcessUARTCommand+0x114>
 8001712:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001716:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800171a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	460b      	mov	r3, r1
 8001722:	4939      	ldr	r1, [pc, #228]	@ (8001808 <ProcessUARTCommand+0x1f0>)
 8001724:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001728:	f00d ffa8 	bl	800f67c <siscanf>
    if(time_ptr) sscanf(time_ptr, ";TIME:%d:%d:%d", &hour, &min, &sec);
 800172c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00b      	beq.n	800174a <ProcessUARTCommand+0x132>
 8001732:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001736:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800173a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	460b      	mov	r3, r1
 8001742:	4932      	ldr	r1, [pc, #200]	@ (800180c <ProcessUARTCommand+0x1f4>)
 8001744:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001746:	f00d ff99 	bl	800f67c <siscanf>
    if(period_ptr) sscanf(period_ptr, ";PERIOD:%lu", &received_period);
 800174a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <ProcessUARTCommand+0x146>
 8001750:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001754:	461a      	mov	r2, r3
 8001756:	492e      	ldr	r1, [pc, #184]	@ (8001810 <ProcessUARTCommand+0x1f8>)
 8001758:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800175a:	f00d ff8f 	bl	800f67c <siscanf>
    if(voltage_ptr) sscanf(voltage_ptr, ";VOLTAGE:%f", &received_voltage);
 800175e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <ProcessUARTCommand+0x156>
 8001764:	4a26      	ldr	r2, [pc, #152]	@ (8001800 <ProcessUARTCommand+0x1e8>)
 8001766:	492b      	ldr	r1, [pc, #172]	@ (8001814 <ProcessUARTCommand+0x1fc>)
 8001768:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800176a:	f00d ff87 	bl	800f67c <siscanf>
    if(temp_ptr) sscanf(temp_ptr, ";TEMP:%f", &received_temp);
 800176e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <ProcessUARTCommand+0x166>
 8001774:	4a23      	ldr	r2, [pc, #140]	@ (8001804 <ProcessUARTCommand+0x1ec>)
 8001776:	4928      	ldr	r1, [pc, #160]	@ (8001818 <ProcessUARTCommand+0x200>)
 8001778:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800177a:	f00d ff7f 	bl	800f67c <siscanf>

    // Формируем строку даты
    snprintf(start_date, sizeof(start_date), "%04d-%02d-%02d %02d:%02d:%02d",
 800177e:	6ebd      	ldr	r5, [r7, #104]	@ 0x68
 8001780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001782:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001784:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001786:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001788:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 800178a:	9404      	str	r4, [sp, #16]
 800178c:	9003      	str	r0, [sp, #12]
 800178e:	9102      	str	r1, [sp, #8]
 8001790:	9201      	str	r2, [sp, #4]
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	462b      	mov	r3, r5
 8001796:	4a21      	ldr	r2, [pc, #132]	@ (800181c <ProcessUARTCommand+0x204>)
 8001798:	2114      	movs	r1, #20
 800179a:	4821      	ldr	r0, [pc, #132]	@ (8001820 <ProcessUARTCommand+0x208>)
 800179c:	f00d ff16 	bl	800f5cc <sniprintf>
            year, month, day, hour, min, sec);
    period = received_period;
 80017a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017a2:	4a20      	ldr	r2, [pc, #128]	@ (8001824 <ProcessUARTCommand+0x20c>)
 80017a4:	6013      	str	r3, [r2, #0]

    // ИЗМЕРЯЕМ ТЕМПЕРАТУРУ ТЕРМОПАРЫ
    thermocouple_temperature = Get_Thermocouple_Temperature();
 80017a6:	f001 fe77 	bl	8003498 <Get_Thermocouple_Temperature>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <ProcessUARTCommand+0x210>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]

    // ВЫЧИСЛЯЕМ ТОЛЩИНУ (если еще не вычислена)
    if (thickness_value == 0.0f && parameters_initialized) {
 80017b4:	4b1d      	ldr	r3, [pc, #116]	@ (800182c <ProcessUARTCommand+0x214>)
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	d14e      	bne.n	8001862 <ProcessUARTCommand+0x24a>
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <ProcessUARTCommand+0x1c8>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d04a      	beq.n	8001862 <ProcessUARTCommand+0x24a>
        calculate_thickness_requested = true;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <ProcessUARTCommand+0x1d0>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]

        uint32_t start_time = HAL_GetTick();
 80017d2:	f002 fb23 	bl	8003e1c <HAL_GetTick>
 80017d6:	66f8      	str	r0, [r7, #108]	@ 0x6c
        while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 80017d8:	e036      	b.n	8001848 <ProcessUARTCommand+0x230>
 80017da:	bf00      	nop
 80017dc:	20000a14 	.word	0x20000a14
 80017e0:	2000a6b0 	.word	0x2000a6b0
 80017e4:	2000a65c 	.word	0x2000a65c
 80017e8:	2000a6b1 	.word	0x2000a6b1
 80017ec:	08012dfc 	.word	0x08012dfc
 80017f0:	08012e04 	.word	0x08012e04
 80017f4:	08012e0c 	.word	0x08012e0c
 80017f8:	08012e18 	.word	0x08012e18
 80017fc:	08012e24 	.word	0x08012e24
 8001800:	20000a0c 	.word	0x20000a0c
 8001804:	20000a10 	.word	0x20000a10
 8001808:	08012e2c 	.word	0x08012e2c
 800180c:	08012e3c 	.word	0x08012e3c
 8001810:	08012e4c 	.word	0x08012e4c
 8001814:	08012e58 	.word	0x08012e58
 8001818:	08012e64 	.word	0x08012e64
 800181c:	08012e70 	.word	0x08012e70
 8001820:	20000838 	.word	0x20000838
 8001824:	2000084c 	.word	0x2000084c
 8001828:	2000a668 	.word	0x2000a668
 800182c:	2000a6b4 	.word	0x2000a6b4
            if (calculate_thickness_requested) {
 8001830:	4b4e      	ldr	r3, [pc, #312]	@ (800196c <ProcessUARTCommand+0x354>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <ProcessUARTCommand+0x22a>
                calculate_thickness_requested = false;
 8001838:	4b4c      	ldr	r3, [pc, #304]	@ (800196c <ProcessUARTCommand+0x354>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
                ProcessDataByMethod();
 800183e:	f002 f9e9 	bl	8003c14 <ProcessDataByMethod>
            }
            HAL_Delay(10);
 8001842:	200a      	movs	r0, #10
 8001844:	f002 faf6 	bl	8003e34 <HAL_Delay>
        while (calculate_thickness_requested && (HAL_GetTick() - start_time) < 5000) {
 8001848:	4b48      	ldr	r3, [pc, #288]	@ (800196c <ProcessUARTCommand+0x354>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <ProcessUARTCommand+0x24a>
 8001850:	f002 fae4 	bl	8003e1c <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800185e:	4293      	cmp	r3, r2
 8001860:	d9e6      	bls.n	8001830 <ProcessUARTCommand+0x218>
        }
    }

    // ОТПРАВЛЯЕМ РАСШИРЕННЫЕ ДАННЫЕ ПО USB
    if(thermocouple_error) {
 8001862:	4b43      	ldr	r3, [pc, #268]	@ (8001970 <ProcessUARTCommand+0x358>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8096 	beq.w	8001998 <ProcessUARTCommand+0x380>
        snprintf(usb_msg, sizeof(usb_msg),
 800186c:	4b41      	ldr	r3, [pc, #260]	@ (8001974 <ProcessUARTCommand+0x35c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	647b      	str	r3, [r7, #68]	@ 0x44
 8001872:	4b41      	ldr	r3, [pc, #260]	@ (8001978 <ProcessUARTCommand+0x360>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe76 	bl	8000568 <__aeabi_f2d>
 800187c:	4682      	mov	sl, r0
 800187e:	468b      	mov	fp, r1
 8001880:	4b3e      	ldr	r3, [pc, #248]	@ (800197c <ProcessUARTCommand+0x364>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe6f 	bl	8000568 <__aeabi_f2d>
 800188a:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 800188e:	4b3c      	ldr	r3, [pc, #240]	@ (8001980 <ProcessUARTCommand+0x368>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe68 	bl	8000568 <__aeabi_f2d>
 8001898:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
                "%s|%lu|%.4f|%.2f|ERROR|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                start_date, period, received_voltage, received_temp, thickness_value,
                params.wave_speed, params.threshold, params.threshold_zero_crossing,
 800189c:	4b39      	ldr	r3, [pc, #228]	@ (8001984 <ProcessUARTCommand+0x36c>)
 800189e:	685b      	ldr	r3, [r3, #4]
        snprintf(usb_msg, sizeof(usb_msg),
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe61 	bl	8000568 <__aeabi_f2d>
 80018a6:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
                params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80018aa:	4b36      	ldr	r3, [pc, #216]	@ (8001984 <ProcessUARTCommand+0x36c>)
 80018ac:	699b      	ldr	r3, [r3, #24]
        snprintf(usb_msg, sizeof(usb_msg),
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe5a 	bl	8000568 <__aeabi_f2d>
 80018b4:	e9c7 0108 	strd	r0, r1, [r7, #32]
                params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80018b8:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <ProcessUARTCommand+0x36c>)
 80018ba:	69db      	ldr	r3, [r3, #28]
        snprintf(usb_msg, sizeof(usb_msg),
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe53 	bl	8000568 <__aeabi_f2d>
 80018c2:	4680      	mov	r8, r0
 80018c4:	4689      	mov	r9, r1
 80018c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <ProcessUARTCommand+0x36c>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	61ba      	str	r2, [r7, #24]
 80018cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001984 <ProcessUARTCommand+0x36c>)
 80018ce:	6a19      	ldr	r1, [r3, #32]
 80018d0:	6439      	str	r1, [r7, #64]	@ 0x40
 80018d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <ProcessUARTCommand+0x36c>)
 80018d4:	689c      	ldr	r4, [r3, #8]
 80018d6:	617c      	str	r4, [r7, #20]
 80018d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <ProcessUARTCommand+0x36c>)
 80018da:	68dd      	ldr	r5, [r3, #12]
 80018dc:	613d      	str	r5, [r7, #16]
 80018de:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <ProcessUARTCommand+0x36c>)
 80018e0:	691e      	ldr	r6, [r3, #16]
 80018e2:	60fe      	str	r6, [r7, #12]
 80018e4:	4b27      	ldr	r3, [pc, #156]	@ (8001984 <ProcessUARTCommand+0x36c>)
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <ProcessUARTCommand+0x36c>)
 80018ec:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 80018ee:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <ProcessUARTCommand+0x36c>)
 80018f0:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80018f2:	4b24      	ldr	r3, [pc, #144]	@ (8001984 <ProcessUARTCommand+0x36c>)
 80018f4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                params.start_index, params.probe_length, params.first_left_strobe,
                params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                params.method, params.end_index, params.cycle_number, params.sensor_number,
                params.gain, start_date, period);
 80018f6:	4b23      	ldr	r3, [pc, #140]	@ (8001984 <ProcessUARTCommand+0x36c>)
 80018f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
        snprintf(usb_msg, sizeof(usb_msg),
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe34 	bl	8000568 <__aeabi_f2d>
 8001900:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <ProcessUARTCommand+0x35c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	931b      	str	r3, [sp, #108]	@ 0x6c
 8001906:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <ProcessUARTCommand+0x370>)
 8001908:	931a      	str	r3, [sp, #104]	@ 0x68
 800190a:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 800190e:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <ProcessUARTCommand+0x374>)
 8001910:	9317      	str	r3, [sp, #92]	@ 0x5c
 8001912:	9416      	str	r4, [sp, #88]	@ 0x58
 8001914:	9515      	str	r5, [sp, #84]	@ 0x54
 8001916:	9614      	str	r6, [sp, #80]	@ 0x50
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800191c:	68fe      	ldr	r6, [r7, #12]
 800191e:	9612      	str	r6, [sp, #72]	@ 0x48
 8001920:	693d      	ldr	r5, [r7, #16]
 8001922:	9511      	str	r5, [sp, #68]	@ 0x44
 8001924:	697c      	ldr	r4, [r7, #20]
 8001926:	9410      	str	r4, [sp, #64]	@ 0x40
 8001928:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800192a:	910f      	str	r1, [sp, #60]	@ 0x3c
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	920e      	str	r2, [sp, #56]	@ 0x38
 8001930:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8001934:	ed97 7b08 	vldr	d7, [r7, #32]
 8001938:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800193c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001940:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001944:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001948:	ed8d 7b06 	vstr	d7, [sp, #24]
 800194c:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001950:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001954:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <ProcessUARTCommand+0x370>)
 800195e:	4a0c      	ldr	r2, [pc, #48]	@ (8001990 <ProcessUARTCommand+0x378>)
 8001960:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001964:	480b      	ldr	r0, [pc, #44]	@ (8001994 <ProcessUARTCommand+0x37c>)
 8001966:	f00d fe31 	bl	800f5cc <sniprintf>
 800196a:	e09f      	b.n	8001aac <ProcessUARTCommand+0x494>
 800196c:	2000a6b1 	.word	0x2000a6b1
 8001970:	2000a66c 	.word	0x2000a66c
 8001974:	2000084c 	.word	0x2000084c
 8001978:	20000a0c 	.word	0x20000a0c
 800197c:	20000a10 	.word	0x20000a10
 8001980:	2000a6b4 	.word	0x2000a6b4
 8001984:	2000a670 	.word	0x2000a670
 8001988:	20000838 	.word	0x20000838
 800198c:	2000a6a0 	.word	0x2000a6a0
 8001990:	08012e90 	.word	0x08012e90
 8001994:	20000438 	.word	0x20000438
    } else {
        snprintf(usb_msg, sizeof(usb_msg),
 8001998:	4b52      	ldr	r3, [pc, #328]	@ (8001ae4 <ProcessUARTCommand+0x4cc>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	647b      	str	r3, [r7, #68]	@ 0x44
 800199e:	4b52      	ldr	r3, [pc, #328]	@ (8001ae8 <ProcessUARTCommand+0x4d0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fde0 	bl	8000568 <__aeabi_f2d>
 80019a8:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 80019ac:	4b4f      	ldr	r3, [pc, #316]	@ (8001aec <ProcessUARTCommand+0x4d4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdd9 	bl	8000568 <__aeabi_f2d>
 80019b6:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80019ba:	4b4d      	ldr	r3, [pc, #308]	@ (8001af0 <ProcessUARTCommand+0x4d8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fdd2 	bl	8000568 <__aeabi_f2d>
 80019c4:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80019c8:	4b4a      	ldr	r3, [pc, #296]	@ (8001af4 <ProcessUARTCommand+0x4dc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdcb 	bl	8000568 <__aeabi_f2d>
 80019d2:	e9c7 0108 	strd	r0, r1, [r7, #32]
                "%s|%lu|%.4f|%.2f|%.2f|%.3f|%.1f|%.1f|%.1f|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%lu|%s|%.1f|%s|%lu\r\n",
                start_date, period, received_voltage, received_temp, thermocouple_temperature,
                thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80019d6:	4b48      	ldr	r3, [pc, #288]	@ (8001af8 <ProcessUARTCommand+0x4e0>)
 80019d8:	685b      	ldr	r3, [r3, #4]
        snprintf(usb_msg, sizeof(usb_msg),
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdc4 	bl	8000568 <__aeabi_f2d>
 80019e0:	e9c7 0106 	strd	r0, r1, [r7, #24]
                thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80019e4:	4b44      	ldr	r3, [pc, #272]	@ (8001af8 <ProcessUARTCommand+0x4e0>)
 80019e6:	699b      	ldr	r3, [r3, #24]
        snprintf(usb_msg, sizeof(usb_msg),
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdbd 	bl	8000568 <__aeabi_f2d>
 80019ee:	4682      	mov	sl, r0
 80019f0:	468b      	mov	fp, r1
                thickness_value, params.wave_speed, params.threshold, params.threshold_zero_crossing,
 80019f2:	4b41      	ldr	r3, [pc, #260]	@ (8001af8 <ProcessUARTCommand+0x4e0>)
 80019f4:	69db      	ldr	r3, [r3, #28]
        snprintf(usb_msg, sizeof(usb_msg),
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fdb6 	bl	8000568 <__aeabi_f2d>
 80019fc:	4680      	mov	r8, r0
 80019fe:	4689      	mov	r9, r1
 8001a00:	4b3d      	ldr	r3, [pc, #244]	@ (8001af8 <ProcessUARTCommand+0x4e0>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	643a      	str	r2, [r7, #64]	@ 0x40
 8001a06:	4b3c      	ldr	r3, [pc, #240]	@ (8001af8 <ProcessUARTCommand+0x4e0>)
 8001a08:	6a19      	ldr	r1, [r3, #32]
 8001a0a:	6179      	str	r1, [r7, #20]
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001af8 <ProcessUARTCommand+0x4e0>)
 8001a0e:	689c      	ldr	r4, [r3, #8]
 8001a10:	613c      	str	r4, [r7, #16]
 8001a12:	4b39      	ldr	r3, [pc, #228]	@ (8001af8 <ProcessUARTCommand+0x4e0>)
 8001a14:	68dd      	ldr	r5, [r3, #12]
 8001a16:	60fd      	str	r5, [r7, #12]
 8001a18:	4b37      	ldr	r3, [pc, #220]	@ (8001af8 <ProcessUARTCommand+0x4e0>)
 8001a1a:	691e      	ldr	r6, [r3, #16]
 8001a1c:	60be      	str	r6, [r7, #8]
 8001a1e:	4b36      	ldr	r3, [pc, #216]	@ (8001af8 <ProcessUARTCommand+0x4e0>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	4b34      	ldr	r3, [pc, #208]	@ (8001af8 <ProcessUARTCommand+0x4e0>)
 8001a26:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8001a28:	4b33      	ldr	r3, [pc, #204]	@ (8001af8 <ProcessUARTCommand+0x4e0>)
 8001a2a:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8001a2c:	4b32      	ldr	r3, [pc, #200]	@ (8001af8 <ProcessUARTCommand+0x4e0>)
 8001a2e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                params.start_index, params.probe_length, params.first_left_strobe,
                params.first_right_strobe, params.second_left_strobe, params.second_right_strobe,
                params.method, params.end_index, params.cycle_number, params.sensor_number,
                params.gain, start_date, period);
 8001a30:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <ProcessUARTCommand+0x4e0>)
 8001a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
        snprintf(usb_msg, sizeof(usb_msg),
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd97 	bl	8000568 <__aeabi_f2d>
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <ProcessUARTCommand+0x4cc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	931d      	str	r3, [sp, #116]	@ 0x74
 8001a40:	4b2e      	ldr	r3, [pc, #184]	@ (8001afc <ProcessUARTCommand+0x4e4>)
 8001a42:	931c      	str	r3, [sp, #112]	@ 0x70
 8001a44:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 8001a48:	4b2d      	ldr	r3, [pc, #180]	@ (8001b00 <ProcessUARTCommand+0x4e8>)
 8001a4a:	9319      	str	r3, [sp, #100]	@ 0x64
 8001a4c:	9418      	str	r4, [sp, #96]	@ 0x60
 8001a4e:	9517      	str	r5, [sp, #92]	@ 0x5c
 8001a50:	9616      	str	r6, [sp, #88]	@ 0x58
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	9315      	str	r3, [sp, #84]	@ 0x54
 8001a56:	68be      	ldr	r6, [r7, #8]
 8001a58:	9614      	str	r6, [sp, #80]	@ 0x50
 8001a5a:	68fd      	ldr	r5, [r7, #12]
 8001a5c:	9513      	str	r5, [sp, #76]	@ 0x4c
 8001a5e:	693c      	ldr	r4, [r7, #16]
 8001a60:	9412      	str	r4, [sp, #72]	@ 0x48
 8001a62:	6979      	ldr	r1, [r7, #20]
 8001a64:	9111      	str	r1, [sp, #68]	@ 0x44
 8001a66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a68:	9210      	str	r2, [sp, #64]	@ 0x40
 8001a6a:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001a6e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8001a72:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a76:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001a7a:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a82:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001a86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a8a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001a8e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a92:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001a96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001a9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <ProcessUARTCommand+0x4e4>)
 8001aa0:	4a18      	ldr	r2, [pc, #96]	@ (8001b04 <ProcessUARTCommand+0x4ec>)
 8001aa2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aa6:	4818      	ldr	r0, [pc, #96]	@ (8001b08 <ProcessUARTCommand+0x4f0>)
 8001aa8:	f00d fd90 	bl	800f5cc <sniprintf>
    }

    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8001aac:	4816      	ldr	r0, [pc, #88]	@ (8001b08 <ProcessUARTCommand+0x4f0>)
 8001aae:	f7fe fbef 	bl	8000290 <strlen>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4813      	ldr	r0, [pc, #76]	@ (8001b08 <ProcessUARTCommand+0x4f0>)
 8001aba:	f00b f967 	bl	800cd8c <CDC_Transmit_FS>
    HAL_Delay(100);
 8001abe:	2064      	movs	r0, #100	@ 0x64
 8001ac0:	f002 f9b8 	bl	8003e34 <HAL_Delay>

    SendMeasurementDataViaLoRa();
 8001ac4:	f000 f824 	bl	8001b10 <SendMeasurementDataViaLoRa>
    HAL_Delay(2000);
 8001ac8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001acc:	f002 f9b2 	bl	8003e34 <HAL_Delay>
    SendTestDataViaLoRa();
 8001ad0:	f000 fb0e 	bl	80020f0 <SendTestDataViaLoRa>

    // После завершения всех операций отправляем COMPLETE
    SendUARTResponse(COMPLETE_STRING);
 8001ad4:	480d      	ldr	r0, [pc, #52]	@ (8001b0c <ProcessUARTCommand+0x4f4>)
 8001ad6:	f000 fb51 	bl	800217c <SendUARTResponse>

}
 8001ada:	bf00      	nop
 8001adc:	378c      	adds	r7, #140	@ 0x8c
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ae4:	2000084c 	.word	0x2000084c
 8001ae8:	20000a0c 	.word	0x20000a0c
 8001aec:	20000a10 	.word	0x20000a10
 8001af0:	2000a668 	.word	0x2000a668
 8001af4:	2000a6b4 	.word	0x2000a6b4
 8001af8:	2000a670 	.word	0x2000a670
 8001afc:	20000838 	.word	0x20000838
 8001b00:	2000a6a0 	.word	0x2000a6a0
 8001b04:	08012eec 	.word	0x08012eec
 8001b08:	20000438 	.word	0x20000438
 8001b0c:	08012f48 	.word	0x08012f48

08001b10 <SendMeasurementDataViaLoRa>:


/**
  * @brief Отправка данных измерений через LoRa
  */
void SendMeasurementDataViaLoRa(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b0b0      	sub	sp, #192	@ 0xc0
 8001b14:	af00      	add	r7, sp, #0


    // Формируем данные для отправки
    uint8_t lora_data[128] = {0};
 8001b16:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b1a:	2280      	movs	r2, #128	@ 0x80
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00d fe1d 	bl	800f75e <memset>
    uint8_t data_index = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем period (4 байта) - временная переменная
    memcpy(&lora_data[data_index], &period, sizeof(uint32_t));
 8001b2a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b2e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b32:	4413      	add	r3, r2
 8001b34:	4ac1      	ldr	r2, [pc, #772]	@ (8001e3c <SendMeasurementDataViaLoRa+0x32c>)
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001b3a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b3e:	3304      	adds	r3, #4
 8001b40:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем received_voltage (4 байта) - из ProcessUARTCommand
    float voltage = received_voltage;
 8001b44:	4bbe      	ldr	r3, [pc, #760]	@ (8001e40 <SendMeasurementDataViaLoRa+0x330>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	63bb      	str	r3, [r7, #56]	@ 0x38
    memcpy(&lora_data[data_index], &voltage, sizeof(float));
 8001b4a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b4e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b52:	4413      	add	r3, r2
 8001b54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b56:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001b58:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем received_temp (4 байта) - из ProcessUARTCommand
    float temp = received_temp;
 8001b62:	4bb8      	ldr	r3, [pc, #736]	@ (8001e44 <SendMeasurementDataViaLoRa+0x334>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(&lora_data[data_index], &temp, sizeof(float));
 8001b68:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b6c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b70:	4413      	add	r3, r2
 8001b72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b74:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001b76:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем thermocouple_temperature (4 байта) - глобальная переменная
    memcpy(&lora_data[data_index], &thermocouple_temperature, sizeof(float));
 8001b80:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b84:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001b88:	4413      	add	r3, r2
 8001b8a:	4aaf      	ldr	r2, [pc, #700]	@ (8001e48 <SendMeasurementDataViaLoRa+0x338>)
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001b90:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b94:	3304      	adds	r3, #4
 8001b96:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем thickness_value (4 байта) - расчетная переменная
    memcpy(&lora_data[data_index], &thickness_value, sizeof(float));
 8001b9a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001b9e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4aa9      	ldr	r2, [pc, #676]	@ (8001e4c <SendMeasurementDataViaLoRa+0x33c>)
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001baa:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bae:	3304      	adds	r3, #4
 8001bb0:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем wave_speed (4 байта) - из параметров
    float wave_speed = params.wave_speed;
 8001bb4:	4ba6      	ldr	r3, [pc, #664]	@ (8001e50 <SendMeasurementDataViaLoRa+0x340>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	633b      	str	r3, [r7, #48]	@ 0x30
    memcpy(&lora_data[data_index], &wave_speed, sizeof(float));
 8001bba:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bbe:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001bc2:	4413      	add	r3, r2
 8001bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bc6:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001bc8:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bcc:	3304      	adds	r3, #4
 8001bce:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем threshold (4 байта) - из параметров
    float threshold = params.threshold;
 8001bd2:	4b9f      	ldr	r3, [pc, #636]	@ (8001e50 <SendMeasurementDataViaLoRa+0x340>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(&lora_data[data_index], &threshold, sizeof(float));
 8001bd8:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bdc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001be0:	4413      	add	r3, r2
 8001be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001be4:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001be6:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bea:	3304      	adds	r3, #4
 8001bec:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем threshold_zero_crossing (4 байта) - из параметров
    float threshold_zero = params.threshold_zero_crossing;
 8001bf0:	4b97      	ldr	r3, [pc, #604]	@ (8001e50 <SendMeasurementDataViaLoRa+0x340>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    memcpy(&lora_data[data_index], &threshold_zero, sizeof(float));
 8001bf6:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001bfa:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001bfe:	4413      	add	r3, r2
 8001c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c02:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001c04:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c08:	3304      	adds	r3, #4
 8001c0a:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем start_index (4 байта) - из параметров
    uint32_t start_idx = params.start_index;
 8001c0e:	4b90      	ldr	r3, [pc, #576]	@ (8001e50 <SendMeasurementDataViaLoRa+0x340>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
    memcpy(&lora_data[data_index], &start_idx, sizeof(uint32_t));
 8001c14:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c18:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c1c:	4413      	add	r3, r2
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c20:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c22:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c26:	3304      	adds	r3, #4
 8001c28:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем probe_length (4 байта) - из параметров
    uint32_t probe_len = params.probe_length;
 8001c2c:	4b88      	ldr	r3, [pc, #544]	@ (8001e50 <SendMeasurementDataViaLoRa+0x340>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	623b      	str	r3, [r7, #32]
    memcpy(&lora_data[data_index], &probe_len, sizeof(uint32_t));
 8001c32:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c36:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c3a:	4413      	add	r3, r2
 8001c3c:	6a3a      	ldr	r2, [r7, #32]
 8001c3e:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c40:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c44:	3304      	adds	r3, #4
 8001c46:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем first_left_strobe (4 байта) - из параметров
    uint32_t strobe_l1 = params.first_left_strobe;
 8001c4a:	4b81      	ldr	r3, [pc, #516]	@ (8001e50 <SendMeasurementDataViaLoRa+0x340>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61fb      	str	r3, [r7, #28]
    memcpy(&lora_data[data_index], &strobe_l1, sizeof(uint32_t));
 8001c50:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c54:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c58:	4413      	add	r3, r2
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c5e:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c62:	3304      	adds	r3, #4
 8001c64:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем first_right_strobe (4 байта) - из параметров
    uint32_t strobe_r1 = params.first_right_strobe;
 8001c68:	4b79      	ldr	r3, [pc, #484]	@ (8001e50 <SendMeasurementDataViaLoRa+0x340>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
    memcpy(&lora_data[data_index], &strobe_r1, sizeof(uint32_t));
 8001c6e:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c72:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c76:	4413      	add	r3, r2
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c7c:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c80:	3304      	adds	r3, #4
 8001c82:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем second_left_strobe (4 байта) - из параметров
    uint32_t strobe_l2 = params.second_left_strobe;
 8001c86:	4b72      	ldr	r3, [pc, #456]	@ (8001e50 <SendMeasurementDataViaLoRa+0x340>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	617b      	str	r3, [r7, #20]
    memcpy(&lora_data[data_index], &strobe_l2, sizeof(uint32_t));
 8001c8c:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c90:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c94:	4413      	add	r3, r2
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001c9a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем second_right_strobe (4 байта) - из параметров
    uint32_t strobe_r2 = params.second_right_strobe;
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e50 <SendMeasurementDataViaLoRa+0x340>)
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	613b      	str	r3, [r7, #16]
    memcpy(&lora_data[data_index], &strobe_r2, sizeof(uint32_t));
 8001caa:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cae:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001cb2:	4413      	add	r3, r2
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001cb8:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем method (4 байта) - из параметров
    uint32_t method = params.method;
 8001cc2:	4b63      	ldr	r3, [pc, #396]	@ (8001e50 <SendMeasurementDataViaLoRa+0x340>)
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	60fb      	str	r3, [r7, #12]
    memcpy(&lora_data[data_index], &method, sizeof(uint32_t));
 8001cc8:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001ccc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001cd0:	4413      	add	r3, r2
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001cd6:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cda:	3304      	adds	r3, #4
 8001cdc:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем end_index (4 байта) - из параметров
    uint32_t end_idx = params.end_index;
 8001ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8001e50 <SendMeasurementDataViaLoRa+0x340>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce4:	60bb      	str	r3, [r7, #8]
    memcpy(&lora_data[data_index], &end_idx, sizeof(uint32_t));
 8001ce6:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cea:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001cee:	4413      	add	r3, r2
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001cf4:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем cycle_number (4 байта) - из параметров
    uint32_t cycle_num = params.cycle_number;
 8001cfe:	4b54      	ldr	r3, [pc, #336]	@ (8001e50 <SendMeasurementDataViaLoRa+0x340>)
 8001d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d02:	607b      	str	r3, [r7, #4]
    memcpy(&lora_data[data_index], &cycle_num, sizeof(uint32_t));
 8001d04:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d08:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d0c:	4413      	add	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	601a      	str	r2, [r3, #0]
    data_index += sizeof(uint32_t);
 8001d12:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d16:	3304      	adds	r3, #4
 8001d18:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем sensor_number (максимум 16 байт) - из параметров
    uint8_t sensor_len = strlen(params.sensor_number);
 8001d1c:	484d      	ldr	r0, [pc, #308]	@ (8001e54 <SendMeasurementDataViaLoRa+0x344>)
 8001d1e:	f7fe fab7 	bl	8000290 <strlen>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    if (sensor_len > 15) sensor_len = 15;
 8001d28:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d902      	bls.n	8001d36 <SendMeasurementDataViaLoRa+0x226>
 8001d30:	230f      	movs	r3, #15
 8001d32:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    lora_data[data_index++] = sensor_len;
 8001d36:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	f887 20be 	strb.w	r2, [r7, #190]	@ 0xbe
 8001d40:	33c0      	adds	r3, #192	@ 0xc0
 8001d42:	443b      	add	r3, r7
 8001d44:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001d48:	f803 2c84 	strb.w	r2, [r3, #-132]
    memcpy(&lora_data[data_index], params.sensor_number, sensor_len);
 8001d4c:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d50:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d54:	4413      	add	r3, r2
 8001d56:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001d5a:	493e      	ldr	r1, [pc, #248]	@ (8001e54 <SendMeasurementDataViaLoRa+0x344>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f00d fe22 	bl	800f9a6 <memcpy>
    data_index += sensor_len;
 8001d62:	f897 20be 	ldrb.w	r2, [r7, #190]	@ 0xbe
 8001d66:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Добавляем gain (4 байта) - из параметров
    float gain = params.gain;
 8001d70:	4b37      	ldr	r3, [pc, #220]	@ (8001e50 <SendMeasurementDataViaLoRa+0x340>)
 8001d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d74:	603b      	str	r3, [r7, #0]
    memcpy(&lora_data[data_index], &gain, sizeof(float));
 8001d76:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d7a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d7e:	4413      	add	r3, r2
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	601a      	str	r2, [r3, #0]
    data_index += sizeof(float);
 8001d84:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d88:	3304      	adds	r3, #4
 8001d8a:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe

    // Общая длина данных
    uint8_t total_length = data_index;
 8001d8e:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d92:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd

    // Настройка параметров передачи LoRa
    sx126x_set_tx_params(&radio, pa_power, SX126X_RAMP_800_US);  // Было: SX126X_RAMP_200_US
 8001d96:	4b30      	ldr	r3, [pc, #192]	@ (8001e58 <SendMeasurementDataViaLoRa+0x348>)
 8001d98:	f993 3000 	ldrsb.w	r3, [r3]
 8001d9c:	2205      	movs	r2, #5
 8001d9e:	4619      	mov	r1, r3
 8001da0:	482e      	ldr	r0, [pc, #184]	@ (8001e5c <SendMeasurementDataViaLoRa+0x34c>)
 8001da2:	f008 fc88 	bl	800a6b6 <sx126x_set_tx_params>

    // Ожидаем, пока модуль освободится
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET) {
 8001da6:	e002      	b.n	8001dae <SendMeasurementDataViaLoRa+0x29e>
        HAL_Delay(1);
 8001da8:	2001      	movs	r0, #1
 8001daa:	f002 f843 	bl	8003e34 <HAL_Delay>
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET) {
 8001dae:	2110      	movs	r1, #16
 8001db0:	482b      	ldr	r0, [pc, #172]	@ (8001e60 <SendMeasurementDataViaLoRa+0x350>)
 8001db2:	f002 fe19 	bl	80049e8 <HAL_GPIO_ReadPin>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d0f5      	beq.n	8001da8 <SendMeasurementDataViaLoRa+0x298>
    }

    // Записываем данные в буфер модуля LoRa
    sx126x_status_t status = sx126x_write_buffer(&radio, 0, lora_data, total_length);
 8001dbc:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001dc0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4825      	ldr	r0, [pc, #148]	@ (8001e5c <SendMeasurementDataViaLoRa+0x34c>)
 8001dc8:	f008 fba9 	bl	800a51e <sx126x_write_buffer>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    if (status != SX126X_STATUS_OK) {
 8001dd2:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d129      	bne.n	8001e2e <SendMeasurementDataViaLoRa+0x31e>
       // SendUSBDebugMessage("LoRa write buffer failed for measurement data");
        return;
    }

    // Обновляем параметры пакета с актуальной длиной
    pkt_params.pld_len_in_bytes = total_length;
 8001dda:	4a22      	ldr	r2, [pc, #136]	@ (8001e64 <SendMeasurementDataViaLoRa+0x354>)
 8001ddc:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001de0:	70d3      	strb	r3, [r2, #3]
    status = sx126x_set_lora_pkt_params(&radio, &pkt_params);
 8001de2:	4920      	ldr	r1, [pc, #128]	@ (8001e64 <SendMeasurementDataViaLoRa+0x354>)
 8001de4:	481d      	ldr	r0, [pc, #116]	@ (8001e5c <SendMeasurementDataViaLoRa+0x34c>)
 8001de6:	f008 fcb4 	bl	800a752 <sx126x_set_lora_pkt_params>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    if (status != SX126X_STATUS_OK) {
 8001df0:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d11c      	bne.n	8001e32 <SendMeasurementDataViaLoRa+0x322>
     //   SendUSBDebugMessage("LoRa set packet params failed");
        return;
    }

    // Запускаем передачу
    status = sx126x_set_tx(&radio, SX126X_MAX_TIMEOUT_IN_MS);
 8001df8:	491b      	ldr	r1, [pc, #108]	@ (8001e68 <SendMeasurementDataViaLoRa+0x358>)
 8001dfa:	4818      	ldr	r0, [pc, #96]	@ (8001e5c <SendMeasurementDataViaLoRa+0x34c>)
 8001dfc:	f008 fabe 	bl	800a37c <sx126x_set_tx>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    if (status != SX126X_STATUS_OK) {
 8001e06:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <SendMeasurementDataViaLoRa+0x306>
      SendUSBDebugMessage("LoRa transmission failed for measurement data");
 8001e0e:	4817      	ldr	r0, [pc, #92]	@ (8001e6c <SendMeasurementDataViaLoRa+0x35c>)
 8001e10:	f7ff f916 	bl	8001040 <SendUSBDebugMessage>
 8001e14:	e00e      	b.n	8001e34 <SendMeasurementDataViaLoRa+0x324>
    } else {
        snprintf(usb_msg, sizeof(usb_msg), "LoRa measurement data sent (%d bytes)", total_length);
 8001e16:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001e1a:	4a15      	ldr	r2, [pc, #84]	@ (8001e70 <SendMeasurementDataViaLoRa+0x360>)
 8001e1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e20:	4814      	ldr	r0, [pc, #80]	@ (8001e74 <SendMeasurementDataViaLoRa+0x364>)
 8001e22:	f00d fbd3 	bl	800f5cc <sniprintf>
       SendUSBDebugMessage(usb_msg);
 8001e26:	4813      	ldr	r0, [pc, #76]	@ (8001e74 <SendMeasurementDataViaLoRa+0x364>)
 8001e28:	f7ff f90a 	bl	8001040 <SendUSBDebugMessage>
 8001e2c:	e002      	b.n	8001e34 <SendMeasurementDataViaLoRa+0x324>
        return;
 8001e2e:	bf00      	nop
 8001e30:	e000      	b.n	8001e34 <SendMeasurementDataViaLoRa+0x324>
        return;
 8001e32:	bf00      	nop
    }
}
 8001e34:	37c0      	adds	r7, #192	@ 0xc0
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000084c 	.word	0x2000084c
 8001e40:	20000a0c 	.word	0x20000a0c
 8001e44:	20000a10 	.word	0x20000a10
 8001e48:	2000a668 	.word	0x2000a668
 8001e4c:	2000a6b4 	.word	0x2000a6b4
 8001e50:	2000a670 	.word	0x2000a670
 8001e54:	2000a6a0 	.word	0x2000a6a0
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	200009dc 	.word	0x200009dc
 8001e60:	40020800 	.word	0x40020800
 8001e64:	200009fc 	.word	0x200009fc
 8001e68:	0003ffff 	.word	0x0003ffff
 8001e6c:	08012f54 	.word	0x08012f54
 8001e70:	08012f84 	.word	0x08012f84
 8001e74:	20000438 	.word	0x20000438

08001e78 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a21      	ldr	r2, [pc, #132]	@ (8001f0c <HAL_UART_RxCpltCallback+0x94>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d13b      	bne.n	8001f02 <HAL_UART_RxCpltCallback+0x8a>
        uart_last_rx_time = HAL_GetTick();
 8001e8a:	f001 ffc7 	bl	8003e1c <HAL_GetTick>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4a1f      	ldr	r2, [pc, #124]	@ (8001f10 <HAL_UART_RxCpltCallback+0x98>)
 8001e92:	6013      	str	r3, [r2, #0]

        if(uart_rx_buf[uart_rx_pos] == '\n' || uart_rx_pos >= UART_RX_BUF_SIZE-1) {
 8001e94:	4b1f      	ldr	r3, [pc, #124]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <HAL_UART_RxCpltCallback+0xa0>)
 8001e9c:	5c9b      	ldrb	r3, [r3, r2]
 8001e9e:	2b0a      	cmp	r3, #10
 8001ea0:	d003      	beq.n	8001eaa <HAL_UART_RxCpltCallback+0x32>
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ea8:	d91b      	bls.n	8001ee2 <HAL_UART_RxCpltCallback+0x6a>
            // Копируем данные в буфер для обработки
            memcpy((void*)uart_rx_data, uart_rx_buf, uart_rx_pos);
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4919      	ldr	r1, [pc, #100]	@ (8001f18 <HAL_UART_RxCpltCallback+0xa0>)
 8001eb2:	481a      	ldr	r0, [pc, #104]	@ (8001f1c <HAL_UART_RxCpltCallback+0xa4>)
 8001eb4:	f00d fd77 	bl	800f9a6 <memcpy>
            uart_rx_len = uart_rx_pos;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001eba:	781a      	ldrb	r2, [r3, #0]
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_UART_RxCpltCallback+0xa8>)
 8001ebe:	701a      	strb	r2, [r3, #0]
            uart_message_received = 1;
 8001ec0:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <HAL_UART_RxCpltCallback+0xac>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]

            uart_rx_pos = 0;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
            memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 8001ecc:	2280      	movs	r2, #128	@ 0x80
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4811      	ldr	r0, [pc, #68]	@ (8001f18 <HAL_UART_RxCpltCallback+0xa0>)
 8001ed2:	f00d fc44 	bl	800f75e <memset>

            // Немедленно запускаем прием следующего байта
            HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	490f      	ldr	r1, [pc, #60]	@ (8001f18 <HAL_UART_RxCpltCallback+0xa0>)
 8001eda:	4813      	ldr	r0, [pc, #76]	@ (8001f28 <HAL_UART_RxCpltCallback+0xb0>)
 8001edc:	f005 fe87 	bl	8007bee <HAL_UART_Receive_IT>
        } else {
            uart_rx_pos++;
            HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buf[uart_rx_pos], 1);
        }
    }
}
 8001ee0:	e00f      	b.n	8001f02 <HAL_UART_RxCpltCallback+0x8a>
            uart_rx_pos++;
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001eec:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buf[uart_rx_pos], 1);
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <HAL_UART_RxCpltCallback+0xa0>)
 8001ef6:	4413      	add	r3, r2
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4619      	mov	r1, r3
 8001efc:	480a      	ldr	r0, [pc, #40]	@ (8001f28 <HAL_UART_RxCpltCallback+0xb0>)
 8001efe:	f005 fe76 	bl	8007bee <HAL_UART_Receive_IT>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	20000954 	.word	0x20000954
 8001f14:	20000950 	.word	0x20000950
 8001f18:	200008d0 	.word	0x200008d0
 8001f1c:	20000958 	.word	0x20000958
 8001f20:	200009d8 	.word	0x200009d8
 8001f24:	200009d9 	.word	0x200009d9
 8001f28:	200003a0 	.word	0x200003a0

08001f2c <InitializeLoRa>:

/**
  * @brief Инициализация модуля LoRa
  */
bool InitializeLoRa(void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af02      	add	r7, sp, #8
	 // Initialize radio context
	    radio.cs_port = sx1262_cs_port;
 8001f32:	4b64      	ldr	r3, [pc, #400]	@ (80020c4 <InitializeLoRa+0x198>)
 8001f34:	4a64      	ldr	r2, [pc, #400]	@ (80020c8 <InitializeLoRa+0x19c>)
 8001f36:	601a      	str	r2, [r3, #0]
	    radio.cs_pin = sx1262_cs_pin;
 8001f38:	4b62      	ldr	r3, [pc, #392]	@ (80020c4 <InitializeLoRa+0x198>)
 8001f3a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f3e:	809a      	strh	r2, [r3, #4]
	    radio.busy_port = sx1262_busy_port;
 8001f40:	4b60      	ldr	r3, [pc, #384]	@ (80020c4 <InitializeLoRa+0x198>)
 8001f42:	4a62      	ldr	r2, [pc, #392]	@ (80020cc <InitializeLoRa+0x1a0>)
 8001f44:	609a      	str	r2, [r3, #8]
	    radio.busy_pin = sx1262_busy_pin;
 8001f46:	4b5f      	ldr	r3, [pc, #380]	@ (80020c4 <InitializeLoRa+0x198>)
 8001f48:	2210      	movs	r2, #16
 8001f4a:	819a      	strh	r2, [r3, #12]
	    radio.reset_port = sx1262_reset_port;
 8001f4c:	4b5d      	ldr	r3, [pc, #372]	@ (80020c4 <InitializeLoRa+0x198>)
 8001f4e:	4a5f      	ldr	r2, [pc, #380]	@ (80020cc <InitializeLoRa+0x1a0>)
 8001f50:	611a      	str	r2, [r3, #16]
	    radio.reset_pin = sx1262_reset_pin;
 8001f52:	4b5c      	ldr	r3, [pc, #368]	@ (80020c4 <InitializeLoRa+0x198>)
 8001f54:	2280      	movs	r2, #128	@ 0x80
 8001f56:	829a      	strh	r2, [r3, #20]
	    radio.hspi = &hspi2;
 8001f58:	4b5a      	ldr	r3, [pc, #360]	@ (80020c4 <InitializeLoRa+0x198>)
 8001f5a:	4a5d      	ldr	r2, [pc, #372]	@ (80020d0 <InitializeLoRa+0x1a4>)
 8001f5c:	619a      	str	r2, [r3, #24]

	    // === ИЗМЕНЕНИЕ 1: Обновите параметры модуляции ===
	    lora_params.sf = SX126X_LORA_SF9;          // Было: SX126X_LORA_SF12
 8001f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80020d4 <InitializeLoRa+0x1a8>)
 8001f60:	2209      	movs	r2, #9
 8001f62:	701a      	strb	r2, [r3, #0]
	    lora_params.bw = SX126X_LORA_BW_125;       // Было: SX126X_LORA_BW_125 (оставить)
 8001f64:	4b5b      	ldr	r3, [pc, #364]	@ (80020d4 <InitializeLoRa+0x1a8>)
 8001f66:	2204      	movs	r2, #4
 8001f68:	705a      	strb	r2, [r3, #1]
	    lora_params.cr = SX126X_LORA_CR_4_5;       // Было: SX126X_LORA_CR_4_7
 8001f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80020d4 <InitializeLoRa+0x1a8>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	709a      	strb	r2, [r3, #2]
	    lora_params.ldro = 0x00;                   // Было: 0
 8001f70:	4b58      	ldr	r3, [pc, #352]	@ (80020d4 <InitializeLoRa+0x1a8>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	70da      	strb	r2, [r3, #3]

	    // === ИЗМЕНЕНИЕ 2: Обновите параметры пакета ===
	    pkt_params.preamble_len_in_symb = 12;      // Оставить как было
 8001f76:	4b58      	ldr	r3, [pc, #352]	@ (80020d8 <InitializeLoRa+0x1ac>)
 8001f78:	220c      	movs	r2, #12
 8001f7a:	801a      	strh	r2, [r3, #0]
	    pkt_params.header_type = SX126X_LORA_PKT_EXPLICIT; // Оставить
 8001f7c:	4b56      	ldr	r3, [pc, #344]	@ (80020d8 <InitializeLoRa+0x1ac>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	709a      	strb	r2, [r3, #2]
	    pkt_params.pld_len_in_bytes = 128;         // Оставить
 8001f82:	4b55      	ldr	r3, [pc, #340]	@ (80020d8 <InitializeLoRa+0x1ac>)
 8001f84:	2280      	movs	r2, #128	@ 0x80
 8001f86:	70da      	strb	r2, [r3, #3]
	    pkt_params.crc_is_on = 0x01;               // Было: false
 8001f88:	4b53      	ldr	r3, [pc, #332]	@ (80020d8 <InitializeLoRa+0x1ac>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	711a      	strb	r2, [r3, #4]
	    pkt_params.invert_iq_is_on = 0x00;         // Было: false
 8001f8e:	4b52      	ldr	r3, [pc, #328]	@ (80020d8 <InitializeLoRa+0x1ac>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	715a      	strb	r2, [r3, #5]

	    // === ИЗМЕНЕНИЕ 3: Обновите параметры усилителя мощности ===
	    pa_params.pa_duty_cycle = 0x04;            // Оставить
 8001f94:	4b51      	ldr	r3, [pc, #324]	@ (80020dc <InitializeLoRa+0x1b0>)
 8001f96:	2204      	movs	r2, #4
 8001f98:	701a      	strb	r2, [r3, #0]
	    pa_params.hp_max = 0x07;                   // Оставить
 8001f9a:	4b50      	ldr	r3, [pc, #320]	@ (80020dc <InitializeLoRa+0x1b0>)
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	705a      	strb	r2, [r3, #1]
	    pa_params.device_sel = 0x00;               // Оставить
 8001fa0:	4b4e      	ldr	r3, [pc, #312]	@ (80020dc <InitializeLoRa+0x1b0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	709a      	strb	r2, [r3, #2]
	    pa_params.pa_lut = 0x01;                   // Оставить
 8001fa6:	4b4d      	ldr	r3, [pc, #308]	@ (80020dc <InitializeLoRa+0x1b0>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	70da      	strb	r2, [r3, #3]

	    // === ИЗМЕНЕНИЕ 4: Обновите мощность и частоту ===
	    pa_power = 20;                             // Было: 10 (20 dBm вместо 10 dBm)
 8001fac:	4b4c      	ldr	r3, [pc, #304]	@ (80020e0 <InitializeLoRa+0x1b4>)
 8001fae:	2214      	movs	r2, #20
 8001fb0:	701a      	strb	r2, [r3, #0]
	    frequency = 868900000U;                    // Было: 868000000U (868.9 MHz вместо 868.0 MHz)
 8001fb2:	4b4c      	ldr	r3, [pc, #304]	@ (80020e4 <InitializeLoRa+0x1b8>)
 8001fb4:	4a4c      	ldr	r2, [pc, #304]	@ (80020e8 <InitializeLoRa+0x1bc>)
 8001fb6:	601a      	str	r2, [r3, #0]

	    // === ИЗМЕНЕНИЕ 5: Обновите последовательность инициализации ===
	    sx126x_status_t status = sx126x_hal_reset(&radio);
 8001fb8:	4842      	ldr	r0, [pc, #264]	@ (80020c4 <InitializeLoRa+0x198>)
 8001fba:	f008 fdaf 	bl	800ab1c <sx126x_hal_reset>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
	    if (status != SX126X_STATUS_OK) {
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <InitializeLoRa+0xa0>
	       // SendUSBDebugMessage("LoRa reset failed");
	        return false;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e077      	b.n	80020bc <InitializeLoRa+0x190>
	    }

	    sx126x_hal_wakeup(&radio);
 8001fcc:	483d      	ldr	r0, [pc, #244]	@ (80020c4 <InitializeLoRa+0x198>)
 8001fce:	f008 fdc9 	bl	800ab64 <sx126x_hal_wakeup>
	    HAL_Delay(10);
 8001fd2:	200a      	movs	r0, #10
 8001fd4:	f001 ff2e 	bl	8003e34 <HAL_Delay>

	    sx126x_set_standby(&radio, SX126X_STANDBY_CFG_RC);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	483a      	ldr	r0, [pc, #232]	@ (80020c4 <InitializeLoRa+0x198>)
 8001fdc:	f008 f9b6 	bl	800a34c <sx126x_set_standby>
	    HAL_Delay(10);
 8001fe0:	200a      	movs	r0, #10
 8001fe2:	f001 ff27 	bl	8003e34 <HAL_Delay>

	    // === ИЗМЕНЕНИЕ 6: Добавьте настройку TCXO ===
	    sx126x_set_dio3_as_tcxo_ctrl(&radio, SX126X_TCXO_CTRL_2_4V, 5);
 8001fe6:	2205      	movs	r2, #5
 8001fe8:	2104      	movs	r1, #4
 8001fea:	4836      	ldr	r0, [pc, #216]	@ (80020c4 <InitializeLoRa+0x198>)
 8001fec:	f008 faf1 	bl	800a5d2 <sx126x_set_dio3_as_tcxo_ctrl>
	    HAL_Delay(10);
 8001ff0:	200a      	movs	r0, #10
 8001ff2:	f001 ff1f 	bl	8003e34 <HAL_Delay>

	    // === ИЗМЕНЕНИЕ 7: Добавьте калибровку ===
	    sx126x_cal(&radio, 0xFF);
 8001ff6:	21ff      	movs	r1, #255	@ 0xff
 8001ff8:	4832      	ldr	r0, [pc, #200]	@ (80020c4 <InitializeLoRa+0x198>)
 8001ffa:	f008 fa0f 	bl	800a41c <sx126x_cal>
	    HAL_Delay(10);
 8001ffe:	200a      	movs	r0, #10
 8002000:	f001 ff18 	bl	8003e34 <HAL_Delay>

	    sx126x_set_standby(&radio, SX126X_STANDBY_CFG_XOSC);
 8002004:	2101      	movs	r1, #1
 8002006:	482f      	ldr	r0, [pc, #188]	@ (80020c4 <InitializeLoRa+0x198>)
 8002008:	f008 f9a0 	bl	800a34c <sx126x_set_standby>
	    HAL_Delay(10);
 800200c:	200a      	movs	r0, #10
 800200e:	f001 ff11 	bl	8003e34 <HAL_Delay>

	    // === ИЗМЕНЕНИЕ 8: Используйте DCDC режим вместо LDO ===
	    sx126x_set_reg_mode(&radio, SX126X_REG_MODE_DCDC);  // Было: SX126X_REG_MODE_LDO
 8002012:	2101      	movs	r1, #1
 8002014:	482b      	ldr	r0, [pc, #172]	@ (80020c4 <InitializeLoRa+0x198>)
 8002016:	f008 f9e9 	bl	800a3ec <sx126x_set_reg_mode>
	    HAL_Delay(10);
 800201a:	200a      	movs	r0, #10
 800201c:	f001 ff0a 	bl	8003e34 <HAL_Delay>

	    sx126x_set_pkt_type(&radio, SX126X_PKT_TYPE_LORA);
 8002020:	2101      	movs	r1, #1
 8002022:	4828      	ldr	r0, [pc, #160]	@ (80020c4 <InitializeLoRa+0x198>)
 8002024:	f008 fb2f 	bl	800a686 <sx126x_set_pkt_type>
	    HAL_Delay(10);
 8002028:	200a      	movs	r0, #10
 800202a:	f001 ff03 	bl	8003e34 <HAL_Delay>

	    sx126x_set_lora_mod_params(&radio, &lora_params);
 800202e:	4929      	ldr	r1, [pc, #164]	@ (80020d4 <InitializeLoRa+0x1a8>)
 8002030:	4824      	ldr	r0, [pc, #144]	@ (80020c4 <InitializeLoRa+0x198>)
 8002032:	f008 fb5c 	bl	800a6ee <sx126x_set_lora_mod_params>
	    HAL_Delay(10);
 8002036:	200a      	movs	r0, #10
 8002038:	f001 fefc 	bl	8003e34 <HAL_Delay>

	    sx126x_set_lora_pkt_params(&radio, &pkt_params);
 800203c:	4926      	ldr	r1, [pc, #152]	@ (80020d8 <InitializeLoRa+0x1ac>)
 800203e:	4821      	ldr	r0, [pc, #132]	@ (80020c4 <InitializeLoRa+0x198>)
 8002040:	f008 fb87 	bl	800a752 <sx126x_set_lora_pkt_params>
	    HAL_Delay(10);
 8002044:	200a      	movs	r0, #10
 8002046:	f001 fef5 	bl	8003e34 <HAL_Delay>

	    // === ИЗМЕНЕНИЕ 9: Обновите sync word ===
	    sx126x_set_lora_sync_word(&radio, 0x12);           // Было: 0x12 (оставить)
 800204a:	2112      	movs	r1, #18
 800204c:	481d      	ldr	r0, [pc, #116]	@ (80020c4 <InitializeLoRa+0x198>)
 800204e:	f008 fc31 	bl	800a8b4 <sx126x_set_lora_sync_word>
	    HAL_Delay(10);
 8002052:	200a      	movs	r0, #10
 8002054:	f001 feee 	bl	8003e34 <HAL_Delay>

	    sx126x_set_rf_freq(&radio, frequency);
 8002058:	4b22      	ldr	r3, [pc, #136]	@ (80020e4 <InitializeLoRa+0x1b8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	4819      	ldr	r0, [pc, #100]	@ (80020c4 <InitializeLoRa+0x198>)
 8002060:	f008 fadb 	bl	800a61a <sx126x_set_rf_freq>
	    HAL_Delay(10);
 8002064:	200a      	movs	r0, #10
 8002066:	f001 fee5 	bl	8003e34 <HAL_Delay>

	    sx126x_set_pa_cfg(&radio, &pa_params);
 800206a:	491c      	ldr	r1, [pc, #112]	@ (80020dc <InitializeLoRa+0x1b0>)
 800206c:	4815      	ldr	r0, [pc, #84]	@ (80020c4 <InitializeLoRa+0x198>)
 800206e:	f008 f9ed 	bl	800a44c <sx126x_set_pa_cfg>
	    HAL_Delay(10);
 8002072:	200a      	movs	r0, #10
 8002074:	f001 fede 	bl	8003e34 <HAL_Delay>

	    // === ИЗМЕНЕНИЕ 10: Обновите параметры TX ===
	    sx126x_set_tx_params(&radio, pa_power, SX126X_RAMP_800_US);  // Было: SX126X_RAMP_200_US
 8002078:	4b19      	ldr	r3, [pc, #100]	@ (80020e0 <InitializeLoRa+0x1b4>)
 800207a:	f993 3000 	ldrsb.w	r3, [r3]
 800207e:	2205      	movs	r2, #5
 8002080:	4619      	mov	r1, r3
 8002082:	4810      	ldr	r0, [pc, #64]	@ (80020c4 <InitializeLoRa+0x198>)
 8002084:	f008 fb17 	bl	800a6b6 <sx126x_set_tx_params>
	    HAL_Delay(10);
 8002088:	200a      	movs	r0, #10
 800208a:	f001 fed3 	bl	8003e34 <HAL_Delay>

	    sx126x_set_buffer_base_address(&radio, 0x00, 0x00);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	480c      	ldr	r0, [pc, #48]	@ (80020c4 <InitializeLoRa+0x198>)
 8002094:	f008 fbbf 	bl	800a816 <sx126x_set_buffer_base_address>
	    HAL_Delay(10);
 8002098:	200a      	movs	r0, #10
 800209a:	f001 fecb 	bl	8003e34 <HAL_Delay>

	    sx126x_set_dio_irq_params(&radio,
 800209e:	2300      	movs	r3, #0
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2300      	movs	r3, #0
 80020a4:	2203      	movs	r2, #3
 80020a6:	2103      	movs	r1, #3
 80020a8:	4806      	ldr	r0, [pc, #24]	@ (80020c4 <InitializeLoRa+0x198>)
 80020aa:	f008 fa55 	bl	800a558 <sx126x_set_dio_irq_params>
	            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE,
	            SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE,
	            SX126X_IRQ_NONE,
	            SX126X_IRQ_NONE);
	    HAL_Delay(100);
 80020ae:	2064      	movs	r0, #100	@ 0x64
 80020b0:	f001 fec0 	bl	8003e34 <HAL_Delay>

	    lora_initialized = true;
 80020b4:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <InitializeLoRa+0x1c0>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
	  //  SendUSBDebugMessage("LoRa module initialized successfully with SF9/125kHz/868.9MHz");
	    return true;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200009dc 	.word	0x200009dc
 80020c8:	40020400 	.word	0x40020400
 80020cc:	40020800 	.word	0x40020800
 80020d0:	20000300 	.word	0x20000300
 80020d4:	200009f8 	.word	0x200009f8
 80020d8:	200009fc 	.word	0x200009fc
 80020dc:	20000a04 	.word	0x20000a04
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000004 	.word	0x20000004
 80020e8:	33ca5ca0 	.word	0x33ca5ca0
 80020ec:	20000a08 	.word	0x20000a08

080020f0 <SendTestDataViaLoRa>:

/**
  * @brief Отправка данных через LoRa
  */
void SendTestDataViaLoRa(void) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
    if (!lora_initialized) {
 80020f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002168 <SendTestDataViaLoRa+0x78>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f083 0301 	eor.w	r3, r3, #1
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <SendTestDataViaLoRa+0x24>
        if (!InitializeLoRa()) {
 8002104:	f7ff ff12 	bl	8001f2c <InitializeLoRa>
 8002108:	4603      	mov	r3, r0
 800210a:	f083 0301 	eor.w	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d123      	bne.n	800215c <SendTestDataViaLoRa+0x6c>
            return;
        }
    }

    // Создаем тестовые данные - 5 чисел (например: 1,2,3,4,5)
    const uint8_t test_data[] = {1};
 8002114:	2301      	movs	r3, #1
 8002116:	713b      	strb	r3, [r7, #4]

    sx126x_set_tx_params(&radio, pa_power, SX126X_RAMP_800_US);  // Было: SX126X_RAMP_200_US
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <SendTestDataViaLoRa+0x7c>)
 800211a:	f993 3000 	ldrsb.w	r3, [r3]
 800211e:	2205      	movs	r2, #5
 8002120:	4619      	mov	r1, r3
 8002122:	4813      	ldr	r0, [pc, #76]	@ (8002170 <SendTestDataViaLoRa+0x80>)
 8002124:	f008 fac7 	bl	800a6b6 <sx126x_set_tx_params>

    // Wait while module is busy
    while (HAL_GPIO_ReadPin(sx1262_busy_port, sx1262_busy_pin) == GPIO_PIN_SET);
 8002128:	bf00      	nop
 800212a:	2110      	movs	r1, #16
 800212c:	4811      	ldr	r0, [pc, #68]	@ (8002174 <SendTestDataViaLoRa+0x84>)
 800212e:	f002 fc5b 	bl	80049e8 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b01      	cmp	r3, #1
 8002136:	d0f8      	beq.n	800212a <SendTestDataViaLoRa+0x3a>

    // Write data to buffer
    sx126x_status_t status = sx126x_write_buffer(&radio, 0, test_data, sizeof(test_data));
 8002138:	1d3a      	adds	r2, r7, #4
 800213a:	2301      	movs	r3, #1
 800213c:	2100      	movs	r1, #0
 800213e:	480c      	ldr	r0, [pc, #48]	@ (8002170 <SendTestDataViaLoRa+0x80>)
 8002140:	f008 f9ed 	bl	800a51e <sx126x_write_buffer>
 8002144:	4603      	mov	r3, r0
 8002146:	71fb      	strb	r3, [r7, #7]
    if (status != SX126X_STATUS_OK) {
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d108      	bne.n	8002160 <SendTestDataViaLoRa+0x70>
      //  SendUSBDebugMessage("LoRa write buffer failed");
        return;
    }

    // Start transmission
    status = sx126x_set_tx(&radio, SX126X_MAX_TIMEOUT_IN_MS);
 800214e:	490a      	ldr	r1, [pc, #40]	@ (8002178 <SendTestDataViaLoRa+0x88>)
 8002150:	4807      	ldr	r0, [pc, #28]	@ (8002170 <SendTestDataViaLoRa+0x80>)
 8002152:	f008 f913 	bl	800a37c <sx126x_set_tx>
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
 800215a:	e002      	b.n	8002162 <SendTestDataViaLoRa+0x72>
            return;
 800215c:	bf00      	nop
 800215e:	e000      	b.n	8002162 <SendTestDataViaLoRa+0x72>
        return;
 8002160:	bf00      	nop
    if (status != SX126X_STATUS_OK) {
     //   SendUSBDebugMessage("LoRa transmission failed");
    } else {
      //  SendUSBDebugMessage("LoRa test data sent successfully");
    }
}
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000a08 	.word	0x20000a08
 800216c:	20000000 	.word	0x20000000
 8002170:	200009dc 	.word	0x200009dc
 8002174:	40020800 	.word	0x40020800
 8002178:	0003ffff 	.word	0x0003ffff

0800217c <SendUARTResponse>:

/**
  * @brief Отправка ответа по UART
  */
void SendUARTResponse(const char* response)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)response, strlen(response), 100);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7fe f883 	bl	8000290 <strlen>
 800218a:	4603      	mov	r3, r0
 800218c:	b29a      	uxth	r2, r3
 800218e:	2364      	movs	r3, #100	@ 0x64
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4805      	ldr	r0, [pc, #20]	@ (80021a8 <SendUARTResponse+0x2c>)
 8002194:	f005 fca0 	bl	8007ad8 <HAL_UART_Transmit>
    HAL_Delay(10);
 8002198:	200a      	movs	r0, #10
 800219a:	f001 fe4b 	bl	8003e34 <HAL_Delay>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200003a0 	.word	0x200003a0

080021ac <FPGA_LoadConfig>:
/**
  * @brief Отправка конфигурации в ПЛИС
  * @param config_data Указатель на данные конфигурации
  * @param size Размер данных конфигурации
  */
void FPGA_LoadConfig(void) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08e      	sub	sp, #56	@ 0x38
 80021b0:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]

	    // 1. Настройка пинов (оставляем как было)
	    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 80021c0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80021c4:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c6:	2301      	movs	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4895      	ldr	r0, [pc, #596]	@ (800242c <FPGA_LoadConfig+0x280>)
 80021d8:	f002 fa6a 	bl	80046b0 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021e0:	607b      	str	r3, [r7, #4]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	4619      	mov	r1, r3
 80021e6:	4892      	ldr	r0, [pc, #584]	@ (8002430 <FPGA_LoadConfig+0x284>)
 80021e8:	f002 fa62 	bl	80046b0 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021f0:	607b      	str	r3, [r7, #4]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	4619      	mov	r1, r3
 80021f6:	488f      	ldr	r0, [pc, #572]	@ (8002434 <FPGA_LoadConfig+0x288>)
 80021f8:	f002 fa5a 	bl	80046b0 <HAL_GPIO_Init>

	    // 2. Установка начальных состояний
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);   // TH_CS = 1
 80021fc:	2201      	movs	r2, #1
 80021fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002202:	488a      	ldr	r0, [pc, #552]	@ (800242c <FPGA_LoadConfig+0x280>)
 8002204:	f002 fc08 	bl	8004a18 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   // CE = 1
 8002208:	2201      	movs	r2, #1
 800220a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800220e:	4887      	ldr	r0, [pc, #540]	@ (800242c <FPGA_LoadConfig+0x280>)
 8002210:	f002 fc02 	bl	8004a18 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // CLK = 0
 8002214:	2200      	movs	r2, #0
 8002216:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800221a:	4884      	ldr	r0, [pc, #528]	@ (800242c <FPGA_LoadConfig+0x280>)
 800221c:	f002 fbfc 	bl	8004a18 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); // DATA = 0
 8002220:	2200      	movs	r2, #0
 8002222:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002226:	4881      	ldr	r0, [pc, #516]	@ (800242c <FPGA_LoadConfig+0x280>)
 8002228:	f002 fbf6 	bl	8004a18 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // nCONFIG = 0
 800222c:	2200      	movs	r2, #0
 800222e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002232:	487f      	ldr	r0, [pc, #508]	@ (8002430 <FPGA_LoadConfig+0x284>)
 8002234:	f002 fbf0 	bl	8004a18 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);   // CSO = 1
 8002238:	2201      	movs	r2, #1
 800223a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800223e:	487d      	ldr	r0, [pc, #500]	@ (8002434 <FPGA_LoadConfig+0x288>)
 8002240:	f002 fbea 	bl	8004a18 <HAL_GPIO_WritePin>

	    // 3. ВАЖНО: Увеличиваем задержку для стабилизации питания при холодном старте
	    HAL_Delay(100); // Возвращаем 100 мс для надежности
 8002244:	2064      	movs	r0, #100	@ 0x64
 8002246:	f001 fdf5 	bl	8003e34 <HAL_Delay>

	    // 4. Сброс ПЛИС с достаточной паузой
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // nCONFIG = 0
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002250:	4877      	ldr	r0, [pc, #476]	@ (8002430 <FPGA_LoadConfig+0x284>)
 8002252:	f002 fbe1 	bl	8004a18 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);  // CE = 0
 8002256:	2200      	movs	r2, #0
 8002258:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800225c:	4873      	ldr	r0, [pc, #460]	@ (800242c <FPGA_LoadConfig+0x280>)
 800225e:	f002 fbdb 	bl	8004a18 <HAL_GPIO_WritePin>
	    HAL_Delay(5); // Увеличиваем до 5 мс (вместо 1 мс)
 8002262:	2005      	movs	r0, #5
 8002264:	f001 fde6 	bl	8003e34 <HAL_Delay>

	    // 5. Запуск конфигурации
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);   // nCONFIG = 1
 8002268:	2201      	movs	r2, #1
 800226a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800226e:	4870      	ldr	r0, [pc, #448]	@ (8002430 <FPGA_LoadConfig+0x284>)
 8002270:	f002 fbd2 	bl	8004a18 <HAL_GPIO_WritePin>

	    // 6. Ожидание готовности ПЛИС (увеличиваем)
	    HAL_Delay(3); // Увеличиваем до 3 мс
 8002274:	2003      	movs	r0, #3
 8002276:	f001 fddd 	bl	8003e34 <HAL_Delay>

	    // 7. ОПТИМИЗИРОВАННАЯ передача данных (оставляем быструю)
	    const uint8_t *config_data = fpga_config;
 800227a:	4b6f      	ldr	r3, [pc, #444]	@ (8002438 <FPGA_LoadConfig+0x28c>)
 800227c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    uint32_t config_size = sizeof(fpga_config);
 800227e:	4b6f      	ldr	r3, [pc, #444]	@ (800243c <FPGA_LoadConfig+0x290>)
 8002280:	62bb      	str	r3, [r7, #40]	@ 0x28

	    GPIO_TypeDef* data_port = GPIOC;
 8002282:	4b6a      	ldr	r3, [pc, #424]	@ (800242c <FPGA_LoadConfig+0x280>)
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
	    GPIO_TypeDef* clk_port = GPIOC;
 8002286:	4b69      	ldr	r3, [pc, #420]	@ (800242c <FPGA_LoadConfig+0x280>)
 8002288:	623b      	str	r3, [r7, #32]
	    uint16_t data_pin = GPIO_PIN_11;
 800228a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800228e:	83fb      	strh	r3, [r7, #30]
	    uint16_t clk_pin = GPIO_PIN_10;
 8002290:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002294:	83bb      	strh	r3, [r7, #28]

	    for (uint32_t i = 0; i < config_size; i++) {
 8002296:	2300      	movs	r3, #0
 8002298:	637b      	str	r3, [r7, #52]	@ 0x34
 800229a:	e0be      	b.n	800241a <FPGA_LoadConfig+0x26e>
	        uint8_t byte = config_data[i];
 800229c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800229e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a0:	4413      	add	r3, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	76fb      	strb	r3, [r7, #27]

	        // Развернутый цикл для скорости (оставляем как было)
	        // Бит 0
	        if (byte & 0x01) data_port->BSRR = data_pin;
 80022a6:	7efb      	ldrb	r3, [r7, #27]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <FPGA_LoadConfig+0x10c>
 80022b0:	8bfa      	ldrh	r2, [r7, #30]
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	619a      	str	r2, [r3, #24]
 80022b6:	e003      	b.n	80022c0 <FPGA_LoadConfig+0x114>
	        else data_port->BSRR = (uint32_t)data_pin << 16;
 80022b8:	8bfb      	ldrh	r3, [r7, #30]
 80022ba:	041a      	lsls	r2, r3, #16
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022be:	619a      	str	r2, [r3, #24]
	        __NOP(); __NOP();
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
	        clk_port->BSRR = clk_pin;
 80022c4:	8bba      	ldrh	r2, [r7, #28]
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	619a      	str	r2, [r3, #24]
	        __NOP();
 80022ca:	bf00      	nop
	        clk_port->BSRR = (uint32_t)clk_pin << 16;
 80022cc:	8bbb      	ldrh	r3, [r7, #28]
 80022ce:	041a      	lsls	r2, r3, #16
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	619a      	str	r2, [r3, #24]

	        // Бит 1
	        if (byte & 0x02) data_port->BSRR = data_pin;
 80022d4:	7efb      	ldrb	r3, [r7, #27]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <FPGA_LoadConfig+0x13a>
 80022de:	8bfa      	ldrh	r2, [r7, #30]
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	619a      	str	r2, [r3, #24]
 80022e4:	e003      	b.n	80022ee <FPGA_LoadConfig+0x142>
	        else data_port->BSRR = (uint32_t)data_pin << 16;
 80022e6:	8bfb      	ldrh	r3, [r7, #30]
 80022e8:	041a      	lsls	r2, r3, #16
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	619a      	str	r2, [r3, #24]
	        __NOP(); __NOP();
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
	        clk_port->BSRR = clk_pin;
 80022f2:	8bba      	ldrh	r2, [r7, #28]
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	619a      	str	r2, [r3, #24]
	        __NOP();
 80022f8:	bf00      	nop
	        clk_port->BSRR = (uint32_t)clk_pin << 16;
 80022fa:	8bbb      	ldrh	r3, [r7, #28]
 80022fc:	041a      	lsls	r2, r3, #16
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	619a      	str	r2, [r3, #24]

	        // Бит 2
	        if (byte & 0x04) data_port->BSRR = data_pin;
 8002302:	7efb      	ldrb	r3, [r7, #27]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <FPGA_LoadConfig+0x168>
 800230c:	8bfa      	ldrh	r2, [r7, #30]
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	619a      	str	r2, [r3, #24]
 8002312:	e003      	b.n	800231c <FPGA_LoadConfig+0x170>
	        else data_port->BSRR = (uint32_t)data_pin << 16;
 8002314:	8bfb      	ldrh	r3, [r7, #30]
 8002316:	041a      	lsls	r2, r3, #16
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	619a      	str	r2, [r3, #24]
	        __NOP(); __NOP();
 800231c:	bf00      	nop
 800231e:	bf00      	nop
	        clk_port->BSRR = clk_pin;
 8002320:	8bba      	ldrh	r2, [r7, #28]
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	619a      	str	r2, [r3, #24]
	        __NOP();
 8002326:	bf00      	nop
	        clk_port->BSRR = (uint32_t)clk_pin << 16;
 8002328:	8bbb      	ldrh	r3, [r7, #28]
 800232a:	041a      	lsls	r2, r3, #16
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	619a      	str	r2, [r3, #24]

	        // Бит 3
	        if (byte & 0x08) data_port->BSRR = data_pin;
 8002330:	7efb      	ldrb	r3, [r7, #27]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <FPGA_LoadConfig+0x196>
 800233a:	8bfa      	ldrh	r2, [r7, #30]
 800233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233e:	619a      	str	r2, [r3, #24]
 8002340:	e003      	b.n	800234a <FPGA_LoadConfig+0x19e>
	        else data_port->BSRR = (uint32_t)data_pin << 16;
 8002342:	8bfb      	ldrh	r3, [r7, #30]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	619a      	str	r2, [r3, #24]
	        __NOP(); __NOP();
 800234a:	bf00      	nop
 800234c:	bf00      	nop
	        clk_port->BSRR = clk_pin;
 800234e:	8bba      	ldrh	r2, [r7, #28]
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	619a      	str	r2, [r3, #24]
	        __NOP();
 8002354:	bf00      	nop
	        clk_port->BSRR = (uint32_t)clk_pin << 16;
 8002356:	8bbb      	ldrh	r3, [r7, #28]
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	619a      	str	r2, [r3, #24]

	        // Бит 4
	        if (byte & 0x10) data_port->BSRR = data_pin;
 800235e:	7efb      	ldrb	r3, [r7, #27]
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <FPGA_LoadConfig+0x1c4>
 8002368:	8bfa      	ldrh	r2, [r7, #30]
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	619a      	str	r2, [r3, #24]
 800236e:	e003      	b.n	8002378 <FPGA_LoadConfig+0x1cc>
	        else data_port->BSRR = (uint32_t)data_pin << 16;
 8002370:	8bfb      	ldrh	r3, [r7, #30]
 8002372:	041a      	lsls	r2, r3, #16
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	619a      	str	r2, [r3, #24]
	        __NOP(); __NOP();
 8002378:	bf00      	nop
 800237a:	bf00      	nop
	        clk_port->BSRR = clk_pin;
 800237c:	8bba      	ldrh	r2, [r7, #28]
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	619a      	str	r2, [r3, #24]
	        __NOP();
 8002382:	bf00      	nop
	        clk_port->BSRR = (uint32_t)clk_pin << 16;
 8002384:	8bbb      	ldrh	r3, [r7, #28]
 8002386:	041a      	lsls	r2, r3, #16
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	619a      	str	r2, [r3, #24]

	        // Бит 5
	        if (byte & 0x20) data_port->BSRR = data_pin;
 800238c:	7efb      	ldrb	r3, [r7, #27]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <FPGA_LoadConfig+0x1f2>
 8002396:	8bfa      	ldrh	r2, [r7, #30]
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	619a      	str	r2, [r3, #24]
 800239c:	e003      	b.n	80023a6 <FPGA_LoadConfig+0x1fa>
	        else data_port->BSRR = (uint32_t)data_pin << 16;
 800239e:	8bfb      	ldrh	r3, [r7, #30]
 80023a0:	041a      	lsls	r2, r3, #16
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	619a      	str	r2, [r3, #24]
	        __NOP(); __NOP();
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
	        clk_port->BSRR = clk_pin;
 80023aa:	8bba      	ldrh	r2, [r7, #28]
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	619a      	str	r2, [r3, #24]
	        __NOP();
 80023b0:	bf00      	nop
	        clk_port->BSRR = (uint32_t)clk_pin << 16;
 80023b2:	8bbb      	ldrh	r3, [r7, #28]
 80023b4:	041a      	lsls	r2, r3, #16
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	619a      	str	r2, [r3, #24]

	        // Бит 6
	        if (byte & 0x40) data_port->BSRR = data_pin;
 80023ba:	7efb      	ldrb	r3, [r7, #27]
 80023bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <FPGA_LoadConfig+0x220>
 80023c4:	8bfa      	ldrh	r2, [r7, #30]
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	619a      	str	r2, [r3, #24]
 80023ca:	e003      	b.n	80023d4 <FPGA_LoadConfig+0x228>
	        else data_port->BSRR = (uint32_t)data_pin << 16;
 80023cc:	8bfb      	ldrh	r3, [r7, #30]
 80023ce:	041a      	lsls	r2, r3, #16
 80023d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d2:	619a      	str	r2, [r3, #24]
	        __NOP(); __NOP();
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
	        clk_port->BSRR = clk_pin;
 80023d8:	8bba      	ldrh	r2, [r7, #28]
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	619a      	str	r2, [r3, #24]
	        __NOP();
 80023de:	bf00      	nop
	        clk_port->BSRR = (uint32_t)clk_pin << 16;
 80023e0:	8bbb      	ldrh	r3, [r7, #28]
 80023e2:	041a      	lsls	r2, r3, #16
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	619a      	str	r2, [r3, #24]

	        // Бит 7
	        if (byte & 0x80) data_port->BSRR = data_pin;
 80023e8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	da03      	bge.n	80023f8 <FPGA_LoadConfig+0x24c>
 80023f0:	8bfa      	ldrh	r2, [r7, #30]
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	619a      	str	r2, [r3, #24]
 80023f6:	e003      	b.n	8002400 <FPGA_LoadConfig+0x254>
	        else data_port->BSRR = (uint32_t)data_pin << 16;
 80023f8:	8bfb      	ldrh	r3, [r7, #30]
 80023fa:	041a      	lsls	r2, r3, #16
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	619a      	str	r2, [r3, #24]
	        __NOP(); __NOP();
 8002400:	bf00      	nop
 8002402:	bf00      	nop
	        clk_port->BSRR = clk_pin;
 8002404:	8bba      	ldrh	r2, [r7, #28]
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	619a      	str	r2, [r3, #24]
	        __NOP();
 800240a:	bf00      	nop
	        clk_port->BSRR = (uint32_t)clk_pin << 16;
 800240c:	8bbb      	ldrh	r3, [r7, #28]
 800240e:	041a      	lsls	r2, r3, #16
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	619a      	str	r2, [r3, #24]
	    for (uint32_t i = 0; i < config_size; i++) {
 8002414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002416:	3301      	adds	r3, #1
 8002418:	637b      	str	r3, [r7, #52]	@ 0x34
 800241a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	429a      	cmp	r2, r3
 8002420:	f4ff af3c 	bcc.w	800229c <FPGA_LoadConfig+0xf0>
	    }

	    // 8. Завершающие импульсы (увеличиваем количество для надежности)
	    for (int i = 0; i < 12; i++) { // Увеличиваем до 12
 8002424:	2300      	movs	r3, #0
 8002426:	633b      	str	r3, [r7, #48]	@ 0x30
 8002428:	e018      	b.n	800245c <FPGA_LoadConfig+0x2b0>
 800242a:	bf00      	nop
 800242c:	40020800 	.word	0x40020800
 8002430:	40020000 	.word	0x40020000
 8002434:	40020400 	.word	0x40020400
 8002438:	08013108 	.word	0x08013108
 800243c:	00059d8b 	.word	0x00059d8b
	        clk_port->BSRR = clk_pin;
 8002440:	8bba      	ldrh	r2, [r7, #28]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	619a      	str	r2, [r3, #24]
	        __NOP(); __NOP();
 8002446:	bf00      	nop
 8002448:	bf00      	nop
	        clk_port->BSRR = (uint32_t)clk_pin << 16;
 800244a:	8bbb      	ldrh	r3, [r7, #28]
 800244c:	041a      	lsls	r2, r3, #16
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	619a      	str	r2, [r3, #24]
	        __NOP(); __NOP();
 8002452:	bf00      	nop
 8002454:	bf00      	nop
	    for (int i = 0; i < 12; i++) { // Увеличиваем до 12
 8002456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002458:	3301      	adds	r3, #1
 800245a:	633b      	str	r3, [r7, #48]	@ 0x30
 800245c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245e:	2b0b      	cmp	r3, #11
 8002460:	ddee      	ble.n	8002440 <FPGA_LoadConfig+0x294>
	    }

	    // 9. Активация ПЛИС с достаточной паузой
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   // CE = 1
 8002462:	2201      	movs	r2, #1
 8002464:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002468:	480c      	ldr	r0, [pc, #48]	@ (800249c <FPGA_LoadConfig+0x2f0>)
 800246a:	f002 fad5 	bl	8004a18 <HAL_GPIO_WritePin>
	    HAL_Delay(3); // Увеличиваем до 3 мс
 800246e:	2003      	movs	r0, #3
 8002470:	f001 fce0 	bl	8003e34 <HAL_Delay>

	    // 10. Финальные настройки
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);  // TH_CS = 0
 8002474:	2200      	movs	r2, #0
 8002476:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800247a:	4808      	ldr	r0, [pc, #32]	@ (800249c <FPGA_LoadConfig+0x2f0>)
 800247c:	f002 facc 	bl	8004a18 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);  // CSO = 0
 8002480:	2200      	movs	r2, #0
 8002482:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002486:	4806      	ldr	r0, [pc, #24]	@ (80024a0 <FPGA_LoadConfig+0x2f4>)
 8002488:	f002 fac6 	bl	8004a18 <HAL_GPIO_WritePin>

	    // 11. Финальная пауза для стабилизации
	    HAL_Delay(5); // Увеличиваем до 5 мс
 800248c:	2005      	movs	r0, #5
 800248e:	f001 fcd1 	bl	8003e34 <HAL_Delay>
}
 8002492:	bf00      	nop
 8002494:	3738      	adds	r7, #56	@ 0x38
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40020800 	.word	0x40020800
 80024a0:	40020400 	.word	0x40020400

080024a4 <ReadFPGAData>:


/**
  * @brief Многократное чтение и усреднение данных из ПЛИС с проверкой порога
  */
void ReadFPGAData(void) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	@ 0x30
 80024a8:	af02      	add	r7, sp, #8
    // Инициализация итогового массива нулями
    memset(averaged_fpga_data, 0, sizeof(averaged_fpga_data));
 80024aa:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80024ae:	2100      	movs	r1, #0
 80024b0:	4891      	ldr	r0, [pc, #580]	@ (80026f8 <ReadFPGAData+0x254>)
 80024b2:	f00d f954 	bl	800f75e <memset>
    averaging_complete = false;
 80024b6:	4b91      	ldr	r3, [pc, #580]	@ (80026fc <ReadFPGAData+0x258>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]

    // Получаем количество циклов из параметров
    uint32_t cycles = params.cycle_number;
 80024bc:	4b90      	ldr	r3, [pc, #576]	@ (8002700 <ReadFPGAData+0x25c>)
 80024be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24
    float threshold = params.threshold; // Получаем порог из параметров
 80024c2:	4b8f      	ldr	r3, [pc, #572]	@ (8002700 <ReadFPGAData+0x25c>)
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	60bb      	str	r3, [r7, #8]

    if (cycles == 0) {
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <ReadFPGAData+0x2e>
        cycles = 1; // Минимум один цикл
 80024ce:	2301      	movs	r3, #1
 80024d0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    snprintf(usb_msg, sizeof(usb_msg), "Starting %lu averaging cycles with threshold: %.1f", cycles, threshold);
 80024d2:	68b8      	ldr	r0, [r7, #8]
 80024d4:	f7fe f848 	bl	8000568 <__aeabi_f2d>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	e9cd 2300 	strd	r2, r3, [sp]
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	4a88      	ldr	r2, [pc, #544]	@ (8002704 <ReadFPGAData+0x260>)
 80024e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024e8:	4887      	ldr	r0, [pc, #540]	@ (8002708 <ReadFPGAData+0x264>)
 80024ea:	f00d f86f 	bl	800f5cc <sniprintf>
   // SendUSBDebugMessage(usb_msg);

    uint32_t valid_cycles = 0; // Счетчик валидных циклов (без превышения порога)
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]

    for (uint32_t cycle = 0; cycle < cycles; cycle++) {
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e0b7      	b.n	8002668 <ReadFPGAData+0x1c4>
        // Генерируем START импульс для нового измерения
        GenerateStartPulse();
 80024f8:	f7fe fdd0 	bl	800109c <GenerateStartPulse>

        // Ждем некоторое время для стабилизации ПЛИС
        HAL_Delay(1);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f001 fc99 	bl	8003e34 <HAL_Delay>

        bool threshold_exceeded = false; // Флаг превышения порога
 8002502:	2300      	movs	r3, #0
 8002504:	76fb      	strb	r3, [r7, #27]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002506:	b672      	cpsid	i
}
 8002508:	bf00      	nop

        // Читаем данные во временный буфер с проверкой порога
        __disable_irq(); // Отключаем прерывания для атомарного чтения

        for (int i = 0; i < DATA_SIZE; i++) {
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e02e      	b.n	800256e <ReadFPGAData+0xca>
            // Читаем значение - ПЛИС автоматически переключает индекс при каждом чтении
            uint16_t value = fpga_reg[0];
 8002510:	4b7e      	ldr	r3, [pc, #504]	@ (800270c <ReadFPGAData+0x268>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	80fb      	strh	r3, [r7, #6]
            uint16_t raw_value = value & 0x0FFF - 2048; // Извлекаем 12-битное значение
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800251e:	80bb      	strh	r3, [r7, #4]

            // Проверяем порог (по модулю)
            if (abs((int16_t)raw_value) > threshold) { // 2048 - среднее значение для 12-битного АЦП
 8002520:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	bfb8      	it	lt
 8002528:	425b      	neglt	r3, r3
 800252a:	b29b      	uxth	r3, r3
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002534:	ed97 7a02 	vldr	s14, [r7, #8]
 8002538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800253c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002540:	d504      	bpl.n	800254c <ReadFPGAData+0xa8>
                threshold_exceeded = true;
 8002542:	2301      	movs	r3, #1
 8002544:	76fb      	strb	r3, [r7, #27]
  __ASM volatile ("cpsie i" : : : "memory");
 8002546:	b662      	cpsie	i
}
 8002548:	bf00      	nop
                __enable_irq(); // Включаем прерывания перед выходом
                break; // Немедленно выходим из цикла чтения
 800254a:	e015      	b.n	8002578 <ReadFPGAData+0xd4>
            }

            temp_fpga_buffer[i] = raw_value;
 800254c:	4970      	ldr	r1, [pc, #448]	@ (8002710 <ReadFPGAData+0x26c>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	88ba      	ldrh	r2, [r7, #4]
 8002552:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

            // Небольшая задержка между чтениями для стабильности
            for(volatile int j = 0; j < 10; j++);
 8002556:	2300      	movs	r3, #0
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	e002      	b.n	8002562 <ReadFPGAData+0xbe>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	3301      	adds	r3, #1
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b09      	cmp	r3, #9
 8002566:	ddf9      	ble.n	800255c <ReadFPGAData+0xb8>
        for (int i = 0; i < DATA_SIZE; i++) {
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002574:	4293      	cmp	r3, r2
 8002576:	ddcb      	ble.n	8002510 <ReadFPGAData+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8002578:	b662      	cpsie	i
}
 800257a:	bf00      	nop
        }

        __enable_irq(); // Включаем прерывания обратно

        // Если порог превышен, пропускаем этот цикл
        if (threshold_exceeded) {
 800257c:	7efb      	ldrb	r3, [r7, #27]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <ReadFPGAData+0xf0>
            snprintf(usb_msg, sizeof(usb_msg), "Cycle %lu skipped - threshold exceeded", cycle + 1);
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3301      	adds	r3, #1
 8002586:	4a63      	ldr	r2, [pc, #396]	@ (8002714 <ReadFPGAData+0x270>)
 8002588:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800258c:	485e      	ldr	r0, [pc, #376]	@ (8002708 <ReadFPGAData+0x264>)
 800258e:	f00d f81d 	bl	800f5cc <sniprintf>
           // SendUSBDebugMessage(usb_msg);
            continue; // Переходим к следующей итерации цикла
 8002592:	e066      	b.n	8002662 <ReadFPGAData+0x1be>
        }

        // Усредняем данные только если цикл валидный
        valid_cycles++;
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	3301      	adds	r3, #1
 8002598:	623b      	str	r3, [r7, #32]
        for (int i = 0; i < DATA_SIZE; i++) {
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	e039      	b.n	8002614 <ReadFPGAData+0x170>
            // Первый валидный цикл - просто копируем, последующие - усредняем
            if (valid_cycles == 1) {
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10e      	bne.n	80025c4 <ReadFPGAData+0x120>
                averaged_fpga_data[i] = (float)temp_fpga_buffer[i];
 80025a6:	4a5a      	ldr	r2, [pc, #360]	@ (8002710 <ReadFPGAData+0x26c>)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b6:	4a50      	ldr	r2, [pc, #320]	@ (80026f8 <ReadFPGAData+0x254>)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	edc3 7a00 	vstr	s15, [r3]
 80025c2:	e024      	b.n	800260e <ReadFPGAData+0x16a>
            } else {
                // Усреднение: (предыдущее * циклы + новое) / (циклы + 1)
                averaged_fpga_data[i] = (averaged_fpga_data[i] * (valid_cycles - 1) + (float)temp_fpga_buffer[i]) / valid_cycles;
 80025c4:	4a4c      	ldr	r2, [pc, #304]	@ (80026f8 <ReadFPGAData+0x254>)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	ed93 7a00 	vldr	s14, [r3]
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	ee07 3a90 	vmov	s15, r3
 80025d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002710 <ReadFPGAData+0x26c>)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025e8:	ee07 3a90 	vmov	s15, r3
 80025ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002602:	4a3d      	ldr	r2, [pc, #244]	@ (80026f8 <ReadFPGAData+0x254>)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < DATA_SIZE; i++) {
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	3301      	adds	r3, #1
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f241 3287 	movw	r2, #4999	@ 0x1387
 800261a:	4293      	cmp	r3, r2
 800261c:	ddc0      	ble.n	80025a0 <ReadFPGAData+0xfc>
            }
        }

        // Опционально: отправляем прогресс по USB
        if ((cycle + 1) % 10 == 0 || cycle == cycles - 1) {
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	1c59      	adds	r1, r3, #1
 8002622:	4b3d      	ldr	r3, [pc, #244]	@ (8002718 <ReadFPGAData+0x274>)
 8002624:	fba3 2301 	umull	r2, r3, r3, r1
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	1aca      	subs	r2, r1, r3
 8002634:	2a00      	cmp	r2, #0
 8002636:	d004      	beq.n	8002642 <ReadFPGAData+0x19e>
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	3b01      	subs	r3, #1
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	429a      	cmp	r2, r3
 8002640:	d10c      	bne.n	800265c <ReadFPGAData+0x1b8>
            snprintf(usb_msg, sizeof(usb_msg), "Averaging progress: %lu/%lu cycles, valid: %lu",
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	4613      	mov	r3, r2
 8002650:	4a32      	ldr	r2, [pc, #200]	@ (800271c <ReadFPGAData+0x278>)
 8002652:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002656:	482c      	ldr	r0, [pc, #176]	@ (8002708 <ReadFPGAData+0x264>)
 8002658:	f00c ffb8 	bl	800f5cc <sniprintf>
                     cycle + 1, cycles, valid_cycles);
          //  SendUSBDebugMessage(usb_msg);
        }

        // Небольшая пауза между циклами
        HAL_Delay(10);
 800265c:	200a      	movs	r0, #10
 800265e:	f001 fbe9 	bl	8003e34 <HAL_Delay>
    for (uint32_t cycle = 0; cycle < cycles; cycle++) {
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3301      	adds	r3, #1
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	429a      	cmp	r2, r3
 800266e:	f4ff af43 	bcc.w	80024f8 <ReadFPGAData+0x54>
    }

    // Копируем усредненные данные в основную структуру только если есть валидные циклы
    if (valid_cycles > 0) {
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d032      	beq.n	80026de <ReadFPGAData+0x23a>
        for (int i = 0; i < DATA_SIZE; i++) {
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	e011      	b.n	80026a2 <ReadFPGAData+0x1fe>
            fpga_data.data[i] = (uint16_t)averaged_fpga_data[i]; // Приводим к uint16_t для обратной совместимости
 800267e:	4a1e      	ldr	r2, [pc, #120]	@ (80026f8 <ReadFPGAData+0x254>)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800268e:	ee17 3a90 	vmov	r3, s15
 8002692:	b299      	uxth	r1, r3
 8002694:	4a22      	ldr	r2, [pc, #136]	@ (8002720 <ReadFPGAData+0x27c>)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int i = 0; i < DATA_SIZE; i++) {
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3301      	adds	r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80026a8:	4293      	cmp	r3, r2
 80026aa:	dde8      	ble.n	800267e <ReadFPGAData+0x1da>
        }
        fpga_data.data_count = DATA_SIZE;
 80026ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002720 <ReadFPGAData+0x27c>)
 80026ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026b2:	2288      	movs	r2, #136	@ 0x88
 80026b4:	f883 2711 	strb.w	r2, [r3, #1809]	@ 0x711
        fpga_data.data_ready = true;
 80026b8:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <ReadFPGAData+0x27c>)
 80026ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2710 	strb.w	r2, [r3, #1808]	@ 0x710
        averaging_complete = true;
 80026c4:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <ReadFPGAData+0x258>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]

        snprintf(usb_msg, sizeof(usb_msg), "Averaging completed: %lu valid cycles out of %lu", valid_cycles, cycles);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	4a14      	ldr	r2, [pc, #80]	@ (8002724 <ReadFPGAData+0x280>)
 80026d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026d6:	480c      	ldr	r0, [pc, #48]	@ (8002708 <ReadFPGAData+0x264>)
 80026d8:	f00c ff78 	bl	800f5cc <sniprintf>
    } else {
        fpga_data.data_ready = false;
        averaging_complete = false;
       // SendUSBDebugMessage("Averaging failed: no valid cycles (all exceeded threshold)");
    }
}
 80026dc:	e008      	b.n	80026f0 <ReadFPGAData+0x24c>
        fpga_data.data_ready = false;
 80026de:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <ReadFPGAData+0x27c>)
 80026e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2710 	strb.w	r2, [r3, #1808]	@ 0x710
        averaging_complete = false;
 80026ea:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <ReadFPGAData+0x258>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
}
 80026f0:	bf00      	nop
 80026f2:	3728      	adds	r7, #40	@ 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	2000583c 	.word	0x2000583c
 80026fc:	2000a65c 	.word	0x2000a65c
 8002700:	2000a670 	.word	0x2000a670
 8002704:	08012fe4 	.word	0x08012fe4
 8002708:	20000438 	.word	0x20000438
 800270c:	20003128 	.word	0x20003128
 8002710:	2000312c 	.word	0x2000312c
 8002714:	08013018 	.word	0x08013018
 8002718:	cccccccd 	.word	0xcccccccd
 800271c:	08013040 	.word	0x08013040
 8002720:	20000a14 	.word	0x20000a14
 8002724:	08013070 	.word	0x08013070

08002728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800272e:	f001 fb0f 	bl	8003d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002732:	f000 f8f5 	bl	8002920 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // Принудительно включаем тактирование всех используемых портов
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b66      	ldr	r3, [pc, #408]	@ (80028d4 <main+0x1ac>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	4a65      	ldr	r2, [pc, #404]	@ (80028d4 <main+0x1ac>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6313      	str	r3, [r2, #48]	@ 0x30
 8002746:	4b63      	ldr	r3, [pc, #396]	@ (80028d4 <main+0x1ac>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	4b5f      	ldr	r3, [pc, #380]	@ (80028d4 <main+0x1ac>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	4a5e      	ldr	r2, [pc, #376]	@ (80028d4 <main+0x1ac>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6313      	str	r3, [r2, #48]	@ 0x30
 8002762:	4b5c      	ldr	r3, [pc, #368]	@ (80028d4 <main+0x1ac>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	4b58      	ldr	r3, [pc, #352]	@ (80028d4 <main+0x1ac>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	4a57      	ldr	r2, [pc, #348]	@ (80028d4 <main+0x1ac>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	6313      	str	r3, [r2, #48]	@ 0x30
 800277e:	4b55      	ldr	r3, [pc, #340]	@ (80028d4 <main+0x1ac>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800278a:	f000 fa0b 	bl	8002ba4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800278e:	f000 f9df 	bl	8002b50 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8002792:	f00a fa01 	bl	800cb98 <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 8002796:	f000 f92d 	bl	80029f4 <MX_DAC_Init>
  MX_TIM3_Init();
 800279a:	f000 f98b 	bl	8002ab4 <MX_TIM3_Init>
  MX_FSMC_Init();
 800279e:	f000 fafb 	bl	8002d98 <MX_FSMC_Init>
  MX_SPI2_Init();
 80027a2:	f000 f951 	bl	8002a48 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Умеренное уменьшение задержки
  HAL_Delay(150);
 80027a6:	2096      	movs	r0, #150	@ 0x96
 80027a8:	f001 fb44 	bl	8003e34 <HAL_Delay>


  	      // Загружаем конфигурацию ПЛИС
  	      FPGA_LoadConfig();
 80027ac:	f7ff fcfe 	bl	80021ac <FPGA_LoadConfig>

  	      // Уменьшаем дополнительную паузу
  	      HAL_Delay(100);
 80027b0:	2064      	movs	r0, #100	@ 0x64
 80027b2:	f001 fb3f 	bl	8003e34 <HAL_Delay>
	  HAL_TIM_Base_Start(&htim3);
 80027b6:	4848      	ldr	r0, [pc, #288]	@ (80028d8 <main+0x1b0>)
 80027b8:	f004 fd1c 	bl	80071f4 <HAL_TIM_Base_Start>
	  srand(HAL_GetTick());
 80027bc:	f001 fb2e 	bl	8003e1c <HAL_GetTick>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f00b f912 	bl	800d9ec <srand>

	  HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 80027c8:	2201      	movs	r2, #1
 80027ca:	4944      	ldr	r1, [pc, #272]	@ (80028dc <main+0x1b4>)
 80027cc:	4844      	ldr	r0, [pc, #272]	@ (80028e0 <main+0x1b8>)
 80027ce:	f005 fa0e 	bl	8007bee <HAL_UART_Receive_IT>

	  // Инициализация указателя на регистр ПЛИС
	  fpga_reg = (volatile uint16_t *)FPGA_BASE_ADDRESS;
 80027d2:	4b44      	ldr	r3, [pc, #272]	@ (80028e4 <main+0x1bc>)
 80027d4:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80027d8:	601a      	str	r2, [r3, #0]

	  // Инициализация структуры данных ПЛИС
	  memset(&fpga_data, 0, sizeof(fpga_data));
 80027da:	f242 7212 	movw	r2, #10002	@ 0x2712
 80027de:	2100      	movs	r1, #0
 80027e0:	4841      	ldr	r0, [pc, #260]	@ (80028e8 <main+0x1c0>)
 80027e2:	f00c ffbc 	bl	800f75e <memset>
	  HAL_Delay(1000);
 80027e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027ea:	f001 fb23 	bl	8003e34 <HAL_Delay>
	  // Загружаем параметры из энергонезависимой памяти при старте
	  HAL_Delay(1000);
 80027ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027f2:	f001 fb1f 	bl	8003e34 <HAL_Delay>
	  LoadParametersFromFlash();
 80027f6:	f000 feb5 	bl	8003564 <LoadParametersFromFlash>
	  HAL_Delay(1000);
 80027fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027fe:	f001 fb19 	bl	8003e34 <HAL_Delay>


	  InitializeLoRa();
 8002802:	f7ff fb93 	bl	8001f2c <InitializeLoRa>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1) {


	      if (new_data_received) {
 8002806:	4b39      	ldr	r3, [pc, #228]	@ (80028ec <main+0x1c4>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d028      	beq.n	8002862 <main+0x13a>

	          uart_message_received = 0;
 8002810:	4b37      	ldr	r3, [pc, #220]	@ (80028f0 <main+0x1c8>)
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]

	          if (strncmp((char*)usb_rx_buffer, "SETPARAMS=", 10) == 0) {
 8002816:	220a      	movs	r2, #10
 8002818:	4936      	ldr	r1, [pc, #216]	@ (80028f4 <main+0x1cc>)
 800281a:	4837      	ldr	r0, [pc, #220]	@ (80028f8 <main+0x1d0>)
 800281c:	f00c ffb4 	bl	800f788 <strncmp>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <main+0x10c>
	              ParseParameters((char*)usb_rx_buffer + 10);
 8002826:	4b35      	ldr	r3, [pc, #212]	@ (80028fc <main+0x1d4>)
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe fc61 	bl	80010f0 <ParseParameters>
	              SendParametersResponse();
 800282e:	f7fe fe1b 	bl	8001468 <SendParametersResponse>
 8002832:	e00a      	b.n	800284a <main+0x122>
	          }
	          else if (strncmp((char*)usb_rx_buffer, "1", 1) == 0) {
 8002834:	4b30      	ldr	r3, [pc, #192]	@ (80028f8 <main+0x1d0>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b31      	ldr	r3, [pc, #196]	@ (8002900 <main+0x1d8>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <main+0x122>
	              ProcessUSBCommand('1');
 8002844:	2031      	movs	r0, #49	@ 0x31
 8002846:	f7fe fc45 	bl	80010d4 <ProcessUSBCommand>
	          }
	          memset((void*)usb_rx_buffer, 0, USB_RX_BUFFER_SIZE);
 800284a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800284e:	2100      	movs	r1, #0
 8002850:	4829      	ldr	r0, [pc, #164]	@ (80028f8 <main+0x1d0>)
 8002852:	f00c ff84 	bl	800f75e <memset>
	          usb_rx_index = 0;
 8002856:	4b2b      	ldr	r3, [pc, #172]	@ (8002904 <main+0x1dc>)
 8002858:	2200      	movs	r2, #0
 800285a:	801a      	strh	r2, [r3, #0]
	          new_data_received = 0;
 800285c:	4b23      	ldr	r3, [pc, #140]	@ (80028ec <main+0x1c4>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
	      }

	      // Проверяем, нужно ли выполнить расчет толщины
	      if (calculate_thickness_requested && parameters_initialized) {
 8002862:	4b29      	ldr	r3, [pc, #164]	@ (8002908 <main+0x1e0>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <main+0x154>
 800286a:	4b28      	ldr	r3, [pc, #160]	@ (800290c <main+0x1e4>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <main+0x154>
	          calculate_thickness_requested = false;
 8002872:	4b25      	ldr	r3, [pc, #148]	@ (8002908 <main+0x1e0>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
	          ProcessDataByMethod();
 8002878:	f001 f9cc 	bl	8003c14 <ProcessDataByMethod>
	          //SendUSBDebugMessage("Thickness calculation completed");
	      }

	      // Обработка UART от дежурного МК
	      if(uart_message_received) {
 800287c:	4b1c      	ldr	r3, [pc, #112]	@ (80028f0 <main+0x1c8>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <main+0x172>


	          uart_message_received = 0;
 8002886:	4b1a      	ldr	r3, [pc, #104]	@ (80028f0 <main+0x1c8>)
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
	          ProcessUARTCommand((uint8_t*)uart_rx_data, uart_rx_len);
 800288c:	4b20      	ldr	r3, [pc, #128]	@ (8002910 <main+0x1e8>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4619      	mov	r1, r3
 8002894:	481f      	ldr	r0, [pc, #124]	@ (8002914 <main+0x1ec>)
 8002896:	f7fe febf 	bl	8001618 <ProcessUARTCommand>
	      }

	      // Таймаут UART приема
	      if(uart_rx_pos > 0 && (HAL_GetTick() - uart_last_rx_time) > UART_RX_TIMEOUT_MS) {
 800289a:	4b1f      	ldr	r3, [pc, #124]	@ (8002918 <main+0x1f0>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d014      	beq.n	80028cc <main+0x1a4>
 80028a2:	f001 fabb 	bl	8003e1c <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b1c      	ldr	r3, [pc, #112]	@ (800291c <main+0x1f4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	@ 0x64
 80028b0:	d90c      	bls.n	80028cc <main+0x1a4>
	          uart_rx_pos = 0;
 80028b2:	4b19      	ldr	r3, [pc, #100]	@ (8002918 <main+0x1f0>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
	          memset(uart_rx_buf, 0, sizeof(uart_rx_buf));
 80028b8:	2280      	movs	r2, #128	@ 0x80
 80028ba:	2100      	movs	r1, #0
 80028bc:	4807      	ldr	r0, [pc, #28]	@ (80028dc <main+0x1b4>)
 80028be:	f00c ff4e 	bl	800f75e <memset>
	          HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 1);
 80028c2:	2201      	movs	r2, #1
 80028c4:	4905      	ldr	r1, [pc, #20]	@ (80028dc <main+0x1b4>)
 80028c6:	4806      	ldr	r0, [pc, #24]	@ (80028e0 <main+0x1b8>)
 80028c8:	f005 f991 	bl	8007bee <HAL_UART_Receive_IT>
	      }

	      HAL_Delay(10);
 80028cc:	200a      	movs	r0, #10
 80028ce:	f001 fab1 	bl	8003e34 <HAL_Delay>
	      if (new_data_received) {
 80028d2:	e798      	b.n	8002806 <main+0xde>
 80028d4:	40023800 	.word	0x40023800
 80028d8:	20000358 	.word	0x20000358
 80028dc:	200008d0 	.word	0x200008d0
 80028e0:	200003a0 	.word	0x200003a0
 80028e4:	20003128 	.word	0x20003128
 80028e8:	20000a14 	.word	0x20000a14
 80028ec:	200188ca 	.word	0x200188ca
 80028f0:	200009d9 	.word	0x200009d9
 80028f4:	080130a4 	.word	0x080130a4
 80028f8:	2001879c 	.word	0x2001879c
 80028fc:	200187a6 	.word	0x200187a6
 8002900:	080130b0 	.word	0x080130b0
 8002904:	200188c8 	.word	0x200188c8
 8002908:	2000a6b1 	.word	0x2000a6b1
 800290c:	2000a6b0 	.word	0x2000a6b0
 8002910:	200009d8 	.word	0x200009d8
 8002914:	20000958 	.word	0x20000958
 8002918:	20000950 	.word	0x20000950
 800291c:	20000954 	.word	0x20000954

08002920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b094      	sub	sp, #80	@ 0x50
 8002924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002926:	f107 0320 	add.w	r3, r7, #32
 800292a:	2230      	movs	r2, #48	@ 0x30
 800292c:	2100      	movs	r1, #0
 800292e:	4618      	mov	r0, r3
 8002930:	f00c ff15 	bl	800f75e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	4b28      	ldr	r3, [pc, #160]	@ (80029ec <SystemClock_Config+0xcc>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	4a27      	ldr	r2, [pc, #156]	@ (80029ec <SystemClock_Config+0xcc>)
 800294e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002952:	6413      	str	r3, [r2, #64]	@ 0x40
 8002954:	4b25      	ldr	r3, [pc, #148]	@ (80029ec <SystemClock_Config+0xcc>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002960:	2300      	movs	r3, #0
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <SystemClock_Config+0xd0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a21      	ldr	r2, [pc, #132]	@ (80029f0 <SystemClock_Config+0xd0>)
 800296a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b1f      	ldr	r3, [pc, #124]	@ (80029f0 <SystemClock_Config+0xd0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800297c:	2301      	movs	r3, #1
 800297e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002980:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002986:	2302      	movs	r3, #2
 8002988:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800298a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800298e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002990:	2308      	movs	r3, #8
 8002992:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002994:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002998:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800299a:	2302      	movs	r3, #2
 800299c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800299e:	2307      	movs	r3, #7
 80029a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a2:	f107 0320 	add.w	r3, r7, #32
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 faa2 	bl	8005ef0 <HAL_RCC_OscConfig>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80029b2:	f000 fa4f 	bl	8002e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029b6:	230f      	movs	r3, #15
 80029b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ba:	2302      	movs	r3, #2
 80029bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80029c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	2105      	movs	r1, #5
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 fd03 	bl	80063e0 <HAL_RCC_ClockConfig>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80029e0:	f000 fa38 	bl	8002e54 <Error_Handler>
  }
}
 80029e4:	bf00      	nop
 80029e6:	3750      	adds	r7, #80	@ 0x50
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40007000 	.word	0x40007000

080029f4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80029fa:	463b      	mov	r3, r7
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002a02:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <MX_DAC_Init+0x4c>)
 8002a04:	4a0f      	ldr	r2, [pc, #60]	@ (8002a44 <MX_DAC_Init+0x50>)
 8002a06:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002a08:	480d      	ldr	r0, [pc, #52]	@ (8002a40 <MX_DAC_Init+0x4c>)
 8002a0a:	f001 fb48 	bl	800409e <HAL_DAC_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002a14:	f000 fa1e 	bl	8002e54 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002a20:	463b      	mov	r3, r7
 8002a22:	2200      	movs	r2, #0
 8002a24:	4619      	mov	r1, r3
 8002a26:	4806      	ldr	r0, [pc, #24]	@ (8002a40 <MX_DAC_Init+0x4c>)
 8002a28:	f001 fb5b 	bl	80040e2 <HAL_DAC_ConfigChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002a32:	f000 fa0f 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200002ec 	.word	0x200002ec
 8002a44:	40007400 	.word	0x40007400

08002a48 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a4c:	4b17      	ldr	r3, [pc, #92]	@ (8002aac <MX_SPI2_Init+0x64>)
 8002a4e:	4a18      	ldr	r2, [pc, #96]	@ (8002ab0 <MX_SPI2_Init+0x68>)
 8002a50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a52:	4b16      	ldr	r3, [pc, #88]	@ (8002aac <MX_SPI2_Init+0x64>)
 8002a54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a5a:	4b14      	ldr	r3, [pc, #80]	@ (8002aac <MX_SPI2_Init+0x64>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a60:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <MX_SPI2_Init+0x64>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a66:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <MX_SPI2_Init+0x64>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002aac <MX_SPI2_Init+0x64>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	@ (8002aac <MX_SPI2_Init+0x64>)
 8002a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <MX_SPI2_Init+0x64>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a80:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <MX_SPI2_Init+0x64>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a86:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <MX_SPI2_Init+0x64>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a8c:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <MX_SPI2_Init+0x64>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002a92:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <MX_SPI2_Init+0x64>)
 8002a94:	220a      	movs	r2, #10
 8002a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a98:	4804      	ldr	r0, [pc, #16]	@ (8002aac <MX_SPI2_Init+0x64>)
 8002a9a:	f003 fec1 	bl	8006820 <HAL_SPI_Init>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002aa4:	f000 f9d6 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000300 	.word	0x20000300
 8002ab0:	40003800 	.word	0x40003800

08002ab4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aba:	f107 0308 	add.w	r3, r7, #8
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac8:	463b      	mov	r3, r7
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b48 <MX_TIM3_Init+0x94>)
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b4c <MX_TIM3_Init+0x98>)
 8002ad4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <MX_TIM3_Init+0x94>)
 8002ad8:	22a7      	movs	r2, #167	@ 0xa7
 8002ada:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002adc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <MX_TIM3_Init+0x94>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ae2:	4b19      	ldr	r3, [pc, #100]	@ (8002b48 <MX_TIM3_Init+0x94>)
 8002ae4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ae8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aea:	4b17      	ldr	r3, [pc, #92]	@ (8002b48 <MX_TIM3_Init+0x94>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002af0:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <MX_TIM3_Init+0x94>)
 8002af2:	2280      	movs	r2, #128	@ 0x80
 8002af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002af6:	4814      	ldr	r0, [pc, #80]	@ (8002b48 <MX_TIM3_Init+0x94>)
 8002af8:	f004 fb2c 	bl	8007154 <HAL_TIM_Base_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002b02:	f000 f9a7 	bl	8002e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b0c:	f107 0308 	add.w	r3, r7, #8
 8002b10:	4619      	mov	r1, r3
 8002b12:	480d      	ldr	r0, [pc, #52]	@ (8002b48 <MX_TIM3_Init+0x94>)
 8002b14:	f004 fcc6 	bl	80074a4 <HAL_TIM_ConfigClockSource>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002b1e:	f000 f999 	bl	8002e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4806      	ldr	r0, [pc, #24]	@ (8002b48 <MX_TIM3_Init+0x94>)
 8002b30:	f004 fef2 	bl	8007918 <HAL_TIMEx_MasterConfigSynchronization>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002b3a:	f000 f98b 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b3e:	bf00      	nop
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000358 	.word	0x20000358
 8002b4c:	40000400 	.word	0x40000400

08002b50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b54:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <MX_USART1_UART_Init+0x4c>)
 8002b56:	4a12      	ldr	r2, [pc, #72]	@ (8002ba0 <MX_USART1_UART_Init+0x50>)
 8002b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	@ (8002b9c <MX_USART1_UART_Init+0x4c>)
 8002b5c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b62:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <MX_USART1_UART_Init+0x4c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b68:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <MX_USART1_UART_Init+0x4c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <MX_USART1_UART_Init+0x4c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b74:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <MX_USART1_UART_Init+0x4c>)
 8002b76:	220c      	movs	r2, #12
 8002b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7a:	4b08      	ldr	r3, [pc, #32]	@ (8002b9c <MX_USART1_UART_Init+0x4c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b80:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <MX_USART1_UART_Init+0x4c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b86:	4805      	ldr	r0, [pc, #20]	@ (8002b9c <MX_USART1_UART_Init+0x4c>)
 8002b88:	f004 ff56 	bl	8007a38 <HAL_UART_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b92:	f000 f95f 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200003a0 	.word	0x200003a0
 8002ba0:	40011000 	.word	0x40011000

08002ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	@ 0x30
 8002ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002baa:	f107 031c 	add.w	r3, r7, #28
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
 8002bb4:	609a      	str	r2, [r3, #8]
 8002bb6:	60da      	str	r2, [r3, #12]
 8002bb8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	4b70      	ldr	r3, [pc, #448]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	4a6f      	ldr	r2, [pc, #444]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002bc4:	f043 0310 	orr.w	r3, r3, #16
 8002bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bca:	4b6d      	ldr	r3, [pc, #436]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	4b69      	ldr	r3, [pc, #420]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	4a68      	ldr	r2, [pc, #416]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be6:	4b66      	ldr	r3, [pc, #408]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	4b62      	ldr	r3, [pc, #392]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	4a61      	ldr	r2, [pc, #388]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c02:	4b5f      	ldr	r3, [pc, #380]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b5b      	ldr	r3, [pc, #364]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	4a5a      	ldr	r2, [pc, #360]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002c18:	f043 0304 	orr.w	r3, r3, #4
 8002c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1e:	4b58      	ldr	r3, [pc, #352]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	4b54      	ldr	r3, [pc, #336]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	4a53      	ldr	r2, [pc, #332]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3a:	4b51      	ldr	r3, [pc, #324]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	4b4d      	ldr	r3, [pc, #308]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	4a4c      	ldr	r2, [pc, #304]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002c50:	f043 0308 	orr.w	r3, r3, #8
 8002c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c56:	4b4a      	ldr	r3, [pc, #296]	@ (8002d80 <MX_GPIO_Init+0x1dc>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2120      	movs	r1, #32
 8002c66:	4847      	ldr	r0, [pc, #284]	@ (8002d84 <MX_GPIO_Init+0x1e0>)
 8002c68:	f001 fed6 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f248 0120 	movw	r1, #32800	@ 0x8020
 8002c72:	4845      	ldr	r0, [pc, #276]	@ (8002d88 <MX_GPIO_Init+0x1e4>)
 8002c74:	f001 fed0 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 8002c7e:	4843      	ldr	r0, [pc, #268]	@ (8002d8c <MX_GPIO_Init+0x1e8>)
 8002c80:	f001 feca 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002c84:	2200      	movs	r2, #0
 8002c86:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 8002c8a:	4841      	ldr	r0, [pc, #260]	@ (8002d90 <MX_GPIO_Init+0x1ec>)
 8002c8c:	f001 fec4 	bl	8004a18 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2140      	movs	r1, #64	@ 0x40
 8002c94:	483f      	ldr	r0, [pc, #252]	@ (8002d94 <MX_GPIO_Init+0x1f0>)
 8002c96:	f001 febf 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8002c9a:	2306      	movs	r3, #6
 8002c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ca6:	f107 031c 	add.w	r3, r7, #28
 8002caa:	4619      	mov	r1, r3
 8002cac:	4835      	ldr	r0, [pc, #212]	@ (8002d84 <MX_GPIO_Init+0x1e0>)
 8002cae:	f001 fcff 	bl	80046b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cc2:	f107 031c 	add.w	r3, r7, #28
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	482e      	ldr	r0, [pc, #184]	@ (8002d84 <MX_GPIO_Init+0x1e0>)
 8002cca:	f001 fcf1 	bl	80046b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8002cce:	f248 0320 	movw	r3, #32800	@ 0x8020
 8002cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce0:	f107 031c 	add.w	r3, r7, #28
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4828      	ldr	r0, [pc, #160]	@ (8002d88 <MX_GPIO_Init+0x1e4>)
 8002ce8:	f001 fce2 	bl	80046b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cec:	2310      	movs	r3, #16
 8002cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf8:	f107 031c 	add.w	r3, r7, #28
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4824      	ldr	r0, [pc, #144]	@ (8002d90 <MX_GPIO_Init+0x1ec>)
 8002d00:	f001 fcd6 	bl	80046b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8002d04:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 8002d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d12:	2300      	movs	r3, #0
 8002d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d16:	f107 031c 	add.w	r3, r7, #28
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	481b      	ldr	r0, [pc, #108]	@ (8002d8c <MX_GPIO_Init+0x1e8>)
 8002d1e:	f001 fcc7 	bl	80046b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002d22:	f44f 637c 	mov.w	r3, #4032	@ 0xfc0
 8002d26:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d34:	f107 031c 	add.w	r3, r7, #28
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4815      	ldr	r0, [pc, #84]	@ (8002d90 <MX_GPIO_Init+0x1ec>)
 8002d3c:	f001 fcb8 	bl	80046b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4e:	f107 031c 	add.w	r3, r7, #28
 8002d52:	4619      	mov	r1, r3
 8002d54:	480c      	ldr	r0, [pc, #48]	@ (8002d88 <MX_GPIO_Init+0x1e4>)
 8002d56:	f001 fcab 	bl	80046b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d5a:	2340      	movs	r3, #64	@ 0x40
 8002d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d6a:	f107 031c 	add.w	r3, r7, #28
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4808      	ldr	r0, [pc, #32]	@ (8002d94 <MX_GPIO_Init+0x1f0>)
 8002d72:	f001 fc9d 	bl	80046b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002d76:	bf00      	nop
 8002d78:	3730      	adds	r7, #48	@ 0x30
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40020c00 	.word	0x40020c00

08002d98 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
 8002dac:	615a      	str	r2, [r3, #20]
 8002dae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002db0:	4b26      	ldr	r3, [pc, #152]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002db2:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8002db6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002db8:	4b24      	ldr	r3, [pc, #144]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002dba:	4a25      	ldr	r2, [pc, #148]	@ (8002e50 <MX_FSMC_Init+0xb8>)
 8002dbc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002dbe:	4b23      	ldr	r3, [pc, #140]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002dc4:	4b21      	ldr	r3, [pc, #132]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_PSRAM;
 8002dca:	4b20      	ldr	r3, [pc, #128]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002dcc:	2204      	movs	r2, #4
 8002dce:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002de2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002de8:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8002dee:	4b17      	ldr	r3, [pc, #92]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002df4:	4b15      	ldr	r3, [pc, #84]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002dfa:	4b14      	ldr	r3, [pc, #80]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002e00:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002e06:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8002e12:	2302      	movs	r3, #2
 8002e14:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 1;
 8002e16:	2301      	movs	r3, #1
 8002e18:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime =  5;
 8002e1a:	2305      	movs	r3, #5
 8002e1c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 2;
 8002e22:	2302      	movs	r3, #2
 8002e24:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8002e26:	2302      	movs	r3, #2
 8002e28:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	2200      	movs	r2, #0
 8002e32:	4619      	mov	r1, r3
 8002e34:	4805      	ldr	r0, [pc, #20]	@ (8002e4c <MX_FSMC_Init+0xb4>)
 8002e36:	f004 f945 	bl	80070c4 <HAL_SRAM_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 8002e40:	f000 f808 	bl	8002e54 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002e44:	bf00      	nop
 8002e46:	3720      	adds	r7, #32
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	200003e8 	.word	0x200003e8
 8002e50:	a0000104 	.word	0xa0000104

08002e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  while (1)
 8002e58:	bf00      	nop
 8002e5a:	e7fd      	b.n	8002e58 <Error_Handler+0x4>

08002e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <HAL_MspInit+0x4c>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea8 <HAL_MspInit+0x4c>)
 8002e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <HAL_MspInit+0x4c>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <HAL_MspInit+0x4c>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	4a08      	ldr	r2, [pc, #32]	@ (8002ea8 <HAL_MspInit+0x4c>)
 8002e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_MspInit+0x4c>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800

08002eac <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08a      	sub	sp, #40	@ 0x28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a17      	ldr	r2, [pc, #92]	@ (8002f28 <HAL_DAC_MspInit+0x7c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d127      	bne.n	8002f1e <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	4b16      	ldr	r3, [pc, #88]	@ (8002f2c <HAL_DAC_MspInit+0x80>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	4a15      	ldr	r2, [pc, #84]	@ (8002f2c <HAL_DAC_MspInit+0x80>)
 8002ed8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ede:	4b13      	ldr	r3, [pc, #76]	@ (8002f2c <HAL_DAC_MspInit+0x80>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <HAL_DAC_MspInit+0x80>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8002f2c <HAL_DAC_MspInit+0x80>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <HAL_DAC_MspInit+0x80>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f06:	2310      	movs	r3, #16
 8002f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f12:	f107 0314 	add.w	r3, r7, #20
 8002f16:	4619      	mov	r1, r3
 8002f18:	4805      	ldr	r0, [pc, #20]	@ (8002f30 <HAL_DAC_MspInit+0x84>)
 8002f1a:	f001 fbc9 	bl	80046b0 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8002f1e:	bf00      	nop
 8002f20:	3728      	adds	r7, #40	@ 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40007400 	.word	0x40007400
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40020000 	.word	0x40020000

08002f34 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	@ 0x28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3c:	f107 0314 	add.w	r3, r7, #20
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a19      	ldr	r2, [pc, #100]	@ (8002fb8 <HAL_SPI_MspInit+0x84>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d12c      	bne.n	8002fb0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	4b18      	ldr	r3, [pc, #96]	@ (8002fbc <HAL_SPI_MspInit+0x88>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	4a17      	ldr	r2, [pc, #92]	@ (8002fbc <HAL_SPI_MspInit+0x88>)
 8002f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f66:	4b15      	ldr	r3, [pc, #84]	@ (8002fbc <HAL_SPI_MspInit+0x88>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	4b11      	ldr	r3, [pc, #68]	@ (8002fbc <HAL_SPI_MspInit+0x88>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	4a10      	ldr	r2, [pc, #64]	@ (8002fbc <HAL_SPI_MspInit+0x88>)
 8002f7c:	f043 0302 	orr.w	r3, r3, #2
 8002f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f82:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <HAL_SPI_MspInit+0x88>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f8e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f94:	2302      	movs	r3, #2
 8002f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fa0:	2305      	movs	r3, #5
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa4:	f107 0314 	add.w	r3, r7, #20
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4805      	ldr	r0, [pc, #20]	@ (8002fc0 <HAL_SPI_MspInit+0x8c>)
 8002fac:	f001 fb80 	bl	80046b0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002fb0:	bf00      	nop
 8002fb2:	3728      	adds	r7, #40	@ 0x28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40003800 	.word	0x40003800
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40020400 	.word	0x40020400

08002fc4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800300c <HAL_TIM_Base_MspInit+0x48>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d115      	bne.n	8003002 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <HAL_TIM_Base_MspInit+0x4c>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	4a0c      	ldr	r2, [pc, #48]	@ (8003010 <HAL_TIM_Base_MspInit+0x4c>)
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <HAL_TIM_Base_MspInit+0x4c>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	201d      	movs	r0, #29
 8002ff8:	f001 f81b 	bl	8004032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ffc:	201d      	movs	r0, #29
 8002ffe:	f001 f834 	bl	800406a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40000400 	.word	0x40000400
 8003010:	40023800 	.word	0x40023800

08003014 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	@ 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1d      	ldr	r2, [pc, #116]	@ (80030a8 <HAL_UART_MspInit+0x94>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d133      	bne.n	800309e <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	4b1c      	ldr	r3, [pc, #112]	@ (80030ac <HAL_UART_MspInit+0x98>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	4a1b      	ldr	r2, [pc, #108]	@ (80030ac <HAL_UART_MspInit+0x98>)
 8003040:	f043 0310 	orr.w	r3, r3, #16
 8003044:	6453      	str	r3, [r2, #68]	@ 0x44
 8003046:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <HAL_UART_MspInit+0x98>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <HAL_UART_MspInit+0x98>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	4a14      	ldr	r2, [pc, #80]	@ (80030ac <HAL_UART_MspInit+0x98>)
 800305c:	f043 0302 	orr.w	r3, r3, #2
 8003060:	6313      	str	r3, [r2, #48]	@ 0x30
 8003062:	4b12      	ldr	r3, [pc, #72]	@ (80030ac <HAL_UART_MspInit+0x98>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800306e:	23c0      	movs	r3, #192	@ 0xc0
 8003070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003072:	2302      	movs	r3, #2
 8003074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307a:	2303      	movs	r3, #3
 800307c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800307e:	2307      	movs	r3, #7
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003082:	f107 0314 	add.w	r3, r7, #20
 8003086:	4619      	mov	r1, r3
 8003088:	4809      	ldr	r0, [pc, #36]	@ (80030b0 <HAL_UART_MspInit+0x9c>)
 800308a:	f001 fb11 	bl	80046b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	2100      	movs	r1, #0
 8003092:	2025      	movs	r0, #37	@ 0x25
 8003094:	f000 ffcd 	bl	8004032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003098:	2025      	movs	r0, #37	@ 0x25
 800309a:	f000 ffe6 	bl	800406a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800309e:	bf00      	nop
 80030a0:	3728      	adds	r7, #40	@ 0x28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40011000 	.word	0x40011000
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40020400 	.word	0x40020400

080030b4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80030c8:	4b1c      	ldr	r3, [pc, #112]	@ (800313c <HAL_FSMC_MspInit+0x88>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d131      	bne.n	8003134 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80030d0:	4b1a      	ldr	r3, [pc, #104]	@ (800313c <HAL_FSMC_MspInit+0x88>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <HAL_FSMC_MspInit+0x8c>)
 80030dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030de:	4a18      	ldr	r2, [pc, #96]	@ (8003140 <HAL_FSMC_MspInit+0x8c>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6393      	str	r3, [r2, #56]	@ 0x38
 80030e6:	4b16      	ldr	r3, [pc, #88]	@ (8003140 <HAL_FSMC_MspInit+0x8c>)
 80030e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_DA3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80030f2:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80030f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f8:	2302      	movs	r3, #2
 80030fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003100:	2303      	movs	r3, #3
 8003102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003104:	230c      	movs	r3, #12
 8003106:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003108:	1d3b      	adds	r3, r7, #4
 800310a:	4619      	mov	r1, r3
 800310c:	480d      	ldr	r0, [pc, #52]	@ (8003144 <HAL_FSMC_MspInit+0x90>)
 800310e:	f001 facf 	bl	80046b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003112:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 8003116:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003120:	2303      	movs	r3, #3
 8003122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003124:	230c      	movs	r3, #12
 8003126:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003128:	1d3b      	adds	r3, r7, #4
 800312a:	4619      	mov	r1, r3
 800312c:	4806      	ldr	r0, [pc, #24]	@ (8003148 <HAL_FSMC_MspInit+0x94>)
 800312e:	f001 fabf 	bl	80046b0 <HAL_GPIO_Init>
 8003132:	e000      	b.n	8003136 <HAL_FSMC_MspInit+0x82>
    return;
 8003134:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	2000a660 	.word	0x2000a660
 8003140:	40023800 	.word	0x40023800
 8003144:	40021000 	.word	0x40021000
 8003148:	40020c00 	.word	0x40020c00

0800314c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003154:	f7ff ffae 	bl	80030b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <NMI_Handler+0x4>

08003168 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800316c:	bf00      	nop
 800316e:	e7fd      	b.n	800316c <HardFault_Handler+0x4>

08003170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003174:	bf00      	nop
 8003176:	e7fd      	b.n	8003174 <MemManage_Handler+0x4>

08003178 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800317c:	bf00      	nop
 800317e:	e7fd      	b.n	800317c <BusFault_Handler+0x4>

08003180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003184:	bf00      	nop
 8003186:	e7fd      	b.n	8003184 <UsageFault_Handler+0x4>

08003188 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031b6:	f000 fe1d 	bl	8003df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031c4:	4802      	ldr	r0, [pc, #8]	@ (80031d0 <TIM3_IRQHandler+0x10>)
 80031c6:	f004 f87d 	bl	80072c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000358 	.word	0x20000358

080031d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031d8:	4802      	ldr	r0, [pc, #8]	@ (80031e4 <USART1_IRQHandler+0x10>)
 80031da:	f004 fd2d 	bl	8007c38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200003a0 	.word	0x200003a0

080031e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80031ec:	4802      	ldr	r0, [pc, #8]	@ (80031f8 <OTG_FS_IRQHandler+0x10>)
 80031ee:	f001 fd70 	bl	8004cd2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20019acc 	.word	0x20019acc

080031fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return 1;
 8003200:	2301      	movs	r3, #1
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <_kill>:

int _kill(int pid, int sig)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003216:	f00c fb99 	bl	800f94c <__errno>
 800321a:	4603      	mov	r3, r0
 800321c:	2216      	movs	r2, #22
 800321e:	601a      	str	r2, [r3, #0]
  return -1;
 8003220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <_exit>:

void _exit (int status)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003234:	f04f 31ff 	mov.w	r1, #4294967295
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ffe7 	bl	800320c <_kill>
  while (1) {}    /* Make sure we hang here */
 800323e:	bf00      	nop
 8003240:	e7fd      	b.n	800323e <_exit+0x12>

08003242 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	e00a      	b.n	800326a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003254:	f3af 8000 	nop.w
 8003258:	4601      	mov	r1, r0
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	60ba      	str	r2, [r7, #8]
 8003260:	b2ca      	uxtb	r2, r1
 8003262:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	3301      	adds	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	429a      	cmp	r2, r3
 8003270:	dbf0      	blt.n	8003254 <_read+0x12>
  }

  return len;
 8003272:	687b      	ldr	r3, [r7, #4]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	e009      	b.n	80032a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	60ba      	str	r2, [r7, #8]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3301      	adds	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	dbf1      	blt.n	800328e <_write+0x12>
  }
  return len;
 80032aa:	687b      	ldr	r3, [r7, #4]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_close>:

int _close(int file)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032dc:	605a      	str	r2, [r3, #4]
  return 0;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <_isatty>:

int _isatty(int file)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032f4:	2301      	movs	r3, #1
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003324:	4a14      	ldr	r2, [pc, #80]	@ (8003378 <_sbrk+0x5c>)
 8003326:	4b15      	ldr	r3, [pc, #84]	@ (800337c <_sbrk+0x60>)
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003330:	4b13      	ldr	r3, [pc, #76]	@ (8003380 <_sbrk+0x64>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003338:	4b11      	ldr	r3, [pc, #68]	@ (8003380 <_sbrk+0x64>)
 800333a:	4a12      	ldr	r2, [pc, #72]	@ (8003384 <_sbrk+0x68>)
 800333c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800333e:	4b10      	ldr	r3, [pc, #64]	@ (8003380 <_sbrk+0x64>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	429a      	cmp	r2, r3
 800334a:	d207      	bcs.n	800335c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800334c:	f00c fafe 	bl	800f94c <__errno>
 8003350:	4603      	mov	r3, r0
 8003352:	220c      	movs	r2, #12
 8003354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003356:	f04f 33ff 	mov.w	r3, #4294967295
 800335a:	e009      	b.n	8003370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800335c:	4b08      	ldr	r3, [pc, #32]	@ (8003380 <_sbrk+0x64>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003362:	4b07      	ldr	r3, [pc, #28]	@ (8003380 <_sbrk+0x64>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	4a05      	ldr	r2, [pc, #20]	@ (8003380 <_sbrk+0x64>)
 800336c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800336e:	68fb      	ldr	r3, [r7, #12]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20020000 	.word	0x20020000
 800337c:	00000400 	.word	0x00000400
 8003380:	2000a664 	.word	0x2000a664
 8003384:	2001a320 	.word	0x2001a320

08003388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800338c:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <SystemInit+0x20>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003392:	4a05      	ldr	r2, [pc, #20]	@ (80033a8 <SystemInit+0x20>)
 8003394:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <Read_Thermocouple_Temperature>:
bool thermocouple_error = false;

/**
  * @brief Чтение сырых данных с термопары
  */
uint16_t Read_Thermocouple_Temperature(void) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	@ 0x28
 80033b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b2:	f107 0310 	add.w	r3, r7, #16
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	611a      	str	r2, [r3, #16]
    uint16_t raw_data = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // Настройка PC11 (DATA) как входа
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80033c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	4619      	mov	r1, r3
 80033da:	482e      	ldr	r0, [pc, #184]	@ (8003494 <Read_Thermocouple_Temperature+0xe8>)
 80033dc:	f001 f968 	bl	80046b0 <HAL_GPIO_Init>

    // Активация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80033e0:	2200      	movs	r2, #0
 80033e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033e6:	482b      	ldr	r0, [pc, #172]	@ (8003494 <Read_Thermocouple_Temperature+0xe8>)
 80033e8:	f001 fb16 	bl	8004a18 <HAL_GPIO_WritePin>

    for(volatile int i = 0; i < 10; i++);
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e002      	b.n	80033f8 <Read_Thermocouple_Temperature+0x4c>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3301      	adds	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b09      	cmp	r3, #9
 80033fc:	ddf9      	ble.n	80033f2 <Read_Thermocouple_Temperature+0x46>

    // Чтение 16 бит данных
    for(uint8_t i = 0; i < 16; i++) {
 80033fe:	2300      	movs	r3, #0
 8003400:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003404:	e037      	b.n	8003476 <Read_Thermocouple_Temperature+0xca>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8003406:	2201      	movs	r2, #1
 8003408:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800340c:	4821      	ldr	r0, [pc, #132]	@ (8003494 <Read_Thermocouple_Temperature+0xe8>)
 800340e:	f001 fb03 	bl	8004a18 <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++);
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	e002      	b.n	800341e <Read_Thermocouple_Temperature+0x72>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3301      	adds	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b04      	cmp	r3, #4
 8003422:	ddf9      	ble.n	8003418 <Read_Thermocouple_Temperature+0x6c>

        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) {
 8003424:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003428:	481a      	ldr	r0, [pc, #104]	@ (8003494 <Read_Thermocouple_Temperature+0xe8>)
 800342a:	f001 fadd 	bl	80049e8 <HAL_GPIO_ReadPin>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00c      	beq.n	800344e <Read_Thermocouple_Temperature+0xa2>
            raw_data |= (1 << (15 - i));
 8003434:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003438:	f1c3 030f 	rsb	r3, r3, #15
 800343c:	2201      	movs	r2, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	b21a      	sxth	r2, r3
 8003444:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003448:	4313      	orrs	r3, r2
 800344a:	b21b      	sxth	r3, r3
 800344c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800344e:	2200      	movs	r2, #0
 8003450:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003454:	480f      	ldr	r0, [pc, #60]	@ (8003494 <Read_Thermocouple_Temperature+0xe8>)
 8003456:	f001 fadf 	bl	8004a18 <HAL_GPIO_WritePin>
        for(volatile int j = 0; j < 5; j++);
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	e002      	b.n	8003466 <Read_Thermocouple_Temperature+0xba>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3301      	adds	r3, #1
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b04      	cmp	r3, #4
 800346a:	ddf9      	ble.n	8003460 <Read_Thermocouple_Temperature+0xb4>
    for(uint8_t i = 0; i < 16; i++) {
 800346c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003470:	3301      	adds	r3, #1
 8003472:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003476:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800347a:	2b0f      	cmp	r3, #15
 800347c:	d9c3      	bls.n	8003406 <Read_Thermocouple_Temperature+0x5a>
    }

    // Деактивация чипа
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800347e:	2201      	movs	r2, #1
 8003480:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003484:	4803      	ldr	r0, [pc, #12]	@ (8003494 <Read_Thermocouple_Temperature+0xe8>)
 8003486:	f001 fac7 	bl	8004a18 <HAL_GPIO_WritePin>

    return raw_data;
 800348a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 800348c:	4618      	mov	r0, r3
 800348e:	3728      	adds	r7, #40	@ 0x28
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40020800 	.word	0x40020800

08003498 <Get_Thermocouple_Temperature>:

/**
  * @brief Получение температуры термопары в градусах Цельсия
  */
float Get_Thermocouple_Temperature(void) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
    uint16_t raw_data = Read_Thermocouple_Temperature();
 800349e:	f7ff ff85 	bl	80033ac <Read_Thermocouple_Temperature>
 80034a2:	4603      	mov	r3, r0
 80034a4:	80fb      	strh	r3, [r7, #6]

    // Проверка на разомкнутую цепь
    if(raw_data & 0x04) {
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <Get_Thermocouple_Temperature+0x24>
        thermocouple_error = true;
 80034b0:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <Get_Thermocouple_Temperature+0x54>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
        return -999.0f;
 80034b6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80034f0 <Get_Thermocouple_Temperature+0x58>
 80034ba:	e012      	b.n	80034e2 <Get_Thermocouple_Temperature+0x4a>
    }

    thermocouple_error = false;
 80034bc:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <Get_Thermocouple_Temperature+0x54>)
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]

    // Извлечение 12-битного значения температуры
    raw_data >>= 3;
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	08db      	lsrs	r3, r3, #3
 80034c6:	80fb      	strh	r3, [r7, #6]
    raw_data &= 0x0FFF;
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ce:	80fb      	strh	r3, [r7, #6]

    // Конверсия в градусы
    return (float)raw_data * 0.25f;
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034da:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80034de:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80034e2:	eeb0 0a67 	vmov.f32	s0, s15
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	2000a66c 	.word	0x2000a66c
 80034f0:	c479c000 	.word	0xc479c000

080034f4 <CalculateCRC32>:
void SendUSBDebugMessage(const char *message);

/**
  * @brief Расчет CRC32 для проверки целостности данных
  */
uint32_t CalculateCRC32(const uint8_t *data, size_t length) {
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003502:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < length; i++) {
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	e01d      	b.n	8003546 <CalculateCRC32+0x52>
        crc ^= data[i];
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4413      	add	r3, r2
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	4053      	eors	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	e00c      	b.n	800353a <CalculateCRC32+0x46>
            crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	085a      	lsrs	r2, r3, #1
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	4259      	negs	r1, r3
 800352c:	4b0c      	ldr	r3, [pc, #48]	@ (8003560 <CalculateCRC32+0x6c>)
 800352e:	400b      	ands	r3, r1
 8003530:	4053      	eors	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 8; j++) {
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3301      	adds	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b07      	cmp	r3, #7
 800353e:	ddef      	ble.n	8003520 <CalculateCRC32+0x2c>
    for (size_t i = 0; i < length; i++) {
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	3301      	adds	r3, #1
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d3dd      	bcc.n	800350a <CalculateCRC32+0x16>
        }
    }
    return ~crc;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	43db      	mvns	r3, r3
}
 8003552:	4618      	mov	r0, r3
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	edb88320 	.word	0xedb88320

08003564 <LoadParametersFromFlash>:

/**
  * @brief Загрузка параметров из Flash памяти
  */
void LoadParametersFromFlash(void) {
 8003564:	b5b0      	push	{r4, r5, r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
    Parameters_t* flash_params = (Parameters_t*)PARAMS_FLASH_ADDRESS;
 800356a:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <LoadParametersFromFlash+0x50>)
 800356c:	607b      	str	r3, [r7, #4]
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)flash_params, sizeof(Parameters_t) - sizeof(uint32_t));
 800356e:	213c      	movs	r1, #60	@ 0x3c
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ffbf 	bl	80034f4 <CalculateCRC32>
 8003576:	6038      	str	r0, [r7, #0]

    if (flash_params->crc == calculated_crc) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d111      	bne.n	80035a6 <LoadParametersFromFlash+0x42>
        params = *flash_params;
 8003582:	4a0d      	ldr	r2, [pc, #52]	@ (80035b8 <LoadParametersFromFlash+0x54>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4614      	mov	r4, r2
 8003588:	461d      	mov	r5, r3
 800358a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800358c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800358e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003596:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800359a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        parameters_initialized = true;
 800359e:	4b07      	ldr	r3, [pc, #28]	@ (80035bc <LoadParametersFromFlash+0x58>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
       // SendUSBDebugMessage("Parameters loaded from Flash memory");
    } else {
        InitializeParameters();
     //   SendUSBDebugMessage("Flash data corrupted, using default parameters");
    }
}
 80035a4:	e001      	b.n	80035aa <LoadParametersFromFlash+0x46>
        InitializeParameters();
 80035a6:	f000 f847 	bl	8003638 <InitializeParameters>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bdb0      	pop	{r4, r5, r7, pc}
 80035b2:	bf00      	nop
 80035b4:	08080000 	.word	0x08080000
 80035b8:	2000a670 	.word	0x2000a670
 80035bc:	2000a6b0 	.word	0x2000a6b0

080035c0 <SaveParametersToFlash>:

/**
  * @brief Сохранение параметров в Flash память
  */
void SaveParametersToFlash(void) {
 80035c0:	b5b0      	push	{r4, r5, r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 80035c6:	f000 fec9 	bl	800435c <HAL_FLASH_Unlock>
    params.crc = CalculateCRC32((uint8_t*)&params, sizeof(Parameters_t) - sizeof(uint32_t));
 80035ca:	213c      	movs	r1, #60	@ 0x3c
 80035cc:	4818      	ldr	r0, [pc, #96]	@ (8003630 <SaveParametersToFlash+0x70>)
 80035ce:	f7ff ff91 	bl	80034f4 <CalculateCRC32>
 80035d2:	4603      	mov	r3, r0
 80035d4:	4a16      	ldr	r2, [pc, #88]	@ (8003630 <SaveParametersToFlash+0x70>)
 80035d6:	63d3      	str	r3, [r2, #60]	@ 0x3c

    FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 80035d8:	2102      	movs	r1, #2
 80035da:	200b      	movs	r0, #11
 80035dc:	f001 f820 	bl	8004620 <FLASH_Erase_Sector>

    uint32_t* source = (uint32_t*)&params;
 80035e0:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <SaveParametersToFlash+0x70>)
 80035e2:	60fb      	str	r3, [r7, #12]
    uint32_t* destination = (uint32_t*)PARAMS_FLASH_ADDRESS;
 80035e4:	4b13      	ldr	r3, [pc, #76]	@ (8003634 <SaveParametersToFlash+0x74>)
 80035e6:	60bb      	str	r3, [r7, #8]
    uint32_t words = sizeof(Parameters_t) / sizeof(uint32_t);
 80035e8:	2310      	movs	r3, #16
 80035ea:	603b      	str	r3, [r7, #0]

    for (uint32_t i = 0; i < words; i++) {
 80035ec:	2300      	movs	r3, #0
 80035ee:	607b      	str	r3, [r7, #4]
 80035f0:	e013      	b.n	800361a <SaveParametersToFlash+0x5a>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)destination, *source);
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2200      	movs	r2, #0
 80035fa:	461c      	mov	r4, r3
 80035fc:	4615      	mov	r5, r2
 80035fe:	4622      	mov	r2, r4
 8003600:	462b      	mov	r3, r5
 8003602:	2002      	movs	r0, #2
 8003604:	f000 fe58 	bl	80042b8 <HAL_FLASH_Program>
        source++;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3304      	adds	r3, #4
 800360c:	60fb      	str	r3, [r7, #12]
        destination++;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3304      	adds	r3, #4
 8003612:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < words; i++) {
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3301      	adds	r3, #1
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d3e7      	bcc.n	80035f2 <SaveParametersToFlash+0x32>
    }

    HAL_FLASH_Lock();
 8003622:	f000 febd 	bl	80043a0 <HAL_FLASH_Lock>
  //  SendUSBDebugMessage("Parameters saved to Flash memory");
}
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bdb0      	pop	{r4, r5, r7, pc}
 800362e:	bf00      	nop
 8003630:	2000a670 	.word	0x2000a670
 8003634:	08080000 	.word	0x08080000

08003638 <InitializeParameters>:

/**
  * @brief Инициализация параметров значениями по умолчанию
  */
void InitializeParameters(void) {
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
    params.start_index = 100;
 800363c:	4b1b      	ldr	r3, [pc, #108]	@ (80036ac <InitializeParameters+0x74>)
 800363e:	2264      	movs	r2, #100	@ 0x64
 8003640:	601a      	str	r2, [r3, #0]
    params.wave_speed = 3200.0f;
 8003642:	4b1a      	ldr	r3, [pc, #104]	@ (80036ac <InitializeParameters+0x74>)
 8003644:	4a1a      	ldr	r2, [pc, #104]	@ (80036b0 <InitializeParameters+0x78>)
 8003646:	605a      	str	r2, [r3, #4]
    params.first_left_strobe = 20;
 8003648:	4b18      	ldr	r3, [pc, #96]	@ (80036ac <InitializeParameters+0x74>)
 800364a:	2214      	movs	r2, #20
 800364c:	609a      	str	r2, [r3, #8]
    params.first_right_strobe = 120;
 800364e:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <InitializeParameters+0x74>)
 8003650:	2278      	movs	r2, #120	@ 0x78
 8003652:	60da      	str	r2, [r3, #12]
    params.second_left_strobe = 140;
 8003654:	4b15      	ldr	r3, [pc, #84]	@ (80036ac <InitializeParameters+0x74>)
 8003656:	228c      	movs	r2, #140	@ 0x8c
 8003658:	611a      	str	r2, [r3, #16]
    params.second_right_strobe = 240;
 800365a:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <InitializeParameters+0x74>)
 800365c:	22f0      	movs	r2, #240	@ 0xf0
 800365e:	615a      	str	r2, [r3, #20]
    params.threshold = 2080.0f;
 8003660:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <InitializeParameters+0x74>)
 8003662:	4a14      	ldr	r2, [pc, #80]	@ (80036b4 <InitializeParameters+0x7c>)
 8003664:	619a      	str	r2, [r3, #24]
    params.threshold_zero_crossing = 600.0f;
 8003666:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <InitializeParameters+0x74>)
 8003668:	4a13      	ldr	r2, [pc, #76]	@ (80036b8 <InitializeParameters+0x80>)
 800366a:	61da      	str	r2, [r3, #28]
    params.probe_length = 400;
 800366c:	4b0f      	ldr	r3, [pc, #60]	@ (80036ac <InitializeParameters+0x74>)
 800366e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003672:	621a      	str	r2, [r3, #32]
    params.method = 1;
 8003674:	4b0d      	ldr	r3, [pc, #52]	@ (80036ac <InitializeParameters+0x74>)
 8003676:	2201      	movs	r2, #1
 8003678:	625a      	str	r2, [r3, #36]	@ 0x24
    params.end_index = 400;
 800367a:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <InitializeParameters+0x74>)
 800367c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003680:	629a      	str	r2, [r3, #40]	@ 0x28
    params.cycle_number = 10;
 8003682:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <InitializeParameters+0x74>)
 8003684:	220a      	movs	r2, #10
 8003686:	62da      	str	r2, [r3, #44]	@ 0x2c
    strncpy(params.sensor_number, "0001", sizeof(params.sensor_number));
 8003688:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <InitializeParameters+0x74>)
 800368a:	4a0c      	ldr	r2, [pc, #48]	@ (80036bc <InitializeParameters+0x84>)
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    params.gain = 1.0f;
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <InitializeParameters+0x74>)
 8003696:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800369a:	639a      	str	r2, [r3, #56]	@ 0x38

    parameters_initialized = true;
 800369c:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <InitializeParameters+0x88>)
 800369e:	2201      	movs	r2, #1
 80036a0:	701a      	strb	r2, [r3, #0]
    SaveParametersToFlash();
 80036a2:	f7ff ff8d 	bl	80035c0 <SaveParametersToFlash>
   // SendUSBDebugMessage("Parameters initialized with defaults and saved to Flash");
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	2000a670 	.word	0x2000a670
 80036b0:	45480000 	.word	0x45480000
 80036b4:	45020000 	.word	0x45020000
 80036b8:	44160000 	.word	0x44160000
 80036bc:	31303030 	.word	0x31303030
 80036c0:	2000a6b0 	.word	0x2000a6b0

080036c4 <NormalizeData>:
}

/**
  * @brief Нормализация данных
  */
void NormalizeData(void) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	f5ad 4d8f 	sub.w	sp, sp, #18304	@ 0x4780
 80036ca:	b09a      	sub	sp, #104	@ 0x68
 80036cc:	af00      	add	r7, sp, #0
    float32_t mean, std_dev;
    float32_t subtracted_mean[DATA_VALUES_COUNT];

    arm_mean_f32(normalized_data, DATA_VALUES_COUNT, &mean);
 80036ce:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80036d2:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80036d6:	461a      	mov	r2, r3
 80036d8:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 80036dc:	4828      	ldr	r0, [pc, #160]	@ (8003780 <NormalizeData+0xbc>)
 80036de:	f00a f805 	bl	800d6ec <arm_mean_f32>
    arm_offset_f32(normalized_data, -mean, subtracted_mean, DATA_VALUES_COUNT);
 80036e2:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 80036e6:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80036ea:	edd3 7a00 	vldr	s15, [r3]
 80036ee:	eef1 7a67 	vneg.f32	s15, s15
 80036f2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80036f6:	3b68      	subs	r3, #104	@ 0x68
 80036f8:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 80036fc:	4619      	mov	r1, r3
 80036fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003702:	481f      	ldr	r0, [pc, #124]	@ (8003780 <NormalizeData+0xbc>)
 8003704:	f00a f876 	bl	800d7f4 <arm_offset_f32>
    arm_std_f32(subtracted_mean, DATA_VALUES_COUNT, &std_dev);
 8003708:	f507 428f 	add.w	r2, r7, #18304	@ 0x4780
 800370c:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003710:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003714:	3b68      	subs	r3, #104	@ 0x68
 8003716:	f241 11f8 	movw	r1, #4600	@ 0x11f8
 800371a:	4618      	mov	r0, r3
 800371c:	f009 ffc4 	bl	800d6a8 <arm_std_f32>

    if (std_dev != 0.0f) {
 8003720:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 8003724:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003728:	edd3 7a00 	vldr	s15, [r3]
 800372c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003734:	d015      	beq.n	8003762 <NormalizeData+0x9e>
        arm_scale_f32(subtracted_mean, 1.0f/std_dev, normalized_data, DATA_VALUES_COUNT);
 8003736:	f507 438f 	add.w	r3, r7, #18304	@ 0x4780
 800373a:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800374e:	3b68      	subs	r3, #104	@ 0x68
 8003750:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003754:	490a      	ldr	r1, [pc, #40]	@ (8003780 <NormalizeData+0xbc>)
 8003756:	eeb0 0a47 	vmov.f32	s0, s14
 800375a:	4618      	mov	r0, r3
 800375c:	f00a f804 	bl	800d768 <arm_scale_f32>
    } else {
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
    }
}
 8003760:	e008      	b.n	8003774 <NormalizeData+0xb0>
        arm_copy_f32(subtracted_mean, normalized_data, DATA_VALUES_COUNT);
 8003762:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003766:	3b68      	subs	r3, #104	@ 0x68
 8003768:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 800376c:	4904      	ldr	r1, [pc, #16]	@ (8003780 <NormalizeData+0xbc>)
 800376e:	4618      	mov	r0, r3
 8003770:	f009 ff68 	bl	800d644 <arm_copy_f32>
}
 8003774:	bf00      	nop
 8003776:	f507 478f 	add.w	r7, r7, #18304	@ 0x4780
 800377a:	3768      	adds	r7, #104	@ 0x68
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	2000a6b8 	.word	0x2000a6b8

08003784 <CalculateAutocorrelation>:

/**
  * @brief Расчет автокорреляционной функции
  */
void CalculateAutocorrelation(void) {
 8003784:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	e053      	b.n	800383a <CalculateAutocorrelation+0xb6>
        double sum = 0.0;
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	e9c7 2302 	strd	r2, r3, [r7, #8]
        uint32_t count = DATA_VALUES_COUNT - lag;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f5c3 538f 	rsb	r3, r3, #4576	@ 0x11e0
 80037a4:	3318      	adds	r3, #24
 80037a6:	603b      	str	r3, [r7, #0]

        for (uint32_t i = 0; i < count; i++) {
 80037a8:	2300      	movs	r3, #0
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	e026      	b.n	80037fc <CalculateAutocorrelation+0x78>
            sum += (double)normalized_data[i] * (double)normalized_data[i + lag];
 80037ae:	4a28      	ldr	r2, [pc, #160]	@ (8003850 <CalculateAutocorrelation+0xcc>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fc fed5 	bl	8000568 <__aeabi_f2d>
 80037be:	4680      	mov	r8, r0
 80037c0:	4689      	mov	r9, r1
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	4413      	add	r3, r2
 80037c8:	4a21      	ldr	r2, [pc, #132]	@ (8003850 <CalculateAutocorrelation+0xcc>)
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc fec9 	bl	8000568 <__aeabi_f2d>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4640      	mov	r0, r8
 80037dc:	4649      	mov	r1, r9
 80037de:	f7fc ff1b 	bl	8000618 <__aeabi_dmul>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037ea:	f7fc fd5f 	bl	80002ac <__adddf3>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
        for (uint32_t i = 0; i < count; i++) {
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3301      	adds	r3, #1
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d3d4      	bcc.n	80037ae <CalculateAutocorrelation+0x2a>
        }

        autocorrelation_result[lag] = (float32_t)fabs(sum / count);
 8003804:	6838      	ldr	r0, [r7, #0]
 8003806:	f7fc fe8d 	bl	8000524 <__aeabi_ui2d>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003812:	f7fd f82b 	bl	800086c <__aeabi_ddiv>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4614      	mov	r4, r2
 800381c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003820:	4620      	mov	r0, r4
 8003822:	4629      	mov	r1, r5
 8003824:	f7fd f9f0 	bl	8000c08 <__aeabi_d2f>
 8003828:	4602      	mov	r2, r0
 800382a:	490a      	ldr	r1, [pc, #40]	@ (8003854 <CalculateAutocorrelation+0xd0>)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	601a      	str	r2, [r3, #0]
    for (uint32_t lag = 0; lag < DATA_VALUES_COUNT; lag++) {
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	3301      	adds	r3, #1
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8003840:	4293      	cmp	r3, r2
 8003842:	d9a6      	bls.n	8003792 <CalculateAutocorrelation+0xe>
    }
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003850:	2000a6b8 	.word	0x2000a6b8
 8003854:	2000ee98 	.word	0x2000ee98

08003858 <FindMaxAutocorrelationIndex>:

/**
  * @brief Поиск индекса максимальной автокорреляции
  */
uint32_t FindMaxAutocorrelationIndex(void) {
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 800385e:	4b1f      	ldr	r3, [pc, #124]	@ (80038dc <FindMaxAutocorrelationIndex+0x84>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	f083 0301 	eor.w	r3, r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <FindMaxAutocorrelationIndex+0x18>
       // SendUSBDebugMessage("Parameters not initialized for ACF");
        return 0;
 800386c:	2300      	movs	r3, #0
 800386e:	e02e      	b.n	80038ce <FindMaxAutocorrelationIndex+0x76>
    }

    float32_t max_value = 0.0f;
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
    uint32_t max_idx = params.start_index;
 8003876:	4b1a      	ldr	r3, [pc, #104]	@ (80038e0 <FindMaxAutocorrelationIndex+0x88>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60bb      	str	r3, [r7, #8]
    uint32_t search_end = (params.end_index < DATA_VALUES_COUNT) ? params.end_index : DATA_VALUES_COUNT - 1;
 800387c:	4b18      	ldr	r3, [pc, #96]	@ (80038e0 <FindMaxAutocorrelationIndex+0x88>)
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	f241 12f7 	movw	r2, #4599	@ 0x11f7
 8003884:	4293      	cmp	r3, r2
 8003886:	bf28      	it	cs
 8003888:	4613      	movcs	r3, r2
 800388a:	603b      	str	r3, [r7, #0]

    for (uint32_t i = params.start_index; i < search_end; i++) {
 800388c:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <FindMaxAutocorrelationIndex+0x88>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	e017      	b.n	80038c4 <FindMaxAutocorrelationIndex+0x6c>
        if (autocorrelation_result[i] > max_value) {
 8003894:	4a13      	ldr	r2, [pc, #76]	@ (80038e4 <FindMaxAutocorrelationIndex+0x8c>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80038a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ac:	d507      	bpl.n	80038be <FindMaxAutocorrelationIndex+0x66>
            max_value = autocorrelation_result[i];
 80038ae:	4a0d      	ldr	r2, [pc, #52]	@ (80038e4 <FindMaxAutocorrelationIndex+0x8c>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]
            max_idx = i;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = params.start_index; i < search_end; i++) {
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3301      	adds	r3, #1
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d3e3      	bcc.n	8003894 <FindMaxAutocorrelationIndex+0x3c>
        }
    }

    return max_idx;
 80038cc:	68bb      	ldr	r3, [r7, #8]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	2000a6b0 	.word	0x2000a6b0
 80038e0:	2000a670 	.word	0x2000a670
 80038e4:	2000ee98 	.word	0x2000ee98

080038e8 <CalculateZeroCrossingThickness>:

/**
  * @brief Расчет толщины методом перехода через ноль
  */
void CalculateZeroCrossingThickness(const float32_t* data) {
 80038e8:	b480      	push	{r7}
 80038ea:	b08b      	sub	sp, #44	@ 0x2c
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 80038f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003a24 <CalculateZeroCrossingThickness+0x13c>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	f083 0301 	eor.w	r3, r3, #1
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f040 808c 	bne.w	8003a18 <CalculateZeroCrossingThickness+0x130>
       // SendUSBDebugMessage("Parameters not initialized for zero crossing");
        return;
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 8003900:	4b49      	ldr	r3, [pc, #292]	@ (8003a28 <CalculateZeroCrossingThickness+0x140>)
 8003902:	edd3 7a01 	vldr	s15, [r3, #4]
 8003906:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8003a2c <CalculateZeroCrossingThickness+0x144>
 800390a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800390e:	4b48      	ldr	r3, [pc, #288]	@ (8003a30 <CalculateZeroCrossingThickness+0x148>)
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003918:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800391c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003920:	edc7 7a04 	vstr	s15, [r7, #16]
    uint32_t first_above_threshold_index = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t zero_crossing_index = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	623b      	str	r3, [r7, #32]
    bool found_threshold = false;
 800392c:	2300      	movs	r3, #0
 800392e:	77fb      	strb	r3, [r7, #31]

    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 8003930:	2300      	movs	r3, #0
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	e015      	b.n	8003962 <CalculateZeroCrossingThickness+0x7a>
        if (data[i] >= params.threshold_zero_crossing) {
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	ed93 7a00 	vldr	s14, [r3]
 8003942:	4b39      	ldr	r3, [pc, #228]	@ (8003a28 <CalculateZeroCrossingThickness+0x140>)
 8003944:	edd3 7a07 	vldr	s15, [r3, #28]
 8003948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	db04      	blt.n	800395c <CalculateZeroCrossingThickness+0x74>
            first_above_threshold_index = i;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
            found_threshold = true;
 8003956:	2301      	movs	r3, #1
 8003958:	77fb      	strb	r3, [r7, #31]
            break;
 800395a:	e007      	b.n	800396c <CalculateZeroCrossingThickness+0x84>
    for (uint32_t i = 0; i < FINAL_DATA_SIZE; i++) {
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	3301      	adds	r3, #1
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003968:	4293      	cmp	r3, r2
 800396a:	d9e4      	bls.n	8003936 <CalculateZeroCrossingThickness+0x4e>
        }
    }

    if (!found_threshold) {
 800396c:	7ffb      	ldrb	r3, [r7, #31]
 800396e:	f083 0301 	eor.w	r3, r3, #1
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <CalculateZeroCrossingThickness+0x9a>
      //  SendUSBDebugMessage("Zero crossing: threshold not found");
        thickness_value = 0.0f;
 8003978:	4b2e      	ldr	r3, [pc, #184]	@ (8003a34 <CalculateZeroCrossingThickness+0x14c>)
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
        return;
 8003980:	e04b      	b.n	8003a1a <CalculateZeroCrossingThickness+0x132>
    }

    bool sign_positive = (data[first_above_threshold_index] >= 0);
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	edd3 7a00 	vldr	s15, [r3]
 800398e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003996:	bfac      	ite	ge
 8003998:	2301      	movge	r3, #1
 800399a:	2300      	movlt	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	3301      	adds	r3, #1
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e017      	b.n	80039d6 <CalculateZeroCrossingThickness+0xee>
        bool current_sign_positive = (data[i] >= 0);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	edd3 7a00 	vldr	s15, [r3]
 80039b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ba:	bfac      	ite	ge
 80039bc:	2301      	movge	r3, #1
 80039be:	2300      	movlt	r3, #0
 80039c0:	73bb      	strb	r3, [r7, #14]
        if (current_sign_positive != sign_positive) {
 80039c2:	7bba      	ldrb	r2, [r7, #14]
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d002      	beq.n	80039d0 <CalculateZeroCrossingThickness+0xe8>
            zero_crossing_index = i;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	623b      	str	r3, [r7, #32]
            break;
 80039ce:	e007      	b.n	80039e0 <CalculateZeroCrossingThickness+0xf8>
    for (uint32_t i = first_above_threshold_index + 1; i < FINAL_DATA_SIZE; i++) {
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	3301      	adds	r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80039dc:	4293      	cmp	r3, r2
 80039de:	d9e2      	bls.n	80039a6 <CalculateZeroCrossingThickness+0xbe>
        }
    }

    if (zero_crossing_index == 0) {
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <CalculateZeroCrossingThickness+0x108>
        //SendUSBDebugMessage("Zero crossing: zero crossing not found");
        thickness_value = 0.0f;
 80039e6:	4b13      	ldr	r3, [pc, #76]	@ (8003a34 <CalculateZeroCrossingThickness+0x14c>)
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
        return;
 80039ee:	e014      	b.n	8003a1a <CalculateZeroCrossingThickness+0x132>
    }

    uint32_t final_index = zero_crossing_index + params.probe_length;
 80039f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003a28 <CalculateZeroCrossingThickness+0x140>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	6a3a      	ldr	r2, [r7, #32]
 80039f6:	4413      	add	r3, r2
 80039f8:	60bb      	str	r3, [r7, #8]
    thickness_value = final_index / (2.0f * one_point_mm);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a04:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a08:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a10:	4b08      	ldr	r3, [pc, #32]	@ (8003a34 <CalculateZeroCrossingThickness+0x14c>)
 8003a12:	edc3 7a00 	vstr	s15, [r3]
 8003a16:	e000      	b.n	8003a1a <CalculateZeroCrossingThickness+0x132>
        return;
 8003a18:	bf00      	nop
}
 8003a1a:	372c      	adds	r7, #44	@ 0x2c
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	2000a6b0 	.word	0x2000a6b0
 8003a28:	2000a670 	.word	0x2000a670
 8003a2c:	447a0000 	.word	0x447a0000
 8003a30:	2000000c 	.word	0x2000000c
 8003a34:	2000a6b4 	.word	0x2000a6b4

08003a38 <CalculateStrobeThickness>:

/**
  * @brief Расчет толщины методом по стробам
  */
void CalculateStrobeThickness(const float32_t* data) {
 8003a38:	b480      	push	{r7}
 8003a3a:	b08b      	sub	sp, #44	@ 0x2c
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
    if (!parameters_initialized) {
 8003a40:	4b50      	ldr	r3, [pc, #320]	@ (8003b84 <CalculateStrobeThickness+0x14c>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	f083 0301 	eor.w	r3, r3, #1
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f040 8094 	bne.w	8003b78 <CalculateStrobeThickness+0x140>
      //  SendUSBDebugMessage("Parameters not initialized for strobe method");
        return;
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 8003a50:	4b4d      	ldr	r3, [pc, #308]	@ (8003b88 <CalculateStrobeThickness+0x150>)
 8003a52:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a56:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003b8c <CalculateStrobeThickness+0x154>
 8003a5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a5e:	4b4c      	ldr	r3, [pc, #304]	@ (8003b90 <CalculateStrobeThickness+0x158>)
 8003a60:	edd3 7a00 	vldr	s15, [r3]
 8003a64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a70:	edc7 7a03 	vstr	s15, [r7, #12]
    float32_t max_value_first = -FLT_MAX;
 8003a74:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t max_index_first = params.first_left_strobe;
 8003a7a:	4b43      	ldr	r3, [pc, #268]	@ (8003b88 <CalculateStrobeThickness+0x150>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	623b      	str	r3, [r7, #32]
    float32_t max_value_second = -FLT_MAX;
 8003a80:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8003a84:	61fb      	str	r3, [r7, #28]
    uint32_t max_index_second = params.second_left_strobe;
 8003a86:	4b40      	ldr	r3, [pc, #256]	@ (8003b88 <CalculateStrobeThickness+0x150>)
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8003a8c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b88 <CalculateStrobeThickness+0x150>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	e01c      	b.n	8003ace <CalculateStrobeThickness+0x96>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_first) {
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d814      	bhi.n	8003ac8 <CalculateStrobeThickness+0x90>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	edd3 7a00 	vldr	s15, [r3]
 8003aaa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab6:	d507      	bpl.n	8003ac8 <CalculateStrobeThickness+0x90>
            max_value_first = data[i];
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4413      	add	r3, r2
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24
            max_index_first = i;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	623b      	str	r3, [r7, #32]
    for (uint32_t i = params.first_left_strobe; i <= params.first_right_strobe; i++) {
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	3301      	adds	r3, #1
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	4b2e      	ldr	r3, [pc, #184]	@ (8003b88 <CalculateStrobeThickness+0x150>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d9dd      	bls.n	8003a94 <CalculateStrobeThickness+0x5c>
        }
    }

    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b88 <CalculateStrobeThickness+0x150>)
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	e01c      	b.n	8003b1a <CalculateStrobeThickness+0xe2>
        if (i < FINAL_DATA_SIZE && data[i] > max_value_second) {
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d814      	bhi.n	8003b14 <CalculateStrobeThickness+0xdc>
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	edd3 7a00 	vldr	s15, [r3]
 8003af6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b02:	d507      	bpl.n	8003b14 <CalculateStrobeThickness+0xdc>
            max_value_second = data[i];
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	61fb      	str	r3, [r7, #28]
            max_index_second = i;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = params.second_left_strobe; i <= params.second_right_strobe; i++) {
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	3301      	adds	r3, #1
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <CalculateStrobeThickness+0x150>)
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d9dd      	bls.n	8003ae0 <CalculateStrobeThickness+0xa8>
        }
    }

    if (max_value_first == -FLT_MAX || max_value_second == -FLT_MAX) {
 8003b24:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003b28:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003b94 <CalculateStrobeThickness+0x15c>
 8003b2c:	eef4 7a47 	vcmp.f32	s15, s14
 8003b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b34:	d008      	beq.n	8003b48 <CalculateStrobeThickness+0x110>
 8003b36:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b3a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003b94 <CalculateStrobeThickness+0x15c>
 8003b3e:	eef4 7a47 	vcmp.f32	s15, s14
 8003b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b46:	d104      	bne.n	8003b52 <CalculateStrobeThickness+0x11a>
       // SendUSBDebugMessage("Strobe method: max values not found");
        thickness_value = 0.0f;
 8003b48:	4b13      	ldr	r3, [pc, #76]	@ (8003b98 <CalculateStrobeThickness+0x160>)
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
        return;
 8003b50:	e013      	b.n	8003b7a <CalculateStrobeThickness+0x142>
    }

    uint32_t index_difference = max_index_second - max_index_first;
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	60bb      	str	r3, [r7, #8]
    thickness_value = index_difference / (2.0f * one_point_mm);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	ee07 3a90 	vmov	s15, r3
 8003b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b64:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b68:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b70:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <CalculateStrobeThickness+0x160>)
 8003b72:	edc3 7a00 	vstr	s15, [r3]
 8003b76:	e000      	b.n	8003b7a <CalculateStrobeThickness+0x142>
        return;
 8003b78:	bf00      	nop
}
 8003b7a:	372c      	adds	r7, #44	@ 0x2c
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	2000a6b0 	.word	0x2000a6b0
 8003b88:	2000a670 	.word	0x2000a670
 8003b8c:	447a0000 	.word	0x447a0000
 8003b90:	2000000c 	.word	0x2000000c
 8003b94:	ff7fffff 	.word	0xff7fffff
 8003b98:	2000a6b4 	.word	0x2000a6b4

08003b9c <CalculateAndSendACFThickness>:

/**
  * @brief Расчет толщины автокорреляционным методом
  */
void CalculateAndSendACFThickness(void) {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8003ba2:	4b17      	ldr	r3, [pc, #92]	@ (8003c00 <CalculateAndSendACFThickness+0x64>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	f083 0301 	eor.w	r3, r3, #1
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d123      	bne.n	8003bf8 <CalculateAndSendACFThickness+0x5c>
     //   SendUSBDebugMessage("Parameters not initialized for ACF thickness calculation");
        return;
    }

    float one_point_mm = 1.0f / (params.wave_speed * 1000.0f * frequency_ns);
 8003bb0:	4b14      	ldr	r3, [pc, #80]	@ (8003c04 <CalculateAndSendACFThickness+0x68>)
 8003bb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bb6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003c08 <CalculateAndSendACFThickness+0x6c>
 8003bba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bbe:	4b13      	ldr	r3, [pc, #76]	@ (8003c0c <CalculateAndSendACFThickness+0x70>)
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd0:	edc7 7a01 	vstr	s15, [r7, #4]
    uint32_t max_index = FindMaxAutocorrelationIndex();
 8003bd4:	f7ff fe40 	bl	8003858 <FindMaxAutocorrelationIndex>
 8003bd8:	6038      	str	r0, [r7, #0]
    thickness_value = max_index / (2.0f * one_point_mm);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	ee07 3a90 	vmov	s15, r3
 8003be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003be8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf0:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <CalculateAndSendACFThickness+0x74>)
 8003bf2:	edc3 7a00 	vstr	s15, [r3]
 8003bf6:	e000      	b.n	8003bfa <CalculateAndSendACFThickness+0x5e>
        return;
 8003bf8:	bf00      	nop
}
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	2000a6b0 	.word	0x2000a6b0
 8003c04:	2000a670 	.word	0x2000a670
 8003c08:	447a0000 	.word	0x447a0000
 8003c0c:	2000000c 	.word	0x2000000c
 8003c10:	2000a6b4 	.word	0x2000a6b4

08003c14 <ProcessDataByMethod>:

/**
  * @brief Обработка данных в зависимости от выбранного метода
  */
void ProcessDataByMethod(void) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
    if (!parameters_initialized) {
 8003c1a:	4b31      	ldr	r3, [pc, #196]	@ (8003ce0 <ProcessDataByMethod+0xcc>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	f083 0301 	eor.w	r3, r3, #1
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d154      	bne.n	8003cd2 <ProcessDataByMethod+0xbe>
     //   SendUSBDebugMessage("Parameters not initialized");
        return;
    }

    // ПРОВЕРЯЕМ, ЧТО УСРЕДНЕНИЕ ЗАВЕРШЕНО И ИСПОЛЬЗУЕМ УСРЕДНЕННЫЙ МАССИВ FPGA
    if (!averaging_complete) {
 8003c28:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce4 <ProcessDataByMethod+0xd0>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	f083 0301 	eor.w	r3, r3, #1
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <ProcessDataByMethod+0x2c>
      //  SendUSBDebugMessage("Averaging not complete, cannot calculate thickness");
        thickness_value = 0.0f;
 8003c36:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce8 <ProcessDataByMethod+0xd4>)
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
        return;
 8003c3e:	e04b      	b.n	8003cd8 <ProcessDataByMethod+0xc4>
    }

    // Копируем данные из усредненного массива FPGA
    uint32_t copy_size = (DATA_SIZE < FINAL_DATA_SIZE) ? DATA_SIZE : FINAL_DATA_SIZE;
 8003c40:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c44:	607b      	str	r3, [r7, #4]
    for (uint32_t i = 0; i < copy_size; i++) {
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e00c      	b.n	8003c66 <ProcessDataByMethod+0x52>
        final_data[i] = averaged_fpga_data[i];
 8003c4c:	4a27      	ldr	r2, [pc, #156]	@ (8003cec <ProcessDataByMethod+0xd8>)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	4926      	ldr	r1, [pc, #152]	@ (8003cf0 <ProcessDataByMethod+0xdc>)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < copy_size; i++) {
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3301      	adds	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d3ee      	bcc.n	8003c4c <ProcessDataByMethod+0x38>
    }

    // Заполняем остаток нулями если необходимо
    for (uint32_t i = copy_size; i < FINAL_DATA_SIZE; i++) {
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	e009      	b.n	8003c88 <ProcessDataByMethod+0x74>
        final_data[i] = 0.0f;
 8003c74:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf0 <ProcessDataByMethod+0xdc>)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
    for (uint32_t i = copy_size; i < FINAL_DATA_SIZE; i++) {
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3301      	adds	r3, #1
 8003c86:	60bb      	str	r3, [r7, #8]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d9f0      	bls.n	8003c74 <ProcessDataByMethod+0x60>
    }

    // Обрабатываем данные в зависимости от выбранного метода
    switch (params.method) {
 8003c92:	4b18      	ldr	r3, [pc, #96]	@ (8003cf4 <ProcessDataByMethod+0xe0>)
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d017      	beq.n	8003cca <ProcessDataByMethod+0xb6>
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d81b      	bhi.n	8003cd6 <ProcessDataByMethod+0xc2>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <ProcessDataByMethod+0x94>
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d00d      	beq.n	8003cc2 <ProcessDataByMethod+0xae>
            CalculateStrobeThickness(final_data);
            break;

        default:
         //   SendUSBDebugMessage("Unknown method specified");
            break;
 8003ca6:	e016      	b.n	8003cd6 <ProcessDataByMethod+0xc2>
            arm_copy_f32(final_data, normalized_data, DATA_VALUES_COUNT);
 8003ca8:	f241 12f8 	movw	r2, #4600	@ 0x11f8
 8003cac:	4912      	ldr	r1, [pc, #72]	@ (8003cf8 <ProcessDataByMethod+0xe4>)
 8003cae:	4810      	ldr	r0, [pc, #64]	@ (8003cf0 <ProcessDataByMethod+0xdc>)
 8003cb0:	f009 fcc8 	bl	800d644 <arm_copy_f32>
            NormalizeData();
 8003cb4:	f7ff fd06 	bl	80036c4 <NormalizeData>
            CalculateAutocorrelation();
 8003cb8:	f7ff fd64 	bl	8003784 <CalculateAutocorrelation>
            CalculateAndSendACFThickness();
 8003cbc:	f7ff ff6e 	bl	8003b9c <CalculateAndSendACFThickness>
            break;
 8003cc0:	e00a      	b.n	8003cd8 <ProcessDataByMethod+0xc4>
            CalculateZeroCrossingThickness(final_data);
 8003cc2:	480b      	ldr	r0, [pc, #44]	@ (8003cf0 <ProcessDataByMethod+0xdc>)
 8003cc4:	f7ff fe10 	bl	80038e8 <CalculateZeroCrossingThickness>
            break;
 8003cc8:	e006      	b.n	8003cd8 <ProcessDataByMethod+0xc4>
            CalculateStrobeThickness(final_data);
 8003cca:	4809      	ldr	r0, [pc, #36]	@ (8003cf0 <ProcessDataByMethod+0xdc>)
 8003ccc:	f7ff feb4 	bl	8003a38 <CalculateStrobeThickness>
            break;
 8003cd0:	e002      	b.n	8003cd8 <ProcessDataByMethod+0xc4>
        return;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <ProcessDataByMethod+0xc4>
            break;
 8003cd6:	bf00      	nop
    }
}
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	2000a6b0 	.word	0x2000a6b0
 8003ce4:	2000a65c 	.word	0x2000a65c
 8003ce8:	2000a6b4 	.word	0x2000a6b4
 8003cec:	2000583c 	.word	0x2000583c
 8003cf0:	20013678 	.word	0x20013678
 8003cf4:	2000a670 	.word	0x2000a670
 8003cf8:	2000a6b8 	.word	0x2000a6b8

08003cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003d00:	f7ff fb42 	bl	8003388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d04:	480c      	ldr	r0, [pc, #48]	@ (8003d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d06:	490d      	ldr	r1, [pc, #52]	@ (8003d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d08:	4a0d      	ldr	r2, [pc, #52]	@ (8003d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d0c:	e002      	b.n	8003d14 <LoopCopyDataInit>

08003d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d12:	3304      	adds	r3, #4

08003d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d18:	d3f9      	bcc.n	8003d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8003d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d20:	e001      	b.n	8003d26 <LoopFillZerobss>

08003d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d24:	3204      	adds	r2, #4

08003d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d28:	d3fb      	bcc.n	8003d22 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003d2a:	f00b fe15 	bl	800f958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d2e:	f7fe fcfb 	bl	8002728 <main>
  bx  lr    
 8003d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d3c:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8003d40:	0806d3b0 	.word	0x0806d3b0
  ldr r2, =_sbss
 8003d44:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8003d48:	2001a31c 	.word	0x2001a31c

08003d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d4c:	e7fe      	b.n	8003d4c <ADC_IRQHandler>
	...

08003d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d54:	4b0e      	ldr	r3, [pc, #56]	@ (8003d90 <HAL_Init+0x40>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a0d      	ldr	r2, [pc, #52]	@ (8003d90 <HAL_Init+0x40>)
 8003d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d60:	4b0b      	ldr	r3, [pc, #44]	@ (8003d90 <HAL_Init+0x40>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0a      	ldr	r2, [pc, #40]	@ (8003d90 <HAL_Init+0x40>)
 8003d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d6c:	4b08      	ldr	r3, [pc, #32]	@ (8003d90 <HAL_Init+0x40>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a07      	ldr	r2, [pc, #28]	@ (8003d90 <HAL_Init+0x40>)
 8003d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d78:	2003      	movs	r0, #3
 8003d7a:	f000 f94f 	bl	800401c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d7e:	200f      	movs	r0, #15
 8003d80:	f000 f808 	bl	8003d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d84:	f7ff f86a 	bl	8002e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023c00 	.word	0x40023c00

08003d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d9c:	4b12      	ldr	r3, [pc, #72]	@ (8003de8 <HAL_InitTick+0x54>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b12      	ldr	r3, [pc, #72]	@ (8003dec <HAL_InitTick+0x58>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	4619      	mov	r1, r3
 8003da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f967 	bl	8004086 <HAL_SYSTICK_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e00e      	b.n	8003de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b0f      	cmp	r3, #15
 8003dc6:	d80a      	bhi.n	8003dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	f000 f92f 	bl	8004032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dd4:	4a06      	ldr	r2, [pc, #24]	@ (8003df0 <HAL_InitTick+0x5c>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000008 	.word	0x20000008
 8003dec:	20000014 	.word	0x20000014
 8003df0:	20000010 	.word	0x20000010

08003df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003df8:	4b06      	ldr	r3, [pc, #24]	@ (8003e14 <HAL_IncTick+0x20>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <HAL_IncTick+0x24>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4413      	add	r3, r2
 8003e04:	4a04      	ldr	r2, [pc, #16]	@ (8003e18 <HAL_IncTick+0x24>)
 8003e06:	6013      	str	r3, [r2, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000014 	.word	0x20000014
 8003e18:	20018498 	.word	0x20018498

08003e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e20:	4b03      	ldr	r3, [pc, #12]	@ (8003e30 <HAL_GetTick+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20018498 	.word	0x20018498

08003e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e3c:	f7ff ffee 	bl	8003e1c <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d005      	beq.n	8003e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e78 <HAL_Delay+0x44>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e5a:	bf00      	nop
 8003e5c:	f7ff ffde 	bl	8003e1c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d8f7      	bhi.n	8003e5c <HAL_Delay+0x28>
  {
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000014 	.word	0x20000014

08003e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eae:	4a04      	ldr	r2, [pc, #16]	@ (8003ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	60d3      	str	r3, [r2, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec8:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <__NVIC_GetPriorityGrouping+0x18>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	0a1b      	lsrs	r3, r3, #8
 8003ece:	f003 0307 	and.w	r3, r3, #7
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	db0b      	blt.n	8003f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	f003 021f 	and.w	r2, r3, #31
 8003ef8:	4907      	ldr	r1, [pc, #28]	@ (8003f18 <__NVIC_EnableIRQ+0x38>)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2001      	movs	r0, #1
 8003f02:	fa00 f202 	lsl.w	r2, r0, r2
 8003f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	e000e100 	.word	0xe000e100

08003f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	6039      	str	r1, [r7, #0]
 8003f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	db0a      	blt.n	8003f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	490c      	ldr	r1, [pc, #48]	@ (8003f68 <__NVIC_SetPriority+0x4c>)
 8003f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3a:	0112      	lsls	r2, r2, #4
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	440b      	add	r3, r1
 8003f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f44:	e00a      	b.n	8003f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	4908      	ldr	r1, [pc, #32]	@ (8003f6c <__NVIC_SetPriority+0x50>)
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	3b04      	subs	r3, #4
 8003f54:	0112      	lsls	r2, r2, #4
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	440b      	add	r3, r1
 8003f5a:	761a      	strb	r2, [r3, #24]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	e000e100 	.word	0xe000e100
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b089      	sub	sp, #36	@ 0x24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f1c3 0307 	rsb	r3, r3, #7
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	bf28      	it	cs
 8003f8e:	2304      	movcs	r3, #4
 8003f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d902      	bls.n	8003fa0 <NVIC_EncodePriority+0x30>
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3b03      	subs	r3, #3
 8003f9e:	e000      	b.n	8003fa2 <NVIC_EncodePriority+0x32>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	43d9      	mvns	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	4313      	orrs	r3, r2
         );
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3724      	adds	r7, #36	@ 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fe8:	d301      	bcc.n	8003fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00f      	b.n	800400e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fee:	4a0a      	ldr	r2, [pc, #40]	@ (8004018 <SysTick_Config+0x40>)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ff6:	210f      	movs	r1, #15
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	f7ff ff8e 	bl	8003f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004000:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <SysTick_Config+0x40>)
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004006:	4b04      	ldr	r3, [pc, #16]	@ (8004018 <SysTick_Config+0x40>)
 8004008:	2207      	movs	r2, #7
 800400a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	e000e010 	.word	0xe000e010

0800401c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff ff29 	bl	8003e7c <__NVIC_SetPriorityGrouping>
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	4603      	mov	r3, r0
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004044:	f7ff ff3e 	bl	8003ec4 <__NVIC_GetPriorityGrouping>
 8004048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	6978      	ldr	r0, [r7, #20]
 8004050:	f7ff ff8e 	bl	8003f70 <NVIC_EncodePriority>
 8004054:	4602      	mov	r2, r0
 8004056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405a:	4611      	mov	r1, r2
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ff5d 	bl	8003f1c <__NVIC_SetPriority>
}
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	4603      	mov	r3, r0
 8004072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff31 	bl	8003ee0 <__NVIC_EnableIRQ>
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff ffa2 	bl	8003fd8 <SysTick_Config>
 8004094:	4603      	mov	r3, r0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e014      	b.n	80040da <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	791b      	ldrb	r3, [r3, #4]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d105      	bne.n	80040c6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7fe fef3 	bl	8002eac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b089      	sub	sp, #36	@ 0x24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_DAC_ConfigChannel+0x1c>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e042      	b.n	8004188 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	795b      	ldrb	r3, [r3, #5]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_DAC_ConfigChannel+0x2c>
 800410a:	2302      	movs	r3, #2
 800410c:	e03c      	b.n	8004188 <HAL_DAC_ConfigChannel+0xa6>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2202      	movs	r2, #2
 8004118:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004130:	43db      	mvns	r3, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4313      	orrs	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6819      	ldr	r1, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	22c0      	movs	r2, #192	@ 0xc0
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	43da      	mvns	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	400a      	ands	r2, r1
 8004178:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004186:	7ffb      	ldrb	r3, [r7, #31]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3724      	adds	r7, #36	@ 0x24
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041a2:	f7ff fe3b 	bl	8003e1c <HAL_GetTick>
 80041a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d008      	beq.n	80041c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2280      	movs	r2, #128	@ 0x80
 80041b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e052      	b.n	800426c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0216 	bic.w	r2, r2, #22
 80041d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <HAL_DMA_Abort+0x62>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0208 	bic.w	r2, r2, #8
 8004204:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004216:	e013      	b.n	8004240 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004218:	f7ff fe00 	bl	8003e1c <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b05      	cmp	r3, #5
 8004224:	d90c      	bls.n	8004240 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2203      	movs	r2, #3
 8004230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e015      	b.n	800426c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e4      	bne.n	8004218 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004252:	223f      	movs	r2, #63	@ 0x3f
 8004254:	409a      	lsls	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d004      	beq.n	8004292 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2280      	movs	r2, #128	@ 0x80
 800428c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e00c      	b.n	80042ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2205      	movs	r2, #5
 8004296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80042c6:	4b23      	ldr	r3, [pc, #140]	@ (8004354 <HAL_FLASH_Program+0x9c>)
 80042c8:	7e1b      	ldrb	r3, [r3, #24]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_FLASH_Program+0x1a>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e03b      	b.n	800434a <HAL_FLASH_Program+0x92>
 80042d2:	4b20      	ldr	r3, [pc, #128]	@ (8004354 <HAL_FLASH_Program+0x9c>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80042dc:	f000 f870 	bl	80043c0 <FLASH_WaitForLastOperation>
 80042e0:	4603      	mov	r3, r0
 80042e2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d12b      	bne.n	8004342 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d105      	bne.n	80042fc <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80042f0:	783b      	ldrb	r3, [r7, #0]
 80042f2:	4619      	mov	r1, r3
 80042f4:	68b8      	ldr	r0, [r7, #8]
 80042f6:	f000 f91b 	bl	8004530 <FLASH_Program_Byte>
 80042fa:	e016      	b.n	800432a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d105      	bne.n	800430e <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004302:	883b      	ldrh	r3, [r7, #0]
 8004304:	4619      	mov	r1, r3
 8004306:	68b8      	ldr	r0, [r7, #8]
 8004308:	f000 f8ee 	bl	80044e8 <FLASH_Program_HalfWord>
 800430c:	e00d      	b.n	800432a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d105      	bne.n	8004320 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4619      	mov	r1, r3
 8004318:	68b8      	ldr	r0, [r7, #8]
 800431a:	f000 f8c3 	bl	80044a4 <FLASH_Program_Word>
 800431e:	e004      	b.n	800432a <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004324:	68b8      	ldr	r0, [r7, #8]
 8004326:	f000 f88b 	bl	8004440 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800432a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800432e:	f000 f847 	bl	80043c0 <FLASH_WaitForLastOperation>
 8004332:	4603      	mov	r3, r0
 8004334:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8004336:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <HAL_FLASH_Program+0xa0>)
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	4a07      	ldr	r2, [pc, #28]	@ (8004358 <HAL_FLASH_Program+0xa0>)
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004342:	4b04      	ldr	r3, [pc, #16]	@ (8004354 <HAL_FLASH_Program+0x9c>)
 8004344:	2200      	movs	r2, #0
 8004346:	761a      	strb	r2, [r3, #24]

  return status;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	2001849c 	.word	0x2001849c
 8004358:	40023c00 	.word	0x40023c00

0800435c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004366:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_FLASH_Unlock+0x38>)
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	da0b      	bge.n	8004386 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800436e:	4b09      	ldr	r3, [pc, #36]	@ (8004394 <HAL_FLASH_Unlock+0x38>)
 8004370:	4a09      	ldr	r2, [pc, #36]	@ (8004398 <HAL_FLASH_Unlock+0x3c>)
 8004372:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004374:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <HAL_FLASH_Unlock+0x38>)
 8004376:	4a09      	ldr	r2, [pc, #36]	@ (800439c <HAL_FLASH_Unlock+0x40>)
 8004378:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800437a:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_FLASH_Unlock+0x38>)
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	da01      	bge.n	8004386 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004386:	79fb      	ldrb	r3, [r7, #7]
}
 8004388:	4618      	mov	r0, r3
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	40023c00 	.word	0x40023c00
 8004398:	45670123 	.word	0x45670123
 800439c:	cdef89ab 	.word	0xcdef89ab

080043a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80043a4:	4b05      	ldr	r3, [pc, #20]	@ (80043bc <HAL_FLASH_Lock+0x1c>)
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	4a04      	ldr	r2, [pc, #16]	@ (80043bc <HAL_FLASH_Lock+0x1c>)
 80043aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043ae:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	40023c00 	.word	0x40023c00

080043c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <FLASH_WaitForLastOperation+0x78>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80043d2:	f7ff fd23 	bl	8003e1c <HAL_GetTick>
 80043d6:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80043d8:	e010      	b.n	80043fc <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d00c      	beq.n	80043fc <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <FLASH_WaitForLastOperation+0x38>
 80043e8:	f7ff fd18 	bl	8003e1c <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d201      	bcs.n	80043fc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e019      	b.n	8004430 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80043fc:	4b0f      	ldr	r3, [pc, #60]	@ (800443c <FLASH_WaitForLastOperation+0x7c>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e8      	bne.n	80043da <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004408:	4b0c      	ldr	r3, [pc, #48]	@ (800443c <FLASH_WaitForLastOperation+0x7c>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004414:	4b09      	ldr	r3, [pc, #36]	@ (800443c <FLASH_WaitForLastOperation+0x7c>)
 8004416:	2201      	movs	r2, #1
 8004418:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800441a:	4b08      	ldr	r3, [pc, #32]	@ (800443c <FLASH_WaitForLastOperation+0x7c>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004426:	f000 f8a5 	bl	8004574 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800442e:	2300      	movs	r3, #0

}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	2001849c 	.word	0x2001849c
 800443c:	40023c00 	.word	0x40023c00

08004440 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800444c:	4b14      	ldr	r3, [pc, #80]	@ (80044a0 <FLASH_Program_DoubleWord+0x60>)
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	4a13      	ldr	r2, [pc, #76]	@ (80044a0 <FLASH_Program_DoubleWord+0x60>)
 8004452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004456:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004458:	4b11      	ldr	r3, [pc, #68]	@ (80044a0 <FLASH_Program_DoubleWord+0x60>)
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	4a10      	ldr	r2, [pc, #64]	@ (80044a0 <FLASH_Program_DoubleWord+0x60>)
 800445e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004462:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004464:	4b0e      	ldr	r3, [pc, #56]	@ (80044a0 <FLASH_Program_DoubleWord+0x60>)
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	4a0d      	ldr	r2, [pc, #52]	@ (80044a0 <FLASH_Program_DoubleWord+0x60>)
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004476:	f3bf 8f6f 	isb	sy
}
 800447a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 800447c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	000a      	movs	r2, r1
 800448a:	2300      	movs	r3, #0
 800448c:	68f9      	ldr	r1, [r7, #12]
 800448e:	3104      	adds	r1, #4
 8004490:	4613      	mov	r3, r2
 8004492:	600b      	str	r3, [r1, #0]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	40023c00 	.word	0x40023c00

080044a4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80044ae:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <FLASH_Program_Word+0x40>)
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	4a0c      	ldr	r2, [pc, #48]	@ (80044e4 <FLASH_Program_Word+0x40>)
 80044b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80044ba:	4b0a      	ldr	r3, [pc, #40]	@ (80044e4 <FLASH_Program_Word+0x40>)
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	4a09      	ldr	r2, [pc, #36]	@ (80044e4 <FLASH_Program_Word+0x40>)
 80044c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80044c6:	4b07      	ldr	r3, [pc, #28]	@ (80044e4 <FLASH_Program_Word+0x40>)
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	4a06      	ldr	r2, [pc, #24]	@ (80044e4 <FLASH_Program_Word+0x40>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	601a      	str	r2, [r3, #0]
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	40023c00 	.word	0x40023c00

080044e8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80044f4:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <FLASH_Program_HalfWord+0x44>)
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	4a0c      	ldr	r2, [pc, #48]	@ (800452c <FLASH_Program_HalfWord+0x44>)
 80044fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004500:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <FLASH_Program_HalfWord+0x44>)
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	4a09      	ldr	r2, [pc, #36]	@ (800452c <FLASH_Program_HalfWord+0x44>)
 8004506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800450a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800450c:	4b07      	ldr	r3, [pc, #28]	@ (800452c <FLASH_Program_HalfWord+0x44>)
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	4a06      	ldr	r2, [pc, #24]	@ (800452c <FLASH_Program_HalfWord+0x44>)
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	887a      	ldrh	r2, [r7, #2]
 800451c:	801a      	strh	r2, [r3, #0]
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40023c00 	.word	0x40023c00

08004530 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800453c:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <FLASH_Program_Byte+0x40>)
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	4a0b      	ldr	r2, [pc, #44]	@ (8004570 <FLASH_Program_Byte+0x40>)
 8004542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004546:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004548:	4b09      	ldr	r3, [pc, #36]	@ (8004570 <FLASH_Program_Byte+0x40>)
 800454a:	4a09      	ldr	r2, [pc, #36]	@ (8004570 <FLASH_Program_Byte+0x40>)
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004550:	4b07      	ldr	r3, [pc, #28]	@ (8004570 <FLASH_Program_Byte+0x40>)
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	4a06      	ldr	r2, [pc, #24]	@ (8004570 <FLASH_Program_Byte+0x40>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	701a      	strb	r2, [r3, #0]
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40023c00 	.word	0x40023c00

08004574 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004578:	4b27      	ldr	r3, [pc, #156]	@ (8004618 <FLASH_SetErrorCode+0xa4>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004584:	4b25      	ldr	r3, [pc, #148]	@ (800461c <FLASH_SetErrorCode+0xa8>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f043 0310 	orr.w	r3, r3, #16
 800458c:	4a23      	ldr	r2, [pc, #140]	@ (800461c <FLASH_SetErrorCode+0xa8>)
 800458e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004590:	4b21      	ldr	r3, [pc, #132]	@ (8004618 <FLASH_SetErrorCode+0xa4>)
 8004592:	2210      	movs	r2, #16
 8004594:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004596:	4b20      	ldr	r3, [pc, #128]	@ (8004618 <FLASH_SetErrorCode+0xa4>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d008      	beq.n	80045b4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80045a2:	4b1e      	ldr	r3, [pc, #120]	@ (800461c <FLASH_SetErrorCode+0xa8>)
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f043 0308 	orr.w	r3, r3, #8
 80045aa:	4a1c      	ldr	r2, [pc, #112]	@ (800461c <FLASH_SetErrorCode+0xa8>)
 80045ac:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80045ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004618 <FLASH_SetErrorCode+0xa4>)
 80045b0:	2220      	movs	r2, #32
 80045b2:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80045b4:	4b18      	ldr	r3, [pc, #96]	@ (8004618 <FLASH_SetErrorCode+0xa4>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80045c0:	4b16      	ldr	r3, [pc, #88]	@ (800461c <FLASH_SetErrorCode+0xa8>)
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f043 0304 	orr.w	r3, r3, #4
 80045c8:	4a14      	ldr	r2, [pc, #80]	@ (800461c <FLASH_SetErrorCode+0xa8>)
 80045ca:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80045cc:	4b12      	ldr	r3, [pc, #72]	@ (8004618 <FLASH_SetErrorCode+0xa4>)
 80045ce:	2240      	movs	r2, #64	@ 0x40
 80045d0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80045d2:	4b11      	ldr	r3, [pc, #68]	@ (8004618 <FLASH_SetErrorCode+0xa4>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d008      	beq.n	80045f0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80045de:	4b0f      	ldr	r3, [pc, #60]	@ (800461c <FLASH_SetErrorCode+0xa8>)
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f043 0302 	orr.w	r3, r3, #2
 80045e6:	4a0d      	ldr	r2, [pc, #52]	@ (800461c <FLASH_SetErrorCode+0xa8>)
 80045e8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80045ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <FLASH_SetErrorCode+0xa4>)
 80045ec:	2280      	movs	r2, #128	@ 0x80
 80045ee:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80045f0:	4b09      	ldr	r3, [pc, #36]	@ (8004618 <FLASH_SetErrorCode+0xa4>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80045fc:	4b07      	ldr	r3, [pc, #28]	@ (800461c <FLASH_SetErrorCode+0xa8>)
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f043 0320 	orr.w	r3, r3, #32
 8004604:	4a05      	ldr	r2, [pc, #20]	@ (800461c <FLASH_SetErrorCode+0xa8>)
 8004606:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004608:	4b03      	ldr	r3, [pc, #12]	@ (8004618 <FLASH_SetErrorCode+0xa4>)
 800460a:	2202      	movs	r2, #2
 800460c:	60da      	str	r2, [r3, #12]
  }
}
 800460e:	bf00      	nop
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40023c00 	.word	0x40023c00
 800461c:	2001849c 	.word	0x2001849c

08004620 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	e010      	b.n	800465e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d103      	bne.n	800464a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004642:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	e009      	b.n	800465e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d103      	bne.n	8004658 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004650:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	e002      	b.n	800465e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004658:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800465c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800465e:	4b13      	ldr	r3, [pc, #76]	@ (80046ac <FLASH_Erase_Sector+0x8c>)
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	4a12      	ldr	r2, [pc, #72]	@ (80046ac <FLASH_Erase_Sector+0x8c>)
 8004664:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004668:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800466a:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <FLASH_Erase_Sector+0x8c>)
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	490f      	ldr	r1, [pc, #60]	@ (80046ac <FLASH_Erase_Sector+0x8c>)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004676:	4b0d      	ldr	r3, [pc, #52]	@ (80046ac <FLASH_Erase_Sector+0x8c>)
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	4a0c      	ldr	r2, [pc, #48]	@ (80046ac <FLASH_Erase_Sector+0x8c>)
 800467c:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8004680:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004682:	4b0a      	ldr	r3, [pc, #40]	@ (80046ac <FLASH_Erase_Sector+0x8c>)
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4313      	orrs	r3, r2
 800468c:	4a07      	ldr	r2, [pc, #28]	@ (80046ac <FLASH_Erase_Sector+0x8c>)
 800468e:	f043 0302 	orr.w	r3, r3, #2
 8004692:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004694:	4b05      	ldr	r3, [pc, #20]	@ (80046ac <FLASH_Erase_Sector+0x8c>)
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	4a04      	ldr	r2, [pc, #16]	@ (80046ac <FLASH_Erase_Sector+0x8c>)
 800469a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800469e:	6113      	str	r3, [r2, #16]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	40023c00 	.word	0x40023c00

080046b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b089      	sub	sp, #36	@ 0x24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
 80046ca:	e16b      	b.n	80049a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046cc:	2201      	movs	r2, #1
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4013      	ands	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	f040 815a 	bne.w	800499e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d005      	beq.n	8004702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d130      	bne.n	8004764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	2203      	movs	r2, #3
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4013      	ands	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004738:	2201      	movs	r2, #1
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 0201 	and.w	r2, r3, #1
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	2b03      	cmp	r3, #3
 800476e:	d017      	beq.n	80047a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	2203      	movs	r2, #3
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43db      	mvns	r3, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4013      	ands	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d123      	bne.n	80047f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	08da      	lsrs	r2, r3, #3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3208      	adds	r2, #8
 80047b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	220f      	movs	r2, #15
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4013      	ands	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	08da      	lsrs	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3208      	adds	r2, #8
 80047ee:	69b9      	ldr	r1, [r7, #24]
 80047f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	2203      	movs	r2, #3
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4013      	ands	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 0203 	and.w	r2, r3, #3
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4313      	orrs	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80b4 	beq.w	800499e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	4b60      	ldr	r3, [pc, #384]	@ (80049bc <HAL_GPIO_Init+0x30c>)
 800483c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483e:	4a5f      	ldr	r2, [pc, #380]	@ (80049bc <HAL_GPIO_Init+0x30c>)
 8004840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004844:	6453      	str	r3, [r2, #68]	@ 0x44
 8004846:	4b5d      	ldr	r3, [pc, #372]	@ (80049bc <HAL_GPIO_Init+0x30c>)
 8004848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004852:	4a5b      	ldr	r2, [pc, #364]	@ (80049c0 <HAL_GPIO_Init+0x310>)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	3302      	adds	r3, #2
 800485a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	220f      	movs	r2, #15
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a52      	ldr	r2, [pc, #328]	@ (80049c4 <HAL_GPIO_Init+0x314>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d02b      	beq.n	80048d6 <HAL_GPIO_Init+0x226>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a51      	ldr	r2, [pc, #324]	@ (80049c8 <HAL_GPIO_Init+0x318>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d025      	beq.n	80048d2 <HAL_GPIO_Init+0x222>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a50      	ldr	r2, [pc, #320]	@ (80049cc <HAL_GPIO_Init+0x31c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01f      	beq.n	80048ce <HAL_GPIO_Init+0x21e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a4f      	ldr	r2, [pc, #316]	@ (80049d0 <HAL_GPIO_Init+0x320>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d019      	beq.n	80048ca <HAL_GPIO_Init+0x21a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a4e      	ldr	r2, [pc, #312]	@ (80049d4 <HAL_GPIO_Init+0x324>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_GPIO_Init+0x216>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a4d      	ldr	r2, [pc, #308]	@ (80049d8 <HAL_GPIO_Init+0x328>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00d      	beq.n	80048c2 <HAL_GPIO_Init+0x212>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a4c      	ldr	r2, [pc, #304]	@ (80049dc <HAL_GPIO_Init+0x32c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d007      	beq.n	80048be <HAL_GPIO_Init+0x20e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a4b      	ldr	r2, [pc, #300]	@ (80049e0 <HAL_GPIO_Init+0x330>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d101      	bne.n	80048ba <HAL_GPIO_Init+0x20a>
 80048b6:	2307      	movs	r3, #7
 80048b8:	e00e      	b.n	80048d8 <HAL_GPIO_Init+0x228>
 80048ba:	2308      	movs	r3, #8
 80048bc:	e00c      	b.n	80048d8 <HAL_GPIO_Init+0x228>
 80048be:	2306      	movs	r3, #6
 80048c0:	e00a      	b.n	80048d8 <HAL_GPIO_Init+0x228>
 80048c2:	2305      	movs	r3, #5
 80048c4:	e008      	b.n	80048d8 <HAL_GPIO_Init+0x228>
 80048c6:	2304      	movs	r3, #4
 80048c8:	e006      	b.n	80048d8 <HAL_GPIO_Init+0x228>
 80048ca:	2303      	movs	r3, #3
 80048cc:	e004      	b.n	80048d8 <HAL_GPIO_Init+0x228>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e002      	b.n	80048d8 <HAL_GPIO_Init+0x228>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <HAL_GPIO_Init+0x228>
 80048d6:	2300      	movs	r3, #0
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	f002 0203 	and.w	r2, r2, #3
 80048de:	0092      	lsls	r2, r2, #2
 80048e0:	4093      	lsls	r3, r2
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e8:	4935      	ldr	r1, [pc, #212]	@ (80049c0 <HAL_GPIO_Init+0x310>)
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	089b      	lsrs	r3, r3, #2
 80048ee:	3302      	adds	r3, #2
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048f6:	4b3b      	ldr	r3, [pc, #236]	@ (80049e4 <HAL_GPIO_Init+0x334>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	43db      	mvns	r3, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800491a:	4a32      	ldr	r2, [pc, #200]	@ (80049e4 <HAL_GPIO_Init+0x334>)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004920:	4b30      	ldr	r3, [pc, #192]	@ (80049e4 <HAL_GPIO_Init+0x334>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	43db      	mvns	r3, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004944:	4a27      	ldr	r2, [pc, #156]	@ (80049e4 <HAL_GPIO_Init+0x334>)
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800494a:	4b26      	ldr	r3, [pc, #152]	@ (80049e4 <HAL_GPIO_Init+0x334>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	43db      	mvns	r3, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4013      	ands	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800496e:	4a1d      	ldr	r2, [pc, #116]	@ (80049e4 <HAL_GPIO_Init+0x334>)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004974:	4b1b      	ldr	r3, [pc, #108]	@ (80049e4 <HAL_GPIO_Init+0x334>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	43db      	mvns	r3, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4013      	ands	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004998:	4a12      	ldr	r2, [pc, #72]	@ (80049e4 <HAL_GPIO_Init+0x334>)
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	3301      	adds	r3, #1
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b0f      	cmp	r3, #15
 80049a8:	f67f ae90 	bls.w	80046cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	3724      	adds	r7, #36	@ 0x24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40013800 	.word	0x40013800
 80049c4:	40020000 	.word	0x40020000
 80049c8:	40020400 	.word	0x40020400
 80049cc:	40020800 	.word	0x40020800
 80049d0:	40020c00 	.word	0x40020c00
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40021400 	.word	0x40021400
 80049dc:	40021800 	.word	0x40021800
 80049e0:	40021c00 	.word	0x40021c00
 80049e4:	40013c00 	.word	0x40013c00

080049e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	887b      	ldrh	r3, [r7, #2]
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
 8004a04:	e001      	b.n	8004a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
 8004a24:	4613      	mov	r3, r2
 8004a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a28:	787b      	ldrb	r3, [r7, #1]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a34:	e003      	b.n	8004a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a36:	887b      	ldrh	r3, [r7, #2]
 8004a38:	041a      	lsls	r2, r3, #16
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	619a      	str	r2, [r3, #24]
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af02      	add	r7, sp, #8
 8004a50:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e101      	b.n	8004c60 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f008 fad0 	bl	800d01c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2203      	movs	r2, #3
 8004a80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a8a:	d102      	bne.n	8004a92 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f004 fa21 	bl	8008ede <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	7c1a      	ldrb	r2, [r3, #16]
 8004aa4:	f88d 2000 	strb.w	r2, [sp]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aac:	f004 f900 	bl	8008cb0 <USB_CoreInit>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e0ce      	b.n	8004c60 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f004 fa19 	bl	8008f00 <USB_SetCurrentMode>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0bf      	b.n	8004c60 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	73fb      	strb	r3, [r7, #15]
 8004ae4:	e04a      	b.n	8004b7c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ae6:	7bfa      	ldrb	r2, [r7, #15]
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	3315      	adds	r3, #21
 8004af6:	2201      	movs	r2, #1
 8004af8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004afa:	7bfa      	ldrb	r2, [r7, #15]
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	3314      	adds	r3, #20
 8004b0a:	7bfa      	ldrb	r2, [r7, #15]
 8004b0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b0e:	7bfa      	ldrb	r2, [r7, #15]
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	b298      	uxth	r0, r3
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	332e      	adds	r3, #46	@ 0x2e
 8004b22:	4602      	mov	r2, r0
 8004b24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b26:	7bfa      	ldrb	r2, [r7, #15]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	3318      	adds	r3, #24
 8004b36:	2200      	movs	r2, #0
 8004b38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b3a:	7bfa      	ldrb	r2, [r7, #15]
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	331c      	adds	r3, #28
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b4e:	7bfa      	ldrb	r2, [r7, #15]
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	3320      	adds	r3, #32
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b62:	7bfa      	ldrb	r2, [r7, #15]
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	4613      	mov	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	3324      	adds	r3, #36	@ 0x24
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	791b      	ldrb	r3, [r3, #4]
 8004b80:	7bfa      	ldrb	r2, [r7, #15]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d3af      	bcc.n	8004ae6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
 8004b8a:	e044      	b.n	8004c16 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b8c:	7bfa      	ldrb	r2, [r7, #15]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ba2:	7bfa      	ldrb	r2, [r7, #15]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004bb4:	7bfa      	ldrb	r2, [r7, #15]
 8004bb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bb8:	7bfa      	ldrb	r2, [r7, #15]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004bca:	2200      	movs	r2, #0
 8004bcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bce:	7bfa      	ldrb	r2, [r7, #15]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004be4:	7bfa      	ldrb	r2, [r7, #15]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004bfa:	7bfa      	ldrb	r2, [r7, #15]
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	3301      	adds	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	791b      	ldrb	r3, [r3, #4]
 8004c1a:	7bfa      	ldrb	r2, [r7, #15]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d3b5      	bcc.n	8004b8c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	7c1a      	ldrb	r2, [r3, #16]
 8004c28:	f88d 2000 	strb.w	r2, [sp]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c30:	f004 f9b2 	bl	8008f98 <USB_DevInit>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e00c      	b.n	8004c60 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f005 f9fc 	bl	800a056 <USB_DevDisconnect>

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_PCD_Start+0x1c>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e022      	b.n	8004cca <HAL_PCD_Start+0x62>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d009      	beq.n	8004cac <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d105      	bne.n	8004cac <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f004 f903 	bl	8008ebc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f005 f9aa 	bl	800a014 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004cd2:	b590      	push	{r4, r7, lr}
 8004cd4:	b08d      	sub	sp, #52	@ 0x34
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f005 fa68 	bl	800a1be <USB_GetMode>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f040 848c 	bne.w	800560e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f005 f9cc 	bl	800a098 <USB_ReadInterrupts>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8482 	beq.w	800560c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	0a1b      	lsrs	r3, r3, #8
 8004d12:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f005 f9b9 	bl	800a098 <USB_ReadInterrupts>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d107      	bne.n	8004d40 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f002 0202 	and.w	r2, r2, #2
 8004d3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f005 f9a7 	bl	800a098 <USB_ReadInterrupts>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d161      	bne.n	8004e18 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0210 	bic.w	r2, r2, #16
 8004d62:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	f003 020f 	and.w	r2, r3, #15
 8004d70:	4613      	mov	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	4413      	add	r3, r2
 8004d80:	3304      	adds	r3, #4
 8004d82:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004d8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d8e:	d124      	bne.n	8004dda <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004d96:	4013      	ands	r3, r2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d035      	beq.n	8004e08 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	091b      	lsrs	r3, r3, #4
 8004da4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	6a38      	ldr	r0, [r7, #32]
 8004db0:	f004 ffde 	bl	8009d70 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dc0:	441a      	add	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dd2:	441a      	add	r2, r3
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	615a      	str	r2, [r3, #20]
 8004dd8:	e016      	b.n	8004e08 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004de0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004de4:	d110      	bne.n	8004e08 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004dec:	2208      	movs	r2, #8
 8004dee:	4619      	mov	r1, r3
 8004df0:	6a38      	ldr	r0, [r7, #32]
 8004df2:	f004 ffbd 	bl	8009d70 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e02:	441a      	add	r2, r3
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0210 	orr.w	r2, r2, #16
 8004e16:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f005 f93b 	bl	800a098 <USB_ReadInterrupts>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e2c:	f040 80a7 	bne.w	8004f7e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f005 f940 	bl	800a0be <USB_ReadDevAllOutEpInterrupt>
 8004e3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004e40:	e099      	b.n	8004f76 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 808e 	beq.w	8004f6a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	4611      	mov	r1, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f005 f964 	bl	800a126 <USB_ReadDevOutEPInterrupt>
 8004e5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00c      	beq.n	8004e84 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e76:	461a      	mov	r2, r3
 8004e78:	2301      	movs	r3, #1
 8004e7a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fea4 	bl	8005bcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00c      	beq.n	8004ea8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004ea0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 ff7a 	bl	8005d9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d030      	beq.n	8004f30 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed6:	2b80      	cmp	r3, #128	@ 0x80
 8004ed8:	d109      	bne.n	8004eee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ee8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	4413      	add	r3, r2
 8004f00:	3304      	adds	r3, #4
 8004f02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	78db      	ldrb	r3, [r3, #3]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d108      	bne.n	8004f1e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	4619      	mov	r1, r3
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f008 f985 	bl	800d228 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d008      	beq.n	8004f4c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f46:	461a      	mov	r2, r3
 8004f48:	2320      	movs	r3, #32
 8004f4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d009      	beq.n	8004f6a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f62:	461a      	mov	r2, r3
 8004f64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f68:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f47f af62 	bne.w	8004e42 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f005 f888 	bl	800a098 <USB_ReadInterrupts>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f92:	f040 80db 	bne.w	800514c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f005 f8a9 	bl	800a0f2 <USB_ReadDevAllInEpInterrupt>
 8004fa0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004fa6:	e0cd      	b.n	8005144 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80c2 	beq.w	8005138 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f005 f8cf 	bl	800a162 <USB_ReadDevInEPInterrupt>
 8004fc4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d057      	beq.n	8005080 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	69f9      	ldr	r1, [r7, #28]
 8004fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005000:	461a      	mov	r2, r3
 8005002:	2301      	movs	r3, #1
 8005004:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	799b      	ldrb	r3, [r3, #6]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d132      	bne.n	8005074 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005012:	4613      	mov	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	3320      	adds	r3, #32
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4403      	add	r3, r0
 800502e:	331c      	adds	r3, #28
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4419      	add	r1, r3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005038:	4613      	mov	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4403      	add	r3, r0
 8005042:	3320      	adds	r3, #32
 8005044:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	2b00      	cmp	r3, #0
 800504a:	d113      	bne.n	8005074 <HAL_PCD_IRQHandler+0x3a2>
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	3324      	adds	r3, #36	@ 0x24
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d108      	bne.n	8005074 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800506c:	461a      	mov	r2, r3
 800506e:	2101      	movs	r1, #1
 8005070:	f005 f8d6 	bl	800a220 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	b2db      	uxtb	r3, r3
 8005078:	4619      	mov	r1, r3
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f008 f84f 	bl	800d11e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005096:	461a      	mov	r2, r3
 8005098:	2308      	movs	r3, #8
 800509a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f003 0310 	and.w	r3, r3, #16
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b2:	461a      	mov	r2, r3
 80050b4:	2310      	movs	r3, #16
 80050b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d008      	beq.n	80050d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ce:	461a      	mov	r2, r3
 80050d0:	2340      	movs	r3, #64	@ 0x40
 80050d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d023      	beq.n	8005126 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80050de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050e0:	6a38      	ldr	r0, [r7, #32]
 80050e2:	f004 f8bd 	bl	8009260 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80050e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e8:	4613      	mov	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	3310      	adds	r3, #16
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	4413      	add	r3, r2
 80050f6:	3304      	adds	r3, #4
 80050f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	78db      	ldrb	r3, [r3, #3]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d108      	bne.n	8005114 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2200      	movs	r2, #0
 8005106:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	b2db      	uxtb	r3, r3
 800510c:	4619      	mov	r1, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f008 f89c 	bl	800d24c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005120:	461a      	mov	r2, r3
 8005122:	2302      	movs	r3, #2
 8005124:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005130:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fcbd 	bl	8005ab2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	3301      	adds	r3, #1
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005140:	085b      	lsrs	r3, r3, #1
 8005142:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005146:	2b00      	cmp	r3, #0
 8005148:	f47f af2e 	bne.w	8004fa8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f004 ffa1 	bl	800a098 <USB_ReadInterrupts>
 8005156:	4603      	mov	r3, r0
 8005158:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800515c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005160:	d122      	bne.n	80051a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800517c:	2b01      	cmp	r3, #1
 800517e:	d108      	bne.n	8005192 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005188:	2100      	movs	r1, #0
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fea4 	bl	8005ed8 <HAL_PCDEx_LPM_Callback>
 8005190:	e002      	b.n	8005198 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f008 f83a 	bl	800d20c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695a      	ldr	r2, [r3, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80051a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f004 ff73 	bl	800a098 <USB_ReadInterrupts>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051bc:	d112      	bne.n	80051e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d102      	bne.n	80051d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f007 fff6 	bl	800d1c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80051e2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f004 ff55 	bl	800a098 <USB_ReadInterrupts>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f8:	f040 80b7 	bne.w	800536a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800520a:	f023 0301 	bic.w	r3, r3, #1
 800520e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2110      	movs	r1, #16
 8005216:	4618      	mov	r0, r3
 8005218:	f004 f822 	bl	8009260 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800521c:	2300      	movs	r3, #0
 800521e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005220:	e046      	b.n	80052b0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800522e:	461a      	mov	r2, r3
 8005230:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005234:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005246:	0151      	lsls	r1, r2, #5
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	440a      	add	r2, r1
 800524c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005250:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005254:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005262:	461a      	mov	r2, r3
 8005264:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005268:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800526a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005284:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005288:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800528a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ac:	3301      	adds	r3, #1
 80052ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	791b      	ldrb	r3, [r3, #4]
 80052b4:	461a      	mov	r2, r3
 80052b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d3b2      	bcc.n	8005222 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052ca:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80052ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	7bdb      	ldrb	r3, [r3, #15]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d016      	beq.n	8005306 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052e8:	f043 030b 	orr.w	r3, r3, #11
 80052ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052fe:	f043 030b 	orr.w	r3, r3, #11
 8005302:	6453      	str	r3, [r2, #68]	@ 0x44
 8005304:	e015      	b.n	8005332 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	69fa      	ldr	r2, [r7, #28]
 8005310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005314:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005318:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800531c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800532c:	f043 030b 	orr.w	r3, r3, #11
 8005330:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005340:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005344:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005354:	461a      	mov	r2, r3
 8005356:	f004 ff63 	bl	800a220 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695a      	ldr	r2, [r3, #20]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f004 fe92 	bl	800a098 <USB_ReadInterrupts>
 8005374:	4603      	mov	r3, r0
 8005376:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800537a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800537e:	d123      	bne.n	80053c8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f004 ff28 	bl	800a1da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f003 ffdf 	bl	8009352 <USB_GetDevSpeed>
 8005394:	4603      	mov	r3, r0
 8005396:	461a      	mov	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681c      	ldr	r4, [r3, #0]
 80053a0:	f001 fa0a 	bl	80067b8 <HAL_RCC_GetHCLKFreq>
 80053a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053aa:	461a      	mov	r2, r3
 80053ac:	4620      	mov	r0, r4
 80053ae:	f003 fce3 	bl	8008d78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f007 fedb 	bl	800d16e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80053c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f004 fe63 	bl	800a098 <USB_ReadInterrupts>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d10a      	bne.n	80053f2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f007 feb8 	bl	800d152 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695a      	ldr	r2, [r3, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f002 0208 	and.w	r2, r2, #8
 80053f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f004 fe4e 	bl	800a098 <USB_ReadInterrupts>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005402:	2b80      	cmp	r3, #128	@ 0x80
 8005404:	d123      	bne.n	800544e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005412:	2301      	movs	r3, #1
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
 8005416:	e014      	b.n	8005442 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800541c:	4613      	mov	r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d105      	bne.n	800543c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	b2db      	uxtb	r3, r3
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fb0a 	bl	8005a50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	3301      	adds	r3, #1
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	791b      	ldrb	r3, [r3, #4]
 8005446:	461a      	mov	r2, r3
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	4293      	cmp	r3, r2
 800544c:	d3e4      	bcc.n	8005418 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f004 fe20 	bl	800a098 <USB_ReadInterrupts>
 8005458:	4603      	mov	r3, r0
 800545a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800545e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005462:	d13c      	bne.n	80054de <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005464:	2301      	movs	r3, #1
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
 8005468:	e02b      	b.n	80054c2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800547e:	4613      	mov	r3, r2
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	3318      	adds	r3, #24
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d115      	bne.n	80054bc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005490:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005492:	2b00      	cmp	r3, #0
 8005494:	da12      	bge.n	80054bc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800549a:	4613      	mov	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	4413      	add	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	3317      	adds	r3, #23
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 faca 	bl	8005a50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	3301      	adds	r3, #1
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	791b      	ldrb	r3, [r3, #4]
 80054c6:	461a      	mov	r2, r3
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d3cd      	bcc.n	800546a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80054dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f004 fdd8 	bl	800a098 <USB_ReadInterrupts>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054f2:	d156      	bne.n	80055a2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054f4:	2301      	movs	r3, #1
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f8:	e045      	b.n	8005586 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800550e:	4613      	mov	r3, r2
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d12e      	bne.n	8005580 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005522:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005524:	2b00      	cmp	r3, #0
 8005526:	da2b      	bge.n	8005580 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	0c1a      	lsrs	r2, r3, #16
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005532:	4053      	eors	r3, r2
 8005534:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005538:	2b00      	cmp	r3, #0
 800553a:	d121      	bne.n	8005580 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005540:	4613      	mov	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	69fa      	ldr	r2, [r7, #28]
 8005574:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005578:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800557c:	6053      	str	r3, [r2, #4]
            break;
 800557e:	e008      	b.n	8005592 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	3301      	adds	r3, #1
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	791b      	ldrb	r3, [r3, #4]
 800558a:	461a      	mov	r2, r3
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	4293      	cmp	r3, r2
 8005590:	d3b3      	bcc.n	80054fa <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80055a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f004 fd76 	bl	800a098 <USB_ReadInterrupts>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055b6:	d10a      	bne.n	80055ce <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f007 fe59 	bl	800d270 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80055cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f004 fd60 	bl	800a098 <USB_ReadInterrupts>
 80055d8:	4603      	mov	r3, r0
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d115      	bne.n	800560e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f007 fe49 	bl	800d28c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6859      	ldr	r1, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
 800560a:	e000      	b.n	800560e <HAL_PCD_IRQHandler+0x93c>
      return;
 800560c:	bf00      	nop
    }
  }
}
 800560e:	3734      	adds	r7, #52	@ 0x34
 8005610:	46bd      	mov	sp, r7
 8005612:	bd90      	pop	{r4, r7, pc}

08005614 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_PCD_SetAddress+0x1a>
 800562a:	2302      	movs	r3, #2
 800562c:	e012      	b.n	8005654 <HAL_PCD_SetAddress+0x40>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	78fa      	ldrb	r2, [r7, #3]
 8005642:	4611      	mov	r1, r2
 8005644:	4618      	mov	r0, r3
 8005646:	f004 fcbf 	bl	8009fc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	4608      	mov	r0, r1
 8005666:	4611      	mov	r1, r2
 8005668:	461a      	mov	r2, r3
 800566a:	4603      	mov	r3, r0
 800566c:	70fb      	strb	r3, [r7, #3]
 800566e:	460b      	mov	r3, r1
 8005670:	803b      	strh	r3, [r7, #0]
 8005672:	4613      	mov	r3, r2
 8005674:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800567a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800567e:	2b00      	cmp	r3, #0
 8005680:	da0f      	bge.n	80056a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	f003 020f 	and.w	r2, r3, #15
 8005688:	4613      	mov	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	3310      	adds	r3, #16
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	4413      	add	r3, r2
 8005696:	3304      	adds	r3, #4
 8005698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	705a      	strb	r2, [r3, #1]
 80056a0:	e00f      	b.n	80056c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	f003 020f 	and.w	r2, r3, #15
 80056a8:	4613      	mov	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	4413      	add	r3, r2
 80056b8:	3304      	adds	r3, #4
 80056ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80056ce:	883b      	ldrh	r3, [r7, #0]
 80056d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	78ba      	ldrb	r2, [r7, #2]
 80056dc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	785b      	ldrb	r3, [r3, #1]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d004      	beq.n	80056f0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80056f0:	78bb      	ldrb	r3, [r7, #2]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d102      	bne.n	80056fc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005702:	2b01      	cmp	r3, #1
 8005704:	d101      	bne.n	800570a <HAL_PCD_EP_Open+0xae>
 8005706:	2302      	movs	r3, #2
 8005708:	e00e      	b.n	8005728 <HAL_PCD_EP_Open+0xcc>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68f9      	ldr	r1, [r7, #12]
 8005718:	4618      	mov	r0, r3
 800571a:	f003 fe3f 	bl	800939c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005726:	7afb      	ldrb	r3, [r7, #11]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800573c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005740:	2b00      	cmp	r3, #0
 8005742:	da0f      	bge.n	8005764 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	f003 020f 	and.w	r2, r3, #15
 800574a:	4613      	mov	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	3310      	adds	r3, #16
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	4413      	add	r3, r2
 8005758:	3304      	adds	r3, #4
 800575a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	705a      	strb	r2, [r3, #1]
 8005762:	e00f      	b.n	8005784 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	f003 020f 	and.w	r2, r3, #15
 800576a:	4613      	mov	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	4413      	add	r3, r2
 800577a:	3304      	adds	r3, #4
 800577c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	b2da      	uxtb	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_PCD_EP_Close+0x6e>
 800579a:	2302      	movs	r3, #2
 800579c:	e00e      	b.n	80057bc <HAL_PCD_EP_Close+0x8c>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f003 fe7d 	bl	80094ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	607a      	str	r2, [r7, #4]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	460b      	mov	r3, r1
 80057d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057d4:	7afb      	ldrb	r3, [r7, #11]
 80057d6:	f003 020f 	and.w	r2, r3, #15
 80057da:	4613      	mov	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	3304      	adds	r3, #4
 80057ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2200      	movs	r2, #0
 80057fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2200      	movs	r2, #0
 8005804:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005806:	7afb      	ldrb	r3, [r7, #11]
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	b2da      	uxtb	r2, r3
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	799b      	ldrb	r3, [r3, #6]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d102      	bne.n	8005820 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	799b      	ldrb	r3, [r3, #6]
 8005828:	461a      	mov	r2, r3
 800582a:	6979      	ldr	r1, [r7, #20]
 800582c:	f003 ff1a 	bl	8009664 <USB_EPStartXfer>

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	460b      	mov	r3, r1
 8005844:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	f003 020f 	and.w	r2, r3, #15
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800585c:	681b      	ldr	r3, [r3, #0]
}
 800585e:	4618      	mov	r0, r3
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b086      	sub	sp, #24
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
 8005876:	460b      	mov	r3, r1
 8005878:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800587a:	7afb      	ldrb	r3, [r7, #11]
 800587c:	f003 020f 	and.w	r2, r3, #15
 8005880:	4613      	mov	r3, r2
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	3310      	adds	r3, #16
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	3304      	adds	r3, #4
 8005890:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2200      	movs	r2, #0
 80058a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2201      	movs	r2, #1
 80058a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058aa:	7afb      	ldrb	r3, [r7, #11]
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	799b      	ldrb	r3, [r3, #6]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d102      	bne.n	80058c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	799b      	ldrb	r3, [r3, #6]
 80058cc:	461a      	mov	r2, r3
 80058ce:	6979      	ldr	r1, [r7, #20]
 80058d0:	f003 fec8 	bl	8009664 <USB_EPStartXfer>

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	460b      	mov	r3, r1
 80058e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	7912      	ldrb	r2, [r2, #4]
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e04f      	b.n	800599c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005900:	2b00      	cmp	r3, #0
 8005902:	da0f      	bge.n	8005924 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	f003 020f 	and.w	r2, r3, #15
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	3310      	adds	r3, #16
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	4413      	add	r3, r2
 8005918:	3304      	adds	r3, #4
 800591a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	705a      	strb	r2, [r3, #1]
 8005922:	e00d      	b.n	8005940 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005924:	78fa      	ldrb	r2, [r7, #3]
 8005926:	4613      	mov	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	4413      	add	r3, r2
 8005936:	3304      	adds	r3, #4
 8005938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005946:	78fb      	ldrb	r3, [r7, #3]
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	b2da      	uxtb	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_PCD_EP_SetStall+0x82>
 800595c:	2302      	movs	r3, #2
 800595e:	e01d      	b.n	800599c <HAL_PCD_EP_SetStall+0xbe>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68f9      	ldr	r1, [r7, #12]
 800596e:	4618      	mov	r0, r3
 8005970:	f004 fa56 	bl	8009e20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	7999      	ldrb	r1, [r3, #6]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800598c:	461a      	mov	r2, r3
 800598e:	f004 fc47 	bl	800a220 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	7912      	ldrb	r2, [r2, #4]
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d901      	bls.n	80059c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e042      	b.n	8005a48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	da0f      	bge.n	80059ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ca:	78fb      	ldrb	r3, [r7, #3]
 80059cc:	f003 020f 	and.w	r2, r3, #15
 80059d0:	4613      	mov	r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	3310      	adds	r3, #16
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	4413      	add	r3, r2
 80059de:	3304      	adds	r3, #4
 80059e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	705a      	strb	r2, [r3, #1]
 80059e8:	e00f      	b.n	8005a0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	f003 020f 	and.w	r2, r3, #15
 80059f0:	4613      	mov	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	4413      	add	r3, r2
 8005a00:	3304      	adds	r3, #4
 8005a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_PCD_EP_ClrStall+0x86>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e00e      	b.n	8005a48 <HAL_PCD_EP_ClrStall+0xa4>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f004 fa5f 	bl	8009efc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	da0c      	bge.n	8005a7e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	f003 020f 	and.w	r2, r3, #15
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	3310      	adds	r3, #16
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4413      	add	r3, r2
 8005a78:	3304      	adds	r3, #4
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	e00c      	b.n	8005a98 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	4613      	mov	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	4413      	add	r3, r2
 8005a94:	3304      	adds	r3, #4
 8005a96:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68f9      	ldr	r1, [r7, #12]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f004 f87e 	bl	8009ba0 <USB_EPStopXfer>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005aa8:	7afb      	ldrb	r3, [r7, #11]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b08a      	sub	sp, #40	@ 0x28
 8005ab6:	af02      	add	r7, sp, #8
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	3310      	adds	r3, #16
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d901      	bls.n	8005aea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e06b      	b.n	8005bc2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d902      	bls.n	8005b06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	3303      	adds	r3, #3
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b0e:	e02a      	b.n	8005b66 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d902      	bls.n	8005b2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	3303      	adds	r3, #3
 8005b30:	089b      	lsrs	r3, r3, #2
 8005b32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68d9      	ldr	r1, [r3, #12]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	4603      	mov	r3, r0
 8005b48:	6978      	ldr	r0, [r7, #20]
 8005b4a:	f004 f8d3 	bl	8009cf4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	441a      	add	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	695a      	ldr	r2, [r3, #20]
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	441a      	add	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d809      	bhi.n	8005b90 <PCD_WriteEmptyTxFifo+0xde>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	695a      	ldr	r2, [r3, #20]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d203      	bcs.n	8005b90 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1bf      	bne.n	8005b10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d811      	bhi.n	8005bc0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	6939      	ldr	r1, [r7, #16]
 8005bb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
	...

08005bcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	333c      	adds	r3, #60	@ 0x3c
 8005be4:	3304      	adds	r3, #4
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	799b      	ldrb	r3, [r3, #6]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d17b      	bne.n	8005cfa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d015      	beq.n	8005c38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	4a61      	ldr	r2, [pc, #388]	@ (8005d94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	f240 80b9 	bls.w	8005d88 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80b3 	beq.w	8005d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c34:	6093      	str	r3, [r2, #8]
 8005c36:	e0a7      	b.n	8005d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d009      	beq.n	8005c56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c4e:	461a      	mov	r2, r3
 8005c50:	2320      	movs	r3, #32
 8005c52:	6093      	str	r3, [r2, #8]
 8005c54:	e098      	b.n	8005d88 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 8093 	bne.w	8005d88 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4a4b      	ldr	r2, [pc, #300]	@ (8005d94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d90f      	bls.n	8005c8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00a      	beq.n	8005c8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c80:	461a      	mov	r2, r3
 8005c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c86:	6093      	str	r3, [r2, #8]
 8005c88:	e07e      	b.n	8005d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a1a      	ldr	r2, [r3, #32]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	0159      	lsls	r1, r3, #5
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	440b      	add	r3, r1
 8005cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cb6:	1ad2      	subs	r2, r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d114      	bne.n	8005cec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	f004 faa2 	bl	800a220 <USB_EP0_OutStart>
 8005cdc:	e006      	b.n	8005cec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	441a      	add	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f007 f9f8 	bl	800d0e8 <HAL_PCD_DataOutStageCallback>
 8005cf8:	e046      	b.n	8005d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	4a26      	ldr	r2, [pc, #152]	@ (8005d98 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d124      	bne.n	8005d4c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d1e:	6093      	str	r3, [r2, #8]
 8005d20:	e032      	b.n	8005d88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d38:	461a      	mov	r2, r3
 8005d3a:	2320      	movs	r3, #32
 8005d3c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f007 f9cf 	bl	800d0e8 <HAL_PCD_DataOutStageCallback>
 8005d4a:	e01d      	b.n	8005d88 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d114      	bne.n	8005d7c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	4613      	mov	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d108      	bne.n	8005d7c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d74:	461a      	mov	r2, r3
 8005d76:	2100      	movs	r1, #0
 8005d78:	f004 fa52 	bl	800a220 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	4619      	mov	r1, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f007 f9b0 	bl	800d0e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	4f54300a 	.word	0x4f54300a
 8005d98:	4f54310a 	.word	0x4f54310a

08005d9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	333c      	adds	r3, #60	@ 0x3c
 8005db4:	3304      	adds	r3, #4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a15      	ldr	r2, [pc, #84]	@ (8005e24 <PCD_EP_OutSetupPacket_int+0x88>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d90e      	bls.n	8005df0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d009      	beq.n	8005df0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de8:	461a      	mov	r2, r3
 8005dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f007 f967 	bl	800d0c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4a0a      	ldr	r2, [pc, #40]	@ (8005e24 <PCD_EP_OutSetupPacket_int+0x88>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d90c      	bls.n	8005e18 <PCD_EP_OutSetupPacket_int+0x7c>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	799b      	ldrb	r3, [r3, #6]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d108      	bne.n	8005e18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e10:	461a      	mov	r2, r3
 8005e12:	2101      	movs	r1, #1
 8005e14:	f004 fa04 	bl	800a220 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	4f54300a 	.word	0x4f54300a

08005e28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
 8005e34:	4613      	mov	r3, r2
 8005e36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d107      	bne.n	8005e56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e46:	883b      	ldrh	r3, [r7, #0]
 8005e48:	0419      	lsls	r1, r3, #16
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e54:	e028      	b.n	8005ea8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5c:	0c1b      	lsrs	r3, r3, #16
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	4413      	add	r3, r2
 8005e62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e64:	2300      	movs	r3, #0
 8005e66:	73fb      	strb	r3, [r7, #15]
 8005e68:	e00d      	b.n	8005e86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	3340      	adds	r3, #64	@ 0x40
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	0c1b      	lsrs	r3, r3, #16
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	3301      	adds	r3, #1
 8005e84:	73fb      	strb	r3, [r7, #15]
 8005e86:	7bfa      	ldrb	r2, [r7, #15]
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d3ec      	bcc.n	8005e6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005e90:	883b      	ldrh	r3, [r7, #0]
 8005e92:	0418      	lsls	r0, r3, #16
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6819      	ldr	r1, [r3, #0]
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	4302      	orrs	r2, r0
 8005ea0:	3340      	adds	r3, #64	@ 0x40
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	887a      	ldrh	r2, [r7, #2]
 8005ec8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e267      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d075      	beq.n	8005ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f0e:	4b88      	ldr	r3, [pc, #544]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 030c 	and.w	r3, r3, #12
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d00c      	beq.n	8005f34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f1a:	4b85      	ldr	r3, [pc, #532]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	d112      	bne.n	8005f4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f26:	4b82      	ldr	r3, [pc, #520]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f32:	d10b      	bne.n	8005f4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f34:	4b7e      	ldr	r3, [pc, #504]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d05b      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x108>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d157      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e242      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f54:	d106      	bne.n	8005f64 <HAL_RCC_OscConfig+0x74>
 8005f56:	4b76      	ldr	r3, [pc, #472]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a75      	ldr	r2, [pc, #468]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	e01d      	b.n	8005fa0 <HAL_RCC_OscConfig+0xb0>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f6c:	d10c      	bne.n	8005f88 <HAL_RCC_OscConfig+0x98>
 8005f6e:	4b70      	ldr	r3, [pc, #448]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a6f      	ldr	r2, [pc, #444]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a6c      	ldr	r2, [pc, #432]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	e00b      	b.n	8005fa0 <HAL_RCC_OscConfig+0xb0>
 8005f88:	4b69      	ldr	r3, [pc, #420]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a68      	ldr	r2, [pc, #416]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	4b66      	ldr	r3, [pc, #408]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a65      	ldr	r2, [pc, #404]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d013      	beq.n	8005fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa8:	f7fd ff38 	bl	8003e1c <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fb0:	f7fd ff34 	bl	8003e1c <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b64      	cmp	r3, #100	@ 0x64
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e207      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f0      	beq.n	8005fb0 <HAL_RCC_OscConfig+0xc0>
 8005fce:	e014      	b.n	8005ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd0:	f7fd ff24 	bl	8003e1c <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fd8:	f7fd ff20 	bl	8003e1c <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b64      	cmp	r3, #100	@ 0x64
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e1f3      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fea:	4b51      	ldr	r3, [pc, #324]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f0      	bne.n	8005fd8 <HAL_RCC_OscConfig+0xe8>
 8005ff6:	e000      	b.n	8005ffa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d063      	beq.n	80060ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006006:	4b4a      	ldr	r3, [pc, #296]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 030c 	and.w	r3, r3, #12
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00b      	beq.n	800602a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006012:	4b47      	ldr	r3, [pc, #284]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800601a:	2b08      	cmp	r3, #8
 800601c:	d11c      	bne.n	8006058 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800601e:	4b44      	ldr	r3, [pc, #272]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d116      	bne.n	8006058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800602a:	4b41      	ldr	r3, [pc, #260]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d005      	beq.n	8006042 <HAL_RCC_OscConfig+0x152>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d001      	beq.n	8006042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e1c7      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006042:	4b3b      	ldr	r3, [pc, #236]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	4937      	ldr	r1, [pc, #220]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8006052:	4313      	orrs	r3, r2
 8006054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006056:	e03a      	b.n	80060ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d020      	beq.n	80060a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006060:	4b34      	ldr	r3, [pc, #208]	@ (8006134 <HAL_RCC_OscConfig+0x244>)
 8006062:	2201      	movs	r2, #1
 8006064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006066:	f7fd fed9 	bl	8003e1c <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800606e:	f7fd fed5 	bl	8003e1c <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e1a8      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006080:	4b2b      	ldr	r3, [pc, #172]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0f0      	beq.n	800606e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800608c:	4b28      	ldr	r3, [pc, #160]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	4925      	ldr	r1, [pc, #148]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 800609c:	4313      	orrs	r3, r2
 800609e:	600b      	str	r3, [r1, #0]
 80060a0:	e015      	b.n	80060ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060a2:	4b24      	ldr	r3, [pc, #144]	@ (8006134 <HAL_RCC_OscConfig+0x244>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fd feb8 	bl	8003e1c <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b0:	f7fd feb4 	bl	8003e1c <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e187      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d036      	beq.n	8006148 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d016      	beq.n	8006110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060e2:	4b15      	ldr	r3, [pc, #84]	@ (8006138 <HAL_RCC_OscConfig+0x248>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e8:	f7fd fe98 	bl	8003e1c <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060f0:	f7fd fe94 	bl	8003e1c <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e167      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006102:	4b0b      	ldr	r3, [pc, #44]	@ (8006130 <HAL_RCC_OscConfig+0x240>)
 8006104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0f0      	beq.n	80060f0 <HAL_RCC_OscConfig+0x200>
 800610e:	e01b      	b.n	8006148 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006110:	4b09      	ldr	r3, [pc, #36]	@ (8006138 <HAL_RCC_OscConfig+0x248>)
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006116:	f7fd fe81 	bl	8003e1c <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800611c:	e00e      	b.n	800613c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800611e:	f7fd fe7d 	bl	8003e1c <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d907      	bls.n	800613c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e150      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
 8006130:	40023800 	.word	0x40023800
 8006134:	42470000 	.word	0x42470000
 8006138:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800613c:	4b88      	ldr	r3, [pc, #544]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 800613e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1ea      	bne.n	800611e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 8097 	beq.w	8006284 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006156:	2300      	movs	r3, #0
 8006158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800615a:	4b81      	ldr	r3, [pc, #516]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10f      	bne.n	8006186 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006166:	2300      	movs	r3, #0
 8006168:	60bb      	str	r3, [r7, #8]
 800616a:	4b7d      	ldr	r3, [pc, #500]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616e:	4a7c      	ldr	r2, [pc, #496]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 8006170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006174:	6413      	str	r3, [r2, #64]	@ 0x40
 8006176:	4b7a      	ldr	r3, [pc, #488]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006182:	2301      	movs	r3, #1
 8006184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006186:	4b77      	ldr	r3, [pc, #476]	@ (8006364 <HAL_RCC_OscConfig+0x474>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800618e:	2b00      	cmp	r3, #0
 8006190:	d118      	bne.n	80061c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006192:	4b74      	ldr	r3, [pc, #464]	@ (8006364 <HAL_RCC_OscConfig+0x474>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a73      	ldr	r2, [pc, #460]	@ (8006364 <HAL_RCC_OscConfig+0x474>)
 8006198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800619c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800619e:	f7fd fe3d 	bl	8003e1c <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a6:	f7fd fe39 	bl	8003e1c <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e10c      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b8:	4b6a      	ldr	r3, [pc, #424]	@ (8006364 <HAL_RCC_OscConfig+0x474>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0f0      	beq.n	80061a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d106      	bne.n	80061da <HAL_RCC_OscConfig+0x2ea>
 80061cc:	4b64      	ldr	r3, [pc, #400]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 80061ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d0:	4a63      	ldr	r2, [pc, #396]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 80061d2:	f043 0301 	orr.w	r3, r3, #1
 80061d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80061d8:	e01c      	b.n	8006214 <HAL_RCC_OscConfig+0x324>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2b05      	cmp	r3, #5
 80061e0:	d10c      	bne.n	80061fc <HAL_RCC_OscConfig+0x30c>
 80061e2:	4b5f      	ldr	r3, [pc, #380]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 80061e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e6:	4a5e      	ldr	r2, [pc, #376]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 80061e8:	f043 0304 	orr.w	r3, r3, #4
 80061ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80061ee:	4b5c      	ldr	r3, [pc, #368]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f2:	4a5b      	ldr	r2, [pc, #364]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 80061f4:	f043 0301 	orr.w	r3, r3, #1
 80061f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80061fa:	e00b      	b.n	8006214 <HAL_RCC_OscConfig+0x324>
 80061fc:	4b58      	ldr	r3, [pc, #352]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 80061fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006200:	4a57      	ldr	r2, [pc, #348]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 8006202:	f023 0301 	bic.w	r3, r3, #1
 8006206:	6713      	str	r3, [r2, #112]	@ 0x70
 8006208:	4b55      	ldr	r3, [pc, #340]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 800620a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800620c:	4a54      	ldr	r2, [pc, #336]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 800620e:	f023 0304 	bic.w	r3, r3, #4
 8006212:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d015      	beq.n	8006248 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621c:	f7fd fdfe 	bl	8003e1c <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006222:	e00a      	b.n	800623a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006224:	f7fd fdfa 	bl	8003e1c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006232:	4293      	cmp	r3, r2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e0cb      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800623a:	4b49      	ldr	r3, [pc, #292]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0ee      	beq.n	8006224 <HAL_RCC_OscConfig+0x334>
 8006246:	e014      	b.n	8006272 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006248:	f7fd fde8 	bl	8003e1c <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800624e:	e00a      	b.n	8006266 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006250:	f7fd fde4 	bl	8003e1c <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800625e:	4293      	cmp	r3, r2
 8006260:	d901      	bls.n	8006266 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e0b5      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006266:	4b3e      	ldr	r3, [pc, #248]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 8006268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1ee      	bne.n	8006250 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d105      	bne.n	8006284 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006278:	4b39      	ldr	r3, [pc, #228]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 800627a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627c:	4a38      	ldr	r2, [pc, #224]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 800627e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006282:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80a1 	beq.w	80063d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800628e:	4b34      	ldr	r3, [pc, #208]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 030c 	and.w	r3, r3, #12
 8006296:	2b08      	cmp	r3, #8
 8006298:	d05c      	beq.n	8006354 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d141      	bne.n	8006326 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062a2:	4b31      	ldr	r3, [pc, #196]	@ (8006368 <HAL_RCC_OscConfig+0x478>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a8:	f7fd fdb8 	bl	8003e1c <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b0:	f7fd fdb4 	bl	8003e1c <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e087      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c2:	4b27      	ldr	r3, [pc, #156]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f0      	bne.n	80062b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69da      	ldr	r2, [r3, #28]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062dc:	019b      	lsls	r3, r3, #6
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e4:	085b      	lsrs	r3, r3, #1
 80062e6:	3b01      	subs	r3, #1
 80062e8:	041b      	lsls	r3, r3, #16
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	061b      	lsls	r3, r3, #24
 80062f2:	491b      	ldr	r1, [pc, #108]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006368 <HAL_RCC_OscConfig+0x478>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fe:	f7fd fd8d 	bl	8003e1c <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006304:	e008      	b.n	8006318 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006306:	f7fd fd89 	bl	8003e1c <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d901      	bls.n	8006318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e05c      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006318:	4b11      	ldr	r3, [pc, #68]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0f0      	beq.n	8006306 <HAL_RCC_OscConfig+0x416>
 8006324:	e054      	b.n	80063d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006326:	4b10      	ldr	r3, [pc, #64]	@ (8006368 <HAL_RCC_OscConfig+0x478>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800632c:	f7fd fd76 	bl	8003e1c <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006334:	f7fd fd72 	bl	8003e1c <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e045      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006346:	4b06      	ldr	r3, [pc, #24]	@ (8006360 <HAL_RCC_OscConfig+0x470>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f0      	bne.n	8006334 <HAL_RCC_OscConfig+0x444>
 8006352:	e03d      	b.n	80063d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d107      	bne.n	800636c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e038      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
 8006360:	40023800 	.word	0x40023800
 8006364:	40007000 	.word	0x40007000
 8006368:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800636c:	4b1b      	ldr	r3, [pc, #108]	@ (80063dc <HAL_RCC_OscConfig+0x4ec>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d028      	beq.n	80063cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006384:	429a      	cmp	r2, r3
 8006386:	d121      	bne.n	80063cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006392:	429a      	cmp	r2, r3
 8006394:	d11a      	bne.n	80063cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800639c:	4013      	ands	r3, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d111      	bne.n	80063cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b2:	085b      	lsrs	r3, r3, #1
 80063b4:	3b01      	subs	r3, #1
 80063b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d107      	bne.n	80063cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d001      	beq.n	80063d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	40023800 	.word	0x40023800

080063e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0cc      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063f4:	4b68      	ldr	r3, [pc, #416]	@ (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d90c      	bls.n	800641c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006402:	4b65      	ldr	r3, [pc, #404]	@ (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800640a:	4b63      	ldr	r3, [pc, #396]	@ (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	429a      	cmp	r2, r3
 8006416:	d001      	beq.n	800641c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e0b8      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d020      	beq.n	800646a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006434:	4b59      	ldr	r3, [pc, #356]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	4a58      	ldr	r2, [pc, #352]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800643e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800644c:	4b53      	ldr	r3, [pc, #332]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	4a52      	ldr	r2, [pc, #328]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006458:	4b50      	ldr	r3, [pc, #320]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	494d      	ldr	r1, [pc, #308]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	4313      	orrs	r3, r2
 8006468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d044      	beq.n	8006500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d107      	bne.n	800648e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800647e:	4b47      	ldr	r3, [pc, #284]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d119      	bne.n	80064be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e07f      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d003      	beq.n	800649e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800649a:	2b03      	cmp	r3, #3
 800649c:	d107      	bne.n	80064ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800649e:	4b3f      	ldr	r3, [pc, #252]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e06f      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ae:	4b3b      	ldr	r3, [pc, #236]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e067      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064be:	4b37      	ldr	r3, [pc, #220]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f023 0203 	bic.w	r2, r3, #3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	4934      	ldr	r1, [pc, #208]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064d0:	f7fd fca4 	bl	8003e1c <HAL_GetTick>
 80064d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d6:	e00a      	b.n	80064ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d8:	f7fd fca0 	bl	8003e1c <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e04f      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ee:	4b2b      	ldr	r3, [pc, #172]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 020c 	and.w	r2, r3, #12
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d1eb      	bne.n	80064d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006500:	4b25      	ldr	r3, [pc, #148]	@ (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d20c      	bcs.n	8006528 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650e:	4b22      	ldr	r3, [pc, #136]	@ (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006516:	4b20      	ldr	r3, [pc, #128]	@ (8006598 <HAL_RCC_ClockConfig+0x1b8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d001      	beq.n	8006528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e032      	b.n	800658e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d008      	beq.n	8006546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006534:	4b19      	ldr	r3, [pc, #100]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	4916      	ldr	r1, [pc, #88]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	4313      	orrs	r3, r2
 8006544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d009      	beq.n	8006566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006552:	4b12      	ldr	r3, [pc, #72]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	490e      	ldr	r1, [pc, #56]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 8006562:	4313      	orrs	r3, r2
 8006564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006566:	f000 f821 	bl	80065ac <HAL_RCC_GetSysClockFreq>
 800656a:	4602      	mov	r2, r0
 800656c:	4b0b      	ldr	r3, [pc, #44]	@ (800659c <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	091b      	lsrs	r3, r3, #4
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	490a      	ldr	r1, [pc, #40]	@ (80065a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006578:	5ccb      	ldrb	r3, [r1, r3]
 800657a:	fa22 f303 	lsr.w	r3, r2, r3
 800657e:	4a09      	ldr	r2, [pc, #36]	@ (80065a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006582:	4b09      	ldr	r3, [pc, #36]	@ (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f7fd fc04 	bl	8003d94 <HAL_InitTick>

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	40023c00 	.word	0x40023c00
 800659c:	40023800 	.word	0x40023800
 80065a0:	0806ce94 	.word	0x0806ce94
 80065a4:	20000008 	.word	0x20000008
 80065a8:	20000010 	.word	0x20000010

080065ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065b0:	b094      	sub	sp, #80	@ 0x50
 80065b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065c4:	4b79      	ldr	r3, [pc, #484]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x200>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 030c 	and.w	r3, r3, #12
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d00d      	beq.n	80065ec <HAL_RCC_GetSysClockFreq+0x40>
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	f200 80e1 	bhi.w	8006798 <HAL_RCC_GetSysClockFreq+0x1ec>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <HAL_RCC_GetSysClockFreq+0x34>
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d003      	beq.n	80065e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80065de:	e0db      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065e0:	4b73      	ldr	r3, [pc, #460]	@ (80067b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80065e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065e4:	e0db      	b.n	800679e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065e6:	4b73      	ldr	r3, [pc, #460]	@ (80067b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80065e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065ea:	e0d8      	b.n	800679e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065ec:	4b6f      	ldr	r3, [pc, #444]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x200>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065f6:	4b6d      	ldr	r3, [pc, #436]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x200>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d063      	beq.n	80066ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006602:	4b6a      	ldr	r3, [pc, #424]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x200>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	099b      	lsrs	r3, r3, #6
 8006608:	2200      	movs	r2, #0
 800660a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800660c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800660e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006614:	633b      	str	r3, [r7, #48]	@ 0x30
 8006616:	2300      	movs	r3, #0
 8006618:	637b      	str	r3, [r7, #52]	@ 0x34
 800661a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800661e:	4622      	mov	r2, r4
 8006620:	462b      	mov	r3, r5
 8006622:	f04f 0000 	mov.w	r0, #0
 8006626:	f04f 0100 	mov.w	r1, #0
 800662a:	0159      	lsls	r1, r3, #5
 800662c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006630:	0150      	lsls	r0, r2, #5
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4621      	mov	r1, r4
 8006638:	1a51      	subs	r1, r2, r1
 800663a:	6139      	str	r1, [r7, #16]
 800663c:	4629      	mov	r1, r5
 800663e:	eb63 0301 	sbc.w	r3, r3, r1
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	f04f 0300 	mov.w	r3, #0
 800664c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006650:	4659      	mov	r1, fp
 8006652:	018b      	lsls	r3, r1, #6
 8006654:	4651      	mov	r1, sl
 8006656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800665a:	4651      	mov	r1, sl
 800665c:	018a      	lsls	r2, r1, #6
 800665e:	4651      	mov	r1, sl
 8006660:	ebb2 0801 	subs.w	r8, r2, r1
 8006664:	4659      	mov	r1, fp
 8006666:	eb63 0901 	sbc.w	r9, r3, r1
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	f04f 0300 	mov.w	r3, #0
 8006672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800667a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800667e:	4690      	mov	r8, r2
 8006680:	4699      	mov	r9, r3
 8006682:	4623      	mov	r3, r4
 8006684:	eb18 0303 	adds.w	r3, r8, r3
 8006688:	60bb      	str	r3, [r7, #8]
 800668a:	462b      	mov	r3, r5
 800668c:	eb49 0303 	adc.w	r3, r9, r3
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	f04f 0300 	mov.w	r3, #0
 800669a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800669e:	4629      	mov	r1, r5
 80066a0:	024b      	lsls	r3, r1, #9
 80066a2:	4621      	mov	r1, r4
 80066a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066a8:	4621      	mov	r1, r4
 80066aa:	024a      	lsls	r2, r1, #9
 80066ac:	4610      	mov	r0, r2
 80066ae:	4619      	mov	r1, r3
 80066b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066b2:	2200      	movs	r2, #0
 80066b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066bc:	f7fa faf4 	bl	8000ca8 <__aeabi_uldivmod>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4613      	mov	r3, r2
 80066c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c8:	e058      	b.n	800677c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ca:	4b38      	ldr	r3, [pc, #224]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x200>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	099b      	lsrs	r3, r3, #6
 80066d0:	2200      	movs	r2, #0
 80066d2:	4618      	mov	r0, r3
 80066d4:	4611      	mov	r1, r2
 80066d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066da:	623b      	str	r3, [r7, #32]
 80066dc:	2300      	movs	r3, #0
 80066de:	627b      	str	r3, [r7, #36]	@ 0x24
 80066e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066e4:	4642      	mov	r2, r8
 80066e6:	464b      	mov	r3, r9
 80066e8:	f04f 0000 	mov.w	r0, #0
 80066ec:	f04f 0100 	mov.w	r1, #0
 80066f0:	0159      	lsls	r1, r3, #5
 80066f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066f6:	0150      	lsls	r0, r2, #5
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4641      	mov	r1, r8
 80066fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8006702:	4649      	mov	r1, r9
 8006704:	eb63 0b01 	sbc.w	fp, r3, r1
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	f04f 0300 	mov.w	r3, #0
 8006710:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006714:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006718:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800671c:	ebb2 040a 	subs.w	r4, r2, sl
 8006720:	eb63 050b 	sbc.w	r5, r3, fp
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	00eb      	lsls	r3, r5, #3
 800672e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006732:	00e2      	lsls	r2, r4, #3
 8006734:	4614      	mov	r4, r2
 8006736:	461d      	mov	r5, r3
 8006738:	4643      	mov	r3, r8
 800673a:	18e3      	adds	r3, r4, r3
 800673c:	603b      	str	r3, [r7, #0]
 800673e:	464b      	mov	r3, r9
 8006740:	eb45 0303 	adc.w	r3, r5, r3
 8006744:	607b      	str	r3, [r7, #4]
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006752:	4629      	mov	r1, r5
 8006754:	028b      	lsls	r3, r1, #10
 8006756:	4621      	mov	r1, r4
 8006758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800675c:	4621      	mov	r1, r4
 800675e:	028a      	lsls	r2, r1, #10
 8006760:	4610      	mov	r0, r2
 8006762:	4619      	mov	r1, r3
 8006764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006766:	2200      	movs	r2, #0
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	61fa      	str	r2, [r7, #28]
 800676c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006770:	f7fa fa9a 	bl	8000ca8 <__aeabi_uldivmod>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4613      	mov	r3, r2
 800677a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800677c:	4b0b      	ldr	r3, [pc, #44]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x200>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	0c1b      	lsrs	r3, r3, #16
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	3301      	adds	r3, #1
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800678c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800678e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006790:	fbb2 f3f3 	udiv	r3, r2, r3
 8006794:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006796:	e002      	b.n	800679e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006798:	4b05      	ldr	r3, [pc, #20]	@ (80067b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800679a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800679c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800679e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3750      	adds	r7, #80	@ 0x50
 80067a4:	46bd      	mov	sp, r7
 80067a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067aa:	bf00      	nop
 80067ac:	40023800 	.word	0x40023800
 80067b0:	00f42400 	.word	0x00f42400
 80067b4:	007a1200 	.word	0x007a1200

080067b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067bc:	4b03      	ldr	r3, [pc, #12]	@ (80067cc <HAL_RCC_GetHCLKFreq+0x14>)
 80067be:	681b      	ldr	r3, [r3, #0]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	20000008 	.word	0x20000008

080067d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067d4:	f7ff fff0 	bl	80067b8 <HAL_RCC_GetHCLKFreq>
 80067d8:	4602      	mov	r2, r0
 80067da:	4b05      	ldr	r3, [pc, #20]	@ (80067f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	0a9b      	lsrs	r3, r3, #10
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	4903      	ldr	r1, [pc, #12]	@ (80067f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067e6:	5ccb      	ldrb	r3, [r1, r3]
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	40023800 	.word	0x40023800
 80067f4:	0806cea4 	.word	0x0806cea4

080067f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067fc:	f7ff ffdc 	bl	80067b8 <HAL_RCC_GetHCLKFreq>
 8006800:	4602      	mov	r2, r0
 8006802:	4b05      	ldr	r3, [pc, #20]	@ (8006818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	0b5b      	lsrs	r3, r3, #13
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	4903      	ldr	r1, [pc, #12]	@ (800681c <HAL_RCC_GetPCLK2Freq+0x24>)
 800680e:	5ccb      	ldrb	r3, [r1, r3]
 8006810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006814:	4618      	mov	r0, r3
 8006816:	bd80      	pop	{r7, pc}
 8006818:	40023800 	.word	0x40023800
 800681c:	0806cea4 	.word	0x0806cea4

08006820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e07b      	b.n	800692a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006836:	2b00      	cmp	r3, #0
 8006838:	d108      	bne.n	800684c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006842:	d009      	beq.n	8006858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	61da      	str	r2, [r3, #28]
 800684a:	e005      	b.n	8006858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7fc fb5e 	bl	8002f34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800688e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80068a0:	431a      	orrs	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068d2:	431a      	orrs	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068dc:	ea42 0103 	orr.w	r1, r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	0c1b      	lsrs	r3, r3, #16
 80068f6:	f003 0104 	and.w	r1, r3, #4
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fe:	f003 0210 	and.w	r2, r3, #16
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69da      	ldr	r2, [r3, #28]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006918:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b088      	sub	sp, #32
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	603b      	str	r3, [r7, #0]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006942:	f7fd fa6b 	bl	8003e1c <HAL_GetTick>
 8006946:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b01      	cmp	r3, #1
 8006956:	d001      	beq.n	800695c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006958:	2302      	movs	r3, #2
 800695a:	e12a      	b.n	8006bb2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <HAL_SPI_Transmit+0x36>
 8006962:	88fb      	ldrh	r3, [r7, #6]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e122      	b.n	8006bb2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006972:	2b01      	cmp	r3, #1
 8006974:	d101      	bne.n	800697a <HAL_SPI_Transmit+0x48>
 8006976:	2302      	movs	r3, #2
 8006978:	e11b      	b.n	8006bb2 <HAL_SPI_Transmit+0x280>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2203      	movs	r2, #3
 8006986:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	88fa      	ldrh	r2, [r7, #6]
 800699a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	88fa      	ldrh	r2, [r7, #6]
 80069a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069c8:	d10f      	bne.n	80069ea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f4:	2b40      	cmp	r3, #64	@ 0x40
 80069f6:	d007      	beq.n	8006a08 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a10:	d152      	bne.n	8006ab8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_SPI_Transmit+0xee>
 8006a1a:	8b7b      	ldrh	r3, [r7, #26]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d145      	bne.n	8006aac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a24:	881a      	ldrh	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a30:	1c9a      	adds	r2, r3, #2
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a44:	e032      	b.n	8006aac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d112      	bne.n	8006a7a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a58:	881a      	ldrh	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a64:	1c9a      	adds	r2, r3, #2
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006a78:	e018      	b.n	8006aac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a7a:	f7fd f9cf 	bl	8003e1c <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d803      	bhi.n	8006a92 <HAL_SPI_Transmit+0x160>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a90:	d102      	bne.n	8006a98 <HAL_SPI_Transmit+0x166>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e082      	b.n	8006bb2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1c7      	bne.n	8006a46 <HAL_SPI_Transmit+0x114>
 8006ab6:	e053      	b.n	8006b60 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <HAL_SPI_Transmit+0x194>
 8006ac0:	8b7b      	ldrh	r3, [r7, #26]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d147      	bne.n	8006b56 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	330c      	adds	r3, #12
 8006ad0:	7812      	ldrb	r2, [r2, #0]
 8006ad2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006aec:	e033      	b.n	8006b56 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d113      	bne.n	8006b24 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	330c      	adds	r3, #12
 8006b06:	7812      	ldrb	r2, [r2, #0]
 8006b08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b22:	e018      	b.n	8006b56 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b24:	f7fd f97a 	bl	8003e1c <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d803      	bhi.n	8006b3c <HAL_SPI_Transmit+0x20a>
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3a:	d102      	bne.n	8006b42 <HAL_SPI_Transmit+0x210>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d109      	bne.n	8006b56 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e02d      	b.n	8006bb2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1c6      	bne.n	8006aee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fa59 	bl	800701c <SPI_EndRxTxTransaction>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2220      	movs	r2, #32
 8006b74:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b7e:	2300      	movs	r3, #0
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
  }
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3720      	adds	r7, #32
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b08a      	sub	sp, #40	@ 0x28
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	607a      	str	r2, [r7, #4]
 8006bc6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bcc:	f7fd f926 	bl	8003e1c <HAL_GetTick>
 8006bd0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bd8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006be0:	887b      	ldrh	r3, [r7, #2]
 8006be2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006be4:	7ffb      	ldrb	r3, [r7, #31]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d00c      	beq.n	8006c04 <HAL_SPI_TransmitReceive+0x4a>
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bf0:	d106      	bne.n	8006c00 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d102      	bne.n	8006c00 <HAL_SPI_TransmitReceive+0x46>
 8006bfa:	7ffb      	ldrb	r3, [r7, #31]
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d001      	beq.n	8006c04 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006c00:	2302      	movs	r3, #2
 8006c02:	e17f      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d005      	beq.n	8006c16 <HAL_SPI_TransmitReceive+0x5c>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <HAL_SPI_TransmitReceive+0x5c>
 8006c10:	887b      	ldrh	r3, [r7, #2]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e174      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_SPI_TransmitReceive+0x6e>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e16d      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x34a>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d003      	beq.n	8006c44 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2205      	movs	r2, #5
 8006c40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	887a      	ldrh	r2, [r7, #2]
 8006c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	887a      	ldrh	r2, [r7, #2]
 8006c5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	887a      	ldrh	r2, [r7, #2]
 8006c66:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	887a      	ldrh	r2, [r7, #2]
 8006c6c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c84:	2b40      	cmp	r3, #64	@ 0x40
 8006c86:	d007      	beq.n	8006c98 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ca0:	d17e      	bne.n	8006da0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <HAL_SPI_TransmitReceive+0xf6>
 8006caa:	8afb      	ldrh	r3, [r7, #22]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d16c      	bne.n	8006d8a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb4:	881a      	ldrh	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc0:	1c9a      	adds	r2, r3, #2
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cd4:	e059      	b.n	8006d8a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d11b      	bne.n	8006d1c <HAL_SPI_TransmitReceive+0x162>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d016      	beq.n	8006d1c <HAL_SPI_TransmitReceive+0x162>
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d113      	bne.n	8006d1c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf8:	881a      	ldrh	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d04:	1c9a      	adds	r2, r3, #2
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	3b01      	subs	r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d119      	bne.n	8006d5e <HAL_SPI_TransmitReceive+0x1a4>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d014      	beq.n	8006d5e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3e:	b292      	uxth	r2, r2
 8006d40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d46:	1c9a      	adds	r2, r3, #2
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	3b01      	subs	r3, #1
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d5e:	f7fd f85d 	bl	8003e1c <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d80d      	bhi.n	8006d8a <HAL_SPI_TransmitReceive+0x1d0>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d74:	d009      	beq.n	8006d8a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e0bc      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1a0      	bne.n	8006cd6 <HAL_SPI_TransmitReceive+0x11c>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d19b      	bne.n	8006cd6 <HAL_SPI_TransmitReceive+0x11c>
 8006d9e:	e082      	b.n	8006ea6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_SPI_TransmitReceive+0x1f4>
 8006da8:	8afb      	ldrh	r3, [r7, #22]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d171      	bne.n	8006e92 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	330c      	adds	r3, #12
 8006db8:	7812      	ldrb	r2, [r2, #0]
 8006dba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dd4:	e05d      	b.n	8006e92 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d11c      	bne.n	8006e1e <HAL_SPI_TransmitReceive+0x264>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d017      	beq.n	8006e1e <HAL_SPI_TransmitReceive+0x264>
 8006dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d114      	bne.n	8006e1e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	330c      	adds	r3, #12
 8006dfe:	7812      	ldrb	r2, [r2, #0]
 8006e00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	3b01      	subs	r3, #1
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d119      	bne.n	8006e60 <HAL_SPI_TransmitReceive+0x2a6>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d014      	beq.n	8006e60 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e60:	f7fc ffdc 	bl	8003e1c <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d803      	bhi.n	8006e78 <HAL_SPI_TransmitReceive+0x2be>
 8006e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e76:	d102      	bne.n	8006e7e <HAL_SPI_TransmitReceive+0x2c4>
 8006e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d109      	bne.n	8006e92 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e038      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d19c      	bne.n	8006dd6 <HAL_SPI_TransmitReceive+0x21c>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d197      	bne.n	8006dd6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ea6:	6a3a      	ldr	r2, [r7, #32]
 8006ea8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 f8b6 	bl	800701c <SPI_EndRxTxTransaction>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d008      	beq.n	8006ec8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e01d      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	613b      	str	r3, [r7, #16]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	613b      	str	r3, [r7, #16]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	613b      	str	r3, [r7, #16]
 8006ee4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006f02:	2300      	movs	r3, #0
  }
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3728      	adds	r7, #40	@ 0x28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f1c:	f7fc ff7e 	bl	8003e1c <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f24:	1a9b      	subs	r3, r3, r2
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	4413      	add	r3, r2
 8006f2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f2c:	f7fc ff76 	bl	8003e1c <HAL_GetTick>
 8006f30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f32:	4b39      	ldr	r3, [pc, #228]	@ (8007018 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	015b      	lsls	r3, r3, #5
 8006f38:	0d1b      	lsrs	r3, r3, #20
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	fb02 f303 	mul.w	r3, r2, r3
 8006f40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f42:	e055      	b.n	8006ff0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4a:	d051      	beq.n	8006ff0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f4c:	f7fc ff66 	bl	8003e1c <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d902      	bls.n	8006f62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d13d      	bne.n	8006fde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f7a:	d111      	bne.n	8006fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f84:	d004      	beq.n	8006f90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f8e:	d107      	bne.n	8006fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fa8:	d10f      	bne.n	8006fca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e018      	b.n	8007010 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d102      	bne.n	8006fea <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	61fb      	str	r3, [r7, #28]
 8006fe8:	e002      	b.n	8006ff0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	bf0c      	ite	eq
 8007000:	2301      	moveq	r3, #1
 8007002:	2300      	movne	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	461a      	mov	r2, r3
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	429a      	cmp	r2, r3
 800700c:	d19a      	bne.n	8006f44 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3720      	adds	r7, #32
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20000008 	.word	0x20000008

0800701c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af02      	add	r7, sp, #8
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2201      	movs	r2, #1
 8007030:	2102      	movs	r1, #2
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f7ff ff6a 	bl	8006f0c <SPI_WaitFlagStateUntilTimeout>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007042:	f043 0220 	orr.w	r2, r3, #32
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e032      	b.n	80070b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800704e:	4b1b      	ldr	r3, [pc, #108]	@ (80070bc <SPI_EndRxTxTransaction+0xa0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a1b      	ldr	r2, [pc, #108]	@ (80070c0 <SPI_EndRxTxTransaction+0xa4>)
 8007054:	fba2 2303 	umull	r2, r3, r2, r3
 8007058:	0d5b      	lsrs	r3, r3, #21
 800705a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800705e:	fb02 f303 	mul.w	r3, r2, r3
 8007062:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800706c:	d112      	bne.n	8007094 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2200      	movs	r2, #0
 8007076:	2180      	movs	r1, #128	@ 0x80
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff ff47 	bl	8006f0c <SPI_WaitFlagStateUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d016      	beq.n	80070b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007088:	f043 0220 	orr.w	r2, r3, #32
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e00f      	b.n	80070b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	3b01      	subs	r3, #1
 800709e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070aa:	2b80      	cmp	r3, #128	@ 0x80
 80070ac:	d0f2      	beq.n	8007094 <SPI_EndRxTxTransaction+0x78>
 80070ae:	e000      	b.n	80070b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80070b0:	bf00      	nop
  }

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20000008 	.word	0x20000008
 80070c0:	165e9f81 	.word	0x165e9f81

080070c4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e038      	b.n	800714c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d106      	bne.n	80070f4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7fc f82c 	bl	800314c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3308      	adds	r3, #8
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f001 fd06 	bl	8008b10 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	461a      	mov	r2, r3
 800710e:	68b9      	ldr	r1, [r7, #8]
 8007110:	f001 fd68 	bl	8008be4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6858      	ldr	r0, [r3, #4]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	f001 fd8d 	bl	8008c40 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	6892      	ldr	r2, [r2, #8]
 800712e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	6892      	ldr	r2, [r2, #8]
 800713a:	f041 0101 	orr.w	r1, r1, #1
 800713e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e041      	b.n	80071ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d106      	bne.n	8007180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7fb ff22 	bl	8002fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3304      	adds	r3, #4
 8007190:	4619      	mov	r1, r3
 8007192:	4610      	mov	r0, r2
 8007194:	f000 fa80 	bl	8007698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
	...

080071f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b01      	cmp	r3, #1
 8007206:	d001      	beq.n	800720c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e046      	b.n	800729a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a23      	ldr	r2, [pc, #140]	@ (80072a8 <HAL_TIM_Base_Start+0xb4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d022      	beq.n	8007264 <HAL_TIM_Base_Start+0x70>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007226:	d01d      	beq.n	8007264 <HAL_TIM_Base_Start+0x70>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a1f      	ldr	r2, [pc, #124]	@ (80072ac <HAL_TIM_Base_Start+0xb8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d018      	beq.n	8007264 <HAL_TIM_Base_Start+0x70>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1e      	ldr	r2, [pc, #120]	@ (80072b0 <HAL_TIM_Base_Start+0xbc>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d013      	beq.n	8007264 <HAL_TIM_Base_Start+0x70>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1c      	ldr	r2, [pc, #112]	@ (80072b4 <HAL_TIM_Base_Start+0xc0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00e      	beq.n	8007264 <HAL_TIM_Base_Start+0x70>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1b      	ldr	r2, [pc, #108]	@ (80072b8 <HAL_TIM_Base_Start+0xc4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d009      	beq.n	8007264 <HAL_TIM_Base_Start+0x70>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a19      	ldr	r2, [pc, #100]	@ (80072bc <HAL_TIM_Base_Start+0xc8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d004      	beq.n	8007264 <HAL_TIM_Base_Start+0x70>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a18      	ldr	r2, [pc, #96]	@ (80072c0 <HAL_TIM_Base_Start+0xcc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d111      	bne.n	8007288 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b06      	cmp	r3, #6
 8007274:	d010      	beq.n	8007298 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f042 0201 	orr.w	r2, r2, #1
 8007284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007286:	e007      	b.n	8007298 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40010000 	.word	0x40010000
 80072ac:	40000400 	.word	0x40000400
 80072b0:	40000800 	.word	0x40000800
 80072b4:	40000c00 	.word	0x40000c00
 80072b8:	40010400 	.word	0x40010400
 80072bc:	40014000 	.word	0x40014000
 80072c0:	40001800 	.word	0x40001800

080072c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d020      	beq.n	8007328 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d01b      	beq.n	8007328 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f06f 0202 	mvn.w	r2, #2
 80072f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f9a3 	bl	800765a <HAL_TIM_IC_CaptureCallback>
 8007314:	e005      	b.n	8007322 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f995 	bl	8007646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f9a6 	bl	800766e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b00      	cmp	r3, #0
 8007330:	d020      	beq.n	8007374 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01b      	beq.n	8007374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0204 	mvn.w	r2, #4
 8007344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2202      	movs	r2, #2
 800734a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f97d 	bl	800765a <HAL_TIM_IC_CaptureCallback>
 8007360:	e005      	b.n	800736e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f96f 	bl	8007646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f980 	bl	800766e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b00      	cmp	r3, #0
 800737c:	d020      	beq.n	80073c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f003 0308 	and.w	r3, r3, #8
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01b      	beq.n	80073c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f06f 0208 	mvn.w	r2, #8
 8007390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2204      	movs	r2, #4
 8007396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f957 	bl	800765a <HAL_TIM_IC_CaptureCallback>
 80073ac:	e005      	b.n	80073ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f949 	bl	8007646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f95a 	bl	800766e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f003 0310 	and.w	r3, r3, #16
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d020      	beq.n	800740c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d01b      	beq.n	800740c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0210 	mvn.w	r2, #16
 80073dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2208      	movs	r2, #8
 80073e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f931 	bl	800765a <HAL_TIM_IC_CaptureCallback>
 80073f8:	e005      	b.n	8007406 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f923 	bl	8007646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f934 	bl	800766e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00c      	beq.n	8007430 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d007      	beq.n	8007430 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f06f 0201 	mvn.w	r2, #1
 8007428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f901 	bl	8007632 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00c      	beq.n	8007454 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007440:	2b00      	cmp	r3, #0
 8007442:	d007      	beq.n	8007454 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800744c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fae8 	bl	8007a24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00c      	beq.n	8007478 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	d007      	beq.n	8007478 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f905 	bl	8007682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f003 0320 	and.w	r3, r3, #32
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00c      	beq.n	800749c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f003 0320 	and.w	r3, r3, #32
 8007488:	2b00      	cmp	r3, #0
 800748a:	d007      	beq.n	800749c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0220 	mvn.w	r2, #32
 8007494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 faba 	bl	8007a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_TIM_ConfigClockSource+0x1c>
 80074bc:	2302      	movs	r3, #2
 80074be:	e0b4      	b.n	800762a <HAL_TIM_ConfigClockSource+0x186>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80074de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f8:	d03e      	beq.n	8007578 <HAL_TIM_ConfigClockSource+0xd4>
 80074fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074fe:	f200 8087 	bhi.w	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007506:	f000 8086 	beq.w	8007616 <HAL_TIM_ConfigClockSource+0x172>
 800750a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800750e:	d87f      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007510:	2b70      	cmp	r3, #112	@ 0x70
 8007512:	d01a      	beq.n	800754a <HAL_TIM_ConfigClockSource+0xa6>
 8007514:	2b70      	cmp	r3, #112	@ 0x70
 8007516:	d87b      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007518:	2b60      	cmp	r3, #96	@ 0x60
 800751a:	d050      	beq.n	80075be <HAL_TIM_ConfigClockSource+0x11a>
 800751c:	2b60      	cmp	r3, #96	@ 0x60
 800751e:	d877      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007520:	2b50      	cmp	r3, #80	@ 0x50
 8007522:	d03c      	beq.n	800759e <HAL_TIM_ConfigClockSource+0xfa>
 8007524:	2b50      	cmp	r3, #80	@ 0x50
 8007526:	d873      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007528:	2b40      	cmp	r3, #64	@ 0x40
 800752a:	d058      	beq.n	80075de <HAL_TIM_ConfigClockSource+0x13a>
 800752c:	2b40      	cmp	r3, #64	@ 0x40
 800752e:	d86f      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007530:	2b30      	cmp	r3, #48	@ 0x30
 8007532:	d064      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x15a>
 8007534:	2b30      	cmp	r3, #48	@ 0x30
 8007536:	d86b      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007538:	2b20      	cmp	r3, #32
 800753a:	d060      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x15a>
 800753c:	2b20      	cmp	r3, #32
 800753e:	d867      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d05c      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x15a>
 8007544:	2b10      	cmp	r3, #16
 8007546:	d05a      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x15a>
 8007548:	e062      	b.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800755a:	f000 f9bd 	bl	80078d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800756c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	609a      	str	r2, [r3, #8]
      break;
 8007576:	e04f      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007588:	f000 f9a6 	bl	80078d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800759a:	609a      	str	r2, [r3, #8]
      break;
 800759c:	e03c      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075aa:	461a      	mov	r2, r3
 80075ac:	f000 f91a 	bl	80077e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2150      	movs	r1, #80	@ 0x50
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f973 	bl	80078a2 <TIM_ITRx_SetConfig>
      break;
 80075bc:	e02c      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075ca:	461a      	mov	r2, r3
 80075cc:	f000 f939 	bl	8007842 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2160      	movs	r1, #96	@ 0x60
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 f963 	bl	80078a2 <TIM_ITRx_SetConfig>
      break;
 80075dc:	e01c      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ea:	461a      	mov	r2, r3
 80075ec:	f000 f8fa 	bl	80077e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2140      	movs	r1, #64	@ 0x40
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 f953 	bl	80078a2 <TIM_ITRx_SetConfig>
      break;
 80075fc:	e00c      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4619      	mov	r1, r3
 8007608:	4610      	mov	r0, r2
 800760a:	f000 f94a 	bl	80078a2 <TIM_ITRx_SetConfig>
      break;
 800760e:	e003      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	73fb      	strb	r3, [r7, #15]
      break;
 8007614:	e000      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007616:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800768a:	bf00      	nop
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
	...

08007698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a43      	ldr	r2, [pc, #268]	@ (80077b8 <TIM_Base_SetConfig+0x120>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d013      	beq.n	80076d8 <TIM_Base_SetConfig+0x40>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b6:	d00f      	beq.n	80076d8 <TIM_Base_SetConfig+0x40>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a40      	ldr	r2, [pc, #256]	@ (80077bc <TIM_Base_SetConfig+0x124>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d00b      	beq.n	80076d8 <TIM_Base_SetConfig+0x40>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a3f      	ldr	r2, [pc, #252]	@ (80077c0 <TIM_Base_SetConfig+0x128>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d007      	beq.n	80076d8 <TIM_Base_SetConfig+0x40>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a3e      	ldr	r2, [pc, #248]	@ (80077c4 <TIM_Base_SetConfig+0x12c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d003      	beq.n	80076d8 <TIM_Base_SetConfig+0x40>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a3d      	ldr	r2, [pc, #244]	@ (80077c8 <TIM_Base_SetConfig+0x130>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d108      	bne.n	80076ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a32      	ldr	r2, [pc, #200]	@ (80077b8 <TIM_Base_SetConfig+0x120>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d02b      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076f8:	d027      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a2f      	ldr	r2, [pc, #188]	@ (80077bc <TIM_Base_SetConfig+0x124>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d023      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a2e      	ldr	r2, [pc, #184]	@ (80077c0 <TIM_Base_SetConfig+0x128>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d01f      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a2d      	ldr	r2, [pc, #180]	@ (80077c4 <TIM_Base_SetConfig+0x12c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d01b      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a2c      	ldr	r2, [pc, #176]	@ (80077c8 <TIM_Base_SetConfig+0x130>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d017      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a2b      	ldr	r2, [pc, #172]	@ (80077cc <TIM_Base_SetConfig+0x134>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d013      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a2a      	ldr	r2, [pc, #168]	@ (80077d0 <TIM_Base_SetConfig+0x138>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00f      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a29      	ldr	r2, [pc, #164]	@ (80077d4 <TIM_Base_SetConfig+0x13c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d00b      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a28      	ldr	r2, [pc, #160]	@ (80077d8 <TIM_Base_SetConfig+0x140>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d007      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a27      	ldr	r2, [pc, #156]	@ (80077dc <TIM_Base_SetConfig+0x144>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d003      	beq.n	800774a <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a26      	ldr	r2, [pc, #152]	@ (80077e0 <TIM_Base_SetConfig+0x148>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d108      	bne.n	800775c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	4313      	orrs	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	689a      	ldr	r2, [r3, #8]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a0e      	ldr	r2, [pc, #56]	@ (80077b8 <TIM_Base_SetConfig+0x120>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d003      	beq.n	800778a <TIM_Base_SetConfig+0xf2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a10      	ldr	r2, [pc, #64]	@ (80077c8 <TIM_Base_SetConfig+0x130>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d103      	bne.n	8007792 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	691a      	ldr	r2, [r3, #16]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f043 0204 	orr.w	r2, r3, #4
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	601a      	str	r2, [r3, #0]
}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	40010000 	.word	0x40010000
 80077bc:	40000400 	.word	0x40000400
 80077c0:	40000800 	.word	0x40000800
 80077c4:	40000c00 	.word	0x40000c00
 80077c8:	40010400 	.word	0x40010400
 80077cc:	40014000 	.word	0x40014000
 80077d0:	40014400 	.word	0x40014400
 80077d4:	40014800 	.word	0x40014800
 80077d8:	40001800 	.word	0x40001800
 80077dc:	40001c00 	.word	0x40001c00
 80077e0:	40002000 	.word	0x40002000

080077e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	f023 0201 	bic.w	r2, r3, #1
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800780e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f023 030a 	bic.w	r3, r3, #10
 8007820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	4313      	orrs	r3, r2
 8007828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	621a      	str	r2, [r3, #32]
}
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007842:	b480      	push	{r7}
 8007844:	b087      	sub	sp, #28
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	f023 0210 	bic.w	r2, r3, #16
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800786c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	031b      	lsls	r3, r3, #12
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800787e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	4313      	orrs	r3, r2
 8007888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	621a      	str	r2, [r3, #32]
}
 8007896:	bf00      	nop
 8007898:	371c      	adds	r7, #28
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b085      	sub	sp, #20
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	f043 0307 	orr.w	r3, r3, #7
 80078c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	609a      	str	r2, [r3, #8]
}
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	021a      	lsls	r2, r3, #8
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4313      	orrs	r3, r2
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	609a      	str	r2, [r3, #8]
}
 800790c:	bf00      	nop
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800792c:	2302      	movs	r3, #2
 800792e:	e05a      	b.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a21      	ldr	r2, [pc, #132]	@ (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d022      	beq.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800797c:	d01d      	beq.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a1d      	ldr	r2, [pc, #116]	@ (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d018      	beq.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a1b      	ldr	r2, [pc, #108]	@ (80079fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d013      	beq.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a1a      	ldr	r2, [pc, #104]	@ (8007a00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d00e      	beq.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a18      	ldr	r2, [pc, #96]	@ (8007a04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d009      	beq.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a17      	ldr	r2, [pc, #92]	@ (8007a08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d004      	beq.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a15      	ldr	r2, [pc, #84]	@ (8007a0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d10c      	bne.n	80079d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	40010000 	.word	0x40010000
 80079f8:	40000400 	.word	0x40000400
 80079fc:	40000800 	.word	0x40000800
 8007a00:	40000c00 	.word	0x40000c00
 8007a04:	40010400 	.word	0x40010400
 8007a08:	40014000 	.word	0x40014000
 8007a0c:	40001800 	.word	0x40001800

08007a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e042      	b.n	8007ad0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d106      	bne.n	8007a64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7fb fad8 	bl	8003014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2224      	movs	r2, #36	@ 0x24
 8007a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68da      	ldr	r2, [r3, #12]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fdd3 	bl	8008628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	691a      	ldr	r2, [r3, #16]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	695a      	ldr	r2, [r3, #20]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007aa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68da      	ldr	r2, [r3, #12]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2220      	movs	r2, #32
 8007abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	@ 0x28
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b20      	cmp	r3, #32
 8007af6:	d175      	bne.n	8007be4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <HAL_UART_Transmit+0x2c>
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e06e      	b.n	8007be6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2221      	movs	r2, #33	@ 0x21
 8007b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b16:	f7fc f981 	bl	8003e1c <HAL_GetTick>
 8007b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	88fa      	ldrh	r2, [r7, #6]
 8007b20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	88fa      	ldrh	r2, [r7, #6]
 8007b26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b30:	d108      	bne.n	8007b44 <HAL_UART_Transmit+0x6c>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d104      	bne.n	8007b44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	61bb      	str	r3, [r7, #24]
 8007b42:	e003      	b.n	8007b4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b4c:	e02e      	b.n	8007bac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2200      	movs	r2, #0
 8007b56:	2180      	movs	r1, #128	@ 0x80
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fb37 	bl	80081cc <UART_WaitOnFlagUntilTimeout>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d005      	beq.n	8007b70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e03a      	b.n	8007be6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10b      	bne.n	8007b8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	3302      	adds	r3, #2
 8007b8a:	61bb      	str	r3, [r7, #24]
 8007b8c:	e007      	b.n	8007b9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	781a      	ldrb	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1cb      	bne.n	8007b4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	2140      	movs	r1, #64	@ 0x40
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 fb03 	bl	80081cc <UART_WaitOnFlagUntilTimeout>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d005      	beq.n	8007bd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e006      	b.n	8007be6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	e000      	b.n	8007be6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007be4:	2302      	movs	r3, #2
  }
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3720      	adds	r7, #32
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	d112      	bne.n	8007c2e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <HAL_UART_Receive_IT+0x26>
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e00b      	b.n	8007c30 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	461a      	mov	r2, r3
 8007c22:	68b9      	ldr	r1, [r7, #8]
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 fb2a 	bl	800827e <UART_Start_Receive_IT>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	e000      	b.n	8007c30 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007c2e:	2302      	movs	r3, #2
  }
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b0ba      	sub	sp, #232	@ 0xe8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10f      	bne.n	8007c9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c82:	f003 0320 	and.w	r3, r3, #32
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <HAL_UART_IRQHandler+0x66>
 8007c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c8e:	f003 0320 	and.w	r3, r3, #32
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fc07 	bl	80084aa <UART_Receive_IT>
      return;
 8007c9c:	e273      	b.n	8008186 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 80de 	beq.w	8007e64 <HAL_UART_IRQHandler+0x22c>
 8007ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d106      	bne.n	8007cc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cb8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 80d1 	beq.w	8007e64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <HAL_UART_IRQHandler+0xae>
 8007cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d005      	beq.n	8007ce6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cde:	f043 0201 	orr.w	r2, r3, #1
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00b      	beq.n	8007d0a <HAL_UART_IRQHandler+0xd2>
 8007cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d005      	beq.n	8007d0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d02:	f043 0202 	orr.w	r2, r3, #2
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00b      	beq.n	8007d2e <HAL_UART_IRQHandler+0xf6>
 8007d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d005      	beq.n	8007d2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d26:	f043 0204 	orr.w	r2, r3, #4
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d32:	f003 0308 	and.w	r3, r3, #8
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d011      	beq.n	8007d5e <HAL_UART_IRQHandler+0x126>
 8007d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d105      	bne.n	8007d52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d56:	f043 0208 	orr.w	r2, r3, #8
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 820a 	beq.w	800817c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d6c:	f003 0320 	and.w	r3, r3, #32
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d008      	beq.n	8007d86 <HAL_UART_IRQHandler+0x14e>
 8007d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d78:	f003 0320 	and.w	r3, r3, #32
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fb92 	bl	80084aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d90:	2b40      	cmp	r3, #64	@ 0x40
 8007d92:	bf0c      	ite	eq
 8007d94:	2301      	moveq	r3, #1
 8007d96:	2300      	movne	r3, #0
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da2:	f003 0308 	and.w	r3, r3, #8
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d103      	bne.n	8007db2 <HAL_UART_IRQHandler+0x17a>
 8007daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d04f      	beq.n	8007e52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa9d 	bl	80082f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc2:	2b40      	cmp	r3, #64	@ 0x40
 8007dc4:	d141      	bne.n	8007e4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3314      	adds	r3, #20
 8007dcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007de4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3314      	adds	r3, #20
 8007dee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007df2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007dfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1d9      	bne.n	8007dc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d013      	beq.n	8007e42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e1e:	4a8a      	ldr	r2, [pc, #552]	@ (8008048 <HAL_UART_IRQHandler+0x410>)
 8007e20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fc fa24 	bl	8004274 <HAL_DMA_Abort_IT>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d016      	beq.n	8007e60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e40:	e00e      	b.n	8007e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f9ac 	bl	80081a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e48:	e00a      	b.n	8007e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f9a8 	bl	80081a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e50:	e006      	b.n	8007e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f9a4 	bl	80081a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007e5e:	e18d      	b.n	800817c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e60:	bf00      	nop
    return;
 8007e62:	e18b      	b.n	800817c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	f040 8167 	bne.w	800813c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e72:	f003 0310 	and.w	r3, r3, #16
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 8160 	beq.w	800813c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e80:	f003 0310 	and.w	r3, r3, #16
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 8159 	beq.w	800813c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60bb      	str	r3, [r7, #8]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	60bb      	str	r3, [r7, #8]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	60bb      	str	r3, [r7, #8]
 8007e9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eaa:	2b40      	cmp	r3, #64	@ 0x40
 8007eac:	f040 80ce 	bne.w	800804c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ebc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80a9 	beq.w	8008018 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	f080 80a2 	bcs.w	8008018 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007eda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ee6:	f000 8088 	beq.w	8007ffa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	330c      	adds	r3, #12
 8007ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	330c      	adds	r3, #12
 8007f12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007f16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1d9      	bne.n	8007eea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3314      	adds	r3, #20
 8007f3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f48:	f023 0301 	bic.w	r3, r3, #1
 8007f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3314      	adds	r3, #20
 8007f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007f6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e1      	bne.n	8007f36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3314      	adds	r3, #20
 8007f78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007f82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3314      	adds	r3, #20
 8007f92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007f96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007fa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e3      	bne.n	8007f72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2220      	movs	r2, #32
 8007fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	330c      	adds	r3, #12
 8007fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fca:	f023 0310 	bic.w	r3, r3, #16
 8007fce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	330c      	adds	r3, #12
 8007fd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007fdc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007fde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007fe2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e3      	bne.n	8007fb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fc f8cd 	bl	8004194 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008008:	b29b      	uxth	r3, r3
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	b29b      	uxth	r3, r3
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f8cf 	bl	80081b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008016:	e0b3      	b.n	8008180 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800801c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008020:	429a      	cmp	r2, r3
 8008022:	f040 80ad 	bne.w	8008180 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800802a:	69db      	ldr	r3, [r3, #28]
 800802c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008030:	f040 80a6 	bne.w	8008180 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f8b7 	bl	80081b4 <HAL_UARTEx_RxEventCallback>
      return;
 8008046:	e09b      	b.n	8008180 <HAL_UART_IRQHandler+0x548>
 8008048:	080083b9 	.word	0x080083b9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008054:	b29b      	uxth	r3, r3
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008060:	b29b      	uxth	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 808e 	beq.w	8008184 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8089 	beq.w	8008184 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	330c      	adds	r3, #12
 8008078:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008088:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	330c      	adds	r3, #12
 8008092:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008096:	647a      	str	r2, [r7, #68]	@ 0x44
 8008098:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800809c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e3      	bne.n	8008072 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3314      	adds	r3, #20
 80080b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	e853 3f00 	ldrex	r3, [r3]
 80080b8:	623b      	str	r3, [r7, #32]
   return(result);
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	f023 0301 	bic.w	r3, r3, #1
 80080c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3314      	adds	r3, #20
 80080ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80080ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80080d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080d6:	e841 2300 	strex	r3, r2, [r1]
 80080da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1e3      	bne.n	80080aa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	330c      	adds	r3, #12
 80080f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 0310 	bic.w	r3, r3, #16
 8008106:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	330c      	adds	r3, #12
 8008110:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008114:	61fa      	str	r2, [r7, #28]
 8008116:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	69b9      	ldr	r1, [r7, #24]
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	617b      	str	r3, [r7, #20]
   return(result);
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e3      	bne.n	80080f0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800812e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f83d 	bl	80081b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800813a:	e023      	b.n	8008184 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800813c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008144:	2b00      	cmp	r3, #0
 8008146:	d009      	beq.n	800815c <HAL_UART_IRQHandler+0x524>
 8008148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800814c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f940 	bl	80083da <UART_Transmit_IT>
    return;
 800815a:	e014      	b.n	8008186 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800815c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00e      	beq.n	8008186 <HAL_UART_IRQHandler+0x54e>
 8008168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800816c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	d008      	beq.n	8008186 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f980 	bl	800847a <UART_EndTransmit_IT>
    return;
 800817a:	e004      	b.n	8008186 <HAL_UART_IRQHandler+0x54e>
    return;
 800817c:	bf00      	nop
 800817e:	e002      	b.n	8008186 <HAL_UART_IRQHandler+0x54e>
      return;
 8008180:	bf00      	nop
 8008182:	e000      	b.n	8008186 <HAL_UART_IRQHandler+0x54e>
      return;
 8008184:	bf00      	nop
  }
}
 8008186:	37e8      	adds	r7, #232	@ 0xe8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	4613      	mov	r3, r2
 80081da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081dc:	e03b      	b.n	8008256 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e4:	d037      	beq.n	8008256 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081e6:	f7fb fe19 	bl	8003e1c <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	6a3a      	ldr	r2, [r7, #32]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d302      	bcc.n	80081fc <UART_WaitOnFlagUntilTimeout+0x30>
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e03a      	b.n	8008276 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d023      	beq.n	8008256 <UART_WaitOnFlagUntilTimeout+0x8a>
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b80      	cmp	r3, #128	@ 0x80
 8008212:	d020      	beq.n	8008256 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2b40      	cmp	r3, #64	@ 0x40
 8008218:	d01d      	beq.n	8008256 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0308 	and.w	r3, r3, #8
 8008224:	2b08      	cmp	r3, #8
 8008226:	d116      	bne.n	8008256 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008228:	2300      	movs	r3, #0
 800822a:	617b      	str	r3, [r7, #20]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 f857 	bl	80082f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2208      	movs	r2, #8
 8008248:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e00f      	b.n	8008276 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	4013      	ands	r3, r2
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	429a      	cmp	r2, r3
 8008264:	bf0c      	ite	eq
 8008266:	2301      	moveq	r3, #1
 8008268:	2300      	movne	r3, #0
 800826a:	b2db      	uxtb	r3, r3
 800826c:	461a      	mov	r2, r3
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	429a      	cmp	r2, r3
 8008272:	d0b4      	beq.n	80081de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800827e:	b480      	push	{r7}
 8008280:	b085      	sub	sp, #20
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	4613      	mov	r3, r2
 800828a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	88fa      	ldrh	r2, [r7, #6]
 8008296:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	88fa      	ldrh	r2, [r7, #6]
 800829c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2222      	movs	r2, #34	@ 0x22
 80082a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d007      	beq.n	80082c4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082c2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	695a      	ldr	r2, [r3, #20]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 0201 	orr.w	r2, r2, #1
 80082d2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0220 	orr.w	r2, r2, #32
 80082e2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b095      	sub	sp, #84	@ 0x54
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	330c      	adds	r3, #12
 8008300:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008304:	e853 3f00 	ldrex	r3, [r3]
 8008308:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008310:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	330c      	adds	r3, #12
 8008318:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800831a:	643a      	str	r2, [r7, #64]	@ 0x40
 800831c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008320:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008322:	e841 2300 	strex	r3, r2, [r1]
 8008326:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1e5      	bne.n	80082fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	3314      	adds	r3, #20
 8008334:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	e853 3f00 	ldrex	r3, [r3]
 800833c:	61fb      	str	r3, [r7, #28]
   return(result);
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	f023 0301 	bic.w	r3, r3, #1
 8008344:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3314      	adds	r3, #20
 800834c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800834e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008350:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800835c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1e5      	bne.n	800832e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008366:	2b01      	cmp	r3, #1
 8008368:	d119      	bne.n	800839e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	330c      	adds	r3, #12
 8008370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	60bb      	str	r3, [r7, #8]
   return(result);
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f023 0310 	bic.w	r3, r3, #16
 8008380:	647b      	str	r3, [r7, #68]	@ 0x44
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	330c      	adds	r3, #12
 8008388:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800838a:	61ba      	str	r2, [r7, #24]
 800838c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	6979      	ldr	r1, [r7, #20]
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	613b      	str	r3, [r7, #16]
   return(result);
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e5      	bne.n	800836a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2220      	movs	r2, #32
 80083a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80083ac:	bf00      	nop
 80083ae:	3754      	adds	r7, #84	@ 0x54
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f7ff fee7 	bl	80081a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083d2:	bf00      	nop
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083da:	b480      	push	{r7}
 80083dc:	b085      	sub	sp, #20
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b21      	cmp	r3, #33	@ 0x21
 80083ec:	d13e      	bne.n	800846c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083f6:	d114      	bne.n	8008422 <UART_Transmit_IT+0x48>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d110      	bne.n	8008422 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008414:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	1c9a      	adds	r2, r3, #2
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	621a      	str	r2, [r3, #32]
 8008420:	e008      	b.n	8008434 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	1c59      	adds	r1, r3, #1
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	6211      	str	r1, [r2, #32]
 800842c:	781a      	ldrb	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008438:	b29b      	uxth	r3, r3
 800843a:	3b01      	subs	r3, #1
 800843c:	b29b      	uxth	r3, r3
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	4619      	mov	r1, r3
 8008442:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10f      	bne.n	8008468 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008456:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008466:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	e000      	b.n	800846e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800846c:	2302      	movs	r3, #2
  }
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008490:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2220      	movs	r2, #32
 8008496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff fe76 	bl	800818c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b08c      	sub	sp, #48	@ 0x30
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b22      	cmp	r3, #34	@ 0x22
 80084c4:	f040 80aa 	bne.w	800861c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084d0:	d115      	bne.n	80084fe <UART_Receive_IT+0x54>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d111      	bne.n	80084fe <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084de:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f6:	1c9a      	adds	r2, r3, #2
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80084fc:	e024      	b.n	8008548 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008502:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800850c:	d007      	beq.n	800851e <UART_Receive_IT+0x74>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <UART_Receive_IT+0x82>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d106      	bne.n	800852c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	b2da      	uxtb	r2, r3
 8008526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008528:	701a      	strb	r2, [r3, #0]
 800852a:	e008      	b.n	800853e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008538:	b2da      	uxtb	r2, r3
 800853a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008542:	1c5a      	adds	r2, r3, #1
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800854c:	b29b      	uxth	r3, r3
 800854e:	3b01      	subs	r3, #1
 8008550:	b29b      	uxth	r3, r3
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	4619      	mov	r1, r3
 8008556:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008558:	2b00      	cmp	r3, #0
 800855a:	d15d      	bne.n	8008618 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68da      	ldr	r2, [r3, #12]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 0220 	bic.w	r2, r2, #32
 800856a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800857a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	695a      	ldr	r2, [r3, #20]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0201 	bic.w	r2, r2, #1
 800858a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2220      	movs	r2, #32
 8008590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d135      	bne.n	800860e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	330c      	adds	r3, #12
 80085ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	613b      	str	r3, [r7, #16]
   return(result);
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f023 0310 	bic.w	r3, r3, #16
 80085be:	627b      	str	r3, [r7, #36]	@ 0x24
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	330c      	adds	r3, #12
 80085c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085c8:	623a      	str	r2, [r7, #32]
 80085ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	69f9      	ldr	r1, [r7, #28]
 80085ce:	6a3a      	ldr	r2, [r7, #32]
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e5      	bne.n	80085a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0310 	and.w	r3, r3, #16
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	d10a      	bne.n	8008600 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085ea:	2300      	movs	r3, #0
 80085ec:	60fb      	str	r3, [r7, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7ff fdd4 	bl	80081b4 <HAL_UARTEx_RxEventCallback>
 800860c:	e002      	b.n	8008614 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7f9 fc32 	bl	8001e78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	e002      	b.n	800861e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	e000      	b.n	800861e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800861c:	2302      	movs	r3, #2
  }
}
 800861e:	4618      	mov	r0, r3
 8008620:	3730      	adds	r7, #48	@ 0x30
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
	...

08008628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800862c:	b0c0      	sub	sp, #256	@ 0x100
 800862e:	af00      	add	r7, sp, #0
 8008630:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008644:	68d9      	ldr	r1, [r3, #12]
 8008646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	ea40 0301 	orr.w	r3, r0, r1
 8008650:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	431a      	orrs	r2, r3
 8008660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	431a      	orrs	r2, r3
 8008668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	4313      	orrs	r3, r2
 8008670:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008680:	f021 010c 	bic.w	r1, r1, #12
 8008684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800868e:	430b      	orrs	r3, r1
 8008690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800869e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a2:	6999      	ldr	r1, [r3, #24]
 80086a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	ea40 0301 	orr.w	r3, r0, r1
 80086ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	4b8f      	ldr	r3, [pc, #572]	@ (80088f4 <UART_SetConfig+0x2cc>)
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d005      	beq.n	80086c8 <UART_SetConfig+0xa0>
 80086bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4b8d      	ldr	r3, [pc, #564]	@ (80088f8 <UART_SetConfig+0x2d0>)
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d104      	bne.n	80086d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086c8:	f7fe f896 	bl	80067f8 <HAL_RCC_GetPCLK2Freq>
 80086cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80086d0:	e003      	b.n	80086da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086d2:	f7fe f87d 	bl	80067d0 <HAL_RCC_GetPCLK1Freq>
 80086d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086de:	69db      	ldr	r3, [r3, #28]
 80086e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086e4:	f040 810c 	bne.w	8008900 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086ec:	2200      	movs	r2, #0
 80086ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80086f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80086f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80086fa:	4622      	mov	r2, r4
 80086fc:	462b      	mov	r3, r5
 80086fe:	1891      	adds	r1, r2, r2
 8008700:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008702:	415b      	adcs	r3, r3
 8008704:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008706:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800870a:	4621      	mov	r1, r4
 800870c:	eb12 0801 	adds.w	r8, r2, r1
 8008710:	4629      	mov	r1, r5
 8008712:	eb43 0901 	adc.w	r9, r3, r1
 8008716:	f04f 0200 	mov.w	r2, #0
 800871a:	f04f 0300 	mov.w	r3, #0
 800871e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800872a:	4690      	mov	r8, r2
 800872c:	4699      	mov	r9, r3
 800872e:	4623      	mov	r3, r4
 8008730:	eb18 0303 	adds.w	r3, r8, r3
 8008734:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008738:	462b      	mov	r3, r5
 800873a:	eb49 0303 	adc.w	r3, r9, r3
 800873e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800874e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008752:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008756:	460b      	mov	r3, r1
 8008758:	18db      	adds	r3, r3, r3
 800875a:	653b      	str	r3, [r7, #80]	@ 0x50
 800875c:	4613      	mov	r3, r2
 800875e:	eb42 0303 	adc.w	r3, r2, r3
 8008762:	657b      	str	r3, [r7, #84]	@ 0x54
 8008764:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008768:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800876c:	f7f8 fa9c 	bl	8000ca8 <__aeabi_uldivmod>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4b61      	ldr	r3, [pc, #388]	@ (80088fc <UART_SetConfig+0x2d4>)
 8008776:	fba3 2302 	umull	r2, r3, r3, r2
 800877a:	095b      	lsrs	r3, r3, #5
 800877c:	011c      	lsls	r4, r3, #4
 800877e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008782:	2200      	movs	r2, #0
 8008784:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008788:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800878c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008790:	4642      	mov	r2, r8
 8008792:	464b      	mov	r3, r9
 8008794:	1891      	adds	r1, r2, r2
 8008796:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008798:	415b      	adcs	r3, r3
 800879a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800879c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80087a0:	4641      	mov	r1, r8
 80087a2:	eb12 0a01 	adds.w	sl, r2, r1
 80087a6:	4649      	mov	r1, r9
 80087a8:	eb43 0b01 	adc.w	fp, r3, r1
 80087ac:	f04f 0200 	mov.w	r2, #0
 80087b0:	f04f 0300 	mov.w	r3, #0
 80087b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80087b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80087bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087c0:	4692      	mov	sl, r2
 80087c2:	469b      	mov	fp, r3
 80087c4:	4643      	mov	r3, r8
 80087c6:	eb1a 0303 	adds.w	r3, sl, r3
 80087ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087ce:	464b      	mov	r3, r9
 80087d0:	eb4b 0303 	adc.w	r3, fp, r3
 80087d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80087d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80087e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80087ec:	460b      	mov	r3, r1
 80087ee:	18db      	adds	r3, r3, r3
 80087f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80087f2:	4613      	mov	r3, r2
 80087f4:	eb42 0303 	adc.w	r3, r2, r3
 80087f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80087fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80087fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008802:	f7f8 fa51 	bl	8000ca8 <__aeabi_uldivmod>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4611      	mov	r1, r2
 800880c:	4b3b      	ldr	r3, [pc, #236]	@ (80088fc <UART_SetConfig+0x2d4>)
 800880e:	fba3 2301 	umull	r2, r3, r3, r1
 8008812:	095b      	lsrs	r3, r3, #5
 8008814:	2264      	movs	r2, #100	@ 0x64
 8008816:	fb02 f303 	mul.w	r3, r2, r3
 800881a:	1acb      	subs	r3, r1, r3
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008822:	4b36      	ldr	r3, [pc, #216]	@ (80088fc <UART_SetConfig+0x2d4>)
 8008824:	fba3 2302 	umull	r2, r3, r3, r2
 8008828:	095b      	lsrs	r3, r3, #5
 800882a:	005b      	lsls	r3, r3, #1
 800882c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008830:	441c      	add	r4, r3
 8008832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008836:	2200      	movs	r2, #0
 8008838:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800883c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008840:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008844:	4642      	mov	r2, r8
 8008846:	464b      	mov	r3, r9
 8008848:	1891      	adds	r1, r2, r2
 800884a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800884c:	415b      	adcs	r3, r3
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008850:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008854:	4641      	mov	r1, r8
 8008856:	1851      	adds	r1, r2, r1
 8008858:	6339      	str	r1, [r7, #48]	@ 0x30
 800885a:	4649      	mov	r1, r9
 800885c:	414b      	adcs	r3, r1
 800885e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008860:	f04f 0200 	mov.w	r2, #0
 8008864:	f04f 0300 	mov.w	r3, #0
 8008868:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800886c:	4659      	mov	r1, fp
 800886e:	00cb      	lsls	r3, r1, #3
 8008870:	4651      	mov	r1, sl
 8008872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008876:	4651      	mov	r1, sl
 8008878:	00ca      	lsls	r2, r1, #3
 800887a:	4610      	mov	r0, r2
 800887c:	4619      	mov	r1, r3
 800887e:	4603      	mov	r3, r0
 8008880:	4642      	mov	r2, r8
 8008882:	189b      	adds	r3, r3, r2
 8008884:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008888:	464b      	mov	r3, r9
 800888a:	460a      	mov	r2, r1
 800888c:	eb42 0303 	adc.w	r3, r2, r3
 8008890:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80088a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80088a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80088a8:	460b      	mov	r3, r1
 80088aa:	18db      	adds	r3, r3, r3
 80088ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088ae:	4613      	mov	r3, r2
 80088b0:	eb42 0303 	adc.w	r3, r2, r3
 80088b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80088ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80088be:	f7f8 f9f3 	bl	8000ca8 <__aeabi_uldivmod>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	4b0d      	ldr	r3, [pc, #52]	@ (80088fc <UART_SetConfig+0x2d4>)
 80088c8:	fba3 1302 	umull	r1, r3, r3, r2
 80088cc:	095b      	lsrs	r3, r3, #5
 80088ce:	2164      	movs	r1, #100	@ 0x64
 80088d0:	fb01 f303 	mul.w	r3, r1, r3
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	3332      	adds	r3, #50	@ 0x32
 80088da:	4a08      	ldr	r2, [pc, #32]	@ (80088fc <UART_SetConfig+0x2d4>)
 80088dc:	fba2 2303 	umull	r2, r3, r2, r3
 80088e0:	095b      	lsrs	r3, r3, #5
 80088e2:	f003 0207 	and.w	r2, r3, #7
 80088e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4422      	add	r2, r4
 80088ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80088f0:	e106      	b.n	8008b00 <UART_SetConfig+0x4d8>
 80088f2:	bf00      	nop
 80088f4:	40011000 	.word	0x40011000
 80088f8:	40011400 	.word	0x40011400
 80088fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008904:	2200      	movs	r2, #0
 8008906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800890a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800890e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008912:	4642      	mov	r2, r8
 8008914:	464b      	mov	r3, r9
 8008916:	1891      	adds	r1, r2, r2
 8008918:	6239      	str	r1, [r7, #32]
 800891a:	415b      	adcs	r3, r3
 800891c:	627b      	str	r3, [r7, #36]	@ 0x24
 800891e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008922:	4641      	mov	r1, r8
 8008924:	1854      	adds	r4, r2, r1
 8008926:	4649      	mov	r1, r9
 8008928:	eb43 0501 	adc.w	r5, r3, r1
 800892c:	f04f 0200 	mov.w	r2, #0
 8008930:	f04f 0300 	mov.w	r3, #0
 8008934:	00eb      	lsls	r3, r5, #3
 8008936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800893a:	00e2      	lsls	r2, r4, #3
 800893c:	4614      	mov	r4, r2
 800893e:	461d      	mov	r5, r3
 8008940:	4643      	mov	r3, r8
 8008942:	18e3      	adds	r3, r4, r3
 8008944:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008948:	464b      	mov	r3, r9
 800894a:	eb45 0303 	adc.w	r3, r5, r3
 800894e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800895e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008962:	f04f 0200 	mov.w	r2, #0
 8008966:	f04f 0300 	mov.w	r3, #0
 800896a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800896e:	4629      	mov	r1, r5
 8008970:	008b      	lsls	r3, r1, #2
 8008972:	4621      	mov	r1, r4
 8008974:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008978:	4621      	mov	r1, r4
 800897a:	008a      	lsls	r2, r1, #2
 800897c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008980:	f7f8 f992 	bl	8000ca8 <__aeabi_uldivmod>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4b60      	ldr	r3, [pc, #384]	@ (8008b0c <UART_SetConfig+0x4e4>)
 800898a:	fba3 2302 	umull	r2, r3, r3, r2
 800898e:	095b      	lsrs	r3, r3, #5
 8008990:	011c      	lsls	r4, r3, #4
 8008992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008996:	2200      	movs	r2, #0
 8008998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800899c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80089a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80089a4:	4642      	mov	r2, r8
 80089a6:	464b      	mov	r3, r9
 80089a8:	1891      	adds	r1, r2, r2
 80089aa:	61b9      	str	r1, [r7, #24]
 80089ac:	415b      	adcs	r3, r3
 80089ae:	61fb      	str	r3, [r7, #28]
 80089b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089b4:	4641      	mov	r1, r8
 80089b6:	1851      	adds	r1, r2, r1
 80089b8:	6139      	str	r1, [r7, #16]
 80089ba:	4649      	mov	r1, r9
 80089bc:	414b      	adcs	r3, r1
 80089be:	617b      	str	r3, [r7, #20]
 80089c0:	f04f 0200 	mov.w	r2, #0
 80089c4:	f04f 0300 	mov.w	r3, #0
 80089c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089cc:	4659      	mov	r1, fp
 80089ce:	00cb      	lsls	r3, r1, #3
 80089d0:	4651      	mov	r1, sl
 80089d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089d6:	4651      	mov	r1, sl
 80089d8:	00ca      	lsls	r2, r1, #3
 80089da:	4610      	mov	r0, r2
 80089dc:	4619      	mov	r1, r3
 80089de:	4603      	mov	r3, r0
 80089e0:	4642      	mov	r2, r8
 80089e2:	189b      	adds	r3, r3, r2
 80089e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089e8:	464b      	mov	r3, r9
 80089ea:	460a      	mov	r2, r1
 80089ec:	eb42 0303 	adc.w	r3, r2, r3
 80089f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008a00:	f04f 0200 	mov.w	r2, #0
 8008a04:	f04f 0300 	mov.w	r3, #0
 8008a08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008a0c:	4649      	mov	r1, r9
 8008a0e:	008b      	lsls	r3, r1, #2
 8008a10:	4641      	mov	r1, r8
 8008a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a16:	4641      	mov	r1, r8
 8008a18:	008a      	lsls	r2, r1, #2
 8008a1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008a1e:	f7f8 f943 	bl	8000ca8 <__aeabi_uldivmod>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4611      	mov	r1, r2
 8008a28:	4b38      	ldr	r3, [pc, #224]	@ (8008b0c <UART_SetConfig+0x4e4>)
 8008a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a2e:	095b      	lsrs	r3, r3, #5
 8008a30:	2264      	movs	r2, #100	@ 0x64
 8008a32:	fb02 f303 	mul.w	r3, r2, r3
 8008a36:	1acb      	subs	r3, r1, r3
 8008a38:	011b      	lsls	r3, r3, #4
 8008a3a:	3332      	adds	r3, #50	@ 0x32
 8008a3c:	4a33      	ldr	r2, [pc, #204]	@ (8008b0c <UART_SetConfig+0x4e4>)
 8008a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a42:	095b      	lsrs	r3, r3, #5
 8008a44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008a48:	441c      	add	r4, r3
 8008a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a4e:	2200      	movs	r2, #0
 8008a50:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a52:	677a      	str	r2, [r7, #116]	@ 0x74
 8008a54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008a58:	4642      	mov	r2, r8
 8008a5a:	464b      	mov	r3, r9
 8008a5c:	1891      	adds	r1, r2, r2
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	415b      	adcs	r3, r3
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a68:	4641      	mov	r1, r8
 8008a6a:	1851      	adds	r1, r2, r1
 8008a6c:	6039      	str	r1, [r7, #0]
 8008a6e:	4649      	mov	r1, r9
 8008a70:	414b      	adcs	r3, r1
 8008a72:	607b      	str	r3, [r7, #4]
 8008a74:	f04f 0200 	mov.w	r2, #0
 8008a78:	f04f 0300 	mov.w	r3, #0
 8008a7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a80:	4659      	mov	r1, fp
 8008a82:	00cb      	lsls	r3, r1, #3
 8008a84:	4651      	mov	r1, sl
 8008a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a8a:	4651      	mov	r1, sl
 8008a8c:	00ca      	lsls	r2, r1, #3
 8008a8e:	4610      	mov	r0, r2
 8008a90:	4619      	mov	r1, r3
 8008a92:	4603      	mov	r3, r0
 8008a94:	4642      	mov	r2, r8
 8008a96:	189b      	adds	r3, r3, r2
 8008a98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a9a:	464b      	mov	r3, r9
 8008a9c:	460a      	mov	r2, r1
 8008a9e:	eb42 0303 	adc.w	r3, r2, r3
 8008aa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	663b      	str	r3, [r7, #96]	@ 0x60
 8008aae:	667a      	str	r2, [r7, #100]	@ 0x64
 8008ab0:	f04f 0200 	mov.w	r2, #0
 8008ab4:	f04f 0300 	mov.w	r3, #0
 8008ab8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008abc:	4649      	mov	r1, r9
 8008abe:	008b      	lsls	r3, r1, #2
 8008ac0:	4641      	mov	r1, r8
 8008ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ac6:	4641      	mov	r1, r8
 8008ac8:	008a      	lsls	r2, r1, #2
 8008aca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008ace:	f7f8 f8eb 	bl	8000ca8 <__aeabi_uldivmod>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b0c <UART_SetConfig+0x4e4>)
 8008ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8008adc:	095b      	lsrs	r3, r3, #5
 8008ade:	2164      	movs	r1, #100	@ 0x64
 8008ae0:	fb01 f303 	mul.w	r3, r1, r3
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	011b      	lsls	r3, r3, #4
 8008ae8:	3332      	adds	r3, #50	@ 0x32
 8008aea:	4a08      	ldr	r2, [pc, #32]	@ (8008b0c <UART_SetConfig+0x4e4>)
 8008aec:	fba2 2303 	umull	r2, r3, r2, r3
 8008af0:	095b      	lsrs	r3, r3, #5
 8008af2:	f003 020f 	and.w	r2, r3, #15
 8008af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4422      	add	r2, r4
 8008afe:	609a      	str	r2, [r3, #8]
}
 8008b00:	bf00      	nop
 8008b02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008b06:	46bd      	mov	sp, r7
 8008b08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b0c:	51eb851f 	.word	0x51eb851f

08008b10 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	6812      	ldr	r2, [r2, #0]
 8008b28:	f023 0101 	bic.w	r1, r3, #1
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b08      	cmp	r3, #8
 8008b38:	d102      	bne.n	8008b40 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008b3a:	2340      	movs	r3, #64	@ 0x40
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	e001      	b.n	8008b44 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008b50:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008b56:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008b5c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008b62:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008b68:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008b6e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8008b74:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8008b7a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8008b80:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8008b86:	4313      	orrs	r3, r2
 8008b88:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8008b9e:	4b10      	ldr	r3, [pc, #64]	@ (8008be0 <FSMC_NORSRAM_Init+0xd0>)
 8008ba0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008ba8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8008bb0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	43db      	mvns	r3, r3
 8008bc0:	ea02 0103 	and.w	r1, r2, r3
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	4319      	orrs	r1, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	371c      	adds	r7, #28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	0008fb7f 	.word	0x0008fb7f

08008be4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8008bfa:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8008c02:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008c0a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008c14:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	3b02      	subs	r3, #2
 8008c1c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008c1e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008c2a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c54:	d11d      	bne.n	8008c92 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c5e:	4b13      	ldr	r3, [pc, #76]	@ (8008cac <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008c60:	4013      	ands	r3, r2
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	6811      	ldr	r1, [r2, #0]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	6852      	ldr	r2, [r2, #4]
 8008c6a:	0112      	lsls	r2, r2, #4
 8008c6c:	4311      	orrs	r1, r2
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	6892      	ldr	r2, [r2, #8]
 8008c72:	0212      	lsls	r2, r2, #8
 8008c74:	4311      	orrs	r1, r2
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	6992      	ldr	r2, [r2, #24]
 8008c7a:	4311      	orrs	r1, r2
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	68d2      	ldr	r2, [r2, #12]
 8008c80:	0412      	lsls	r2, r2, #16
 8008c82:	430a      	orrs	r2, r1
 8008c84:	ea43 0102 	orr.w	r1, r3, r2
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008c90:	e005      	b.n	8008c9e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	cff00000 	.word	0xcff00000

08008cb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	f107 001c 	add.w	r0, r7, #28
 8008cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cc2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d123      	bne.n	8008d12 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008cf2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d105      	bne.n	8008d06 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 fae8 	bl	800a2dc <USB_CoreReset>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]
 8008d10:	e01b      	b.n	8008d4a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 fadc 	bl	800a2dc <USB_CoreReset>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d28:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d106      	bne.n	8008d3e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d34:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d3c:	e005      	b.n	8008d4a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d42:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d4a:	7fbb      	ldrb	r3, [r7, #30]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d10b      	bne.n	8008d68 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f043 0206 	orr.w	r2, r3, #6
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f043 0220 	orr.w	r2, r3, #32
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d74:	b004      	add	sp, #16
 8008d76:	4770      	bx	lr

08008d78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	4613      	mov	r3, r2
 8008d84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008d86:	79fb      	ldrb	r3, [r7, #7]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d165      	bne.n	8008e58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	4a41      	ldr	r2, [pc, #260]	@ (8008e94 <USB_SetTurnaroundTime+0x11c>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d906      	bls.n	8008da2 <USB_SetTurnaroundTime+0x2a>
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	4a40      	ldr	r2, [pc, #256]	@ (8008e98 <USB_SetTurnaroundTime+0x120>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d202      	bcs.n	8008da2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008d9c:	230f      	movs	r3, #15
 8008d9e:	617b      	str	r3, [r7, #20]
 8008da0:	e062      	b.n	8008e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	4a3c      	ldr	r2, [pc, #240]	@ (8008e98 <USB_SetTurnaroundTime+0x120>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d306      	bcc.n	8008db8 <USB_SetTurnaroundTime+0x40>
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	4a3b      	ldr	r2, [pc, #236]	@ (8008e9c <USB_SetTurnaroundTime+0x124>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d202      	bcs.n	8008db8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008db2:	230e      	movs	r3, #14
 8008db4:	617b      	str	r3, [r7, #20]
 8008db6:	e057      	b.n	8008e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	4a38      	ldr	r2, [pc, #224]	@ (8008e9c <USB_SetTurnaroundTime+0x124>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d306      	bcc.n	8008dce <USB_SetTurnaroundTime+0x56>
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	4a37      	ldr	r2, [pc, #220]	@ (8008ea0 <USB_SetTurnaroundTime+0x128>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d202      	bcs.n	8008dce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008dc8:	230d      	movs	r3, #13
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	e04c      	b.n	8008e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	4a33      	ldr	r2, [pc, #204]	@ (8008ea0 <USB_SetTurnaroundTime+0x128>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d306      	bcc.n	8008de4 <USB_SetTurnaroundTime+0x6c>
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	4a32      	ldr	r2, [pc, #200]	@ (8008ea4 <USB_SetTurnaroundTime+0x12c>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d802      	bhi.n	8008de4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008dde:	230c      	movs	r3, #12
 8008de0:	617b      	str	r3, [r7, #20]
 8008de2:	e041      	b.n	8008e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	4a2f      	ldr	r2, [pc, #188]	@ (8008ea4 <USB_SetTurnaroundTime+0x12c>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d906      	bls.n	8008dfa <USB_SetTurnaroundTime+0x82>
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	4a2e      	ldr	r2, [pc, #184]	@ (8008ea8 <USB_SetTurnaroundTime+0x130>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d802      	bhi.n	8008dfa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008df4:	230b      	movs	r3, #11
 8008df6:	617b      	str	r3, [r7, #20]
 8008df8:	e036      	b.n	8008e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8008ea8 <USB_SetTurnaroundTime+0x130>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d906      	bls.n	8008e10 <USB_SetTurnaroundTime+0x98>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	4a29      	ldr	r2, [pc, #164]	@ (8008eac <USB_SetTurnaroundTime+0x134>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d802      	bhi.n	8008e10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008e0a:	230a      	movs	r3, #10
 8008e0c:	617b      	str	r3, [r7, #20]
 8008e0e:	e02b      	b.n	8008e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	4a26      	ldr	r2, [pc, #152]	@ (8008eac <USB_SetTurnaroundTime+0x134>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d906      	bls.n	8008e26 <USB_SetTurnaroundTime+0xae>
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	4a25      	ldr	r2, [pc, #148]	@ (8008eb0 <USB_SetTurnaroundTime+0x138>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d202      	bcs.n	8008e26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008e20:	2309      	movs	r3, #9
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	e020      	b.n	8008e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	4a21      	ldr	r2, [pc, #132]	@ (8008eb0 <USB_SetTurnaroundTime+0x138>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d306      	bcc.n	8008e3c <USB_SetTurnaroundTime+0xc4>
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	4a20      	ldr	r2, [pc, #128]	@ (8008eb4 <USB_SetTurnaroundTime+0x13c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d802      	bhi.n	8008e3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008e36:	2308      	movs	r3, #8
 8008e38:	617b      	str	r3, [r7, #20]
 8008e3a:	e015      	b.n	8008e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8008eb4 <USB_SetTurnaroundTime+0x13c>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d906      	bls.n	8008e52 <USB_SetTurnaroundTime+0xda>
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	4a1c      	ldr	r2, [pc, #112]	@ (8008eb8 <USB_SetTurnaroundTime+0x140>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d202      	bcs.n	8008e52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008e4c:	2307      	movs	r3, #7
 8008e4e:	617b      	str	r3, [r7, #20]
 8008e50:	e00a      	b.n	8008e68 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008e52:	2306      	movs	r3, #6
 8008e54:	617b      	str	r3, [r7, #20]
 8008e56:	e007      	b.n	8008e68 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008e58:	79fb      	ldrb	r3, [r7, #7]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d102      	bne.n	8008e64 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008e5e:	2309      	movs	r3, #9
 8008e60:	617b      	str	r3, [r7, #20]
 8008e62:	e001      	b.n	8008e68 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008e64:	2309      	movs	r3, #9
 8008e66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	68da      	ldr	r2, [r3, #12]
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	029b      	lsls	r3, r3, #10
 8008e7c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008e80:	431a      	orrs	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	00d8acbf 	.word	0x00d8acbf
 8008e98:	00e4e1c0 	.word	0x00e4e1c0
 8008e9c:	00f42400 	.word	0x00f42400
 8008ea0:	01067380 	.word	0x01067380
 8008ea4:	011a499f 	.word	0x011a499f
 8008ea8:	01312cff 	.word	0x01312cff
 8008eac:	014ca43f 	.word	0x014ca43f
 8008eb0:	016e3600 	.word	0x016e3600
 8008eb4:	01a6ab1f 	.word	0x01a6ab1f
 8008eb8:	01e84800 	.word	0x01e84800

08008ebc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f043 0201 	orr.w	r2, r3, #1
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b083      	sub	sp, #12
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f023 0201 	bic.w	r2, r3, #1
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d115      	bne.n	8008f4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f2e:	200a      	movs	r0, #10
 8008f30:	f7fa ff80 	bl	8003e34 <HAL_Delay>
      ms += 10U;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	330a      	adds	r3, #10
 8008f38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 f93f 	bl	800a1be <USB_GetMode>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d01e      	beq.n	8008f84 <USB_SetCurrentMode+0x84>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f4a:	d9f0      	bls.n	8008f2e <USB_SetCurrentMode+0x2e>
 8008f4c:	e01a      	b.n	8008f84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f4e:	78fb      	ldrb	r3, [r7, #3]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d115      	bne.n	8008f80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f60:	200a      	movs	r0, #10
 8008f62:	f7fa ff67 	bl	8003e34 <HAL_Delay>
      ms += 10U;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	330a      	adds	r3, #10
 8008f6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 f926 	bl	800a1be <USB_GetMode>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d005      	beq.n	8008f84 <USB_SetCurrentMode+0x84>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f7c:	d9f0      	bls.n	8008f60 <USB_SetCurrentMode+0x60>
 8008f7e:	e001      	b.n	8008f84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e005      	b.n	8008f90 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2bc8      	cmp	r3, #200	@ 0xc8
 8008f88:	d101      	bne.n	8008f8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e000      	b.n	8008f90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f98:	b084      	sub	sp, #16
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b086      	sub	sp, #24
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	613b      	str	r3, [r7, #16]
 8008fb6:	e009      	b.n	8008fcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	3340      	adds	r3, #64	@ 0x40
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	613b      	str	r3, [r7, #16]
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	2b0e      	cmp	r3, #14
 8008fd0:	d9f2      	bls.n	8008fb8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008fd2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d11c      	bne.n	8009014 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fe8:	f043 0302 	orr.w	r3, r3, #2
 8008fec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800900a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	639a      	str	r2, [r3, #56]	@ 0x38
 8009012:	e00b      	b.n	800902c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009018:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009024:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009032:	461a      	mov	r2, r3
 8009034:	2300      	movs	r3, #0
 8009036:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009038:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800903c:	2b01      	cmp	r3, #1
 800903e:	d10d      	bne.n	800905c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009044:	2b00      	cmp	r3, #0
 8009046:	d104      	bne.n	8009052 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009048:	2100      	movs	r1, #0
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f968 	bl	8009320 <USB_SetDevSpeed>
 8009050:	e008      	b.n	8009064 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009052:	2101      	movs	r1, #1
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f963 	bl	8009320 <USB_SetDevSpeed>
 800905a:	e003      	b.n	8009064 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800905c:	2103      	movs	r1, #3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f95e 	bl	8009320 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009064:	2110      	movs	r1, #16
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f8fa 	bl	8009260 <USB_FlushTxFifo>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f924 	bl	80092c4 <USB_FlushRxFifo>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800908c:	461a      	mov	r2, r3
 800908e:	2300      	movs	r3, #0
 8009090:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009098:	461a      	mov	r2, r3
 800909a:	2300      	movs	r3, #0
 800909c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090a4:	461a      	mov	r2, r3
 80090a6:	2300      	movs	r3, #0
 80090a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090aa:	2300      	movs	r3, #0
 80090ac:	613b      	str	r3, [r7, #16]
 80090ae:	e043      	b.n	8009138 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090c6:	d118      	bne.n	80090fa <USB_DevInit+0x162>
    {
      if (i == 0U)
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10a      	bne.n	80090e4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090da:	461a      	mov	r2, r3
 80090dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80090e0:	6013      	str	r3, [r2, #0]
 80090e2:	e013      	b.n	800910c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f0:	461a      	mov	r2, r3
 80090f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80090f6:	6013      	str	r3, [r2, #0]
 80090f8:	e008      	b.n	800910c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	015a      	lsls	r2, r3, #5
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	4413      	add	r3, r2
 8009102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009106:	461a      	mov	r2, r3
 8009108:	2300      	movs	r3, #0
 800910a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009118:	461a      	mov	r2, r3
 800911a:	2300      	movs	r3, #0
 800911c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	4413      	add	r3, r2
 8009126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800912a:	461a      	mov	r2, r3
 800912c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009130:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	3301      	adds	r3, #1
 8009136:	613b      	str	r3, [r7, #16]
 8009138:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800913c:	461a      	mov	r2, r3
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	4293      	cmp	r3, r2
 8009142:	d3b5      	bcc.n	80090b0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009144:	2300      	movs	r3, #0
 8009146:	613b      	str	r3, [r7, #16]
 8009148:	e043      	b.n	80091d2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800915c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009160:	d118      	bne.n	8009194 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10a      	bne.n	800917e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4413      	add	r3, r2
 8009170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009174:	461a      	mov	r2, r3
 8009176:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	e013      	b.n	80091a6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	4413      	add	r3, r2
 8009186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800918a:	461a      	mov	r2, r3
 800918c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	e008      	b.n	80091a6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091a0:	461a      	mov	r2, r3
 80091a2:	2300      	movs	r3, #0
 80091a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091b2:	461a      	mov	r2, r3
 80091b4:	2300      	movs	r3, #0
 80091b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091c4:	461a      	mov	r2, r3
 80091c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80091ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	3301      	adds	r3, #1
 80091d0:	613b      	str	r3, [r7, #16]
 80091d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80091d6:	461a      	mov	r2, r3
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	4293      	cmp	r3, r2
 80091dc:	d3b5      	bcc.n	800914a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80091fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009200:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009204:	2b00      	cmp	r3, #0
 8009206:	d105      	bne.n	8009214 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	f043 0210 	orr.w	r2, r3, #16
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	699a      	ldr	r2, [r3, #24]
 8009218:	4b10      	ldr	r3, [pc, #64]	@ (800925c <USB_DevInit+0x2c4>)
 800921a:	4313      	orrs	r3, r2
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009220:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009224:	2b00      	cmp	r3, #0
 8009226:	d005      	beq.n	8009234 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	f043 0208 	orr.w	r2, r3, #8
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009234:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009238:	2b01      	cmp	r3, #1
 800923a:	d107      	bne.n	800924c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009244:	f043 0304 	orr.w	r3, r3, #4
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800924c:	7dfb      	ldrb	r3, [r7, #23]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009258:	b004      	add	sp, #16
 800925a:	4770      	bx	lr
 800925c:	803c3800 	.word	0x803c3800

08009260 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3301      	adds	r3, #1
 8009272:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800927a:	d901      	bls.n	8009280 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e01b      	b.n	80092b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	daf2      	bge.n	800926e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009288:	2300      	movs	r3, #0
 800928a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	019b      	lsls	r3, r3, #6
 8009290:	f043 0220 	orr.w	r2, r3, #32
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3301      	adds	r3, #1
 800929c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092a4:	d901      	bls.n	80092aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e006      	b.n	80092b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b20      	cmp	r3, #32
 80092b4:	d0f0      	beq.n	8009298 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	3301      	adds	r3, #1
 80092d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092dc:	d901      	bls.n	80092e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e018      	b.n	8009314 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	daf2      	bge.n	80092d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2210      	movs	r2, #16
 80092f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3301      	adds	r3, #1
 80092f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009300:	d901      	bls.n	8009306 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e006      	b.n	8009314 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	f003 0310 	and.w	r3, r3, #16
 800930e:	2b10      	cmp	r3, #16
 8009310:	d0f0      	beq.n	80092f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	68f9      	ldr	r1, [r7, #12]
 800933c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009340:	4313      	orrs	r3, r2
 8009342:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009352:	b480      	push	{r7}
 8009354:	b087      	sub	sp, #28
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f003 0306 	and.w	r3, r3, #6
 800936a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d102      	bne.n	8009378 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009372:	2300      	movs	r3, #0
 8009374:	75fb      	strb	r3, [r7, #23]
 8009376:	e00a      	b.n	800938e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b02      	cmp	r3, #2
 800937c:	d002      	beq.n	8009384 <USB_GetDevSpeed+0x32>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b06      	cmp	r3, #6
 8009382:	d102      	bne.n	800938a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009384:	2302      	movs	r3, #2
 8009386:	75fb      	strb	r3, [r7, #23]
 8009388:	e001      	b.n	800938e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800938a:	230f      	movs	r3, #15
 800938c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800938e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009390:	4618      	mov	r0, r3
 8009392:	371c      	adds	r7, #28
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	785b      	ldrb	r3, [r3, #1]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d13a      	bne.n	800942e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093be:	69da      	ldr	r2, [r3, #28]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	f003 030f 	and.w	r3, r3, #15
 80093c8:	2101      	movs	r1, #1
 80093ca:	fa01 f303 	lsl.w	r3, r1, r3
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	68f9      	ldr	r1, [r7, #12]
 80093d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093d6:	4313      	orrs	r3, r2
 80093d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d155      	bne.n	800949c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	791b      	ldrb	r3, [r3, #4]
 800940a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800940c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	059b      	lsls	r3, r3, #22
 8009412:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009414:	4313      	orrs	r3, r2
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	0151      	lsls	r1, r2, #5
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	440a      	add	r2, r1
 800941e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	e036      	b.n	800949c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009434:	69da      	ldr	r2, [r3, #28]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	f003 030f 	and.w	r3, r3, #15
 800943e:	2101      	movs	r1, #1
 8009440:	fa01 f303 	lsl.w	r3, r1, r3
 8009444:	041b      	lsls	r3, r3, #16
 8009446:	68f9      	ldr	r1, [r7, #12]
 8009448:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800944c:	4313      	orrs	r3, r2
 800944e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d11a      	bne.n	800949c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	791b      	ldrb	r3, [r3, #4]
 8009480:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009482:	430b      	orrs	r3, r1
 8009484:	4313      	orrs	r3, r2
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	0151      	lsls	r1, r2, #5
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	440a      	add	r2, r1
 800948e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800949a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
	...

080094ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d161      	bne.n	800958c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094de:	d11f      	bne.n	8009520 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	0151      	lsls	r1, r2, #5
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	440a      	add	r2, r1
 80094f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80094fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4413      	add	r3, r2
 8009508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	0151      	lsls	r1, r2, #5
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	440a      	add	r2, r1
 8009516:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800951a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800951e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009526:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	f003 030f 	and.w	r3, r3, #15
 8009530:	2101      	movs	r1, #1
 8009532:	fa01 f303 	lsl.w	r3, r1, r3
 8009536:	b29b      	uxth	r3, r3
 8009538:	43db      	mvns	r3, r3
 800953a:	68f9      	ldr	r1, [r7, #12]
 800953c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009540:	4013      	ands	r3, r2
 8009542:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800954a:	69da      	ldr	r2, [r3, #28]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	f003 030f 	and.w	r3, r3, #15
 8009554:	2101      	movs	r1, #1
 8009556:	fa01 f303 	lsl.w	r3, r1, r3
 800955a:	b29b      	uxth	r3, r3
 800955c:	43db      	mvns	r3, r3
 800955e:	68f9      	ldr	r1, [r7, #12]
 8009560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009564:	4013      	ands	r3, r2
 8009566:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	0159      	lsls	r1, r3, #5
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	440b      	add	r3, r1
 800957e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009582:	4619      	mov	r1, r3
 8009584:	4b35      	ldr	r3, [pc, #212]	@ (800965c <USB_DeactivateEndpoint+0x1b0>)
 8009586:	4013      	ands	r3, r2
 8009588:	600b      	str	r3, [r1, #0]
 800958a:	e060      	b.n	800964e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4413      	add	r3, r2
 8009594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800959e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095a2:	d11f      	bne.n	80095e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	0151      	lsls	r1, r2, #5
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	440a      	add	r2, r1
 80095ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80095c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	0151      	lsls	r1, r2, #5
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	440a      	add	r2, r1
 80095da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	f003 030f 	and.w	r3, r3, #15
 80095f4:	2101      	movs	r1, #1
 80095f6:	fa01 f303 	lsl.w	r3, r1, r3
 80095fa:	041b      	lsls	r3, r3, #16
 80095fc:	43db      	mvns	r3, r3
 80095fe:	68f9      	ldr	r1, [r7, #12]
 8009600:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009604:	4013      	ands	r3, r2
 8009606:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800960e:	69da      	ldr	r2, [r3, #28]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	f003 030f 	and.w	r3, r3, #15
 8009618:	2101      	movs	r1, #1
 800961a:	fa01 f303 	lsl.w	r3, r1, r3
 800961e:	041b      	lsls	r3, r3, #16
 8009620:	43db      	mvns	r3, r3
 8009622:	68f9      	ldr	r1, [r7, #12]
 8009624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009628:	4013      	ands	r3, r2
 800962a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	0159      	lsls	r1, r3, #5
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	440b      	add	r3, r1
 8009642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009646:	4619      	mov	r1, r3
 8009648:	4b05      	ldr	r3, [pc, #20]	@ (8009660 <USB_DeactivateEndpoint+0x1b4>)
 800964a:	4013      	ands	r3, r2
 800964c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	ec337800 	.word	0xec337800
 8009660:	eff37800 	.word	0xeff37800

08009664 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08a      	sub	sp, #40	@ 0x28
 8009668:	af02      	add	r7, sp, #8
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	4613      	mov	r3, r2
 8009670:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	785b      	ldrb	r3, [r3, #1]
 8009680:	2b01      	cmp	r3, #1
 8009682:	f040 817f 	bne.w	8009984 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d132      	bne.n	80096f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	4413      	add	r3, r2
 8009696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	69ba      	ldr	r2, [r7, #24]
 800969e:	0151      	lsls	r1, r2, #5
 80096a0:	69fa      	ldr	r2, [r7, #28]
 80096a2:	440a      	add	r2, r1
 80096a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096a8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80096ac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80096b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	0151      	lsls	r1, r2, #5
 80096c4:	69fa      	ldr	r2, [r7, #28]
 80096c6:	440a      	add	r2, r1
 80096c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	69ba      	ldr	r2, [r7, #24]
 80096e2:	0151      	lsls	r1, r2, #5
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	440a      	add	r2, r1
 80096e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096ec:	0cdb      	lsrs	r3, r3, #19
 80096ee:	04db      	lsls	r3, r3, #19
 80096f0:	6113      	str	r3, [r2, #16]
 80096f2:	e097      	b.n	8009824 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	015a      	lsls	r2, r3, #5
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	4413      	add	r3, r2
 80096fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	69ba      	ldr	r2, [r7, #24]
 8009704:	0151      	lsls	r1, r2, #5
 8009706:	69fa      	ldr	r2, [r7, #28]
 8009708:	440a      	add	r2, r1
 800970a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800970e:	0cdb      	lsrs	r3, r3, #19
 8009710:	04db      	lsls	r3, r3, #19
 8009712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	69ba      	ldr	r2, [r7, #24]
 8009724:	0151      	lsls	r1, r2, #5
 8009726:	69fa      	ldr	r2, [r7, #28]
 8009728:	440a      	add	r2, r1
 800972a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800972e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009732:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009736:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d11a      	bne.n	8009774 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	691a      	ldr	r2, [r3, #16]
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	429a      	cmp	r2, r3
 8009748:	d903      	bls.n	8009752 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	689a      	ldr	r2, [r3, #8]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	0151      	lsls	r1, r2, #5
 8009764:	69fa      	ldr	r2, [r7, #28]
 8009766:	440a      	add	r2, r1
 8009768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800976c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009770:	6113      	str	r3, [r2, #16]
 8009772:	e044      	b.n	80097fe <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	691a      	ldr	r2, [r3, #16]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	4413      	add	r3, r2
 800977e:	1e5a      	subs	r2, r3, #1
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	fbb2 f3f3 	udiv	r3, r2, r3
 8009788:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	015a      	lsls	r2, r3, #5
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	4413      	add	r3, r2
 8009792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009796:	691a      	ldr	r2, [r3, #16]
 8009798:	8afb      	ldrh	r3, [r7, #22]
 800979a:	04d9      	lsls	r1, r3, #19
 800979c:	4ba4      	ldr	r3, [pc, #656]	@ (8009a30 <USB_EPStartXfer+0x3cc>)
 800979e:	400b      	ands	r3, r1
 80097a0:	69b9      	ldr	r1, [r7, #24]
 80097a2:	0148      	lsls	r0, r1, #5
 80097a4:	69f9      	ldr	r1, [r7, #28]
 80097a6:	4401      	add	r1, r0
 80097a8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80097ac:	4313      	orrs	r3, r2
 80097ae:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	791b      	ldrb	r3, [r3, #4]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d122      	bne.n	80097fe <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	015a      	lsls	r2, r3, #5
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	4413      	add	r3, r2
 80097c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	0151      	lsls	r1, r2, #5
 80097ca:	69fa      	ldr	r2, [r7, #28]
 80097cc:	440a      	add	r2, r1
 80097ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097d2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80097d6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e4:	691a      	ldr	r2, [r3, #16]
 80097e6:	8afb      	ldrh	r3, [r7, #22]
 80097e8:	075b      	lsls	r3, r3, #29
 80097ea:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80097ee:	69b9      	ldr	r1, [r7, #24]
 80097f0:	0148      	lsls	r0, r1, #5
 80097f2:	69f9      	ldr	r1, [r7, #28]
 80097f4:	4401      	add	r1, r0
 80097f6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80097fa:	4313      	orrs	r3, r2
 80097fc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	4413      	add	r3, r2
 8009806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800980a:	691a      	ldr	r2, [r3, #16]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009814:	69b9      	ldr	r1, [r7, #24]
 8009816:	0148      	lsls	r0, r1, #5
 8009818:	69f9      	ldr	r1, [r7, #28]
 800981a:	4401      	add	r1, r0
 800981c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009820:	4313      	orrs	r3, r2
 8009822:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d14b      	bne.n	80098c2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d009      	beq.n	8009846 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	015a      	lsls	r2, r3, #5
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	4413      	add	r3, r2
 800983a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800983e:	461a      	mov	r2, r3
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	69db      	ldr	r3, [r3, #28]
 8009844:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	791b      	ldrb	r3, [r3, #4]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d128      	bne.n	80098a0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800985a:	2b00      	cmp	r3, #0
 800985c:	d110      	bne.n	8009880 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	4413      	add	r3, r2
 8009866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	69ba      	ldr	r2, [r7, #24]
 800986e:	0151      	lsls	r1, r2, #5
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	440a      	add	r2, r1
 8009874:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009878:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	e00f      	b.n	80098a0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	69ba      	ldr	r2, [r7, #24]
 8009890:	0151      	lsls	r1, r2, #5
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	440a      	add	r2, r1
 8009896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800989a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800989e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	69ba      	ldr	r2, [r7, #24]
 80098b0:	0151      	lsls	r1, r2, #5
 80098b2:	69fa      	ldr	r2, [r7, #28]
 80098b4:	440a      	add	r2, r1
 80098b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80098be:	6013      	str	r3, [r2, #0]
 80098c0:	e166      	b.n	8009b90 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	69ba      	ldr	r2, [r7, #24]
 80098d2:	0151      	lsls	r1, r2, #5
 80098d4:	69fa      	ldr	r2, [r7, #28]
 80098d6:	440a      	add	r2, r1
 80098d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098dc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80098e0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	791b      	ldrb	r3, [r3, #4]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d015      	beq.n	8009916 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f000 814e 	beq.w	8009b90 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	f003 030f 	and.w	r3, r3, #15
 8009904:	2101      	movs	r1, #1
 8009906:	fa01 f303 	lsl.w	r3, r1, r3
 800990a:	69f9      	ldr	r1, [r7, #28]
 800990c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009910:	4313      	orrs	r3, r2
 8009912:	634b      	str	r3, [r1, #52]	@ 0x34
 8009914:	e13c      	b.n	8009b90 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009922:	2b00      	cmp	r3, #0
 8009924:	d110      	bne.n	8009948 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	015a      	lsls	r2, r3, #5
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	4413      	add	r3, r2
 800992e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	69ba      	ldr	r2, [r7, #24]
 8009936:	0151      	lsls	r1, r2, #5
 8009938:	69fa      	ldr	r2, [r7, #28]
 800993a:	440a      	add	r2, r1
 800993c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009940:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009944:	6013      	str	r3, [r2, #0]
 8009946:	e00f      	b.n	8009968 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	015a      	lsls	r2, r3, #5
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	4413      	add	r3, r2
 8009950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69ba      	ldr	r2, [r7, #24]
 8009958:	0151      	lsls	r1, r2, #5
 800995a:	69fa      	ldr	r2, [r7, #28]
 800995c:	440a      	add	r2, r1
 800995e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009966:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	68d9      	ldr	r1, [r3, #12]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	781a      	ldrb	r2, [r3, #0]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	b298      	uxth	r0, r3
 8009976:	79fb      	ldrb	r3, [r7, #7]
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	4603      	mov	r3, r0
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 f9b9 	bl	8009cf4 <USB_WritePacket>
 8009982:	e105      	b.n	8009b90 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	69ba      	ldr	r2, [r7, #24]
 8009994:	0151      	lsls	r1, r2, #5
 8009996:	69fa      	ldr	r2, [r7, #28]
 8009998:	440a      	add	r2, r1
 800999a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800999e:	0cdb      	lsrs	r3, r3, #19
 80099a0:	04db      	lsls	r3, r3, #19
 80099a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	0151      	lsls	r1, r2, #5
 80099b6:	69fa      	ldr	r2, [r7, #28]
 80099b8:	440a      	add	r2, r1
 80099ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80099c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80099c6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d132      	bne.n	8009a34 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	689a      	ldr	r2, [r3, #8]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	689a      	ldr	r2, [r3, #8]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f2:	691a      	ldr	r2, [r3, #16]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099fc:	69b9      	ldr	r1, [r7, #24]
 80099fe:	0148      	lsls	r0, r1, #5
 8009a00:	69f9      	ldr	r1, [r7, #28]
 8009a02:	4401      	add	r1, r0
 8009a04:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	015a      	lsls	r2, r3, #5
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	69ba      	ldr	r2, [r7, #24]
 8009a1c:	0151      	lsls	r1, r2, #5
 8009a1e:	69fa      	ldr	r2, [r7, #28]
 8009a20:	440a      	add	r2, r1
 8009a22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a2a:	6113      	str	r3, [r2, #16]
 8009a2c:	e062      	b.n	8009af4 <USB_EPStartXfer+0x490>
 8009a2e:	bf00      	nop
 8009a30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d123      	bne.n	8009a84 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a48:	691a      	ldr	r2, [r3, #16]
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a52:	69b9      	ldr	r1, [r7, #24]
 8009a54:	0148      	lsls	r0, r1, #5
 8009a56:	69f9      	ldr	r1, [r7, #28]
 8009a58:	4401      	add	r1, r0
 8009a5a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	69ba      	ldr	r2, [r7, #24]
 8009a72:	0151      	lsls	r1, r2, #5
 8009a74:	69fa      	ldr	r2, [r7, #28]
 8009a76:	440a      	add	r2, r1
 8009a78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a80:	6113      	str	r3, [r2, #16]
 8009a82:	e037      	b.n	8009af4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	691a      	ldr	r2, [r3, #16]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	1e5a      	subs	r2, r3, #1
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a98:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	8afa      	ldrh	r2, [r7, #22]
 8009aa0:	fb03 f202 	mul.w	r2, r3, r2
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ab4:	691a      	ldr	r2, [r3, #16]
 8009ab6:	8afb      	ldrh	r3, [r7, #22]
 8009ab8:	04d9      	lsls	r1, r3, #19
 8009aba:	4b38      	ldr	r3, [pc, #224]	@ (8009b9c <USB_EPStartXfer+0x538>)
 8009abc:	400b      	ands	r3, r1
 8009abe:	69b9      	ldr	r1, [r7, #24]
 8009ac0:	0148      	lsls	r0, r1, #5
 8009ac2:	69f9      	ldr	r1, [r7, #28]
 8009ac4:	4401      	add	r1, r0
 8009ac6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009aca:	4313      	orrs	r3, r2
 8009acc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	015a      	lsls	r2, r3, #5
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	6a1b      	ldr	r3, [r3, #32]
 8009ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ae4:	69b9      	ldr	r1, [r7, #24]
 8009ae6:	0148      	lsls	r0, r1, #5
 8009ae8:	69f9      	ldr	r1, [r7, #28]
 8009aea:	4401      	add	r1, r0
 8009aec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009af0:	4313      	orrs	r3, r2
 8009af2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d10d      	bne.n	8009b16 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d009      	beq.n	8009b16 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	68d9      	ldr	r1, [r3, #12]
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b12:	460a      	mov	r2, r1
 8009b14:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	791b      	ldrb	r3, [r3, #4]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d128      	bne.n	8009b70 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d110      	bne.n	8009b50 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	0151      	lsls	r1, r2, #5
 8009b40:	69fa      	ldr	r2, [r7, #28]
 8009b42:	440a      	add	r2, r1
 8009b44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b4c:	6013      	str	r3, [r2, #0]
 8009b4e:	e00f      	b.n	8009b70 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	015a      	lsls	r2, r3, #5
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	4413      	add	r3, r2
 8009b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	0151      	lsls	r1, r2, #5
 8009b62:	69fa      	ldr	r2, [r7, #28]
 8009b64:	440a      	add	r2, r1
 8009b66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	0151      	lsls	r1, r2, #5
 8009b82:	69fa      	ldr	r2, [r7, #28]
 8009b84:	440a      	add	r2, r1
 8009b86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009b8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3720      	adds	r7, #32
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	1ff80000 	.word	0x1ff80000

08009ba0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b087      	sub	sp, #28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	785b      	ldrb	r3, [r3, #1]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d14a      	bne.n	8009c54 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	015a      	lsls	r2, r3, #5
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bd6:	f040 8086 	bne.w	8009ce6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	015a      	lsls	r2, r3, #5
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	4413      	add	r3, r2
 8009be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	7812      	ldrb	r2, [r2, #0]
 8009bee:	0151      	lsls	r1, r2, #5
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	440a      	add	r2, r1
 8009bf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bf8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009bfc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	015a      	lsls	r2, r3, #5
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	7812      	ldrb	r2, [r2, #0]
 8009c12:	0151      	lsls	r1, r2, #5
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	440a      	add	r2, r1
 8009c18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	3301      	adds	r3, #1
 8009c26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d902      	bls.n	8009c38 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	75fb      	strb	r3, [r7, #23]
          break;
 8009c36:	e056      	b.n	8009ce6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	015a      	lsls	r2, r3, #5
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	4413      	add	r3, r2
 8009c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c50:	d0e7      	beq.n	8009c22 <USB_EPStopXfer+0x82>
 8009c52:	e048      	b.n	8009ce6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c6c:	d13b      	bne.n	8009ce6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	015a      	lsls	r2, r3, #5
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	4413      	add	r3, r2
 8009c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	7812      	ldrb	r2, [r2, #0]
 8009c82:	0151      	lsls	r1, r2, #5
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	440a      	add	r2, r1
 8009c88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c90:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	7812      	ldrb	r2, [r2, #0]
 8009ca6:	0151      	lsls	r1, r2, #5
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	440a      	add	r2, r1
 8009cac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009cb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d902      	bls.n	8009ccc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	75fb      	strb	r3, [r7, #23]
          break;
 8009cca:	e00c      	b.n	8009ce6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	015a      	lsls	r2, r3, #5
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ce4:	d0e7      	beq.n	8009cb6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	371c      	adds	r7, #28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b089      	sub	sp, #36	@ 0x24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	4611      	mov	r1, r2
 8009d00:	461a      	mov	r2, r3
 8009d02:	460b      	mov	r3, r1
 8009d04:	71fb      	strb	r3, [r7, #7]
 8009d06:	4613      	mov	r3, r2
 8009d08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009d12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d123      	bne.n	8009d62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009d1a:	88bb      	ldrh	r3, [r7, #4]
 8009d1c:	3303      	adds	r3, #3
 8009d1e:	089b      	lsrs	r3, r3, #2
 8009d20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009d22:	2300      	movs	r3, #0
 8009d24:	61bb      	str	r3, [r7, #24]
 8009d26:	e018      	b.n	8009d5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009d28:	79fb      	ldrb	r3, [r7, #7]
 8009d2a:	031a      	lsls	r2, r3, #12
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d34:	461a      	mov	r2, r3
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	3301      	adds	r3, #1
 8009d46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	3301      	adds	r3, #1
 8009d52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	3301      	adds	r3, #1
 8009d58:	61bb      	str	r3, [r7, #24]
 8009d5a:	69ba      	ldr	r2, [r7, #24]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d3e2      	bcc.n	8009d28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3724      	adds	r7, #36	@ 0x24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b08b      	sub	sp, #44	@ 0x2c
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d86:	88fb      	ldrh	r3, [r7, #6]
 8009d88:	089b      	lsrs	r3, r3, #2
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d8e:	88fb      	ldrh	r3, [r7, #6]
 8009d90:	f003 0303 	and.w	r3, r3, #3
 8009d94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009d96:	2300      	movs	r3, #0
 8009d98:	623b      	str	r3, [r7, #32]
 8009d9a:	e014      	b.n	8009dc6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009daa:	3301      	adds	r3, #1
 8009dac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db0:	3301      	adds	r3, #1
 8009db2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db6:	3301      	adds	r3, #1
 8009db8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009dc0:	6a3b      	ldr	r3, [r7, #32]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	623b      	str	r3, [r7, #32]
 8009dc6:	6a3a      	ldr	r2, [r7, #32]
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d3e6      	bcc.n	8009d9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009dce:	8bfb      	ldrh	r3, [r7, #30]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d01e      	beq.n	8009e12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dde:	461a      	mov	r2, r3
 8009de0:	f107 0310 	add.w	r3, r7, #16
 8009de4:	6812      	ldr	r2, [r2, #0]
 8009de6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	6a3b      	ldr	r3, [r7, #32]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	fa22 f303 	lsr.w	r3, r2, r3
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df8:	701a      	strb	r2, [r3, #0]
      i++;
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	623b      	str	r3, [r7, #32]
      pDest++;
 8009e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e02:	3301      	adds	r3, #1
 8009e04:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009e06:	8bfb      	ldrh	r3, [r7, #30]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009e0c:	8bfb      	ldrh	r3, [r7, #30]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1ea      	bne.n	8009de8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	372c      	adds	r7, #44	@ 0x2c
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	785b      	ldrb	r3, [r3, #1]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d12c      	bne.n	8009e96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	db12      	blt.n	8009e74 <USB_EPSetStall+0x54>
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00f      	beq.n	8009e74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	0151      	lsls	r1, r2, #5
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	440a      	add	r2, r1
 8009e6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e6e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009e72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	0151      	lsls	r1, r2, #5
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	440a      	add	r2, r1
 8009e8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	e02b      	b.n	8009eee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	015a      	lsls	r2, r3, #5
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	db12      	blt.n	8009ece <USB_EPSetStall+0xae>
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00f      	beq.n	8009ece <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	015a      	lsls	r2, r3, #5
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	0151      	lsls	r1, r2, #5
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	440a      	add	r2, r1
 8009ec4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ec8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009ecc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	015a      	lsls	r2, r3, #5
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	0151      	lsls	r1, r2, #5
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	440a      	add	r2, r1
 8009ee4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ee8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009eec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	785b      	ldrb	r3, [r3, #1]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d128      	bne.n	8009f6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	0151      	lsls	r1, r2, #5
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	440a      	add	r2, r1
 8009f2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	791b      	ldrb	r3, [r3, #4]
 8009f3c:	2b03      	cmp	r3, #3
 8009f3e:	d003      	beq.n	8009f48 <USB_EPClearStall+0x4c>
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	791b      	ldrb	r3, [r3, #4]
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d138      	bne.n	8009fba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	0151      	lsls	r1, r2, #5
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	440a      	add	r2, r1
 8009f5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	e027      	b.n	8009fba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	0151      	lsls	r1, r2, #5
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	440a      	add	r2, r1
 8009f80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	791b      	ldrb	r3, [r3, #4]
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d003      	beq.n	8009f9a <USB_EPClearStall+0x9e>
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	791b      	ldrb	r3, [r3, #4]
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d10f      	bne.n	8009fba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	015a      	lsls	r2, r3, #5
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	0151      	lsls	r1, r2, #5
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	440a      	add	r2, r1
 8009fb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fb8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009fe6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009fea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	011b      	lsls	r3, r3, #4
 8009ff8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009ffc:	68f9      	ldr	r1, [r7, #12]
 8009ffe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a002:	4313      	orrs	r3, r2
 800a004:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a02e:	f023 0303 	bic.w	r3, r3, #3
 800a032:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a042:	f023 0302 	bic.w	r3, r3, #2
 800a046:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a056:	b480      	push	{r7}
 800a058:	b085      	sub	sp, #20
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a070:	f023 0303 	bic.w	r3, r3, #3
 800a074:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a084:	f043 0302 	orr.w	r3, r3, #2
 800a088:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	695b      	ldr	r3, [r3, #20]
 800a0a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b085      	sub	sp, #20
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0da:	69db      	ldr	r3, [r3, #28]
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	4013      	ands	r3, r2
 800a0e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	0c1b      	lsrs	r3, r3, #16
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b085      	sub	sp, #20
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a10e:	69db      	ldr	r3, [r3, #28]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	4013      	ands	r3, r2
 800a114:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	b29b      	uxth	r3, r3
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a126:	b480      	push	{r7}
 800a128:	b085      	sub	sp, #20
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	460b      	mov	r3, r1
 800a130:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a136:	78fb      	ldrb	r3, [r7, #3]
 800a138:	015a      	lsls	r2, r3, #5
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	4413      	add	r3, r2
 800a13e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	4013      	ands	r3, r2
 800a152:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a154:	68bb      	ldr	r3, [r7, #8]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3714      	adds	r7, #20
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a162:	b480      	push	{r7}
 800a164:	b087      	sub	sp, #28
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a184:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a186:	78fb      	ldrb	r3, [r7, #3]
 800a188:	f003 030f 	and.w	r3, r3, #15
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	fa22 f303 	lsr.w	r3, r2, r3
 800a192:	01db      	lsls	r3, r3, #7
 800a194:	b2db      	uxtb	r3, r3
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	4313      	orrs	r3, r2
 800a19a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a19c:	78fb      	ldrb	r3, [r7, #3]
 800a19e:	015a      	lsls	r2, r3, #5
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	371c      	adds	r7, #28
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr

0800a1be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b083      	sub	sp, #12
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	f003 0301 	and.w	r3, r3, #1
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	370c      	adds	r7, #12
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a1f8:	f023 0307 	bic.w	r3, r3, #7
 800a1fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a20c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a210:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	460b      	mov	r3, r1
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	333c      	adds	r3, #60	@ 0x3c
 800a236:	3304      	adds	r3, #4
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	4a26      	ldr	r2, [pc, #152]	@ (800a2d8 <USB_EP0_OutStart+0xb8>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d90a      	bls.n	800a25a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a250:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a254:	d101      	bne.n	800a25a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	e037      	b.n	800a2ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a260:	461a      	mov	r2, r3
 800a262:	2300      	movs	r3, #0
 800a264:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a274:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a278:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a288:	f043 0318 	orr.w	r3, r3, #24
 800a28c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a29c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a2a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a2a2:	7afb      	ldrb	r3, [r7, #11]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d10f      	bne.n	800a2c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2c2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a2c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	371c      	adds	r7, #28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	4f54300a 	.word	0x4f54300a

0800a2dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a2f4:	d901      	bls.n	800a2fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e022      	b.n	800a340 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	daf2      	bge.n	800a2e8 <USB_CoreReset+0xc>

  count = 10U;
 800a302:	230a      	movs	r3, #10
 800a304:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800a306:	e002      	b.n	800a30e <USB_CoreReset+0x32>
  {
    count--;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1f9      	bne.n	800a308 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	f043 0201 	orr.w	r2, r3, #1
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3301      	adds	r3, #1
 800a324:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a32c:	d901      	bls.n	800a332 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e006      	b.n	800a340 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d0f0      	beq.n	800a320 <USB_CoreReset+0x44>

  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af02      	add	r7, sp, #8
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	460b      	mov	r3, r1
 800a356:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_STANDBY] = {
 800a358:	2380      	movs	r3, #128	@ 0x80
 800a35a:	733b      	strb	r3, [r7, #12]
 800a35c:	78fb      	ldrb	r3, [r7, #3]
 800a35e:	737b      	strb	r3, [r7, #13]
        SX126X_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800a360:	f107 010c 	add.w	r1, r7, #12
 800a364:	2300      	movs	r3, #0
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	2300      	movs	r3, #0
 800a36a:	2202      	movs	r2, #2
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fb1a 	bl	800a9a6 <sx126x_hal_write>
 800a372:	4603      	mov	r3, r0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a38c:	d301      	bcc.n	800a392 <sx126x_set_tx+0x16>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800a38e:	2302      	movs	r3, #2
 800a390:	e008      	b.n	800a3a4 <sx126x_set_tx+0x28>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800a392:	6838      	ldr	r0, [r7, #0]
 800a394:	f000 fa82 	bl	800a89c <sx126x_convert_timeout_in_ms_to_rtc_step>
 800a398:	60f8      	str	r0, [r7, #12]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800a39a:	68f9      	ldr	r1, [r7, #12]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 f805 	bl	800a3ac <sx126x_set_tx_with_timeout_in_rtc_step>
 800a3a2:	4603      	mov	r3, r0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a3b6:	2383      	movs	r3, #131	@ 0x83
 800a3b8:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	0c1b      	lsrs	r3, r3, #16
 800a3be:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a3c0:	737b      	strb	r3, [r7, #13]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	0a1b      	lsrs	r3, r3, #8
 800a3c6:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a3c8:	73bb      	strb	r3, [r7, #14]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 800a3ce:	73fb      	strb	r3, [r7, #15]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800a3d0:	f107 010c 	add.w	r1, r7, #12
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2204      	movs	r2, #4
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fae2 	bl	800a9a6 <sx126x_hal_write>
 800a3e2:	4603      	mov	r3, r0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af02      	add	r7, sp, #8
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = {
 800a3f8:	2396      	movs	r3, #150	@ 0x96
 800a3fa:	733b      	strb	r3, [r7, #12]
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	737b      	strb	r3, [r7, #13]
        SX126X_SET_REGULATOR_MODE,
        ( uint8_t ) mode,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800a400:	f107 010c 	add.w	r1, r7, #12
 800a404:	2300      	movs	r3, #0
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	2300      	movs	r3, #0
 800a40a:	2202      	movs	r2, #2
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 faca 	bl	800a9a6 <sx126x_hal_write>
 800a412:	4603      	mov	r3, r0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af02      	add	r7, sp, #8
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_CALIBRATE] = {
 800a428:	2389      	movs	r3, #137	@ 0x89
 800a42a:	733b      	strb	r3, [r7, #12]
 800a42c:	78fb      	ldrb	r3, [r7, #3]
 800a42e:	737b      	strb	r3, [r7, #13]
        SX126X_CALIBRATE,
        ( uint8_t ) param,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800a430:	f107 010c 	add.w	r1, r7, #12
 800a434:	2300      	movs	r3, #0
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	2300      	movs	r3, #0
 800a43a:	2202      	movs	r2, #2
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 fab2 	bl	800a9a6 <sx126x_hal_write>
 800a442:	4603      	mov	r3, r0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <sx126x_set_pa_cfg>:

    return sx126x_cal_img( context, freq1, freq2 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af02      	add	r7, sp, #8
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a456:	2395      	movs	r3, #149	@ 0x95
 800a458:	723b      	strb	r3, [r7, #8]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a45e:	727b      	strb	r3, [r7, #9]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a464:	72bb      	strb	r3, [r7, #10]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a46a:	72fb      	strb	r3, [r7, #11]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 800a470:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800a472:	f107 0108 	add.w	r1, r7, #8
 800a476:	2300      	movs	r3, #0
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	2300      	movs	r3, #0
 800a47c:	2205      	movs	r2, #5
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fa91 	bl	800a9a6 <sx126x_hal_write>
 800a484:	4603      	mov	r3, r0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b088      	sub	sp, #32
 800a492:	af02      	add	r7, sp, #8
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	607a      	str	r2, [r7, #4]
 800a498:	461a      	mov	r2, r3
 800a49a:	460b      	mov	r3, r1
 800a49c:	817b      	strh	r3, [r7, #10]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a4a2:	230d      	movs	r3, #13
 800a4a4:	753b      	strb	r3, [r7, #20]
        SX126X_WRITE_REGISTER,
        ( uint8_t )( address >> 8 ),
 800a4a6:	897b      	ldrh	r3, [r7, #10]
 800a4a8:	0a1b      	lsrs	r3, r3, #8
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a4ae:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800a4b0:	897b      	ldrh	r3, [r7, #10]
 800a4b2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 800a4b4:	75bb      	strb	r3, [r7, #22]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800a4b6:	7a7b      	ldrb	r3, [r7, #9]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	f107 0114 	add.w	r1, r7, #20
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2203      	movs	r2, #3
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 fa6e 	bl	800a9a6 <sx126x_hal_write>
 800a4ca:	4603      	mov	r3, r0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3718      	adds	r7, #24
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b088      	sub	sp, #32
 800a4d8:	af02      	add	r7, sp, #8
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	607a      	str	r2, [r7, #4]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	817b      	strh	r3, [r7, #10]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	727b      	strb	r3, [r7, #9]
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a4e8:	231d      	movs	r3, #29
 800a4ea:	753b      	strb	r3, [r7, #20]
        SX126X_READ_REGISTER,
        ( uint8_t )( address >> 8 ),
 800a4ec:	897b      	ldrh	r3, [r7, #10]
 800a4ee:	0a1b      	lsrs	r3, r3, #8
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a4f4:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( address >> 0 ),
 800a4f6:	897b      	ldrh	r3, [r7, #10]
 800a4f8:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 800a4fa:	75bb      	strb	r3, [r7, #22]
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	75fb      	strb	r3, [r7, #23]
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800a500:	7a7b      	ldrb	r3, [r7, #9]
 800a502:	b29b      	uxth	r3, r3
 800a504:	f107 0114 	add.w	r1, r7, #20
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2204      	movs	r2, #4
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 faa4 	bl	800aa5c <sx126x_hal_read>
 800a514:	4603      	mov	r3, r0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b088      	sub	sp, #32
 800a522:	af02      	add	r7, sp, #8
 800a524:	60f8      	str	r0, [r7, #12]
 800a526:	607a      	str	r2, [r7, #4]
 800a528:	461a      	mov	r2, r3
 800a52a:	460b      	mov	r3, r1
 800a52c:	72fb      	strb	r3, [r7, #11]
 800a52e:	4613      	mov	r3, r2
 800a530:	72bb      	strb	r3, [r7, #10]
    const uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = {
 800a532:	230e      	movs	r3, #14
 800a534:	753b      	strb	r3, [r7, #20]
 800a536:	7afb      	ldrb	r3, [r7, #11]
 800a538:	757b      	strb	r3, [r7, #21]
        SX126X_WRITE_BUFFER,
        offset,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 800a53a:	7abb      	ldrb	r3, [r7, #10]
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	f107 0114 	add.w	r1, r7, #20
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2202      	movs	r2, #2
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f000 fa2c 	bl	800a9a6 <sx126x_hal_write>
 800a54e:	4603      	mov	r3, r0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b08a      	sub	sp, #40	@ 0x28
 800a55c:	af02      	add	r7, sp, #8
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	4608      	mov	r0, r1
 800a562:	4611      	mov	r1, r2
 800a564:	461a      	mov	r2, r3
 800a566:	4603      	mov	r3, r0
 800a568:	817b      	strh	r3, [r7, #10]
 800a56a:	460b      	mov	r3, r1
 800a56c:	813b      	strh	r3, [r7, #8]
 800a56e:	4613      	mov	r3, r2
 800a570:	80fb      	strh	r3, [r7, #6]
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a572:	2308      	movs	r3, #8
 800a574:	753b      	strb	r3, [r7, #20]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800a576:	897b      	ldrh	r3, [r7, #10]
 800a578:	0a1b      	lsrs	r3, r3, #8
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a57e:	757b      	strb	r3, [r7, #21]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 800a580:	897b      	ldrh	r3, [r7, #10]
 800a582:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a584:	75bb      	strb	r3, [r7, #22]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a586:	893b      	ldrh	r3, [r7, #8]
 800a588:	0a1b      	lsrs	r3, r3, #8
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a58e:	75fb      	strb	r3, [r7, #23]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a590:	893b      	ldrh	r3, [r7, #8]
 800a592:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a594:	763b      	strb	r3, [r7, #24]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 800a596:	88fb      	ldrh	r3, [r7, #6]
 800a598:	0a1b      	lsrs	r3, r3, #8
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a59e:	767b      	strb	r3, [r7, #25]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a5a0:	88fb      	ldrh	r3, [r7, #6]
 800a5a2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a5a4:	76bb      	strb	r3, [r7, #26]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a5a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a5a8:	0a1b      	lsrs	r3, r3, #8
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a5ae:	76fb      	strb	r3, [r7, #27]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 800a5b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a5b2:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 800a5b4:	773b      	strb	r3, [r7, #28]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800a5b6:	f107 0114 	add.w	r1, r7, #20
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	2209      	movs	r2, #9
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f000 f9ef 	bl	800a9a6 <sx126x_hal_write>
 800a5c8:	4603      	mov	r3, r0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3720      	adds	r7, #32
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <sx126x_set_dio3_as_tcxo_ctrl>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
}

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b088      	sub	sp, #32
 800a5d6:	af02      	add	r7, sp, #8
 800a5d8:	60f8      	str	r0, [r7, #12]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	607a      	str	r2, [r7, #4]
 800a5de:	72fb      	strb	r3, [r7, #11]
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a5e0:	2397      	movs	r3, #151	@ 0x97
 800a5e2:	743b      	strb	r3, [r7, #16]
 800a5e4:	7afb      	ldrb	r3, [r7, #11]
 800a5e6:	747b      	strb	r3, [r7, #17]
        SX126X_SET_DIO3_AS_TCXO_CTRL, ( uint8_t ) tcxo_voltage,    ( uint8_t )( timeout >> 16 ),
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	0c1b      	lsrs	r3, r3, #16
 800a5ec:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a5ee:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	0a1b      	lsrs	r3, r3, #8
 800a5f4:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a5f6:	74fb      	strb	r3, [r7, #19]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 800a5fc:	753b      	strb	r3, [r7, #20]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800a5fe:	f107 0110 	add.w	r1, r7, #16
 800a602:	2300      	movs	r3, #0
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	2300      	movs	r3, #0
 800a608:	2205      	movs	r2, #5
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f000 f9cb 	bl	800a9a6 <sx126x_hal_write>
 800a610:	4603      	mov	r3, r0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3718      	adds	r7, #24
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800a624:	6838      	ldr	r0, [r7, #0]
 800a626:	f000 f913 	bl	800a850 <sx126x_convert_freq_in_hz_to_pll_step>
 800a62a:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800a62c:	68f9      	ldr	r1, [r7, #12]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f805 	bl	800a63e <sx126x_set_rf_freq_in_pll_steps>
 800a634:	4603      	mov	r3, r0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b086      	sub	sp, #24
 800a642:	af02      	add	r7, sp, #8
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a648:	2386      	movs	r3, #134	@ 0x86
 800a64a:	723b      	strb	r3, [r7, #8]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	0e1b      	lsrs	r3, r3, #24
 800a650:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a652:	727b      	strb	r3, [r7, #9]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	0c1b      	lsrs	r3, r3, #16
 800a658:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a65a:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	0a1b      	lsrs	r3, r3, #8
 800a660:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a662:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 800a668:	733b      	strb	r3, [r7, #12]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800a66a:	f107 0108 	add.w	r1, r7, #8
 800a66e:	2300      	movs	r3, #0
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	2300      	movs	r3, #0
 800a674:	2205      	movs	r2, #5
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f995 	bl	800a9a6 <sx126x_hal_write>
 800a67c:	4603      	mov	r3, r0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b086      	sub	sp, #24
 800a68a:	af02      	add	r7, sp, #8
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	460b      	mov	r3, r1
 800a690:	70fb      	strb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = {
 800a692:	238a      	movs	r3, #138	@ 0x8a
 800a694:	733b      	strb	r3, [r7, #12]
 800a696:	78fb      	ldrb	r3, [r7, #3]
 800a698:	737b      	strb	r3, [r7, #13]
        SX126X_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800a69a:	f107 010c 	add.w	r1, r7, #12
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f97d 	bl	800a9a6 <sx126x_hal_write>
 800a6ac:	4603      	mov	r3, r0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <sx126x_set_tx_params>:

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b086      	sub	sp, #24
 800a6ba:	af02      	add	r7, sp, #8
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	70fb      	strb	r3, [r7, #3]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	70bb      	strb	r3, [r7, #2]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800a6c6:	238e      	movs	r3, #142	@ 0x8e
 800a6c8:	733b      	strb	r3, [r7, #12]
        SX126X_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
 800a6ca:	78fb      	ldrb	r3, [r7, #3]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 800a6cc:	737b      	strb	r3, [r7, #13]
 800a6ce:	78bb      	ldrb	r3, [r7, #2]
 800a6d0:	73bb      	strb	r3, [r7, #14]
        ( uint8_t ) ramp_time,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800a6d2:	f107 010c 	add.w	r1, r7, #12
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	2300      	movs	r3, #0
 800a6dc:	2203      	movs	r2, #3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f961 	bl	800a9a6 <sx126x_hal_write>
 800a6e4:	4603      	mov	r3, r0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <sx126x_set_lora_mod_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_BPSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b086      	sub	sp, #24
 800a6f2:	af02      	add	r7, sp, #8
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a6f8:	238b      	movs	r3, #139	@ 0x8b
 800a6fa:	723b      	strb	r3, [r7, #8]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a700:	727b      	strb	r3, [r7, #9]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	785b      	ldrb	r3, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a706:	72bb      	strb	r3, [r7, #10]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a70c:	72fb      	strb	r3, [r7, #11]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	78db      	ldrb	r3, [r3, #3]
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 800a718:	733b      	strb	r3, [r7, #12]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800a71a:	f107 0108 	add.w	r1, r7, #8
 800a71e:	2300      	movs	r3, #0
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	2300      	movs	r3, #0
 800a724:	2205      	movs	r2, #5
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f93d 	bl	800a9a6 <sx126x_hal_write>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800a730:	7bfb      	ldrb	r3, [r7, #15]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d108      	bne.n	800a748 <sx126x_set_lora_mod_params+0x5a>
    {
        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see datasheet DS_SX1261-2_V1.2 §15.1
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	785b      	ldrb	r3, [r3, #1]
 800a73a:	461a      	mov	r2, r3
 800a73c:	2101      	movs	r1, #1
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f8f4 	bl	800a92c <sx126x_tx_modulation_workaround>
 800a744:	4603      	mov	r3, r0
 800a746:	73fb      	strb	r3, [r7, #15]
        // WORKAROUND END
    }

    return status;
 800a748:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <sx126x_set_lora_pkt_params>:

    return sx126x_write_register( context, 0x00F0, buf2, sizeof( buf2 ) );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b088      	sub	sp, #32
 800a756:	af02      	add	r7, sp, #8
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a75c:	238c      	movs	r3, #140	@ 0x8c
 800a75e:	743b      	strb	r3, [r7, #16]
        SX126X_SET_PKT_PARAMS,
        ( uint8_t )( params->preamble_len_in_symb >> 8 ),
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	881b      	ldrh	r3, [r3, #0]
 800a764:	0a1b      	lsrs	r3, r3, #8
 800a766:	b29b      	uxth	r3, r3
 800a768:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a76a:	747b      	strb	r3, [r7, #17]
        ( uint8_t )( params->preamble_len_in_symb >> 0 ),
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	881b      	ldrh	r3, [r3, #0]
 800a770:	b2db      	uxtb	r3, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a772:	74bb      	strb	r3, [r7, #18]
        ( uint8_t )( params->header_type ),
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	789b      	ldrb	r3, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a778:	74fb      	strb	r3, [r7, #19]
        params->pld_len_in_bytes,
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	78db      	ldrb	r3, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a77e:	753b      	strb	r3, [r7, #20]
        ( uint8_t )( params->crc_is_on ? 1 : 0 ),
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	791b      	ldrb	r3, [r3, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <sx126x_set_lora_pkt_params+0x3a>
 800a788:	2301      	movs	r3, #1
 800a78a:	e000      	b.n	800a78e <sx126x_set_lora_pkt_params+0x3c>
 800a78c:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a78e:	757b      	strb	r3, [r7, #21]
        ( uint8_t )( params->invert_iq_is_on ? 1 : 0 ),
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	795b      	ldrb	r3, [r3, #5]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <sx126x_set_lora_pkt_params+0x4a>
 800a798:	2301      	movs	r3, #1
 800a79a:	e000      	b.n	800a79e <sx126x_set_lora_pkt_params+0x4c>
 800a79c:	2300      	movs	r3, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 800a79e:	75bb      	strb	r3, [r7, #22]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800a7a0:	f107 0110 	add.w	r1, r7, #16
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	2207      	movs	r2, #7
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f8fa 	bl	800a9a6 <sx126x_hal_write>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800a7b6:	7dfb      	ldrb	r3, [r7, #23]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d127      	bne.n	800a80c <sx126x_set_lora_pkt_params+0xba>
    {
        uint8_t reg_value = 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800a7c0:	f107 020f 	add.w	r2, r7, #15
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f240 7136 	movw	r1, #1846	@ 0x736
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f7ff fe82 	bl	800a4d4 <sx126x_read_register>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800a7d4:	7dfb      	ldrb	r3, [r7, #23]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d118      	bne.n	800a80c <sx126x_set_lora_pkt_params+0xba>
        {
            if( params->invert_iq_is_on == true )
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	795b      	ldrb	r3, [r3, #5]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d005      	beq.n	800a7ee <sx126x_set_lora_pkt_params+0x9c>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800a7e2:	7bfb      	ldrb	r3, [r7, #15]
 800a7e4:	f023 0304 	bic.w	r3, r3, #4
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	73fb      	strb	r3, [r7, #15]
 800a7ec:	e004      	b.n	800a7f8 <sx126x_set_lora_pkt_params+0xa6>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	f043 0304 	orr.w	r3, r3, #4
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800a7f8:	f107 020f 	add.w	r2, r7, #15
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f240 7136 	movw	r1, #1846	@ 0x736
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7ff fe43 	bl	800a48e <sx126x_write_register>
 800a808:	4603      	mov	r3, r0
 800a80a:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3718      	adds	r7, #24
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b086      	sub	sp, #24
 800a81a:	af02      	add	r7, sp, #8
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	460b      	mov	r3, r1
 800a820:	70fb      	strb	r3, [r7, #3]
 800a822:	4613      	mov	r3, r2
 800a824:	70bb      	strb	r3, [r7, #2]
    const uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = {
 800a826:	238f      	movs	r3, #143	@ 0x8f
 800a828:	733b      	strb	r3, [r7, #12]
 800a82a:	78fb      	ldrb	r3, [r7, #3]
 800a82c:	737b      	strb	r3, [r7, #13]
 800a82e:	78bb      	ldrb	r3, [r7, #2]
 800a830:	73bb      	strb	r3, [r7, #14]
        SX126X_SET_BUFFER_BASE_ADDRESS,
        tx_base_address,
        rx_base_address,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800a832:	f107 010c 	add.w	r1, r7, #12
 800a836:	2300      	movs	r3, #0
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	2300      	movs	r3, #0
 800a83c:	2203      	movs	r2, #3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f8b1 	bl	800a9a6 <sx126x_hal_write>
 800a844:	4603      	mov	r3, r0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
	...

0800a850 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a0f      	ldr	r2, [pc, #60]	@ (800a898 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a85c:	fba2 2303 	umull	r2, r3, r2, r3
 800a860:	0b1b      	lsrs	r3, r3, #12
 800a862:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f643 5209 	movw	r2, #15625	@ 0x3d09
 800a86a:	fb02 f303 	mul.w	r3, r2, r3
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	039b      	lsls	r3, r3, #14
 800a87c:	f503 53f4 	add.w	r3, r3, #7808	@ 0x1e80
 800a880:	3304      	adds	r3, #4
 800a882:	4905      	ldr	r1, [pc, #20]	@ (800a898 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a884:	fba1 1303 	umull	r1, r3, r1, r3
 800a888:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a88a:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3714      	adds	r7, #20
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	431bde83 	.word	0x431bde83

0800a89c <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	019b      	lsls	r3, r3, #6
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <sx126x_set_lora_sync_word>:

    return status;
}

sx126x_status_t sx126x_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	460b      	mov	r3, r1
 800a8be:	70fb      	strb	r3, [r7, #3]
    uint8_t buffer[2] = { 0x00 };
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	81bb      	strh	r3, [r7, #12]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800a8c4:	f107 020c 	add.w	r2, r7, #12
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7ff fe00 	bl	800a4d4 <sx126x_read_register>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d121      	bne.n	800a922 <sx126x_set_lora_sync_word+0x6e>
    {
        buffer[0] = ( buffer[0] & ~0xF0 ) + ( sync_word & 0xF0 );
 800a8de:	7b3b      	ldrb	r3, [r7, #12]
 800a8e0:	b25b      	sxtb	r3, r3
 800a8e2:	f003 030f 	and.w	r3, r3, #15
 800a8e6:	b25a      	sxtb	r2, r3
 800a8e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8ec:	f023 030f 	bic.w	r3, r3, #15
 800a8f0:	b25b      	sxtb	r3, r3
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	b25b      	sxtb	r3, r3
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	733b      	strb	r3, [r7, #12]
        buffer[1] = ( buffer[1] & ~0xF0 ) + ( ( sync_word & 0x0F ) << 4 );
 800a8fa:	7b7b      	ldrb	r3, [r7, #13]
 800a8fc:	f003 030f 	and.w	r3, r3, #15
 800a900:	b2da      	uxtb	r2, r3
 800a902:	78fb      	ldrb	r3, [r7, #3]
 800a904:	011b      	lsls	r3, r3, #4
 800a906:	b2db      	uxtb	r3, r3
 800a908:	4413      	add	r3, r2
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	737b      	strb	r3, [r7, #13]

        status = sx126x_write_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 800a90e:	f107 020c 	add.w	r2, r7, #12
 800a912:	2302      	movs	r3, #2
 800a914:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7ff fdb8 	bl	800a48e <sx126x_write_register>
 800a91e:	4603      	mov	r3, r0
 800a920:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800a922:	7bfb      	ldrb	r3, [r7, #15]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <sx126x_tx_modulation_workaround>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static sx126x_status_t sx126x_tx_modulation_workaround( const void* context, sx126x_pkt_type_t pkt_type,
                                                        sx126x_lora_bw_t bw )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	460b      	mov	r3, r1
 800a936:	70fb      	strb	r3, [r7, #3]
 800a938:	4613      	mov	r3, r2
 800a93a:	70bb      	strb	r3, [r7, #2]
    uint8_t reg_value = 0;
 800a93c:	2300      	movs	r3, #0
 800a93e:	73bb      	strb	r3, [r7, #14]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800a940:	f107 020e 	add.w	r2, r7, #14
 800a944:	2301      	movs	r3, #1
 800a946:	f640 0189 	movw	r1, #2185	@ 0x889
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7ff fdc2 	bl	800a4d4 <sx126x_read_register>
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800a954:	7bfb      	ldrb	r3, [r7, #15]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d120      	bne.n	800a99c <sx126x_tx_modulation_workaround+0x70>
    {
        if( pkt_type == SX126X_PKT_TYPE_LORA )
 800a95a:	78fb      	ldrb	r3, [r7, #3]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d10e      	bne.n	800a97e <sx126x_tx_modulation_workaround+0x52>
        {
            if( bw == SX126X_LORA_BW_500 )
 800a960:	78bb      	ldrb	r3, [r7, #2]
 800a962:	2b06      	cmp	r3, #6
 800a964:	d105      	bne.n	800a972 <sx126x_tx_modulation_workaround+0x46>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 if the LoRa BW = 500 kHz
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	f023 0304 	bic.w	r3, r3, #4
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	73bb      	strb	r3, [r7, #14]
 800a970:	e00a      	b.n	800a988 <sx126x_tx_modulation_workaround+0x5c>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any other LoRa BW
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	f043 0304 	orr.w	r3, r3, #4
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	73bb      	strb	r3, [r7, #14]
 800a97c:	e004      	b.n	800a988 <sx126x_tx_modulation_workaround+0x5c>
            }
        }
        else
        {
            reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any (G)FSK configuration
 800a97e:	7bbb      	ldrb	r3, [r7, #14]
 800a980:	f043 0304 	orr.w	r3, r3, #4
 800a984:	b2db      	uxtb	r3, r3
 800a986:	73bb      	strb	r3, [r7, #14]
        }

        status = sx126x_write_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 800a988:	f107 020e 	add.w	r2, r7, #14
 800a98c:	2301      	movs	r3, #1
 800a98e:	f640 0189 	movw	r1, #2185	@ 0x889
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f7ff fd7b 	bl	800a48e <sx126x_write_register>
 800a998:	4603      	mov	r3, r0
 800a99a:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 800a99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <sx126x_hal_write>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_write(const void *context,
		const uint8_t *command, const uint16_t command_length,
		const uint8_t *data, const uint16_t data_length) {
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b086      	sub	sp, #24
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	60f8      	str	r0, [r7, #12]
 800a9ae:	60b9      	str	r1, [r7, #8]
 800a9b0:	603b      	str	r3, [r7, #0]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	80fb      	strh	r3, [r7, #6]
	// Cast context
	sx126x_context *ctx = (sx126x_context*) context;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	617b      	str	r3, [r7, #20]

	//Poll the tranmsitters busy pin (active high)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800a9ba:	bf00      	nop
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	689a      	ldr	r2, [r3, #8]
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	899b      	ldrh	r3, [r3, #12]
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4610      	mov	r0, r2
 800a9c8:	f7fa f80e 	bl	80049e8 <HAL_GPIO_ReadPin>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d0f4      	beq.n	800a9bc <sx126x_hal_write+0x16>
	}

	// Activate chip select (active low)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	6818      	ldr	r0, [r3, #0]
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	889b      	ldrh	r3, [r3, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	4619      	mov	r1, r3
 800a9de:	f7fa f81b 	bl	8004a18 <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	6998      	ldr	r0, [r3, #24]
 800a9e6:	88fa      	ldrh	r2, [r7, #6]
 800a9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ec:	68b9      	ldr	r1, [r7, #8]
 800a9ee:	f7fb ffa0 	bl	8006932 <HAL_SPI_Transmit>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d009      	beq.n	800aa0c <sx126x_hal_write+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	6818      	ldr	r0, [r3, #0]
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	889b      	ldrh	r3, [r3, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	4619      	mov	r1, r3
 800aa04:	f7fa f808 	bl	8004a18 <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800aa08:	2303      	movs	r3, #3
 800aa0a:	e023      	b.n	800aa54 <sx126x_hal_write+0xae>
	}

	// Transmit data
	if (data != NULL && data_length > 0) {
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d017      	beq.n	800aa42 <sx126x_hal_write+0x9c>
 800aa12:	8c3b      	ldrh	r3, [r7, #32]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d014      	beq.n	800aa42 <sx126x_hal_write+0x9c>
		if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) data, data_length,
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	6998      	ldr	r0, [r3, #24]
 800aa1c:	8c3a      	ldrh	r2, [r7, #32]
 800aa1e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa22:	6839      	ldr	r1, [r7, #0]
 800aa24:	f7fb ff85 	bl	8006932 <HAL_SPI_Transmit>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d009      	beq.n	800aa42 <sx126x_hal_write+0x9c>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	6818      	ldr	r0, [r3, #0]
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	889b      	ldrh	r3, [r3, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	4619      	mov	r1, r3
 800aa3a:	f7f9 ffed 	bl	8004a18 <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	e008      	b.n	800aa54 <sx126x_hal_write+0xae>
		}
	}

	// Deactivate chip select
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	6818      	ldr	r0, [r3, #0]
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	889b      	ldrh	r3, [r3, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	f7f9 ffe3 	bl	8004a18 <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800aa52:	2300      	movs	r3, #0

}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3718      	adds	r7, #24
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <sx126x_hal_read>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read(const void *context, const uint8_t *command,
		const uint16_t command_length, uint8_t *data,
		const uint16_t data_length) {
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b088      	sub	sp, #32
 800aa60:	af02      	add	r7, sp, #8
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	603b      	str	r3, [r7, #0]
 800aa68:	4613      	mov	r3, r2
 800aa6a:	80fb      	strh	r3, [r7, #6]

	// Cast context to the struct type
	sx126x_context *ctx = (sx126x_context*) context;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	617b      	str	r3, [r7, #20]

	// Activate chip select (active low)
	while (HAL_GPIO_ReadPin(ctx->busy_port, ctx->busy_pin) == GPIO_PIN_SET) {
 800aa70:	bf00      	nop
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	689a      	ldr	r2, [r3, #8]
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	899b      	ldrh	r3, [r3, #12]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	4610      	mov	r0, r2
 800aa7e:	f7f9 ffb3 	bl	80049e8 <HAL_GPIO_ReadPin>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d0f4      	beq.n	800aa72 <sx126x_hal_read+0x16>
	}

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	6818      	ldr	r0, [r3, #0]
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	889b      	ldrh	r3, [r3, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	4619      	mov	r1, r3
 800aa94:	f7f9 ffc0 	bl	8004a18 <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(ctx->hspi, (uint8_t*) command, command_length,
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	6998      	ldr	r0, [r3, #24]
 800aa9c:	88fa      	ldrh	r2, [r7, #6]
 800aa9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa2:	68b9      	ldr	r1, [r7, #8]
 800aaa4:	f7fb ff45 	bl	8006932 <HAL_SPI_Transmit>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d009      	beq.n	800aac2 <sx126x_hal_read+0x66>
	HAL_MAX_DELAY) != HAL_OK) {
		HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	6818      	ldr	r0, [r3, #0]
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	889b      	ldrh	r3, [r3, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	4619      	mov	r1, r3
 800aaba:	f7f9 ffad 	bl	8004a18 <HAL_GPIO_WritePin>
		return SX126X_HAL_STATUS_ERROR;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e028      	b.n	800ab14 <sx126x_hal_read+0xb8>
	}

	// Receive data
	if (data != NULL && data_length > 0) {
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d01c      	beq.n	800ab02 <sx126x_hal_read+0xa6>
 800aac8:	8c3b      	ldrh	r3, [r7, #32]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d019      	beq.n	800ab02 <sx126x_hal_read+0xa6>
		uint8_t dummy_byte = SX126X_NOP;
 800aace:	2300      	movs	r3, #0
 800aad0:	74fb      	strb	r3, [r7, #19]
		if (HAL_SPI_TransmitReceive(ctx->hspi, &dummy_byte, data, data_length,
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	6998      	ldr	r0, [r3, #24]
 800aad6:	8c3b      	ldrh	r3, [r7, #32]
 800aad8:	f107 0113 	add.w	r1, r7, #19
 800aadc:	f04f 32ff 	mov.w	r2, #4294967295
 800aae0:	9200      	str	r2, [sp, #0]
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	f7fc f869 	bl	8006bba <HAL_SPI_TransmitReceive>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d009      	beq.n	800ab02 <sx126x_hal_read+0xa6>
		HAL_MAX_DELAY) != HAL_OK) {
			HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET); // CS high when fail
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	6818      	ldr	r0, [r3, #0]
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	889b      	ldrh	r3, [r3, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	4619      	mov	r1, r3
 800aafa:	f7f9 ff8d 	bl	8004a18 <HAL_GPIO_WritePin>
			return SX126X_HAL_STATUS_ERROR;
 800aafe:	2303      	movs	r3, #3
 800ab00:	e008      	b.n	800ab14 <sx126x_hal_read+0xb8>
		}
	}

	// Deactivate chip select (active high)
	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	6818      	ldr	r0, [r3, #0]
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	889b      	ldrh	r3, [r3, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	f7f9 ff83 	bl	8004a18 <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <sx126x_hal_reset>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_reset(const void *context) {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	60fb      	str	r3, [r7, #12]

	HAL_Delay(10U);
 800ab28:	200a      	movs	r0, #10
 800ab2a:	f7f9 f983 	bl	8003e34 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_RESET);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6918      	ldr	r0, [r3, #16]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	8a9b      	ldrh	r3, [r3, #20]
 800ab36:	2200      	movs	r2, #0
 800ab38:	4619      	mov	r1, r3
 800ab3a:	f7f9 ff6d 	bl	8004a18 <HAL_GPIO_WritePin>
	HAL_Delay(20U);
 800ab3e:	2014      	movs	r0, #20
 800ab40:	f7f9 f978 	bl	8003e34 <HAL_Delay>
	HAL_GPIO_WritePin(ctx->reset_port, ctx->reset_pin, GPIO_PIN_SET);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6918      	ldr	r0, [r3, #16]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	8a9b      	ldrh	r3, [r3, #20]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	4619      	mov	r1, r3
 800ab50:	f7f9 ff62 	bl	8004a18 <HAL_GPIO_WritePin>
	HAL_Delay(10U);
 800ab54:	200a      	movs	r0, #10
 800ab56:	f7f9 f96d 	bl	8003e34 <HAL_Delay>

	return SX126X_HAL_STATUS_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <sx126x_hal_wakeup>:
 *
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_wakeup(const void *context) {
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
	sx126x_context *ctx = (sx126x_context*) context;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6818      	ldr	r0, [r3, #0]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	889b      	ldrh	r3, [r3, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	f7f9 ff4c 	bl	8004a18 <HAL_GPIO_WritePin>

	uint8_t nop_cmd = 0x00;
 800ab80:	2300      	movs	r3, #0
 800ab82:	72fb      	strb	r3, [r7, #11]

	HAL_SPI_Transmit(ctx->hspi, &nop_cmd, 1, HAL_MAX_DELAY);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6998      	ldr	r0, [r3, #24]
 800ab88:	f107 010b 	add.w	r1, r7, #11
 800ab8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab90:	2201      	movs	r2, #1
 800ab92:	f7fb fece 	bl	8006932 <HAL_SPI_Transmit>

	HAL_Delay(3500);
 800ab96:	f640 50ac 	movw	r0, #3500	@ 0xdac
 800ab9a:	f7f9 f94b 	bl	8003e34 <HAL_Delay>

	HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6818      	ldr	r0, [r3, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	889b      	ldrh	r3, [r3, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	4619      	mov	r1, r3
 800abaa:	f7f9 ff35 	bl	8004a18 <HAL_GPIO_WritePin>

	return SX126X_HAL_STATUS_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800abc4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800abc8:	f002 fcf8 	bl	800d5bc <USBD_static_malloc>
 800abcc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d109      	bne.n	800abe8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	32b0      	adds	r2, #176	@ 0xb0
 800abde:	2100      	movs	r1, #0
 800abe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800abe4:	2302      	movs	r3, #2
 800abe6:	e0d4      	b.n	800ad92 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800abe8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800abec:	2100      	movs	r1, #0
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f004 fdb5 	bl	800f75e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	32b0      	adds	r2, #176	@ 0xb0
 800abfe:	68f9      	ldr	r1, [r7, #12]
 800ac00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	32b0      	adds	r2, #176	@ 0xb0
 800ac0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	7c1b      	ldrb	r3, [r3, #16]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d138      	bne.n	800ac92 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac20:	4b5e      	ldr	r3, [pc, #376]	@ (800ad9c <USBD_CDC_Init+0x1e4>)
 800ac22:	7819      	ldrb	r1, [r3, #0]
 800ac24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac28:	2202      	movs	r2, #2
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f002 fba3 	bl	800d376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac30:	4b5a      	ldr	r3, [pc, #360]	@ (800ad9c <USBD_CDC_Init+0x1e4>)
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f003 020f 	and.w	r2, r3, #15
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	440b      	add	r3, r1
 800ac44:	3323      	adds	r3, #35	@ 0x23
 800ac46:	2201      	movs	r2, #1
 800ac48:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac4a:	4b55      	ldr	r3, [pc, #340]	@ (800ada0 <USBD_CDC_Init+0x1e8>)
 800ac4c:	7819      	ldrb	r1, [r3, #0]
 800ac4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac52:	2202      	movs	r2, #2
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f002 fb8e 	bl	800d376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac5a:	4b51      	ldr	r3, [pc, #324]	@ (800ada0 <USBD_CDC_Init+0x1e8>)
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	f003 020f 	and.w	r2, r3, #15
 800ac62:	6879      	ldr	r1, [r7, #4]
 800ac64:	4613      	mov	r3, r2
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	4413      	add	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	440b      	add	r3, r1
 800ac6e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ac72:	2201      	movs	r2, #1
 800ac74:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac76:	4b4b      	ldr	r3, [pc, #300]	@ (800ada4 <USBD_CDC_Init+0x1ec>)
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	f003 020f 	and.w	r2, r3, #15
 800ac7e:	6879      	ldr	r1, [r7, #4]
 800ac80:	4613      	mov	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	440b      	add	r3, r1
 800ac8a:	331c      	adds	r3, #28
 800ac8c:	2210      	movs	r2, #16
 800ac8e:	601a      	str	r2, [r3, #0]
 800ac90:	e035      	b.n	800acfe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac92:	4b42      	ldr	r3, [pc, #264]	@ (800ad9c <USBD_CDC_Init+0x1e4>)
 800ac94:	7819      	ldrb	r1, [r3, #0]
 800ac96:	2340      	movs	r3, #64	@ 0x40
 800ac98:	2202      	movs	r2, #2
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f002 fb6b 	bl	800d376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aca0:	4b3e      	ldr	r3, [pc, #248]	@ (800ad9c <USBD_CDC_Init+0x1e4>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 020f 	and.w	r2, r3, #15
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	440b      	add	r3, r1
 800acb4:	3323      	adds	r3, #35	@ 0x23
 800acb6:	2201      	movs	r2, #1
 800acb8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800acba:	4b39      	ldr	r3, [pc, #228]	@ (800ada0 <USBD_CDC_Init+0x1e8>)
 800acbc:	7819      	ldrb	r1, [r3, #0]
 800acbe:	2340      	movs	r3, #64	@ 0x40
 800acc0:	2202      	movs	r2, #2
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f002 fb57 	bl	800d376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800acc8:	4b35      	ldr	r3, [pc, #212]	@ (800ada0 <USBD_CDC_Init+0x1e8>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	f003 020f 	and.w	r2, r3, #15
 800acd0:	6879      	ldr	r1, [r7, #4]
 800acd2:	4613      	mov	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	440b      	add	r3, r1
 800acdc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ace0:	2201      	movs	r2, #1
 800ace2:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ace4:	4b2f      	ldr	r3, [pc, #188]	@ (800ada4 <USBD_CDC_Init+0x1ec>)
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	f003 020f 	and.w	r2, r3, #15
 800acec:	6879      	ldr	r1, [r7, #4]
 800acee:	4613      	mov	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	440b      	add	r3, r1
 800acf8:	331c      	adds	r3, #28
 800acfa:	2210      	movs	r2, #16
 800acfc:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800acfe:	4b29      	ldr	r3, [pc, #164]	@ (800ada4 <USBD_CDC_Init+0x1ec>)
 800ad00:	7819      	ldrb	r1, [r3, #0]
 800ad02:	2308      	movs	r3, #8
 800ad04:	2203      	movs	r2, #3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f002 fb35 	bl	800d376 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ad0c:	4b25      	ldr	r3, [pc, #148]	@ (800ada4 <USBD_CDC_Init+0x1ec>)
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	f003 020f 	and.w	r2, r3, #15
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	4613      	mov	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	440b      	add	r3, r1
 800ad20:	3323      	adds	r3, #35	@ 0x23
 800ad22:	2201      	movs	r2, #1
 800ad24:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	33b0      	adds	r3, #176	@ 0xb0
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4413      	add	r3, r2
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	e018      	b.n	800ad92 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	7c1b      	ldrb	r3, [r3, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad68:	4b0d      	ldr	r3, [pc, #52]	@ (800ada0 <USBD_CDC_Init+0x1e8>)
 800ad6a:	7819      	ldrb	r1, [r3, #0]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f002 fbec 	bl	800d554 <USBD_LL_PrepareReceive>
 800ad7c:	e008      	b.n	800ad90 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad7e:	4b08      	ldr	r3, [pc, #32]	@ (800ada0 <USBD_CDC_Init+0x1e8>)
 800ad80:	7819      	ldrb	r1, [r3, #0]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad88:	2340      	movs	r3, #64	@ 0x40
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f002 fbe2 	bl	800d554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	2000009f 	.word	0x2000009f
 800ada0:	200000a0 	.word	0x200000a0
 800ada4:	200000a1 	.word	0x200000a1

0800ada8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	460b      	mov	r3, r1
 800adb2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800adb4:	4b3a      	ldr	r3, [pc, #232]	@ (800aea0 <USBD_CDC_DeInit+0xf8>)
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	4619      	mov	r1, r3
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f002 fb01 	bl	800d3c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800adc0:	4b37      	ldr	r3, [pc, #220]	@ (800aea0 <USBD_CDC_DeInit+0xf8>)
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	f003 020f 	and.w	r2, r3, #15
 800adc8:	6879      	ldr	r1, [r7, #4]
 800adca:	4613      	mov	r3, r2
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	4413      	add	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	440b      	add	r3, r1
 800add4:	3323      	adds	r3, #35	@ 0x23
 800add6:	2200      	movs	r2, #0
 800add8:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800adda:	4b32      	ldr	r3, [pc, #200]	@ (800aea4 <USBD_CDC_DeInit+0xfc>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f002 faee 	bl	800d3c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ade6:	4b2f      	ldr	r3, [pc, #188]	@ (800aea4 <USBD_CDC_DeInit+0xfc>)
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	f003 020f 	and.w	r2, r3, #15
 800adee:	6879      	ldr	r1, [r7, #4]
 800adf0:	4613      	mov	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	440b      	add	r3, r1
 800adfa:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800adfe:	2200      	movs	r2, #0
 800ae00:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ae02:	4b29      	ldr	r3, [pc, #164]	@ (800aea8 <USBD_CDC_DeInit+0x100>)
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f002 fada 	bl	800d3c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ae0e:	4b26      	ldr	r3, [pc, #152]	@ (800aea8 <USBD_CDC_DeInit+0x100>)
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	f003 020f 	and.w	r2, r3, #15
 800ae16:	6879      	ldr	r1, [r7, #4]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	440b      	add	r3, r1
 800ae22:	3323      	adds	r3, #35	@ 0x23
 800ae24:	2200      	movs	r2, #0
 800ae26:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae28:	4b1f      	ldr	r3, [pc, #124]	@ (800aea8 <USBD_CDC_DeInit+0x100>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	f003 020f 	and.w	r2, r3, #15
 800ae30:	6879      	ldr	r1, [r7, #4]
 800ae32:	4613      	mov	r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4413      	add	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	440b      	add	r3, r1
 800ae3c:	331c      	adds	r3, #28
 800ae3e:	2200      	movs	r2, #0
 800ae40:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	32b0      	adds	r2, #176	@ 0xb0
 800ae4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d01f      	beq.n	800ae94 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	33b0      	adds	r3, #176	@ 0xb0
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	32b0      	adds	r2, #176	@ 0xb0
 800ae72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f002 fbae 	bl	800d5d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	32b0      	adds	r2, #176	@ 0xb0
 800ae86:	2100      	movs	r1, #0
 800ae88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	2000009f 	.word	0x2000009f
 800aea4:	200000a0 	.word	0x200000a0
 800aea8:	200000a1 	.word	0x200000a1

0800aeac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	32b0      	adds	r2, #176	@ 0xb0
 800aec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aec6:	2300      	movs	r3, #0
 800aec8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aeca:	2300      	movs	r3, #0
 800aecc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aece:	2300      	movs	r3, #0
 800aed0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aed8:	2303      	movs	r3, #3
 800aeda:	e0bf      	b.n	800b05c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d050      	beq.n	800af8a <USBD_CDC_Setup+0xde>
 800aee8:	2b20      	cmp	r3, #32
 800aeea:	f040 80af 	bne.w	800b04c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	88db      	ldrh	r3, [r3, #6]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d03a      	beq.n	800af6c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	b25b      	sxtb	r3, r3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	da1b      	bge.n	800af38 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	33b0      	adds	r3, #176	@ 0xb0
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800af16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	88d2      	ldrh	r2, [r2, #6]
 800af1c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	88db      	ldrh	r3, [r3, #6]
 800af22:	2b07      	cmp	r3, #7
 800af24:	bf28      	it	cs
 800af26:	2307      	movcs	r3, #7
 800af28:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	89fa      	ldrh	r2, [r7, #14]
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f001 fda9 	bl	800ca88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800af36:	e090      	b.n	800b05a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	785a      	ldrb	r2, [r3, #1]
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	88db      	ldrh	r3, [r3, #6]
 800af46:	2b3f      	cmp	r3, #63	@ 0x3f
 800af48:	d803      	bhi.n	800af52 <USBD_CDC_Setup+0xa6>
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	88db      	ldrh	r3, [r3, #6]
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	e000      	b.n	800af54 <USBD_CDC_Setup+0xa8>
 800af52:	2240      	movs	r2, #64	@ 0x40
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af5a:	6939      	ldr	r1, [r7, #16]
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800af62:	461a      	mov	r2, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 fdbe 	bl	800cae6 <USBD_CtlPrepareRx>
      break;
 800af6a:	e076      	b.n	800b05a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	33b0      	adds	r3, #176	@ 0xb0
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4413      	add	r3, r2
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	7850      	ldrb	r0, [r2, #1]
 800af82:	2200      	movs	r2, #0
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	4798      	blx	r3
      break;
 800af88:	e067      	b.n	800b05a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	785b      	ldrb	r3, [r3, #1]
 800af8e:	2b0b      	cmp	r3, #11
 800af90:	d851      	bhi.n	800b036 <USBD_CDC_Setup+0x18a>
 800af92:	a201      	add	r2, pc, #4	@ (adr r2, 800af98 <USBD_CDC_Setup+0xec>)
 800af94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af98:	0800afc9 	.word	0x0800afc9
 800af9c:	0800b045 	.word	0x0800b045
 800afa0:	0800b037 	.word	0x0800b037
 800afa4:	0800b037 	.word	0x0800b037
 800afa8:	0800b037 	.word	0x0800b037
 800afac:	0800b037 	.word	0x0800b037
 800afb0:	0800b037 	.word	0x0800b037
 800afb4:	0800b037 	.word	0x0800b037
 800afb8:	0800b037 	.word	0x0800b037
 800afbc:	0800b037 	.word	0x0800b037
 800afc0:	0800aff3 	.word	0x0800aff3
 800afc4:	0800b01d 	.word	0x0800b01d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d107      	bne.n	800afe4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800afd4:	f107 030a 	add.w	r3, r7, #10
 800afd8:	2202      	movs	r2, #2
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f001 fd53 	bl	800ca88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afe2:	e032      	b.n	800b04a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f001 fcd1 	bl	800c98e <USBD_CtlError>
            ret = USBD_FAIL;
 800afec:	2303      	movs	r3, #3
 800afee:	75fb      	strb	r3, [r7, #23]
          break;
 800aff0:	e02b      	b.n	800b04a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	2b03      	cmp	r3, #3
 800affc:	d107      	bne.n	800b00e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800affe:	f107 030d 	add.w	r3, r7, #13
 800b002:	2201      	movs	r2, #1
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f001 fd3e 	bl	800ca88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b00c:	e01d      	b.n	800b04a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f001 fcbc 	bl	800c98e <USBD_CtlError>
            ret = USBD_FAIL;
 800b016:	2303      	movs	r3, #3
 800b018:	75fb      	strb	r3, [r7, #23]
          break;
 800b01a:	e016      	b.n	800b04a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b03      	cmp	r3, #3
 800b026:	d00f      	beq.n	800b048 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f001 fcaf 	bl	800c98e <USBD_CtlError>
            ret = USBD_FAIL;
 800b030:	2303      	movs	r3, #3
 800b032:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b034:	e008      	b.n	800b048 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f001 fca8 	bl	800c98e <USBD_CtlError>
          ret = USBD_FAIL;
 800b03e:	2303      	movs	r3, #3
 800b040:	75fb      	strb	r3, [r7, #23]
          break;
 800b042:	e002      	b.n	800b04a <USBD_CDC_Setup+0x19e>
          break;
 800b044:	bf00      	nop
 800b046:	e008      	b.n	800b05a <USBD_CDC_Setup+0x1ae>
          break;
 800b048:	bf00      	nop
      }
      break;
 800b04a:	e006      	b.n	800b05a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f001 fc9d 	bl	800c98e <USBD_CtlError>
      ret = USBD_FAIL;
 800b054:	2303      	movs	r3, #3
 800b056:	75fb      	strb	r3, [r7, #23]
      break;
 800b058:	bf00      	nop
  }

  return (uint8_t)ret;
 800b05a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3718      	adds	r7, #24
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	460b      	mov	r3, r1
 800b06e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b076:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	32b0      	adds	r2, #176	@ 0xb0
 800b082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d101      	bne.n	800b08e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b08a:	2303      	movs	r3, #3
 800b08c:	e065      	b.n	800b15a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	32b0      	adds	r2, #176	@ 0xb0
 800b098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b09e:	78fb      	ldrb	r3, [r7, #3]
 800b0a0:	f003 020f 	and.w	r2, r3, #15
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	440b      	add	r3, r1
 800b0b0:	3314      	adds	r3, #20
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d02f      	beq.n	800b118 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b0b8:	78fb      	ldrb	r3, [r7, #3]
 800b0ba:	f003 020f 	and.w	r2, r3, #15
 800b0be:	6879      	ldr	r1, [r7, #4]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	4413      	add	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	440b      	add	r3, r1
 800b0ca:	3314      	adds	r3, #20
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	78fb      	ldrb	r3, [r7, #3]
 800b0d0:	f003 010f 	and.w	r1, r3, #15
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	00db      	lsls	r3, r3, #3
 800b0da:	440b      	add	r3, r1
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4403      	add	r3, r0
 800b0e0:	331c      	adds	r3, #28
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0e8:	fb01 f303 	mul.w	r3, r1, r3
 800b0ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d112      	bne.n	800b118 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b0f2:	78fb      	ldrb	r3, [r7, #3]
 800b0f4:	f003 020f 	and.w	r2, r3, #15
 800b0f8:	6879      	ldr	r1, [r7, #4]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	4413      	add	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	440b      	add	r3, r1
 800b104:	3314      	adds	r3, #20
 800b106:	2200      	movs	r2, #0
 800b108:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b10a:	78f9      	ldrb	r1, [r7, #3]
 800b10c:	2300      	movs	r3, #0
 800b10e:	2200      	movs	r2, #0
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f002 f9fe 	bl	800d512 <USBD_LL_Transmit>
 800b116:	e01f      	b.n	800b158 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	33b0      	adds	r3, #176	@ 0xb0
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	4413      	add	r3, r2
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d010      	beq.n	800b158 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	33b0      	adds	r3, #176	@ 0xb0
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4413      	add	r3, r2
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b154:	78fa      	ldrb	r2, [r7, #3]
 800b156:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	460b      	mov	r3, r1
 800b16c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	32b0      	adds	r2, #176	@ 0xb0
 800b178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b17c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	32b0      	adds	r2, #176	@ 0xb0
 800b188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b190:	2303      	movs	r3, #3
 800b192:	e01a      	b.n	800b1ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f002 f9fc 	bl	800d596 <USBD_LL_GetRxDataSize>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	33b0      	adds	r3, #176	@ 0xb0
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	4413      	add	r3, r2
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	32b0      	adds	r2, #176	@ 0xb0
 800b1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d101      	bne.n	800b1f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1f0:	2303      	movs	r3, #3
 800b1f2:	e024      	b.n	800b23e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	33b0      	adds	r3, #176	@ 0xb0
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4413      	add	r3, r2
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d019      	beq.n	800b23c <USBD_CDC_EP0_RxReady+0x6a>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b20e:	2bff      	cmp	r3, #255	@ 0xff
 800b210:	d014      	beq.n	800b23c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	33b0      	adds	r3, #176	@ 0xb0
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4413      	add	r3, r2
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b22a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b232:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	22ff      	movs	r2, #255	@ 0xff
 800b238:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
	...

0800b248 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b250:	2182      	movs	r1, #130	@ 0x82
 800b252:	4818      	ldr	r0, [pc, #96]	@ (800b2b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b254:	f000 fd62 	bl	800bd1c <USBD_GetEpDesc>
 800b258:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b25a:	2101      	movs	r1, #1
 800b25c:	4815      	ldr	r0, [pc, #84]	@ (800b2b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b25e:	f000 fd5d 	bl	800bd1c <USBD_GetEpDesc>
 800b262:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b264:	2181      	movs	r1, #129	@ 0x81
 800b266:	4813      	ldr	r0, [pc, #76]	@ (800b2b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b268:	f000 fd58 	bl	800bd1c <USBD_GetEpDesc>
 800b26c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d002      	beq.n	800b27a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	2210      	movs	r2, #16
 800b278:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d006      	beq.n	800b28e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	2200      	movs	r2, #0
 800b284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b288:	711a      	strb	r2, [r3, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d006      	beq.n	800b2a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2200      	movs	r2, #0
 800b298:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b29c:	711a      	strb	r2, [r3, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2243      	movs	r2, #67	@ 0x43
 800b2a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2a8:	4b02      	ldr	r3, [pc, #8]	@ (800b2b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3718      	adds	r7, #24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	2000005c 	.word	0x2000005c

0800b2b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2c0:	2182      	movs	r1, #130	@ 0x82
 800b2c2:	4818      	ldr	r0, [pc, #96]	@ (800b324 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2c4:	f000 fd2a 	bl	800bd1c <USBD_GetEpDesc>
 800b2c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	4815      	ldr	r0, [pc, #84]	@ (800b324 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2ce:	f000 fd25 	bl	800bd1c <USBD_GetEpDesc>
 800b2d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2d4:	2181      	movs	r1, #129	@ 0x81
 800b2d6:	4813      	ldr	r0, [pc, #76]	@ (800b324 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2d8:	f000 fd20 	bl	800bd1c <USBD_GetEpDesc>
 800b2dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	2210      	movs	r2, #16
 800b2e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d006      	beq.n	800b2fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	711a      	strb	r2, [r3, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f042 0202 	orr.w	r2, r2, #2
 800b2fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d006      	beq.n	800b312 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	711a      	strb	r2, [r3, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f042 0202 	orr.w	r2, r2, #2
 800b310:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2243      	movs	r2, #67	@ 0x43
 800b316:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b318:	4b02      	ldr	r3, [pc, #8]	@ (800b324 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	2000005c 	.word	0x2000005c

0800b328 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b330:	2182      	movs	r1, #130	@ 0x82
 800b332:	4818      	ldr	r0, [pc, #96]	@ (800b394 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b334:	f000 fcf2 	bl	800bd1c <USBD_GetEpDesc>
 800b338:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b33a:	2101      	movs	r1, #1
 800b33c:	4815      	ldr	r0, [pc, #84]	@ (800b394 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b33e:	f000 fced 	bl	800bd1c <USBD_GetEpDesc>
 800b342:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b344:	2181      	movs	r1, #129	@ 0x81
 800b346:	4813      	ldr	r0, [pc, #76]	@ (800b394 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b348:	f000 fce8 	bl	800bd1c <USBD_GetEpDesc>
 800b34c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d002      	beq.n	800b35a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2210      	movs	r2, #16
 800b358:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d006      	beq.n	800b36e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	2200      	movs	r2, #0
 800b364:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b368:	711a      	strb	r2, [r3, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d006      	beq.n	800b382 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b37c:	711a      	strb	r2, [r3, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2243      	movs	r2, #67	@ 0x43
 800b386:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b388:	4b02      	ldr	r3, [pc, #8]	@ (800b394 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3718      	adds	r7, #24
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	2000005c 	.word	0x2000005c

0800b398 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	220a      	movs	r2, #10
 800b3a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b3a6:	4b03      	ldr	r3, [pc, #12]	@ (800b3b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	20000018 	.word	0x20000018

0800b3b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d101      	bne.n	800b3cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	e009      	b.n	800b3e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	33b0      	adds	r3, #176	@ 0xb0
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b087      	sub	sp, #28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	32b0      	adds	r2, #176	@ 0xb0
 800b402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b406:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d101      	bne.n	800b412 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b40e:	2303      	movs	r3, #3
 800b410:	e008      	b.n	800b424 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	371c      	adds	r7, #28
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	32b0      	adds	r2, #176	@ 0xb0
 800b444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b448:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d101      	bne.n	800b454 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b450:	2303      	movs	r3, #3
 800b452:	e004      	b.n	800b45e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	683a      	ldr	r2, [r7, #0]
 800b458:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3714      	adds	r7, #20
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr
	...

0800b46c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	32b0      	adds	r2, #176	@ 0xb0
 800b47e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b482:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b484:	2301      	movs	r3, #1
 800b486:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b48e:	2303      	movs	r3, #3
 800b490:	e025      	b.n	800b4de <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d11f      	bne.n	800b4dc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b4a4:	4b10      	ldr	r3, [pc, #64]	@ (800b4e8 <USBD_CDC_TransmitPacket+0x7c>)
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	f003 020f 	and.w	r2, r3, #15
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4413      	add	r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	4403      	add	r3, r0
 800b4be:	3314      	adds	r3, #20
 800b4c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b4c2:	4b09      	ldr	r3, [pc, #36]	@ (800b4e8 <USBD_CDC_TransmitPacket+0x7c>)
 800b4c4:	7819      	ldrb	r1, [r3, #0]
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f002 f81d 	bl	800d512 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	2000009f 	.word	0x2000009f

0800b4ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	32b0      	adds	r2, #176	@ 0xb0
 800b4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b502:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	32b0      	adds	r2, #176	@ 0xb0
 800b50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d101      	bne.n	800b51a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b516:	2303      	movs	r3, #3
 800b518:	e018      	b.n	800b54c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	7c1b      	ldrb	r3, [r3, #16]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10a      	bne.n	800b538 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b522:	4b0c      	ldr	r3, [pc, #48]	@ (800b554 <USBD_CDC_ReceivePacket+0x68>)
 800b524:	7819      	ldrb	r1, [r3, #0]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b52c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f002 f80f 	bl	800d554 <USBD_LL_PrepareReceive>
 800b536:	e008      	b.n	800b54a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b538:	4b06      	ldr	r3, [pc, #24]	@ (800b554 <USBD_CDC_ReceivePacket+0x68>)
 800b53a:	7819      	ldrb	r1, [r3, #0]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b542:	2340      	movs	r3, #64	@ 0x40
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f002 f805 	bl	800d554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	200000a0 	.word	0x200000a0

0800b558 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	4613      	mov	r3, r2
 800b564:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d101      	bne.n	800b570 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b56c:	2303      	movs	r3, #3
 800b56e:	e01f      	b.n	800b5b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d003      	beq.n	800b596 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	79fa      	ldrb	r2, [r7, #7]
 800b5a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f001 fe7f 	bl	800d2a8 <USBD_LL_Init>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d101      	bne.n	800b5d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	e025      	b.n	800b61c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	32ae      	adds	r2, #174	@ 0xae
 800b5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00f      	beq.n	800b60c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	32ae      	adds	r2, #174	@ 0xae
 800b5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5fc:	f107 020e 	add.w	r2, r7, #14
 800b600:	4610      	mov	r0, r2
 800b602:	4798      	blx	r3
 800b604:	4602      	mov	r2, r0
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f001 fe87 	bl	800d340 <USBD_LL_Start>
 800b632:	4603      	mov	r3, r0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b644:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b646:	4618      	mov	r0, r3
 800b648:	370c      	adds	r7, #12
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b084      	sub	sp, #16
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	460b      	mov	r3, r1
 800b65c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d009      	beq.n	800b680 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	78fa      	ldrb	r2, [r7, #3]
 800b676:	4611      	mov	r1, r2
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	4798      	blx	r3
 800b67c:	4603      	mov	r3, r0
 800b67e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b680:	7bfb      	ldrb	r3, [r7, #15]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b084      	sub	sp, #16
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	460b      	mov	r3, r1
 800b694:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	78fa      	ldrb	r2, [r7, #3]
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	4798      	blx	r3
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
 800b6c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6ce:	6839      	ldr	r1, [r7, #0]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f001 f922 	bl	800c91a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6f2:	f003 031f 	and.w	r3, r3, #31
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d01a      	beq.n	800b730 <USBD_LL_SetupStage+0x72>
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d822      	bhi.n	800b744 <USBD_LL_SetupStage+0x86>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <USBD_LL_SetupStage+0x4a>
 800b702:	2b01      	cmp	r3, #1
 800b704:	d00a      	beq.n	800b71c <USBD_LL_SetupStage+0x5e>
 800b706:	e01d      	b.n	800b744 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fb77 	bl	800be04 <USBD_StdDevReq>
 800b716:	4603      	mov	r3, r0
 800b718:	73fb      	strb	r3, [r7, #15]
      break;
 800b71a:	e020      	b.n	800b75e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b722:	4619      	mov	r1, r3
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fbdf 	bl	800bee8 <USBD_StdItfReq>
 800b72a:	4603      	mov	r3, r0
 800b72c:	73fb      	strb	r3, [r7, #15]
      break;
 800b72e:	e016      	b.n	800b75e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b736:	4619      	mov	r1, r3
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fc41 	bl	800bfc0 <USBD_StdEPReq>
 800b73e:	4603      	mov	r3, r0
 800b740:	73fb      	strb	r3, [r7, #15]
      break;
 800b742:	e00c      	b.n	800b75e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b74a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f001 fe54 	bl	800d400 <USBD_LL_StallEP>
 800b758:	4603      	mov	r3, r0
 800b75a:	73fb      	strb	r3, [r7, #15]
      break;
 800b75c:	bf00      	nop
  }

  return ret;
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	460b      	mov	r3, r1
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b77a:	7afb      	ldrb	r3, [r7, #11]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d177      	bne.n	800b870 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b786:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b78e:	2b03      	cmp	r3, #3
 800b790:	f040 80a1 	bne.w	800b8d6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	693a      	ldr	r2, [r7, #16]
 800b79a:	8992      	ldrh	r2, [r2, #12]
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d91c      	bls.n	800b7da <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	693a      	ldr	r2, [r7, #16]
 800b7a6:	8992      	ldrh	r2, [r2, #12]
 800b7a8:	1a9a      	subs	r2, r3, r2
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	693a      	ldr	r2, [r7, #16]
 800b7b4:	8992      	ldrh	r2, [r2, #12]
 800b7b6:	441a      	add	r2, r3
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	6919      	ldr	r1, [r3, #16]
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	899b      	ldrh	r3, [r3, #12]
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	bf38      	it	cc
 800b7ce:	4613      	movcc	r3, r2
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f001 f9a8 	bl	800cb28 <USBD_CtlContinueRx>
 800b7d8:	e07d      	b.n	800b8d6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7e0:	f003 031f 	and.w	r3, r3, #31
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d014      	beq.n	800b812 <USBD_LL_DataOutStage+0xaa>
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d81d      	bhi.n	800b828 <USBD_LL_DataOutStage+0xc0>
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <USBD_LL_DataOutStage+0x8e>
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d003      	beq.n	800b7fc <USBD_LL_DataOutStage+0x94>
 800b7f4:	e018      	b.n	800b828 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	75bb      	strb	r3, [r7, #22]
            break;
 800b7fa:	e018      	b.n	800b82e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b802:	b2db      	uxtb	r3, r3
 800b804:	4619      	mov	r1, r3
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f000 fa6e 	bl	800bce8 <USBD_CoreFindIF>
 800b80c:	4603      	mov	r3, r0
 800b80e:	75bb      	strb	r3, [r7, #22]
            break;
 800b810:	e00d      	b.n	800b82e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	4619      	mov	r1, r3
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f000 fa70 	bl	800bd02 <USBD_CoreFindEP>
 800b822:	4603      	mov	r3, r0
 800b824:	75bb      	strb	r3, [r7, #22]
            break;
 800b826:	e002      	b.n	800b82e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b828:	2300      	movs	r3, #0
 800b82a:	75bb      	strb	r3, [r7, #22]
            break;
 800b82c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b82e:	7dbb      	ldrb	r3, [r7, #22]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d119      	bne.n	800b868 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	2b03      	cmp	r3, #3
 800b83e:	d113      	bne.n	800b868 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b840:	7dba      	ldrb	r2, [r7, #22]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	32ae      	adds	r2, #174	@ 0xae
 800b846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00b      	beq.n	800b868 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800b850:	7dba      	ldrb	r2, [r7, #22]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b858:	7dba      	ldrb	r2, [r7, #22]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	32ae      	adds	r2, #174	@ 0xae
 800b85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f001 f96e 	bl	800cb4a <USBD_CtlSendStatus>
 800b86e:	e032      	b.n	800b8d6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b870:	7afb      	ldrb	r3, [r7, #11]
 800b872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b876:	b2db      	uxtb	r3, r3
 800b878:	4619      	mov	r1, r3
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 fa41 	bl	800bd02 <USBD_CoreFindEP>
 800b880:	4603      	mov	r3, r0
 800b882:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b884:	7dbb      	ldrb	r3, [r7, #22]
 800b886:	2bff      	cmp	r3, #255	@ 0xff
 800b888:	d025      	beq.n	800b8d6 <USBD_LL_DataOutStage+0x16e>
 800b88a:	7dbb      	ldrb	r3, [r7, #22]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d122      	bne.n	800b8d6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b896:	b2db      	uxtb	r3, r3
 800b898:	2b03      	cmp	r3, #3
 800b89a:	d117      	bne.n	800b8cc <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b89c:	7dba      	ldrb	r2, [r7, #22]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	32ae      	adds	r2, #174	@ 0xae
 800b8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00f      	beq.n	800b8cc <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800b8ac:	7dba      	ldrb	r2, [r7, #22]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b8b4:	7dba      	ldrb	r2, [r7, #22]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	32ae      	adds	r2, #174	@ 0xae
 800b8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	7afa      	ldrb	r2, [r7, #11]
 800b8c2:	4611      	mov	r1, r2
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	4798      	blx	r3
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d001      	beq.n	800b8d6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	e000      	b.n	800b8d8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	607a      	str	r2, [r7, #4]
 800b8ec:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b8ee:	7afb      	ldrb	r3, [r7, #11]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d178      	bne.n	800b9e6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	3314      	adds	r3, #20
 800b8f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b900:	2b02      	cmp	r3, #2
 800b902:	d163      	bne.n	800b9cc <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	693a      	ldr	r2, [r7, #16]
 800b90a:	8992      	ldrh	r2, [r2, #12]
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d91c      	bls.n	800b94a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	8992      	ldrh	r2, [r2, #12]
 800b918:	1a9a      	subs	r2, r3, r2
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	691b      	ldr	r3, [r3, #16]
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	8992      	ldrh	r2, [r2, #12]
 800b926:	441a      	add	r2, r3
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6919      	ldr	r1, [r3, #16]
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	461a      	mov	r2, r3
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f001 f8c4 	bl	800cac4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b93c:	2300      	movs	r3, #0
 800b93e:	2200      	movs	r2, #0
 800b940:	2100      	movs	r1, #0
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f001 fe06 	bl	800d554 <USBD_LL_PrepareReceive>
 800b948:	e040      	b.n	800b9cc <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	899b      	ldrh	r3, [r3, #12]
 800b94e:	461a      	mov	r2, r3
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	429a      	cmp	r2, r3
 800b956:	d11c      	bne.n	800b992 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	693a      	ldr	r2, [r7, #16]
 800b95e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b960:	4293      	cmp	r3, r2
 800b962:	d316      	bcc.n	800b992 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b96e:	429a      	cmp	r2, r3
 800b970:	d20f      	bcs.n	800b992 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b972:	2200      	movs	r2, #0
 800b974:	2100      	movs	r1, #0
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f001 f8a4 	bl	800cac4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b984:	2300      	movs	r3, #0
 800b986:	2200      	movs	r2, #0
 800b988:	2100      	movs	r1, #0
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f001 fde2 	bl	800d554 <USBD_LL_PrepareReceive>
 800b990:	e01c      	b.n	800b9cc <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	d10f      	bne.n	800b9be <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d009      	beq.n	800b9be <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9be:	2180      	movs	r1, #128	@ 0x80
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f001 fd1d 	bl	800d400 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f001 f8d2 	bl	800cb70 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d03a      	beq.n	800ba4c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f7ff fe30 	bl	800b63c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b9e4:	e032      	b.n	800ba4c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9e6:	7afb      	ldrb	r3, [r7, #11]
 800b9e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f000 f986 	bl	800bd02 <USBD_CoreFindEP>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
 800b9fc:	2bff      	cmp	r3, #255	@ 0xff
 800b9fe:	d025      	beq.n	800ba4c <USBD_LL_DataInStage+0x16c>
 800ba00:	7dfb      	ldrb	r3, [r7, #23]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d122      	bne.n	800ba4c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	d11c      	bne.n	800ba4c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ba12:	7dfa      	ldrb	r2, [r7, #23]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	32ae      	adds	r2, #174	@ 0xae
 800ba18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d014      	beq.n	800ba4c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800ba22:	7dfa      	ldrb	r2, [r7, #23]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba2a:	7dfa      	ldrb	r2, [r7, #23]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	32ae      	adds	r2, #174	@ 0xae
 800ba30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba34:	695b      	ldr	r3, [r3, #20]
 800ba36:	7afa      	ldrb	r2, [r7, #11]
 800ba38:	4611      	mov	r1, r2
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	4798      	blx	r3
 800ba3e:	4603      	mov	r3, r0
 800ba40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba42:	7dbb      	ldrb	r3, [r7, #22]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800ba48:	7dbb      	ldrb	r3, [r7, #22]
 800ba4a:	e000      	b.n	800ba4e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3718      	adds	r7, #24
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d014      	beq.n	800babc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00e      	beq.n	800babc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	6852      	ldr	r2, [r2, #4]
 800baaa:	b2d2      	uxtb	r2, r2
 800baac:	4611      	mov	r1, r2
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	4798      	blx	r3
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bab8:	2303      	movs	r3, #3
 800baba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800babc:	2340      	movs	r3, #64	@ 0x40
 800babe:	2200      	movs	r2, #0
 800bac0:	2100      	movs	r1, #0
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f001 fc57 	bl	800d376 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2240      	movs	r2, #64	@ 0x40
 800bad4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bad8:	2340      	movs	r3, #64	@ 0x40
 800bada:	2200      	movs	r2, #0
 800badc:	2180      	movs	r1, #128	@ 0x80
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f001 fc49 	bl	800d376 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2240      	movs	r2, #64	@ 0x40
 800baf0:	841a      	strh	r2, [r3, #32]

  return ret;
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3710      	adds	r7, #16
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	460b      	mov	r3, r1
 800bb06:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	78fa      	ldrb	r2, [r7, #3]
 800bb0c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	2b04      	cmp	r3, #4
 800bb2e:	d006      	beq.n	800bb3e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2204      	movs	r2, #4
 800bb42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	2b04      	cmp	r3, #4
 800bb66:	d106      	bne.n	800bb76 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	2b03      	cmp	r3, #3
 800bb96:	d110      	bne.n	800bbba <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00b      	beq.n	800bbba <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bba8:	69db      	ldr	r3, [r3, #28]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d005      	beq.n	800bbba <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbb4:	69db      	ldr	r3, [r3, #28]
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	460b      	mov	r3, r1
 800bbce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	32ae      	adds	r2, #174	@ 0xae
 800bbda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbe2:	2303      	movs	r3, #3
 800bbe4:	e01c      	b.n	800bc20 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	2b03      	cmp	r3, #3
 800bbf0:	d115      	bne.n	800bc1e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	32ae      	adds	r2, #174	@ 0xae
 800bbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc00:	6a1b      	ldr	r3, [r3, #32]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d00b      	beq.n	800bc1e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	32ae      	adds	r2, #174	@ 0xae
 800bc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc14:	6a1b      	ldr	r3, [r3, #32]
 800bc16:	78fa      	ldrb	r2, [r7, #3]
 800bc18:	4611      	mov	r1, r2
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	460b      	mov	r3, r1
 800bc32:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	32ae      	adds	r2, #174	@ 0xae
 800bc3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d101      	bne.n	800bc4a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc46:	2303      	movs	r3, #3
 800bc48:	e01c      	b.n	800bc84 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	2b03      	cmp	r3, #3
 800bc54:	d115      	bne.n	800bc82 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	32ae      	adds	r2, #174	@ 0xae
 800bc60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00b      	beq.n	800bc82 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	32ae      	adds	r2, #174	@ 0xae
 800bc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc7a:	78fa      	ldrb	r2, [r7, #3]
 800bc7c:	4611      	mov	r1, r2
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b084      	sub	sp, #16
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00e      	beq.n	800bcde <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	6852      	ldr	r2, [r2, #4]
 800bccc:	b2d2      	uxtb	r2, r2
 800bcce:	4611      	mov	r1, r2
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	4798      	blx	r3
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcde:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcf4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd02:	b480      	push	{r7}
 800bd04:	b083      	sub	sp, #12
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd0e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	460b      	mov	r3, r1
 800bd26:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd30:	2300      	movs	r3, #0
 800bd32:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	885b      	ldrh	r3, [r3, #2]
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	7812      	ldrb	r2, [r2, #0]
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d91f      	bls.n	800bd82 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd48:	e013      	b.n	800bd72 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd4a:	f107 030a 	add.w	r3, r7, #10
 800bd4e:	4619      	mov	r1, r3
 800bd50:	6978      	ldr	r0, [r7, #20]
 800bd52:	f000 f81b 	bl	800bd8c <USBD_GetNextDesc>
 800bd56:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	785b      	ldrb	r3, [r3, #1]
 800bd5c:	2b05      	cmp	r3, #5
 800bd5e:	d108      	bne.n	800bd72 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	789b      	ldrb	r3, [r3, #2]
 800bd68:	78fa      	ldrb	r2, [r7, #3]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d008      	beq.n	800bd80 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	885b      	ldrh	r3, [r3, #2]
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	897b      	ldrh	r3, [r7, #10]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d8e5      	bhi.n	800bd4a <USBD_GetEpDesc+0x2e>
 800bd7e:	e000      	b.n	800bd82 <USBD_GetEpDesc+0x66>
          break;
 800bd80:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd82:	693b      	ldr	r3, [r7, #16]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3718      	adds	r7, #24
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	881b      	ldrh	r3, [r3, #0]
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	7812      	ldrb	r2, [r2, #0]
 800bda2:	4413      	add	r3, r2
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b087      	sub	sp, #28
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bde2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bde6:	021b      	lsls	r3, r3, #8
 800bde8:	b21a      	sxth	r2, r3
 800bdea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	b21b      	sxth	r3, r3
 800bdf2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bdf4:	89fb      	ldrh	r3, [r7, #14]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	371c      	adds	r7, #28
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
	...

0800be04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be0e:	2300      	movs	r3, #0
 800be10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be1a:	2b40      	cmp	r3, #64	@ 0x40
 800be1c:	d005      	beq.n	800be2a <USBD_StdDevReq+0x26>
 800be1e:	2b40      	cmp	r3, #64	@ 0x40
 800be20:	d857      	bhi.n	800bed2 <USBD_StdDevReq+0xce>
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00f      	beq.n	800be46 <USBD_StdDevReq+0x42>
 800be26:	2b20      	cmp	r3, #32
 800be28:	d153      	bne.n	800bed2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	32ae      	adds	r2, #174	@ 0xae
 800be34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	4798      	blx	r3
 800be40:	4603      	mov	r3, r0
 800be42:	73fb      	strb	r3, [r7, #15]
      break;
 800be44:	e04a      	b.n	800bedc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	785b      	ldrb	r3, [r3, #1]
 800be4a:	2b09      	cmp	r3, #9
 800be4c:	d83b      	bhi.n	800bec6 <USBD_StdDevReq+0xc2>
 800be4e:	a201      	add	r2, pc, #4	@ (adr r2, 800be54 <USBD_StdDevReq+0x50>)
 800be50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be54:	0800bea9 	.word	0x0800bea9
 800be58:	0800bebd 	.word	0x0800bebd
 800be5c:	0800bec7 	.word	0x0800bec7
 800be60:	0800beb3 	.word	0x0800beb3
 800be64:	0800bec7 	.word	0x0800bec7
 800be68:	0800be87 	.word	0x0800be87
 800be6c:	0800be7d 	.word	0x0800be7d
 800be70:	0800bec7 	.word	0x0800bec7
 800be74:	0800be9f 	.word	0x0800be9f
 800be78:	0800be91 	.word	0x0800be91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fa3e 	bl	800c300 <USBD_GetDescriptor>
          break;
 800be84:	e024      	b.n	800bed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be86:	6839      	ldr	r1, [r7, #0]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fba3 	bl	800c5d4 <USBD_SetAddress>
          break;
 800be8e:	e01f      	b.n	800bed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be90:	6839      	ldr	r1, [r7, #0]
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fbe2 	bl	800c65c <USBD_SetConfig>
 800be98:	4603      	mov	r3, r0
 800be9a:	73fb      	strb	r3, [r7, #15]
          break;
 800be9c:	e018      	b.n	800bed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fc85 	bl	800c7b0 <USBD_GetConfig>
          break;
 800bea6:	e013      	b.n	800bed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bea8:	6839      	ldr	r1, [r7, #0]
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fcb6 	bl	800c81c <USBD_GetStatus>
          break;
 800beb0:	e00e      	b.n	800bed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fce5 	bl	800c884 <USBD_SetFeature>
          break;
 800beba:	e009      	b.n	800bed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 fd09 	bl	800c8d6 <USBD_ClrFeature>
          break;
 800bec4:	e004      	b.n	800bed0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 fd60 	bl	800c98e <USBD_CtlError>
          break;
 800bece:	bf00      	nop
      }
      break;
 800bed0:	e004      	b.n	800bedc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fd5a 	bl	800c98e <USBD_CtlError>
      break;
 800beda:	bf00      	nop
  }

  return ret;
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop

0800bee8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bef2:	2300      	movs	r3, #0
 800bef4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800befe:	2b40      	cmp	r3, #64	@ 0x40
 800bf00:	d005      	beq.n	800bf0e <USBD_StdItfReq+0x26>
 800bf02:	2b40      	cmp	r3, #64	@ 0x40
 800bf04:	d852      	bhi.n	800bfac <USBD_StdItfReq+0xc4>
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <USBD_StdItfReq+0x26>
 800bf0a:	2b20      	cmp	r3, #32
 800bf0c:	d14e      	bne.n	800bfac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	3b01      	subs	r3, #1
 800bf18:	2b02      	cmp	r3, #2
 800bf1a:	d840      	bhi.n	800bf9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	889b      	ldrh	r3, [r3, #4]
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d836      	bhi.n	800bf94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	889b      	ldrh	r3, [r3, #4]
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7ff feda 	bl	800bce8 <USBD_CoreFindIF>
 800bf34:	4603      	mov	r3, r0
 800bf36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf38:	7bbb      	ldrb	r3, [r7, #14]
 800bf3a:	2bff      	cmp	r3, #255	@ 0xff
 800bf3c:	d01d      	beq.n	800bf7a <USBD_StdItfReq+0x92>
 800bf3e:	7bbb      	ldrb	r3, [r7, #14]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d11a      	bne.n	800bf7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf44:	7bba      	ldrb	r2, [r7, #14]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	32ae      	adds	r2, #174	@ 0xae
 800bf4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00f      	beq.n	800bf74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf54:	7bba      	ldrb	r2, [r7, #14]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf5c:	7bba      	ldrb	r2, [r7, #14]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	32ae      	adds	r2, #174	@ 0xae
 800bf62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	6839      	ldr	r1, [r7, #0]
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	4798      	blx	r3
 800bf6e:	4603      	mov	r3, r0
 800bf70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf72:	e004      	b.n	800bf7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf74:	2303      	movs	r3, #3
 800bf76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf78:	e001      	b.n	800bf7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	88db      	ldrh	r3, [r3, #6]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d110      	bne.n	800bfa8 <USBD_StdItfReq+0xc0>
 800bf86:	7bfb      	ldrb	r3, [r7, #15]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10d      	bne.n	800bfa8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fddc 	bl	800cb4a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf92:	e009      	b.n	800bfa8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fcf9 	bl	800c98e <USBD_CtlError>
          break;
 800bf9c:	e004      	b.n	800bfa8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf9e:	6839      	ldr	r1, [r7, #0]
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fcf4 	bl	800c98e <USBD_CtlError>
          break;
 800bfa6:	e000      	b.n	800bfaa <USBD_StdItfReq+0xc2>
          break;
 800bfa8:	bf00      	nop
      }
      break;
 800bfaa:	e004      	b.n	800bfb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fced 	bl	800c98e <USBD_CtlError>
      break;
 800bfb4:	bf00      	nop
  }

  return ret;
 800bfb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	889b      	ldrh	r3, [r3, #4]
 800bfd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bfdc:	2b40      	cmp	r3, #64	@ 0x40
 800bfde:	d007      	beq.n	800bff0 <USBD_StdEPReq+0x30>
 800bfe0:	2b40      	cmp	r3, #64	@ 0x40
 800bfe2:	f200 8181 	bhi.w	800c2e8 <USBD_StdEPReq+0x328>
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d02a      	beq.n	800c040 <USBD_StdEPReq+0x80>
 800bfea:	2b20      	cmp	r3, #32
 800bfec:	f040 817c 	bne.w	800c2e8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bff0:	7bbb      	ldrb	r3, [r7, #14]
 800bff2:	4619      	mov	r1, r3
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f7ff fe84 	bl	800bd02 <USBD_CoreFindEP>
 800bffa:	4603      	mov	r3, r0
 800bffc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bffe:	7b7b      	ldrb	r3, [r7, #13]
 800c000:	2bff      	cmp	r3, #255	@ 0xff
 800c002:	f000 8176 	beq.w	800c2f2 <USBD_StdEPReq+0x332>
 800c006:	7b7b      	ldrb	r3, [r7, #13]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f040 8172 	bne.w	800c2f2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c00e:	7b7a      	ldrb	r2, [r7, #13]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c016:	7b7a      	ldrb	r2, [r7, #13]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	32ae      	adds	r2, #174	@ 0xae
 800c01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	2b00      	cmp	r3, #0
 800c024:	f000 8165 	beq.w	800c2f2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c028:	7b7a      	ldrb	r2, [r7, #13]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	32ae      	adds	r2, #174	@ 0xae
 800c02e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	4798      	blx	r3
 800c03a:	4603      	mov	r3, r0
 800c03c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c03e:	e158      	b.n	800c2f2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	785b      	ldrb	r3, [r3, #1]
 800c044:	2b03      	cmp	r3, #3
 800c046:	d008      	beq.n	800c05a <USBD_StdEPReq+0x9a>
 800c048:	2b03      	cmp	r3, #3
 800c04a:	f300 8147 	bgt.w	800c2dc <USBD_StdEPReq+0x31c>
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f000 809b 	beq.w	800c18a <USBD_StdEPReq+0x1ca>
 800c054:	2b01      	cmp	r3, #1
 800c056:	d03c      	beq.n	800c0d2 <USBD_StdEPReq+0x112>
 800c058:	e140      	b.n	800c2dc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c060:	b2db      	uxtb	r3, r3
 800c062:	2b02      	cmp	r3, #2
 800c064:	d002      	beq.n	800c06c <USBD_StdEPReq+0xac>
 800c066:	2b03      	cmp	r3, #3
 800c068:	d016      	beq.n	800c098 <USBD_StdEPReq+0xd8>
 800c06a:	e02c      	b.n	800c0c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c06c:	7bbb      	ldrb	r3, [r7, #14]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00d      	beq.n	800c08e <USBD_StdEPReq+0xce>
 800c072:	7bbb      	ldrb	r3, [r7, #14]
 800c074:	2b80      	cmp	r3, #128	@ 0x80
 800c076:	d00a      	beq.n	800c08e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c078:	7bbb      	ldrb	r3, [r7, #14]
 800c07a:	4619      	mov	r1, r3
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f001 f9bf 	bl	800d400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c082:	2180      	movs	r1, #128	@ 0x80
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f001 f9bb 	bl	800d400 <USBD_LL_StallEP>
 800c08a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c08c:	e020      	b.n	800c0d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 fc7c 	bl	800c98e <USBD_CtlError>
              break;
 800c096:	e01b      	b.n	800c0d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	885b      	ldrh	r3, [r3, #2]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10e      	bne.n	800c0be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0a0:	7bbb      	ldrb	r3, [r7, #14]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00b      	beq.n	800c0be <USBD_StdEPReq+0xfe>
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
 800c0a8:	2b80      	cmp	r3, #128	@ 0x80
 800c0aa:	d008      	beq.n	800c0be <USBD_StdEPReq+0xfe>
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	88db      	ldrh	r3, [r3, #6]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d104      	bne.n	800c0be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0b4:	7bbb      	ldrb	r3, [r7, #14]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f001 f9a1 	bl	800d400 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fd43 	bl	800cb4a <USBD_CtlSendStatus>

              break;
 800c0c4:	e004      	b.n	800c0d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 fc60 	bl	800c98e <USBD_CtlError>
              break;
 800c0ce:	bf00      	nop
          }
          break;
 800c0d0:	e109      	b.n	800c2e6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d002      	beq.n	800c0e4 <USBD_StdEPReq+0x124>
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d016      	beq.n	800c110 <USBD_StdEPReq+0x150>
 800c0e2:	e04b      	b.n	800c17c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0e4:	7bbb      	ldrb	r3, [r7, #14]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00d      	beq.n	800c106 <USBD_StdEPReq+0x146>
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
 800c0ec:	2b80      	cmp	r3, #128	@ 0x80
 800c0ee:	d00a      	beq.n	800c106 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f001 f983 	bl	800d400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0fa:	2180      	movs	r1, #128	@ 0x80
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f001 f97f 	bl	800d400 <USBD_LL_StallEP>
 800c102:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c104:	e040      	b.n	800c188 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fc40 	bl	800c98e <USBD_CtlError>
              break;
 800c10e:	e03b      	b.n	800c188 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	885b      	ldrh	r3, [r3, #2]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d136      	bne.n	800c186 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c118:	7bbb      	ldrb	r3, [r7, #14]
 800c11a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d004      	beq.n	800c12c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c122:	7bbb      	ldrb	r3, [r7, #14]
 800c124:	4619      	mov	r1, r3
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f001 f989 	bl	800d43e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fd0c 	bl	800cb4a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	4619      	mov	r1, r3
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7ff fde3 	bl	800bd02 <USBD_CoreFindEP>
 800c13c:	4603      	mov	r3, r0
 800c13e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c140:	7b7b      	ldrb	r3, [r7, #13]
 800c142:	2bff      	cmp	r3, #255	@ 0xff
 800c144:	d01f      	beq.n	800c186 <USBD_StdEPReq+0x1c6>
 800c146:	7b7b      	ldrb	r3, [r7, #13]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d11c      	bne.n	800c186 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c14c:	7b7a      	ldrb	r2, [r7, #13]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c154:	7b7a      	ldrb	r2, [r7, #13]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	32ae      	adds	r2, #174	@ 0xae
 800c15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d010      	beq.n	800c186 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c164:	7b7a      	ldrb	r2, [r7, #13]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	32ae      	adds	r2, #174	@ 0xae
 800c16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	4798      	blx	r3
 800c176:	4603      	mov	r3, r0
 800c178:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c17a:	e004      	b.n	800c186 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c17c:	6839      	ldr	r1, [r7, #0]
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 fc05 	bl	800c98e <USBD_CtlError>
              break;
 800c184:	e000      	b.n	800c188 <USBD_StdEPReq+0x1c8>
              break;
 800c186:	bf00      	nop
          }
          break;
 800c188:	e0ad      	b.n	800c2e6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c190:	b2db      	uxtb	r3, r3
 800c192:	2b02      	cmp	r3, #2
 800c194:	d002      	beq.n	800c19c <USBD_StdEPReq+0x1dc>
 800c196:	2b03      	cmp	r3, #3
 800c198:	d033      	beq.n	800c202 <USBD_StdEPReq+0x242>
 800c19a:	e099      	b.n	800c2d0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d007      	beq.n	800c1b2 <USBD_StdEPReq+0x1f2>
 800c1a2:	7bbb      	ldrb	r3, [r7, #14]
 800c1a4:	2b80      	cmp	r3, #128	@ 0x80
 800c1a6:	d004      	beq.n	800c1b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fbef 	bl	800c98e <USBD_CtlError>
                break;
 800c1b0:	e093      	b.n	800c2da <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	da0b      	bge.n	800c1d2 <USBD_StdEPReq+0x212>
 800c1ba:	7bbb      	ldrb	r3, [r7, #14]
 800c1bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	3310      	adds	r3, #16
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	e00b      	b.n	800c1ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
 800c1d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1d8:	4613      	mov	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	330e      	adds	r3, #14
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fc44 	bl	800ca88 <USBD_CtlSendData>
              break;
 800c200:	e06b      	b.n	800c2da <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c206:	2b00      	cmp	r3, #0
 800c208:	da11      	bge.n	800c22e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c20a:	7bbb      	ldrb	r3, [r7, #14]
 800c20c:	f003 020f 	and.w	r2, r3, #15
 800c210:	6879      	ldr	r1, [r7, #4]
 800c212:	4613      	mov	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4413      	add	r3, r2
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	440b      	add	r3, r1
 800c21c:	3323      	adds	r3, #35	@ 0x23
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d117      	bne.n	800c254 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fbb1 	bl	800c98e <USBD_CtlError>
                  break;
 800c22c:	e055      	b.n	800c2da <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c22e:	7bbb      	ldrb	r3, [r7, #14]
 800c230:	f003 020f 	and.w	r2, r3, #15
 800c234:	6879      	ldr	r1, [r7, #4]
 800c236:	4613      	mov	r3, r2
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	4413      	add	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	440b      	add	r3, r1
 800c240:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d104      	bne.n	800c254 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c24a:	6839      	ldr	r1, [r7, #0]
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 fb9e 	bl	800c98e <USBD_CtlError>
                  break;
 800c252:	e042      	b.n	800c2da <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c254:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	da0b      	bge.n	800c274 <USBD_StdEPReq+0x2b4>
 800c25c:	7bbb      	ldrb	r3, [r7, #14]
 800c25e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c262:	4613      	mov	r3, r2
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	3310      	adds	r3, #16
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	4413      	add	r3, r2
 800c270:	3304      	adds	r3, #4
 800c272:	e00b      	b.n	800c28c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c274:	7bbb      	ldrb	r3, [r7, #14]
 800c276:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c27a:	4613      	mov	r3, r2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4413      	add	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	4413      	add	r3, r2
 800c28a:	3304      	adds	r3, #4
 800c28c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c28e:	7bbb      	ldrb	r3, [r7, #14]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d002      	beq.n	800c29a <USBD_StdEPReq+0x2da>
 800c294:	7bbb      	ldrb	r3, [r7, #14]
 800c296:	2b80      	cmp	r3, #128	@ 0x80
 800c298:	d103      	bne.n	800c2a2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2200      	movs	r2, #0
 800c29e:	739a      	strb	r2, [r3, #14]
 800c2a0:	e00e      	b.n	800c2c0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c2a2:	7bbb      	ldrb	r3, [r7, #14]
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f001 f8e8 	bl	800d47c <USBD_LL_IsStallEP>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	739a      	strb	r2, [r3, #14]
 800c2b8:	e002      	b.n	800c2c0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	330e      	adds	r3, #14
 800c2c4:	2202      	movs	r2, #2
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fbdd 	bl	800ca88 <USBD_CtlSendData>
              break;
 800c2ce:	e004      	b.n	800c2da <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 fb5b 	bl	800c98e <USBD_CtlError>
              break;
 800c2d8:	bf00      	nop
          }
          break;
 800c2da:	e004      	b.n	800c2e6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fb55 	bl	800c98e <USBD_CtlError>
          break;
 800c2e4:	bf00      	nop
      }
      break;
 800c2e6:	e005      	b.n	800c2f4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 fb4f 	bl	800c98e <USBD_CtlError>
      break;
 800c2f0:	e000      	b.n	800c2f4 <USBD_StdEPReq+0x334>
      break;
 800c2f2:	bf00      	nop
  }

  return ret;
 800c2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
	...

0800c300 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c30a:	2300      	movs	r3, #0
 800c30c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c30e:	2300      	movs	r3, #0
 800c310:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c312:	2300      	movs	r3, #0
 800c314:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	885b      	ldrh	r3, [r3, #2]
 800c31a:	0a1b      	lsrs	r3, r3, #8
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	3b01      	subs	r3, #1
 800c320:	2b06      	cmp	r3, #6
 800c322:	f200 8128 	bhi.w	800c576 <USBD_GetDescriptor+0x276>
 800c326:	a201      	add	r2, pc, #4	@ (adr r2, 800c32c <USBD_GetDescriptor+0x2c>)
 800c328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c32c:	0800c349 	.word	0x0800c349
 800c330:	0800c361 	.word	0x0800c361
 800c334:	0800c3a1 	.word	0x0800c3a1
 800c338:	0800c577 	.word	0x0800c577
 800c33c:	0800c577 	.word	0x0800c577
 800c340:	0800c517 	.word	0x0800c517
 800c344:	0800c543 	.word	0x0800c543
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	7c12      	ldrb	r2, [r2, #16]
 800c354:	f107 0108 	add.w	r1, r7, #8
 800c358:	4610      	mov	r0, r2
 800c35a:	4798      	blx	r3
 800c35c:	60f8      	str	r0, [r7, #12]
      break;
 800c35e:	e112      	b.n	800c586 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	7c1b      	ldrb	r3, [r3, #16]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d10d      	bne.n	800c384 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c36e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c370:	f107 0208 	add.w	r2, r7, #8
 800c374:	4610      	mov	r0, r2
 800c376:	4798      	blx	r3
 800c378:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3301      	adds	r3, #1
 800c37e:	2202      	movs	r2, #2
 800c380:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c382:	e100      	b.n	800c586 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c38c:	f107 0208 	add.w	r2, r7, #8
 800c390:	4610      	mov	r0, r2
 800c392:	4798      	blx	r3
 800c394:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3301      	adds	r3, #1
 800c39a:	2202      	movs	r2, #2
 800c39c:	701a      	strb	r2, [r3, #0]
      break;
 800c39e:	e0f2      	b.n	800c586 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	885b      	ldrh	r3, [r3, #2]
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	2b05      	cmp	r3, #5
 800c3a8:	f200 80ac 	bhi.w	800c504 <USBD_GetDescriptor+0x204>
 800c3ac:	a201      	add	r2, pc, #4	@ (adr r2, 800c3b4 <USBD_GetDescriptor+0xb4>)
 800c3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b2:	bf00      	nop
 800c3b4:	0800c3cd 	.word	0x0800c3cd
 800c3b8:	0800c401 	.word	0x0800c401
 800c3bc:	0800c435 	.word	0x0800c435
 800c3c0:	0800c469 	.word	0x0800c469
 800c3c4:	0800c49d 	.word	0x0800c49d
 800c3c8:	0800c4d1 	.word	0x0800c4d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00b      	beq.n	800c3f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	7c12      	ldrb	r2, [r2, #16]
 800c3e4:	f107 0108 	add.w	r1, r7, #8
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	4798      	blx	r3
 800c3ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ee:	e091      	b.n	800c514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 facb 	bl	800c98e <USBD_CtlError>
            err++;
 800c3f8:	7afb      	ldrb	r3, [r7, #11]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c3fe:	e089      	b.n	800c514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00b      	beq.n	800c424 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	7c12      	ldrb	r2, [r2, #16]
 800c418:	f107 0108 	add.w	r1, r7, #8
 800c41c:	4610      	mov	r0, r2
 800c41e:	4798      	blx	r3
 800c420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c422:	e077      	b.n	800c514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fab1 	bl	800c98e <USBD_CtlError>
            err++;
 800c42c:	7afb      	ldrb	r3, [r7, #11]
 800c42e:	3301      	adds	r3, #1
 800c430:	72fb      	strb	r3, [r7, #11]
          break;
 800c432:	e06f      	b.n	800c514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00b      	beq.n	800c458 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	7c12      	ldrb	r2, [r2, #16]
 800c44c:	f107 0108 	add.w	r1, r7, #8
 800c450:	4610      	mov	r0, r2
 800c452:	4798      	blx	r3
 800c454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c456:	e05d      	b.n	800c514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fa97 	bl	800c98e <USBD_CtlError>
            err++;
 800c460:	7afb      	ldrb	r3, [r7, #11]
 800c462:	3301      	adds	r3, #1
 800c464:	72fb      	strb	r3, [r7, #11]
          break;
 800c466:	e055      	b.n	800c514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00b      	beq.n	800c48c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c47a:	691b      	ldr	r3, [r3, #16]
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	7c12      	ldrb	r2, [r2, #16]
 800c480:	f107 0108 	add.w	r1, r7, #8
 800c484:	4610      	mov	r0, r2
 800c486:	4798      	blx	r3
 800c488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c48a:	e043      	b.n	800c514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c48c:	6839      	ldr	r1, [r7, #0]
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 fa7d 	bl	800c98e <USBD_CtlError>
            err++;
 800c494:	7afb      	ldrb	r3, [r7, #11]
 800c496:	3301      	adds	r3, #1
 800c498:	72fb      	strb	r3, [r7, #11]
          break;
 800c49a:	e03b      	b.n	800c514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4a2:	695b      	ldr	r3, [r3, #20]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00b      	beq.n	800c4c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ae:	695b      	ldr	r3, [r3, #20]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	7c12      	ldrb	r2, [r2, #16]
 800c4b4:	f107 0108 	add.w	r1, r7, #8
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	4798      	blx	r3
 800c4bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4be:	e029      	b.n	800c514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fa63 	bl	800c98e <USBD_CtlError>
            err++;
 800c4c8:	7afb      	ldrb	r3, [r7, #11]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ce:	e021      	b.n	800c514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00b      	beq.n	800c4f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4e2:	699b      	ldr	r3, [r3, #24]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	7c12      	ldrb	r2, [r2, #16]
 800c4e8:	f107 0108 	add.w	r1, r7, #8
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	4798      	blx	r3
 800c4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4f2:	e00f      	b.n	800c514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 fa49 	bl	800c98e <USBD_CtlError>
            err++;
 800c4fc:	7afb      	ldrb	r3, [r7, #11]
 800c4fe:	3301      	adds	r3, #1
 800c500:	72fb      	strb	r3, [r7, #11]
          break;
 800c502:	e007      	b.n	800c514 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c504:	6839      	ldr	r1, [r7, #0]
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa41 	bl	800c98e <USBD_CtlError>
          err++;
 800c50c:	7afb      	ldrb	r3, [r7, #11]
 800c50e:	3301      	adds	r3, #1
 800c510:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c512:	bf00      	nop
      }
      break;
 800c514:	e037      	b.n	800c586 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	7c1b      	ldrb	r3, [r3, #16]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d109      	bne.n	800c532 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c526:	f107 0208 	add.w	r2, r7, #8
 800c52a:	4610      	mov	r0, r2
 800c52c:	4798      	blx	r3
 800c52e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c530:	e029      	b.n	800c586 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 fa2a 	bl	800c98e <USBD_CtlError>
        err++;
 800c53a:	7afb      	ldrb	r3, [r7, #11]
 800c53c:	3301      	adds	r3, #1
 800c53e:	72fb      	strb	r3, [r7, #11]
      break;
 800c540:	e021      	b.n	800c586 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	7c1b      	ldrb	r3, [r3, #16]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d10d      	bne.n	800c566 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c552:	f107 0208 	add.w	r2, r7, #8
 800c556:	4610      	mov	r0, r2
 800c558:	4798      	blx	r3
 800c55a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	3301      	adds	r3, #1
 800c560:	2207      	movs	r2, #7
 800c562:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c564:	e00f      	b.n	800c586 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fa10 	bl	800c98e <USBD_CtlError>
        err++;
 800c56e:	7afb      	ldrb	r3, [r7, #11]
 800c570:	3301      	adds	r3, #1
 800c572:	72fb      	strb	r3, [r7, #11]
      break;
 800c574:	e007      	b.n	800c586 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 fa08 	bl	800c98e <USBD_CtlError>
      err++;
 800c57e:	7afb      	ldrb	r3, [r7, #11]
 800c580:	3301      	adds	r3, #1
 800c582:	72fb      	strb	r3, [r7, #11]
      break;
 800c584:	bf00      	nop
  }

  if (err != 0U)
 800c586:	7afb      	ldrb	r3, [r7, #11]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d11e      	bne.n	800c5ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	88db      	ldrh	r3, [r3, #6]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d016      	beq.n	800c5c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c594:	893b      	ldrh	r3, [r7, #8]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00e      	beq.n	800c5b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	88da      	ldrh	r2, [r3, #6]
 800c59e:	893b      	ldrh	r3, [r7, #8]
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	bf28      	it	cs
 800c5a4:	4613      	movcs	r3, r2
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5aa:	893b      	ldrh	r3, [r7, #8]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	68f9      	ldr	r1, [r7, #12]
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 fa69 	bl	800ca88 <USBD_CtlSendData>
 800c5b6:	e009      	b.n	800c5cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5b8:	6839      	ldr	r1, [r7, #0]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f9e7 	bl	800c98e <USBD_CtlError>
 800c5c0:	e004      	b.n	800c5cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 fac1 	bl	800cb4a <USBD_CtlSendStatus>
 800c5c8:	e000      	b.n	800c5cc <USBD_GetDescriptor+0x2cc>
    return;
 800c5ca:	bf00      	nop
  }
}
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop

0800c5d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	889b      	ldrh	r3, [r3, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d131      	bne.n	800c64a <USBD_SetAddress+0x76>
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	88db      	ldrh	r3, [r3, #6]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d12d      	bne.n	800c64a <USBD_SetAddress+0x76>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	885b      	ldrh	r3, [r3, #2]
 800c5f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5f4:	d829      	bhi.n	800c64a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	885b      	ldrh	r3, [r3, #2]
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c600:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b03      	cmp	r3, #3
 800c60c:	d104      	bne.n	800c618 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c60e:	6839      	ldr	r1, [r7, #0]
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 f9bc 	bl	800c98e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c616:	e01d      	b.n	800c654 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	7bfa      	ldrb	r2, [r7, #15]
 800c61c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c620:	7bfb      	ldrb	r3, [r7, #15]
 800c622:	4619      	mov	r1, r3
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 ff55 	bl	800d4d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 fa8d 	bl	800cb4a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c630:	7bfb      	ldrb	r3, [r7, #15]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d004      	beq.n	800c640 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2202      	movs	r2, #2
 800c63a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c63e:	e009      	b.n	800c654 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c648:	e004      	b.n	800c654 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c64a:	6839      	ldr	r1, [r7, #0]
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 f99e 	bl	800c98e <USBD_CtlError>
  }
}
 800c652:	bf00      	nop
 800c654:	bf00      	nop
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c666:	2300      	movs	r3, #0
 800c668:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	885b      	ldrh	r3, [r3, #2]
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	4b4e      	ldr	r3, [pc, #312]	@ (800c7ac <USBD_SetConfig+0x150>)
 800c672:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c674:	4b4d      	ldr	r3, [pc, #308]	@ (800c7ac <USBD_SetConfig+0x150>)
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d905      	bls.n	800c688 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 f985 	bl	800c98e <USBD_CtlError>
    return USBD_FAIL;
 800c684:	2303      	movs	r3, #3
 800c686:	e08c      	b.n	800c7a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	2b02      	cmp	r3, #2
 800c692:	d002      	beq.n	800c69a <USBD_SetConfig+0x3e>
 800c694:	2b03      	cmp	r3, #3
 800c696:	d029      	beq.n	800c6ec <USBD_SetConfig+0x90>
 800c698:	e075      	b.n	800c786 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c69a:	4b44      	ldr	r3, [pc, #272]	@ (800c7ac <USBD_SetConfig+0x150>)
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d020      	beq.n	800c6e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6a2:	4b42      	ldr	r3, [pc, #264]	@ (800c7ac <USBD_SetConfig+0x150>)
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6ac:	4b3f      	ldr	r3, [pc, #252]	@ (800c7ac <USBD_SetConfig+0x150>)
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7fe ffcd 	bl	800b652 <USBD_SetClassConfig>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6bc:	7bfb      	ldrb	r3, [r7, #15]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d008      	beq.n	800c6d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6c2:	6839      	ldr	r1, [r7, #0]
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 f962 	bl	800c98e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2202      	movs	r2, #2
 800c6ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6d2:	e065      	b.n	800c7a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 fa38 	bl	800cb4a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2203      	movs	r2, #3
 800c6de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c6e2:	e05d      	b.n	800c7a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fa30 	bl	800cb4a <USBD_CtlSendStatus>
      break;
 800c6ea:	e059      	b.n	800c7a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6ec:	4b2f      	ldr	r3, [pc, #188]	@ (800c7ac <USBD_SetConfig+0x150>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d112      	bne.n	800c71a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2202      	movs	r2, #2
 800c6f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c6fc:	4b2b      	ldr	r3, [pc, #172]	@ (800c7ac <USBD_SetConfig+0x150>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	461a      	mov	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c706:	4b29      	ldr	r3, [pc, #164]	@ (800c7ac <USBD_SetConfig+0x150>)
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	4619      	mov	r1, r3
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7fe ffbc 	bl	800b68a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fa19 	bl	800cb4a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c718:	e042      	b.n	800c7a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c71a:	4b24      	ldr	r3, [pc, #144]	@ (800c7ac <USBD_SetConfig+0x150>)
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	461a      	mov	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	429a      	cmp	r2, r3
 800c726:	d02a      	beq.n	800c77e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	4619      	mov	r1, r3
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7fe ffaa 	bl	800b68a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c736:	4b1d      	ldr	r3, [pc, #116]	@ (800c7ac <USBD_SetConfig+0x150>)
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c740:	4b1a      	ldr	r3, [pc, #104]	@ (800c7ac <USBD_SetConfig+0x150>)
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7fe ff83 	bl	800b652 <USBD_SetClassConfig>
 800c74c:	4603      	mov	r3, r0
 800c74e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c750:	7bfb      	ldrb	r3, [r7, #15]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00f      	beq.n	800c776 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 f918 	bl	800c98e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	b2db      	uxtb	r3, r3
 800c764:	4619      	mov	r1, r3
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f7fe ff8f 	bl	800b68a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2202      	movs	r2, #2
 800c770:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c774:	e014      	b.n	800c7a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 f9e7 	bl	800cb4a <USBD_CtlSendStatus>
      break;
 800c77c:	e010      	b.n	800c7a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f9e3 	bl	800cb4a <USBD_CtlSendStatus>
      break;
 800c784:	e00c      	b.n	800c7a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c786:	6839      	ldr	r1, [r7, #0]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 f900 	bl	800c98e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c78e:	4b07      	ldr	r3, [pc, #28]	@ (800c7ac <USBD_SetConfig+0x150>)
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	4619      	mov	r1, r3
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f7fe ff78 	bl	800b68a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c79a:	2303      	movs	r3, #3
 800c79c:	73fb      	strb	r3, [r7, #15]
      break;
 800c79e:	bf00      	nop
  }

  return ret;
 800c7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	200184bc 	.word	0x200184bc

0800c7b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	88db      	ldrh	r3, [r3, #6]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d004      	beq.n	800c7cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7c2:	6839      	ldr	r1, [r7, #0]
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 f8e2 	bl	800c98e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7ca:	e023      	b.n	800c814 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	dc02      	bgt.n	800c7de <USBD_GetConfig+0x2e>
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	dc03      	bgt.n	800c7e4 <USBD_GetConfig+0x34>
 800c7dc:	e015      	b.n	800c80a <USBD_GetConfig+0x5a>
 800c7de:	2b03      	cmp	r3, #3
 800c7e0:	d00b      	beq.n	800c7fa <USBD_GetConfig+0x4a>
 800c7e2:	e012      	b.n	800c80a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f948 	bl	800ca88 <USBD_CtlSendData>
        break;
 800c7f8:	e00c      	b.n	800c814 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	3304      	adds	r3, #4
 800c7fe:	2201      	movs	r2, #1
 800c800:	4619      	mov	r1, r3
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f940 	bl	800ca88 <USBD_CtlSendData>
        break;
 800c808:	e004      	b.n	800c814 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c80a:	6839      	ldr	r1, [r7, #0]
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 f8be 	bl	800c98e <USBD_CtlError>
        break;
 800c812:	bf00      	nop
}
 800c814:	bf00      	nop
 800c816:	3708      	adds	r7, #8
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	3b01      	subs	r3, #1
 800c830:	2b02      	cmp	r3, #2
 800c832:	d81e      	bhi.n	800c872 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	88db      	ldrh	r3, [r3, #6]
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d004      	beq.n	800c846 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c83c:	6839      	ldr	r1, [r7, #0]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f8a5 	bl	800c98e <USBD_CtlError>
        break;
 800c844:	e01a      	b.n	800c87c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c852:	2b00      	cmp	r3, #0
 800c854:	d005      	beq.n	800c862 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	f043 0202 	orr.w	r2, r3, #2
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	330c      	adds	r3, #12
 800c866:	2202      	movs	r2, #2
 800c868:	4619      	mov	r1, r3
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 f90c 	bl	800ca88 <USBD_CtlSendData>
      break;
 800c870:	e004      	b.n	800c87c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 f88a 	bl	800c98e <USBD_CtlError>
      break;
 800c87a:	bf00      	nop
  }
}
 800c87c:	bf00      	nop
 800c87e:	3708      	adds	r7, #8
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	885b      	ldrh	r3, [r3, #2]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d107      	bne.n	800c8a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f953 	bl	800cb4a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8a4:	e013      	b.n	800c8ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	885b      	ldrh	r3, [r3, #2]
 800c8aa:	2b02      	cmp	r3, #2
 800c8ac:	d10b      	bne.n	800c8c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	889b      	ldrh	r3, [r3, #4]
 800c8b2:	0a1b      	lsrs	r3, r3, #8
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 f943 	bl	800cb4a <USBD_CtlSendStatus>
}
 800c8c4:	e003      	b.n	800c8ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8c6:	6839      	ldr	r1, [r7, #0]
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 f860 	bl	800c98e <USBD_CtlError>
}
 800c8ce:	bf00      	nop
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b082      	sub	sp, #8
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
 800c8de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	2b02      	cmp	r3, #2
 800c8ec:	d80b      	bhi.n	800c906 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	885b      	ldrh	r3, [r3, #2]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d10c      	bne.n	800c910 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f923 	bl	800cb4a <USBD_CtlSendStatus>
      }
      break;
 800c904:	e004      	b.n	800c910 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f840 	bl	800c98e <USBD_CtlError>
      break;
 800c90e:	e000      	b.n	800c912 <USBD_ClrFeature+0x3c>
      break;
 800c910:	bf00      	nop
  }
}
 800c912:	bf00      	nop
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b084      	sub	sp, #16
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	781a      	ldrb	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	3301      	adds	r3, #1
 800c934:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	781a      	ldrb	r2, [r3, #0]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	3301      	adds	r3, #1
 800c942:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c944:	68f8      	ldr	r0, [r7, #12]
 800c946:	f7ff fa3d 	bl	800bdc4 <SWAPBYTE>
 800c94a:	4603      	mov	r3, r0
 800c94c:	461a      	mov	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	3301      	adds	r3, #1
 800c956:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	3301      	adds	r3, #1
 800c95c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f7ff fa30 	bl	800bdc4 <SWAPBYTE>
 800c964:	4603      	mov	r3, r0
 800c966:	461a      	mov	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3301      	adds	r3, #1
 800c970:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	3301      	adds	r3, #1
 800c976:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f7ff fa23 	bl	800bdc4 <SWAPBYTE>
 800c97e:	4603      	mov	r3, r0
 800c980:	461a      	mov	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	80da      	strh	r2, [r3, #6]
}
 800c986:	bf00      	nop
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b082      	sub	sp, #8
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c998:	2180      	movs	r1, #128	@ 0x80
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fd30 	bl	800d400 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 fd2c 	bl	800d400 <USBD_LL_StallEP>
}
 800c9a8:	bf00      	nop
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d042      	beq.n	800ca4c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c9ca:	6938      	ldr	r0, [r7, #16]
 800c9cc:	f000 f842 	bl	800ca54 <USBD_GetLen>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	005b      	lsls	r3, r3, #1
 800c9d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9da:	d808      	bhi.n	800c9ee <USBD_GetString+0x3e>
 800c9dc:	6938      	ldr	r0, [r7, #16]
 800c9de:	f000 f839 	bl	800ca54 <USBD_GetLen>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	e001      	b.n	800c9f2 <USBD_GetString+0x42>
 800c9ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9f6:	7dfb      	ldrb	r3, [r7, #23]
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	7812      	ldrb	r2, [r2, #0]
 800ca00:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca02:	7dfb      	ldrb	r3, [r7, #23]
 800ca04:	3301      	adds	r3, #1
 800ca06:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca08:	7dfb      	ldrb	r3, [r7, #23]
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	2203      	movs	r2, #3
 800ca10:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	3301      	adds	r3, #1
 800ca16:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca18:	e013      	b.n	800ca42 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ca1a:	7dfb      	ldrb	r3, [r7, #23]
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	4413      	add	r3, r2
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	7812      	ldrb	r2, [r2, #0]
 800ca24:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	613b      	str	r3, [r7, #16]
    idx++;
 800ca2c:	7dfb      	ldrb	r3, [r7, #23]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	4413      	add	r3, r2
 800ca38:	2200      	movs	r2, #0
 800ca3a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca3c:	7dfb      	ldrb	r3, [r7, #23]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d1e7      	bne.n	800ca1a <USBD_GetString+0x6a>
 800ca4a:	e000      	b.n	800ca4e <USBD_GetString+0x9e>
    return;
 800ca4c:	bf00      	nop
  }
}
 800ca4e:	3718      	adds	r7, #24
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca64:	e005      	b.n	800ca72 <USBD_GetLen+0x1e>
  {
    len++;
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1f5      	bne.n	800ca66 <USBD_GetLen+0x12>
  }

  return len;
 800ca7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2202      	movs	r2, #2
 800ca98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	68ba      	ldr	r2, [r7, #8]
 800caa6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	2100      	movs	r1, #0
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f000 fd2c 	bl	800d512 <USBD_LL_Transmit>

  return USBD_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	2100      	movs	r1, #0
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f000 fd1b 	bl	800d512 <USBD_LL_Transmit>

  return USBD_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	60f8      	str	r0, [r7, #12]
 800caee:	60b9      	str	r1, [r7, #8]
 800caf0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2203      	movs	r2, #3
 800caf6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	68ba      	ldr	r2, [r7, #8]
 800cb06:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	2100      	movs	r1, #0
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f000 fd1b 	bl	800d554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3710      	adds	r7, #16
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	2100      	movs	r1, #0
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f000 fd0a 	bl	800d554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b082      	sub	sp, #8
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2204      	movs	r2, #4
 800cb56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	2100      	movs	r1, #0
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fcd6 	bl	800d512 <USBD_LL_Transmit>

  return USBD_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2205      	movs	r2, #5
 800cb7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb80:	2300      	movs	r3, #0
 800cb82:	2200      	movs	r2, #0
 800cb84:	2100      	movs	r1, #0
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 fce4 	bl	800d554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
	...

0800cb98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	4912      	ldr	r1, [pc, #72]	@ (800cbe8 <MX_USB_DEVICE_Init+0x50>)
 800cba0:	4812      	ldr	r0, [pc, #72]	@ (800cbec <MX_USB_DEVICE_Init+0x54>)
 800cba2:	f7fe fcd9 	bl	800b558 <USBD_Init>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cbac:	f7f6 f952 	bl	8002e54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cbb0:	490f      	ldr	r1, [pc, #60]	@ (800cbf0 <MX_USB_DEVICE_Init+0x58>)
 800cbb2:	480e      	ldr	r0, [pc, #56]	@ (800cbec <MX_USB_DEVICE_Init+0x54>)
 800cbb4:	f7fe fd00 	bl	800b5b8 <USBD_RegisterClass>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d001      	beq.n	800cbc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cbbe:	f7f6 f949 	bl	8002e54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cbc2:	490c      	ldr	r1, [pc, #48]	@ (800cbf4 <MX_USB_DEVICE_Init+0x5c>)
 800cbc4:	4809      	ldr	r0, [pc, #36]	@ (800cbec <MX_USB_DEVICE_Init+0x54>)
 800cbc6:	f7fe fbf7 	bl	800b3b8 <USBD_CDC_RegisterInterface>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d001      	beq.n	800cbd4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cbd0:	f7f6 f940 	bl	8002e54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cbd4:	4805      	ldr	r0, [pc, #20]	@ (800cbec <MX_USB_DEVICE_Init+0x54>)
 800cbd6:	f7fe fd25 	bl	800b624 <USBD_Start>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cbe0:	f7f6 f938 	bl	8002e54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cbe4:	bf00      	nop
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	200000b8 	.word	0x200000b8
 800cbec:	200184c0 	.word	0x200184c0
 800cbf0:	20000024 	.word	0x20000024
 800cbf4:	200000a4 	.word	0x200000a4

0800cbf8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	4905      	ldr	r1, [pc, #20]	@ (800cc14 <CDC_Init_FS+0x1c>)
 800cc00:	4805      	ldr	r0, [pc, #20]	@ (800cc18 <CDC_Init_FS+0x20>)
 800cc02:	f7fe fbf3 	bl	800b3ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc06:	4905      	ldr	r1, [pc, #20]	@ (800cc1c <CDC_Init_FS+0x24>)
 800cc08:	4803      	ldr	r0, [pc, #12]	@ (800cc18 <CDC_Init_FS+0x20>)
 800cc0a:	f7fe fc11 	bl	800b430 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	200190cc 	.word	0x200190cc
 800cc18:	200184c0 	.word	0x200184c0
 800cc1c:	200188cc 	.word	0x200188cc

0800cc20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc20:	b480      	push	{r7}
 800cc22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	4603      	mov	r3, r0
 800cc38:	6039      	str	r1, [r7, #0]
 800cc3a:	71fb      	strb	r3, [r7, #7]
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc40:	79fb      	ldrb	r3, [r7, #7]
 800cc42:	2b23      	cmp	r3, #35	@ 0x23
 800cc44:	d84a      	bhi.n	800ccdc <CDC_Control_FS+0xac>
 800cc46:	a201      	add	r2, pc, #4	@ (adr r2, 800cc4c <CDC_Control_FS+0x1c>)
 800cc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc4c:	0800ccdd 	.word	0x0800ccdd
 800cc50:	0800ccdd 	.word	0x0800ccdd
 800cc54:	0800ccdd 	.word	0x0800ccdd
 800cc58:	0800ccdd 	.word	0x0800ccdd
 800cc5c:	0800ccdd 	.word	0x0800ccdd
 800cc60:	0800ccdd 	.word	0x0800ccdd
 800cc64:	0800ccdd 	.word	0x0800ccdd
 800cc68:	0800ccdd 	.word	0x0800ccdd
 800cc6c:	0800ccdd 	.word	0x0800ccdd
 800cc70:	0800ccdd 	.word	0x0800ccdd
 800cc74:	0800ccdd 	.word	0x0800ccdd
 800cc78:	0800ccdd 	.word	0x0800ccdd
 800cc7c:	0800ccdd 	.word	0x0800ccdd
 800cc80:	0800ccdd 	.word	0x0800ccdd
 800cc84:	0800ccdd 	.word	0x0800ccdd
 800cc88:	0800ccdd 	.word	0x0800ccdd
 800cc8c:	0800ccdd 	.word	0x0800ccdd
 800cc90:	0800ccdd 	.word	0x0800ccdd
 800cc94:	0800ccdd 	.word	0x0800ccdd
 800cc98:	0800ccdd 	.word	0x0800ccdd
 800cc9c:	0800ccdd 	.word	0x0800ccdd
 800cca0:	0800ccdd 	.word	0x0800ccdd
 800cca4:	0800ccdd 	.word	0x0800ccdd
 800cca8:	0800ccdd 	.word	0x0800ccdd
 800ccac:	0800ccdd 	.word	0x0800ccdd
 800ccb0:	0800ccdd 	.word	0x0800ccdd
 800ccb4:	0800ccdd 	.word	0x0800ccdd
 800ccb8:	0800ccdd 	.word	0x0800ccdd
 800ccbc:	0800ccdd 	.word	0x0800ccdd
 800ccc0:	0800ccdd 	.word	0x0800ccdd
 800ccc4:	0800ccdd 	.word	0x0800ccdd
 800ccc8:	0800ccdd 	.word	0x0800ccdd
 800cccc:	0800ccdd 	.word	0x0800ccdd
 800ccd0:	0800ccdd 	.word	0x0800ccdd
 800ccd4:	0800ccdd 	.word	0x0800ccdd
 800ccd8:	0800ccdd 	.word	0x0800ccdd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ccdc:	bf00      	nop
  }

  return (USBD_OK);
 800ccde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a20      	ldr	r2, [pc, #128]	@ (800cd7c <CDC_Receive_FS+0x90>)
 800ccfc:	8812      	ldrh	r2, [r2, #0]
 800ccfe:	b292      	uxth	r2, r2
 800cd00:	f5c2 7296 	rsb	r2, r2, #300	@ 0x12c
                            (USB_RX_BUFFER_SIZE - usb_rx_index) : *Len;
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d905      	bls.n	800cd14 <CDC_Receive_FS+0x28>
 800cd08:	4b1c      	ldr	r3, [pc, #112]	@ (800cd7c <CDC_Receive_FS+0x90>)
 800cd0a:	881b      	ldrh	r3, [r3, #0]
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 800cd12:	e001      	b.n	800cd18 <CDC_Receive_FS+0x2c>
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	681b      	ldr	r3, [r3, #0]
    uint32_t bytes_to_copy = (*Len > (USB_RX_BUFFER_SIZE - usb_rx_index)) ?
 800cd18:	60fb      	str	r3, [r7, #12]

    memcpy((void*)&usb_rx_buffer[usb_rx_index], Buf, bytes_to_copy);
 800cd1a:	4b18      	ldr	r3, [pc, #96]	@ (800cd7c <CDC_Receive_FS+0x90>)
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	461a      	mov	r2, r3
 800cd22:	4b17      	ldr	r3, [pc, #92]	@ (800cd80 <CDC_Receive_FS+0x94>)
 800cd24:	4413      	add	r3, r2
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	6879      	ldr	r1, [r7, #4]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f002 fe3b 	bl	800f9a6 <memcpy>
    usb_rx_index += bytes_to_copy;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	4b11      	ldr	r3, [pc, #68]	@ (800cd7c <CDC_Receive_FS+0x90>)
 800cd36:	881b      	ldrh	r3, [r3, #0]
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	4413      	add	r3, r2
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	4b0f      	ldr	r3, [pc, #60]	@ (800cd7c <CDC_Receive_FS+0x90>)
 800cd40:	801a      	strh	r2, [r3, #0]

    // Проверяем наличие завершающего символа
    if (usb_rx_index > 0 && usb_rx_buffer[usb_rx_index - 1] == '\n') {
 800cd42:	4b0e      	ldr	r3, [pc, #56]	@ (800cd7c <CDC_Receive_FS+0x90>)
 800cd44:	881b      	ldrh	r3, [r3, #0]
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00b      	beq.n	800cd64 <CDC_Receive_FS+0x78>
 800cd4c:	4b0b      	ldr	r3, [pc, #44]	@ (800cd7c <CDC_Receive_FS+0x90>)
 800cd4e:	881b      	ldrh	r3, [r3, #0]
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	3b01      	subs	r3, #1
 800cd54:	4a0a      	ldr	r2, [pc, #40]	@ (800cd80 <CDC_Receive_FS+0x94>)
 800cd56:	5cd3      	ldrb	r3, [r2, r3]
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	2b0a      	cmp	r3, #10
 800cd5c:	d102      	bne.n	800cd64 <CDC_Receive_FS+0x78>
        new_data_received = 1;
 800cd5e:	4b09      	ldr	r3, [pc, #36]	@ (800cd84 <CDC_Receive_FS+0x98>)
 800cd60:	2201      	movs	r2, #1
 800cd62:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd64:	6879      	ldr	r1, [r7, #4]
 800cd66:	4808      	ldr	r0, [pc, #32]	@ (800cd88 <CDC_Receive_FS+0x9c>)
 800cd68:	f7fe fb62 	bl	800b430 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd6c:	4806      	ldr	r0, [pc, #24]	@ (800cd88 <CDC_Receive_FS+0x9c>)
 800cd6e:	f7fe fbbd 	bl	800b4ec <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	200188c8 	.word	0x200188c8
 800cd80:	2001879c 	.word	0x2001879c
 800cd84:	200188ca 	.word	0x200188ca
 800cd88:	200184c0 	.word	0x200184c0

0800cd8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	460b      	mov	r3, r1
 800cd96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd9c:	4b0d      	ldr	r3, [pc, #52]	@ (800cdd4 <CDC_Transmit_FS+0x48>)
 800cd9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cda2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d001      	beq.n	800cdb2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e00b      	b.n	800cdca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cdb2:	887b      	ldrh	r3, [r7, #2]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	4806      	ldr	r0, [pc, #24]	@ (800cdd4 <CDC_Transmit_FS+0x48>)
 800cdba:	f7fe fb17 	bl	800b3ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cdbe:	4805      	ldr	r0, [pc, #20]	@ (800cdd4 <CDC_Transmit_FS+0x48>)
 800cdc0:	f7fe fb54 	bl	800b46c <USBD_CDC_TransmitPacket>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	200184c0 	.word	0x200184c0

0800cdd8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b087      	sub	sp, #28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	4613      	mov	r3, r2
 800cde4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cde6:	2300      	movs	r3, #0
 800cde8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cdea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	371c      	adds	r7, #28
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
	...

0800cdfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	4603      	mov	r3, r0
 800ce04:	6039      	str	r1, [r7, #0]
 800ce06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	2212      	movs	r2, #18
 800ce0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce0e:	4b03      	ldr	r3, [pc, #12]	@ (800ce1c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	370c      	adds	r7, #12
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	200000d4 	.word	0x200000d4

0800ce20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4603      	mov	r3, r0
 800ce28:	6039      	str	r1, [r7, #0]
 800ce2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	2204      	movs	r2, #4
 800ce30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce32:	4b03      	ldr	r3, [pc, #12]	@ (800ce40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr
 800ce40:	200000e8 	.word	0x200000e8

0800ce44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	6039      	str	r1, [r7, #0]
 800ce4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce50:	79fb      	ldrb	r3, [r7, #7]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d105      	bne.n	800ce62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	4907      	ldr	r1, [pc, #28]	@ (800ce78 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce5a:	4808      	ldr	r0, [pc, #32]	@ (800ce7c <USBD_FS_ProductStrDescriptor+0x38>)
 800ce5c:	f7ff fda8 	bl	800c9b0 <USBD_GetString>
 800ce60:	e004      	b.n	800ce6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	4904      	ldr	r1, [pc, #16]	@ (800ce78 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce66:	4805      	ldr	r0, [pc, #20]	@ (800ce7c <USBD_FS_ProductStrDescriptor+0x38>)
 800ce68:	f7ff fda2 	bl	800c9b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce6c:	4b02      	ldr	r3, [pc, #8]	@ (800ce78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	200198cc 	.word	0x200198cc
 800ce7c:	080130b4 	.word	0x080130b4

0800ce80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	6039      	str	r1, [r7, #0]
 800ce8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce8c:	683a      	ldr	r2, [r7, #0]
 800ce8e:	4904      	ldr	r1, [pc, #16]	@ (800cea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce90:	4804      	ldr	r0, [pc, #16]	@ (800cea4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce92:	f7ff fd8d 	bl	800c9b0 <USBD_GetString>
  return USBD_StrDesc;
 800ce96:	4b02      	ldr	r3, [pc, #8]	@ (800cea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	200198cc 	.word	0x200198cc
 800cea4:	080130cc 	.word	0x080130cc

0800cea8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	4603      	mov	r3, r0
 800ceb0:	6039      	str	r1, [r7, #0]
 800ceb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	221a      	movs	r2, #26
 800ceb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ceba:	f000 f843 	bl	800cf44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cebe:	4b02      	ldr	r3, [pc, #8]	@ (800cec8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	200000ec 	.word	0x200000ec

0800cecc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	4603      	mov	r3, r0
 800ced4:	6039      	str	r1, [r7, #0]
 800ced6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ced8:	79fb      	ldrb	r3, [r7, #7]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d105      	bne.n	800ceea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cede:	683a      	ldr	r2, [r7, #0]
 800cee0:	4907      	ldr	r1, [pc, #28]	@ (800cf00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cee2:	4808      	ldr	r0, [pc, #32]	@ (800cf04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cee4:	f7ff fd64 	bl	800c9b0 <USBD_GetString>
 800cee8:	e004      	b.n	800cef4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	4904      	ldr	r1, [pc, #16]	@ (800cf00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ceee:	4805      	ldr	r0, [pc, #20]	@ (800cf04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cef0:	f7ff fd5e 	bl	800c9b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cef4:	4b02      	ldr	r3, [pc, #8]	@ (800cf00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	200198cc 	.word	0x200198cc
 800cf04:	080130e0 	.word	0x080130e0

0800cf08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	6039      	str	r1, [r7, #0]
 800cf12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf14:	79fb      	ldrb	r3, [r7, #7]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d105      	bne.n	800cf26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf1a:	683a      	ldr	r2, [r7, #0]
 800cf1c:	4907      	ldr	r1, [pc, #28]	@ (800cf3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf1e:	4808      	ldr	r0, [pc, #32]	@ (800cf40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf20:	f7ff fd46 	bl	800c9b0 <USBD_GetString>
 800cf24:	e004      	b.n	800cf30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf26:	683a      	ldr	r2, [r7, #0]
 800cf28:	4904      	ldr	r1, [pc, #16]	@ (800cf3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf2a:	4805      	ldr	r0, [pc, #20]	@ (800cf40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf2c:	f7ff fd40 	bl	800c9b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf30:	4b02      	ldr	r3, [pc, #8]	@ (800cf3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	200198cc 	.word	0x200198cc
 800cf40:	080130ec 	.word	0x080130ec

0800cf44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf4a:	4b0f      	ldr	r3, [pc, #60]	@ (800cf88 <Get_SerialNum+0x44>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf50:	4b0e      	ldr	r3, [pc, #56]	@ (800cf8c <Get_SerialNum+0x48>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf56:	4b0e      	ldr	r3, [pc, #56]	@ (800cf90 <Get_SerialNum+0x4c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4413      	add	r3, r2
 800cf62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d009      	beq.n	800cf7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf6a:	2208      	movs	r2, #8
 800cf6c:	4909      	ldr	r1, [pc, #36]	@ (800cf94 <Get_SerialNum+0x50>)
 800cf6e:	68f8      	ldr	r0, [r7, #12]
 800cf70:	f000 f814 	bl	800cf9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf74:	2204      	movs	r2, #4
 800cf76:	4908      	ldr	r1, [pc, #32]	@ (800cf98 <Get_SerialNum+0x54>)
 800cf78:	68b8      	ldr	r0, [r7, #8]
 800cf7a:	f000 f80f 	bl	800cf9c <IntToUnicode>
  }
}
 800cf7e:	bf00      	nop
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	1fff7a10 	.word	0x1fff7a10
 800cf8c:	1fff7a14 	.word	0x1fff7a14
 800cf90:	1fff7a18 	.word	0x1fff7a18
 800cf94:	200000ee 	.word	0x200000ee
 800cf98:	200000fe 	.word	0x200000fe

0800cf9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b087      	sub	sp, #28
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cfae:	2300      	movs	r3, #0
 800cfb0:	75fb      	strb	r3, [r7, #23]
 800cfb2:	e027      	b.n	800d004 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	0f1b      	lsrs	r3, r3, #28
 800cfb8:	2b09      	cmp	r3, #9
 800cfba:	d80b      	bhi.n	800cfd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	0f1b      	lsrs	r3, r3, #28
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	7dfb      	ldrb	r3, [r7, #23]
 800cfc4:	005b      	lsls	r3, r3, #1
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	440b      	add	r3, r1
 800cfcc:	3230      	adds	r2, #48	@ 0x30
 800cfce:	b2d2      	uxtb	r2, r2
 800cfd0:	701a      	strb	r2, [r3, #0]
 800cfd2:	e00a      	b.n	800cfea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	0f1b      	lsrs	r3, r3, #28
 800cfd8:	b2da      	uxtb	r2, r3
 800cfda:	7dfb      	ldrb	r3, [r7, #23]
 800cfdc:	005b      	lsls	r3, r3, #1
 800cfde:	4619      	mov	r1, r3
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	440b      	add	r3, r1
 800cfe4:	3237      	adds	r2, #55	@ 0x37
 800cfe6:	b2d2      	uxtb	r2, r2
 800cfe8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	011b      	lsls	r3, r3, #4
 800cfee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cff0:	7dfb      	ldrb	r3, [r7, #23]
 800cff2:	005b      	lsls	r3, r3, #1
 800cff4:	3301      	adds	r3, #1
 800cff6:	68ba      	ldr	r2, [r7, #8]
 800cff8:	4413      	add	r3, r2
 800cffa:	2200      	movs	r2, #0
 800cffc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cffe:	7dfb      	ldrb	r3, [r7, #23]
 800d000:	3301      	adds	r3, #1
 800d002:	75fb      	strb	r3, [r7, #23]
 800d004:	7dfa      	ldrb	r2, [r7, #23]
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d3d3      	bcc.n	800cfb4 <IntToUnicode+0x18>
  }
}
 800d00c:	bf00      	nop
 800d00e:	bf00      	nop
 800d010:	371c      	adds	r7, #28
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr
	...

0800d01c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b08a      	sub	sp, #40	@ 0x28
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d024:	f107 0314 	add.w	r3, r7, #20
 800d028:	2200      	movs	r2, #0
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	605a      	str	r2, [r3, #4]
 800d02e:	609a      	str	r2, [r3, #8]
 800d030:	60da      	str	r2, [r3, #12]
 800d032:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d03c:	d13a      	bne.n	800d0b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d03e:	2300      	movs	r3, #0
 800d040:	613b      	str	r3, [r7, #16]
 800d042:	4b1e      	ldr	r3, [pc, #120]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d046:	4a1d      	ldr	r2, [pc, #116]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d048:	f043 0301 	orr.w	r3, r3, #1
 800d04c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d04e:	4b1b      	ldr	r3, [pc, #108]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d052:	f003 0301 	and.w	r3, r3, #1
 800d056:	613b      	str	r3, [r7, #16]
 800d058:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d05a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d05e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d060:	2302      	movs	r3, #2
 800d062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d064:	2300      	movs	r3, #0
 800d066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d068:	2303      	movs	r3, #3
 800d06a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d06c:	230a      	movs	r3, #10
 800d06e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d070:	f107 0314 	add.w	r3, r7, #20
 800d074:	4619      	mov	r1, r3
 800d076:	4812      	ldr	r0, [pc, #72]	@ (800d0c0 <HAL_PCD_MspInit+0xa4>)
 800d078:	f7f7 fb1a 	bl	80046b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d07c:	4b0f      	ldr	r3, [pc, #60]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d07e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d080:	4a0e      	ldr	r2, [pc, #56]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d086:	6353      	str	r3, [r2, #52]	@ 0x34
 800d088:	2300      	movs	r3, #0
 800d08a:	60fb      	str	r3, [r7, #12]
 800d08c:	4b0b      	ldr	r3, [pc, #44]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d08e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d090:	4a0a      	ldr	r2, [pc, #40]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d096:	6453      	str	r3, [r2, #68]	@ 0x44
 800d098:	4b08      	ldr	r3, [pc, #32]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d09a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d09c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d0a0:	60fb      	str	r3, [r7, #12]
 800d0a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	2100      	movs	r1, #0
 800d0a8:	2043      	movs	r0, #67	@ 0x43
 800d0aa:	f7f6 ffc2 	bl	8004032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d0ae:	2043      	movs	r0, #67	@ 0x43
 800d0b0:	f7f6 ffdb 	bl	800406a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d0b4:	bf00      	nop
 800d0b6:	3728      	adds	r7, #40	@ 0x28
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	40023800 	.word	0x40023800
 800d0c0:	40020000 	.word	0x40020000

0800d0c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d0d8:	4619      	mov	r1, r3
 800d0da:	4610      	mov	r0, r2
 800d0dc:	f7fe faef 	bl	800b6be <USBD_LL_SetupStage>
}
 800d0e0:	bf00      	nop
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d0fa:	78fa      	ldrb	r2, [r7, #3]
 800d0fc:	6879      	ldr	r1, [r7, #4]
 800d0fe:	4613      	mov	r3, r2
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	4413      	add	r3, r2
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	440b      	add	r3, r1
 800d108:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	78fb      	ldrb	r3, [r7, #3]
 800d110:	4619      	mov	r1, r3
 800d112:	f7fe fb29 	bl	800b768 <USBD_LL_DataOutStage>
}
 800d116:	bf00      	nop
 800d118:	3708      	adds	r7, #8
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b082      	sub	sp, #8
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	460b      	mov	r3, r1
 800d128:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d130:	78fa      	ldrb	r2, [r7, #3]
 800d132:	6879      	ldr	r1, [r7, #4]
 800d134:	4613      	mov	r3, r2
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	4413      	add	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	440b      	add	r3, r1
 800d13e:	3320      	adds	r3, #32
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	78fb      	ldrb	r3, [r7, #3]
 800d144:	4619      	mov	r1, r3
 800d146:	f7fe fbcb 	bl	800b8e0 <USBD_LL_DataInStage>
}
 800d14a:	bf00      	nop
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b082      	sub	sp, #8
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe fd0f 	bl	800bb84 <USBD_LL_SOF>
}
 800d166:	bf00      	nop
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b084      	sub	sp, #16
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d176:	2301      	movs	r3, #1
 800d178:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	79db      	ldrb	r3, [r3, #7]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d102      	bne.n	800d188 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d182:	2300      	movs	r3, #0
 800d184:	73fb      	strb	r3, [r7, #15]
 800d186:	e008      	b.n	800d19a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	79db      	ldrb	r3, [r3, #7]
 800d18c:	2b02      	cmp	r3, #2
 800d18e:	d102      	bne.n	800d196 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d190:	2301      	movs	r3, #1
 800d192:	73fb      	strb	r3, [r7, #15]
 800d194:	e001      	b.n	800d19a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d196:	f7f5 fe5d 	bl	8002e54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1a0:	7bfa      	ldrb	r2, [r7, #15]
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fe fca9 	bl	800bafc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7fe fc50 	bl	800ba56 <USBD_LL_Reset>
}
 800d1b6:	bf00      	nop
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
	...

0800d1c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fe fca4 	bl	800bb1c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	6812      	ldr	r2, [r2, #0]
 800d1e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d1e6:	f043 0301 	orr.w	r3, r3, #1
 800d1ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	7adb      	ldrb	r3, [r3, #11]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d005      	beq.n	800d200 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1f4:	4b04      	ldr	r3, [pc, #16]	@ (800d208 <HAL_PCD_SuspendCallback+0x48>)
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	4a03      	ldr	r2, [pc, #12]	@ (800d208 <HAL_PCD_SuspendCallback+0x48>)
 800d1fa:	f043 0306 	orr.w	r3, r3, #6
 800d1fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d200:	bf00      	nop
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	e000ed00 	.word	0xe000ed00

0800d20c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe fc9a 	bl	800bb54 <USBD_LL_Resume>
}
 800d220:	bf00      	nop
 800d222:	3708      	adds	r7, #8
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	460b      	mov	r3, r1
 800d232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d23a:	78fa      	ldrb	r2, [r7, #3]
 800d23c:	4611      	mov	r1, r2
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fe fcf2 	bl	800bc28 <USBD_LL_IsoOUTIncomplete>
}
 800d244:	bf00      	nop
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	460b      	mov	r3, r1
 800d256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d25e:	78fa      	ldrb	r2, [r7, #3]
 800d260:	4611      	mov	r1, r2
 800d262:	4618      	mov	r0, r3
 800d264:	f7fe fcae 	bl	800bbc4 <USBD_LL_IsoINIncomplete>
}
 800d268:	bf00      	nop
 800d26a:	3708      	adds	r7, #8
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe fd04 	bl	800bc8c <USBD_LL_DevConnected>
}
 800d284:	bf00      	nop
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fe fd01 	bl	800bca2 <USBD_LL_DevDisconnected>
}
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d13c      	bne.n	800d332 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d2b8:	4a20      	ldr	r2, [pc, #128]	@ (800d33c <USBD_LL_Init+0x94>)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	4a1e      	ldr	r2, [pc, #120]	@ (800d33c <USBD_LL_Init+0x94>)
 800d2c4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2c8:	4b1c      	ldr	r3, [pc, #112]	@ (800d33c <USBD_LL_Init+0x94>)
 800d2ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d2ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d2d0:	4b1a      	ldr	r3, [pc, #104]	@ (800d33c <USBD_LL_Init+0x94>)
 800d2d2:	2204      	movs	r2, #4
 800d2d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d2d6:	4b19      	ldr	r3, [pc, #100]	@ (800d33c <USBD_LL_Init+0x94>)
 800d2d8:	2202      	movs	r2, #2
 800d2da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d2dc:	4b17      	ldr	r3, [pc, #92]	@ (800d33c <USBD_LL_Init+0x94>)
 800d2de:	2200      	movs	r2, #0
 800d2e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2e2:	4b16      	ldr	r3, [pc, #88]	@ (800d33c <USBD_LL_Init+0x94>)
 800d2e4:	2202      	movs	r2, #2
 800d2e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d2e8:	4b14      	ldr	r3, [pc, #80]	@ (800d33c <USBD_LL_Init+0x94>)
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d2ee:	4b13      	ldr	r3, [pc, #76]	@ (800d33c <USBD_LL_Init+0x94>)
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d2f4:	4b11      	ldr	r3, [pc, #68]	@ (800d33c <USBD_LL_Init+0x94>)
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d2fa:	4b10      	ldr	r3, [pc, #64]	@ (800d33c <USBD_LL_Init+0x94>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d300:	4b0e      	ldr	r3, [pc, #56]	@ (800d33c <USBD_LL_Init+0x94>)
 800d302:	2200      	movs	r2, #0
 800d304:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d306:	480d      	ldr	r0, [pc, #52]	@ (800d33c <USBD_LL_Init+0x94>)
 800d308:	f7f7 fb9f 	bl	8004a4a <HAL_PCD_Init>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d001      	beq.n	800d316 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d312:	f7f5 fd9f 	bl	8002e54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d316:	2180      	movs	r1, #128	@ 0x80
 800d318:	4808      	ldr	r0, [pc, #32]	@ (800d33c <USBD_LL_Init+0x94>)
 800d31a:	f7f8 fdcc 	bl	8005eb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d31e:	2240      	movs	r2, #64	@ 0x40
 800d320:	2100      	movs	r1, #0
 800d322:	4806      	ldr	r0, [pc, #24]	@ (800d33c <USBD_LL_Init+0x94>)
 800d324:	f7f8 fd80 	bl	8005e28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d328:	2280      	movs	r2, #128	@ 0x80
 800d32a:	2101      	movs	r1, #1
 800d32c:	4803      	ldr	r0, [pc, #12]	@ (800d33c <USBD_LL_Init+0x94>)
 800d32e:	f7f8 fd7b 	bl	8005e28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d332:	2300      	movs	r3, #0
}
 800d334:	4618      	mov	r0, r3
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	20019acc 	.word	0x20019acc

0800d340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d348:	2300      	movs	r3, #0
 800d34a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d34c:	2300      	movs	r3, #0
 800d34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d356:	4618      	mov	r0, r3
 800d358:	f7f7 fc86 	bl	8004c68 <HAL_PCD_Start>
 800d35c:	4603      	mov	r3, r0
 800d35e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d360:	7bfb      	ldrb	r3, [r7, #15]
 800d362:	4618      	mov	r0, r3
 800d364:	f000 f942 	bl	800d5ec <USBD_Get_USB_Status>
 800d368:	4603      	mov	r3, r0
 800d36a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d36c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b084      	sub	sp, #16
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	4608      	mov	r0, r1
 800d380:	4611      	mov	r1, r2
 800d382:	461a      	mov	r2, r3
 800d384:	4603      	mov	r3, r0
 800d386:	70fb      	strb	r3, [r7, #3]
 800d388:	460b      	mov	r3, r1
 800d38a:	70bb      	strb	r3, [r7, #2]
 800d38c:	4613      	mov	r3, r2
 800d38e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d390:	2300      	movs	r3, #0
 800d392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d394:	2300      	movs	r3, #0
 800d396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d39e:	78bb      	ldrb	r3, [r7, #2]
 800d3a0:	883a      	ldrh	r2, [r7, #0]
 800d3a2:	78f9      	ldrb	r1, [r7, #3]
 800d3a4:	f7f8 f95a 	bl	800565c <HAL_PCD_EP_Open>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3ac:	7bfb      	ldrb	r3, [r7, #15]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f000 f91c 	bl	800d5ec <USBD_Get_USB_Status>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b084      	sub	sp, #16
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3dc:	78fa      	ldrb	r2, [r7, #3]
 800d3de:	4611      	mov	r1, r2
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7f8 f9a5 	bl	8005730 <HAL_PCD_EP_Close>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3ea:	7bfb      	ldrb	r3, [r7, #15]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f000 f8fd 	bl	800d5ec <USBD_Get_USB_Status>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3710      	adds	r7, #16
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	460b      	mov	r3, r1
 800d40a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d410:	2300      	movs	r3, #0
 800d412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d41a:	78fa      	ldrb	r2, [r7, #3]
 800d41c:	4611      	mov	r1, r2
 800d41e:	4618      	mov	r0, r3
 800d420:	f7f8 fa5d 	bl	80058de <HAL_PCD_EP_SetStall>
 800d424:	4603      	mov	r3, r0
 800d426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d428:	7bfb      	ldrb	r3, [r7, #15]
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 f8de 	bl	800d5ec <USBD_Get_USB_Status>
 800d430:	4603      	mov	r3, r0
 800d432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d434:	7bbb      	ldrb	r3, [r7, #14]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3710      	adds	r7, #16
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d43e:	b580      	push	{r7, lr}
 800d440:	b084      	sub	sp, #16
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
 800d446:	460b      	mov	r3, r1
 800d448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d44a:	2300      	movs	r3, #0
 800d44c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d44e:	2300      	movs	r3, #0
 800d450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d458:	78fa      	ldrb	r2, [r7, #3]
 800d45a:	4611      	mov	r1, r2
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7f8 faa1 	bl	80059a4 <HAL_PCD_EP_ClrStall>
 800d462:	4603      	mov	r3, r0
 800d464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d466:	7bfb      	ldrb	r3, [r7, #15]
 800d468:	4618      	mov	r0, r3
 800d46a:	f000 f8bf 	bl	800d5ec <USBD_Get_USB_Status>
 800d46e:	4603      	mov	r3, r0
 800d470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d472:	7bbb      	ldrb	r3, [r7, #14]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3710      	adds	r7, #16
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d48e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d494:	2b00      	cmp	r3, #0
 800d496:	da0b      	bge.n	800d4b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d498:	78fb      	ldrb	r3, [r7, #3]
 800d49a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d49e:	68f9      	ldr	r1, [r7, #12]
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	00db      	lsls	r3, r3, #3
 800d4a4:	4413      	add	r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	440b      	add	r3, r1
 800d4aa:	3316      	adds	r3, #22
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	e00b      	b.n	800d4c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d4b0:	78fb      	ldrb	r3, [r7, #3]
 800d4b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d4b6:	68f9      	ldr	r1, [r7, #12]
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	00db      	lsls	r3, r3, #3
 800d4bc:	4413      	add	r3, r2
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	440b      	add	r3, r1
 800d4c2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d4c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3714      	adds	r7, #20
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d4ee:	78fa      	ldrb	r2, [r7, #3]
 800d4f0:	4611      	mov	r1, r2
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7f8 f88e 	bl	8005614 <HAL_PCD_SetAddress>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4fc:	7bfb      	ldrb	r3, [r7, #15]
 800d4fe:	4618      	mov	r0, r3
 800d500:	f000 f874 	bl	800d5ec <USBD_Get_USB_Status>
 800d504:	4603      	mov	r3, r0
 800d506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d508:	7bbb      	ldrb	r3, [r7, #14]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b086      	sub	sp, #24
 800d516:	af00      	add	r7, sp, #0
 800d518:	60f8      	str	r0, [r7, #12]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	603b      	str	r3, [r7, #0]
 800d51e:	460b      	mov	r3, r1
 800d520:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d522:	2300      	movs	r3, #0
 800d524:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d526:	2300      	movs	r3, #0
 800d528:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d530:	7af9      	ldrb	r1, [r7, #11]
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	f7f8 f998 	bl	800586a <HAL_PCD_EP_Transmit>
 800d53a:	4603      	mov	r3, r0
 800d53c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d53e:	7dfb      	ldrb	r3, [r7, #23]
 800d540:	4618      	mov	r0, r3
 800d542:	f000 f853 	bl	800d5ec <USBD_Get_USB_Status>
 800d546:	4603      	mov	r3, r0
 800d548:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d54a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3718      	adds	r7, #24
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b086      	sub	sp, #24
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	607a      	str	r2, [r7, #4]
 800d55e:	603b      	str	r3, [r7, #0]
 800d560:	460b      	mov	r3, r1
 800d562:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d564:	2300      	movs	r3, #0
 800d566:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d568:	2300      	movs	r3, #0
 800d56a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d572:	7af9      	ldrb	r1, [r7, #11]
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	f7f8 f924 	bl	80057c4 <HAL_PCD_EP_Receive>
 800d57c:	4603      	mov	r3, r0
 800d57e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d580:	7dfb      	ldrb	r3, [r7, #23]
 800d582:	4618      	mov	r0, r3
 800d584:	f000 f832 	bl	800d5ec <USBD_Get_USB_Status>
 800d588:	4603      	mov	r3, r0
 800d58a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d58c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3718      	adds	r7, #24
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b082      	sub	sp, #8
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	460b      	mov	r3, r1
 800d5a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5a8:	78fa      	ldrb	r2, [r7, #3]
 800d5aa:	4611      	mov	r1, r2
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7f8 f944 	bl	800583a <HAL_PCD_EP_GetRxCount>
 800d5b2:	4603      	mov	r3, r0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d5c4:	4b03      	ldr	r3, [pc, #12]	@ (800d5d4 <USBD_static_malloc+0x18>)
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	370c      	adds	r7, #12
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	20019fb0 	.word	0x20019fb0

0800d5d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]

}
 800d5e0:	bf00      	nop
 800d5e2:	370c      	adds	r7, #12
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b085      	sub	sp, #20
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d5fa:	79fb      	ldrb	r3, [r7, #7]
 800d5fc:	2b03      	cmp	r3, #3
 800d5fe:	d817      	bhi.n	800d630 <USBD_Get_USB_Status+0x44>
 800d600:	a201      	add	r2, pc, #4	@ (adr r2, 800d608 <USBD_Get_USB_Status+0x1c>)
 800d602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d606:	bf00      	nop
 800d608:	0800d619 	.word	0x0800d619
 800d60c:	0800d61f 	.word	0x0800d61f
 800d610:	0800d625 	.word	0x0800d625
 800d614:	0800d62b 	.word	0x0800d62b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d618:	2300      	movs	r3, #0
 800d61a:	73fb      	strb	r3, [r7, #15]
    break;
 800d61c:	e00b      	b.n	800d636 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d61e:	2303      	movs	r3, #3
 800d620:	73fb      	strb	r3, [r7, #15]
    break;
 800d622:	e008      	b.n	800d636 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d624:	2301      	movs	r3, #1
 800d626:	73fb      	strb	r3, [r7, #15]
    break;
 800d628:	e005      	b.n	800d636 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d62a:	2303      	movs	r3, #3
 800d62c:	73fb      	strb	r3, [r7, #15]
    break;
 800d62e:	e002      	b.n	800d636 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d630:	2303      	movs	r3, #3
 800d632:	73fb      	strb	r3, [r7, #15]
    break;
 800d634:	bf00      	nop
  }
  return usb_status;
 800d636:	7bfb      	ldrb	r3, [r7, #15]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3714      	adds	r7, #20
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <arm_copy_f32>:
 800d644:	b4f0      	push	{r4, r5, r6, r7}
 800d646:	0897      	lsrs	r7, r2, #2
 800d648:	d01e      	beq.n	800d688 <arm_copy_f32+0x44>
 800d64a:	f100 0410 	add.w	r4, r0, #16
 800d64e:	f101 0310 	add.w	r3, r1, #16
 800d652:	463d      	mov	r5, r7
 800d654:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800d658:	f843 6c10 	str.w	r6, [r3, #-16]
 800d65c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800d660:	f843 6c0c 	str.w	r6, [r3, #-12]
 800d664:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800d668:	f843 6c08 	str.w	r6, [r3, #-8]
 800d66c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800d670:	f843 6c04 	str.w	r6, [r3, #-4]
 800d674:	3d01      	subs	r5, #1
 800d676:	f104 0410 	add.w	r4, r4, #16
 800d67a:	f103 0310 	add.w	r3, r3, #16
 800d67e:	d1e9      	bne.n	800d654 <arm_copy_f32+0x10>
 800d680:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800d684:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800d688:	f012 0203 	ands.w	r2, r2, #3
 800d68c:	d009      	beq.n	800d6a2 <arm_copy_f32+0x5e>
 800d68e:	6803      	ldr	r3, [r0, #0]
 800d690:	600b      	str	r3, [r1, #0]
 800d692:	3a01      	subs	r2, #1
 800d694:	d005      	beq.n	800d6a2 <arm_copy_f32+0x5e>
 800d696:	6843      	ldr	r3, [r0, #4]
 800d698:	604b      	str	r3, [r1, #4]
 800d69a:	2a01      	cmp	r2, #1
 800d69c:	bf1c      	itt	ne
 800d69e:	6883      	ldrne	r3, [r0, #8]
 800d6a0:	608b      	strne	r3, [r1, #8]
 800d6a2:	bcf0      	pop	{r4, r5, r6, r7}
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop

0800d6a8 <arm_std_f32>:
 800d6a8:	b510      	push	{r4, lr}
 800d6aa:	ed2d 8b02 	vpush	{d8}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	4614      	mov	r4, r2
 800d6b2:	aa01      	add	r2, sp, #4
 800d6b4:	f000 f8e4 	bl	800d880 <arm_var_f32>
 800d6b8:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d6bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c4:	db0c      	blt.n	800d6e0 <arm_std_f32+0x38>
 800d6c6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ce:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800d6d2:	d408      	bmi.n	800d6e6 <arm_std_f32+0x3e>
 800d6d4:	ed84 8a00 	vstr	s16, [r4]
 800d6d8:	b002      	add	sp, #8
 800d6da:	ecbd 8b02 	vpop	{d8}
 800d6de:	bd10      	pop	{r4, pc}
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	6023      	str	r3, [r4, #0]
 800d6e4:	e7f8      	b.n	800d6d8 <arm_std_f32+0x30>
 800d6e6:	f005 fa27 	bl	8012b38 <sqrtf>
 800d6ea:	e7f3      	b.n	800d6d4 <arm_std_f32+0x2c>

0800d6ec <arm_mean_f32>:
 800d6ec:	b430      	push	{r4, r5}
 800d6ee:	088d      	lsrs	r5, r1, #2
 800d6f0:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800d764 <arm_mean_f32+0x78>
 800d6f4:	d018      	beq.n	800d728 <arm_mean_f32+0x3c>
 800d6f6:	f100 0310 	add.w	r3, r0, #16
 800d6fa:	462c      	mov	r4, r5
 800d6fc:	ed53 5a04 	vldr	s11, [r3, #-16]
 800d700:	ed13 6a03 	vldr	s12, [r3, #-12]
 800d704:	ed53 6a02 	vldr	s13, [r3, #-8]
 800d708:	ed13 7a01 	vldr	s14, [r3, #-4]
 800d70c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d710:	3c01      	subs	r4, #1
 800d712:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d716:	f103 0310 	add.w	r3, r3, #16
 800d71a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d71e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d722:	d1eb      	bne.n	800d6fc <arm_mean_f32+0x10>
 800d724:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800d728:	f011 0303 	ands.w	r3, r1, #3
 800d72c:	d00f      	beq.n	800d74e <arm_mean_f32+0x62>
 800d72e:	ed90 7a00 	vldr	s14, [r0]
 800d732:	3b01      	subs	r3, #1
 800d734:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d738:	d009      	beq.n	800d74e <arm_mean_f32+0x62>
 800d73a:	ed90 7a01 	vldr	s14, [r0, #4]
 800d73e:	2b01      	cmp	r3, #1
 800d740:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d744:	bf1c      	itt	ne
 800d746:	ed90 7a02 	vldrne	s14, [r0, #8]
 800d74a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800d74e:	ee07 1a10 	vmov	s14, r1
 800d752:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d756:	bc30      	pop	{r4, r5}
 800d758:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d75c:	edc2 6a00 	vstr	s13, [r2]
 800d760:	4770      	bx	lr
 800d762:	bf00      	nop
 800d764:	00000000 	.word	0x00000000

0800d768 <arm_scale_f32>:
 800d768:	b470      	push	{r4, r5, r6}
 800d76a:	0896      	lsrs	r6, r2, #2
 800d76c:	d026      	beq.n	800d7bc <arm_scale_f32+0x54>
 800d76e:	f100 0410 	add.w	r4, r0, #16
 800d772:	f101 0310 	add.w	r3, r1, #16
 800d776:	4635      	mov	r5, r6
 800d778:	ed14 6a03 	vldr	s12, [r4, #-12]
 800d77c:	ed54 6a02 	vldr	s13, [r4, #-8]
 800d780:	ed14 7a01 	vldr	s14, [r4, #-4]
 800d784:	ed54 7a04 	vldr	s15, [r4, #-16]
 800d788:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d78c:	ee60 6a26 	vmul.f32	s13, s0, s13
 800d790:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d794:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d798:	3d01      	subs	r5, #1
 800d79a:	ed03 6a03 	vstr	s12, [r3, #-12]
 800d79e:	ed43 6a02 	vstr	s13, [r3, #-8]
 800d7a2:	ed03 7a01 	vstr	s14, [r3, #-4]
 800d7a6:	ed43 7a04 	vstr	s15, [r3, #-16]
 800d7aa:	f104 0410 	add.w	r4, r4, #16
 800d7ae:	f103 0310 	add.w	r3, r3, #16
 800d7b2:	d1e1      	bne.n	800d778 <arm_scale_f32+0x10>
 800d7b4:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800d7b8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800d7bc:	f012 0203 	ands.w	r2, r2, #3
 800d7c0:	d015      	beq.n	800d7ee <arm_scale_f32+0x86>
 800d7c2:	edd0 7a00 	vldr	s15, [r0]
 800d7c6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d7ca:	3a01      	subs	r2, #1
 800d7cc:	edc1 7a00 	vstr	s15, [r1]
 800d7d0:	d00d      	beq.n	800d7ee <arm_scale_f32+0x86>
 800d7d2:	edd0 7a01 	vldr	s15, [r0, #4]
 800d7d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d7da:	2a01      	cmp	r2, #1
 800d7dc:	edc1 7a01 	vstr	s15, [r1, #4]
 800d7e0:	d005      	beq.n	800d7ee <arm_scale_f32+0x86>
 800d7e2:	edd0 7a02 	vldr	s15, [r0, #8]
 800d7e6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d7ea:	ed81 0a02 	vstr	s0, [r1, #8]
 800d7ee:	bc70      	pop	{r4, r5, r6}
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop

0800d7f4 <arm_offset_f32>:
 800d7f4:	b470      	push	{r4, r5, r6}
 800d7f6:	0896      	lsrs	r6, r2, #2
 800d7f8:	d026      	beq.n	800d848 <arm_offset_f32+0x54>
 800d7fa:	f100 0410 	add.w	r4, r0, #16
 800d7fe:	f101 0310 	add.w	r3, r1, #16
 800d802:	4635      	mov	r5, r6
 800d804:	ed54 7a04 	vldr	s15, [r4, #-16]
 800d808:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d80c:	3d01      	subs	r5, #1
 800d80e:	ed43 7a04 	vstr	s15, [r3, #-16]
 800d812:	ed54 7a03 	vldr	s15, [r4, #-12]
 800d816:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d81a:	f104 0410 	add.w	r4, r4, #16
 800d81e:	ed43 7a03 	vstr	s15, [r3, #-12]
 800d822:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800d826:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d82a:	f103 0310 	add.w	r3, r3, #16
 800d82e:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800d832:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800d836:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d83a:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800d83e:	d1e1      	bne.n	800d804 <arm_offset_f32+0x10>
 800d840:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800d844:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800d848:	f012 0203 	ands.w	r2, r2, #3
 800d84c:	d015      	beq.n	800d87a <arm_offset_f32+0x86>
 800d84e:	edd0 7a00 	vldr	s15, [r0]
 800d852:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d856:	3a01      	subs	r2, #1
 800d858:	edc1 7a00 	vstr	s15, [r1]
 800d85c:	d00d      	beq.n	800d87a <arm_offset_f32+0x86>
 800d85e:	edd0 7a01 	vldr	s15, [r0, #4]
 800d862:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d866:	2a01      	cmp	r2, #1
 800d868:	edc1 7a01 	vstr	s15, [r1, #4]
 800d86c:	d005      	beq.n	800d87a <arm_offset_f32+0x86>
 800d86e:	edd0 7a02 	vldr	s15, [r0, #8]
 800d872:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d876:	ed81 0a02 	vstr	s0, [r1, #8]
 800d87a:	bc70      	pop	{r4, r5, r6}
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop

0800d880 <arm_var_f32>:
 800d880:	2901      	cmp	r1, #1
 800d882:	f240 809a 	bls.w	800d9ba <arm_var_f32+0x13a>
 800d886:	b4f0      	push	{r4, r5, r6, r7}
 800d888:	088d      	lsrs	r5, r1, #2
 800d88a:	f000 80a0 	beq.w	800d9ce <arm_var_f32+0x14e>
 800d88e:	f100 0310 	add.w	r3, r0, #16
 800d892:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800d9d8 <arm_var_f32+0x158>
 800d896:	461c      	mov	r4, r3
 800d898:	462e      	mov	r6, r5
 800d89a:	ed54 5a04 	vldr	s11, [r4, #-16]
 800d89e:	ed14 6a03 	vldr	s12, [r4, #-12]
 800d8a2:	ed54 6a02 	vldr	s13, [r4, #-8]
 800d8a6:	ed14 7a01 	vldr	s14, [r4, #-4]
 800d8aa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d8ae:	3e01      	subs	r6, #1
 800d8b0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d8b4:	f104 0410 	add.w	r4, r4, #16
 800d8b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8c0:	d1eb      	bne.n	800d89a <arm_var_f32+0x1a>
 800d8c2:	f011 0403 	ands.w	r4, r1, #3
 800d8c6:	ea4f 1705 	mov.w	r7, r5, lsl #4
 800d8ca:	eb00 1605 	add.w	r6, r0, r5, lsl #4
 800d8ce:	d077      	beq.n	800d9c0 <arm_var_f32+0x140>
 800d8d0:	ed96 7a00 	vldr	s14, [r6]
 800d8d4:	1e63      	subs	r3, r4, #1
 800d8d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8da:	d063      	beq.n	800d9a4 <arm_var_f32+0x124>
 800d8dc:	ed96 7a01 	vldr	s14, [r6, #4]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8e6:	d05d      	beq.n	800d9a4 <arm_var_f32+0x124>
 800d8e8:	ed96 7a02 	vldr	s14, [r6, #8]
 800d8ec:	ee06 1a90 	vmov	s13, r1
 800d8f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8f4:	eef8 4a66 	vcvt.f32.u32	s9, s13
 800d8f8:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800d8fc:	2d00      	cmp	r5, #0
 800d8fe:	d059      	beq.n	800d9b4 <arm_var_f32+0x134>
 800d900:	f100 0310 	add.w	r3, r0, #16
 800d904:	012f      	lsls	r7, r5, #4
 800d906:	4629      	mov	r1, r5
 800d908:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800d9d8 <arm_var_f32+0x158>
 800d90c:	ed13 6a04 	vldr	s12, [r3, #-16]
 800d910:	ed53 6a03 	vldr	s13, [r3, #-12]
 800d914:	ed13 7a02 	vldr	s14, [r3, #-8]
 800d918:	ed53 5a01 	vldr	s11, [r3, #-4]
 800d91c:	ee36 6a45 	vsub.f32	s12, s12, s10
 800d920:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d924:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d928:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d92c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d930:	ee77 7a45 	vsub.f32	s15, s14, s10
 800d934:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d938:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d93c:	ee35 6ac5 	vsub.f32	s12, s11, s10
 800d940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d944:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d948:	3901      	subs	r1, #1
 800d94a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d94e:	f103 0310 	add.w	r3, r3, #16
 800d952:	d1db      	bne.n	800d90c <arm_var_f32+0x8c>
 800d954:	4438      	add	r0, r7
 800d956:	b1dc      	cbz	r4, 800d990 <arm_var_f32+0x110>
 800d958:	1e63      	subs	r3, r4, #1
 800d95a:	ed90 7a00 	vldr	s14, [r0]
 800d95e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d962:	ee27 7a07 	vmul.f32	s14, s14, s14
 800d966:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d96a:	b18b      	cbz	r3, 800d990 <arm_var_f32+0x110>
 800d96c:	ed90 7a01 	vldr	s14, [r0, #4]
 800d970:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d974:	2b01      	cmp	r3, #1
 800d976:	ee27 7a07 	vmul.f32	s14, s14, s14
 800d97a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d97e:	d007      	beq.n	800d990 <arm_var_f32+0x110>
 800d980:	ed90 7a02 	vldr	s14, [r0, #8]
 800d984:	ee37 5a45 	vsub.f32	s10, s14, s10
 800d988:	ee25 5a05 	vmul.f32	s10, s10, s10
 800d98c:	ee77 7a85 	vadd.f32	s15, s15, s10
 800d990:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d994:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800d998:	bcf0      	pop	{r4, r5, r6, r7}
 800d99a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d99e:	ed82 7a00 	vstr	s14, [r2]
 800d9a2:	4770      	bx	lr
 800d9a4:	ee07 1a10 	vmov	s14, r1
 800d9a8:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800d9ac:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800d9b0:	2d00      	cmp	r5, #0
 800d9b2:	d1a5      	bne.n	800d900 <arm_var_f32+0x80>
 800d9b4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d9d8 <arm_var_f32+0x158>
 800d9b8:	e7cf      	b.n	800d95a <arm_var_f32+0xda>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	6013      	str	r3, [r2, #0]
 800d9be:	4770      	bx	lr
 800d9c0:	ee07 1a10 	vmov	s14, r1
 800d9c4:	eef8 4a47 	vcvt.f32.u32	s9, s14
 800d9c8:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800d9cc:	e79b      	b.n	800d906 <arm_var_f32+0x86>
 800d9ce:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800d9d8 <arm_var_f32+0x158>
 800d9d2:	4606      	mov	r6, r0
 800d9d4:	460c      	mov	r4, r1
 800d9d6:	e77b      	b.n	800d8d0 <arm_var_f32+0x50>
 800d9d8:	00000000 	.word	0x00000000

0800d9dc <atof>:
 800d9dc:	2100      	movs	r1, #0
 800d9de:	f000 be3d 	b.w	800e65c <strtod>

0800d9e2 <atoi>:
 800d9e2:	220a      	movs	r2, #10
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	f000 bec1 	b.w	800e76c <strtol>
	...

0800d9ec <srand>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	4b10      	ldr	r3, [pc, #64]	@ (800da30 <srand+0x44>)
 800d9f0:	681d      	ldr	r5, [r3, #0]
 800d9f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	b9b3      	cbnz	r3, 800da26 <srand+0x3a>
 800d9f8:	2018      	movs	r0, #24
 800d9fa:	f003 f9ed 	bl	8010dd8 <malloc>
 800d9fe:	4602      	mov	r2, r0
 800da00:	6328      	str	r0, [r5, #48]	@ 0x30
 800da02:	b920      	cbnz	r0, 800da0e <srand+0x22>
 800da04:	4b0b      	ldr	r3, [pc, #44]	@ (800da34 <srand+0x48>)
 800da06:	480c      	ldr	r0, [pc, #48]	@ (800da38 <srand+0x4c>)
 800da08:	2146      	movs	r1, #70	@ 0x46
 800da0a:	f001 ffeb 	bl	800f9e4 <__assert_func>
 800da0e:	490b      	ldr	r1, [pc, #44]	@ (800da3c <srand+0x50>)
 800da10:	4b0b      	ldr	r3, [pc, #44]	@ (800da40 <srand+0x54>)
 800da12:	e9c0 1300 	strd	r1, r3, [r0]
 800da16:	4b0b      	ldr	r3, [pc, #44]	@ (800da44 <srand+0x58>)
 800da18:	6083      	str	r3, [r0, #8]
 800da1a:	230b      	movs	r3, #11
 800da1c:	8183      	strh	r3, [r0, #12]
 800da1e:	2100      	movs	r1, #0
 800da20:	2001      	movs	r0, #1
 800da22:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800da26:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800da28:	2200      	movs	r2, #0
 800da2a:	611c      	str	r4, [r3, #16]
 800da2c:	615a      	str	r2, [r3, #20]
 800da2e:	bd38      	pop	{r3, r4, r5, pc}
 800da30:	20000280 	.word	0x20000280
 800da34:	0806ceac 	.word	0x0806ceac
 800da38:	0806cec3 	.word	0x0806cec3
 800da3c:	abcd330e 	.word	0xabcd330e
 800da40:	e66d1234 	.word	0xe66d1234
 800da44:	0005deec 	.word	0x0005deec

0800da48 <sulp>:
 800da48:	b570      	push	{r4, r5, r6, lr}
 800da4a:	4604      	mov	r4, r0
 800da4c:	460d      	mov	r5, r1
 800da4e:	ec45 4b10 	vmov	d0, r4, r5
 800da52:	4616      	mov	r6, r2
 800da54:	f003 fdf4 	bl	8011640 <__ulp>
 800da58:	ec51 0b10 	vmov	r0, r1, d0
 800da5c:	b17e      	cbz	r6, 800da7e <sulp+0x36>
 800da5e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800da62:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800da66:	2b00      	cmp	r3, #0
 800da68:	dd09      	ble.n	800da7e <sulp+0x36>
 800da6a:	051b      	lsls	r3, r3, #20
 800da6c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800da70:	2400      	movs	r4, #0
 800da72:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800da76:	4622      	mov	r2, r4
 800da78:	462b      	mov	r3, r5
 800da7a:	f7f2 fdcd 	bl	8000618 <__aeabi_dmul>
 800da7e:	ec41 0b10 	vmov	d0, r0, r1
 800da82:	bd70      	pop	{r4, r5, r6, pc}
 800da84:	0000      	movs	r0, r0
	...

0800da88 <_strtod_l>:
 800da88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da8c:	b09f      	sub	sp, #124	@ 0x7c
 800da8e:	460c      	mov	r4, r1
 800da90:	9217      	str	r2, [sp, #92]	@ 0x5c
 800da92:	2200      	movs	r2, #0
 800da94:	921a      	str	r2, [sp, #104]	@ 0x68
 800da96:	9005      	str	r0, [sp, #20]
 800da98:	f04f 0a00 	mov.w	sl, #0
 800da9c:	f04f 0b00 	mov.w	fp, #0
 800daa0:	460a      	mov	r2, r1
 800daa2:	9219      	str	r2, [sp, #100]	@ 0x64
 800daa4:	7811      	ldrb	r1, [r2, #0]
 800daa6:	292b      	cmp	r1, #43	@ 0x2b
 800daa8:	d04a      	beq.n	800db40 <_strtod_l+0xb8>
 800daaa:	d838      	bhi.n	800db1e <_strtod_l+0x96>
 800daac:	290d      	cmp	r1, #13
 800daae:	d832      	bhi.n	800db16 <_strtod_l+0x8e>
 800dab0:	2908      	cmp	r1, #8
 800dab2:	d832      	bhi.n	800db1a <_strtod_l+0x92>
 800dab4:	2900      	cmp	r1, #0
 800dab6:	d03b      	beq.n	800db30 <_strtod_l+0xa8>
 800dab8:	2200      	movs	r2, #0
 800daba:	920e      	str	r2, [sp, #56]	@ 0x38
 800dabc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dabe:	782a      	ldrb	r2, [r5, #0]
 800dac0:	2a30      	cmp	r2, #48	@ 0x30
 800dac2:	f040 80b2 	bne.w	800dc2a <_strtod_l+0x1a2>
 800dac6:	786a      	ldrb	r2, [r5, #1]
 800dac8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dacc:	2a58      	cmp	r2, #88	@ 0x58
 800dace:	d16e      	bne.n	800dbae <_strtod_l+0x126>
 800dad0:	9302      	str	r3, [sp, #8]
 800dad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dad4:	9301      	str	r3, [sp, #4]
 800dad6:	ab1a      	add	r3, sp, #104	@ 0x68
 800dad8:	9300      	str	r3, [sp, #0]
 800dada:	4a8f      	ldr	r2, [pc, #572]	@ (800dd18 <_strtod_l+0x290>)
 800dadc:	9805      	ldr	r0, [sp, #20]
 800dade:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dae0:	a919      	add	r1, sp, #100	@ 0x64
 800dae2:	f002 fea7 	bl	8010834 <__gethex>
 800dae6:	f010 060f 	ands.w	r6, r0, #15
 800daea:	4604      	mov	r4, r0
 800daec:	d005      	beq.n	800dafa <_strtod_l+0x72>
 800daee:	2e06      	cmp	r6, #6
 800daf0:	d128      	bne.n	800db44 <_strtod_l+0xbc>
 800daf2:	3501      	adds	r5, #1
 800daf4:	2300      	movs	r3, #0
 800daf6:	9519      	str	r5, [sp, #100]	@ 0x64
 800daf8:	930e      	str	r3, [sp, #56]	@ 0x38
 800dafa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	f040 858e 	bne.w	800e61e <_strtod_l+0xb96>
 800db02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db04:	b1cb      	cbz	r3, 800db3a <_strtod_l+0xb2>
 800db06:	4652      	mov	r2, sl
 800db08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800db0c:	ec43 2b10 	vmov	d0, r2, r3
 800db10:	b01f      	add	sp, #124	@ 0x7c
 800db12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db16:	2920      	cmp	r1, #32
 800db18:	d1ce      	bne.n	800dab8 <_strtod_l+0x30>
 800db1a:	3201      	adds	r2, #1
 800db1c:	e7c1      	b.n	800daa2 <_strtod_l+0x1a>
 800db1e:	292d      	cmp	r1, #45	@ 0x2d
 800db20:	d1ca      	bne.n	800dab8 <_strtod_l+0x30>
 800db22:	2101      	movs	r1, #1
 800db24:	910e      	str	r1, [sp, #56]	@ 0x38
 800db26:	1c51      	adds	r1, r2, #1
 800db28:	9119      	str	r1, [sp, #100]	@ 0x64
 800db2a:	7852      	ldrb	r2, [r2, #1]
 800db2c:	2a00      	cmp	r2, #0
 800db2e:	d1c5      	bne.n	800dabc <_strtod_l+0x34>
 800db30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db32:	9419      	str	r4, [sp, #100]	@ 0x64
 800db34:	2b00      	cmp	r3, #0
 800db36:	f040 8570 	bne.w	800e61a <_strtod_l+0xb92>
 800db3a:	4652      	mov	r2, sl
 800db3c:	465b      	mov	r3, fp
 800db3e:	e7e5      	b.n	800db0c <_strtod_l+0x84>
 800db40:	2100      	movs	r1, #0
 800db42:	e7ef      	b.n	800db24 <_strtod_l+0x9c>
 800db44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800db46:	b13a      	cbz	r2, 800db58 <_strtod_l+0xd0>
 800db48:	2135      	movs	r1, #53	@ 0x35
 800db4a:	a81c      	add	r0, sp, #112	@ 0x70
 800db4c:	f003 fe72 	bl	8011834 <__copybits>
 800db50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db52:	9805      	ldr	r0, [sp, #20]
 800db54:	f003 fa48 	bl	8010fe8 <_Bfree>
 800db58:	3e01      	subs	r6, #1
 800db5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800db5c:	2e04      	cmp	r6, #4
 800db5e:	d806      	bhi.n	800db6e <_strtod_l+0xe6>
 800db60:	e8df f006 	tbb	[pc, r6]
 800db64:	201d0314 	.word	0x201d0314
 800db68:	14          	.byte	0x14
 800db69:	00          	.byte	0x00
 800db6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800db6e:	05e1      	lsls	r1, r4, #23
 800db70:	bf48      	it	mi
 800db72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800db76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db7a:	0d1b      	lsrs	r3, r3, #20
 800db7c:	051b      	lsls	r3, r3, #20
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d1bb      	bne.n	800dafa <_strtod_l+0x72>
 800db82:	f001 fee3 	bl	800f94c <__errno>
 800db86:	2322      	movs	r3, #34	@ 0x22
 800db88:	6003      	str	r3, [r0, #0]
 800db8a:	e7b6      	b.n	800dafa <_strtod_l+0x72>
 800db8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800db90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800db94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800db98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800db9c:	e7e7      	b.n	800db6e <_strtod_l+0xe6>
 800db9e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800dd20 <_strtod_l+0x298>
 800dba2:	e7e4      	b.n	800db6e <_strtod_l+0xe6>
 800dba4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dba8:	f04f 3aff 	mov.w	sl, #4294967295
 800dbac:	e7df      	b.n	800db6e <_strtod_l+0xe6>
 800dbae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbb0:	1c5a      	adds	r2, r3, #1
 800dbb2:	9219      	str	r2, [sp, #100]	@ 0x64
 800dbb4:	785b      	ldrb	r3, [r3, #1]
 800dbb6:	2b30      	cmp	r3, #48	@ 0x30
 800dbb8:	d0f9      	beq.n	800dbae <_strtod_l+0x126>
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d09d      	beq.n	800dafa <_strtod_l+0x72>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	2700      	movs	r7, #0
 800dbc2:	9308      	str	r3, [sp, #32]
 800dbc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbc6:	930c      	str	r3, [sp, #48]	@ 0x30
 800dbc8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800dbca:	46b9      	mov	r9, r7
 800dbcc:	220a      	movs	r2, #10
 800dbce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dbd0:	7805      	ldrb	r5, [r0, #0]
 800dbd2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dbd6:	b2d9      	uxtb	r1, r3
 800dbd8:	2909      	cmp	r1, #9
 800dbda:	d928      	bls.n	800dc2e <_strtod_l+0x1a6>
 800dbdc:	494f      	ldr	r1, [pc, #316]	@ (800dd1c <_strtod_l+0x294>)
 800dbde:	2201      	movs	r2, #1
 800dbe0:	f001 fdd2 	bl	800f788 <strncmp>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d032      	beq.n	800dc4e <_strtod_l+0x1c6>
 800dbe8:	2000      	movs	r0, #0
 800dbea:	462a      	mov	r2, r5
 800dbec:	900a      	str	r0, [sp, #40]	@ 0x28
 800dbee:	464d      	mov	r5, r9
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2a65      	cmp	r2, #101	@ 0x65
 800dbf4:	d001      	beq.n	800dbfa <_strtod_l+0x172>
 800dbf6:	2a45      	cmp	r2, #69	@ 0x45
 800dbf8:	d114      	bne.n	800dc24 <_strtod_l+0x19c>
 800dbfa:	b91d      	cbnz	r5, 800dc04 <_strtod_l+0x17c>
 800dbfc:	9a08      	ldr	r2, [sp, #32]
 800dbfe:	4302      	orrs	r2, r0
 800dc00:	d096      	beq.n	800db30 <_strtod_l+0xa8>
 800dc02:	2500      	movs	r5, #0
 800dc04:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dc06:	1c62      	adds	r2, r4, #1
 800dc08:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc0a:	7862      	ldrb	r2, [r4, #1]
 800dc0c:	2a2b      	cmp	r2, #43	@ 0x2b
 800dc0e:	d07a      	beq.n	800dd06 <_strtod_l+0x27e>
 800dc10:	2a2d      	cmp	r2, #45	@ 0x2d
 800dc12:	d07e      	beq.n	800dd12 <_strtod_l+0x28a>
 800dc14:	f04f 0c00 	mov.w	ip, #0
 800dc18:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dc1c:	2909      	cmp	r1, #9
 800dc1e:	f240 8085 	bls.w	800dd2c <_strtod_l+0x2a4>
 800dc22:	9419      	str	r4, [sp, #100]	@ 0x64
 800dc24:	f04f 0800 	mov.w	r8, #0
 800dc28:	e0a5      	b.n	800dd76 <_strtod_l+0x2ee>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	e7c8      	b.n	800dbc0 <_strtod_l+0x138>
 800dc2e:	f1b9 0f08 	cmp.w	r9, #8
 800dc32:	bfd8      	it	le
 800dc34:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800dc36:	f100 0001 	add.w	r0, r0, #1
 800dc3a:	bfda      	itte	le
 800dc3c:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc40:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800dc42:	fb02 3707 	mlagt	r7, r2, r7, r3
 800dc46:	f109 0901 	add.w	r9, r9, #1
 800dc4a:	9019      	str	r0, [sp, #100]	@ 0x64
 800dc4c:	e7bf      	b.n	800dbce <_strtod_l+0x146>
 800dc4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc50:	1c5a      	adds	r2, r3, #1
 800dc52:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc54:	785a      	ldrb	r2, [r3, #1]
 800dc56:	f1b9 0f00 	cmp.w	r9, #0
 800dc5a:	d03b      	beq.n	800dcd4 <_strtod_l+0x24c>
 800dc5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc5e:	464d      	mov	r5, r9
 800dc60:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dc64:	2b09      	cmp	r3, #9
 800dc66:	d912      	bls.n	800dc8e <_strtod_l+0x206>
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e7c2      	b.n	800dbf2 <_strtod_l+0x16a>
 800dc6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc6e:	1c5a      	adds	r2, r3, #1
 800dc70:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc72:	785a      	ldrb	r2, [r3, #1]
 800dc74:	3001      	adds	r0, #1
 800dc76:	2a30      	cmp	r2, #48	@ 0x30
 800dc78:	d0f8      	beq.n	800dc6c <_strtod_l+0x1e4>
 800dc7a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dc7e:	2b08      	cmp	r3, #8
 800dc80:	f200 84d2 	bhi.w	800e628 <_strtod_l+0xba0>
 800dc84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc86:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc88:	2000      	movs	r0, #0
 800dc8a:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc8c:	4605      	mov	r5, r0
 800dc8e:	3a30      	subs	r2, #48	@ 0x30
 800dc90:	f100 0301 	add.w	r3, r0, #1
 800dc94:	d018      	beq.n	800dcc8 <_strtod_l+0x240>
 800dc96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc98:	4419      	add	r1, r3
 800dc9a:	910a      	str	r1, [sp, #40]	@ 0x28
 800dc9c:	462e      	mov	r6, r5
 800dc9e:	f04f 0e0a 	mov.w	lr, #10
 800dca2:	1c71      	adds	r1, r6, #1
 800dca4:	eba1 0c05 	sub.w	ip, r1, r5
 800dca8:	4563      	cmp	r3, ip
 800dcaa:	dc15      	bgt.n	800dcd8 <_strtod_l+0x250>
 800dcac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800dcb0:	182b      	adds	r3, r5, r0
 800dcb2:	2b08      	cmp	r3, #8
 800dcb4:	f105 0501 	add.w	r5, r5, #1
 800dcb8:	4405      	add	r5, r0
 800dcba:	dc1a      	bgt.n	800dcf2 <_strtod_l+0x26a>
 800dcbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dcbe:	230a      	movs	r3, #10
 800dcc0:	fb03 2301 	mla	r3, r3, r1, r2
 800dcc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dcca:	1c51      	adds	r1, r2, #1
 800dccc:	9119      	str	r1, [sp, #100]	@ 0x64
 800dcce:	7852      	ldrb	r2, [r2, #1]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	e7c5      	b.n	800dc60 <_strtod_l+0x1d8>
 800dcd4:	4648      	mov	r0, r9
 800dcd6:	e7ce      	b.n	800dc76 <_strtod_l+0x1ee>
 800dcd8:	2e08      	cmp	r6, #8
 800dcda:	dc05      	bgt.n	800dce8 <_strtod_l+0x260>
 800dcdc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800dcde:	fb0e f606 	mul.w	r6, lr, r6
 800dce2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800dce4:	460e      	mov	r6, r1
 800dce6:	e7dc      	b.n	800dca2 <_strtod_l+0x21a>
 800dce8:	2910      	cmp	r1, #16
 800dcea:	bfd8      	it	le
 800dcec:	fb0e f707 	mulle.w	r7, lr, r7
 800dcf0:	e7f8      	b.n	800dce4 <_strtod_l+0x25c>
 800dcf2:	2b0f      	cmp	r3, #15
 800dcf4:	bfdc      	itt	le
 800dcf6:	230a      	movle	r3, #10
 800dcf8:	fb03 2707 	mlale	r7, r3, r7, r2
 800dcfc:	e7e3      	b.n	800dcc6 <_strtod_l+0x23e>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd02:	2301      	movs	r3, #1
 800dd04:	e77a      	b.n	800dbfc <_strtod_l+0x174>
 800dd06:	f04f 0c00 	mov.w	ip, #0
 800dd0a:	1ca2      	adds	r2, r4, #2
 800dd0c:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd0e:	78a2      	ldrb	r2, [r4, #2]
 800dd10:	e782      	b.n	800dc18 <_strtod_l+0x190>
 800dd12:	f04f 0c01 	mov.w	ip, #1
 800dd16:	e7f8      	b.n	800dd0a <_strtod_l+0x282>
 800dd18:	0806d164 	.word	0x0806d164
 800dd1c:	0806cf1b 	.word	0x0806cf1b
 800dd20:	7ff00000 	.word	0x7ff00000
 800dd24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd26:	1c51      	adds	r1, r2, #1
 800dd28:	9119      	str	r1, [sp, #100]	@ 0x64
 800dd2a:	7852      	ldrb	r2, [r2, #1]
 800dd2c:	2a30      	cmp	r2, #48	@ 0x30
 800dd2e:	d0f9      	beq.n	800dd24 <_strtod_l+0x29c>
 800dd30:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dd34:	2908      	cmp	r1, #8
 800dd36:	f63f af75 	bhi.w	800dc24 <_strtod_l+0x19c>
 800dd3a:	3a30      	subs	r2, #48	@ 0x30
 800dd3c:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd40:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dd42:	f04f 080a 	mov.w	r8, #10
 800dd46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd48:	1c56      	adds	r6, r2, #1
 800dd4a:	9619      	str	r6, [sp, #100]	@ 0x64
 800dd4c:	7852      	ldrb	r2, [r2, #1]
 800dd4e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dd52:	f1be 0f09 	cmp.w	lr, #9
 800dd56:	d939      	bls.n	800ddcc <_strtod_l+0x344>
 800dd58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dd5a:	1a76      	subs	r6, r6, r1
 800dd5c:	2e08      	cmp	r6, #8
 800dd5e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dd62:	dc03      	bgt.n	800dd6c <_strtod_l+0x2e4>
 800dd64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd66:	4588      	cmp	r8, r1
 800dd68:	bfa8      	it	ge
 800dd6a:	4688      	movge	r8, r1
 800dd6c:	f1bc 0f00 	cmp.w	ip, #0
 800dd70:	d001      	beq.n	800dd76 <_strtod_l+0x2ee>
 800dd72:	f1c8 0800 	rsb	r8, r8, #0
 800dd76:	2d00      	cmp	r5, #0
 800dd78:	d14e      	bne.n	800de18 <_strtod_l+0x390>
 800dd7a:	9908      	ldr	r1, [sp, #32]
 800dd7c:	4308      	orrs	r0, r1
 800dd7e:	f47f aebc 	bne.w	800dafa <_strtod_l+0x72>
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	f47f aed4 	bne.w	800db30 <_strtod_l+0xa8>
 800dd88:	2a69      	cmp	r2, #105	@ 0x69
 800dd8a:	d028      	beq.n	800ddde <_strtod_l+0x356>
 800dd8c:	dc25      	bgt.n	800ddda <_strtod_l+0x352>
 800dd8e:	2a49      	cmp	r2, #73	@ 0x49
 800dd90:	d025      	beq.n	800ddde <_strtod_l+0x356>
 800dd92:	2a4e      	cmp	r2, #78	@ 0x4e
 800dd94:	f47f aecc 	bne.w	800db30 <_strtod_l+0xa8>
 800dd98:	499a      	ldr	r1, [pc, #616]	@ (800e004 <_strtod_l+0x57c>)
 800dd9a:	a819      	add	r0, sp, #100	@ 0x64
 800dd9c:	f002 ff6c 	bl	8010c78 <__match>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	f43f aec5 	beq.w	800db30 <_strtod_l+0xa8>
 800dda6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	2b28      	cmp	r3, #40	@ 0x28
 800ddac:	d12e      	bne.n	800de0c <_strtod_l+0x384>
 800ddae:	4996      	ldr	r1, [pc, #600]	@ (800e008 <_strtod_l+0x580>)
 800ddb0:	aa1c      	add	r2, sp, #112	@ 0x70
 800ddb2:	a819      	add	r0, sp, #100	@ 0x64
 800ddb4:	f002 ff74 	bl	8010ca0 <__hexnan>
 800ddb8:	2805      	cmp	r0, #5
 800ddba:	d127      	bne.n	800de0c <_strtod_l+0x384>
 800ddbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ddbe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ddc2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ddc6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ddca:	e696      	b.n	800dafa <_strtod_l+0x72>
 800ddcc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ddce:	fb08 2101 	mla	r1, r8, r1, r2
 800ddd2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ddd6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddd8:	e7b5      	b.n	800dd46 <_strtod_l+0x2be>
 800ddda:	2a6e      	cmp	r2, #110	@ 0x6e
 800dddc:	e7da      	b.n	800dd94 <_strtod_l+0x30c>
 800ddde:	498b      	ldr	r1, [pc, #556]	@ (800e00c <_strtod_l+0x584>)
 800dde0:	a819      	add	r0, sp, #100	@ 0x64
 800dde2:	f002 ff49 	bl	8010c78 <__match>
 800dde6:	2800      	cmp	r0, #0
 800dde8:	f43f aea2 	beq.w	800db30 <_strtod_l+0xa8>
 800ddec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddee:	4988      	ldr	r1, [pc, #544]	@ (800e010 <_strtod_l+0x588>)
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	a819      	add	r0, sp, #100	@ 0x64
 800ddf4:	9319      	str	r3, [sp, #100]	@ 0x64
 800ddf6:	f002 ff3f 	bl	8010c78 <__match>
 800ddfa:	b910      	cbnz	r0, 800de02 <_strtod_l+0x37a>
 800ddfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddfe:	3301      	adds	r3, #1
 800de00:	9319      	str	r3, [sp, #100]	@ 0x64
 800de02:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800e020 <_strtod_l+0x598>
 800de06:	f04f 0a00 	mov.w	sl, #0
 800de0a:	e676      	b.n	800dafa <_strtod_l+0x72>
 800de0c:	4881      	ldr	r0, [pc, #516]	@ (800e014 <_strtod_l+0x58c>)
 800de0e:	f001 fddb 	bl	800f9c8 <nan>
 800de12:	ec5b ab10 	vmov	sl, fp, d0
 800de16:	e670      	b.n	800dafa <_strtod_l+0x72>
 800de18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de1a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800de1c:	eba8 0303 	sub.w	r3, r8, r3
 800de20:	f1b9 0f00 	cmp.w	r9, #0
 800de24:	bf08      	it	eq
 800de26:	46a9      	moveq	r9, r5
 800de28:	2d10      	cmp	r5, #16
 800de2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800de2c:	462c      	mov	r4, r5
 800de2e:	bfa8      	it	ge
 800de30:	2410      	movge	r4, #16
 800de32:	f7f2 fb77 	bl	8000524 <__aeabi_ui2d>
 800de36:	2d09      	cmp	r5, #9
 800de38:	4682      	mov	sl, r0
 800de3a:	468b      	mov	fp, r1
 800de3c:	dc13      	bgt.n	800de66 <_strtod_l+0x3de>
 800de3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de40:	2b00      	cmp	r3, #0
 800de42:	f43f ae5a 	beq.w	800dafa <_strtod_l+0x72>
 800de46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de48:	dd78      	ble.n	800df3c <_strtod_l+0x4b4>
 800de4a:	2b16      	cmp	r3, #22
 800de4c:	dc5f      	bgt.n	800df0e <_strtod_l+0x486>
 800de4e:	4972      	ldr	r1, [pc, #456]	@ (800e018 <_strtod_l+0x590>)
 800de50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de58:	4652      	mov	r2, sl
 800de5a:	465b      	mov	r3, fp
 800de5c:	f7f2 fbdc 	bl	8000618 <__aeabi_dmul>
 800de60:	4682      	mov	sl, r0
 800de62:	468b      	mov	fp, r1
 800de64:	e649      	b.n	800dafa <_strtod_l+0x72>
 800de66:	4b6c      	ldr	r3, [pc, #432]	@ (800e018 <_strtod_l+0x590>)
 800de68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800de70:	f7f2 fbd2 	bl	8000618 <__aeabi_dmul>
 800de74:	4682      	mov	sl, r0
 800de76:	4638      	mov	r0, r7
 800de78:	468b      	mov	fp, r1
 800de7a:	f7f2 fb53 	bl	8000524 <__aeabi_ui2d>
 800de7e:	4602      	mov	r2, r0
 800de80:	460b      	mov	r3, r1
 800de82:	4650      	mov	r0, sl
 800de84:	4659      	mov	r1, fp
 800de86:	f7f2 fa11 	bl	80002ac <__adddf3>
 800de8a:	2d0f      	cmp	r5, #15
 800de8c:	4682      	mov	sl, r0
 800de8e:	468b      	mov	fp, r1
 800de90:	ddd5      	ble.n	800de3e <_strtod_l+0x3b6>
 800de92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de94:	1b2c      	subs	r4, r5, r4
 800de96:	441c      	add	r4, r3
 800de98:	2c00      	cmp	r4, #0
 800de9a:	f340 8093 	ble.w	800dfc4 <_strtod_l+0x53c>
 800de9e:	f014 030f 	ands.w	r3, r4, #15
 800dea2:	d00a      	beq.n	800deba <_strtod_l+0x432>
 800dea4:	495c      	ldr	r1, [pc, #368]	@ (800e018 <_strtod_l+0x590>)
 800dea6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800deaa:	4652      	mov	r2, sl
 800deac:	465b      	mov	r3, fp
 800deae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deb2:	f7f2 fbb1 	bl	8000618 <__aeabi_dmul>
 800deb6:	4682      	mov	sl, r0
 800deb8:	468b      	mov	fp, r1
 800deba:	f034 040f 	bics.w	r4, r4, #15
 800debe:	d073      	beq.n	800dfa8 <_strtod_l+0x520>
 800dec0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dec4:	dd49      	ble.n	800df5a <_strtod_l+0x4d2>
 800dec6:	2400      	movs	r4, #0
 800dec8:	46a0      	mov	r8, r4
 800deca:	940b      	str	r4, [sp, #44]	@ 0x2c
 800decc:	46a1      	mov	r9, r4
 800dece:	9a05      	ldr	r2, [sp, #20]
 800ded0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800e020 <_strtod_l+0x598>
 800ded4:	2322      	movs	r3, #34	@ 0x22
 800ded6:	6013      	str	r3, [r2, #0]
 800ded8:	f04f 0a00 	mov.w	sl, #0
 800dedc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dede:	2b00      	cmp	r3, #0
 800dee0:	f43f ae0b 	beq.w	800dafa <_strtod_l+0x72>
 800dee4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dee6:	9805      	ldr	r0, [sp, #20]
 800dee8:	f003 f87e 	bl	8010fe8 <_Bfree>
 800deec:	9805      	ldr	r0, [sp, #20]
 800deee:	4649      	mov	r1, r9
 800def0:	f003 f87a 	bl	8010fe8 <_Bfree>
 800def4:	9805      	ldr	r0, [sp, #20]
 800def6:	4641      	mov	r1, r8
 800def8:	f003 f876 	bl	8010fe8 <_Bfree>
 800defc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800defe:	9805      	ldr	r0, [sp, #20]
 800df00:	f003 f872 	bl	8010fe8 <_Bfree>
 800df04:	9805      	ldr	r0, [sp, #20]
 800df06:	4621      	mov	r1, r4
 800df08:	f003 f86e 	bl	8010fe8 <_Bfree>
 800df0c:	e5f5      	b.n	800dafa <_strtod_l+0x72>
 800df0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800df14:	4293      	cmp	r3, r2
 800df16:	dbbc      	blt.n	800de92 <_strtod_l+0x40a>
 800df18:	4c3f      	ldr	r4, [pc, #252]	@ (800e018 <_strtod_l+0x590>)
 800df1a:	f1c5 050f 	rsb	r5, r5, #15
 800df1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800df22:	4652      	mov	r2, sl
 800df24:	465b      	mov	r3, fp
 800df26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df2a:	f7f2 fb75 	bl	8000618 <__aeabi_dmul>
 800df2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df30:	1b5d      	subs	r5, r3, r5
 800df32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800df36:	e9d4 2300 	ldrd	r2, r3, [r4]
 800df3a:	e78f      	b.n	800de5c <_strtod_l+0x3d4>
 800df3c:	3316      	adds	r3, #22
 800df3e:	dba8      	blt.n	800de92 <_strtod_l+0x40a>
 800df40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df42:	eba3 0808 	sub.w	r8, r3, r8
 800df46:	4b34      	ldr	r3, [pc, #208]	@ (800e018 <_strtod_l+0x590>)
 800df48:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800df4c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800df50:	4650      	mov	r0, sl
 800df52:	4659      	mov	r1, fp
 800df54:	f7f2 fc8a 	bl	800086c <__aeabi_ddiv>
 800df58:	e782      	b.n	800de60 <_strtod_l+0x3d8>
 800df5a:	2300      	movs	r3, #0
 800df5c:	4f2f      	ldr	r7, [pc, #188]	@ (800e01c <_strtod_l+0x594>)
 800df5e:	1124      	asrs	r4, r4, #4
 800df60:	4650      	mov	r0, sl
 800df62:	4659      	mov	r1, fp
 800df64:	461e      	mov	r6, r3
 800df66:	2c01      	cmp	r4, #1
 800df68:	dc21      	bgt.n	800dfae <_strtod_l+0x526>
 800df6a:	b10b      	cbz	r3, 800df70 <_strtod_l+0x4e8>
 800df6c:	4682      	mov	sl, r0
 800df6e:	468b      	mov	fp, r1
 800df70:	492a      	ldr	r1, [pc, #168]	@ (800e01c <_strtod_l+0x594>)
 800df72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800df76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800df7a:	4652      	mov	r2, sl
 800df7c:	465b      	mov	r3, fp
 800df7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df82:	f7f2 fb49 	bl	8000618 <__aeabi_dmul>
 800df86:	4b26      	ldr	r3, [pc, #152]	@ (800e020 <_strtod_l+0x598>)
 800df88:	460a      	mov	r2, r1
 800df8a:	400b      	ands	r3, r1
 800df8c:	4925      	ldr	r1, [pc, #148]	@ (800e024 <_strtod_l+0x59c>)
 800df8e:	428b      	cmp	r3, r1
 800df90:	4682      	mov	sl, r0
 800df92:	d898      	bhi.n	800dec6 <_strtod_l+0x43e>
 800df94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800df98:	428b      	cmp	r3, r1
 800df9a:	bf86      	itte	hi
 800df9c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800e028 <_strtod_l+0x5a0>
 800dfa0:	f04f 3aff 	movhi.w	sl, #4294967295
 800dfa4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	9308      	str	r3, [sp, #32]
 800dfac:	e076      	b.n	800e09c <_strtod_l+0x614>
 800dfae:	07e2      	lsls	r2, r4, #31
 800dfb0:	d504      	bpl.n	800dfbc <_strtod_l+0x534>
 800dfb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfb6:	f7f2 fb2f 	bl	8000618 <__aeabi_dmul>
 800dfba:	2301      	movs	r3, #1
 800dfbc:	3601      	adds	r6, #1
 800dfbe:	1064      	asrs	r4, r4, #1
 800dfc0:	3708      	adds	r7, #8
 800dfc2:	e7d0      	b.n	800df66 <_strtod_l+0x4de>
 800dfc4:	d0f0      	beq.n	800dfa8 <_strtod_l+0x520>
 800dfc6:	4264      	negs	r4, r4
 800dfc8:	f014 020f 	ands.w	r2, r4, #15
 800dfcc:	d00a      	beq.n	800dfe4 <_strtod_l+0x55c>
 800dfce:	4b12      	ldr	r3, [pc, #72]	@ (800e018 <_strtod_l+0x590>)
 800dfd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfd4:	4650      	mov	r0, sl
 800dfd6:	4659      	mov	r1, fp
 800dfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfdc:	f7f2 fc46 	bl	800086c <__aeabi_ddiv>
 800dfe0:	4682      	mov	sl, r0
 800dfe2:	468b      	mov	fp, r1
 800dfe4:	1124      	asrs	r4, r4, #4
 800dfe6:	d0df      	beq.n	800dfa8 <_strtod_l+0x520>
 800dfe8:	2c1f      	cmp	r4, #31
 800dfea:	dd1f      	ble.n	800e02c <_strtod_l+0x5a4>
 800dfec:	2400      	movs	r4, #0
 800dfee:	46a0      	mov	r8, r4
 800dff0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dff2:	46a1      	mov	r9, r4
 800dff4:	9a05      	ldr	r2, [sp, #20]
 800dff6:	2322      	movs	r3, #34	@ 0x22
 800dff8:	f04f 0a00 	mov.w	sl, #0
 800dffc:	f04f 0b00 	mov.w	fp, #0
 800e000:	6013      	str	r3, [r2, #0]
 800e002:	e76b      	b.n	800dedc <_strtod_l+0x454>
 800e004:	0806cf2a 	.word	0x0806cf2a
 800e008:	0806d150 	.word	0x0806d150
 800e00c:	0806cf22 	.word	0x0806cf22
 800e010:	0806cff5 	.word	0x0806cff5
 800e014:	0806cff1 	.word	0x0806cff1
 800e018:	0806d2d8 	.word	0x0806d2d8
 800e01c:	0806d2b0 	.word	0x0806d2b0
 800e020:	7ff00000 	.word	0x7ff00000
 800e024:	7ca00000 	.word	0x7ca00000
 800e028:	7fefffff 	.word	0x7fefffff
 800e02c:	f014 0310 	ands.w	r3, r4, #16
 800e030:	bf18      	it	ne
 800e032:	236a      	movne	r3, #106	@ 0x6a
 800e034:	4ea9      	ldr	r6, [pc, #676]	@ (800e2dc <_strtod_l+0x854>)
 800e036:	9308      	str	r3, [sp, #32]
 800e038:	4650      	mov	r0, sl
 800e03a:	4659      	mov	r1, fp
 800e03c:	2300      	movs	r3, #0
 800e03e:	07e7      	lsls	r7, r4, #31
 800e040:	d504      	bpl.n	800e04c <_strtod_l+0x5c4>
 800e042:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e046:	f7f2 fae7 	bl	8000618 <__aeabi_dmul>
 800e04a:	2301      	movs	r3, #1
 800e04c:	1064      	asrs	r4, r4, #1
 800e04e:	f106 0608 	add.w	r6, r6, #8
 800e052:	d1f4      	bne.n	800e03e <_strtod_l+0x5b6>
 800e054:	b10b      	cbz	r3, 800e05a <_strtod_l+0x5d2>
 800e056:	4682      	mov	sl, r0
 800e058:	468b      	mov	fp, r1
 800e05a:	9b08      	ldr	r3, [sp, #32]
 800e05c:	b1b3      	cbz	r3, 800e08c <_strtod_l+0x604>
 800e05e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e062:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e066:	2b00      	cmp	r3, #0
 800e068:	4659      	mov	r1, fp
 800e06a:	dd0f      	ble.n	800e08c <_strtod_l+0x604>
 800e06c:	2b1f      	cmp	r3, #31
 800e06e:	dd56      	ble.n	800e11e <_strtod_l+0x696>
 800e070:	2b34      	cmp	r3, #52	@ 0x34
 800e072:	bfde      	ittt	le
 800e074:	f04f 33ff 	movle.w	r3, #4294967295
 800e078:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e07c:	4093      	lslle	r3, r2
 800e07e:	f04f 0a00 	mov.w	sl, #0
 800e082:	bfcc      	ite	gt
 800e084:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e088:	ea03 0b01 	andle.w	fp, r3, r1
 800e08c:	2200      	movs	r2, #0
 800e08e:	2300      	movs	r3, #0
 800e090:	4650      	mov	r0, sl
 800e092:	4659      	mov	r1, fp
 800e094:	f7f2 fd28 	bl	8000ae8 <__aeabi_dcmpeq>
 800e098:	2800      	cmp	r0, #0
 800e09a:	d1a7      	bne.n	800dfec <_strtod_l+0x564>
 800e09c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e0a2:	9805      	ldr	r0, [sp, #20]
 800e0a4:	462b      	mov	r3, r5
 800e0a6:	464a      	mov	r2, r9
 800e0a8:	f003 f806 	bl	80110b8 <__s2b>
 800e0ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	f43f af09 	beq.w	800dec6 <_strtod_l+0x43e>
 800e0b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0b8:	2a00      	cmp	r2, #0
 800e0ba:	eba3 0308 	sub.w	r3, r3, r8
 800e0be:	bfa8      	it	ge
 800e0c0:	2300      	movge	r3, #0
 800e0c2:	9312      	str	r3, [sp, #72]	@ 0x48
 800e0c4:	2400      	movs	r4, #0
 800e0c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e0ca:	9316      	str	r3, [sp, #88]	@ 0x58
 800e0cc:	46a0      	mov	r8, r4
 800e0ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0d0:	9805      	ldr	r0, [sp, #20]
 800e0d2:	6859      	ldr	r1, [r3, #4]
 800e0d4:	f002 ff48 	bl	8010f68 <_Balloc>
 800e0d8:	4681      	mov	r9, r0
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	f43f aef7 	beq.w	800dece <_strtod_l+0x446>
 800e0e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0e2:	691a      	ldr	r2, [r3, #16]
 800e0e4:	3202      	adds	r2, #2
 800e0e6:	f103 010c 	add.w	r1, r3, #12
 800e0ea:	0092      	lsls	r2, r2, #2
 800e0ec:	300c      	adds	r0, #12
 800e0ee:	f001 fc5a 	bl	800f9a6 <memcpy>
 800e0f2:	ec4b ab10 	vmov	d0, sl, fp
 800e0f6:	9805      	ldr	r0, [sp, #20]
 800e0f8:	aa1c      	add	r2, sp, #112	@ 0x70
 800e0fa:	a91b      	add	r1, sp, #108	@ 0x6c
 800e0fc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e100:	f003 fb0e 	bl	8011720 <__d2b>
 800e104:	901a      	str	r0, [sp, #104]	@ 0x68
 800e106:	2800      	cmp	r0, #0
 800e108:	f43f aee1 	beq.w	800dece <_strtod_l+0x446>
 800e10c:	9805      	ldr	r0, [sp, #20]
 800e10e:	2101      	movs	r1, #1
 800e110:	f003 f868 	bl	80111e4 <__i2b>
 800e114:	4680      	mov	r8, r0
 800e116:	b948      	cbnz	r0, 800e12c <_strtod_l+0x6a4>
 800e118:	f04f 0800 	mov.w	r8, #0
 800e11c:	e6d7      	b.n	800dece <_strtod_l+0x446>
 800e11e:	f04f 32ff 	mov.w	r2, #4294967295
 800e122:	fa02 f303 	lsl.w	r3, r2, r3
 800e126:	ea03 0a0a 	and.w	sl, r3, sl
 800e12a:	e7af      	b.n	800e08c <_strtod_l+0x604>
 800e12c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e12e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e130:	2d00      	cmp	r5, #0
 800e132:	bfab      	itete	ge
 800e134:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e136:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e138:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e13a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e13c:	bfac      	ite	ge
 800e13e:	18ef      	addge	r7, r5, r3
 800e140:	1b5e      	sublt	r6, r3, r5
 800e142:	9b08      	ldr	r3, [sp, #32]
 800e144:	1aed      	subs	r5, r5, r3
 800e146:	4415      	add	r5, r2
 800e148:	4b65      	ldr	r3, [pc, #404]	@ (800e2e0 <_strtod_l+0x858>)
 800e14a:	3d01      	subs	r5, #1
 800e14c:	429d      	cmp	r5, r3
 800e14e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e152:	da50      	bge.n	800e1f6 <_strtod_l+0x76e>
 800e154:	1b5b      	subs	r3, r3, r5
 800e156:	2b1f      	cmp	r3, #31
 800e158:	eba2 0203 	sub.w	r2, r2, r3
 800e15c:	f04f 0101 	mov.w	r1, #1
 800e160:	dc3d      	bgt.n	800e1de <_strtod_l+0x756>
 800e162:	fa01 f303 	lsl.w	r3, r1, r3
 800e166:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e168:	2300      	movs	r3, #0
 800e16a:	9310      	str	r3, [sp, #64]	@ 0x40
 800e16c:	18bd      	adds	r5, r7, r2
 800e16e:	9b08      	ldr	r3, [sp, #32]
 800e170:	42af      	cmp	r7, r5
 800e172:	4416      	add	r6, r2
 800e174:	441e      	add	r6, r3
 800e176:	463b      	mov	r3, r7
 800e178:	bfa8      	it	ge
 800e17a:	462b      	movge	r3, r5
 800e17c:	42b3      	cmp	r3, r6
 800e17e:	bfa8      	it	ge
 800e180:	4633      	movge	r3, r6
 800e182:	2b00      	cmp	r3, #0
 800e184:	bfc2      	ittt	gt
 800e186:	1aed      	subgt	r5, r5, r3
 800e188:	1af6      	subgt	r6, r6, r3
 800e18a:	1aff      	subgt	r7, r7, r3
 800e18c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e18e:	2b00      	cmp	r3, #0
 800e190:	dd16      	ble.n	800e1c0 <_strtod_l+0x738>
 800e192:	4641      	mov	r1, r8
 800e194:	9805      	ldr	r0, [sp, #20]
 800e196:	461a      	mov	r2, r3
 800e198:	f003 f8dc 	bl	8011354 <__pow5mult>
 800e19c:	4680      	mov	r8, r0
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d0ba      	beq.n	800e118 <_strtod_l+0x690>
 800e1a2:	4601      	mov	r1, r0
 800e1a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e1a6:	9805      	ldr	r0, [sp, #20]
 800e1a8:	f003 f832 	bl	8011210 <__multiply>
 800e1ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	f43f ae8d 	beq.w	800dece <_strtod_l+0x446>
 800e1b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1b6:	9805      	ldr	r0, [sp, #20]
 800e1b8:	f002 ff16 	bl	8010fe8 <_Bfree>
 800e1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1be:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1c0:	2d00      	cmp	r5, #0
 800e1c2:	dc1d      	bgt.n	800e200 <_strtod_l+0x778>
 800e1c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	dd23      	ble.n	800e212 <_strtod_l+0x78a>
 800e1ca:	4649      	mov	r1, r9
 800e1cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e1ce:	9805      	ldr	r0, [sp, #20]
 800e1d0:	f003 f8c0 	bl	8011354 <__pow5mult>
 800e1d4:	4681      	mov	r9, r0
 800e1d6:	b9e0      	cbnz	r0, 800e212 <_strtod_l+0x78a>
 800e1d8:	f04f 0900 	mov.w	r9, #0
 800e1dc:	e677      	b.n	800dece <_strtod_l+0x446>
 800e1de:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e1e2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e1e6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e1ea:	35e2      	adds	r5, #226	@ 0xe2
 800e1ec:	fa01 f305 	lsl.w	r3, r1, r5
 800e1f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e1f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e1f4:	e7ba      	b.n	800e16c <_strtod_l+0x6e4>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1fe:	e7b5      	b.n	800e16c <_strtod_l+0x6e4>
 800e200:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e202:	9805      	ldr	r0, [sp, #20]
 800e204:	462a      	mov	r2, r5
 800e206:	f003 f8ff 	bl	8011408 <__lshift>
 800e20a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d1d9      	bne.n	800e1c4 <_strtod_l+0x73c>
 800e210:	e65d      	b.n	800dece <_strtod_l+0x446>
 800e212:	2e00      	cmp	r6, #0
 800e214:	dd07      	ble.n	800e226 <_strtod_l+0x79e>
 800e216:	4649      	mov	r1, r9
 800e218:	9805      	ldr	r0, [sp, #20]
 800e21a:	4632      	mov	r2, r6
 800e21c:	f003 f8f4 	bl	8011408 <__lshift>
 800e220:	4681      	mov	r9, r0
 800e222:	2800      	cmp	r0, #0
 800e224:	d0d8      	beq.n	800e1d8 <_strtod_l+0x750>
 800e226:	2f00      	cmp	r7, #0
 800e228:	dd08      	ble.n	800e23c <_strtod_l+0x7b4>
 800e22a:	4641      	mov	r1, r8
 800e22c:	9805      	ldr	r0, [sp, #20]
 800e22e:	463a      	mov	r2, r7
 800e230:	f003 f8ea 	bl	8011408 <__lshift>
 800e234:	4680      	mov	r8, r0
 800e236:	2800      	cmp	r0, #0
 800e238:	f43f ae49 	beq.w	800dece <_strtod_l+0x446>
 800e23c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e23e:	9805      	ldr	r0, [sp, #20]
 800e240:	464a      	mov	r2, r9
 800e242:	f003 f969 	bl	8011518 <__mdiff>
 800e246:	4604      	mov	r4, r0
 800e248:	2800      	cmp	r0, #0
 800e24a:	f43f ae40 	beq.w	800dece <_strtod_l+0x446>
 800e24e:	68c3      	ldr	r3, [r0, #12]
 800e250:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e252:	2300      	movs	r3, #0
 800e254:	60c3      	str	r3, [r0, #12]
 800e256:	4641      	mov	r1, r8
 800e258:	f003 f942 	bl	80114e0 <__mcmp>
 800e25c:	2800      	cmp	r0, #0
 800e25e:	da45      	bge.n	800e2ec <_strtod_l+0x864>
 800e260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e262:	ea53 030a 	orrs.w	r3, r3, sl
 800e266:	d16b      	bne.n	800e340 <_strtod_l+0x8b8>
 800e268:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d167      	bne.n	800e340 <_strtod_l+0x8b8>
 800e270:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e274:	0d1b      	lsrs	r3, r3, #20
 800e276:	051b      	lsls	r3, r3, #20
 800e278:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e27c:	d960      	bls.n	800e340 <_strtod_l+0x8b8>
 800e27e:	6963      	ldr	r3, [r4, #20]
 800e280:	b913      	cbnz	r3, 800e288 <_strtod_l+0x800>
 800e282:	6923      	ldr	r3, [r4, #16]
 800e284:	2b01      	cmp	r3, #1
 800e286:	dd5b      	ble.n	800e340 <_strtod_l+0x8b8>
 800e288:	4621      	mov	r1, r4
 800e28a:	2201      	movs	r2, #1
 800e28c:	9805      	ldr	r0, [sp, #20]
 800e28e:	f003 f8bb 	bl	8011408 <__lshift>
 800e292:	4641      	mov	r1, r8
 800e294:	4604      	mov	r4, r0
 800e296:	f003 f923 	bl	80114e0 <__mcmp>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	dd50      	ble.n	800e340 <_strtod_l+0x8b8>
 800e29e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e2a2:	9a08      	ldr	r2, [sp, #32]
 800e2a4:	0d1b      	lsrs	r3, r3, #20
 800e2a6:	051b      	lsls	r3, r3, #20
 800e2a8:	2a00      	cmp	r2, #0
 800e2aa:	d06a      	beq.n	800e382 <_strtod_l+0x8fa>
 800e2ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e2b0:	d867      	bhi.n	800e382 <_strtod_l+0x8fa>
 800e2b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e2b6:	f67f ae9d 	bls.w	800dff4 <_strtod_l+0x56c>
 800e2ba:	4b0a      	ldr	r3, [pc, #40]	@ (800e2e4 <_strtod_l+0x85c>)
 800e2bc:	4650      	mov	r0, sl
 800e2be:	4659      	mov	r1, fp
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	f7f2 f9a9 	bl	8000618 <__aeabi_dmul>
 800e2c6:	4b08      	ldr	r3, [pc, #32]	@ (800e2e8 <_strtod_l+0x860>)
 800e2c8:	400b      	ands	r3, r1
 800e2ca:	4682      	mov	sl, r0
 800e2cc:	468b      	mov	fp, r1
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	f47f ae08 	bne.w	800dee4 <_strtod_l+0x45c>
 800e2d4:	9a05      	ldr	r2, [sp, #20]
 800e2d6:	2322      	movs	r3, #34	@ 0x22
 800e2d8:	6013      	str	r3, [r2, #0]
 800e2da:	e603      	b.n	800dee4 <_strtod_l+0x45c>
 800e2dc:	0806d178 	.word	0x0806d178
 800e2e0:	fffffc02 	.word	0xfffffc02
 800e2e4:	39500000 	.word	0x39500000
 800e2e8:	7ff00000 	.word	0x7ff00000
 800e2ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e2f0:	d165      	bne.n	800e3be <_strtod_l+0x936>
 800e2f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e2f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2f8:	b35a      	cbz	r2, 800e352 <_strtod_l+0x8ca>
 800e2fa:	4a9f      	ldr	r2, [pc, #636]	@ (800e578 <_strtod_l+0xaf0>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d12b      	bne.n	800e358 <_strtod_l+0x8d0>
 800e300:	9b08      	ldr	r3, [sp, #32]
 800e302:	4651      	mov	r1, sl
 800e304:	b303      	cbz	r3, 800e348 <_strtod_l+0x8c0>
 800e306:	4b9d      	ldr	r3, [pc, #628]	@ (800e57c <_strtod_l+0xaf4>)
 800e308:	465a      	mov	r2, fp
 800e30a:	4013      	ands	r3, r2
 800e30c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e310:	f04f 32ff 	mov.w	r2, #4294967295
 800e314:	d81b      	bhi.n	800e34e <_strtod_l+0x8c6>
 800e316:	0d1b      	lsrs	r3, r3, #20
 800e318:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e31c:	fa02 f303 	lsl.w	r3, r2, r3
 800e320:	4299      	cmp	r1, r3
 800e322:	d119      	bne.n	800e358 <_strtod_l+0x8d0>
 800e324:	4b96      	ldr	r3, [pc, #600]	@ (800e580 <_strtod_l+0xaf8>)
 800e326:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e328:	429a      	cmp	r2, r3
 800e32a:	d102      	bne.n	800e332 <_strtod_l+0x8aa>
 800e32c:	3101      	adds	r1, #1
 800e32e:	f43f adce 	beq.w	800dece <_strtod_l+0x446>
 800e332:	4b92      	ldr	r3, [pc, #584]	@ (800e57c <_strtod_l+0xaf4>)
 800e334:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e336:	401a      	ands	r2, r3
 800e338:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e33c:	f04f 0a00 	mov.w	sl, #0
 800e340:	9b08      	ldr	r3, [sp, #32]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d1b9      	bne.n	800e2ba <_strtod_l+0x832>
 800e346:	e5cd      	b.n	800dee4 <_strtod_l+0x45c>
 800e348:	f04f 33ff 	mov.w	r3, #4294967295
 800e34c:	e7e8      	b.n	800e320 <_strtod_l+0x898>
 800e34e:	4613      	mov	r3, r2
 800e350:	e7e6      	b.n	800e320 <_strtod_l+0x898>
 800e352:	ea53 030a 	orrs.w	r3, r3, sl
 800e356:	d0a2      	beq.n	800e29e <_strtod_l+0x816>
 800e358:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e35a:	b1db      	cbz	r3, 800e394 <_strtod_l+0x90c>
 800e35c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e35e:	4213      	tst	r3, r2
 800e360:	d0ee      	beq.n	800e340 <_strtod_l+0x8b8>
 800e362:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e364:	9a08      	ldr	r2, [sp, #32]
 800e366:	4650      	mov	r0, sl
 800e368:	4659      	mov	r1, fp
 800e36a:	b1bb      	cbz	r3, 800e39c <_strtod_l+0x914>
 800e36c:	f7ff fb6c 	bl	800da48 <sulp>
 800e370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e374:	ec53 2b10 	vmov	r2, r3, d0
 800e378:	f7f1 ff98 	bl	80002ac <__adddf3>
 800e37c:	4682      	mov	sl, r0
 800e37e:	468b      	mov	fp, r1
 800e380:	e7de      	b.n	800e340 <_strtod_l+0x8b8>
 800e382:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e386:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e38a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e38e:	f04f 3aff 	mov.w	sl, #4294967295
 800e392:	e7d5      	b.n	800e340 <_strtod_l+0x8b8>
 800e394:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e396:	ea13 0f0a 	tst.w	r3, sl
 800e39a:	e7e1      	b.n	800e360 <_strtod_l+0x8d8>
 800e39c:	f7ff fb54 	bl	800da48 <sulp>
 800e3a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3a4:	ec53 2b10 	vmov	r2, r3, d0
 800e3a8:	f7f1 ff7e 	bl	80002a8 <__aeabi_dsub>
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	4682      	mov	sl, r0
 800e3b2:	468b      	mov	fp, r1
 800e3b4:	f7f2 fb98 	bl	8000ae8 <__aeabi_dcmpeq>
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	d0c1      	beq.n	800e340 <_strtod_l+0x8b8>
 800e3bc:	e61a      	b.n	800dff4 <_strtod_l+0x56c>
 800e3be:	4641      	mov	r1, r8
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	f003 fa05 	bl	80117d0 <__ratio>
 800e3c6:	ec57 6b10 	vmov	r6, r7, d0
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	4639      	mov	r1, r7
 800e3d4:	f7f2 fb9c 	bl	8000b10 <__aeabi_dcmple>
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d06f      	beq.n	800e4bc <_strtod_l+0xa34>
 800e3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d17a      	bne.n	800e4d8 <_strtod_l+0xa50>
 800e3e2:	f1ba 0f00 	cmp.w	sl, #0
 800e3e6:	d158      	bne.n	800e49a <_strtod_l+0xa12>
 800e3e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d15a      	bne.n	800e4a8 <_strtod_l+0xa20>
 800e3f2:	4b64      	ldr	r3, [pc, #400]	@ (800e584 <_strtod_l+0xafc>)
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	4639      	mov	r1, r7
 800e3fa:	f7f2 fb7f 	bl	8000afc <__aeabi_dcmplt>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d159      	bne.n	800e4b6 <_strtod_l+0xa2e>
 800e402:	4630      	mov	r0, r6
 800e404:	4639      	mov	r1, r7
 800e406:	4b60      	ldr	r3, [pc, #384]	@ (800e588 <_strtod_l+0xb00>)
 800e408:	2200      	movs	r2, #0
 800e40a:	f7f2 f905 	bl	8000618 <__aeabi_dmul>
 800e40e:	4606      	mov	r6, r0
 800e410:	460f      	mov	r7, r1
 800e412:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e416:	9606      	str	r6, [sp, #24]
 800e418:	9307      	str	r3, [sp, #28]
 800e41a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e41e:	4d57      	ldr	r5, [pc, #348]	@ (800e57c <_strtod_l+0xaf4>)
 800e420:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e426:	401d      	ands	r5, r3
 800e428:	4b58      	ldr	r3, [pc, #352]	@ (800e58c <_strtod_l+0xb04>)
 800e42a:	429d      	cmp	r5, r3
 800e42c:	f040 80b2 	bne.w	800e594 <_strtod_l+0xb0c>
 800e430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e432:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e436:	ec4b ab10 	vmov	d0, sl, fp
 800e43a:	f003 f901 	bl	8011640 <__ulp>
 800e43e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e442:	ec51 0b10 	vmov	r0, r1, d0
 800e446:	f7f2 f8e7 	bl	8000618 <__aeabi_dmul>
 800e44a:	4652      	mov	r2, sl
 800e44c:	465b      	mov	r3, fp
 800e44e:	f7f1 ff2d 	bl	80002ac <__adddf3>
 800e452:	460b      	mov	r3, r1
 800e454:	4949      	ldr	r1, [pc, #292]	@ (800e57c <_strtod_l+0xaf4>)
 800e456:	4a4e      	ldr	r2, [pc, #312]	@ (800e590 <_strtod_l+0xb08>)
 800e458:	4019      	ands	r1, r3
 800e45a:	4291      	cmp	r1, r2
 800e45c:	4682      	mov	sl, r0
 800e45e:	d942      	bls.n	800e4e6 <_strtod_l+0xa5e>
 800e460:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e462:	4b47      	ldr	r3, [pc, #284]	@ (800e580 <_strtod_l+0xaf8>)
 800e464:	429a      	cmp	r2, r3
 800e466:	d103      	bne.n	800e470 <_strtod_l+0x9e8>
 800e468:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e46a:	3301      	adds	r3, #1
 800e46c:	f43f ad2f 	beq.w	800dece <_strtod_l+0x446>
 800e470:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e580 <_strtod_l+0xaf8>
 800e474:	f04f 3aff 	mov.w	sl, #4294967295
 800e478:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e47a:	9805      	ldr	r0, [sp, #20]
 800e47c:	f002 fdb4 	bl	8010fe8 <_Bfree>
 800e480:	9805      	ldr	r0, [sp, #20]
 800e482:	4649      	mov	r1, r9
 800e484:	f002 fdb0 	bl	8010fe8 <_Bfree>
 800e488:	9805      	ldr	r0, [sp, #20]
 800e48a:	4641      	mov	r1, r8
 800e48c:	f002 fdac 	bl	8010fe8 <_Bfree>
 800e490:	9805      	ldr	r0, [sp, #20]
 800e492:	4621      	mov	r1, r4
 800e494:	f002 fda8 	bl	8010fe8 <_Bfree>
 800e498:	e619      	b.n	800e0ce <_strtod_l+0x646>
 800e49a:	f1ba 0f01 	cmp.w	sl, #1
 800e49e:	d103      	bne.n	800e4a8 <_strtod_l+0xa20>
 800e4a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	f43f ada6 	beq.w	800dff4 <_strtod_l+0x56c>
 800e4a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e558 <_strtod_l+0xad0>
 800e4ac:	4f35      	ldr	r7, [pc, #212]	@ (800e584 <_strtod_l+0xafc>)
 800e4ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e4b2:	2600      	movs	r6, #0
 800e4b4:	e7b1      	b.n	800e41a <_strtod_l+0x992>
 800e4b6:	4f34      	ldr	r7, [pc, #208]	@ (800e588 <_strtod_l+0xb00>)
 800e4b8:	2600      	movs	r6, #0
 800e4ba:	e7aa      	b.n	800e412 <_strtod_l+0x98a>
 800e4bc:	4b32      	ldr	r3, [pc, #200]	@ (800e588 <_strtod_l+0xb00>)
 800e4be:	4630      	mov	r0, r6
 800e4c0:	4639      	mov	r1, r7
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f7f2 f8a8 	bl	8000618 <__aeabi_dmul>
 800e4c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4ca:	4606      	mov	r6, r0
 800e4cc:	460f      	mov	r7, r1
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d09f      	beq.n	800e412 <_strtod_l+0x98a>
 800e4d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e4d6:	e7a0      	b.n	800e41a <_strtod_l+0x992>
 800e4d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e560 <_strtod_l+0xad8>
 800e4dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e4e0:	ec57 6b17 	vmov	r6, r7, d7
 800e4e4:	e799      	b.n	800e41a <_strtod_l+0x992>
 800e4e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e4ea:	9b08      	ldr	r3, [sp, #32]
 800e4ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d1c1      	bne.n	800e478 <_strtod_l+0x9f0>
 800e4f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4f8:	0d1b      	lsrs	r3, r3, #20
 800e4fa:	051b      	lsls	r3, r3, #20
 800e4fc:	429d      	cmp	r5, r3
 800e4fe:	d1bb      	bne.n	800e478 <_strtod_l+0x9f0>
 800e500:	4630      	mov	r0, r6
 800e502:	4639      	mov	r1, r7
 800e504:	f7f2 fbe8 	bl	8000cd8 <__aeabi_d2lz>
 800e508:	f7f2 f858 	bl	80005bc <__aeabi_l2d>
 800e50c:	4602      	mov	r2, r0
 800e50e:	460b      	mov	r3, r1
 800e510:	4630      	mov	r0, r6
 800e512:	4639      	mov	r1, r7
 800e514:	f7f1 fec8 	bl	80002a8 <__aeabi_dsub>
 800e518:	460b      	mov	r3, r1
 800e51a:	4602      	mov	r2, r0
 800e51c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e520:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e526:	ea46 060a 	orr.w	r6, r6, sl
 800e52a:	431e      	orrs	r6, r3
 800e52c:	d06f      	beq.n	800e60e <_strtod_l+0xb86>
 800e52e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e568 <_strtod_l+0xae0>)
 800e530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e534:	f7f2 fae2 	bl	8000afc <__aeabi_dcmplt>
 800e538:	2800      	cmp	r0, #0
 800e53a:	f47f acd3 	bne.w	800dee4 <_strtod_l+0x45c>
 800e53e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e570 <_strtod_l+0xae8>)
 800e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e544:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e548:	f7f2 faf6 	bl	8000b38 <__aeabi_dcmpgt>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d093      	beq.n	800e478 <_strtod_l+0x9f0>
 800e550:	e4c8      	b.n	800dee4 <_strtod_l+0x45c>
 800e552:	bf00      	nop
 800e554:	f3af 8000 	nop.w
 800e558:	00000000 	.word	0x00000000
 800e55c:	bff00000 	.word	0xbff00000
 800e560:	00000000 	.word	0x00000000
 800e564:	3ff00000 	.word	0x3ff00000
 800e568:	94a03595 	.word	0x94a03595
 800e56c:	3fdfffff 	.word	0x3fdfffff
 800e570:	35afe535 	.word	0x35afe535
 800e574:	3fe00000 	.word	0x3fe00000
 800e578:	000fffff 	.word	0x000fffff
 800e57c:	7ff00000 	.word	0x7ff00000
 800e580:	7fefffff 	.word	0x7fefffff
 800e584:	3ff00000 	.word	0x3ff00000
 800e588:	3fe00000 	.word	0x3fe00000
 800e58c:	7fe00000 	.word	0x7fe00000
 800e590:	7c9fffff 	.word	0x7c9fffff
 800e594:	9b08      	ldr	r3, [sp, #32]
 800e596:	b323      	cbz	r3, 800e5e2 <_strtod_l+0xb5a>
 800e598:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e59c:	d821      	bhi.n	800e5e2 <_strtod_l+0xb5a>
 800e59e:	a328      	add	r3, pc, #160	@ (adr r3, 800e640 <_strtod_l+0xbb8>)
 800e5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	4639      	mov	r1, r7
 800e5a8:	f7f2 fab2 	bl	8000b10 <__aeabi_dcmple>
 800e5ac:	b1a0      	cbz	r0, 800e5d8 <_strtod_l+0xb50>
 800e5ae:	4639      	mov	r1, r7
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	f7f2 fb09 	bl	8000bc8 <__aeabi_d2uiz>
 800e5b6:	2801      	cmp	r0, #1
 800e5b8:	bf38      	it	cc
 800e5ba:	2001      	movcc	r0, #1
 800e5bc:	f7f1 ffb2 	bl	8000524 <__aeabi_ui2d>
 800e5c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5c2:	4606      	mov	r6, r0
 800e5c4:	460f      	mov	r7, r1
 800e5c6:	b9fb      	cbnz	r3, 800e608 <_strtod_l+0xb80>
 800e5c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e5cc:	9014      	str	r0, [sp, #80]	@ 0x50
 800e5ce:	9315      	str	r3, [sp, #84]	@ 0x54
 800e5d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e5d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e5d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e5de:	1b5b      	subs	r3, r3, r5
 800e5e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e5e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e5e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e5ea:	f003 f829 	bl	8011640 <__ulp>
 800e5ee:	4650      	mov	r0, sl
 800e5f0:	ec53 2b10 	vmov	r2, r3, d0
 800e5f4:	4659      	mov	r1, fp
 800e5f6:	f7f2 f80f 	bl	8000618 <__aeabi_dmul>
 800e5fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e5fe:	f7f1 fe55 	bl	80002ac <__adddf3>
 800e602:	4682      	mov	sl, r0
 800e604:	468b      	mov	fp, r1
 800e606:	e770      	b.n	800e4ea <_strtod_l+0xa62>
 800e608:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e60c:	e7e0      	b.n	800e5d0 <_strtod_l+0xb48>
 800e60e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e648 <_strtod_l+0xbc0>)
 800e610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e614:	f7f2 fa72 	bl	8000afc <__aeabi_dcmplt>
 800e618:	e798      	b.n	800e54c <_strtod_l+0xac4>
 800e61a:	2300      	movs	r3, #0
 800e61c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e61e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e620:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e622:	6013      	str	r3, [r2, #0]
 800e624:	f7ff ba6d 	b.w	800db02 <_strtod_l+0x7a>
 800e628:	2a65      	cmp	r2, #101	@ 0x65
 800e62a:	f43f ab68 	beq.w	800dcfe <_strtod_l+0x276>
 800e62e:	2a45      	cmp	r2, #69	@ 0x45
 800e630:	f43f ab65 	beq.w	800dcfe <_strtod_l+0x276>
 800e634:	2301      	movs	r3, #1
 800e636:	f7ff bba0 	b.w	800dd7a <_strtod_l+0x2f2>
 800e63a:	bf00      	nop
 800e63c:	f3af 8000 	nop.w
 800e640:	ffc00000 	.word	0xffc00000
 800e644:	41dfffff 	.word	0x41dfffff
 800e648:	94a03595 	.word	0x94a03595
 800e64c:	3fcfffff 	.word	0x3fcfffff

0800e650 <_strtod_r>:
 800e650:	4b01      	ldr	r3, [pc, #4]	@ (800e658 <_strtod_r+0x8>)
 800e652:	f7ff ba19 	b.w	800da88 <_strtod_l>
 800e656:	bf00      	nop
 800e658:	20000114 	.word	0x20000114

0800e65c <strtod>:
 800e65c:	460a      	mov	r2, r1
 800e65e:	4601      	mov	r1, r0
 800e660:	4802      	ldr	r0, [pc, #8]	@ (800e66c <strtod+0x10>)
 800e662:	4b03      	ldr	r3, [pc, #12]	@ (800e670 <strtod+0x14>)
 800e664:	6800      	ldr	r0, [r0, #0]
 800e666:	f7ff ba0f 	b.w	800da88 <_strtod_l>
 800e66a:	bf00      	nop
 800e66c:	20000280 	.word	0x20000280
 800e670:	20000114 	.word	0x20000114

0800e674 <_strtol_l.isra.0>:
 800e674:	2b24      	cmp	r3, #36	@ 0x24
 800e676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e67a:	4686      	mov	lr, r0
 800e67c:	4690      	mov	r8, r2
 800e67e:	d801      	bhi.n	800e684 <_strtol_l.isra.0+0x10>
 800e680:	2b01      	cmp	r3, #1
 800e682:	d106      	bne.n	800e692 <_strtol_l.isra.0+0x1e>
 800e684:	f001 f962 	bl	800f94c <__errno>
 800e688:	2316      	movs	r3, #22
 800e68a:	6003      	str	r3, [r0, #0]
 800e68c:	2000      	movs	r0, #0
 800e68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e692:	4834      	ldr	r0, [pc, #208]	@ (800e764 <_strtol_l.isra.0+0xf0>)
 800e694:	460d      	mov	r5, r1
 800e696:	462a      	mov	r2, r5
 800e698:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e69c:	5d06      	ldrb	r6, [r0, r4]
 800e69e:	f016 0608 	ands.w	r6, r6, #8
 800e6a2:	d1f8      	bne.n	800e696 <_strtol_l.isra.0+0x22>
 800e6a4:	2c2d      	cmp	r4, #45	@ 0x2d
 800e6a6:	d110      	bne.n	800e6ca <_strtol_l.isra.0+0x56>
 800e6a8:	782c      	ldrb	r4, [r5, #0]
 800e6aa:	2601      	movs	r6, #1
 800e6ac:	1c95      	adds	r5, r2, #2
 800e6ae:	f033 0210 	bics.w	r2, r3, #16
 800e6b2:	d115      	bne.n	800e6e0 <_strtol_l.isra.0+0x6c>
 800e6b4:	2c30      	cmp	r4, #48	@ 0x30
 800e6b6:	d10d      	bne.n	800e6d4 <_strtol_l.isra.0+0x60>
 800e6b8:	782a      	ldrb	r2, [r5, #0]
 800e6ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e6be:	2a58      	cmp	r2, #88	@ 0x58
 800e6c0:	d108      	bne.n	800e6d4 <_strtol_l.isra.0+0x60>
 800e6c2:	786c      	ldrb	r4, [r5, #1]
 800e6c4:	3502      	adds	r5, #2
 800e6c6:	2310      	movs	r3, #16
 800e6c8:	e00a      	b.n	800e6e0 <_strtol_l.isra.0+0x6c>
 800e6ca:	2c2b      	cmp	r4, #43	@ 0x2b
 800e6cc:	bf04      	itt	eq
 800e6ce:	782c      	ldrbeq	r4, [r5, #0]
 800e6d0:	1c95      	addeq	r5, r2, #2
 800e6d2:	e7ec      	b.n	800e6ae <_strtol_l.isra.0+0x3a>
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1f6      	bne.n	800e6c6 <_strtol_l.isra.0+0x52>
 800e6d8:	2c30      	cmp	r4, #48	@ 0x30
 800e6da:	bf14      	ite	ne
 800e6dc:	230a      	movne	r3, #10
 800e6de:	2308      	moveq	r3, #8
 800e6e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e6e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	fbbc f9f3 	udiv	r9, ip, r3
 800e6ee:	4610      	mov	r0, r2
 800e6f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800e6f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e6f8:	2f09      	cmp	r7, #9
 800e6fa:	d80f      	bhi.n	800e71c <_strtol_l.isra.0+0xa8>
 800e6fc:	463c      	mov	r4, r7
 800e6fe:	42a3      	cmp	r3, r4
 800e700:	dd1b      	ble.n	800e73a <_strtol_l.isra.0+0xc6>
 800e702:	1c57      	adds	r7, r2, #1
 800e704:	d007      	beq.n	800e716 <_strtol_l.isra.0+0xa2>
 800e706:	4581      	cmp	r9, r0
 800e708:	d314      	bcc.n	800e734 <_strtol_l.isra.0+0xc0>
 800e70a:	d101      	bne.n	800e710 <_strtol_l.isra.0+0x9c>
 800e70c:	45a2      	cmp	sl, r4
 800e70e:	db11      	blt.n	800e734 <_strtol_l.isra.0+0xc0>
 800e710:	fb00 4003 	mla	r0, r0, r3, r4
 800e714:	2201      	movs	r2, #1
 800e716:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e71a:	e7eb      	b.n	800e6f4 <_strtol_l.isra.0+0x80>
 800e71c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e720:	2f19      	cmp	r7, #25
 800e722:	d801      	bhi.n	800e728 <_strtol_l.isra.0+0xb4>
 800e724:	3c37      	subs	r4, #55	@ 0x37
 800e726:	e7ea      	b.n	800e6fe <_strtol_l.isra.0+0x8a>
 800e728:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e72c:	2f19      	cmp	r7, #25
 800e72e:	d804      	bhi.n	800e73a <_strtol_l.isra.0+0xc6>
 800e730:	3c57      	subs	r4, #87	@ 0x57
 800e732:	e7e4      	b.n	800e6fe <_strtol_l.isra.0+0x8a>
 800e734:	f04f 32ff 	mov.w	r2, #4294967295
 800e738:	e7ed      	b.n	800e716 <_strtol_l.isra.0+0xa2>
 800e73a:	1c53      	adds	r3, r2, #1
 800e73c:	d108      	bne.n	800e750 <_strtol_l.isra.0+0xdc>
 800e73e:	2322      	movs	r3, #34	@ 0x22
 800e740:	f8ce 3000 	str.w	r3, [lr]
 800e744:	4660      	mov	r0, ip
 800e746:	f1b8 0f00 	cmp.w	r8, #0
 800e74a:	d0a0      	beq.n	800e68e <_strtol_l.isra.0+0x1a>
 800e74c:	1e69      	subs	r1, r5, #1
 800e74e:	e006      	b.n	800e75e <_strtol_l.isra.0+0xea>
 800e750:	b106      	cbz	r6, 800e754 <_strtol_l.isra.0+0xe0>
 800e752:	4240      	negs	r0, r0
 800e754:	f1b8 0f00 	cmp.w	r8, #0
 800e758:	d099      	beq.n	800e68e <_strtol_l.isra.0+0x1a>
 800e75a:	2a00      	cmp	r2, #0
 800e75c:	d1f6      	bne.n	800e74c <_strtol_l.isra.0+0xd8>
 800e75e:	f8c8 1000 	str.w	r1, [r8]
 800e762:	e794      	b.n	800e68e <_strtol_l.isra.0+0x1a>
 800e764:	0806d1a1 	.word	0x0806d1a1

0800e768 <_strtol_r>:
 800e768:	f7ff bf84 	b.w	800e674 <_strtol_l.isra.0>

0800e76c <strtol>:
 800e76c:	4613      	mov	r3, r2
 800e76e:	460a      	mov	r2, r1
 800e770:	4601      	mov	r1, r0
 800e772:	4802      	ldr	r0, [pc, #8]	@ (800e77c <strtol+0x10>)
 800e774:	6800      	ldr	r0, [r0, #0]
 800e776:	f7ff bf7d 	b.w	800e674 <_strtol_l.isra.0>
 800e77a:	bf00      	nop
 800e77c:	20000280 	.word	0x20000280

0800e780 <__cvt>:
 800e780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e784:	ec57 6b10 	vmov	r6, r7, d0
 800e788:	2f00      	cmp	r7, #0
 800e78a:	460c      	mov	r4, r1
 800e78c:	4619      	mov	r1, r3
 800e78e:	463b      	mov	r3, r7
 800e790:	bfbb      	ittet	lt
 800e792:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e796:	461f      	movlt	r7, r3
 800e798:	2300      	movge	r3, #0
 800e79a:	232d      	movlt	r3, #45	@ 0x2d
 800e79c:	700b      	strb	r3, [r1, #0]
 800e79e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e7a4:	4691      	mov	r9, r2
 800e7a6:	f023 0820 	bic.w	r8, r3, #32
 800e7aa:	bfbc      	itt	lt
 800e7ac:	4632      	movlt	r2, r6
 800e7ae:	4616      	movlt	r6, r2
 800e7b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e7b4:	d005      	beq.n	800e7c2 <__cvt+0x42>
 800e7b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e7ba:	d100      	bne.n	800e7be <__cvt+0x3e>
 800e7bc:	3401      	adds	r4, #1
 800e7be:	2102      	movs	r1, #2
 800e7c0:	e000      	b.n	800e7c4 <__cvt+0x44>
 800e7c2:	2103      	movs	r1, #3
 800e7c4:	ab03      	add	r3, sp, #12
 800e7c6:	9301      	str	r3, [sp, #4]
 800e7c8:	ab02      	add	r3, sp, #8
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	ec47 6b10 	vmov	d0, r6, r7
 800e7d0:	4653      	mov	r3, sl
 800e7d2:	4622      	mov	r2, r4
 800e7d4:	f001 f9ac 	bl	800fb30 <_dtoa_r>
 800e7d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e7dc:	4605      	mov	r5, r0
 800e7de:	d119      	bne.n	800e814 <__cvt+0x94>
 800e7e0:	f019 0f01 	tst.w	r9, #1
 800e7e4:	d00e      	beq.n	800e804 <__cvt+0x84>
 800e7e6:	eb00 0904 	add.w	r9, r0, r4
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	4639      	mov	r1, r7
 800e7f2:	f7f2 f979 	bl	8000ae8 <__aeabi_dcmpeq>
 800e7f6:	b108      	cbz	r0, 800e7fc <__cvt+0x7c>
 800e7f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800e7fc:	2230      	movs	r2, #48	@ 0x30
 800e7fe:	9b03      	ldr	r3, [sp, #12]
 800e800:	454b      	cmp	r3, r9
 800e802:	d31e      	bcc.n	800e842 <__cvt+0xc2>
 800e804:	9b03      	ldr	r3, [sp, #12]
 800e806:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e808:	1b5b      	subs	r3, r3, r5
 800e80a:	4628      	mov	r0, r5
 800e80c:	6013      	str	r3, [r2, #0]
 800e80e:	b004      	add	sp, #16
 800e810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e814:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e818:	eb00 0904 	add.w	r9, r0, r4
 800e81c:	d1e5      	bne.n	800e7ea <__cvt+0x6a>
 800e81e:	7803      	ldrb	r3, [r0, #0]
 800e820:	2b30      	cmp	r3, #48	@ 0x30
 800e822:	d10a      	bne.n	800e83a <__cvt+0xba>
 800e824:	2200      	movs	r2, #0
 800e826:	2300      	movs	r3, #0
 800e828:	4630      	mov	r0, r6
 800e82a:	4639      	mov	r1, r7
 800e82c:	f7f2 f95c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e830:	b918      	cbnz	r0, 800e83a <__cvt+0xba>
 800e832:	f1c4 0401 	rsb	r4, r4, #1
 800e836:	f8ca 4000 	str.w	r4, [sl]
 800e83a:	f8da 3000 	ldr.w	r3, [sl]
 800e83e:	4499      	add	r9, r3
 800e840:	e7d3      	b.n	800e7ea <__cvt+0x6a>
 800e842:	1c59      	adds	r1, r3, #1
 800e844:	9103      	str	r1, [sp, #12]
 800e846:	701a      	strb	r2, [r3, #0]
 800e848:	e7d9      	b.n	800e7fe <__cvt+0x7e>

0800e84a <__exponent>:
 800e84a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e84c:	2900      	cmp	r1, #0
 800e84e:	bfba      	itte	lt
 800e850:	4249      	neglt	r1, r1
 800e852:	232d      	movlt	r3, #45	@ 0x2d
 800e854:	232b      	movge	r3, #43	@ 0x2b
 800e856:	2909      	cmp	r1, #9
 800e858:	7002      	strb	r2, [r0, #0]
 800e85a:	7043      	strb	r3, [r0, #1]
 800e85c:	dd29      	ble.n	800e8b2 <__exponent+0x68>
 800e85e:	f10d 0307 	add.w	r3, sp, #7
 800e862:	461d      	mov	r5, r3
 800e864:	270a      	movs	r7, #10
 800e866:	461a      	mov	r2, r3
 800e868:	fbb1 f6f7 	udiv	r6, r1, r7
 800e86c:	fb07 1416 	mls	r4, r7, r6, r1
 800e870:	3430      	adds	r4, #48	@ 0x30
 800e872:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e876:	460c      	mov	r4, r1
 800e878:	2c63      	cmp	r4, #99	@ 0x63
 800e87a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e87e:	4631      	mov	r1, r6
 800e880:	dcf1      	bgt.n	800e866 <__exponent+0x1c>
 800e882:	3130      	adds	r1, #48	@ 0x30
 800e884:	1e94      	subs	r4, r2, #2
 800e886:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e88a:	1c41      	adds	r1, r0, #1
 800e88c:	4623      	mov	r3, r4
 800e88e:	42ab      	cmp	r3, r5
 800e890:	d30a      	bcc.n	800e8a8 <__exponent+0x5e>
 800e892:	f10d 0309 	add.w	r3, sp, #9
 800e896:	1a9b      	subs	r3, r3, r2
 800e898:	42ac      	cmp	r4, r5
 800e89a:	bf88      	it	hi
 800e89c:	2300      	movhi	r3, #0
 800e89e:	3302      	adds	r3, #2
 800e8a0:	4403      	add	r3, r0
 800e8a2:	1a18      	subs	r0, r3, r0
 800e8a4:	b003      	add	sp, #12
 800e8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e8ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e8b0:	e7ed      	b.n	800e88e <__exponent+0x44>
 800e8b2:	2330      	movs	r3, #48	@ 0x30
 800e8b4:	3130      	adds	r1, #48	@ 0x30
 800e8b6:	7083      	strb	r3, [r0, #2]
 800e8b8:	70c1      	strb	r1, [r0, #3]
 800e8ba:	1d03      	adds	r3, r0, #4
 800e8bc:	e7f1      	b.n	800e8a2 <__exponent+0x58>
	...

0800e8c0 <_printf_float>:
 800e8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8c4:	b08d      	sub	sp, #52	@ 0x34
 800e8c6:	460c      	mov	r4, r1
 800e8c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e8cc:	4616      	mov	r6, r2
 800e8ce:	461f      	mov	r7, r3
 800e8d0:	4605      	mov	r5, r0
 800e8d2:	f000 fff1 	bl	800f8b8 <_localeconv_r>
 800e8d6:	6803      	ldr	r3, [r0, #0]
 800e8d8:	9304      	str	r3, [sp, #16]
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7f1 fcd8 	bl	8000290 <strlen>
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8e4:	f8d8 3000 	ldr.w	r3, [r8]
 800e8e8:	9005      	str	r0, [sp, #20]
 800e8ea:	3307      	adds	r3, #7
 800e8ec:	f023 0307 	bic.w	r3, r3, #7
 800e8f0:	f103 0208 	add.w	r2, r3, #8
 800e8f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e8f8:	f8d4 b000 	ldr.w	fp, [r4]
 800e8fc:	f8c8 2000 	str.w	r2, [r8]
 800e900:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e904:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e908:	9307      	str	r3, [sp, #28]
 800e90a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e90e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e912:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e916:	4b9c      	ldr	r3, [pc, #624]	@ (800eb88 <_printf_float+0x2c8>)
 800e918:	f04f 32ff 	mov.w	r2, #4294967295
 800e91c:	f7f2 f916 	bl	8000b4c <__aeabi_dcmpun>
 800e920:	bb70      	cbnz	r0, 800e980 <_printf_float+0xc0>
 800e922:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e926:	4b98      	ldr	r3, [pc, #608]	@ (800eb88 <_printf_float+0x2c8>)
 800e928:	f04f 32ff 	mov.w	r2, #4294967295
 800e92c:	f7f2 f8f0 	bl	8000b10 <__aeabi_dcmple>
 800e930:	bb30      	cbnz	r0, 800e980 <_printf_float+0xc0>
 800e932:	2200      	movs	r2, #0
 800e934:	2300      	movs	r3, #0
 800e936:	4640      	mov	r0, r8
 800e938:	4649      	mov	r1, r9
 800e93a:	f7f2 f8df 	bl	8000afc <__aeabi_dcmplt>
 800e93e:	b110      	cbz	r0, 800e946 <_printf_float+0x86>
 800e940:	232d      	movs	r3, #45	@ 0x2d
 800e942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e946:	4a91      	ldr	r2, [pc, #580]	@ (800eb8c <_printf_float+0x2cc>)
 800e948:	4b91      	ldr	r3, [pc, #580]	@ (800eb90 <_printf_float+0x2d0>)
 800e94a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e94e:	bf8c      	ite	hi
 800e950:	4690      	movhi	r8, r2
 800e952:	4698      	movls	r8, r3
 800e954:	2303      	movs	r3, #3
 800e956:	6123      	str	r3, [r4, #16]
 800e958:	f02b 0304 	bic.w	r3, fp, #4
 800e95c:	6023      	str	r3, [r4, #0]
 800e95e:	f04f 0900 	mov.w	r9, #0
 800e962:	9700      	str	r7, [sp, #0]
 800e964:	4633      	mov	r3, r6
 800e966:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e968:	4621      	mov	r1, r4
 800e96a:	4628      	mov	r0, r5
 800e96c:	f000 f9d2 	bl	800ed14 <_printf_common>
 800e970:	3001      	adds	r0, #1
 800e972:	f040 808d 	bne.w	800ea90 <_printf_float+0x1d0>
 800e976:	f04f 30ff 	mov.w	r0, #4294967295
 800e97a:	b00d      	add	sp, #52	@ 0x34
 800e97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e980:	4642      	mov	r2, r8
 800e982:	464b      	mov	r3, r9
 800e984:	4640      	mov	r0, r8
 800e986:	4649      	mov	r1, r9
 800e988:	f7f2 f8e0 	bl	8000b4c <__aeabi_dcmpun>
 800e98c:	b140      	cbz	r0, 800e9a0 <_printf_float+0xe0>
 800e98e:	464b      	mov	r3, r9
 800e990:	2b00      	cmp	r3, #0
 800e992:	bfbc      	itt	lt
 800e994:	232d      	movlt	r3, #45	@ 0x2d
 800e996:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e99a:	4a7e      	ldr	r2, [pc, #504]	@ (800eb94 <_printf_float+0x2d4>)
 800e99c:	4b7e      	ldr	r3, [pc, #504]	@ (800eb98 <_printf_float+0x2d8>)
 800e99e:	e7d4      	b.n	800e94a <_printf_float+0x8a>
 800e9a0:	6863      	ldr	r3, [r4, #4]
 800e9a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e9a6:	9206      	str	r2, [sp, #24]
 800e9a8:	1c5a      	adds	r2, r3, #1
 800e9aa:	d13b      	bne.n	800ea24 <_printf_float+0x164>
 800e9ac:	2306      	movs	r3, #6
 800e9ae:	6063      	str	r3, [r4, #4]
 800e9b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	6022      	str	r2, [r4, #0]
 800e9b8:	9303      	str	r3, [sp, #12]
 800e9ba:	ab0a      	add	r3, sp, #40	@ 0x28
 800e9bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e9c0:	ab09      	add	r3, sp, #36	@ 0x24
 800e9c2:	9300      	str	r3, [sp, #0]
 800e9c4:	6861      	ldr	r1, [r4, #4]
 800e9c6:	ec49 8b10 	vmov	d0, r8, r9
 800e9ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	f7ff fed6 	bl	800e780 <__cvt>
 800e9d4:	9b06      	ldr	r3, [sp, #24]
 800e9d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9d8:	2b47      	cmp	r3, #71	@ 0x47
 800e9da:	4680      	mov	r8, r0
 800e9dc:	d129      	bne.n	800ea32 <_printf_float+0x172>
 800e9de:	1cc8      	adds	r0, r1, #3
 800e9e0:	db02      	blt.n	800e9e8 <_printf_float+0x128>
 800e9e2:	6863      	ldr	r3, [r4, #4]
 800e9e4:	4299      	cmp	r1, r3
 800e9e6:	dd41      	ble.n	800ea6c <_printf_float+0x1ac>
 800e9e8:	f1aa 0a02 	sub.w	sl, sl, #2
 800e9ec:	fa5f fa8a 	uxtb.w	sl, sl
 800e9f0:	3901      	subs	r1, #1
 800e9f2:	4652      	mov	r2, sl
 800e9f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e9f8:	9109      	str	r1, [sp, #36]	@ 0x24
 800e9fa:	f7ff ff26 	bl	800e84a <__exponent>
 800e9fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea00:	1813      	adds	r3, r2, r0
 800ea02:	2a01      	cmp	r2, #1
 800ea04:	4681      	mov	r9, r0
 800ea06:	6123      	str	r3, [r4, #16]
 800ea08:	dc02      	bgt.n	800ea10 <_printf_float+0x150>
 800ea0a:	6822      	ldr	r2, [r4, #0]
 800ea0c:	07d2      	lsls	r2, r2, #31
 800ea0e:	d501      	bpl.n	800ea14 <_printf_float+0x154>
 800ea10:	3301      	adds	r3, #1
 800ea12:	6123      	str	r3, [r4, #16]
 800ea14:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d0a2      	beq.n	800e962 <_printf_float+0xa2>
 800ea1c:	232d      	movs	r3, #45	@ 0x2d
 800ea1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea22:	e79e      	b.n	800e962 <_printf_float+0xa2>
 800ea24:	9a06      	ldr	r2, [sp, #24]
 800ea26:	2a47      	cmp	r2, #71	@ 0x47
 800ea28:	d1c2      	bne.n	800e9b0 <_printf_float+0xf0>
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d1c0      	bne.n	800e9b0 <_printf_float+0xf0>
 800ea2e:	2301      	movs	r3, #1
 800ea30:	e7bd      	b.n	800e9ae <_printf_float+0xee>
 800ea32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea36:	d9db      	bls.n	800e9f0 <_printf_float+0x130>
 800ea38:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ea3c:	d118      	bne.n	800ea70 <_printf_float+0x1b0>
 800ea3e:	2900      	cmp	r1, #0
 800ea40:	6863      	ldr	r3, [r4, #4]
 800ea42:	dd0b      	ble.n	800ea5c <_printf_float+0x19c>
 800ea44:	6121      	str	r1, [r4, #16]
 800ea46:	b913      	cbnz	r3, 800ea4e <_printf_float+0x18e>
 800ea48:	6822      	ldr	r2, [r4, #0]
 800ea4a:	07d0      	lsls	r0, r2, #31
 800ea4c:	d502      	bpl.n	800ea54 <_printf_float+0x194>
 800ea4e:	3301      	adds	r3, #1
 800ea50:	440b      	add	r3, r1
 800ea52:	6123      	str	r3, [r4, #16]
 800ea54:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ea56:	f04f 0900 	mov.w	r9, #0
 800ea5a:	e7db      	b.n	800ea14 <_printf_float+0x154>
 800ea5c:	b913      	cbnz	r3, 800ea64 <_printf_float+0x1a4>
 800ea5e:	6822      	ldr	r2, [r4, #0]
 800ea60:	07d2      	lsls	r2, r2, #31
 800ea62:	d501      	bpl.n	800ea68 <_printf_float+0x1a8>
 800ea64:	3302      	adds	r3, #2
 800ea66:	e7f4      	b.n	800ea52 <_printf_float+0x192>
 800ea68:	2301      	movs	r3, #1
 800ea6a:	e7f2      	b.n	800ea52 <_printf_float+0x192>
 800ea6c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ea70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea72:	4299      	cmp	r1, r3
 800ea74:	db05      	blt.n	800ea82 <_printf_float+0x1c2>
 800ea76:	6823      	ldr	r3, [r4, #0]
 800ea78:	6121      	str	r1, [r4, #16]
 800ea7a:	07d8      	lsls	r0, r3, #31
 800ea7c:	d5ea      	bpl.n	800ea54 <_printf_float+0x194>
 800ea7e:	1c4b      	adds	r3, r1, #1
 800ea80:	e7e7      	b.n	800ea52 <_printf_float+0x192>
 800ea82:	2900      	cmp	r1, #0
 800ea84:	bfd4      	ite	le
 800ea86:	f1c1 0202 	rsble	r2, r1, #2
 800ea8a:	2201      	movgt	r2, #1
 800ea8c:	4413      	add	r3, r2
 800ea8e:	e7e0      	b.n	800ea52 <_printf_float+0x192>
 800ea90:	6823      	ldr	r3, [r4, #0]
 800ea92:	055a      	lsls	r2, r3, #21
 800ea94:	d407      	bmi.n	800eaa6 <_printf_float+0x1e6>
 800ea96:	6923      	ldr	r3, [r4, #16]
 800ea98:	4642      	mov	r2, r8
 800ea9a:	4631      	mov	r1, r6
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	47b8      	blx	r7
 800eaa0:	3001      	adds	r0, #1
 800eaa2:	d12b      	bne.n	800eafc <_printf_float+0x23c>
 800eaa4:	e767      	b.n	800e976 <_printf_float+0xb6>
 800eaa6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eaaa:	f240 80dd 	bls.w	800ec68 <_printf_float+0x3a8>
 800eaae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eab2:	2200      	movs	r2, #0
 800eab4:	2300      	movs	r3, #0
 800eab6:	f7f2 f817 	bl	8000ae8 <__aeabi_dcmpeq>
 800eaba:	2800      	cmp	r0, #0
 800eabc:	d033      	beq.n	800eb26 <_printf_float+0x266>
 800eabe:	4a37      	ldr	r2, [pc, #220]	@ (800eb9c <_printf_float+0x2dc>)
 800eac0:	2301      	movs	r3, #1
 800eac2:	4631      	mov	r1, r6
 800eac4:	4628      	mov	r0, r5
 800eac6:	47b8      	blx	r7
 800eac8:	3001      	adds	r0, #1
 800eaca:	f43f af54 	beq.w	800e976 <_printf_float+0xb6>
 800eace:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ead2:	4543      	cmp	r3, r8
 800ead4:	db02      	blt.n	800eadc <_printf_float+0x21c>
 800ead6:	6823      	ldr	r3, [r4, #0]
 800ead8:	07d8      	lsls	r0, r3, #31
 800eada:	d50f      	bpl.n	800eafc <_printf_float+0x23c>
 800eadc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eae0:	4631      	mov	r1, r6
 800eae2:	4628      	mov	r0, r5
 800eae4:	47b8      	blx	r7
 800eae6:	3001      	adds	r0, #1
 800eae8:	f43f af45 	beq.w	800e976 <_printf_float+0xb6>
 800eaec:	f04f 0900 	mov.w	r9, #0
 800eaf0:	f108 38ff 	add.w	r8, r8, #4294967295
 800eaf4:	f104 0a1a 	add.w	sl, r4, #26
 800eaf8:	45c8      	cmp	r8, r9
 800eafa:	dc09      	bgt.n	800eb10 <_printf_float+0x250>
 800eafc:	6823      	ldr	r3, [r4, #0]
 800eafe:	079b      	lsls	r3, r3, #30
 800eb00:	f100 8103 	bmi.w	800ed0a <_printf_float+0x44a>
 800eb04:	68e0      	ldr	r0, [r4, #12]
 800eb06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb08:	4298      	cmp	r0, r3
 800eb0a:	bfb8      	it	lt
 800eb0c:	4618      	movlt	r0, r3
 800eb0e:	e734      	b.n	800e97a <_printf_float+0xba>
 800eb10:	2301      	movs	r3, #1
 800eb12:	4652      	mov	r2, sl
 800eb14:	4631      	mov	r1, r6
 800eb16:	4628      	mov	r0, r5
 800eb18:	47b8      	blx	r7
 800eb1a:	3001      	adds	r0, #1
 800eb1c:	f43f af2b 	beq.w	800e976 <_printf_float+0xb6>
 800eb20:	f109 0901 	add.w	r9, r9, #1
 800eb24:	e7e8      	b.n	800eaf8 <_printf_float+0x238>
 800eb26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	dc39      	bgt.n	800eba0 <_printf_float+0x2e0>
 800eb2c:	4a1b      	ldr	r2, [pc, #108]	@ (800eb9c <_printf_float+0x2dc>)
 800eb2e:	2301      	movs	r3, #1
 800eb30:	4631      	mov	r1, r6
 800eb32:	4628      	mov	r0, r5
 800eb34:	47b8      	blx	r7
 800eb36:	3001      	adds	r0, #1
 800eb38:	f43f af1d 	beq.w	800e976 <_printf_float+0xb6>
 800eb3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eb40:	ea59 0303 	orrs.w	r3, r9, r3
 800eb44:	d102      	bne.n	800eb4c <_printf_float+0x28c>
 800eb46:	6823      	ldr	r3, [r4, #0]
 800eb48:	07d9      	lsls	r1, r3, #31
 800eb4a:	d5d7      	bpl.n	800eafc <_printf_float+0x23c>
 800eb4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb50:	4631      	mov	r1, r6
 800eb52:	4628      	mov	r0, r5
 800eb54:	47b8      	blx	r7
 800eb56:	3001      	adds	r0, #1
 800eb58:	f43f af0d 	beq.w	800e976 <_printf_float+0xb6>
 800eb5c:	f04f 0a00 	mov.w	sl, #0
 800eb60:	f104 0b1a 	add.w	fp, r4, #26
 800eb64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb66:	425b      	negs	r3, r3
 800eb68:	4553      	cmp	r3, sl
 800eb6a:	dc01      	bgt.n	800eb70 <_printf_float+0x2b0>
 800eb6c:	464b      	mov	r3, r9
 800eb6e:	e793      	b.n	800ea98 <_printf_float+0x1d8>
 800eb70:	2301      	movs	r3, #1
 800eb72:	465a      	mov	r2, fp
 800eb74:	4631      	mov	r1, r6
 800eb76:	4628      	mov	r0, r5
 800eb78:	47b8      	blx	r7
 800eb7a:	3001      	adds	r0, #1
 800eb7c:	f43f aefb 	beq.w	800e976 <_printf_float+0xb6>
 800eb80:	f10a 0a01 	add.w	sl, sl, #1
 800eb84:	e7ee      	b.n	800eb64 <_printf_float+0x2a4>
 800eb86:	bf00      	nop
 800eb88:	7fefffff 	.word	0x7fefffff
 800eb8c:	0806cf21 	.word	0x0806cf21
 800eb90:	0806cf1d 	.word	0x0806cf1d
 800eb94:	0806cf29 	.word	0x0806cf29
 800eb98:	0806cf25 	.word	0x0806cf25
 800eb9c:	0806d148 	.word	0x0806d148
 800eba0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eba2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eba6:	4553      	cmp	r3, sl
 800eba8:	bfa8      	it	ge
 800ebaa:	4653      	movge	r3, sl
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	4699      	mov	r9, r3
 800ebb0:	dc36      	bgt.n	800ec20 <_printf_float+0x360>
 800ebb2:	f04f 0b00 	mov.w	fp, #0
 800ebb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebba:	f104 021a 	add.w	r2, r4, #26
 800ebbe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ebc0:	9306      	str	r3, [sp, #24]
 800ebc2:	eba3 0309 	sub.w	r3, r3, r9
 800ebc6:	455b      	cmp	r3, fp
 800ebc8:	dc31      	bgt.n	800ec2e <_printf_float+0x36e>
 800ebca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebcc:	459a      	cmp	sl, r3
 800ebce:	dc3a      	bgt.n	800ec46 <_printf_float+0x386>
 800ebd0:	6823      	ldr	r3, [r4, #0]
 800ebd2:	07da      	lsls	r2, r3, #31
 800ebd4:	d437      	bmi.n	800ec46 <_printf_float+0x386>
 800ebd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebd8:	ebaa 0903 	sub.w	r9, sl, r3
 800ebdc:	9b06      	ldr	r3, [sp, #24]
 800ebde:	ebaa 0303 	sub.w	r3, sl, r3
 800ebe2:	4599      	cmp	r9, r3
 800ebe4:	bfa8      	it	ge
 800ebe6:	4699      	movge	r9, r3
 800ebe8:	f1b9 0f00 	cmp.w	r9, #0
 800ebec:	dc33      	bgt.n	800ec56 <_printf_float+0x396>
 800ebee:	f04f 0800 	mov.w	r8, #0
 800ebf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebf6:	f104 0b1a 	add.w	fp, r4, #26
 800ebfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebfc:	ebaa 0303 	sub.w	r3, sl, r3
 800ec00:	eba3 0309 	sub.w	r3, r3, r9
 800ec04:	4543      	cmp	r3, r8
 800ec06:	f77f af79 	ble.w	800eafc <_printf_float+0x23c>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	465a      	mov	r2, fp
 800ec0e:	4631      	mov	r1, r6
 800ec10:	4628      	mov	r0, r5
 800ec12:	47b8      	blx	r7
 800ec14:	3001      	adds	r0, #1
 800ec16:	f43f aeae 	beq.w	800e976 <_printf_float+0xb6>
 800ec1a:	f108 0801 	add.w	r8, r8, #1
 800ec1e:	e7ec      	b.n	800ebfa <_printf_float+0x33a>
 800ec20:	4642      	mov	r2, r8
 800ec22:	4631      	mov	r1, r6
 800ec24:	4628      	mov	r0, r5
 800ec26:	47b8      	blx	r7
 800ec28:	3001      	adds	r0, #1
 800ec2a:	d1c2      	bne.n	800ebb2 <_printf_float+0x2f2>
 800ec2c:	e6a3      	b.n	800e976 <_printf_float+0xb6>
 800ec2e:	2301      	movs	r3, #1
 800ec30:	4631      	mov	r1, r6
 800ec32:	4628      	mov	r0, r5
 800ec34:	9206      	str	r2, [sp, #24]
 800ec36:	47b8      	blx	r7
 800ec38:	3001      	adds	r0, #1
 800ec3a:	f43f ae9c 	beq.w	800e976 <_printf_float+0xb6>
 800ec3e:	9a06      	ldr	r2, [sp, #24]
 800ec40:	f10b 0b01 	add.w	fp, fp, #1
 800ec44:	e7bb      	b.n	800ebbe <_printf_float+0x2fe>
 800ec46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec4a:	4631      	mov	r1, r6
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	47b8      	blx	r7
 800ec50:	3001      	adds	r0, #1
 800ec52:	d1c0      	bne.n	800ebd6 <_printf_float+0x316>
 800ec54:	e68f      	b.n	800e976 <_printf_float+0xb6>
 800ec56:	9a06      	ldr	r2, [sp, #24]
 800ec58:	464b      	mov	r3, r9
 800ec5a:	4442      	add	r2, r8
 800ec5c:	4631      	mov	r1, r6
 800ec5e:	4628      	mov	r0, r5
 800ec60:	47b8      	blx	r7
 800ec62:	3001      	adds	r0, #1
 800ec64:	d1c3      	bne.n	800ebee <_printf_float+0x32e>
 800ec66:	e686      	b.n	800e976 <_printf_float+0xb6>
 800ec68:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ec6c:	f1ba 0f01 	cmp.w	sl, #1
 800ec70:	dc01      	bgt.n	800ec76 <_printf_float+0x3b6>
 800ec72:	07db      	lsls	r3, r3, #31
 800ec74:	d536      	bpl.n	800ece4 <_printf_float+0x424>
 800ec76:	2301      	movs	r3, #1
 800ec78:	4642      	mov	r2, r8
 800ec7a:	4631      	mov	r1, r6
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	47b8      	blx	r7
 800ec80:	3001      	adds	r0, #1
 800ec82:	f43f ae78 	beq.w	800e976 <_printf_float+0xb6>
 800ec86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec8a:	4631      	mov	r1, r6
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	47b8      	blx	r7
 800ec90:	3001      	adds	r0, #1
 800ec92:	f43f ae70 	beq.w	800e976 <_printf_float+0xb6>
 800ec96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eca2:	f7f1 ff21 	bl	8000ae8 <__aeabi_dcmpeq>
 800eca6:	b9c0      	cbnz	r0, 800ecda <_printf_float+0x41a>
 800eca8:	4653      	mov	r3, sl
 800ecaa:	f108 0201 	add.w	r2, r8, #1
 800ecae:	4631      	mov	r1, r6
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	47b8      	blx	r7
 800ecb4:	3001      	adds	r0, #1
 800ecb6:	d10c      	bne.n	800ecd2 <_printf_float+0x412>
 800ecb8:	e65d      	b.n	800e976 <_printf_float+0xb6>
 800ecba:	2301      	movs	r3, #1
 800ecbc:	465a      	mov	r2, fp
 800ecbe:	4631      	mov	r1, r6
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	47b8      	blx	r7
 800ecc4:	3001      	adds	r0, #1
 800ecc6:	f43f ae56 	beq.w	800e976 <_printf_float+0xb6>
 800ecca:	f108 0801 	add.w	r8, r8, #1
 800ecce:	45d0      	cmp	r8, sl
 800ecd0:	dbf3      	blt.n	800ecba <_printf_float+0x3fa>
 800ecd2:	464b      	mov	r3, r9
 800ecd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ecd8:	e6df      	b.n	800ea9a <_printf_float+0x1da>
 800ecda:	f04f 0800 	mov.w	r8, #0
 800ecde:	f104 0b1a 	add.w	fp, r4, #26
 800ece2:	e7f4      	b.n	800ecce <_printf_float+0x40e>
 800ece4:	2301      	movs	r3, #1
 800ece6:	4642      	mov	r2, r8
 800ece8:	e7e1      	b.n	800ecae <_printf_float+0x3ee>
 800ecea:	2301      	movs	r3, #1
 800ecec:	464a      	mov	r2, r9
 800ecee:	4631      	mov	r1, r6
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	47b8      	blx	r7
 800ecf4:	3001      	adds	r0, #1
 800ecf6:	f43f ae3e 	beq.w	800e976 <_printf_float+0xb6>
 800ecfa:	f108 0801 	add.w	r8, r8, #1
 800ecfe:	68e3      	ldr	r3, [r4, #12]
 800ed00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ed02:	1a5b      	subs	r3, r3, r1
 800ed04:	4543      	cmp	r3, r8
 800ed06:	dcf0      	bgt.n	800ecea <_printf_float+0x42a>
 800ed08:	e6fc      	b.n	800eb04 <_printf_float+0x244>
 800ed0a:	f04f 0800 	mov.w	r8, #0
 800ed0e:	f104 0919 	add.w	r9, r4, #25
 800ed12:	e7f4      	b.n	800ecfe <_printf_float+0x43e>

0800ed14 <_printf_common>:
 800ed14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed18:	4616      	mov	r6, r2
 800ed1a:	4698      	mov	r8, r3
 800ed1c:	688a      	ldr	r2, [r1, #8]
 800ed1e:	690b      	ldr	r3, [r1, #16]
 800ed20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ed24:	4293      	cmp	r3, r2
 800ed26:	bfb8      	it	lt
 800ed28:	4613      	movlt	r3, r2
 800ed2a:	6033      	str	r3, [r6, #0]
 800ed2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ed30:	4607      	mov	r7, r0
 800ed32:	460c      	mov	r4, r1
 800ed34:	b10a      	cbz	r2, 800ed3a <_printf_common+0x26>
 800ed36:	3301      	adds	r3, #1
 800ed38:	6033      	str	r3, [r6, #0]
 800ed3a:	6823      	ldr	r3, [r4, #0]
 800ed3c:	0699      	lsls	r1, r3, #26
 800ed3e:	bf42      	ittt	mi
 800ed40:	6833      	ldrmi	r3, [r6, #0]
 800ed42:	3302      	addmi	r3, #2
 800ed44:	6033      	strmi	r3, [r6, #0]
 800ed46:	6825      	ldr	r5, [r4, #0]
 800ed48:	f015 0506 	ands.w	r5, r5, #6
 800ed4c:	d106      	bne.n	800ed5c <_printf_common+0x48>
 800ed4e:	f104 0a19 	add.w	sl, r4, #25
 800ed52:	68e3      	ldr	r3, [r4, #12]
 800ed54:	6832      	ldr	r2, [r6, #0]
 800ed56:	1a9b      	subs	r3, r3, r2
 800ed58:	42ab      	cmp	r3, r5
 800ed5a:	dc26      	bgt.n	800edaa <_printf_common+0x96>
 800ed5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ed60:	6822      	ldr	r2, [r4, #0]
 800ed62:	3b00      	subs	r3, #0
 800ed64:	bf18      	it	ne
 800ed66:	2301      	movne	r3, #1
 800ed68:	0692      	lsls	r2, r2, #26
 800ed6a:	d42b      	bmi.n	800edc4 <_printf_common+0xb0>
 800ed6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ed70:	4641      	mov	r1, r8
 800ed72:	4638      	mov	r0, r7
 800ed74:	47c8      	blx	r9
 800ed76:	3001      	adds	r0, #1
 800ed78:	d01e      	beq.n	800edb8 <_printf_common+0xa4>
 800ed7a:	6823      	ldr	r3, [r4, #0]
 800ed7c:	6922      	ldr	r2, [r4, #16]
 800ed7e:	f003 0306 	and.w	r3, r3, #6
 800ed82:	2b04      	cmp	r3, #4
 800ed84:	bf02      	ittt	eq
 800ed86:	68e5      	ldreq	r5, [r4, #12]
 800ed88:	6833      	ldreq	r3, [r6, #0]
 800ed8a:	1aed      	subeq	r5, r5, r3
 800ed8c:	68a3      	ldr	r3, [r4, #8]
 800ed8e:	bf0c      	ite	eq
 800ed90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed94:	2500      	movne	r5, #0
 800ed96:	4293      	cmp	r3, r2
 800ed98:	bfc4      	itt	gt
 800ed9a:	1a9b      	subgt	r3, r3, r2
 800ed9c:	18ed      	addgt	r5, r5, r3
 800ed9e:	2600      	movs	r6, #0
 800eda0:	341a      	adds	r4, #26
 800eda2:	42b5      	cmp	r5, r6
 800eda4:	d11a      	bne.n	800eddc <_printf_common+0xc8>
 800eda6:	2000      	movs	r0, #0
 800eda8:	e008      	b.n	800edbc <_printf_common+0xa8>
 800edaa:	2301      	movs	r3, #1
 800edac:	4652      	mov	r2, sl
 800edae:	4641      	mov	r1, r8
 800edb0:	4638      	mov	r0, r7
 800edb2:	47c8      	blx	r9
 800edb4:	3001      	adds	r0, #1
 800edb6:	d103      	bne.n	800edc0 <_printf_common+0xac>
 800edb8:	f04f 30ff 	mov.w	r0, #4294967295
 800edbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc0:	3501      	adds	r5, #1
 800edc2:	e7c6      	b.n	800ed52 <_printf_common+0x3e>
 800edc4:	18e1      	adds	r1, r4, r3
 800edc6:	1c5a      	adds	r2, r3, #1
 800edc8:	2030      	movs	r0, #48	@ 0x30
 800edca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800edce:	4422      	add	r2, r4
 800edd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800edd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800edd8:	3302      	adds	r3, #2
 800edda:	e7c7      	b.n	800ed6c <_printf_common+0x58>
 800eddc:	2301      	movs	r3, #1
 800edde:	4622      	mov	r2, r4
 800ede0:	4641      	mov	r1, r8
 800ede2:	4638      	mov	r0, r7
 800ede4:	47c8      	blx	r9
 800ede6:	3001      	adds	r0, #1
 800ede8:	d0e6      	beq.n	800edb8 <_printf_common+0xa4>
 800edea:	3601      	adds	r6, #1
 800edec:	e7d9      	b.n	800eda2 <_printf_common+0x8e>
	...

0800edf0 <_printf_i>:
 800edf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edf4:	7e0f      	ldrb	r7, [r1, #24]
 800edf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800edf8:	2f78      	cmp	r7, #120	@ 0x78
 800edfa:	4691      	mov	r9, r2
 800edfc:	4680      	mov	r8, r0
 800edfe:	460c      	mov	r4, r1
 800ee00:	469a      	mov	sl, r3
 800ee02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ee06:	d807      	bhi.n	800ee18 <_printf_i+0x28>
 800ee08:	2f62      	cmp	r7, #98	@ 0x62
 800ee0a:	d80a      	bhi.n	800ee22 <_printf_i+0x32>
 800ee0c:	2f00      	cmp	r7, #0
 800ee0e:	f000 80d1 	beq.w	800efb4 <_printf_i+0x1c4>
 800ee12:	2f58      	cmp	r7, #88	@ 0x58
 800ee14:	f000 80b8 	beq.w	800ef88 <_printf_i+0x198>
 800ee18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ee20:	e03a      	b.n	800ee98 <_printf_i+0xa8>
 800ee22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ee26:	2b15      	cmp	r3, #21
 800ee28:	d8f6      	bhi.n	800ee18 <_printf_i+0x28>
 800ee2a:	a101      	add	r1, pc, #4	@ (adr r1, 800ee30 <_printf_i+0x40>)
 800ee2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee30:	0800ee89 	.word	0x0800ee89
 800ee34:	0800ee9d 	.word	0x0800ee9d
 800ee38:	0800ee19 	.word	0x0800ee19
 800ee3c:	0800ee19 	.word	0x0800ee19
 800ee40:	0800ee19 	.word	0x0800ee19
 800ee44:	0800ee19 	.word	0x0800ee19
 800ee48:	0800ee9d 	.word	0x0800ee9d
 800ee4c:	0800ee19 	.word	0x0800ee19
 800ee50:	0800ee19 	.word	0x0800ee19
 800ee54:	0800ee19 	.word	0x0800ee19
 800ee58:	0800ee19 	.word	0x0800ee19
 800ee5c:	0800ef9b 	.word	0x0800ef9b
 800ee60:	0800eec7 	.word	0x0800eec7
 800ee64:	0800ef55 	.word	0x0800ef55
 800ee68:	0800ee19 	.word	0x0800ee19
 800ee6c:	0800ee19 	.word	0x0800ee19
 800ee70:	0800efbd 	.word	0x0800efbd
 800ee74:	0800ee19 	.word	0x0800ee19
 800ee78:	0800eec7 	.word	0x0800eec7
 800ee7c:	0800ee19 	.word	0x0800ee19
 800ee80:	0800ee19 	.word	0x0800ee19
 800ee84:	0800ef5d 	.word	0x0800ef5d
 800ee88:	6833      	ldr	r3, [r6, #0]
 800ee8a:	1d1a      	adds	r2, r3, #4
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	6032      	str	r2, [r6, #0]
 800ee90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ee98:	2301      	movs	r3, #1
 800ee9a:	e09c      	b.n	800efd6 <_printf_i+0x1e6>
 800ee9c:	6833      	ldr	r3, [r6, #0]
 800ee9e:	6820      	ldr	r0, [r4, #0]
 800eea0:	1d19      	adds	r1, r3, #4
 800eea2:	6031      	str	r1, [r6, #0]
 800eea4:	0606      	lsls	r6, r0, #24
 800eea6:	d501      	bpl.n	800eeac <_printf_i+0xbc>
 800eea8:	681d      	ldr	r5, [r3, #0]
 800eeaa:	e003      	b.n	800eeb4 <_printf_i+0xc4>
 800eeac:	0645      	lsls	r5, r0, #25
 800eeae:	d5fb      	bpl.n	800eea8 <_printf_i+0xb8>
 800eeb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eeb4:	2d00      	cmp	r5, #0
 800eeb6:	da03      	bge.n	800eec0 <_printf_i+0xd0>
 800eeb8:	232d      	movs	r3, #45	@ 0x2d
 800eeba:	426d      	negs	r5, r5
 800eebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eec0:	4858      	ldr	r0, [pc, #352]	@ (800f024 <_printf_i+0x234>)
 800eec2:	230a      	movs	r3, #10
 800eec4:	e011      	b.n	800eeea <_printf_i+0xfa>
 800eec6:	6821      	ldr	r1, [r4, #0]
 800eec8:	6833      	ldr	r3, [r6, #0]
 800eeca:	0608      	lsls	r0, r1, #24
 800eecc:	f853 5b04 	ldr.w	r5, [r3], #4
 800eed0:	d402      	bmi.n	800eed8 <_printf_i+0xe8>
 800eed2:	0649      	lsls	r1, r1, #25
 800eed4:	bf48      	it	mi
 800eed6:	b2ad      	uxthmi	r5, r5
 800eed8:	2f6f      	cmp	r7, #111	@ 0x6f
 800eeda:	4852      	ldr	r0, [pc, #328]	@ (800f024 <_printf_i+0x234>)
 800eedc:	6033      	str	r3, [r6, #0]
 800eede:	bf14      	ite	ne
 800eee0:	230a      	movne	r3, #10
 800eee2:	2308      	moveq	r3, #8
 800eee4:	2100      	movs	r1, #0
 800eee6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eeea:	6866      	ldr	r6, [r4, #4]
 800eeec:	60a6      	str	r6, [r4, #8]
 800eeee:	2e00      	cmp	r6, #0
 800eef0:	db05      	blt.n	800eefe <_printf_i+0x10e>
 800eef2:	6821      	ldr	r1, [r4, #0]
 800eef4:	432e      	orrs	r6, r5
 800eef6:	f021 0104 	bic.w	r1, r1, #4
 800eefa:	6021      	str	r1, [r4, #0]
 800eefc:	d04b      	beq.n	800ef96 <_printf_i+0x1a6>
 800eefe:	4616      	mov	r6, r2
 800ef00:	fbb5 f1f3 	udiv	r1, r5, r3
 800ef04:	fb03 5711 	mls	r7, r3, r1, r5
 800ef08:	5dc7      	ldrb	r7, [r0, r7]
 800ef0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef0e:	462f      	mov	r7, r5
 800ef10:	42bb      	cmp	r3, r7
 800ef12:	460d      	mov	r5, r1
 800ef14:	d9f4      	bls.n	800ef00 <_printf_i+0x110>
 800ef16:	2b08      	cmp	r3, #8
 800ef18:	d10b      	bne.n	800ef32 <_printf_i+0x142>
 800ef1a:	6823      	ldr	r3, [r4, #0]
 800ef1c:	07df      	lsls	r7, r3, #31
 800ef1e:	d508      	bpl.n	800ef32 <_printf_i+0x142>
 800ef20:	6923      	ldr	r3, [r4, #16]
 800ef22:	6861      	ldr	r1, [r4, #4]
 800ef24:	4299      	cmp	r1, r3
 800ef26:	bfde      	ittt	le
 800ef28:	2330      	movle	r3, #48	@ 0x30
 800ef2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef32:	1b92      	subs	r2, r2, r6
 800ef34:	6122      	str	r2, [r4, #16]
 800ef36:	f8cd a000 	str.w	sl, [sp]
 800ef3a:	464b      	mov	r3, r9
 800ef3c:	aa03      	add	r2, sp, #12
 800ef3e:	4621      	mov	r1, r4
 800ef40:	4640      	mov	r0, r8
 800ef42:	f7ff fee7 	bl	800ed14 <_printf_common>
 800ef46:	3001      	adds	r0, #1
 800ef48:	d14a      	bne.n	800efe0 <_printf_i+0x1f0>
 800ef4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef4e:	b004      	add	sp, #16
 800ef50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef54:	6823      	ldr	r3, [r4, #0]
 800ef56:	f043 0320 	orr.w	r3, r3, #32
 800ef5a:	6023      	str	r3, [r4, #0]
 800ef5c:	4832      	ldr	r0, [pc, #200]	@ (800f028 <_printf_i+0x238>)
 800ef5e:	2778      	movs	r7, #120	@ 0x78
 800ef60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ef64:	6823      	ldr	r3, [r4, #0]
 800ef66:	6831      	ldr	r1, [r6, #0]
 800ef68:	061f      	lsls	r7, r3, #24
 800ef6a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ef6e:	d402      	bmi.n	800ef76 <_printf_i+0x186>
 800ef70:	065f      	lsls	r7, r3, #25
 800ef72:	bf48      	it	mi
 800ef74:	b2ad      	uxthmi	r5, r5
 800ef76:	6031      	str	r1, [r6, #0]
 800ef78:	07d9      	lsls	r1, r3, #31
 800ef7a:	bf44      	itt	mi
 800ef7c:	f043 0320 	orrmi.w	r3, r3, #32
 800ef80:	6023      	strmi	r3, [r4, #0]
 800ef82:	b11d      	cbz	r5, 800ef8c <_printf_i+0x19c>
 800ef84:	2310      	movs	r3, #16
 800ef86:	e7ad      	b.n	800eee4 <_printf_i+0xf4>
 800ef88:	4826      	ldr	r0, [pc, #152]	@ (800f024 <_printf_i+0x234>)
 800ef8a:	e7e9      	b.n	800ef60 <_printf_i+0x170>
 800ef8c:	6823      	ldr	r3, [r4, #0]
 800ef8e:	f023 0320 	bic.w	r3, r3, #32
 800ef92:	6023      	str	r3, [r4, #0]
 800ef94:	e7f6      	b.n	800ef84 <_printf_i+0x194>
 800ef96:	4616      	mov	r6, r2
 800ef98:	e7bd      	b.n	800ef16 <_printf_i+0x126>
 800ef9a:	6833      	ldr	r3, [r6, #0]
 800ef9c:	6825      	ldr	r5, [r4, #0]
 800ef9e:	6961      	ldr	r1, [r4, #20]
 800efa0:	1d18      	adds	r0, r3, #4
 800efa2:	6030      	str	r0, [r6, #0]
 800efa4:	062e      	lsls	r6, r5, #24
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	d501      	bpl.n	800efae <_printf_i+0x1be>
 800efaa:	6019      	str	r1, [r3, #0]
 800efac:	e002      	b.n	800efb4 <_printf_i+0x1c4>
 800efae:	0668      	lsls	r0, r5, #25
 800efb0:	d5fb      	bpl.n	800efaa <_printf_i+0x1ba>
 800efb2:	8019      	strh	r1, [r3, #0]
 800efb4:	2300      	movs	r3, #0
 800efb6:	6123      	str	r3, [r4, #16]
 800efb8:	4616      	mov	r6, r2
 800efba:	e7bc      	b.n	800ef36 <_printf_i+0x146>
 800efbc:	6833      	ldr	r3, [r6, #0]
 800efbe:	1d1a      	adds	r2, r3, #4
 800efc0:	6032      	str	r2, [r6, #0]
 800efc2:	681e      	ldr	r6, [r3, #0]
 800efc4:	6862      	ldr	r2, [r4, #4]
 800efc6:	2100      	movs	r1, #0
 800efc8:	4630      	mov	r0, r6
 800efca:	f7f1 f911 	bl	80001f0 <memchr>
 800efce:	b108      	cbz	r0, 800efd4 <_printf_i+0x1e4>
 800efd0:	1b80      	subs	r0, r0, r6
 800efd2:	6060      	str	r0, [r4, #4]
 800efd4:	6863      	ldr	r3, [r4, #4]
 800efd6:	6123      	str	r3, [r4, #16]
 800efd8:	2300      	movs	r3, #0
 800efda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efde:	e7aa      	b.n	800ef36 <_printf_i+0x146>
 800efe0:	6923      	ldr	r3, [r4, #16]
 800efe2:	4632      	mov	r2, r6
 800efe4:	4649      	mov	r1, r9
 800efe6:	4640      	mov	r0, r8
 800efe8:	47d0      	blx	sl
 800efea:	3001      	adds	r0, #1
 800efec:	d0ad      	beq.n	800ef4a <_printf_i+0x15a>
 800efee:	6823      	ldr	r3, [r4, #0]
 800eff0:	079b      	lsls	r3, r3, #30
 800eff2:	d413      	bmi.n	800f01c <_printf_i+0x22c>
 800eff4:	68e0      	ldr	r0, [r4, #12]
 800eff6:	9b03      	ldr	r3, [sp, #12]
 800eff8:	4298      	cmp	r0, r3
 800effa:	bfb8      	it	lt
 800effc:	4618      	movlt	r0, r3
 800effe:	e7a6      	b.n	800ef4e <_printf_i+0x15e>
 800f000:	2301      	movs	r3, #1
 800f002:	4632      	mov	r2, r6
 800f004:	4649      	mov	r1, r9
 800f006:	4640      	mov	r0, r8
 800f008:	47d0      	blx	sl
 800f00a:	3001      	adds	r0, #1
 800f00c:	d09d      	beq.n	800ef4a <_printf_i+0x15a>
 800f00e:	3501      	adds	r5, #1
 800f010:	68e3      	ldr	r3, [r4, #12]
 800f012:	9903      	ldr	r1, [sp, #12]
 800f014:	1a5b      	subs	r3, r3, r1
 800f016:	42ab      	cmp	r3, r5
 800f018:	dcf2      	bgt.n	800f000 <_printf_i+0x210>
 800f01a:	e7eb      	b.n	800eff4 <_printf_i+0x204>
 800f01c:	2500      	movs	r5, #0
 800f01e:	f104 0619 	add.w	r6, r4, #25
 800f022:	e7f5      	b.n	800f010 <_printf_i+0x220>
 800f024:	0806cf2d 	.word	0x0806cf2d
 800f028:	0806cf3e 	.word	0x0806cf3e

0800f02c <_scanf_float>:
 800f02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f030:	b087      	sub	sp, #28
 800f032:	4691      	mov	r9, r2
 800f034:	9303      	str	r3, [sp, #12]
 800f036:	688b      	ldr	r3, [r1, #8]
 800f038:	1e5a      	subs	r2, r3, #1
 800f03a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f03e:	bf81      	itttt	hi
 800f040:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f044:	eb03 0b05 	addhi.w	fp, r3, r5
 800f048:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f04c:	608b      	strhi	r3, [r1, #8]
 800f04e:	680b      	ldr	r3, [r1, #0]
 800f050:	460a      	mov	r2, r1
 800f052:	f04f 0500 	mov.w	r5, #0
 800f056:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f05a:	f842 3b1c 	str.w	r3, [r2], #28
 800f05e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f062:	4680      	mov	r8, r0
 800f064:	460c      	mov	r4, r1
 800f066:	bf98      	it	ls
 800f068:	f04f 0b00 	movls.w	fp, #0
 800f06c:	9201      	str	r2, [sp, #4]
 800f06e:	4616      	mov	r6, r2
 800f070:	46aa      	mov	sl, r5
 800f072:	462f      	mov	r7, r5
 800f074:	9502      	str	r5, [sp, #8]
 800f076:	68a2      	ldr	r2, [r4, #8]
 800f078:	b15a      	cbz	r2, 800f092 <_scanf_float+0x66>
 800f07a:	f8d9 3000 	ldr.w	r3, [r9]
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	2b4e      	cmp	r3, #78	@ 0x4e
 800f082:	d863      	bhi.n	800f14c <_scanf_float+0x120>
 800f084:	2b40      	cmp	r3, #64	@ 0x40
 800f086:	d83b      	bhi.n	800f100 <_scanf_float+0xd4>
 800f088:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f08c:	b2c8      	uxtb	r0, r1
 800f08e:	280e      	cmp	r0, #14
 800f090:	d939      	bls.n	800f106 <_scanf_float+0xda>
 800f092:	b11f      	cbz	r7, 800f09c <_scanf_float+0x70>
 800f094:	6823      	ldr	r3, [r4, #0]
 800f096:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f09a:	6023      	str	r3, [r4, #0]
 800f09c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f0a0:	f1ba 0f01 	cmp.w	sl, #1
 800f0a4:	f200 8114 	bhi.w	800f2d0 <_scanf_float+0x2a4>
 800f0a8:	9b01      	ldr	r3, [sp, #4]
 800f0aa:	429e      	cmp	r6, r3
 800f0ac:	f200 8105 	bhi.w	800f2ba <_scanf_float+0x28e>
 800f0b0:	2001      	movs	r0, #1
 800f0b2:	b007      	add	sp, #28
 800f0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f0bc:	2a0d      	cmp	r2, #13
 800f0be:	d8e8      	bhi.n	800f092 <_scanf_float+0x66>
 800f0c0:	a101      	add	r1, pc, #4	@ (adr r1, 800f0c8 <_scanf_float+0x9c>)
 800f0c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f0c6:	bf00      	nop
 800f0c8:	0800f211 	.word	0x0800f211
 800f0cc:	0800f093 	.word	0x0800f093
 800f0d0:	0800f093 	.word	0x0800f093
 800f0d4:	0800f093 	.word	0x0800f093
 800f0d8:	0800f26d 	.word	0x0800f26d
 800f0dc:	0800f247 	.word	0x0800f247
 800f0e0:	0800f093 	.word	0x0800f093
 800f0e4:	0800f093 	.word	0x0800f093
 800f0e8:	0800f21f 	.word	0x0800f21f
 800f0ec:	0800f093 	.word	0x0800f093
 800f0f0:	0800f093 	.word	0x0800f093
 800f0f4:	0800f093 	.word	0x0800f093
 800f0f8:	0800f093 	.word	0x0800f093
 800f0fc:	0800f1db 	.word	0x0800f1db
 800f100:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f104:	e7da      	b.n	800f0bc <_scanf_float+0x90>
 800f106:	290e      	cmp	r1, #14
 800f108:	d8c3      	bhi.n	800f092 <_scanf_float+0x66>
 800f10a:	a001      	add	r0, pc, #4	@ (adr r0, 800f110 <_scanf_float+0xe4>)
 800f10c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f110:	0800f1cb 	.word	0x0800f1cb
 800f114:	0800f093 	.word	0x0800f093
 800f118:	0800f1cb 	.word	0x0800f1cb
 800f11c:	0800f25b 	.word	0x0800f25b
 800f120:	0800f093 	.word	0x0800f093
 800f124:	0800f16d 	.word	0x0800f16d
 800f128:	0800f1b1 	.word	0x0800f1b1
 800f12c:	0800f1b1 	.word	0x0800f1b1
 800f130:	0800f1b1 	.word	0x0800f1b1
 800f134:	0800f1b1 	.word	0x0800f1b1
 800f138:	0800f1b1 	.word	0x0800f1b1
 800f13c:	0800f1b1 	.word	0x0800f1b1
 800f140:	0800f1b1 	.word	0x0800f1b1
 800f144:	0800f1b1 	.word	0x0800f1b1
 800f148:	0800f1b1 	.word	0x0800f1b1
 800f14c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f14e:	d809      	bhi.n	800f164 <_scanf_float+0x138>
 800f150:	2b60      	cmp	r3, #96	@ 0x60
 800f152:	d8b1      	bhi.n	800f0b8 <_scanf_float+0x8c>
 800f154:	2b54      	cmp	r3, #84	@ 0x54
 800f156:	d07b      	beq.n	800f250 <_scanf_float+0x224>
 800f158:	2b59      	cmp	r3, #89	@ 0x59
 800f15a:	d19a      	bne.n	800f092 <_scanf_float+0x66>
 800f15c:	2d07      	cmp	r5, #7
 800f15e:	d198      	bne.n	800f092 <_scanf_float+0x66>
 800f160:	2508      	movs	r5, #8
 800f162:	e02f      	b.n	800f1c4 <_scanf_float+0x198>
 800f164:	2b74      	cmp	r3, #116	@ 0x74
 800f166:	d073      	beq.n	800f250 <_scanf_float+0x224>
 800f168:	2b79      	cmp	r3, #121	@ 0x79
 800f16a:	e7f6      	b.n	800f15a <_scanf_float+0x12e>
 800f16c:	6821      	ldr	r1, [r4, #0]
 800f16e:	05c8      	lsls	r0, r1, #23
 800f170:	d51e      	bpl.n	800f1b0 <_scanf_float+0x184>
 800f172:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f176:	6021      	str	r1, [r4, #0]
 800f178:	3701      	adds	r7, #1
 800f17a:	f1bb 0f00 	cmp.w	fp, #0
 800f17e:	d003      	beq.n	800f188 <_scanf_float+0x15c>
 800f180:	3201      	adds	r2, #1
 800f182:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f186:	60a2      	str	r2, [r4, #8]
 800f188:	68a3      	ldr	r3, [r4, #8]
 800f18a:	3b01      	subs	r3, #1
 800f18c:	60a3      	str	r3, [r4, #8]
 800f18e:	6923      	ldr	r3, [r4, #16]
 800f190:	3301      	adds	r3, #1
 800f192:	6123      	str	r3, [r4, #16]
 800f194:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f198:	3b01      	subs	r3, #1
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	f8c9 3004 	str.w	r3, [r9, #4]
 800f1a0:	f340 8082 	ble.w	800f2a8 <_scanf_float+0x27c>
 800f1a4:	f8d9 3000 	ldr.w	r3, [r9]
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	f8c9 3000 	str.w	r3, [r9]
 800f1ae:	e762      	b.n	800f076 <_scanf_float+0x4a>
 800f1b0:	eb1a 0105 	adds.w	r1, sl, r5
 800f1b4:	f47f af6d 	bne.w	800f092 <_scanf_float+0x66>
 800f1b8:	6822      	ldr	r2, [r4, #0]
 800f1ba:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f1be:	6022      	str	r2, [r4, #0]
 800f1c0:	460d      	mov	r5, r1
 800f1c2:	468a      	mov	sl, r1
 800f1c4:	f806 3b01 	strb.w	r3, [r6], #1
 800f1c8:	e7de      	b.n	800f188 <_scanf_float+0x15c>
 800f1ca:	6822      	ldr	r2, [r4, #0]
 800f1cc:	0610      	lsls	r0, r2, #24
 800f1ce:	f57f af60 	bpl.w	800f092 <_scanf_float+0x66>
 800f1d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f1d6:	6022      	str	r2, [r4, #0]
 800f1d8:	e7f4      	b.n	800f1c4 <_scanf_float+0x198>
 800f1da:	f1ba 0f00 	cmp.w	sl, #0
 800f1de:	d10c      	bne.n	800f1fa <_scanf_float+0x1ce>
 800f1e0:	b977      	cbnz	r7, 800f200 <_scanf_float+0x1d4>
 800f1e2:	6822      	ldr	r2, [r4, #0]
 800f1e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f1e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f1ec:	d108      	bne.n	800f200 <_scanf_float+0x1d4>
 800f1ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f1f2:	6022      	str	r2, [r4, #0]
 800f1f4:	f04f 0a01 	mov.w	sl, #1
 800f1f8:	e7e4      	b.n	800f1c4 <_scanf_float+0x198>
 800f1fa:	f1ba 0f02 	cmp.w	sl, #2
 800f1fe:	d050      	beq.n	800f2a2 <_scanf_float+0x276>
 800f200:	2d01      	cmp	r5, #1
 800f202:	d002      	beq.n	800f20a <_scanf_float+0x1de>
 800f204:	2d04      	cmp	r5, #4
 800f206:	f47f af44 	bne.w	800f092 <_scanf_float+0x66>
 800f20a:	3501      	adds	r5, #1
 800f20c:	b2ed      	uxtb	r5, r5
 800f20e:	e7d9      	b.n	800f1c4 <_scanf_float+0x198>
 800f210:	f1ba 0f01 	cmp.w	sl, #1
 800f214:	f47f af3d 	bne.w	800f092 <_scanf_float+0x66>
 800f218:	f04f 0a02 	mov.w	sl, #2
 800f21c:	e7d2      	b.n	800f1c4 <_scanf_float+0x198>
 800f21e:	b975      	cbnz	r5, 800f23e <_scanf_float+0x212>
 800f220:	2f00      	cmp	r7, #0
 800f222:	f47f af37 	bne.w	800f094 <_scanf_float+0x68>
 800f226:	6822      	ldr	r2, [r4, #0]
 800f228:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f22c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f230:	f040 8103 	bne.w	800f43a <_scanf_float+0x40e>
 800f234:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f238:	6022      	str	r2, [r4, #0]
 800f23a:	2501      	movs	r5, #1
 800f23c:	e7c2      	b.n	800f1c4 <_scanf_float+0x198>
 800f23e:	2d03      	cmp	r5, #3
 800f240:	d0e3      	beq.n	800f20a <_scanf_float+0x1de>
 800f242:	2d05      	cmp	r5, #5
 800f244:	e7df      	b.n	800f206 <_scanf_float+0x1da>
 800f246:	2d02      	cmp	r5, #2
 800f248:	f47f af23 	bne.w	800f092 <_scanf_float+0x66>
 800f24c:	2503      	movs	r5, #3
 800f24e:	e7b9      	b.n	800f1c4 <_scanf_float+0x198>
 800f250:	2d06      	cmp	r5, #6
 800f252:	f47f af1e 	bne.w	800f092 <_scanf_float+0x66>
 800f256:	2507      	movs	r5, #7
 800f258:	e7b4      	b.n	800f1c4 <_scanf_float+0x198>
 800f25a:	6822      	ldr	r2, [r4, #0]
 800f25c:	0591      	lsls	r1, r2, #22
 800f25e:	f57f af18 	bpl.w	800f092 <_scanf_float+0x66>
 800f262:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f266:	6022      	str	r2, [r4, #0]
 800f268:	9702      	str	r7, [sp, #8]
 800f26a:	e7ab      	b.n	800f1c4 <_scanf_float+0x198>
 800f26c:	6822      	ldr	r2, [r4, #0]
 800f26e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f272:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f276:	d005      	beq.n	800f284 <_scanf_float+0x258>
 800f278:	0550      	lsls	r0, r2, #21
 800f27a:	f57f af0a 	bpl.w	800f092 <_scanf_float+0x66>
 800f27e:	2f00      	cmp	r7, #0
 800f280:	f000 80db 	beq.w	800f43a <_scanf_float+0x40e>
 800f284:	0591      	lsls	r1, r2, #22
 800f286:	bf58      	it	pl
 800f288:	9902      	ldrpl	r1, [sp, #8]
 800f28a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f28e:	bf58      	it	pl
 800f290:	1a79      	subpl	r1, r7, r1
 800f292:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f296:	bf58      	it	pl
 800f298:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f29c:	6022      	str	r2, [r4, #0]
 800f29e:	2700      	movs	r7, #0
 800f2a0:	e790      	b.n	800f1c4 <_scanf_float+0x198>
 800f2a2:	f04f 0a03 	mov.w	sl, #3
 800f2a6:	e78d      	b.n	800f1c4 <_scanf_float+0x198>
 800f2a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f2ac:	4649      	mov	r1, r9
 800f2ae:	4640      	mov	r0, r8
 800f2b0:	4798      	blx	r3
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	f43f aedf 	beq.w	800f076 <_scanf_float+0x4a>
 800f2b8:	e6eb      	b.n	800f092 <_scanf_float+0x66>
 800f2ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f2c2:	464a      	mov	r2, r9
 800f2c4:	4640      	mov	r0, r8
 800f2c6:	4798      	blx	r3
 800f2c8:	6923      	ldr	r3, [r4, #16]
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	6123      	str	r3, [r4, #16]
 800f2ce:	e6eb      	b.n	800f0a8 <_scanf_float+0x7c>
 800f2d0:	1e6b      	subs	r3, r5, #1
 800f2d2:	2b06      	cmp	r3, #6
 800f2d4:	d824      	bhi.n	800f320 <_scanf_float+0x2f4>
 800f2d6:	2d02      	cmp	r5, #2
 800f2d8:	d836      	bhi.n	800f348 <_scanf_float+0x31c>
 800f2da:	9b01      	ldr	r3, [sp, #4]
 800f2dc:	429e      	cmp	r6, r3
 800f2de:	f67f aee7 	bls.w	800f0b0 <_scanf_float+0x84>
 800f2e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f2ea:	464a      	mov	r2, r9
 800f2ec:	4640      	mov	r0, r8
 800f2ee:	4798      	blx	r3
 800f2f0:	6923      	ldr	r3, [r4, #16]
 800f2f2:	3b01      	subs	r3, #1
 800f2f4:	6123      	str	r3, [r4, #16]
 800f2f6:	e7f0      	b.n	800f2da <_scanf_float+0x2ae>
 800f2f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f300:	464a      	mov	r2, r9
 800f302:	4640      	mov	r0, r8
 800f304:	4798      	blx	r3
 800f306:	6923      	ldr	r3, [r4, #16]
 800f308:	3b01      	subs	r3, #1
 800f30a:	6123      	str	r3, [r4, #16]
 800f30c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f310:	fa5f fa8a 	uxtb.w	sl, sl
 800f314:	f1ba 0f02 	cmp.w	sl, #2
 800f318:	d1ee      	bne.n	800f2f8 <_scanf_float+0x2cc>
 800f31a:	3d03      	subs	r5, #3
 800f31c:	b2ed      	uxtb	r5, r5
 800f31e:	1b76      	subs	r6, r6, r5
 800f320:	6823      	ldr	r3, [r4, #0]
 800f322:	05da      	lsls	r2, r3, #23
 800f324:	d530      	bpl.n	800f388 <_scanf_float+0x35c>
 800f326:	055b      	lsls	r3, r3, #21
 800f328:	d511      	bpl.n	800f34e <_scanf_float+0x322>
 800f32a:	9b01      	ldr	r3, [sp, #4]
 800f32c:	429e      	cmp	r6, r3
 800f32e:	f67f aebf 	bls.w	800f0b0 <_scanf_float+0x84>
 800f332:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f336:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f33a:	464a      	mov	r2, r9
 800f33c:	4640      	mov	r0, r8
 800f33e:	4798      	blx	r3
 800f340:	6923      	ldr	r3, [r4, #16]
 800f342:	3b01      	subs	r3, #1
 800f344:	6123      	str	r3, [r4, #16]
 800f346:	e7f0      	b.n	800f32a <_scanf_float+0x2fe>
 800f348:	46aa      	mov	sl, r5
 800f34a:	46b3      	mov	fp, r6
 800f34c:	e7de      	b.n	800f30c <_scanf_float+0x2e0>
 800f34e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f352:	6923      	ldr	r3, [r4, #16]
 800f354:	2965      	cmp	r1, #101	@ 0x65
 800f356:	f103 33ff 	add.w	r3, r3, #4294967295
 800f35a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f35e:	6123      	str	r3, [r4, #16]
 800f360:	d00c      	beq.n	800f37c <_scanf_float+0x350>
 800f362:	2945      	cmp	r1, #69	@ 0x45
 800f364:	d00a      	beq.n	800f37c <_scanf_float+0x350>
 800f366:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f36a:	464a      	mov	r2, r9
 800f36c:	4640      	mov	r0, r8
 800f36e:	4798      	blx	r3
 800f370:	6923      	ldr	r3, [r4, #16]
 800f372:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f376:	3b01      	subs	r3, #1
 800f378:	1eb5      	subs	r5, r6, #2
 800f37a:	6123      	str	r3, [r4, #16]
 800f37c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f380:	464a      	mov	r2, r9
 800f382:	4640      	mov	r0, r8
 800f384:	4798      	blx	r3
 800f386:	462e      	mov	r6, r5
 800f388:	6822      	ldr	r2, [r4, #0]
 800f38a:	f012 0210 	ands.w	r2, r2, #16
 800f38e:	d001      	beq.n	800f394 <_scanf_float+0x368>
 800f390:	2000      	movs	r0, #0
 800f392:	e68e      	b.n	800f0b2 <_scanf_float+0x86>
 800f394:	7032      	strb	r2, [r6, #0]
 800f396:	6823      	ldr	r3, [r4, #0]
 800f398:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f39c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f3a0:	d125      	bne.n	800f3ee <_scanf_float+0x3c2>
 800f3a2:	9b02      	ldr	r3, [sp, #8]
 800f3a4:	429f      	cmp	r7, r3
 800f3a6:	d00a      	beq.n	800f3be <_scanf_float+0x392>
 800f3a8:	1bda      	subs	r2, r3, r7
 800f3aa:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f3ae:	429e      	cmp	r6, r3
 800f3b0:	bf28      	it	cs
 800f3b2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f3b6:	4922      	ldr	r1, [pc, #136]	@ (800f440 <_scanf_float+0x414>)
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f000 f93d 	bl	800f638 <siprintf>
 800f3be:	9901      	ldr	r1, [sp, #4]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	4640      	mov	r0, r8
 800f3c4:	f7ff f944 	bl	800e650 <_strtod_r>
 800f3c8:	9b03      	ldr	r3, [sp, #12]
 800f3ca:	6821      	ldr	r1, [r4, #0]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f011 0f02 	tst.w	r1, #2
 800f3d2:	ec57 6b10 	vmov	r6, r7, d0
 800f3d6:	f103 0204 	add.w	r2, r3, #4
 800f3da:	d015      	beq.n	800f408 <_scanf_float+0x3dc>
 800f3dc:	9903      	ldr	r1, [sp, #12]
 800f3de:	600a      	str	r2, [r1, #0]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	e9c3 6700 	strd	r6, r7, [r3]
 800f3e6:	68e3      	ldr	r3, [r4, #12]
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	60e3      	str	r3, [r4, #12]
 800f3ec:	e7d0      	b.n	800f390 <_scanf_float+0x364>
 800f3ee:	9b04      	ldr	r3, [sp, #16]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d0e4      	beq.n	800f3be <_scanf_float+0x392>
 800f3f4:	9905      	ldr	r1, [sp, #20]
 800f3f6:	230a      	movs	r3, #10
 800f3f8:	3101      	adds	r1, #1
 800f3fa:	4640      	mov	r0, r8
 800f3fc:	f7ff f9b4 	bl	800e768 <_strtol_r>
 800f400:	9b04      	ldr	r3, [sp, #16]
 800f402:	9e05      	ldr	r6, [sp, #20]
 800f404:	1ac2      	subs	r2, r0, r3
 800f406:	e7d0      	b.n	800f3aa <_scanf_float+0x37e>
 800f408:	f011 0f04 	tst.w	r1, #4
 800f40c:	9903      	ldr	r1, [sp, #12]
 800f40e:	600a      	str	r2, [r1, #0]
 800f410:	d1e6      	bne.n	800f3e0 <_scanf_float+0x3b4>
 800f412:	681d      	ldr	r5, [r3, #0]
 800f414:	4632      	mov	r2, r6
 800f416:	463b      	mov	r3, r7
 800f418:	4630      	mov	r0, r6
 800f41a:	4639      	mov	r1, r7
 800f41c:	f7f1 fb96 	bl	8000b4c <__aeabi_dcmpun>
 800f420:	b128      	cbz	r0, 800f42e <_scanf_float+0x402>
 800f422:	4808      	ldr	r0, [pc, #32]	@ (800f444 <_scanf_float+0x418>)
 800f424:	f000 fad8 	bl	800f9d8 <nanf>
 800f428:	ed85 0a00 	vstr	s0, [r5]
 800f42c:	e7db      	b.n	800f3e6 <_scanf_float+0x3ba>
 800f42e:	4630      	mov	r0, r6
 800f430:	4639      	mov	r1, r7
 800f432:	f7f1 fbe9 	bl	8000c08 <__aeabi_d2f>
 800f436:	6028      	str	r0, [r5, #0]
 800f438:	e7d5      	b.n	800f3e6 <_scanf_float+0x3ba>
 800f43a:	2700      	movs	r7, #0
 800f43c:	e62e      	b.n	800f09c <_scanf_float+0x70>
 800f43e:	bf00      	nop
 800f440:	0806cf4f 	.word	0x0806cf4f
 800f444:	0806cff1 	.word	0x0806cff1

0800f448 <std>:
 800f448:	2300      	movs	r3, #0
 800f44a:	b510      	push	{r4, lr}
 800f44c:	4604      	mov	r4, r0
 800f44e:	e9c0 3300 	strd	r3, r3, [r0]
 800f452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f456:	6083      	str	r3, [r0, #8]
 800f458:	8181      	strh	r1, [r0, #12]
 800f45a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f45c:	81c2      	strh	r2, [r0, #14]
 800f45e:	6183      	str	r3, [r0, #24]
 800f460:	4619      	mov	r1, r3
 800f462:	2208      	movs	r2, #8
 800f464:	305c      	adds	r0, #92	@ 0x5c
 800f466:	f000 f97a 	bl	800f75e <memset>
 800f46a:	4b0d      	ldr	r3, [pc, #52]	@ (800f4a0 <std+0x58>)
 800f46c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f46e:	4b0d      	ldr	r3, [pc, #52]	@ (800f4a4 <std+0x5c>)
 800f470:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f472:	4b0d      	ldr	r3, [pc, #52]	@ (800f4a8 <std+0x60>)
 800f474:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f476:	4b0d      	ldr	r3, [pc, #52]	@ (800f4ac <std+0x64>)
 800f478:	6323      	str	r3, [r4, #48]	@ 0x30
 800f47a:	4b0d      	ldr	r3, [pc, #52]	@ (800f4b0 <std+0x68>)
 800f47c:	6224      	str	r4, [r4, #32]
 800f47e:	429c      	cmp	r4, r3
 800f480:	d006      	beq.n	800f490 <std+0x48>
 800f482:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f486:	4294      	cmp	r4, r2
 800f488:	d002      	beq.n	800f490 <std+0x48>
 800f48a:	33d0      	adds	r3, #208	@ 0xd0
 800f48c:	429c      	cmp	r4, r3
 800f48e:	d105      	bne.n	800f49c <std+0x54>
 800f490:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f498:	f000 ba82 	b.w	800f9a0 <__retarget_lock_init_recursive>
 800f49c:	bd10      	pop	{r4, pc}
 800f49e:	bf00      	nop
 800f4a0:	0800f6d5 	.word	0x0800f6d5
 800f4a4:	0800f6fb 	.word	0x0800f6fb
 800f4a8:	0800f733 	.word	0x0800f733
 800f4ac:	0800f757 	.word	0x0800f757
 800f4b0:	2001a1d0 	.word	0x2001a1d0

0800f4b4 <stdio_exit_handler>:
 800f4b4:	4a02      	ldr	r2, [pc, #8]	@ (800f4c0 <stdio_exit_handler+0xc>)
 800f4b6:	4903      	ldr	r1, [pc, #12]	@ (800f4c4 <stdio_exit_handler+0x10>)
 800f4b8:	4803      	ldr	r0, [pc, #12]	@ (800f4c8 <stdio_exit_handler+0x14>)
 800f4ba:	f000 b869 	b.w	800f590 <_fwalk_sglue>
 800f4be:	bf00      	nop
 800f4c0:	20000108 	.word	0x20000108
 800f4c4:	080122c9 	.word	0x080122c9
 800f4c8:	20000284 	.word	0x20000284

0800f4cc <cleanup_stdio>:
 800f4cc:	6841      	ldr	r1, [r0, #4]
 800f4ce:	4b0c      	ldr	r3, [pc, #48]	@ (800f500 <cleanup_stdio+0x34>)
 800f4d0:	4299      	cmp	r1, r3
 800f4d2:	b510      	push	{r4, lr}
 800f4d4:	4604      	mov	r4, r0
 800f4d6:	d001      	beq.n	800f4dc <cleanup_stdio+0x10>
 800f4d8:	f002 fef6 	bl	80122c8 <_fflush_r>
 800f4dc:	68a1      	ldr	r1, [r4, #8]
 800f4de:	4b09      	ldr	r3, [pc, #36]	@ (800f504 <cleanup_stdio+0x38>)
 800f4e0:	4299      	cmp	r1, r3
 800f4e2:	d002      	beq.n	800f4ea <cleanup_stdio+0x1e>
 800f4e4:	4620      	mov	r0, r4
 800f4e6:	f002 feef 	bl	80122c8 <_fflush_r>
 800f4ea:	68e1      	ldr	r1, [r4, #12]
 800f4ec:	4b06      	ldr	r3, [pc, #24]	@ (800f508 <cleanup_stdio+0x3c>)
 800f4ee:	4299      	cmp	r1, r3
 800f4f0:	d004      	beq.n	800f4fc <cleanup_stdio+0x30>
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4f8:	f002 bee6 	b.w	80122c8 <_fflush_r>
 800f4fc:	bd10      	pop	{r4, pc}
 800f4fe:	bf00      	nop
 800f500:	2001a1d0 	.word	0x2001a1d0
 800f504:	2001a238 	.word	0x2001a238
 800f508:	2001a2a0 	.word	0x2001a2a0

0800f50c <global_stdio_init.part.0>:
 800f50c:	b510      	push	{r4, lr}
 800f50e:	4b0b      	ldr	r3, [pc, #44]	@ (800f53c <global_stdio_init.part.0+0x30>)
 800f510:	4c0b      	ldr	r4, [pc, #44]	@ (800f540 <global_stdio_init.part.0+0x34>)
 800f512:	4a0c      	ldr	r2, [pc, #48]	@ (800f544 <global_stdio_init.part.0+0x38>)
 800f514:	601a      	str	r2, [r3, #0]
 800f516:	4620      	mov	r0, r4
 800f518:	2200      	movs	r2, #0
 800f51a:	2104      	movs	r1, #4
 800f51c:	f7ff ff94 	bl	800f448 <std>
 800f520:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f524:	2201      	movs	r2, #1
 800f526:	2109      	movs	r1, #9
 800f528:	f7ff ff8e 	bl	800f448 <std>
 800f52c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f530:	2202      	movs	r2, #2
 800f532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f536:	2112      	movs	r1, #18
 800f538:	f7ff bf86 	b.w	800f448 <std>
 800f53c:	2001a308 	.word	0x2001a308
 800f540:	2001a1d0 	.word	0x2001a1d0
 800f544:	0800f4b5 	.word	0x0800f4b5

0800f548 <__sfp_lock_acquire>:
 800f548:	4801      	ldr	r0, [pc, #4]	@ (800f550 <__sfp_lock_acquire+0x8>)
 800f54a:	f000 ba2a 	b.w	800f9a2 <__retarget_lock_acquire_recursive>
 800f54e:	bf00      	nop
 800f550:	2001a311 	.word	0x2001a311

0800f554 <__sfp_lock_release>:
 800f554:	4801      	ldr	r0, [pc, #4]	@ (800f55c <__sfp_lock_release+0x8>)
 800f556:	f000 ba25 	b.w	800f9a4 <__retarget_lock_release_recursive>
 800f55a:	bf00      	nop
 800f55c:	2001a311 	.word	0x2001a311

0800f560 <__sinit>:
 800f560:	b510      	push	{r4, lr}
 800f562:	4604      	mov	r4, r0
 800f564:	f7ff fff0 	bl	800f548 <__sfp_lock_acquire>
 800f568:	6a23      	ldr	r3, [r4, #32]
 800f56a:	b11b      	cbz	r3, 800f574 <__sinit+0x14>
 800f56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f570:	f7ff bff0 	b.w	800f554 <__sfp_lock_release>
 800f574:	4b04      	ldr	r3, [pc, #16]	@ (800f588 <__sinit+0x28>)
 800f576:	6223      	str	r3, [r4, #32]
 800f578:	4b04      	ldr	r3, [pc, #16]	@ (800f58c <__sinit+0x2c>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d1f5      	bne.n	800f56c <__sinit+0xc>
 800f580:	f7ff ffc4 	bl	800f50c <global_stdio_init.part.0>
 800f584:	e7f2      	b.n	800f56c <__sinit+0xc>
 800f586:	bf00      	nop
 800f588:	0800f4cd 	.word	0x0800f4cd
 800f58c:	2001a308 	.word	0x2001a308

0800f590 <_fwalk_sglue>:
 800f590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f594:	4607      	mov	r7, r0
 800f596:	4688      	mov	r8, r1
 800f598:	4614      	mov	r4, r2
 800f59a:	2600      	movs	r6, #0
 800f59c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5a0:	f1b9 0901 	subs.w	r9, r9, #1
 800f5a4:	d505      	bpl.n	800f5b2 <_fwalk_sglue+0x22>
 800f5a6:	6824      	ldr	r4, [r4, #0]
 800f5a8:	2c00      	cmp	r4, #0
 800f5aa:	d1f7      	bne.n	800f59c <_fwalk_sglue+0xc>
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5b2:	89ab      	ldrh	r3, [r5, #12]
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d907      	bls.n	800f5c8 <_fwalk_sglue+0x38>
 800f5b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5bc:	3301      	adds	r3, #1
 800f5be:	d003      	beq.n	800f5c8 <_fwalk_sglue+0x38>
 800f5c0:	4629      	mov	r1, r5
 800f5c2:	4638      	mov	r0, r7
 800f5c4:	47c0      	blx	r8
 800f5c6:	4306      	orrs	r6, r0
 800f5c8:	3568      	adds	r5, #104	@ 0x68
 800f5ca:	e7e9      	b.n	800f5a0 <_fwalk_sglue+0x10>

0800f5cc <sniprintf>:
 800f5cc:	b40c      	push	{r2, r3}
 800f5ce:	b530      	push	{r4, r5, lr}
 800f5d0:	4b18      	ldr	r3, [pc, #96]	@ (800f634 <sniprintf+0x68>)
 800f5d2:	1e0c      	subs	r4, r1, #0
 800f5d4:	681d      	ldr	r5, [r3, #0]
 800f5d6:	b09d      	sub	sp, #116	@ 0x74
 800f5d8:	da08      	bge.n	800f5ec <sniprintf+0x20>
 800f5da:	238b      	movs	r3, #139	@ 0x8b
 800f5dc:	602b      	str	r3, [r5, #0]
 800f5de:	f04f 30ff 	mov.w	r0, #4294967295
 800f5e2:	b01d      	add	sp, #116	@ 0x74
 800f5e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5e8:	b002      	add	sp, #8
 800f5ea:	4770      	bx	lr
 800f5ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f5f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f5f4:	f04f 0300 	mov.w	r3, #0
 800f5f8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f5fa:	bf14      	ite	ne
 800f5fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f600:	4623      	moveq	r3, r4
 800f602:	9304      	str	r3, [sp, #16]
 800f604:	9307      	str	r3, [sp, #28]
 800f606:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f60a:	9002      	str	r0, [sp, #8]
 800f60c:	9006      	str	r0, [sp, #24]
 800f60e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f612:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f614:	ab21      	add	r3, sp, #132	@ 0x84
 800f616:	a902      	add	r1, sp, #8
 800f618:	4628      	mov	r0, r5
 800f61a:	9301      	str	r3, [sp, #4]
 800f61c:	f002 f9b6 	bl	801198c <_svfiprintf_r>
 800f620:	1c43      	adds	r3, r0, #1
 800f622:	bfbc      	itt	lt
 800f624:	238b      	movlt	r3, #139	@ 0x8b
 800f626:	602b      	strlt	r3, [r5, #0]
 800f628:	2c00      	cmp	r4, #0
 800f62a:	d0da      	beq.n	800f5e2 <sniprintf+0x16>
 800f62c:	9b02      	ldr	r3, [sp, #8]
 800f62e:	2200      	movs	r2, #0
 800f630:	701a      	strb	r2, [r3, #0]
 800f632:	e7d6      	b.n	800f5e2 <sniprintf+0x16>
 800f634:	20000280 	.word	0x20000280

0800f638 <siprintf>:
 800f638:	b40e      	push	{r1, r2, r3}
 800f63a:	b510      	push	{r4, lr}
 800f63c:	b09d      	sub	sp, #116	@ 0x74
 800f63e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f640:	9002      	str	r0, [sp, #8]
 800f642:	9006      	str	r0, [sp, #24]
 800f644:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f648:	480a      	ldr	r0, [pc, #40]	@ (800f674 <siprintf+0x3c>)
 800f64a:	9107      	str	r1, [sp, #28]
 800f64c:	9104      	str	r1, [sp, #16]
 800f64e:	490a      	ldr	r1, [pc, #40]	@ (800f678 <siprintf+0x40>)
 800f650:	f853 2b04 	ldr.w	r2, [r3], #4
 800f654:	9105      	str	r1, [sp, #20]
 800f656:	2400      	movs	r4, #0
 800f658:	a902      	add	r1, sp, #8
 800f65a:	6800      	ldr	r0, [r0, #0]
 800f65c:	9301      	str	r3, [sp, #4]
 800f65e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f660:	f002 f994 	bl	801198c <_svfiprintf_r>
 800f664:	9b02      	ldr	r3, [sp, #8]
 800f666:	701c      	strb	r4, [r3, #0]
 800f668:	b01d      	add	sp, #116	@ 0x74
 800f66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f66e:	b003      	add	sp, #12
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop
 800f674:	20000280 	.word	0x20000280
 800f678:	ffff0208 	.word	0xffff0208

0800f67c <siscanf>:
 800f67c:	b40e      	push	{r1, r2, r3}
 800f67e:	b570      	push	{r4, r5, r6, lr}
 800f680:	b09d      	sub	sp, #116	@ 0x74
 800f682:	ac21      	add	r4, sp, #132	@ 0x84
 800f684:	2500      	movs	r5, #0
 800f686:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f68a:	f854 6b04 	ldr.w	r6, [r4], #4
 800f68e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f692:	951b      	str	r5, [sp, #108]	@ 0x6c
 800f694:	9002      	str	r0, [sp, #8]
 800f696:	9006      	str	r0, [sp, #24]
 800f698:	f7f0 fdfa 	bl	8000290 <strlen>
 800f69c:	4b0b      	ldr	r3, [pc, #44]	@ (800f6cc <siscanf+0x50>)
 800f69e:	9003      	str	r0, [sp, #12]
 800f6a0:	9007      	str	r0, [sp, #28]
 800f6a2:	480b      	ldr	r0, [pc, #44]	@ (800f6d0 <siscanf+0x54>)
 800f6a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f6aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f6ae:	4632      	mov	r2, r6
 800f6b0:	4623      	mov	r3, r4
 800f6b2:	a902      	add	r1, sp, #8
 800f6b4:	6800      	ldr	r0, [r0, #0]
 800f6b6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800f6b8:	9514      	str	r5, [sp, #80]	@ 0x50
 800f6ba:	9401      	str	r4, [sp, #4]
 800f6bc:	f002 fabc 	bl	8011c38 <__ssvfiscanf_r>
 800f6c0:	b01d      	add	sp, #116	@ 0x74
 800f6c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f6c6:	b003      	add	sp, #12
 800f6c8:	4770      	bx	lr
 800f6ca:	bf00      	nop
 800f6cc:	0800f6f7 	.word	0x0800f6f7
 800f6d0:	20000280 	.word	0x20000280

0800f6d4 <__sread>:
 800f6d4:	b510      	push	{r4, lr}
 800f6d6:	460c      	mov	r4, r1
 800f6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6dc:	f000 f912 	bl	800f904 <_read_r>
 800f6e0:	2800      	cmp	r0, #0
 800f6e2:	bfab      	itete	ge
 800f6e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f6e6:	89a3      	ldrhlt	r3, [r4, #12]
 800f6e8:	181b      	addge	r3, r3, r0
 800f6ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f6ee:	bfac      	ite	ge
 800f6f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f6f2:	81a3      	strhlt	r3, [r4, #12]
 800f6f4:	bd10      	pop	{r4, pc}

0800f6f6 <__seofread>:
 800f6f6:	2000      	movs	r0, #0
 800f6f8:	4770      	bx	lr

0800f6fa <__swrite>:
 800f6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6fe:	461f      	mov	r7, r3
 800f700:	898b      	ldrh	r3, [r1, #12]
 800f702:	05db      	lsls	r3, r3, #23
 800f704:	4605      	mov	r5, r0
 800f706:	460c      	mov	r4, r1
 800f708:	4616      	mov	r6, r2
 800f70a:	d505      	bpl.n	800f718 <__swrite+0x1e>
 800f70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f710:	2302      	movs	r3, #2
 800f712:	2200      	movs	r2, #0
 800f714:	f000 f8e4 	bl	800f8e0 <_lseek_r>
 800f718:	89a3      	ldrh	r3, [r4, #12]
 800f71a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f71e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f722:	81a3      	strh	r3, [r4, #12]
 800f724:	4632      	mov	r2, r6
 800f726:	463b      	mov	r3, r7
 800f728:	4628      	mov	r0, r5
 800f72a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f72e:	f000 b8fb 	b.w	800f928 <_write_r>

0800f732 <__sseek>:
 800f732:	b510      	push	{r4, lr}
 800f734:	460c      	mov	r4, r1
 800f736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f73a:	f000 f8d1 	bl	800f8e0 <_lseek_r>
 800f73e:	1c43      	adds	r3, r0, #1
 800f740:	89a3      	ldrh	r3, [r4, #12]
 800f742:	bf15      	itete	ne
 800f744:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f746:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f74a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f74e:	81a3      	strheq	r3, [r4, #12]
 800f750:	bf18      	it	ne
 800f752:	81a3      	strhne	r3, [r4, #12]
 800f754:	bd10      	pop	{r4, pc}

0800f756 <__sclose>:
 800f756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f75a:	f000 b8b1 	b.w	800f8c0 <_close_r>

0800f75e <memset>:
 800f75e:	4402      	add	r2, r0
 800f760:	4603      	mov	r3, r0
 800f762:	4293      	cmp	r3, r2
 800f764:	d100      	bne.n	800f768 <memset+0xa>
 800f766:	4770      	bx	lr
 800f768:	f803 1b01 	strb.w	r1, [r3], #1
 800f76c:	e7f9      	b.n	800f762 <memset+0x4>

0800f76e <strchr>:
 800f76e:	b2c9      	uxtb	r1, r1
 800f770:	4603      	mov	r3, r0
 800f772:	4618      	mov	r0, r3
 800f774:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f778:	b112      	cbz	r2, 800f780 <strchr+0x12>
 800f77a:	428a      	cmp	r2, r1
 800f77c:	d1f9      	bne.n	800f772 <strchr+0x4>
 800f77e:	4770      	bx	lr
 800f780:	2900      	cmp	r1, #0
 800f782:	bf18      	it	ne
 800f784:	2000      	movne	r0, #0
 800f786:	4770      	bx	lr

0800f788 <strncmp>:
 800f788:	b510      	push	{r4, lr}
 800f78a:	b16a      	cbz	r2, 800f7a8 <strncmp+0x20>
 800f78c:	3901      	subs	r1, #1
 800f78e:	1884      	adds	r4, r0, r2
 800f790:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f794:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f798:	429a      	cmp	r2, r3
 800f79a:	d103      	bne.n	800f7a4 <strncmp+0x1c>
 800f79c:	42a0      	cmp	r0, r4
 800f79e:	d001      	beq.n	800f7a4 <strncmp+0x1c>
 800f7a0:	2a00      	cmp	r2, #0
 800f7a2:	d1f5      	bne.n	800f790 <strncmp+0x8>
 800f7a4:	1ad0      	subs	r0, r2, r3
 800f7a6:	bd10      	pop	{r4, pc}
 800f7a8:	4610      	mov	r0, r2
 800f7aa:	e7fc      	b.n	800f7a6 <strncmp+0x1e>

0800f7ac <strncpy>:
 800f7ac:	b510      	push	{r4, lr}
 800f7ae:	3901      	subs	r1, #1
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	b132      	cbz	r2, 800f7c2 <strncpy+0x16>
 800f7b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f7b8:	f803 4b01 	strb.w	r4, [r3], #1
 800f7bc:	3a01      	subs	r2, #1
 800f7be:	2c00      	cmp	r4, #0
 800f7c0:	d1f7      	bne.n	800f7b2 <strncpy+0x6>
 800f7c2:	441a      	add	r2, r3
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	4293      	cmp	r3, r2
 800f7c8:	d100      	bne.n	800f7cc <strncpy+0x20>
 800f7ca:	bd10      	pop	{r4, pc}
 800f7cc:	f803 1b01 	strb.w	r1, [r3], #1
 800f7d0:	e7f9      	b.n	800f7c6 <strncpy+0x1a>
	...

0800f7d4 <strtok>:
 800f7d4:	4b16      	ldr	r3, [pc, #88]	@ (800f830 <strtok+0x5c>)
 800f7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7da:	681f      	ldr	r7, [r3, #0]
 800f7dc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f7de:	4605      	mov	r5, r0
 800f7e0:	460e      	mov	r6, r1
 800f7e2:	b9ec      	cbnz	r4, 800f820 <strtok+0x4c>
 800f7e4:	2050      	movs	r0, #80	@ 0x50
 800f7e6:	f001 faf7 	bl	8010dd8 <malloc>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	6478      	str	r0, [r7, #68]	@ 0x44
 800f7ee:	b920      	cbnz	r0, 800f7fa <strtok+0x26>
 800f7f0:	4b10      	ldr	r3, [pc, #64]	@ (800f834 <strtok+0x60>)
 800f7f2:	4811      	ldr	r0, [pc, #68]	@ (800f838 <strtok+0x64>)
 800f7f4:	215b      	movs	r1, #91	@ 0x5b
 800f7f6:	f000 f8f5 	bl	800f9e4 <__assert_func>
 800f7fa:	e9c0 4400 	strd	r4, r4, [r0]
 800f7fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f802:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f806:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f80a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f80e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f812:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f816:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f81a:	6184      	str	r4, [r0, #24]
 800f81c:	7704      	strb	r4, [r0, #28]
 800f81e:	6244      	str	r4, [r0, #36]	@ 0x24
 800f820:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f822:	4631      	mov	r1, r6
 800f824:	4628      	mov	r0, r5
 800f826:	2301      	movs	r3, #1
 800f828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f82c:	f000 b806 	b.w	800f83c <__strtok_r>
 800f830:	20000280 	.word	0x20000280
 800f834:	0806ceac 	.word	0x0806ceac
 800f838:	0806cf54 	.word	0x0806cf54

0800f83c <__strtok_r>:
 800f83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f83e:	4604      	mov	r4, r0
 800f840:	b908      	cbnz	r0, 800f846 <__strtok_r+0xa>
 800f842:	6814      	ldr	r4, [r2, #0]
 800f844:	b144      	cbz	r4, 800f858 <__strtok_r+0x1c>
 800f846:	4620      	mov	r0, r4
 800f848:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f84c:	460f      	mov	r7, r1
 800f84e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f852:	b91e      	cbnz	r6, 800f85c <__strtok_r+0x20>
 800f854:	b965      	cbnz	r5, 800f870 <__strtok_r+0x34>
 800f856:	6015      	str	r5, [r2, #0]
 800f858:	2000      	movs	r0, #0
 800f85a:	e005      	b.n	800f868 <__strtok_r+0x2c>
 800f85c:	42b5      	cmp	r5, r6
 800f85e:	d1f6      	bne.n	800f84e <__strtok_r+0x12>
 800f860:	2b00      	cmp	r3, #0
 800f862:	d1f0      	bne.n	800f846 <__strtok_r+0xa>
 800f864:	6014      	str	r4, [r2, #0]
 800f866:	7003      	strb	r3, [r0, #0]
 800f868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f86a:	461c      	mov	r4, r3
 800f86c:	e00c      	b.n	800f888 <__strtok_r+0x4c>
 800f86e:	b91d      	cbnz	r5, 800f878 <__strtok_r+0x3c>
 800f870:	4627      	mov	r7, r4
 800f872:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f876:	460e      	mov	r6, r1
 800f878:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f87c:	42ab      	cmp	r3, r5
 800f87e:	d1f6      	bne.n	800f86e <__strtok_r+0x32>
 800f880:	2b00      	cmp	r3, #0
 800f882:	d0f2      	beq.n	800f86a <__strtok_r+0x2e>
 800f884:	2300      	movs	r3, #0
 800f886:	703b      	strb	r3, [r7, #0]
 800f888:	6014      	str	r4, [r2, #0]
 800f88a:	e7ed      	b.n	800f868 <__strtok_r+0x2c>

0800f88c <strstr>:
 800f88c:	780a      	ldrb	r2, [r1, #0]
 800f88e:	b570      	push	{r4, r5, r6, lr}
 800f890:	b96a      	cbnz	r2, 800f8ae <strstr+0x22>
 800f892:	bd70      	pop	{r4, r5, r6, pc}
 800f894:	429a      	cmp	r2, r3
 800f896:	d109      	bne.n	800f8ac <strstr+0x20>
 800f898:	460c      	mov	r4, r1
 800f89a:	4605      	mov	r5, r0
 800f89c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d0f6      	beq.n	800f892 <strstr+0x6>
 800f8a4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f8a8:	429e      	cmp	r6, r3
 800f8aa:	d0f7      	beq.n	800f89c <strstr+0x10>
 800f8ac:	3001      	adds	r0, #1
 800f8ae:	7803      	ldrb	r3, [r0, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d1ef      	bne.n	800f894 <strstr+0x8>
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	e7ec      	b.n	800f892 <strstr+0x6>

0800f8b8 <_localeconv_r>:
 800f8b8:	4800      	ldr	r0, [pc, #0]	@ (800f8bc <_localeconv_r+0x4>)
 800f8ba:	4770      	bx	lr
 800f8bc:	20000204 	.word	0x20000204

0800f8c0 <_close_r>:
 800f8c0:	b538      	push	{r3, r4, r5, lr}
 800f8c2:	4d06      	ldr	r5, [pc, #24]	@ (800f8dc <_close_r+0x1c>)
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	4604      	mov	r4, r0
 800f8c8:	4608      	mov	r0, r1
 800f8ca:	602b      	str	r3, [r5, #0]
 800f8cc:	f7f3 fcf2 	bl	80032b4 <_close>
 800f8d0:	1c43      	adds	r3, r0, #1
 800f8d2:	d102      	bne.n	800f8da <_close_r+0x1a>
 800f8d4:	682b      	ldr	r3, [r5, #0]
 800f8d6:	b103      	cbz	r3, 800f8da <_close_r+0x1a>
 800f8d8:	6023      	str	r3, [r4, #0]
 800f8da:	bd38      	pop	{r3, r4, r5, pc}
 800f8dc:	2001a30c 	.word	0x2001a30c

0800f8e0 <_lseek_r>:
 800f8e0:	b538      	push	{r3, r4, r5, lr}
 800f8e2:	4d07      	ldr	r5, [pc, #28]	@ (800f900 <_lseek_r+0x20>)
 800f8e4:	4604      	mov	r4, r0
 800f8e6:	4608      	mov	r0, r1
 800f8e8:	4611      	mov	r1, r2
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	602a      	str	r2, [r5, #0]
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	f7f3 fd07 	bl	8003302 <_lseek>
 800f8f4:	1c43      	adds	r3, r0, #1
 800f8f6:	d102      	bne.n	800f8fe <_lseek_r+0x1e>
 800f8f8:	682b      	ldr	r3, [r5, #0]
 800f8fa:	b103      	cbz	r3, 800f8fe <_lseek_r+0x1e>
 800f8fc:	6023      	str	r3, [r4, #0]
 800f8fe:	bd38      	pop	{r3, r4, r5, pc}
 800f900:	2001a30c 	.word	0x2001a30c

0800f904 <_read_r>:
 800f904:	b538      	push	{r3, r4, r5, lr}
 800f906:	4d07      	ldr	r5, [pc, #28]	@ (800f924 <_read_r+0x20>)
 800f908:	4604      	mov	r4, r0
 800f90a:	4608      	mov	r0, r1
 800f90c:	4611      	mov	r1, r2
 800f90e:	2200      	movs	r2, #0
 800f910:	602a      	str	r2, [r5, #0]
 800f912:	461a      	mov	r2, r3
 800f914:	f7f3 fc95 	bl	8003242 <_read>
 800f918:	1c43      	adds	r3, r0, #1
 800f91a:	d102      	bne.n	800f922 <_read_r+0x1e>
 800f91c:	682b      	ldr	r3, [r5, #0]
 800f91e:	b103      	cbz	r3, 800f922 <_read_r+0x1e>
 800f920:	6023      	str	r3, [r4, #0]
 800f922:	bd38      	pop	{r3, r4, r5, pc}
 800f924:	2001a30c 	.word	0x2001a30c

0800f928 <_write_r>:
 800f928:	b538      	push	{r3, r4, r5, lr}
 800f92a:	4d07      	ldr	r5, [pc, #28]	@ (800f948 <_write_r+0x20>)
 800f92c:	4604      	mov	r4, r0
 800f92e:	4608      	mov	r0, r1
 800f930:	4611      	mov	r1, r2
 800f932:	2200      	movs	r2, #0
 800f934:	602a      	str	r2, [r5, #0]
 800f936:	461a      	mov	r2, r3
 800f938:	f7f3 fca0 	bl	800327c <_write>
 800f93c:	1c43      	adds	r3, r0, #1
 800f93e:	d102      	bne.n	800f946 <_write_r+0x1e>
 800f940:	682b      	ldr	r3, [r5, #0]
 800f942:	b103      	cbz	r3, 800f946 <_write_r+0x1e>
 800f944:	6023      	str	r3, [r4, #0]
 800f946:	bd38      	pop	{r3, r4, r5, pc}
 800f948:	2001a30c 	.word	0x2001a30c

0800f94c <__errno>:
 800f94c:	4b01      	ldr	r3, [pc, #4]	@ (800f954 <__errno+0x8>)
 800f94e:	6818      	ldr	r0, [r3, #0]
 800f950:	4770      	bx	lr
 800f952:	bf00      	nop
 800f954:	20000280 	.word	0x20000280

0800f958 <__libc_init_array>:
 800f958:	b570      	push	{r4, r5, r6, lr}
 800f95a:	4d0d      	ldr	r5, [pc, #52]	@ (800f990 <__libc_init_array+0x38>)
 800f95c:	4c0d      	ldr	r4, [pc, #52]	@ (800f994 <__libc_init_array+0x3c>)
 800f95e:	1b64      	subs	r4, r4, r5
 800f960:	10a4      	asrs	r4, r4, #2
 800f962:	2600      	movs	r6, #0
 800f964:	42a6      	cmp	r6, r4
 800f966:	d109      	bne.n	800f97c <__libc_init_array+0x24>
 800f968:	4d0b      	ldr	r5, [pc, #44]	@ (800f998 <__libc_init_array+0x40>)
 800f96a:	4c0c      	ldr	r4, [pc, #48]	@ (800f99c <__libc_init_array+0x44>)
 800f96c:	f003 f906 	bl	8012b7c <_init>
 800f970:	1b64      	subs	r4, r4, r5
 800f972:	10a4      	asrs	r4, r4, #2
 800f974:	2600      	movs	r6, #0
 800f976:	42a6      	cmp	r6, r4
 800f978:	d105      	bne.n	800f986 <__libc_init_array+0x2e>
 800f97a:	bd70      	pop	{r4, r5, r6, pc}
 800f97c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f980:	4798      	blx	r3
 800f982:	3601      	adds	r6, #1
 800f984:	e7ee      	b.n	800f964 <__libc_init_array+0xc>
 800f986:	f855 3b04 	ldr.w	r3, [r5], #4
 800f98a:	4798      	blx	r3
 800f98c:	3601      	adds	r6, #1
 800f98e:	e7f2      	b.n	800f976 <__libc_init_array+0x1e>
 800f990:	0806d3a8 	.word	0x0806d3a8
 800f994:	0806d3a8 	.word	0x0806d3a8
 800f998:	0806d3a8 	.word	0x0806d3a8
 800f99c:	0806d3ac 	.word	0x0806d3ac

0800f9a0 <__retarget_lock_init_recursive>:
 800f9a0:	4770      	bx	lr

0800f9a2 <__retarget_lock_acquire_recursive>:
 800f9a2:	4770      	bx	lr

0800f9a4 <__retarget_lock_release_recursive>:
 800f9a4:	4770      	bx	lr

0800f9a6 <memcpy>:
 800f9a6:	440a      	add	r2, r1
 800f9a8:	4291      	cmp	r1, r2
 800f9aa:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9ae:	d100      	bne.n	800f9b2 <memcpy+0xc>
 800f9b0:	4770      	bx	lr
 800f9b2:	b510      	push	{r4, lr}
 800f9b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9bc:	4291      	cmp	r1, r2
 800f9be:	d1f9      	bne.n	800f9b4 <memcpy+0xe>
 800f9c0:	bd10      	pop	{r4, pc}
 800f9c2:	0000      	movs	r0, r0
 800f9c4:	0000      	movs	r0, r0
	...

0800f9c8 <nan>:
 800f9c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f9d0 <nan+0x8>
 800f9cc:	4770      	bx	lr
 800f9ce:	bf00      	nop
 800f9d0:	00000000 	.word	0x00000000
 800f9d4:	7ff80000 	.word	0x7ff80000

0800f9d8 <nanf>:
 800f9d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f9e0 <nanf+0x8>
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop
 800f9e0:	7fc00000 	.word	0x7fc00000

0800f9e4 <__assert_func>:
 800f9e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9e6:	4614      	mov	r4, r2
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	4b09      	ldr	r3, [pc, #36]	@ (800fa10 <__assert_func+0x2c>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	4605      	mov	r5, r0
 800f9f0:	68d8      	ldr	r0, [r3, #12]
 800f9f2:	b14c      	cbz	r4, 800fa08 <__assert_func+0x24>
 800f9f4:	4b07      	ldr	r3, [pc, #28]	@ (800fa14 <__assert_func+0x30>)
 800f9f6:	9100      	str	r1, [sp, #0]
 800f9f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9fc:	4906      	ldr	r1, [pc, #24]	@ (800fa18 <__assert_func+0x34>)
 800f9fe:	462b      	mov	r3, r5
 800fa00:	f002 fc8a 	bl	8012318 <fiprintf>
 800fa04:	f002 fd38 	bl	8012478 <abort>
 800fa08:	4b04      	ldr	r3, [pc, #16]	@ (800fa1c <__assert_func+0x38>)
 800fa0a:	461c      	mov	r4, r3
 800fa0c:	e7f3      	b.n	800f9f6 <__assert_func+0x12>
 800fa0e:	bf00      	nop
 800fa10:	20000280 	.word	0x20000280
 800fa14:	0806cfb6 	.word	0x0806cfb6
 800fa18:	0806cfc3 	.word	0x0806cfc3
 800fa1c:	0806cff1 	.word	0x0806cff1

0800fa20 <quorem>:
 800fa20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa24:	6903      	ldr	r3, [r0, #16]
 800fa26:	690c      	ldr	r4, [r1, #16]
 800fa28:	42a3      	cmp	r3, r4
 800fa2a:	4607      	mov	r7, r0
 800fa2c:	db7e      	blt.n	800fb2c <quorem+0x10c>
 800fa2e:	3c01      	subs	r4, #1
 800fa30:	f101 0814 	add.w	r8, r1, #20
 800fa34:	00a3      	lsls	r3, r4, #2
 800fa36:	f100 0514 	add.w	r5, r0, #20
 800fa3a:	9300      	str	r3, [sp, #0]
 800fa3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa40:	9301      	str	r3, [sp, #4]
 800fa42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa52:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa56:	d32e      	bcc.n	800fab6 <quorem+0x96>
 800fa58:	f04f 0a00 	mov.w	sl, #0
 800fa5c:	46c4      	mov	ip, r8
 800fa5e:	46ae      	mov	lr, r5
 800fa60:	46d3      	mov	fp, sl
 800fa62:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fa66:	b298      	uxth	r0, r3
 800fa68:	fb06 a000 	mla	r0, r6, r0, sl
 800fa6c:	0c02      	lsrs	r2, r0, #16
 800fa6e:	0c1b      	lsrs	r3, r3, #16
 800fa70:	fb06 2303 	mla	r3, r6, r3, r2
 800fa74:	f8de 2000 	ldr.w	r2, [lr]
 800fa78:	b280      	uxth	r0, r0
 800fa7a:	b292      	uxth	r2, r2
 800fa7c:	1a12      	subs	r2, r2, r0
 800fa7e:	445a      	add	r2, fp
 800fa80:	f8de 0000 	ldr.w	r0, [lr]
 800fa84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fa8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fa92:	b292      	uxth	r2, r2
 800fa94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fa98:	45e1      	cmp	r9, ip
 800fa9a:	f84e 2b04 	str.w	r2, [lr], #4
 800fa9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800faa2:	d2de      	bcs.n	800fa62 <quorem+0x42>
 800faa4:	9b00      	ldr	r3, [sp, #0]
 800faa6:	58eb      	ldr	r3, [r5, r3]
 800faa8:	b92b      	cbnz	r3, 800fab6 <quorem+0x96>
 800faaa:	9b01      	ldr	r3, [sp, #4]
 800faac:	3b04      	subs	r3, #4
 800faae:	429d      	cmp	r5, r3
 800fab0:	461a      	mov	r2, r3
 800fab2:	d32f      	bcc.n	800fb14 <quorem+0xf4>
 800fab4:	613c      	str	r4, [r7, #16]
 800fab6:	4638      	mov	r0, r7
 800fab8:	f001 fd12 	bl	80114e0 <__mcmp>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	db25      	blt.n	800fb0c <quorem+0xec>
 800fac0:	4629      	mov	r1, r5
 800fac2:	2000      	movs	r0, #0
 800fac4:	f858 2b04 	ldr.w	r2, [r8], #4
 800fac8:	f8d1 c000 	ldr.w	ip, [r1]
 800facc:	fa1f fe82 	uxth.w	lr, r2
 800fad0:	fa1f f38c 	uxth.w	r3, ip
 800fad4:	eba3 030e 	sub.w	r3, r3, lr
 800fad8:	4403      	add	r3, r0
 800fada:	0c12      	lsrs	r2, r2, #16
 800fadc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fae0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fae4:	b29b      	uxth	r3, r3
 800fae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800faea:	45c1      	cmp	r9, r8
 800faec:	f841 3b04 	str.w	r3, [r1], #4
 800faf0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800faf4:	d2e6      	bcs.n	800fac4 <quorem+0xa4>
 800faf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fafa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fafe:	b922      	cbnz	r2, 800fb0a <quorem+0xea>
 800fb00:	3b04      	subs	r3, #4
 800fb02:	429d      	cmp	r5, r3
 800fb04:	461a      	mov	r2, r3
 800fb06:	d30b      	bcc.n	800fb20 <quorem+0x100>
 800fb08:	613c      	str	r4, [r7, #16]
 800fb0a:	3601      	adds	r6, #1
 800fb0c:	4630      	mov	r0, r6
 800fb0e:	b003      	add	sp, #12
 800fb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb14:	6812      	ldr	r2, [r2, #0]
 800fb16:	3b04      	subs	r3, #4
 800fb18:	2a00      	cmp	r2, #0
 800fb1a:	d1cb      	bne.n	800fab4 <quorem+0x94>
 800fb1c:	3c01      	subs	r4, #1
 800fb1e:	e7c6      	b.n	800faae <quorem+0x8e>
 800fb20:	6812      	ldr	r2, [r2, #0]
 800fb22:	3b04      	subs	r3, #4
 800fb24:	2a00      	cmp	r2, #0
 800fb26:	d1ef      	bne.n	800fb08 <quorem+0xe8>
 800fb28:	3c01      	subs	r4, #1
 800fb2a:	e7ea      	b.n	800fb02 <quorem+0xe2>
 800fb2c:	2000      	movs	r0, #0
 800fb2e:	e7ee      	b.n	800fb0e <quorem+0xee>

0800fb30 <_dtoa_r>:
 800fb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb34:	69c7      	ldr	r7, [r0, #28]
 800fb36:	b097      	sub	sp, #92	@ 0x5c
 800fb38:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fb3c:	ec55 4b10 	vmov	r4, r5, d0
 800fb40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fb42:	9107      	str	r1, [sp, #28]
 800fb44:	4681      	mov	r9, r0
 800fb46:	920c      	str	r2, [sp, #48]	@ 0x30
 800fb48:	9311      	str	r3, [sp, #68]	@ 0x44
 800fb4a:	b97f      	cbnz	r7, 800fb6c <_dtoa_r+0x3c>
 800fb4c:	2010      	movs	r0, #16
 800fb4e:	f001 f943 	bl	8010dd8 <malloc>
 800fb52:	4602      	mov	r2, r0
 800fb54:	f8c9 001c 	str.w	r0, [r9, #28]
 800fb58:	b920      	cbnz	r0, 800fb64 <_dtoa_r+0x34>
 800fb5a:	4ba9      	ldr	r3, [pc, #676]	@ (800fe00 <_dtoa_r+0x2d0>)
 800fb5c:	21ef      	movs	r1, #239	@ 0xef
 800fb5e:	48a9      	ldr	r0, [pc, #676]	@ (800fe04 <_dtoa_r+0x2d4>)
 800fb60:	f7ff ff40 	bl	800f9e4 <__assert_func>
 800fb64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fb68:	6007      	str	r7, [r0, #0]
 800fb6a:	60c7      	str	r7, [r0, #12]
 800fb6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fb70:	6819      	ldr	r1, [r3, #0]
 800fb72:	b159      	cbz	r1, 800fb8c <_dtoa_r+0x5c>
 800fb74:	685a      	ldr	r2, [r3, #4]
 800fb76:	604a      	str	r2, [r1, #4]
 800fb78:	2301      	movs	r3, #1
 800fb7a:	4093      	lsls	r3, r2
 800fb7c:	608b      	str	r3, [r1, #8]
 800fb7e:	4648      	mov	r0, r9
 800fb80:	f001 fa32 	bl	8010fe8 <_Bfree>
 800fb84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	601a      	str	r2, [r3, #0]
 800fb8c:	1e2b      	subs	r3, r5, #0
 800fb8e:	bfb9      	ittee	lt
 800fb90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fb94:	9305      	strlt	r3, [sp, #20]
 800fb96:	2300      	movge	r3, #0
 800fb98:	6033      	strge	r3, [r6, #0]
 800fb9a:	9f05      	ldr	r7, [sp, #20]
 800fb9c:	4b9a      	ldr	r3, [pc, #616]	@ (800fe08 <_dtoa_r+0x2d8>)
 800fb9e:	bfbc      	itt	lt
 800fba0:	2201      	movlt	r2, #1
 800fba2:	6032      	strlt	r2, [r6, #0]
 800fba4:	43bb      	bics	r3, r7
 800fba6:	d112      	bne.n	800fbce <_dtoa_r+0x9e>
 800fba8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fbaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fbae:	6013      	str	r3, [r2, #0]
 800fbb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fbb4:	4323      	orrs	r3, r4
 800fbb6:	f000 855a 	beq.w	801066e <_dtoa_r+0xb3e>
 800fbba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fbbc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800fe1c <_dtoa_r+0x2ec>
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f000 855c 	beq.w	801067e <_dtoa_r+0xb4e>
 800fbc6:	f10a 0303 	add.w	r3, sl, #3
 800fbca:	f000 bd56 	b.w	801067a <_dtoa_r+0xb4a>
 800fbce:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	ec51 0b17 	vmov	r0, r1, d7
 800fbd8:	2300      	movs	r3, #0
 800fbda:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fbde:	f7f0 ff83 	bl	8000ae8 <__aeabi_dcmpeq>
 800fbe2:	4680      	mov	r8, r0
 800fbe4:	b158      	cbz	r0, 800fbfe <_dtoa_r+0xce>
 800fbe6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fbe8:	2301      	movs	r3, #1
 800fbea:	6013      	str	r3, [r2, #0]
 800fbec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fbee:	b113      	cbz	r3, 800fbf6 <_dtoa_r+0xc6>
 800fbf0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fbf2:	4b86      	ldr	r3, [pc, #536]	@ (800fe0c <_dtoa_r+0x2dc>)
 800fbf4:	6013      	str	r3, [r2, #0]
 800fbf6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800fe20 <_dtoa_r+0x2f0>
 800fbfa:	f000 bd40 	b.w	801067e <_dtoa_r+0xb4e>
 800fbfe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800fc02:	aa14      	add	r2, sp, #80	@ 0x50
 800fc04:	a915      	add	r1, sp, #84	@ 0x54
 800fc06:	4648      	mov	r0, r9
 800fc08:	f001 fd8a 	bl	8011720 <__d2b>
 800fc0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fc10:	9002      	str	r0, [sp, #8]
 800fc12:	2e00      	cmp	r6, #0
 800fc14:	d078      	beq.n	800fd08 <_dtoa_r+0x1d8>
 800fc16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800fc1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fc24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fc28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fc2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fc30:	4619      	mov	r1, r3
 800fc32:	2200      	movs	r2, #0
 800fc34:	4b76      	ldr	r3, [pc, #472]	@ (800fe10 <_dtoa_r+0x2e0>)
 800fc36:	f7f0 fb37 	bl	80002a8 <__aeabi_dsub>
 800fc3a:	a36b      	add	r3, pc, #428	@ (adr r3, 800fde8 <_dtoa_r+0x2b8>)
 800fc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc40:	f7f0 fcea 	bl	8000618 <__aeabi_dmul>
 800fc44:	a36a      	add	r3, pc, #424	@ (adr r3, 800fdf0 <_dtoa_r+0x2c0>)
 800fc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4a:	f7f0 fb2f 	bl	80002ac <__adddf3>
 800fc4e:	4604      	mov	r4, r0
 800fc50:	4630      	mov	r0, r6
 800fc52:	460d      	mov	r5, r1
 800fc54:	f7f0 fc76 	bl	8000544 <__aeabi_i2d>
 800fc58:	a367      	add	r3, pc, #412	@ (adr r3, 800fdf8 <_dtoa_r+0x2c8>)
 800fc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5e:	f7f0 fcdb 	bl	8000618 <__aeabi_dmul>
 800fc62:	4602      	mov	r2, r0
 800fc64:	460b      	mov	r3, r1
 800fc66:	4620      	mov	r0, r4
 800fc68:	4629      	mov	r1, r5
 800fc6a:	f7f0 fb1f 	bl	80002ac <__adddf3>
 800fc6e:	4604      	mov	r4, r0
 800fc70:	460d      	mov	r5, r1
 800fc72:	f7f0 ff81 	bl	8000b78 <__aeabi_d2iz>
 800fc76:	2200      	movs	r2, #0
 800fc78:	4607      	mov	r7, r0
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	4629      	mov	r1, r5
 800fc80:	f7f0 ff3c 	bl	8000afc <__aeabi_dcmplt>
 800fc84:	b140      	cbz	r0, 800fc98 <_dtoa_r+0x168>
 800fc86:	4638      	mov	r0, r7
 800fc88:	f7f0 fc5c 	bl	8000544 <__aeabi_i2d>
 800fc8c:	4622      	mov	r2, r4
 800fc8e:	462b      	mov	r3, r5
 800fc90:	f7f0 ff2a 	bl	8000ae8 <__aeabi_dcmpeq>
 800fc94:	b900      	cbnz	r0, 800fc98 <_dtoa_r+0x168>
 800fc96:	3f01      	subs	r7, #1
 800fc98:	2f16      	cmp	r7, #22
 800fc9a:	d852      	bhi.n	800fd42 <_dtoa_r+0x212>
 800fc9c:	4b5d      	ldr	r3, [pc, #372]	@ (800fe14 <_dtoa_r+0x2e4>)
 800fc9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fcaa:	f7f0 ff27 	bl	8000afc <__aeabi_dcmplt>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d049      	beq.n	800fd46 <_dtoa_r+0x216>
 800fcb2:	3f01      	subs	r7, #1
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800fcb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fcba:	1b9b      	subs	r3, r3, r6
 800fcbc:	1e5a      	subs	r2, r3, #1
 800fcbe:	bf45      	ittet	mi
 800fcc0:	f1c3 0301 	rsbmi	r3, r3, #1
 800fcc4:	9300      	strmi	r3, [sp, #0]
 800fcc6:	2300      	movpl	r3, #0
 800fcc8:	2300      	movmi	r3, #0
 800fcca:	9206      	str	r2, [sp, #24]
 800fccc:	bf54      	ite	pl
 800fcce:	9300      	strpl	r3, [sp, #0]
 800fcd0:	9306      	strmi	r3, [sp, #24]
 800fcd2:	2f00      	cmp	r7, #0
 800fcd4:	db39      	blt.n	800fd4a <_dtoa_r+0x21a>
 800fcd6:	9b06      	ldr	r3, [sp, #24]
 800fcd8:	970d      	str	r7, [sp, #52]	@ 0x34
 800fcda:	443b      	add	r3, r7
 800fcdc:	9306      	str	r3, [sp, #24]
 800fcde:	2300      	movs	r3, #0
 800fce0:	9308      	str	r3, [sp, #32]
 800fce2:	9b07      	ldr	r3, [sp, #28]
 800fce4:	2b09      	cmp	r3, #9
 800fce6:	d863      	bhi.n	800fdb0 <_dtoa_r+0x280>
 800fce8:	2b05      	cmp	r3, #5
 800fcea:	bfc4      	itt	gt
 800fcec:	3b04      	subgt	r3, #4
 800fcee:	9307      	strgt	r3, [sp, #28]
 800fcf0:	9b07      	ldr	r3, [sp, #28]
 800fcf2:	f1a3 0302 	sub.w	r3, r3, #2
 800fcf6:	bfcc      	ite	gt
 800fcf8:	2400      	movgt	r4, #0
 800fcfa:	2401      	movle	r4, #1
 800fcfc:	2b03      	cmp	r3, #3
 800fcfe:	d863      	bhi.n	800fdc8 <_dtoa_r+0x298>
 800fd00:	e8df f003 	tbb	[pc, r3]
 800fd04:	2b375452 	.word	0x2b375452
 800fd08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800fd0c:	441e      	add	r6, r3
 800fd0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fd12:	2b20      	cmp	r3, #32
 800fd14:	bfc1      	itttt	gt
 800fd16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fd1a:	409f      	lslgt	r7, r3
 800fd1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fd20:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fd24:	bfd6      	itet	le
 800fd26:	f1c3 0320 	rsble	r3, r3, #32
 800fd2a:	ea47 0003 	orrgt.w	r0, r7, r3
 800fd2e:	fa04 f003 	lslle.w	r0, r4, r3
 800fd32:	f7f0 fbf7 	bl	8000524 <__aeabi_ui2d>
 800fd36:	2201      	movs	r2, #1
 800fd38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fd3c:	3e01      	subs	r6, #1
 800fd3e:	9212      	str	r2, [sp, #72]	@ 0x48
 800fd40:	e776      	b.n	800fc30 <_dtoa_r+0x100>
 800fd42:	2301      	movs	r3, #1
 800fd44:	e7b7      	b.n	800fcb6 <_dtoa_r+0x186>
 800fd46:	9010      	str	r0, [sp, #64]	@ 0x40
 800fd48:	e7b6      	b.n	800fcb8 <_dtoa_r+0x188>
 800fd4a:	9b00      	ldr	r3, [sp, #0]
 800fd4c:	1bdb      	subs	r3, r3, r7
 800fd4e:	9300      	str	r3, [sp, #0]
 800fd50:	427b      	negs	r3, r7
 800fd52:	9308      	str	r3, [sp, #32]
 800fd54:	2300      	movs	r3, #0
 800fd56:	930d      	str	r3, [sp, #52]	@ 0x34
 800fd58:	e7c3      	b.n	800fce2 <_dtoa_r+0x1b2>
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd60:	eb07 0b03 	add.w	fp, r7, r3
 800fd64:	f10b 0301 	add.w	r3, fp, #1
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	9303      	str	r3, [sp, #12]
 800fd6c:	bfb8      	it	lt
 800fd6e:	2301      	movlt	r3, #1
 800fd70:	e006      	b.n	800fd80 <_dtoa_r+0x250>
 800fd72:	2301      	movs	r3, #1
 800fd74:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	dd28      	ble.n	800fdce <_dtoa_r+0x29e>
 800fd7c:	469b      	mov	fp, r3
 800fd7e:	9303      	str	r3, [sp, #12]
 800fd80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800fd84:	2100      	movs	r1, #0
 800fd86:	2204      	movs	r2, #4
 800fd88:	f102 0514 	add.w	r5, r2, #20
 800fd8c:	429d      	cmp	r5, r3
 800fd8e:	d926      	bls.n	800fdde <_dtoa_r+0x2ae>
 800fd90:	6041      	str	r1, [r0, #4]
 800fd92:	4648      	mov	r0, r9
 800fd94:	f001 f8e8 	bl	8010f68 <_Balloc>
 800fd98:	4682      	mov	sl, r0
 800fd9a:	2800      	cmp	r0, #0
 800fd9c:	d142      	bne.n	800fe24 <_dtoa_r+0x2f4>
 800fd9e:	4b1e      	ldr	r3, [pc, #120]	@ (800fe18 <_dtoa_r+0x2e8>)
 800fda0:	4602      	mov	r2, r0
 800fda2:	f240 11af 	movw	r1, #431	@ 0x1af
 800fda6:	e6da      	b.n	800fb5e <_dtoa_r+0x2e>
 800fda8:	2300      	movs	r3, #0
 800fdaa:	e7e3      	b.n	800fd74 <_dtoa_r+0x244>
 800fdac:	2300      	movs	r3, #0
 800fdae:	e7d5      	b.n	800fd5c <_dtoa_r+0x22c>
 800fdb0:	2401      	movs	r4, #1
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	9307      	str	r3, [sp, #28]
 800fdb6:	9409      	str	r4, [sp, #36]	@ 0x24
 800fdb8:	f04f 3bff 	mov.w	fp, #4294967295
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f8cd b00c 	str.w	fp, [sp, #12]
 800fdc2:	2312      	movs	r3, #18
 800fdc4:	920c      	str	r2, [sp, #48]	@ 0x30
 800fdc6:	e7db      	b.n	800fd80 <_dtoa_r+0x250>
 800fdc8:	2301      	movs	r3, #1
 800fdca:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdcc:	e7f4      	b.n	800fdb8 <_dtoa_r+0x288>
 800fdce:	f04f 0b01 	mov.w	fp, #1
 800fdd2:	f8cd b00c 	str.w	fp, [sp, #12]
 800fdd6:	465b      	mov	r3, fp
 800fdd8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800fddc:	e7d0      	b.n	800fd80 <_dtoa_r+0x250>
 800fdde:	3101      	adds	r1, #1
 800fde0:	0052      	lsls	r2, r2, #1
 800fde2:	e7d1      	b.n	800fd88 <_dtoa_r+0x258>
 800fde4:	f3af 8000 	nop.w
 800fde8:	636f4361 	.word	0x636f4361
 800fdec:	3fd287a7 	.word	0x3fd287a7
 800fdf0:	8b60c8b3 	.word	0x8b60c8b3
 800fdf4:	3fc68a28 	.word	0x3fc68a28
 800fdf8:	509f79fb 	.word	0x509f79fb
 800fdfc:	3fd34413 	.word	0x3fd34413
 800fe00:	0806ceac 	.word	0x0806ceac
 800fe04:	0806cfff 	.word	0x0806cfff
 800fe08:	7ff00000 	.word	0x7ff00000
 800fe0c:	0806d149 	.word	0x0806d149
 800fe10:	3ff80000 	.word	0x3ff80000
 800fe14:	0806d2d8 	.word	0x0806d2d8
 800fe18:	0806d057 	.word	0x0806d057
 800fe1c:	0806cffb 	.word	0x0806cffb
 800fe20:	0806d148 	.word	0x0806d148
 800fe24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fe28:	6018      	str	r0, [r3, #0]
 800fe2a:	9b03      	ldr	r3, [sp, #12]
 800fe2c:	2b0e      	cmp	r3, #14
 800fe2e:	f200 80a1 	bhi.w	800ff74 <_dtoa_r+0x444>
 800fe32:	2c00      	cmp	r4, #0
 800fe34:	f000 809e 	beq.w	800ff74 <_dtoa_r+0x444>
 800fe38:	2f00      	cmp	r7, #0
 800fe3a:	dd33      	ble.n	800fea4 <_dtoa_r+0x374>
 800fe3c:	4b9c      	ldr	r3, [pc, #624]	@ (80100b0 <_dtoa_r+0x580>)
 800fe3e:	f007 020f 	and.w	r2, r7, #15
 800fe42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe46:	ed93 7b00 	vldr	d7, [r3]
 800fe4a:	05f8      	lsls	r0, r7, #23
 800fe4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800fe50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fe54:	d516      	bpl.n	800fe84 <_dtoa_r+0x354>
 800fe56:	4b97      	ldr	r3, [pc, #604]	@ (80100b4 <_dtoa_r+0x584>)
 800fe58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fe5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe60:	f7f0 fd04 	bl	800086c <__aeabi_ddiv>
 800fe64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe68:	f004 040f 	and.w	r4, r4, #15
 800fe6c:	2603      	movs	r6, #3
 800fe6e:	4d91      	ldr	r5, [pc, #580]	@ (80100b4 <_dtoa_r+0x584>)
 800fe70:	b954      	cbnz	r4, 800fe88 <_dtoa_r+0x358>
 800fe72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fe76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe7a:	f7f0 fcf7 	bl	800086c <__aeabi_ddiv>
 800fe7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe82:	e028      	b.n	800fed6 <_dtoa_r+0x3a6>
 800fe84:	2602      	movs	r6, #2
 800fe86:	e7f2      	b.n	800fe6e <_dtoa_r+0x33e>
 800fe88:	07e1      	lsls	r1, r4, #31
 800fe8a:	d508      	bpl.n	800fe9e <_dtoa_r+0x36e>
 800fe8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fe90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe94:	f7f0 fbc0 	bl	8000618 <__aeabi_dmul>
 800fe98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fe9c:	3601      	adds	r6, #1
 800fe9e:	1064      	asrs	r4, r4, #1
 800fea0:	3508      	adds	r5, #8
 800fea2:	e7e5      	b.n	800fe70 <_dtoa_r+0x340>
 800fea4:	f000 80af 	beq.w	8010006 <_dtoa_r+0x4d6>
 800fea8:	427c      	negs	r4, r7
 800feaa:	4b81      	ldr	r3, [pc, #516]	@ (80100b0 <_dtoa_r+0x580>)
 800feac:	4d81      	ldr	r5, [pc, #516]	@ (80100b4 <_dtoa_r+0x584>)
 800feae:	f004 020f 	and.w	r2, r4, #15
 800feb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800feb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800febe:	f7f0 fbab 	bl	8000618 <__aeabi_dmul>
 800fec2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fec6:	1124      	asrs	r4, r4, #4
 800fec8:	2300      	movs	r3, #0
 800feca:	2602      	movs	r6, #2
 800fecc:	2c00      	cmp	r4, #0
 800fece:	f040 808f 	bne.w	800fff0 <_dtoa_r+0x4c0>
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d1d3      	bne.n	800fe7e <_dtoa_r+0x34e>
 800fed6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fed8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	f000 8094 	beq.w	801000a <_dtoa_r+0x4da>
 800fee2:	4b75      	ldr	r3, [pc, #468]	@ (80100b8 <_dtoa_r+0x588>)
 800fee4:	2200      	movs	r2, #0
 800fee6:	4620      	mov	r0, r4
 800fee8:	4629      	mov	r1, r5
 800feea:	f7f0 fe07 	bl	8000afc <__aeabi_dcmplt>
 800feee:	2800      	cmp	r0, #0
 800fef0:	f000 808b 	beq.w	801000a <_dtoa_r+0x4da>
 800fef4:	9b03      	ldr	r3, [sp, #12]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	f000 8087 	beq.w	801000a <_dtoa_r+0x4da>
 800fefc:	f1bb 0f00 	cmp.w	fp, #0
 800ff00:	dd34      	ble.n	800ff6c <_dtoa_r+0x43c>
 800ff02:	4620      	mov	r0, r4
 800ff04:	4b6d      	ldr	r3, [pc, #436]	@ (80100bc <_dtoa_r+0x58c>)
 800ff06:	2200      	movs	r2, #0
 800ff08:	4629      	mov	r1, r5
 800ff0a:	f7f0 fb85 	bl	8000618 <__aeabi_dmul>
 800ff0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff12:	f107 38ff 	add.w	r8, r7, #4294967295
 800ff16:	3601      	adds	r6, #1
 800ff18:	465c      	mov	r4, fp
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	f7f0 fb12 	bl	8000544 <__aeabi_i2d>
 800ff20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff24:	f7f0 fb78 	bl	8000618 <__aeabi_dmul>
 800ff28:	4b65      	ldr	r3, [pc, #404]	@ (80100c0 <_dtoa_r+0x590>)
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	f7f0 f9be 	bl	80002ac <__adddf3>
 800ff30:	4605      	mov	r5, r0
 800ff32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ff36:	2c00      	cmp	r4, #0
 800ff38:	d16a      	bne.n	8010010 <_dtoa_r+0x4e0>
 800ff3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff3e:	4b61      	ldr	r3, [pc, #388]	@ (80100c4 <_dtoa_r+0x594>)
 800ff40:	2200      	movs	r2, #0
 800ff42:	f7f0 f9b1 	bl	80002a8 <__aeabi_dsub>
 800ff46:	4602      	mov	r2, r0
 800ff48:	460b      	mov	r3, r1
 800ff4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff4e:	462a      	mov	r2, r5
 800ff50:	4633      	mov	r3, r6
 800ff52:	f7f0 fdf1 	bl	8000b38 <__aeabi_dcmpgt>
 800ff56:	2800      	cmp	r0, #0
 800ff58:	f040 8298 	bne.w	801048c <_dtoa_r+0x95c>
 800ff5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff60:	462a      	mov	r2, r5
 800ff62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ff66:	f7f0 fdc9 	bl	8000afc <__aeabi_dcmplt>
 800ff6a:	bb38      	cbnz	r0, 800ffbc <_dtoa_r+0x48c>
 800ff6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ff70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ff74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	f2c0 8157 	blt.w	801022a <_dtoa_r+0x6fa>
 800ff7c:	2f0e      	cmp	r7, #14
 800ff7e:	f300 8154 	bgt.w	801022a <_dtoa_r+0x6fa>
 800ff82:	4b4b      	ldr	r3, [pc, #300]	@ (80100b0 <_dtoa_r+0x580>)
 800ff84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ff88:	ed93 7b00 	vldr	d7, [r3]
 800ff8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	ed8d 7b00 	vstr	d7, [sp]
 800ff94:	f280 80e5 	bge.w	8010162 <_dtoa_r+0x632>
 800ff98:	9b03      	ldr	r3, [sp, #12]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f300 80e1 	bgt.w	8010162 <_dtoa_r+0x632>
 800ffa0:	d10c      	bne.n	800ffbc <_dtoa_r+0x48c>
 800ffa2:	4b48      	ldr	r3, [pc, #288]	@ (80100c4 <_dtoa_r+0x594>)
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	ec51 0b17 	vmov	r0, r1, d7
 800ffaa:	f7f0 fb35 	bl	8000618 <__aeabi_dmul>
 800ffae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffb2:	f7f0 fdb7 	bl	8000b24 <__aeabi_dcmpge>
 800ffb6:	2800      	cmp	r0, #0
 800ffb8:	f000 8266 	beq.w	8010488 <_dtoa_r+0x958>
 800ffbc:	2400      	movs	r4, #0
 800ffbe:	4625      	mov	r5, r4
 800ffc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ffc2:	4656      	mov	r6, sl
 800ffc4:	ea6f 0803 	mvn.w	r8, r3
 800ffc8:	2700      	movs	r7, #0
 800ffca:	4621      	mov	r1, r4
 800ffcc:	4648      	mov	r0, r9
 800ffce:	f001 f80b 	bl	8010fe8 <_Bfree>
 800ffd2:	2d00      	cmp	r5, #0
 800ffd4:	f000 80bd 	beq.w	8010152 <_dtoa_r+0x622>
 800ffd8:	b12f      	cbz	r7, 800ffe6 <_dtoa_r+0x4b6>
 800ffda:	42af      	cmp	r7, r5
 800ffdc:	d003      	beq.n	800ffe6 <_dtoa_r+0x4b6>
 800ffde:	4639      	mov	r1, r7
 800ffe0:	4648      	mov	r0, r9
 800ffe2:	f001 f801 	bl	8010fe8 <_Bfree>
 800ffe6:	4629      	mov	r1, r5
 800ffe8:	4648      	mov	r0, r9
 800ffea:	f000 fffd 	bl	8010fe8 <_Bfree>
 800ffee:	e0b0      	b.n	8010152 <_dtoa_r+0x622>
 800fff0:	07e2      	lsls	r2, r4, #31
 800fff2:	d505      	bpl.n	8010000 <_dtoa_r+0x4d0>
 800fff4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fff8:	f7f0 fb0e 	bl	8000618 <__aeabi_dmul>
 800fffc:	3601      	adds	r6, #1
 800fffe:	2301      	movs	r3, #1
 8010000:	1064      	asrs	r4, r4, #1
 8010002:	3508      	adds	r5, #8
 8010004:	e762      	b.n	800fecc <_dtoa_r+0x39c>
 8010006:	2602      	movs	r6, #2
 8010008:	e765      	b.n	800fed6 <_dtoa_r+0x3a6>
 801000a:	9c03      	ldr	r4, [sp, #12]
 801000c:	46b8      	mov	r8, r7
 801000e:	e784      	b.n	800ff1a <_dtoa_r+0x3ea>
 8010010:	4b27      	ldr	r3, [pc, #156]	@ (80100b0 <_dtoa_r+0x580>)
 8010012:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010014:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010018:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801001c:	4454      	add	r4, sl
 801001e:	2900      	cmp	r1, #0
 8010020:	d054      	beq.n	80100cc <_dtoa_r+0x59c>
 8010022:	4929      	ldr	r1, [pc, #164]	@ (80100c8 <_dtoa_r+0x598>)
 8010024:	2000      	movs	r0, #0
 8010026:	f7f0 fc21 	bl	800086c <__aeabi_ddiv>
 801002a:	4633      	mov	r3, r6
 801002c:	462a      	mov	r2, r5
 801002e:	f7f0 f93b 	bl	80002a8 <__aeabi_dsub>
 8010032:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010036:	4656      	mov	r6, sl
 8010038:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801003c:	f7f0 fd9c 	bl	8000b78 <__aeabi_d2iz>
 8010040:	4605      	mov	r5, r0
 8010042:	f7f0 fa7f 	bl	8000544 <__aeabi_i2d>
 8010046:	4602      	mov	r2, r0
 8010048:	460b      	mov	r3, r1
 801004a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801004e:	f7f0 f92b 	bl	80002a8 <__aeabi_dsub>
 8010052:	3530      	adds	r5, #48	@ 0x30
 8010054:	4602      	mov	r2, r0
 8010056:	460b      	mov	r3, r1
 8010058:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801005c:	f806 5b01 	strb.w	r5, [r6], #1
 8010060:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010064:	f7f0 fd4a 	bl	8000afc <__aeabi_dcmplt>
 8010068:	2800      	cmp	r0, #0
 801006a:	d172      	bne.n	8010152 <_dtoa_r+0x622>
 801006c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010070:	4911      	ldr	r1, [pc, #68]	@ (80100b8 <_dtoa_r+0x588>)
 8010072:	2000      	movs	r0, #0
 8010074:	f7f0 f918 	bl	80002a8 <__aeabi_dsub>
 8010078:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801007c:	f7f0 fd3e 	bl	8000afc <__aeabi_dcmplt>
 8010080:	2800      	cmp	r0, #0
 8010082:	f040 80b4 	bne.w	80101ee <_dtoa_r+0x6be>
 8010086:	42a6      	cmp	r6, r4
 8010088:	f43f af70 	beq.w	800ff6c <_dtoa_r+0x43c>
 801008c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010090:	4b0a      	ldr	r3, [pc, #40]	@ (80100bc <_dtoa_r+0x58c>)
 8010092:	2200      	movs	r2, #0
 8010094:	f7f0 fac0 	bl	8000618 <__aeabi_dmul>
 8010098:	4b08      	ldr	r3, [pc, #32]	@ (80100bc <_dtoa_r+0x58c>)
 801009a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801009e:	2200      	movs	r2, #0
 80100a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80100a4:	f7f0 fab8 	bl	8000618 <__aeabi_dmul>
 80100a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80100ac:	e7c4      	b.n	8010038 <_dtoa_r+0x508>
 80100ae:	bf00      	nop
 80100b0:	0806d2d8 	.word	0x0806d2d8
 80100b4:	0806d2b0 	.word	0x0806d2b0
 80100b8:	3ff00000 	.word	0x3ff00000
 80100bc:	40240000 	.word	0x40240000
 80100c0:	401c0000 	.word	0x401c0000
 80100c4:	40140000 	.word	0x40140000
 80100c8:	3fe00000 	.word	0x3fe00000
 80100cc:	4631      	mov	r1, r6
 80100ce:	4628      	mov	r0, r5
 80100d0:	f7f0 faa2 	bl	8000618 <__aeabi_dmul>
 80100d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80100d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80100da:	4656      	mov	r6, sl
 80100dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80100e0:	f7f0 fd4a 	bl	8000b78 <__aeabi_d2iz>
 80100e4:	4605      	mov	r5, r0
 80100e6:	f7f0 fa2d 	bl	8000544 <__aeabi_i2d>
 80100ea:	4602      	mov	r2, r0
 80100ec:	460b      	mov	r3, r1
 80100ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80100f2:	f7f0 f8d9 	bl	80002a8 <__aeabi_dsub>
 80100f6:	3530      	adds	r5, #48	@ 0x30
 80100f8:	f806 5b01 	strb.w	r5, [r6], #1
 80100fc:	4602      	mov	r2, r0
 80100fe:	460b      	mov	r3, r1
 8010100:	42a6      	cmp	r6, r4
 8010102:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010106:	f04f 0200 	mov.w	r2, #0
 801010a:	d124      	bne.n	8010156 <_dtoa_r+0x626>
 801010c:	4baf      	ldr	r3, [pc, #700]	@ (80103cc <_dtoa_r+0x89c>)
 801010e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010112:	f7f0 f8cb 	bl	80002ac <__adddf3>
 8010116:	4602      	mov	r2, r0
 8010118:	460b      	mov	r3, r1
 801011a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801011e:	f7f0 fd0b 	bl	8000b38 <__aeabi_dcmpgt>
 8010122:	2800      	cmp	r0, #0
 8010124:	d163      	bne.n	80101ee <_dtoa_r+0x6be>
 8010126:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801012a:	49a8      	ldr	r1, [pc, #672]	@ (80103cc <_dtoa_r+0x89c>)
 801012c:	2000      	movs	r0, #0
 801012e:	f7f0 f8bb 	bl	80002a8 <__aeabi_dsub>
 8010132:	4602      	mov	r2, r0
 8010134:	460b      	mov	r3, r1
 8010136:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801013a:	f7f0 fcdf 	bl	8000afc <__aeabi_dcmplt>
 801013e:	2800      	cmp	r0, #0
 8010140:	f43f af14 	beq.w	800ff6c <_dtoa_r+0x43c>
 8010144:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010146:	1e73      	subs	r3, r6, #1
 8010148:	9313      	str	r3, [sp, #76]	@ 0x4c
 801014a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801014e:	2b30      	cmp	r3, #48	@ 0x30
 8010150:	d0f8      	beq.n	8010144 <_dtoa_r+0x614>
 8010152:	4647      	mov	r7, r8
 8010154:	e03b      	b.n	80101ce <_dtoa_r+0x69e>
 8010156:	4b9e      	ldr	r3, [pc, #632]	@ (80103d0 <_dtoa_r+0x8a0>)
 8010158:	f7f0 fa5e 	bl	8000618 <__aeabi_dmul>
 801015c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010160:	e7bc      	b.n	80100dc <_dtoa_r+0x5ac>
 8010162:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010166:	4656      	mov	r6, sl
 8010168:	e9dd 2300 	ldrd	r2, r3, [sp]
 801016c:	4620      	mov	r0, r4
 801016e:	4629      	mov	r1, r5
 8010170:	f7f0 fb7c 	bl	800086c <__aeabi_ddiv>
 8010174:	f7f0 fd00 	bl	8000b78 <__aeabi_d2iz>
 8010178:	4680      	mov	r8, r0
 801017a:	f7f0 f9e3 	bl	8000544 <__aeabi_i2d>
 801017e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010182:	f7f0 fa49 	bl	8000618 <__aeabi_dmul>
 8010186:	4602      	mov	r2, r0
 8010188:	460b      	mov	r3, r1
 801018a:	4620      	mov	r0, r4
 801018c:	4629      	mov	r1, r5
 801018e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010192:	f7f0 f889 	bl	80002a8 <__aeabi_dsub>
 8010196:	f806 4b01 	strb.w	r4, [r6], #1
 801019a:	9d03      	ldr	r5, [sp, #12]
 801019c:	eba6 040a 	sub.w	r4, r6, sl
 80101a0:	42a5      	cmp	r5, r4
 80101a2:	4602      	mov	r2, r0
 80101a4:	460b      	mov	r3, r1
 80101a6:	d133      	bne.n	8010210 <_dtoa_r+0x6e0>
 80101a8:	f7f0 f880 	bl	80002ac <__adddf3>
 80101ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101b0:	4604      	mov	r4, r0
 80101b2:	460d      	mov	r5, r1
 80101b4:	f7f0 fcc0 	bl	8000b38 <__aeabi_dcmpgt>
 80101b8:	b9c0      	cbnz	r0, 80101ec <_dtoa_r+0x6bc>
 80101ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101be:	4620      	mov	r0, r4
 80101c0:	4629      	mov	r1, r5
 80101c2:	f7f0 fc91 	bl	8000ae8 <__aeabi_dcmpeq>
 80101c6:	b110      	cbz	r0, 80101ce <_dtoa_r+0x69e>
 80101c8:	f018 0f01 	tst.w	r8, #1
 80101cc:	d10e      	bne.n	80101ec <_dtoa_r+0x6bc>
 80101ce:	9902      	ldr	r1, [sp, #8]
 80101d0:	4648      	mov	r0, r9
 80101d2:	f000 ff09 	bl	8010fe8 <_Bfree>
 80101d6:	2300      	movs	r3, #0
 80101d8:	7033      	strb	r3, [r6, #0]
 80101da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80101dc:	3701      	adds	r7, #1
 80101de:	601f      	str	r7, [r3, #0]
 80101e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	f000 824b 	beq.w	801067e <_dtoa_r+0xb4e>
 80101e8:	601e      	str	r6, [r3, #0]
 80101ea:	e248      	b.n	801067e <_dtoa_r+0xb4e>
 80101ec:	46b8      	mov	r8, r7
 80101ee:	4633      	mov	r3, r6
 80101f0:	461e      	mov	r6, r3
 80101f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80101f6:	2a39      	cmp	r2, #57	@ 0x39
 80101f8:	d106      	bne.n	8010208 <_dtoa_r+0x6d8>
 80101fa:	459a      	cmp	sl, r3
 80101fc:	d1f8      	bne.n	80101f0 <_dtoa_r+0x6c0>
 80101fe:	2230      	movs	r2, #48	@ 0x30
 8010200:	f108 0801 	add.w	r8, r8, #1
 8010204:	f88a 2000 	strb.w	r2, [sl]
 8010208:	781a      	ldrb	r2, [r3, #0]
 801020a:	3201      	adds	r2, #1
 801020c:	701a      	strb	r2, [r3, #0]
 801020e:	e7a0      	b.n	8010152 <_dtoa_r+0x622>
 8010210:	4b6f      	ldr	r3, [pc, #444]	@ (80103d0 <_dtoa_r+0x8a0>)
 8010212:	2200      	movs	r2, #0
 8010214:	f7f0 fa00 	bl	8000618 <__aeabi_dmul>
 8010218:	2200      	movs	r2, #0
 801021a:	2300      	movs	r3, #0
 801021c:	4604      	mov	r4, r0
 801021e:	460d      	mov	r5, r1
 8010220:	f7f0 fc62 	bl	8000ae8 <__aeabi_dcmpeq>
 8010224:	2800      	cmp	r0, #0
 8010226:	d09f      	beq.n	8010168 <_dtoa_r+0x638>
 8010228:	e7d1      	b.n	80101ce <_dtoa_r+0x69e>
 801022a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801022c:	2a00      	cmp	r2, #0
 801022e:	f000 80ea 	beq.w	8010406 <_dtoa_r+0x8d6>
 8010232:	9a07      	ldr	r2, [sp, #28]
 8010234:	2a01      	cmp	r2, #1
 8010236:	f300 80cd 	bgt.w	80103d4 <_dtoa_r+0x8a4>
 801023a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801023c:	2a00      	cmp	r2, #0
 801023e:	f000 80c1 	beq.w	80103c4 <_dtoa_r+0x894>
 8010242:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010246:	9c08      	ldr	r4, [sp, #32]
 8010248:	9e00      	ldr	r6, [sp, #0]
 801024a:	9a00      	ldr	r2, [sp, #0]
 801024c:	441a      	add	r2, r3
 801024e:	9200      	str	r2, [sp, #0]
 8010250:	9a06      	ldr	r2, [sp, #24]
 8010252:	2101      	movs	r1, #1
 8010254:	441a      	add	r2, r3
 8010256:	4648      	mov	r0, r9
 8010258:	9206      	str	r2, [sp, #24]
 801025a:	f000 ffc3 	bl	80111e4 <__i2b>
 801025e:	4605      	mov	r5, r0
 8010260:	b166      	cbz	r6, 801027c <_dtoa_r+0x74c>
 8010262:	9b06      	ldr	r3, [sp, #24]
 8010264:	2b00      	cmp	r3, #0
 8010266:	dd09      	ble.n	801027c <_dtoa_r+0x74c>
 8010268:	42b3      	cmp	r3, r6
 801026a:	9a00      	ldr	r2, [sp, #0]
 801026c:	bfa8      	it	ge
 801026e:	4633      	movge	r3, r6
 8010270:	1ad2      	subs	r2, r2, r3
 8010272:	9200      	str	r2, [sp, #0]
 8010274:	9a06      	ldr	r2, [sp, #24]
 8010276:	1af6      	subs	r6, r6, r3
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	9306      	str	r3, [sp, #24]
 801027c:	9b08      	ldr	r3, [sp, #32]
 801027e:	b30b      	cbz	r3, 80102c4 <_dtoa_r+0x794>
 8010280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010282:	2b00      	cmp	r3, #0
 8010284:	f000 80c6 	beq.w	8010414 <_dtoa_r+0x8e4>
 8010288:	2c00      	cmp	r4, #0
 801028a:	f000 80c0 	beq.w	801040e <_dtoa_r+0x8de>
 801028e:	4629      	mov	r1, r5
 8010290:	4622      	mov	r2, r4
 8010292:	4648      	mov	r0, r9
 8010294:	f001 f85e 	bl	8011354 <__pow5mult>
 8010298:	9a02      	ldr	r2, [sp, #8]
 801029a:	4601      	mov	r1, r0
 801029c:	4605      	mov	r5, r0
 801029e:	4648      	mov	r0, r9
 80102a0:	f000 ffb6 	bl	8011210 <__multiply>
 80102a4:	9902      	ldr	r1, [sp, #8]
 80102a6:	4680      	mov	r8, r0
 80102a8:	4648      	mov	r0, r9
 80102aa:	f000 fe9d 	bl	8010fe8 <_Bfree>
 80102ae:	9b08      	ldr	r3, [sp, #32]
 80102b0:	1b1b      	subs	r3, r3, r4
 80102b2:	9308      	str	r3, [sp, #32]
 80102b4:	f000 80b1 	beq.w	801041a <_dtoa_r+0x8ea>
 80102b8:	9a08      	ldr	r2, [sp, #32]
 80102ba:	4641      	mov	r1, r8
 80102bc:	4648      	mov	r0, r9
 80102be:	f001 f849 	bl	8011354 <__pow5mult>
 80102c2:	9002      	str	r0, [sp, #8]
 80102c4:	2101      	movs	r1, #1
 80102c6:	4648      	mov	r0, r9
 80102c8:	f000 ff8c 	bl	80111e4 <__i2b>
 80102cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80102ce:	4604      	mov	r4, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	f000 81d8 	beq.w	8010686 <_dtoa_r+0xb56>
 80102d6:	461a      	mov	r2, r3
 80102d8:	4601      	mov	r1, r0
 80102da:	4648      	mov	r0, r9
 80102dc:	f001 f83a 	bl	8011354 <__pow5mult>
 80102e0:	9b07      	ldr	r3, [sp, #28]
 80102e2:	2b01      	cmp	r3, #1
 80102e4:	4604      	mov	r4, r0
 80102e6:	f300 809f 	bgt.w	8010428 <_dtoa_r+0x8f8>
 80102ea:	9b04      	ldr	r3, [sp, #16]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	f040 8097 	bne.w	8010420 <_dtoa_r+0x8f0>
 80102f2:	9b05      	ldr	r3, [sp, #20]
 80102f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f040 8093 	bne.w	8010424 <_dtoa_r+0x8f4>
 80102fe:	9b05      	ldr	r3, [sp, #20]
 8010300:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010304:	0d1b      	lsrs	r3, r3, #20
 8010306:	051b      	lsls	r3, r3, #20
 8010308:	b133      	cbz	r3, 8010318 <_dtoa_r+0x7e8>
 801030a:	9b00      	ldr	r3, [sp, #0]
 801030c:	3301      	adds	r3, #1
 801030e:	9300      	str	r3, [sp, #0]
 8010310:	9b06      	ldr	r3, [sp, #24]
 8010312:	3301      	adds	r3, #1
 8010314:	9306      	str	r3, [sp, #24]
 8010316:	2301      	movs	r3, #1
 8010318:	9308      	str	r3, [sp, #32]
 801031a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801031c:	2b00      	cmp	r3, #0
 801031e:	f000 81b8 	beq.w	8010692 <_dtoa_r+0xb62>
 8010322:	6923      	ldr	r3, [r4, #16]
 8010324:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010328:	6918      	ldr	r0, [r3, #16]
 801032a:	f000 ff0f 	bl	801114c <__hi0bits>
 801032e:	f1c0 0020 	rsb	r0, r0, #32
 8010332:	9b06      	ldr	r3, [sp, #24]
 8010334:	4418      	add	r0, r3
 8010336:	f010 001f 	ands.w	r0, r0, #31
 801033a:	f000 8082 	beq.w	8010442 <_dtoa_r+0x912>
 801033e:	f1c0 0320 	rsb	r3, r0, #32
 8010342:	2b04      	cmp	r3, #4
 8010344:	dd73      	ble.n	801042e <_dtoa_r+0x8fe>
 8010346:	9b00      	ldr	r3, [sp, #0]
 8010348:	f1c0 001c 	rsb	r0, r0, #28
 801034c:	4403      	add	r3, r0
 801034e:	9300      	str	r3, [sp, #0]
 8010350:	9b06      	ldr	r3, [sp, #24]
 8010352:	4403      	add	r3, r0
 8010354:	4406      	add	r6, r0
 8010356:	9306      	str	r3, [sp, #24]
 8010358:	9b00      	ldr	r3, [sp, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	dd05      	ble.n	801036a <_dtoa_r+0x83a>
 801035e:	9902      	ldr	r1, [sp, #8]
 8010360:	461a      	mov	r2, r3
 8010362:	4648      	mov	r0, r9
 8010364:	f001 f850 	bl	8011408 <__lshift>
 8010368:	9002      	str	r0, [sp, #8]
 801036a:	9b06      	ldr	r3, [sp, #24]
 801036c:	2b00      	cmp	r3, #0
 801036e:	dd05      	ble.n	801037c <_dtoa_r+0x84c>
 8010370:	4621      	mov	r1, r4
 8010372:	461a      	mov	r2, r3
 8010374:	4648      	mov	r0, r9
 8010376:	f001 f847 	bl	8011408 <__lshift>
 801037a:	4604      	mov	r4, r0
 801037c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801037e:	2b00      	cmp	r3, #0
 8010380:	d061      	beq.n	8010446 <_dtoa_r+0x916>
 8010382:	9802      	ldr	r0, [sp, #8]
 8010384:	4621      	mov	r1, r4
 8010386:	f001 f8ab 	bl	80114e0 <__mcmp>
 801038a:	2800      	cmp	r0, #0
 801038c:	da5b      	bge.n	8010446 <_dtoa_r+0x916>
 801038e:	2300      	movs	r3, #0
 8010390:	9902      	ldr	r1, [sp, #8]
 8010392:	220a      	movs	r2, #10
 8010394:	4648      	mov	r0, r9
 8010396:	f000 fe49 	bl	801102c <__multadd>
 801039a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801039c:	9002      	str	r0, [sp, #8]
 801039e:	f107 38ff 	add.w	r8, r7, #4294967295
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	f000 8177 	beq.w	8010696 <_dtoa_r+0xb66>
 80103a8:	4629      	mov	r1, r5
 80103aa:	2300      	movs	r3, #0
 80103ac:	220a      	movs	r2, #10
 80103ae:	4648      	mov	r0, r9
 80103b0:	f000 fe3c 	bl	801102c <__multadd>
 80103b4:	f1bb 0f00 	cmp.w	fp, #0
 80103b8:	4605      	mov	r5, r0
 80103ba:	dc6f      	bgt.n	801049c <_dtoa_r+0x96c>
 80103bc:	9b07      	ldr	r3, [sp, #28]
 80103be:	2b02      	cmp	r3, #2
 80103c0:	dc49      	bgt.n	8010456 <_dtoa_r+0x926>
 80103c2:	e06b      	b.n	801049c <_dtoa_r+0x96c>
 80103c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80103c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80103ca:	e73c      	b.n	8010246 <_dtoa_r+0x716>
 80103cc:	3fe00000 	.word	0x3fe00000
 80103d0:	40240000 	.word	0x40240000
 80103d4:	9b03      	ldr	r3, [sp, #12]
 80103d6:	1e5c      	subs	r4, r3, #1
 80103d8:	9b08      	ldr	r3, [sp, #32]
 80103da:	42a3      	cmp	r3, r4
 80103dc:	db09      	blt.n	80103f2 <_dtoa_r+0x8c2>
 80103de:	1b1c      	subs	r4, r3, r4
 80103e0:	9b03      	ldr	r3, [sp, #12]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	f6bf af30 	bge.w	8010248 <_dtoa_r+0x718>
 80103e8:	9b00      	ldr	r3, [sp, #0]
 80103ea:	9a03      	ldr	r2, [sp, #12]
 80103ec:	1a9e      	subs	r6, r3, r2
 80103ee:	2300      	movs	r3, #0
 80103f0:	e72b      	b.n	801024a <_dtoa_r+0x71a>
 80103f2:	9b08      	ldr	r3, [sp, #32]
 80103f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80103f6:	9408      	str	r4, [sp, #32]
 80103f8:	1ae3      	subs	r3, r4, r3
 80103fa:	441a      	add	r2, r3
 80103fc:	9e00      	ldr	r6, [sp, #0]
 80103fe:	9b03      	ldr	r3, [sp, #12]
 8010400:	920d      	str	r2, [sp, #52]	@ 0x34
 8010402:	2400      	movs	r4, #0
 8010404:	e721      	b.n	801024a <_dtoa_r+0x71a>
 8010406:	9c08      	ldr	r4, [sp, #32]
 8010408:	9e00      	ldr	r6, [sp, #0]
 801040a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801040c:	e728      	b.n	8010260 <_dtoa_r+0x730>
 801040e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010412:	e751      	b.n	80102b8 <_dtoa_r+0x788>
 8010414:	9a08      	ldr	r2, [sp, #32]
 8010416:	9902      	ldr	r1, [sp, #8]
 8010418:	e750      	b.n	80102bc <_dtoa_r+0x78c>
 801041a:	f8cd 8008 	str.w	r8, [sp, #8]
 801041e:	e751      	b.n	80102c4 <_dtoa_r+0x794>
 8010420:	2300      	movs	r3, #0
 8010422:	e779      	b.n	8010318 <_dtoa_r+0x7e8>
 8010424:	9b04      	ldr	r3, [sp, #16]
 8010426:	e777      	b.n	8010318 <_dtoa_r+0x7e8>
 8010428:	2300      	movs	r3, #0
 801042a:	9308      	str	r3, [sp, #32]
 801042c:	e779      	b.n	8010322 <_dtoa_r+0x7f2>
 801042e:	d093      	beq.n	8010358 <_dtoa_r+0x828>
 8010430:	9a00      	ldr	r2, [sp, #0]
 8010432:	331c      	adds	r3, #28
 8010434:	441a      	add	r2, r3
 8010436:	9200      	str	r2, [sp, #0]
 8010438:	9a06      	ldr	r2, [sp, #24]
 801043a:	441a      	add	r2, r3
 801043c:	441e      	add	r6, r3
 801043e:	9206      	str	r2, [sp, #24]
 8010440:	e78a      	b.n	8010358 <_dtoa_r+0x828>
 8010442:	4603      	mov	r3, r0
 8010444:	e7f4      	b.n	8010430 <_dtoa_r+0x900>
 8010446:	9b03      	ldr	r3, [sp, #12]
 8010448:	2b00      	cmp	r3, #0
 801044a:	46b8      	mov	r8, r7
 801044c:	dc20      	bgt.n	8010490 <_dtoa_r+0x960>
 801044e:	469b      	mov	fp, r3
 8010450:	9b07      	ldr	r3, [sp, #28]
 8010452:	2b02      	cmp	r3, #2
 8010454:	dd1e      	ble.n	8010494 <_dtoa_r+0x964>
 8010456:	f1bb 0f00 	cmp.w	fp, #0
 801045a:	f47f adb1 	bne.w	800ffc0 <_dtoa_r+0x490>
 801045e:	4621      	mov	r1, r4
 8010460:	465b      	mov	r3, fp
 8010462:	2205      	movs	r2, #5
 8010464:	4648      	mov	r0, r9
 8010466:	f000 fde1 	bl	801102c <__multadd>
 801046a:	4601      	mov	r1, r0
 801046c:	4604      	mov	r4, r0
 801046e:	9802      	ldr	r0, [sp, #8]
 8010470:	f001 f836 	bl	80114e0 <__mcmp>
 8010474:	2800      	cmp	r0, #0
 8010476:	f77f ada3 	ble.w	800ffc0 <_dtoa_r+0x490>
 801047a:	4656      	mov	r6, sl
 801047c:	2331      	movs	r3, #49	@ 0x31
 801047e:	f806 3b01 	strb.w	r3, [r6], #1
 8010482:	f108 0801 	add.w	r8, r8, #1
 8010486:	e59f      	b.n	800ffc8 <_dtoa_r+0x498>
 8010488:	9c03      	ldr	r4, [sp, #12]
 801048a:	46b8      	mov	r8, r7
 801048c:	4625      	mov	r5, r4
 801048e:	e7f4      	b.n	801047a <_dtoa_r+0x94a>
 8010490:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010496:	2b00      	cmp	r3, #0
 8010498:	f000 8101 	beq.w	801069e <_dtoa_r+0xb6e>
 801049c:	2e00      	cmp	r6, #0
 801049e:	dd05      	ble.n	80104ac <_dtoa_r+0x97c>
 80104a0:	4629      	mov	r1, r5
 80104a2:	4632      	mov	r2, r6
 80104a4:	4648      	mov	r0, r9
 80104a6:	f000 ffaf 	bl	8011408 <__lshift>
 80104aa:	4605      	mov	r5, r0
 80104ac:	9b08      	ldr	r3, [sp, #32]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d05c      	beq.n	801056c <_dtoa_r+0xa3c>
 80104b2:	6869      	ldr	r1, [r5, #4]
 80104b4:	4648      	mov	r0, r9
 80104b6:	f000 fd57 	bl	8010f68 <_Balloc>
 80104ba:	4606      	mov	r6, r0
 80104bc:	b928      	cbnz	r0, 80104ca <_dtoa_r+0x99a>
 80104be:	4b82      	ldr	r3, [pc, #520]	@ (80106c8 <_dtoa_r+0xb98>)
 80104c0:	4602      	mov	r2, r0
 80104c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80104c6:	f7ff bb4a 	b.w	800fb5e <_dtoa_r+0x2e>
 80104ca:	692a      	ldr	r2, [r5, #16]
 80104cc:	3202      	adds	r2, #2
 80104ce:	0092      	lsls	r2, r2, #2
 80104d0:	f105 010c 	add.w	r1, r5, #12
 80104d4:	300c      	adds	r0, #12
 80104d6:	f7ff fa66 	bl	800f9a6 <memcpy>
 80104da:	2201      	movs	r2, #1
 80104dc:	4631      	mov	r1, r6
 80104de:	4648      	mov	r0, r9
 80104e0:	f000 ff92 	bl	8011408 <__lshift>
 80104e4:	f10a 0301 	add.w	r3, sl, #1
 80104e8:	9300      	str	r3, [sp, #0]
 80104ea:	eb0a 030b 	add.w	r3, sl, fp
 80104ee:	9308      	str	r3, [sp, #32]
 80104f0:	9b04      	ldr	r3, [sp, #16]
 80104f2:	f003 0301 	and.w	r3, r3, #1
 80104f6:	462f      	mov	r7, r5
 80104f8:	9306      	str	r3, [sp, #24]
 80104fa:	4605      	mov	r5, r0
 80104fc:	9b00      	ldr	r3, [sp, #0]
 80104fe:	9802      	ldr	r0, [sp, #8]
 8010500:	4621      	mov	r1, r4
 8010502:	f103 3bff 	add.w	fp, r3, #4294967295
 8010506:	f7ff fa8b 	bl	800fa20 <quorem>
 801050a:	4603      	mov	r3, r0
 801050c:	3330      	adds	r3, #48	@ 0x30
 801050e:	9003      	str	r0, [sp, #12]
 8010510:	4639      	mov	r1, r7
 8010512:	9802      	ldr	r0, [sp, #8]
 8010514:	9309      	str	r3, [sp, #36]	@ 0x24
 8010516:	f000 ffe3 	bl	80114e0 <__mcmp>
 801051a:	462a      	mov	r2, r5
 801051c:	9004      	str	r0, [sp, #16]
 801051e:	4621      	mov	r1, r4
 8010520:	4648      	mov	r0, r9
 8010522:	f000 fff9 	bl	8011518 <__mdiff>
 8010526:	68c2      	ldr	r2, [r0, #12]
 8010528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801052a:	4606      	mov	r6, r0
 801052c:	bb02      	cbnz	r2, 8010570 <_dtoa_r+0xa40>
 801052e:	4601      	mov	r1, r0
 8010530:	9802      	ldr	r0, [sp, #8]
 8010532:	f000 ffd5 	bl	80114e0 <__mcmp>
 8010536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010538:	4602      	mov	r2, r0
 801053a:	4631      	mov	r1, r6
 801053c:	4648      	mov	r0, r9
 801053e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010540:	9309      	str	r3, [sp, #36]	@ 0x24
 8010542:	f000 fd51 	bl	8010fe8 <_Bfree>
 8010546:	9b07      	ldr	r3, [sp, #28]
 8010548:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801054a:	9e00      	ldr	r6, [sp, #0]
 801054c:	ea42 0103 	orr.w	r1, r2, r3
 8010550:	9b06      	ldr	r3, [sp, #24]
 8010552:	4319      	orrs	r1, r3
 8010554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010556:	d10d      	bne.n	8010574 <_dtoa_r+0xa44>
 8010558:	2b39      	cmp	r3, #57	@ 0x39
 801055a:	d027      	beq.n	80105ac <_dtoa_r+0xa7c>
 801055c:	9a04      	ldr	r2, [sp, #16]
 801055e:	2a00      	cmp	r2, #0
 8010560:	dd01      	ble.n	8010566 <_dtoa_r+0xa36>
 8010562:	9b03      	ldr	r3, [sp, #12]
 8010564:	3331      	adds	r3, #49	@ 0x31
 8010566:	f88b 3000 	strb.w	r3, [fp]
 801056a:	e52e      	b.n	800ffca <_dtoa_r+0x49a>
 801056c:	4628      	mov	r0, r5
 801056e:	e7b9      	b.n	80104e4 <_dtoa_r+0x9b4>
 8010570:	2201      	movs	r2, #1
 8010572:	e7e2      	b.n	801053a <_dtoa_r+0xa0a>
 8010574:	9904      	ldr	r1, [sp, #16]
 8010576:	2900      	cmp	r1, #0
 8010578:	db04      	blt.n	8010584 <_dtoa_r+0xa54>
 801057a:	9807      	ldr	r0, [sp, #28]
 801057c:	4301      	orrs	r1, r0
 801057e:	9806      	ldr	r0, [sp, #24]
 8010580:	4301      	orrs	r1, r0
 8010582:	d120      	bne.n	80105c6 <_dtoa_r+0xa96>
 8010584:	2a00      	cmp	r2, #0
 8010586:	ddee      	ble.n	8010566 <_dtoa_r+0xa36>
 8010588:	9902      	ldr	r1, [sp, #8]
 801058a:	9300      	str	r3, [sp, #0]
 801058c:	2201      	movs	r2, #1
 801058e:	4648      	mov	r0, r9
 8010590:	f000 ff3a 	bl	8011408 <__lshift>
 8010594:	4621      	mov	r1, r4
 8010596:	9002      	str	r0, [sp, #8]
 8010598:	f000 ffa2 	bl	80114e0 <__mcmp>
 801059c:	2800      	cmp	r0, #0
 801059e:	9b00      	ldr	r3, [sp, #0]
 80105a0:	dc02      	bgt.n	80105a8 <_dtoa_r+0xa78>
 80105a2:	d1e0      	bne.n	8010566 <_dtoa_r+0xa36>
 80105a4:	07da      	lsls	r2, r3, #31
 80105a6:	d5de      	bpl.n	8010566 <_dtoa_r+0xa36>
 80105a8:	2b39      	cmp	r3, #57	@ 0x39
 80105aa:	d1da      	bne.n	8010562 <_dtoa_r+0xa32>
 80105ac:	2339      	movs	r3, #57	@ 0x39
 80105ae:	f88b 3000 	strb.w	r3, [fp]
 80105b2:	4633      	mov	r3, r6
 80105b4:	461e      	mov	r6, r3
 80105b6:	3b01      	subs	r3, #1
 80105b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80105bc:	2a39      	cmp	r2, #57	@ 0x39
 80105be:	d04e      	beq.n	801065e <_dtoa_r+0xb2e>
 80105c0:	3201      	adds	r2, #1
 80105c2:	701a      	strb	r2, [r3, #0]
 80105c4:	e501      	b.n	800ffca <_dtoa_r+0x49a>
 80105c6:	2a00      	cmp	r2, #0
 80105c8:	dd03      	ble.n	80105d2 <_dtoa_r+0xaa2>
 80105ca:	2b39      	cmp	r3, #57	@ 0x39
 80105cc:	d0ee      	beq.n	80105ac <_dtoa_r+0xa7c>
 80105ce:	3301      	adds	r3, #1
 80105d0:	e7c9      	b.n	8010566 <_dtoa_r+0xa36>
 80105d2:	9a00      	ldr	r2, [sp, #0]
 80105d4:	9908      	ldr	r1, [sp, #32]
 80105d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80105da:	428a      	cmp	r2, r1
 80105dc:	d028      	beq.n	8010630 <_dtoa_r+0xb00>
 80105de:	9902      	ldr	r1, [sp, #8]
 80105e0:	2300      	movs	r3, #0
 80105e2:	220a      	movs	r2, #10
 80105e4:	4648      	mov	r0, r9
 80105e6:	f000 fd21 	bl	801102c <__multadd>
 80105ea:	42af      	cmp	r7, r5
 80105ec:	9002      	str	r0, [sp, #8]
 80105ee:	f04f 0300 	mov.w	r3, #0
 80105f2:	f04f 020a 	mov.w	r2, #10
 80105f6:	4639      	mov	r1, r7
 80105f8:	4648      	mov	r0, r9
 80105fa:	d107      	bne.n	801060c <_dtoa_r+0xadc>
 80105fc:	f000 fd16 	bl	801102c <__multadd>
 8010600:	4607      	mov	r7, r0
 8010602:	4605      	mov	r5, r0
 8010604:	9b00      	ldr	r3, [sp, #0]
 8010606:	3301      	adds	r3, #1
 8010608:	9300      	str	r3, [sp, #0]
 801060a:	e777      	b.n	80104fc <_dtoa_r+0x9cc>
 801060c:	f000 fd0e 	bl	801102c <__multadd>
 8010610:	4629      	mov	r1, r5
 8010612:	4607      	mov	r7, r0
 8010614:	2300      	movs	r3, #0
 8010616:	220a      	movs	r2, #10
 8010618:	4648      	mov	r0, r9
 801061a:	f000 fd07 	bl	801102c <__multadd>
 801061e:	4605      	mov	r5, r0
 8010620:	e7f0      	b.n	8010604 <_dtoa_r+0xad4>
 8010622:	f1bb 0f00 	cmp.w	fp, #0
 8010626:	bfcc      	ite	gt
 8010628:	465e      	movgt	r6, fp
 801062a:	2601      	movle	r6, #1
 801062c:	4456      	add	r6, sl
 801062e:	2700      	movs	r7, #0
 8010630:	9902      	ldr	r1, [sp, #8]
 8010632:	9300      	str	r3, [sp, #0]
 8010634:	2201      	movs	r2, #1
 8010636:	4648      	mov	r0, r9
 8010638:	f000 fee6 	bl	8011408 <__lshift>
 801063c:	4621      	mov	r1, r4
 801063e:	9002      	str	r0, [sp, #8]
 8010640:	f000 ff4e 	bl	80114e0 <__mcmp>
 8010644:	2800      	cmp	r0, #0
 8010646:	dcb4      	bgt.n	80105b2 <_dtoa_r+0xa82>
 8010648:	d102      	bne.n	8010650 <_dtoa_r+0xb20>
 801064a:	9b00      	ldr	r3, [sp, #0]
 801064c:	07db      	lsls	r3, r3, #31
 801064e:	d4b0      	bmi.n	80105b2 <_dtoa_r+0xa82>
 8010650:	4633      	mov	r3, r6
 8010652:	461e      	mov	r6, r3
 8010654:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010658:	2a30      	cmp	r2, #48	@ 0x30
 801065a:	d0fa      	beq.n	8010652 <_dtoa_r+0xb22>
 801065c:	e4b5      	b.n	800ffca <_dtoa_r+0x49a>
 801065e:	459a      	cmp	sl, r3
 8010660:	d1a8      	bne.n	80105b4 <_dtoa_r+0xa84>
 8010662:	2331      	movs	r3, #49	@ 0x31
 8010664:	f108 0801 	add.w	r8, r8, #1
 8010668:	f88a 3000 	strb.w	r3, [sl]
 801066c:	e4ad      	b.n	800ffca <_dtoa_r+0x49a>
 801066e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010670:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80106cc <_dtoa_r+0xb9c>
 8010674:	b11b      	cbz	r3, 801067e <_dtoa_r+0xb4e>
 8010676:	f10a 0308 	add.w	r3, sl, #8
 801067a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801067c:	6013      	str	r3, [r2, #0]
 801067e:	4650      	mov	r0, sl
 8010680:	b017      	add	sp, #92	@ 0x5c
 8010682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010686:	9b07      	ldr	r3, [sp, #28]
 8010688:	2b01      	cmp	r3, #1
 801068a:	f77f ae2e 	ble.w	80102ea <_dtoa_r+0x7ba>
 801068e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010690:	9308      	str	r3, [sp, #32]
 8010692:	2001      	movs	r0, #1
 8010694:	e64d      	b.n	8010332 <_dtoa_r+0x802>
 8010696:	f1bb 0f00 	cmp.w	fp, #0
 801069a:	f77f aed9 	ble.w	8010450 <_dtoa_r+0x920>
 801069e:	4656      	mov	r6, sl
 80106a0:	9802      	ldr	r0, [sp, #8]
 80106a2:	4621      	mov	r1, r4
 80106a4:	f7ff f9bc 	bl	800fa20 <quorem>
 80106a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80106ac:	f806 3b01 	strb.w	r3, [r6], #1
 80106b0:	eba6 020a 	sub.w	r2, r6, sl
 80106b4:	4593      	cmp	fp, r2
 80106b6:	ddb4      	ble.n	8010622 <_dtoa_r+0xaf2>
 80106b8:	9902      	ldr	r1, [sp, #8]
 80106ba:	2300      	movs	r3, #0
 80106bc:	220a      	movs	r2, #10
 80106be:	4648      	mov	r0, r9
 80106c0:	f000 fcb4 	bl	801102c <__multadd>
 80106c4:	9002      	str	r0, [sp, #8]
 80106c6:	e7eb      	b.n	80106a0 <_dtoa_r+0xb70>
 80106c8:	0806d057 	.word	0x0806d057
 80106cc:	0806cff2 	.word	0x0806cff2

080106d0 <_free_r>:
 80106d0:	b538      	push	{r3, r4, r5, lr}
 80106d2:	4605      	mov	r5, r0
 80106d4:	2900      	cmp	r1, #0
 80106d6:	d041      	beq.n	801075c <_free_r+0x8c>
 80106d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106dc:	1f0c      	subs	r4, r1, #4
 80106de:	2b00      	cmp	r3, #0
 80106e0:	bfb8      	it	lt
 80106e2:	18e4      	addlt	r4, r4, r3
 80106e4:	f000 fc34 	bl	8010f50 <__malloc_lock>
 80106e8:	4a1d      	ldr	r2, [pc, #116]	@ (8010760 <_free_r+0x90>)
 80106ea:	6813      	ldr	r3, [r2, #0]
 80106ec:	b933      	cbnz	r3, 80106fc <_free_r+0x2c>
 80106ee:	6063      	str	r3, [r4, #4]
 80106f0:	6014      	str	r4, [r2, #0]
 80106f2:	4628      	mov	r0, r5
 80106f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106f8:	f000 bc30 	b.w	8010f5c <__malloc_unlock>
 80106fc:	42a3      	cmp	r3, r4
 80106fe:	d908      	bls.n	8010712 <_free_r+0x42>
 8010700:	6820      	ldr	r0, [r4, #0]
 8010702:	1821      	adds	r1, r4, r0
 8010704:	428b      	cmp	r3, r1
 8010706:	bf01      	itttt	eq
 8010708:	6819      	ldreq	r1, [r3, #0]
 801070a:	685b      	ldreq	r3, [r3, #4]
 801070c:	1809      	addeq	r1, r1, r0
 801070e:	6021      	streq	r1, [r4, #0]
 8010710:	e7ed      	b.n	80106ee <_free_r+0x1e>
 8010712:	461a      	mov	r2, r3
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	b10b      	cbz	r3, 801071c <_free_r+0x4c>
 8010718:	42a3      	cmp	r3, r4
 801071a:	d9fa      	bls.n	8010712 <_free_r+0x42>
 801071c:	6811      	ldr	r1, [r2, #0]
 801071e:	1850      	adds	r0, r2, r1
 8010720:	42a0      	cmp	r0, r4
 8010722:	d10b      	bne.n	801073c <_free_r+0x6c>
 8010724:	6820      	ldr	r0, [r4, #0]
 8010726:	4401      	add	r1, r0
 8010728:	1850      	adds	r0, r2, r1
 801072a:	4283      	cmp	r3, r0
 801072c:	6011      	str	r1, [r2, #0]
 801072e:	d1e0      	bne.n	80106f2 <_free_r+0x22>
 8010730:	6818      	ldr	r0, [r3, #0]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	6053      	str	r3, [r2, #4]
 8010736:	4408      	add	r0, r1
 8010738:	6010      	str	r0, [r2, #0]
 801073a:	e7da      	b.n	80106f2 <_free_r+0x22>
 801073c:	d902      	bls.n	8010744 <_free_r+0x74>
 801073e:	230c      	movs	r3, #12
 8010740:	602b      	str	r3, [r5, #0]
 8010742:	e7d6      	b.n	80106f2 <_free_r+0x22>
 8010744:	6820      	ldr	r0, [r4, #0]
 8010746:	1821      	adds	r1, r4, r0
 8010748:	428b      	cmp	r3, r1
 801074a:	bf04      	itt	eq
 801074c:	6819      	ldreq	r1, [r3, #0]
 801074e:	685b      	ldreq	r3, [r3, #4]
 8010750:	6063      	str	r3, [r4, #4]
 8010752:	bf04      	itt	eq
 8010754:	1809      	addeq	r1, r1, r0
 8010756:	6021      	streq	r1, [r4, #0]
 8010758:	6054      	str	r4, [r2, #4]
 801075a:	e7ca      	b.n	80106f2 <_free_r+0x22>
 801075c:	bd38      	pop	{r3, r4, r5, pc}
 801075e:	bf00      	nop
 8010760:	2001a318 	.word	0x2001a318

08010764 <rshift>:
 8010764:	6903      	ldr	r3, [r0, #16]
 8010766:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801076a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801076e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010772:	f100 0414 	add.w	r4, r0, #20
 8010776:	dd45      	ble.n	8010804 <rshift+0xa0>
 8010778:	f011 011f 	ands.w	r1, r1, #31
 801077c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010780:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010784:	d10c      	bne.n	80107a0 <rshift+0x3c>
 8010786:	f100 0710 	add.w	r7, r0, #16
 801078a:	4629      	mov	r1, r5
 801078c:	42b1      	cmp	r1, r6
 801078e:	d334      	bcc.n	80107fa <rshift+0x96>
 8010790:	1a9b      	subs	r3, r3, r2
 8010792:	009b      	lsls	r3, r3, #2
 8010794:	1eea      	subs	r2, r5, #3
 8010796:	4296      	cmp	r6, r2
 8010798:	bf38      	it	cc
 801079a:	2300      	movcc	r3, #0
 801079c:	4423      	add	r3, r4
 801079e:	e015      	b.n	80107cc <rshift+0x68>
 80107a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80107a4:	f1c1 0820 	rsb	r8, r1, #32
 80107a8:	40cf      	lsrs	r7, r1
 80107aa:	f105 0e04 	add.w	lr, r5, #4
 80107ae:	46a1      	mov	r9, r4
 80107b0:	4576      	cmp	r6, lr
 80107b2:	46f4      	mov	ip, lr
 80107b4:	d815      	bhi.n	80107e2 <rshift+0x7e>
 80107b6:	1a9a      	subs	r2, r3, r2
 80107b8:	0092      	lsls	r2, r2, #2
 80107ba:	3a04      	subs	r2, #4
 80107bc:	3501      	adds	r5, #1
 80107be:	42ae      	cmp	r6, r5
 80107c0:	bf38      	it	cc
 80107c2:	2200      	movcc	r2, #0
 80107c4:	18a3      	adds	r3, r4, r2
 80107c6:	50a7      	str	r7, [r4, r2]
 80107c8:	b107      	cbz	r7, 80107cc <rshift+0x68>
 80107ca:	3304      	adds	r3, #4
 80107cc:	1b1a      	subs	r2, r3, r4
 80107ce:	42a3      	cmp	r3, r4
 80107d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80107d4:	bf08      	it	eq
 80107d6:	2300      	moveq	r3, #0
 80107d8:	6102      	str	r2, [r0, #16]
 80107da:	bf08      	it	eq
 80107dc:	6143      	streq	r3, [r0, #20]
 80107de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107e2:	f8dc c000 	ldr.w	ip, [ip]
 80107e6:	fa0c fc08 	lsl.w	ip, ip, r8
 80107ea:	ea4c 0707 	orr.w	r7, ip, r7
 80107ee:	f849 7b04 	str.w	r7, [r9], #4
 80107f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80107f6:	40cf      	lsrs	r7, r1
 80107f8:	e7da      	b.n	80107b0 <rshift+0x4c>
 80107fa:	f851 cb04 	ldr.w	ip, [r1], #4
 80107fe:	f847 cf04 	str.w	ip, [r7, #4]!
 8010802:	e7c3      	b.n	801078c <rshift+0x28>
 8010804:	4623      	mov	r3, r4
 8010806:	e7e1      	b.n	80107cc <rshift+0x68>

08010808 <__hexdig_fun>:
 8010808:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801080c:	2b09      	cmp	r3, #9
 801080e:	d802      	bhi.n	8010816 <__hexdig_fun+0xe>
 8010810:	3820      	subs	r0, #32
 8010812:	b2c0      	uxtb	r0, r0
 8010814:	4770      	bx	lr
 8010816:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801081a:	2b05      	cmp	r3, #5
 801081c:	d801      	bhi.n	8010822 <__hexdig_fun+0x1a>
 801081e:	3847      	subs	r0, #71	@ 0x47
 8010820:	e7f7      	b.n	8010812 <__hexdig_fun+0xa>
 8010822:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010826:	2b05      	cmp	r3, #5
 8010828:	d801      	bhi.n	801082e <__hexdig_fun+0x26>
 801082a:	3827      	subs	r0, #39	@ 0x27
 801082c:	e7f1      	b.n	8010812 <__hexdig_fun+0xa>
 801082e:	2000      	movs	r0, #0
 8010830:	4770      	bx	lr
	...

08010834 <__gethex>:
 8010834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010838:	b085      	sub	sp, #20
 801083a:	468a      	mov	sl, r1
 801083c:	9302      	str	r3, [sp, #8]
 801083e:	680b      	ldr	r3, [r1, #0]
 8010840:	9001      	str	r0, [sp, #4]
 8010842:	4690      	mov	r8, r2
 8010844:	1c9c      	adds	r4, r3, #2
 8010846:	46a1      	mov	r9, r4
 8010848:	f814 0b01 	ldrb.w	r0, [r4], #1
 801084c:	2830      	cmp	r0, #48	@ 0x30
 801084e:	d0fa      	beq.n	8010846 <__gethex+0x12>
 8010850:	eba9 0303 	sub.w	r3, r9, r3
 8010854:	f1a3 0b02 	sub.w	fp, r3, #2
 8010858:	f7ff ffd6 	bl	8010808 <__hexdig_fun>
 801085c:	4605      	mov	r5, r0
 801085e:	2800      	cmp	r0, #0
 8010860:	d168      	bne.n	8010934 <__gethex+0x100>
 8010862:	49a0      	ldr	r1, [pc, #640]	@ (8010ae4 <__gethex+0x2b0>)
 8010864:	2201      	movs	r2, #1
 8010866:	4648      	mov	r0, r9
 8010868:	f7fe ff8e 	bl	800f788 <strncmp>
 801086c:	4607      	mov	r7, r0
 801086e:	2800      	cmp	r0, #0
 8010870:	d167      	bne.n	8010942 <__gethex+0x10e>
 8010872:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010876:	4626      	mov	r6, r4
 8010878:	f7ff ffc6 	bl	8010808 <__hexdig_fun>
 801087c:	2800      	cmp	r0, #0
 801087e:	d062      	beq.n	8010946 <__gethex+0x112>
 8010880:	4623      	mov	r3, r4
 8010882:	7818      	ldrb	r0, [r3, #0]
 8010884:	2830      	cmp	r0, #48	@ 0x30
 8010886:	4699      	mov	r9, r3
 8010888:	f103 0301 	add.w	r3, r3, #1
 801088c:	d0f9      	beq.n	8010882 <__gethex+0x4e>
 801088e:	f7ff ffbb 	bl	8010808 <__hexdig_fun>
 8010892:	fab0 f580 	clz	r5, r0
 8010896:	096d      	lsrs	r5, r5, #5
 8010898:	f04f 0b01 	mov.w	fp, #1
 801089c:	464a      	mov	r2, r9
 801089e:	4616      	mov	r6, r2
 80108a0:	3201      	adds	r2, #1
 80108a2:	7830      	ldrb	r0, [r6, #0]
 80108a4:	f7ff ffb0 	bl	8010808 <__hexdig_fun>
 80108a8:	2800      	cmp	r0, #0
 80108aa:	d1f8      	bne.n	801089e <__gethex+0x6a>
 80108ac:	498d      	ldr	r1, [pc, #564]	@ (8010ae4 <__gethex+0x2b0>)
 80108ae:	2201      	movs	r2, #1
 80108b0:	4630      	mov	r0, r6
 80108b2:	f7fe ff69 	bl	800f788 <strncmp>
 80108b6:	2800      	cmp	r0, #0
 80108b8:	d13f      	bne.n	801093a <__gethex+0x106>
 80108ba:	b944      	cbnz	r4, 80108ce <__gethex+0x9a>
 80108bc:	1c74      	adds	r4, r6, #1
 80108be:	4622      	mov	r2, r4
 80108c0:	4616      	mov	r6, r2
 80108c2:	3201      	adds	r2, #1
 80108c4:	7830      	ldrb	r0, [r6, #0]
 80108c6:	f7ff ff9f 	bl	8010808 <__hexdig_fun>
 80108ca:	2800      	cmp	r0, #0
 80108cc:	d1f8      	bne.n	80108c0 <__gethex+0x8c>
 80108ce:	1ba4      	subs	r4, r4, r6
 80108d0:	00a7      	lsls	r7, r4, #2
 80108d2:	7833      	ldrb	r3, [r6, #0]
 80108d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80108d8:	2b50      	cmp	r3, #80	@ 0x50
 80108da:	d13e      	bne.n	801095a <__gethex+0x126>
 80108dc:	7873      	ldrb	r3, [r6, #1]
 80108de:	2b2b      	cmp	r3, #43	@ 0x2b
 80108e0:	d033      	beq.n	801094a <__gethex+0x116>
 80108e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80108e4:	d034      	beq.n	8010950 <__gethex+0x11c>
 80108e6:	1c71      	adds	r1, r6, #1
 80108e8:	2400      	movs	r4, #0
 80108ea:	7808      	ldrb	r0, [r1, #0]
 80108ec:	f7ff ff8c 	bl	8010808 <__hexdig_fun>
 80108f0:	1e43      	subs	r3, r0, #1
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	2b18      	cmp	r3, #24
 80108f6:	d830      	bhi.n	801095a <__gethex+0x126>
 80108f8:	f1a0 0210 	sub.w	r2, r0, #16
 80108fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010900:	f7ff ff82 	bl	8010808 <__hexdig_fun>
 8010904:	f100 3cff 	add.w	ip, r0, #4294967295
 8010908:	fa5f fc8c 	uxtb.w	ip, ip
 801090c:	f1bc 0f18 	cmp.w	ip, #24
 8010910:	f04f 030a 	mov.w	r3, #10
 8010914:	d91e      	bls.n	8010954 <__gethex+0x120>
 8010916:	b104      	cbz	r4, 801091a <__gethex+0xe6>
 8010918:	4252      	negs	r2, r2
 801091a:	4417      	add	r7, r2
 801091c:	f8ca 1000 	str.w	r1, [sl]
 8010920:	b1ed      	cbz	r5, 801095e <__gethex+0x12a>
 8010922:	f1bb 0f00 	cmp.w	fp, #0
 8010926:	bf0c      	ite	eq
 8010928:	2506      	moveq	r5, #6
 801092a:	2500      	movne	r5, #0
 801092c:	4628      	mov	r0, r5
 801092e:	b005      	add	sp, #20
 8010930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010934:	2500      	movs	r5, #0
 8010936:	462c      	mov	r4, r5
 8010938:	e7b0      	b.n	801089c <__gethex+0x68>
 801093a:	2c00      	cmp	r4, #0
 801093c:	d1c7      	bne.n	80108ce <__gethex+0x9a>
 801093e:	4627      	mov	r7, r4
 8010940:	e7c7      	b.n	80108d2 <__gethex+0x9e>
 8010942:	464e      	mov	r6, r9
 8010944:	462f      	mov	r7, r5
 8010946:	2501      	movs	r5, #1
 8010948:	e7c3      	b.n	80108d2 <__gethex+0x9e>
 801094a:	2400      	movs	r4, #0
 801094c:	1cb1      	adds	r1, r6, #2
 801094e:	e7cc      	b.n	80108ea <__gethex+0xb6>
 8010950:	2401      	movs	r4, #1
 8010952:	e7fb      	b.n	801094c <__gethex+0x118>
 8010954:	fb03 0002 	mla	r0, r3, r2, r0
 8010958:	e7ce      	b.n	80108f8 <__gethex+0xc4>
 801095a:	4631      	mov	r1, r6
 801095c:	e7de      	b.n	801091c <__gethex+0xe8>
 801095e:	eba6 0309 	sub.w	r3, r6, r9
 8010962:	3b01      	subs	r3, #1
 8010964:	4629      	mov	r1, r5
 8010966:	2b07      	cmp	r3, #7
 8010968:	dc0a      	bgt.n	8010980 <__gethex+0x14c>
 801096a:	9801      	ldr	r0, [sp, #4]
 801096c:	f000 fafc 	bl	8010f68 <_Balloc>
 8010970:	4604      	mov	r4, r0
 8010972:	b940      	cbnz	r0, 8010986 <__gethex+0x152>
 8010974:	4b5c      	ldr	r3, [pc, #368]	@ (8010ae8 <__gethex+0x2b4>)
 8010976:	4602      	mov	r2, r0
 8010978:	21e4      	movs	r1, #228	@ 0xe4
 801097a:	485c      	ldr	r0, [pc, #368]	@ (8010aec <__gethex+0x2b8>)
 801097c:	f7ff f832 	bl	800f9e4 <__assert_func>
 8010980:	3101      	adds	r1, #1
 8010982:	105b      	asrs	r3, r3, #1
 8010984:	e7ef      	b.n	8010966 <__gethex+0x132>
 8010986:	f100 0a14 	add.w	sl, r0, #20
 801098a:	2300      	movs	r3, #0
 801098c:	4655      	mov	r5, sl
 801098e:	469b      	mov	fp, r3
 8010990:	45b1      	cmp	r9, r6
 8010992:	d337      	bcc.n	8010a04 <__gethex+0x1d0>
 8010994:	f845 bb04 	str.w	fp, [r5], #4
 8010998:	eba5 050a 	sub.w	r5, r5, sl
 801099c:	10ad      	asrs	r5, r5, #2
 801099e:	6125      	str	r5, [r4, #16]
 80109a0:	4658      	mov	r0, fp
 80109a2:	f000 fbd3 	bl	801114c <__hi0bits>
 80109a6:	016d      	lsls	r5, r5, #5
 80109a8:	f8d8 6000 	ldr.w	r6, [r8]
 80109ac:	1a2d      	subs	r5, r5, r0
 80109ae:	42b5      	cmp	r5, r6
 80109b0:	dd54      	ble.n	8010a5c <__gethex+0x228>
 80109b2:	1bad      	subs	r5, r5, r6
 80109b4:	4629      	mov	r1, r5
 80109b6:	4620      	mov	r0, r4
 80109b8:	f000 ff5f 	bl	801187a <__any_on>
 80109bc:	4681      	mov	r9, r0
 80109be:	b178      	cbz	r0, 80109e0 <__gethex+0x1ac>
 80109c0:	1e6b      	subs	r3, r5, #1
 80109c2:	1159      	asrs	r1, r3, #5
 80109c4:	f003 021f 	and.w	r2, r3, #31
 80109c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80109cc:	f04f 0901 	mov.w	r9, #1
 80109d0:	fa09 f202 	lsl.w	r2, r9, r2
 80109d4:	420a      	tst	r2, r1
 80109d6:	d003      	beq.n	80109e0 <__gethex+0x1ac>
 80109d8:	454b      	cmp	r3, r9
 80109da:	dc36      	bgt.n	8010a4a <__gethex+0x216>
 80109dc:	f04f 0902 	mov.w	r9, #2
 80109e0:	4629      	mov	r1, r5
 80109e2:	4620      	mov	r0, r4
 80109e4:	f7ff febe 	bl	8010764 <rshift>
 80109e8:	442f      	add	r7, r5
 80109ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80109ee:	42bb      	cmp	r3, r7
 80109f0:	da42      	bge.n	8010a78 <__gethex+0x244>
 80109f2:	9801      	ldr	r0, [sp, #4]
 80109f4:	4621      	mov	r1, r4
 80109f6:	f000 faf7 	bl	8010fe8 <_Bfree>
 80109fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80109fc:	2300      	movs	r3, #0
 80109fe:	6013      	str	r3, [r2, #0]
 8010a00:	25a3      	movs	r5, #163	@ 0xa3
 8010a02:	e793      	b.n	801092c <__gethex+0xf8>
 8010a04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010a08:	2a2e      	cmp	r2, #46	@ 0x2e
 8010a0a:	d012      	beq.n	8010a32 <__gethex+0x1fe>
 8010a0c:	2b20      	cmp	r3, #32
 8010a0e:	d104      	bne.n	8010a1a <__gethex+0x1e6>
 8010a10:	f845 bb04 	str.w	fp, [r5], #4
 8010a14:	f04f 0b00 	mov.w	fp, #0
 8010a18:	465b      	mov	r3, fp
 8010a1a:	7830      	ldrb	r0, [r6, #0]
 8010a1c:	9303      	str	r3, [sp, #12]
 8010a1e:	f7ff fef3 	bl	8010808 <__hexdig_fun>
 8010a22:	9b03      	ldr	r3, [sp, #12]
 8010a24:	f000 000f 	and.w	r0, r0, #15
 8010a28:	4098      	lsls	r0, r3
 8010a2a:	ea4b 0b00 	orr.w	fp, fp, r0
 8010a2e:	3304      	adds	r3, #4
 8010a30:	e7ae      	b.n	8010990 <__gethex+0x15c>
 8010a32:	45b1      	cmp	r9, r6
 8010a34:	d8ea      	bhi.n	8010a0c <__gethex+0x1d8>
 8010a36:	492b      	ldr	r1, [pc, #172]	@ (8010ae4 <__gethex+0x2b0>)
 8010a38:	9303      	str	r3, [sp, #12]
 8010a3a:	2201      	movs	r2, #1
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	f7fe fea3 	bl	800f788 <strncmp>
 8010a42:	9b03      	ldr	r3, [sp, #12]
 8010a44:	2800      	cmp	r0, #0
 8010a46:	d1e1      	bne.n	8010a0c <__gethex+0x1d8>
 8010a48:	e7a2      	b.n	8010990 <__gethex+0x15c>
 8010a4a:	1ea9      	subs	r1, r5, #2
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	f000 ff14 	bl	801187a <__any_on>
 8010a52:	2800      	cmp	r0, #0
 8010a54:	d0c2      	beq.n	80109dc <__gethex+0x1a8>
 8010a56:	f04f 0903 	mov.w	r9, #3
 8010a5a:	e7c1      	b.n	80109e0 <__gethex+0x1ac>
 8010a5c:	da09      	bge.n	8010a72 <__gethex+0x23e>
 8010a5e:	1b75      	subs	r5, r6, r5
 8010a60:	4621      	mov	r1, r4
 8010a62:	9801      	ldr	r0, [sp, #4]
 8010a64:	462a      	mov	r2, r5
 8010a66:	f000 fccf 	bl	8011408 <__lshift>
 8010a6a:	1b7f      	subs	r7, r7, r5
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	f100 0a14 	add.w	sl, r0, #20
 8010a72:	f04f 0900 	mov.w	r9, #0
 8010a76:	e7b8      	b.n	80109ea <__gethex+0x1b6>
 8010a78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010a7c:	42bd      	cmp	r5, r7
 8010a7e:	dd6f      	ble.n	8010b60 <__gethex+0x32c>
 8010a80:	1bed      	subs	r5, r5, r7
 8010a82:	42ae      	cmp	r6, r5
 8010a84:	dc34      	bgt.n	8010af0 <__gethex+0x2bc>
 8010a86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a8a:	2b02      	cmp	r3, #2
 8010a8c:	d022      	beq.n	8010ad4 <__gethex+0x2a0>
 8010a8e:	2b03      	cmp	r3, #3
 8010a90:	d024      	beq.n	8010adc <__gethex+0x2a8>
 8010a92:	2b01      	cmp	r3, #1
 8010a94:	d115      	bne.n	8010ac2 <__gethex+0x28e>
 8010a96:	42ae      	cmp	r6, r5
 8010a98:	d113      	bne.n	8010ac2 <__gethex+0x28e>
 8010a9a:	2e01      	cmp	r6, #1
 8010a9c:	d10b      	bne.n	8010ab6 <__gethex+0x282>
 8010a9e:	9a02      	ldr	r2, [sp, #8]
 8010aa0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010aa4:	6013      	str	r3, [r2, #0]
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	6123      	str	r3, [r4, #16]
 8010aaa:	f8ca 3000 	str.w	r3, [sl]
 8010aae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ab0:	2562      	movs	r5, #98	@ 0x62
 8010ab2:	601c      	str	r4, [r3, #0]
 8010ab4:	e73a      	b.n	801092c <__gethex+0xf8>
 8010ab6:	1e71      	subs	r1, r6, #1
 8010ab8:	4620      	mov	r0, r4
 8010aba:	f000 fede 	bl	801187a <__any_on>
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	d1ed      	bne.n	8010a9e <__gethex+0x26a>
 8010ac2:	9801      	ldr	r0, [sp, #4]
 8010ac4:	4621      	mov	r1, r4
 8010ac6:	f000 fa8f 	bl	8010fe8 <_Bfree>
 8010aca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010acc:	2300      	movs	r3, #0
 8010ace:	6013      	str	r3, [r2, #0]
 8010ad0:	2550      	movs	r5, #80	@ 0x50
 8010ad2:	e72b      	b.n	801092c <__gethex+0xf8>
 8010ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d1f3      	bne.n	8010ac2 <__gethex+0x28e>
 8010ada:	e7e0      	b.n	8010a9e <__gethex+0x26a>
 8010adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d1dd      	bne.n	8010a9e <__gethex+0x26a>
 8010ae2:	e7ee      	b.n	8010ac2 <__gethex+0x28e>
 8010ae4:	0806cf1b 	.word	0x0806cf1b
 8010ae8:	0806d057 	.word	0x0806d057
 8010aec:	0806d068 	.word	0x0806d068
 8010af0:	1e6f      	subs	r7, r5, #1
 8010af2:	f1b9 0f00 	cmp.w	r9, #0
 8010af6:	d130      	bne.n	8010b5a <__gethex+0x326>
 8010af8:	b127      	cbz	r7, 8010b04 <__gethex+0x2d0>
 8010afa:	4639      	mov	r1, r7
 8010afc:	4620      	mov	r0, r4
 8010afe:	f000 febc 	bl	801187a <__any_on>
 8010b02:	4681      	mov	r9, r0
 8010b04:	117a      	asrs	r2, r7, #5
 8010b06:	2301      	movs	r3, #1
 8010b08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010b0c:	f007 071f 	and.w	r7, r7, #31
 8010b10:	40bb      	lsls	r3, r7
 8010b12:	4213      	tst	r3, r2
 8010b14:	4629      	mov	r1, r5
 8010b16:	4620      	mov	r0, r4
 8010b18:	bf18      	it	ne
 8010b1a:	f049 0902 	orrne.w	r9, r9, #2
 8010b1e:	f7ff fe21 	bl	8010764 <rshift>
 8010b22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010b26:	1b76      	subs	r6, r6, r5
 8010b28:	2502      	movs	r5, #2
 8010b2a:	f1b9 0f00 	cmp.w	r9, #0
 8010b2e:	d047      	beq.n	8010bc0 <__gethex+0x38c>
 8010b30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b34:	2b02      	cmp	r3, #2
 8010b36:	d015      	beq.n	8010b64 <__gethex+0x330>
 8010b38:	2b03      	cmp	r3, #3
 8010b3a:	d017      	beq.n	8010b6c <__gethex+0x338>
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d109      	bne.n	8010b54 <__gethex+0x320>
 8010b40:	f019 0f02 	tst.w	r9, #2
 8010b44:	d006      	beq.n	8010b54 <__gethex+0x320>
 8010b46:	f8da 3000 	ldr.w	r3, [sl]
 8010b4a:	ea49 0903 	orr.w	r9, r9, r3
 8010b4e:	f019 0f01 	tst.w	r9, #1
 8010b52:	d10e      	bne.n	8010b72 <__gethex+0x33e>
 8010b54:	f045 0510 	orr.w	r5, r5, #16
 8010b58:	e032      	b.n	8010bc0 <__gethex+0x38c>
 8010b5a:	f04f 0901 	mov.w	r9, #1
 8010b5e:	e7d1      	b.n	8010b04 <__gethex+0x2d0>
 8010b60:	2501      	movs	r5, #1
 8010b62:	e7e2      	b.n	8010b2a <__gethex+0x2f6>
 8010b64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b66:	f1c3 0301 	rsb	r3, r3, #1
 8010b6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d0f0      	beq.n	8010b54 <__gethex+0x320>
 8010b72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010b76:	f104 0314 	add.w	r3, r4, #20
 8010b7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010b7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010b82:	f04f 0c00 	mov.w	ip, #0
 8010b86:	4618      	mov	r0, r3
 8010b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010b90:	d01b      	beq.n	8010bca <__gethex+0x396>
 8010b92:	3201      	adds	r2, #1
 8010b94:	6002      	str	r2, [r0, #0]
 8010b96:	2d02      	cmp	r5, #2
 8010b98:	f104 0314 	add.w	r3, r4, #20
 8010b9c:	d13c      	bne.n	8010c18 <__gethex+0x3e4>
 8010b9e:	f8d8 2000 	ldr.w	r2, [r8]
 8010ba2:	3a01      	subs	r2, #1
 8010ba4:	42b2      	cmp	r2, r6
 8010ba6:	d109      	bne.n	8010bbc <__gethex+0x388>
 8010ba8:	1171      	asrs	r1, r6, #5
 8010baa:	2201      	movs	r2, #1
 8010bac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010bb0:	f006 061f 	and.w	r6, r6, #31
 8010bb4:	fa02 f606 	lsl.w	r6, r2, r6
 8010bb8:	421e      	tst	r6, r3
 8010bba:	d13a      	bne.n	8010c32 <__gethex+0x3fe>
 8010bbc:	f045 0520 	orr.w	r5, r5, #32
 8010bc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bc2:	601c      	str	r4, [r3, #0]
 8010bc4:	9b02      	ldr	r3, [sp, #8]
 8010bc6:	601f      	str	r7, [r3, #0]
 8010bc8:	e6b0      	b.n	801092c <__gethex+0xf8>
 8010bca:	4299      	cmp	r1, r3
 8010bcc:	f843 cc04 	str.w	ip, [r3, #-4]
 8010bd0:	d8d9      	bhi.n	8010b86 <__gethex+0x352>
 8010bd2:	68a3      	ldr	r3, [r4, #8]
 8010bd4:	459b      	cmp	fp, r3
 8010bd6:	db17      	blt.n	8010c08 <__gethex+0x3d4>
 8010bd8:	6861      	ldr	r1, [r4, #4]
 8010bda:	9801      	ldr	r0, [sp, #4]
 8010bdc:	3101      	adds	r1, #1
 8010bde:	f000 f9c3 	bl	8010f68 <_Balloc>
 8010be2:	4681      	mov	r9, r0
 8010be4:	b918      	cbnz	r0, 8010bee <__gethex+0x3ba>
 8010be6:	4b1a      	ldr	r3, [pc, #104]	@ (8010c50 <__gethex+0x41c>)
 8010be8:	4602      	mov	r2, r0
 8010bea:	2184      	movs	r1, #132	@ 0x84
 8010bec:	e6c5      	b.n	801097a <__gethex+0x146>
 8010bee:	6922      	ldr	r2, [r4, #16]
 8010bf0:	3202      	adds	r2, #2
 8010bf2:	f104 010c 	add.w	r1, r4, #12
 8010bf6:	0092      	lsls	r2, r2, #2
 8010bf8:	300c      	adds	r0, #12
 8010bfa:	f7fe fed4 	bl	800f9a6 <memcpy>
 8010bfe:	4621      	mov	r1, r4
 8010c00:	9801      	ldr	r0, [sp, #4]
 8010c02:	f000 f9f1 	bl	8010fe8 <_Bfree>
 8010c06:	464c      	mov	r4, r9
 8010c08:	6923      	ldr	r3, [r4, #16]
 8010c0a:	1c5a      	adds	r2, r3, #1
 8010c0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010c10:	6122      	str	r2, [r4, #16]
 8010c12:	2201      	movs	r2, #1
 8010c14:	615a      	str	r2, [r3, #20]
 8010c16:	e7be      	b.n	8010b96 <__gethex+0x362>
 8010c18:	6922      	ldr	r2, [r4, #16]
 8010c1a:	455a      	cmp	r2, fp
 8010c1c:	dd0b      	ble.n	8010c36 <__gethex+0x402>
 8010c1e:	2101      	movs	r1, #1
 8010c20:	4620      	mov	r0, r4
 8010c22:	f7ff fd9f 	bl	8010764 <rshift>
 8010c26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c2a:	3701      	adds	r7, #1
 8010c2c:	42bb      	cmp	r3, r7
 8010c2e:	f6ff aee0 	blt.w	80109f2 <__gethex+0x1be>
 8010c32:	2501      	movs	r5, #1
 8010c34:	e7c2      	b.n	8010bbc <__gethex+0x388>
 8010c36:	f016 061f 	ands.w	r6, r6, #31
 8010c3a:	d0fa      	beq.n	8010c32 <__gethex+0x3fe>
 8010c3c:	4453      	add	r3, sl
 8010c3e:	f1c6 0620 	rsb	r6, r6, #32
 8010c42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010c46:	f000 fa81 	bl	801114c <__hi0bits>
 8010c4a:	42b0      	cmp	r0, r6
 8010c4c:	dbe7      	blt.n	8010c1e <__gethex+0x3ea>
 8010c4e:	e7f0      	b.n	8010c32 <__gethex+0x3fe>
 8010c50:	0806d057 	.word	0x0806d057

08010c54 <L_shift>:
 8010c54:	f1c2 0208 	rsb	r2, r2, #8
 8010c58:	0092      	lsls	r2, r2, #2
 8010c5a:	b570      	push	{r4, r5, r6, lr}
 8010c5c:	f1c2 0620 	rsb	r6, r2, #32
 8010c60:	6843      	ldr	r3, [r0, #4]
 8010c62:	6804      	ldr	r4, [r0, #0]
 8010c64:	fa03 f506 	lsl.w	r5, r3, r6
 8010c68:	432c      	orrs	r4, r5
 8010c6a:	40d3      	lsrs	r3, r2
 8010c6c:	6004      	str	r4, [r0, #0]
 8010c6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010c72:	4288      	cmp	r0, r1
 8010c74:	d3f4      	bcc.n	8010c60 <L_shift+0xc>
 8010c76:	bd70      	pop	{r4, r5, r6, pc}

08010c78 <__match>:
 8010c78:	b530      	push	{r4, r5, lr}
 8010c7a:	6803      	ldr	r3, [r0, #0]
 8010c7c:	3301      	adds	r3, #1
 8010c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c82:	b914      	cbnz	r4, 8010c8a <__match+0x12>
 8010c84:	6003      	str	r3, [r0, #0]
 8010c86:	2001      	movs	r0, #1
 8010c88:	bd30      	pop	{r4, r5, pc}
 8010c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c8e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010c92:	2d19      	cmp	r5, #25
 8010c94:	bf98      	it	ls
 8010c96:	3220      	addls	r2, #32
 8010c98:	42a2      	cmp	r2, r4
 8010c9a:	d0f0      	beq.n	8010c7e <__match+0x6>
 8010c9c:	2000      	movs	r0, #0
 8010c9e:	e7f3      	b.n	8010c88 <__match+0x10>

08010ca0 <__hexnan>:
 8010ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ca4:	680b      	ldr	r3, [r1, #0]
 8010ca6:	6801      	ldr	r1, [r0, #0]
 8010ca8:	115e      	asrs	r6, r3, #5
 8010caa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010cae:	f013 031f 	ands.w	r3, r3, #31
 8010cb2:	b087      	sub	sp, #28
 8010cb4:	bf18      	it	ne
 8010cb6:	3604      	addne	r6, #4
 8010cb8:	2500      	movs	r5, #0
 8010cba:	1f37      	subs	r7, r6, #4
 8010cbc:	4682      	mov	sl, r0
 8010cbe:	4690      	mov	r8, r2
 8010cc0:	9301      	str	r3, [sp, #4]
 8010cc2:	f846 5c04 	str.w	r5, [r6, #-4]
 8010cc6:	46b9      	mov	r9, r7
 8010cc8:	463c      	mov	r4, r7
 8010cca:	9502      	str	r5, [sp, #8]
 8010ccc:	46ab      	mov	fp, r5
 8010cce:	784a      	ldrb	r2, [r1, #1]
 8010cd0:	1c4b      	adds	r3, r1, #1
 8010cd2:	9303      	str	r3, [sp, #12]
 8010cd4:	b342      	cbz	r2, 8010d28 <__hexnan+0x88>
 8010cd6:	4610      	mov	r0, r2
 8010cd8:	9105      	str	r1, [sp, #20]
 8010cda:	9204      	str	r2, [sp, #16]
 8010cdc:	f7ff fd94 	bl	8010808 <__hexdig_fun>
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	d151      	bne.n	8010d88 <__hexnan+0xe8>
 8010ce4:	9a04      	ldr	r2, [sp, #16]
 8010ce6:	9905      	ldr	r1, [sp, #20]
 8010ce8:	2a20      	cmp	r2, #32
 8010cea:	d818      	bhi.n	8010d1e <__hexnan+0x7e>
 8010cec:	9b02      	ldr	r3, [sp, #8]
 8010cee:	459b      	cmp	fp, r3
 8010cf0:	dd13      	ble.n	8010d1a <__hexnan+0x7a>
 8010cf2:	454c      	cmp	r4, r9
 8010cf4:	d206      	bcs.n	8010d04 <__hexnan+0x64>
 8010cf6:	2d07      	cmp	r5, #7
 8010cf8:	dc04      	bgt.n	8010d04 <__hexnan+0x64>
 8010cfa:	462a      	mov	r2, r5
 8010cfc:	4649      	mov	r1, r9
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f7ff ffa8 	bl	8010c54 <L_shift>
 8010d04:	4544      	cmp	r4, r8
 8010d06:	d952      	bls.n	8010dae <__hexnan+0x10e>
 8010d08:	2300      	movs	r3, #0
 8010d0a:	f1a4 0904 	sub.w	r9, r4, #4
 8010d0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d12:	f8cd b008 	str.w	fp, [sp, #8]
 8010d16:	464c      	mov	r4, r9
 8010d18:	461d      	mov	r5, r3
 8010d1a:	9903      	ldr	r1, [sp, #12]
 8010d1c:	e7d7      	b.n	8010cce <__hexnan+0x2e>
 8010d1e:	2a29      	cmp	r2, #41	@ 0x29
 8010d20:	d157      	bne.n	8010dd2 <__hexnan+0x132>
 8010d22:	3102      	adds	r1, #2
 8010d24:	f8ca 1000 	str.w	r1, [sl]
 8010d28:	f1bb 0f00 	cmp.w	fp, #0
 8010d2c:	d051      	beq.n	8010dd2 <__hexnan+0x132>
 8010d2e:	454c      	cmp	r4, r9
 8010d30:	d206      	bcs.n	8010d40 <__hexnan+0xa0>
 8010d32:	2d07      	cmp	r5, #7
 8010d34:	dc04      	bgt.n	8010d40 <__hexnan+0xa0>
 8010d36:	462a      	mov	r2, r5
 8010d38:	4649      	mov	r1, r9
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	f7ff ff8a 	bl	8010c54 <L_shift>
 8010d40:	4544      	cmp	r4, r8
 8010d42:	d936      	bls.n	8010db2 <__hexnan+0x112>
 8010d44:	f1a8 0204 	sub.w	r2, r8, #4
 8010d48:	4623      	mov	r3, r4
 8010d4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8010d4e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010d52:	429f      	cmp	r7, r3
 8010d54:	d2f9      	bcs.n	8010d4a <__hexnan+0xaa>
 8010d56:	1b3b      	subs	r3, r7, r4
 8010d58:	f023 0303 	bic.w	r3, r3, #3
 8010d5c:	3304      	adds	r3, #4
 8010d5e:	3401      	adds	r4, #1
 8010d60:	3e03      	subs	r6, #3
 8010d62:	42b4      	cmp	r4, r6
 8010d64:	bf88      	it	hi
 8010d66:	2304      	movhi	r3, #4
 8010d68:	4443      	add	r3, r8
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	f843 2b04 	str.w	r2, [r3], #4
 8010d70:	429f      	cmp	r7, r3
 8010d72:	d2fb      	bcs.n	8010d6c <__hexnan+0xcc>
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	b91b      	cbnz	r3, 8010d80 <__hexnan+0xe0>
 8010d78:	4547      	cmp	r7, r8
 8010d7a:	d128      	bne.n	8010dce <__hexnan+0x12e>
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	603b      	str	r3, [r7, #0]
 8010d80:	2005      	movs	r0, #5
 8010d82:	b007      	add	sp, #28
 8010d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d88:	3501      	adds	r5, #1
 8010d8a:	2d08      	cmp	r5, #8
 8010d8c:	f10b 0b01 	add.w	fp, fp, #1
 8010d90:	dd06      	ble.n	8010da0 <__hexnan+0x100>
 8010d92:	4544      	cmp	r4, r8
 8010d94:	d9c1      	bls.n	8010d1a <__hexnan+0x7a>
 8010d96:	2300      	movs	r3, #0
 8010d98:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d9c:	2501      	movs	r5, #1
 8010d9e:	3c04      	subs	r4, #4
 8010da0:	6822      	ldr	r2, [r4, #0]
 8010da2:	f000 000f 	and.w	r0, r0, #15
 8010da6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010daa:	6020      	str	r0, [r4, #0]
 8010dac:	e7b5      	b.n	8010d1a <__hexnan+0x7a>
 8010dae:	2508      	movs	r5, #8
 8010db0:	e7b3      	b.n	8010d1a <__hexnan+0x7a>
 8010db2:	9b01      	ldr	r3, [sp, #4]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d0dd      	beq.n	8010d74 <__hexnan+0xd4>
 8010db8:	f1c3 0320 	rsb	r3, r3, #32
 8010dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc0:	40da      	lsrs	r2, r3
 8010dc2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010dc6:	4013      	ands	r3, r2
 8010dc8:	f846 3c04 	str.w	r3, [r6, #-4]
 8010dcc:	e7d2      	b.n	8010d74 <__hexnan+0xd4>
 8010dce:	3f04      	subs	r7, #4
 8010dd0:	e7d0      	b.n	8010d74 <__hexnan+0xd4>
 8010dd2:	2004      	movs	r0, #4
 8010dd4:	e7d5      	b.n	8010d82 <__hexnan+0xe2>
	...

08010dd8 <malloc>:
 8010dd8:	4b02      	ldr	r3, [pc, #8]	@ (8010de4 <malloc+0xc>)
 8010dda:	4601      	mov	r1, r0
 8010ddc:	6818      	ldr	r0, [r3, #0]
 8010dde:	f000 b825 	b.w	8010e2c <_malloc_r>
 8010de2:	bf00      	nop
 8010de4:	20000280 	.word	0x20000280

08010de8 <sbrk_aligned>:
 8010de8:	b570      	push	{r4, r5, r6, lr}
 8010dea:	4e0f      	ldr	r6, [pc, #60]	@ (8010e28 <sbrk_aligned+0x40>)
 8010dec:	460c      	mov	r4, r1
 8010dee:	6831      	ldr	r1, [r6, #0]
 8010df0:	4605      	mov	r5, r0
 8010df2:	b911      	cbnz	r1, 8010dfa <sbrk_aligned+0x12>
 8010df4:	f001 fb30 	bl	8012458 <_sbrk_r>
 8010df8:	6030      	str	r0, [r6, #0]
 8010dfa:	4621      	mov	r1, r4
 8010dfc:	4628      	mov	r0, r5
 8010dfe:	f001 fb2b 	bl	8012458 <_sbrk_r>
 8010e02:	1c43      	adds	r3, r0, #1
 8010e04:	d103      	bne.n	8010e0e <sbrk_aligned+0x26>
 8010e06:	f04f 34ff 	mov.w	r4, #4294967295
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	bd70      	pop	{r4, r5, r6, pc}
 8010e0e:	1cc4      	adds	r4, r0, #3
 8010e10:	f024 0403 	bic.w	r4, r4, #3
 8010e14:	42a0      	cmp	r0, r4
 8010e16:	d0f8      	beq.n	8010e0a <sbrk_aligned+0x22>
 8010e18:	1a21      	subs	r1, r4, r0
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	f001 fb1c 	bl	8012458 <_sbrk_r>
 8010e20:	3001      	adds	r0, #1
 8010e22:	d1f2      	bne.n	8010e0a <sbrk_aligned+0x22>
 8010e24:	e7ef      	b.n	8010e06 <sbrk_aligned+0x1e>
 8010e26:	bf00      	nop
 8010e28:	2001a314 	.word	0x2001a314

08010e2c <_malloc_r>:
 8010e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e30:	1ccd      	adds	r5, r1, #3
 8010e32:	f025 0503 	bic.w	r5, r5, #3
 8010e36:	3508      	adds	r5, #8
 8010e38:	2d0c      	cmp	r5, #12
 8010e3a:	bf38      	it	cc
 8010e3c:	250c      	movcc	r5, #12
 8010e3e:	2d00      	cmp	r5, #0
 8010e40:	4606      	mov	r6, r0
 8010e42:	db01      	blt.n	8010e48 <_malloc_r+0x1c>
 8010e44:	42a9      	cmp	r1, r5
 8010e46:	d904      	bls.n	8010e52 <_malloc_r+0x26>
 8010e48:	230c      	movs	r3, #12
 8010e4a:	6033      	str	r3, [r6, #0]
 8010e4c:	2000      	movs	r0, #0
 8010e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010f28 <_malloc_r+0xfc>
 8010e56:	f000 f87b 	bl	8010f50 <__malloc_lock>
 8010e5a:	f8d8 3000 	ldr.w	r3, [r8]
 8010e5e:	461c      	mov	r4, r3
 8010e60:	bb44      	cbnz	r4, 8010eb4 <_malloc_r+0x88>
 8010e62:	4629      	mov	r1, r5
 8010e64:	4630      	mov	r0, r6
 8010e66:	f7ff ffbf 	bl	8010de8 <sbrk_aligned>
 8010e6a:	1c43      	adds	r3, r0, #1
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	d158      	bne.n	8010f22 <_malloc_r+0xf6>
 8010e70:	f8d8 4000 	ldr.w	r4, [r8]
 8010e74:	4627      	mov	r7, r4
 8010e76:	2f00      	cmp	r7, #0
 8010e78:	d143      	bne.n	8010f02 <_malloc_r+0xd6>
 8010e7a:	2c00      	cmp	r4, #0
 8010e7c:	d04b      	beq.n	8010f16 <_malloc_r+0xea>
 8010e7e:	6823      	ldr	r3, [r4, #0]
 8010e80:	4639      	mov	r1, r7
 8010e82:	4630      	mov	r0, r6
 8010e84:	eb04 0903 	add.w	r9, r4, r3
 8010e88:	f001 fae6 	bl	8012458 <_sbrk_r>
 8010e8c:	4581      	cmp	r9, r0
 8010e8e:	d142      	bne.n	8010f16 <_malloc_r+0xea>
 8010e90:	6821      	ldr	r1, [r4, #0]
 8010e92:	1a6d      	subs	r5, r5, r1
 8010e94:	4629      	mov	r1, r5
 8010e96:	4630      	mov	r0, r6
 8010e98:	f7ff ffa6 	bl	8010de8 <sbrk_aligned>
 8010e9c:	3001      	adds	r0, #1
 8010e9e:	d03a      	beq.n	8010f16 <_malloc_r+0xea>
 8010ea0:	6823      	ldr	r3, [r4, #0]
 8010ea2:	442b      	add	r3, r5
 8010ea4:	6023      	str	r3, [r4, #0]
 8010ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8010eaa:	685a      	ldr	r2, [r3, #4]
 8010eac:	bb62      	cbnz	r2, 8010f08 <_malloc_r+0xdc>
 8010eae:	f8c8 7000 	str.w	r7, [r8]
 8010eb2:	e00f      	b.n	8010ed4 <_malloc_r+0xa8>
 8010eb4:	6822      	ldr	r2, [r4, #0]
 8010eb6:	1b52      	subs	r2, r2, r5
 8010eb8:	d420      	bmi.n	8010efc <_malloc_r+0xd0>
 8010eba:	2a0b      	cmp	r2, #11
 8010ebc:	d917      	bls.n	8010eee <_malloc_r+0xc2>
 8010ebe:	1961      	adds	r1, r4, r5
 8010ec0:	42a3      	cmp	r3, r4
 8010ec2:	6025      	str	r5, [r4, #0]
 8010ec4:	bf18      	it	ne
 8010ec6:	6059      	strne	r1, [r3, #4]
 8010ec8:	6863      	ldr	r3, [r4, #4]
 8010eca:	bf08      	it	eq
 8010ecc:	f8c8 1000 	streq.w	r1, [r8]
 8010ed0:	5162      	str	r2, [r4, r5]
 8010ed2:	604b      	str	r3, [r1, #4]
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	f000 f841 	bl	8010f5c <__malloc_unlock>
 8010eda:	f104 000b 	add.w	r0, r4, #11
 8010ede:	1d23      	adds	r3, r4, #4
 8010ee0:	f020 0007 	bic.w	r0, r0, #7
 8010ee4:	1ac2      	subs	r2, r0, r3
 8010ee6:	bf1c      	itt	ne
 8010ee8:	1a1b      	subne	r3, r3, r0
 8010eea:	50a3      	strne	r3, [r4, r2]
 8010eec:	e7af      	b.n	8010e4e <_malloc_r+0x22>
 8010eee:	6862      	ldr	r2, [r4, #4]
 8010ef0:	42a3      	cmp	r3, r4
 8010ef2:	bf0c      	ite	eq
 8010ef4:	f8c8 2000 	streq.w	r2, [r8]
 8010ef8:	605a      	strne	r2, [r3, #4]
 8010efa:	e7eb      	b.n	8010ed4 <_malloc_r+0xa8>
 8010efc:	4623      	mov	r3, r4
 8010efe:	6864      	ldr	r4, [r4, #4]
 8010f00:	e7ae      	b.n	8010e60 <_malloc_r+0x34>
 8010f02:	463c      	mov	r4, r7
 8010f04:	687f      	ldr	r7, [r7, #4]
 8010f06:	e7b6      	b.n	8010e76 <_malloc_r+0x4a>
 8010f08:	461a      	mov	r2, r3
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	42a3      	cmp	r3, r4
 8010f0e:	d1fb      	bne.n	8010f08 <_malloc_r+0xdc>
 8010f10:	2300      	movs	r3, #0
 8010f12:	6053      	str	r3, [r2, #4]
 8010f14:	e7de      	b.n	8010ed4 <_malloc_r+0xa8>
 8010f16:	230c      	movs	r3, #12
 8010f18:	6033      	str	r3, [r6, #0]
 8010f1a:	4630      	mov	r0, r6
 8010f1c:	f000 f81e 	bl	8010f5c <__malloc_unlock>
 8010f20:	e794      	b.n	8010e4c <_malloc_r+0x20>
 8010f22:	6005      	str	r5, [r0, #0]
 8010f24:	e7d6      	b.n	8010ed4 <_malloc_r+0xa8>
 8010f26:	bf00      	nop
 8010f28:	2001a318 	.word	0x2001a318

08010f2c <__ascii_mbtowc>:
 8010f2c:	b082      	sub	sp, #8
 8010f2e:	b901      	cbnz	r1, 8010f32 <__ascii_mbtowc+0x6>
 8010f30:	a901      	add	r1, sp, #4
 8010f32:	b142      	cbz	r2, 8010f46 <__ascii_mbtowc+0x1a>
 8010f34:	b14b      	cbz	r3, 8010f4a <__ascii_mbtowc+0x1e>
 8010f36:	7813      	ldrb	r3, [r2, #0]
 8010f38:	600b      	str	r3, [r1, #0]
 8010f3a:	7812      	ldrb	r2, [r2, #0]
 8010f3c:	1e10      	subs	r0, r2, #0
 8010f3e:	bf18      	it	ne
 8010f40:	2001      	movne	r0, #1
 8010f42:	b002      	add	sp, #8
 8010f44:	4770      	bx	lr
 8010f46:	4610      	mov	r0, r2
 8010f48:	e7fb      	b.n	8010f42 <__ascii_mbtowc+0x16>
 8010f4a:	f06f 0001 	mvn.w	r0, #1
 8010f4e:	e7f8      	b.n	8010f42 <__ascii_mbtowc+0x16>

08010f50 <__malloc_lock>:
 8010f50:	4801      	ldr	r0, [pc, #4]	@ (8010f58 <__malloc_lock+0x8>)
 8010f52:	f7fe bd26 	b.w	800f9a2 <__retarget_lock_acquire_recursive>
 8010f56:	bf00      	nop
 8010f58:	2001a310 	.word	0x2001a310

08010f5c <__malloc_unlock>:
 8010f5c:	4801      	ldr	r0, [pc, #4]	@ (8010f64 <__malloc_unlock+0x8>)
 8010f5e:	f7fe bd21 	b.w	800f9a4 <__retarget_lock_release_recursive>
 8010f62:	bf00      	nop
 8010f64:	2001a310 	.word	0x2001a310

08010f68 <_Balloc>:
 8010f68:	b570      	push	{r4, r5, r6, lr}
 8010f6a:	69c6      	ldr	r6, [r0, #28]
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	460d      	mov	r5, r1
 8010f70:	b976      	cbnz	r6, 8010f90 <_Balloc+0x28>
 8010f72:	2010      	movs	r0, #16
 8010f74:	f7ff ff30 	bl	8010dd8 <malloc>
 8010f78:	4602      	mov	r2, r0
 8010f7a:	61e0      	str	r0, [r4, #28]
 8010f7c:	b920      	cbnz	r0, 8010f88 <_Balloc+0x20>
 8010f7e:	4b18      	ldr	r3, [pc, #96]	@ (8010fe0 <_Balloc+0x78>)
 8010f80:	4818      	ldr	r0, [pc, #96]	@ (8010fe4 <_Balloc+0x7c>)
 8010f82:	216b      	movs	r1, #107	@ 0x6b
 8010f84:	f7fe fd2e 	bl	800f9e4 <__assert_func>
 8010f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f8c:	6006      	str	r6, [r0, #0]
 8010f8e:	60c6      	str	r6, [r0, #12]
 8010f90:	69e6      	ldr	r6, [r4, #28]
 8010f92:	68f3      	ldr	r3, [r6, #12]
 8010f94:	b183      	cbz	r3, 8010fb8 <_Balloc+0x50>
 8010f96:	69e3      	ldr	r3, [r4, #28]
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010f9e:	b9b8      	cbnz	r0, 8010fd0 <_Balloc+0x68>
 8010fa0:	2101      	movs	r1, #1
 8010fa2:	fa01 f605 	lsl.w	r6, r1, r5
 8010fa6:	1d72      	adds	r2, r6, #5
 8010fa8:	0092      	lsls	r2, r2, #2
 8010faa:	4620      	mov	r0, r4
 8010fac:	f001 fa6b 	bl	8012486 <_calloc_r>
 8010fb0:	b160      	cbz	r0, 8010fcc <_Balloc+0x64>
 8010fb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010fb6:	e00e      	b.n	8010fd6 <_Balloc+0x6e>
 8010fb8:	2221      	movs	r2, #33	@ 0x21
 8010fba:	2104      	movs	r1, #4
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f001 fa62 	bl	8012486 <_calloc_r>
 8010fc2:	69e3      	ldr	r3, [r4, #28]
 8010fc4:	60f0      	str	r0, [r6, #12]
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d1e4      	bne.n	8010f96 <_Balloc+0x2e>
 8010fcc:	2000      	movs	r0, #0
 8010fce:	bd70      	pop	{r4, r5, r6, pc}
 8010fd0:	6802      	ldr	r2, [r0, #0]
 8010fd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010fdc:	e7f7      	b.n	8010fce <_Balloc+0x66>
 8010fde:	bf00      	nop
 8010fe0:	0806ceac 	.word	0x0806ceac
 8010fe4:	0806d0c8 	.word	0x0806d0c8

08010fe8 <_Bfree>:
 8010fe8:	b570      	push	{r4, r5, r6, lr}
 8010fea:	69c6      	ldr	r6, [r0, #28]
 8010fec:	4605      	mov	r5, r0
 8010fee:	460c      	mov	r4, r1
 8010ff0:	b976      	cbnz	r6, 8011010 <_Bfree+0x28>
 8010ff2:	2010      	movs	r0, #16
 8010ff4:	f7ff fef0 	bl	8010dd8 <malloc>
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	61e8      	str	r0, [r5, #28]
 8010ffc:	b920      	cbnz	r0, 8011008 <_Bfree+0x20>
 8010ffe:	4b09      	ldr	r3, [pc, #36]	@ (8011024 <_Bfree+0x3c>)
 8011000:	4809      	ldr	r0, [pc, #36]	@ (8011028 <_Bfree+0x40>)
 8011002:	218f      	movs	r1, #143	@ 0x8f
 8011004:	f7fe fcee 	bl	800f9e4 <__assert_func>
 8011008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801100c:	6006      	str	r6, [r0, #0]
 801100e:	60c6      	str	r6, [r0, #12]
 8011010:	b13c      	cbz	r4, 8011022 <_Bfree+0x3a>
 8011012:	69eb      	ldr	r3, [r5, #28]
 8011014:	6862      	ldr	r2, [r4, #4]
 8011016:	68db      	ldr	r3, [r3, #12]
 8011018:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801101c:	6021      	str	r1, [r4, #0]
 801101e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011022:	bd70      	pop	{r4, r5, r6, pc}
 8011024:	0806ceac 	.word	0x0806ceac
 8011028:	0806d0c8 	.word	0x0806d0c8

0801102c <__multadd>:
 801102c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011030:	690d      	ldr	r5, [r1, #16]
 8011032:	4607      	mov	r7, r0
 8011034:	460c      	mov	r4, r1
 8011036:	461e      	mov	r6, r3
 8011038:	f101 0c14 	add.w	ip, r1, #20
 801103c:	2000      	movs	r0, #0
 801103e:	f8dc 3000 	ldr.w	r3, [ip]
 8011042:	b299      	uxth	r1, r3
 8011044:	fb02 6101 	mla	r1, r2, r1, r6
 8011048:	0c1e      	lsrs	r6, r3, #16
 801104a:	0c0b      	lsrs	r3, r1, #16
 801104c:	fb02 3306 	mla	r3, r2, r6, r3
 8011050:	b289      	uxth	r1, r1
 8011052:	3001      	adds	r0, #1
 8011054:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011058:	4285      	cmp	r5, r0
 801105a:	f84c 1b04 	str.w	r1, [ip], #4
 801105e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011062:	dcec      	bgt.n	801103e <__multadd+0x12>
 8011064:	b30e      	cbz	r6, 80110aa <__multadd+0x7e>
 8011066:	68a3      	ldr	r3, [r4, #8]
 8011068:	42ab      	cmp	r3, r5
 801106a:	dc19      	bgt.n	80110a0 <__multadd+0x74>
 801106c:	6861      	ldr	r1, [r4, #4]
 801106e:	4638      	mov	r0, r7
 8011070:	3101      	adds	r1, #1
 8011072:	f7ff ff79 	bl	8010f68 <_Balloc>
 8011076:	4680      	mov	r8, r0
 8011078:	b928      	cbnz	r0, 8011086 <__multadd+0x5a>
 801107a:	4602      	mov	r2, r0
 801107c:	4b0c      	ldr	r3, [pc, #48]	@ (80110b0 <__multadd+0x84>)
 801107e:	480d      	ldr	r0, [pc, #52]	@ (80110b4 <__multadd+0x88>)
 8011080:	21ba      	movs	r1, #186	@ 0xba
 8011082:	f7fe fcaf 	bl	800f9e4 <__assert_func>
 8011086:	6922      	ldr	r2, [r4, #16]
 8011088:	3202      	adds	r2, #2
 801108a:	f104 010c 	add.w	r1, r4, #12
 801108e:	0092      	lsls	r2, r2, #2
 8011090:	300c      	adds	r0, #12
 8011092:	f7fe fc88 	bl	800f9a6 <memcpy>
 8011096:	4621      	mov	r1, r4
 8011098:	4638      	mov	r0, r7
 801109a:	f7ff ffa5 	bl	8010fe8 <_Bfree>
 801109e:	4644      	mov	r4, r8
 80110a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80110a4:	3501      	adds	r5, #1
 80110a6:	615e      	str	r6, [r3, #20]
 80110a8:	6125      	str	r5, [r4, #16]
 80110aa:	4620      	mov	r0, r4
 80110ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110b0:	0806d057 	.word	0x0806d057
 80110b4:	0806d0c8 	.word	0x0806d0c8

080110b8 <__s2b>:
 80110b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110bc:	460c      	mov	r4, r1
 80110be:	4615      	mov	r5, r2
 80110c0:	461f      	mov	r7, r3
 80110c2:	2209      	movs	r2, #9
 80110c4:	3308      	adds	r3, #8
 80110c6:	4606      	mov	r6, r0
 80110c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80110cc:	2100      	movs	r1, #0
 80110ce:	2201      	movs	r2, #1
 80110d0:	429a      	cmp	r2, r3
 80110d2:	db09      	blt.n	80110e8 <__s2b+0x30>
 80110d4:	4630      	mov	r0, r6
 80110d6:	f7ff ff47 	bl	8010f68 <_Balloc>
 80110da:	b940      	cbnz	r0, 80110ee <__s2b+0x36>
 80110dc:	4602      	mov	r2, r0
 80110de:	4b19      	ldr	r3, [pc, #100]	@ (8011144 <__s2b+0x8c>)
 80110e0:	4819      	ldr	r0, [pc, #100]	@ (8011148 <__s2b+0x90>)
 80110e2:	21d3      	movs	r1, #211	@ 0xd3
 80110e4:	f7fe fc7e 	bl	800f9e4 <__assert_func>
 80110e8:	0052      	lsls	r2, r2, #1
 80110ea:	3101      	adds	r1, #1
 80110ec:	e7f0      	b.n	80110d0 <__s2b+0x18>
 80110ee:	9b08      	ldr	r3, [sp, #32]
 80110f0:	6143      	str	r3, [r0, #20]
 80110f2:	2d09      	cmp	r5, #9
 80110f4:	f04f 0301 	mov.w	r3, #1
 80110f8:	6103      	str	r3, [r0, #16]
 80110fa:	dd16      	ble.n	801112a <__s2b+0x72>
 80110fc:	f104 0909 	add.w	r9, r4, #9
 8011100:	46c8      	mov	r8, r9
 8011102:	442c      	add	r4, r5
 8011104:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011108:	4601      	mov	r1, r0
 801110a:	3b30      	subs	r3, #48	@ 0x30
 801110c:	220a      	movs	r2, #10
 801110e:	4630      	mov	r0, r6
 8011110:	f7ff ff8c 	bl	801102c <__multadd>
 8011114:	45a0      	cmp	r8, r4
 8011116:	d1f5      	bne.n	8011104 <__s2b+0x4c>
 8011118:	f1a5 0408 	sub.w	r4, r5, #8
 801111c:	444c      	add	r4, r9
 801111e:	1b2d      	subs	r5, r5, r4
 8011120:	1963      	adds	r3, r4, r5
 8011122:	42bb      	cmp	r3, r7
 8011124:	db04      	blt.n	8011130 <__s2b+0x78>
 8011126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801112a:	340a      	adds	r4, #10
 801112c:	2509      	movs	r5, #9
 801112e:	e7f6      	b.n	801111e <__s2b+0x66>
 8011130:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011134:	4601      	mov	r1, r0
 8011136:	3b30      	subs	r3, #48	@ 0x30
 8011138:	220a      	movs	r2, #10
 801113a:	4630      	mov	r0, r6
 801113c:	f7ff ff76 	bl	801102c <__multadd>
 8011140:	e7ee      	b.n	8011120 <__s2b+0x68>
 8011142:	bf00      	nop
 8011144:	0806d057 	.word	0x0806d057
 8011148:	0806d0c8 	.word	0x0806d0c8

0801114c <__hi0bits>:
 801114c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011150:	4603      	mov	r3, r0
 8011152:	bf36      	itet	cc
 8011154:	0403      	lslcc	r3, r0, #16
 8011156:	2000      	movcs	r0, #0
 8011158:	2010      	movcc	r0, #16
 801115a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801115e:	bf3c      	itt	cc
 8011160:	021b      	lslcc	r3, r3, #8
 8011162:	3008      	addcc	r0, #8
 8011164:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011168:	bf3c      	itt	cc
 801116a:	011b      	lslcc	r3, r3, #4
 801116c:	3004      	addcc	r0, #4
 801116e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011172:	bf3c      	itt	cc
 8011174:	009b      	lslcc	r3, r3, #2
 8011176:	3002      	addcc	r0, #2
 8011178:	2b00      	cmp	r3, #0
 801117a:	db05      	blt.n	8011188 <__hi0bits+0x3c>
 801117c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011180:	f100 0001 	add.w	r0, r0, #1
 8011184:	bf08      	it	eq
 8011186:	2020      	moveq	r0, #32
 8011188:	4770      	bx	lr

0801118a <__lo0bits>:
 801118a:	6803      	ldr	r3, [r0, #0]
 801118c:	4602      	mov	r2, r0
 801118e:	f013 0007 	ands.w	r0, r3, #7
 8011192:	d00b      	beq.n	80111ac <__lo0bits+0x22>
 8011194:	07d9      	lsls	r1, r3, #31
 8011196:	d421      	bmi.n	80111dc <__lo0bits+0x52>
 8011198:	0798      	lsls	r0, r3, #30
 801119a:	bf49      	itett	mi
 801119c:	085b      	lsrmi	r3, r3, #1
 801119e:	089b      	lsrpl	r3, r3, #2
 80111a0:	2001      	movmi	r0, #1
 80111a2:	6013      	strmi	r3, [r2, #0]
 80111a4:	bf5c      	itt	pl
 80111a6:	6013      	strpl	r3, [r2, #0]
 80111a8:	2002      	movpl	r0, #2
 80111aa:	4770      	bx	lr
 80111ac:	b299      	uxth	r1, r3
 80111ae:	b909      	cbnz	r1, 80111b4 <__lo0bits+0x2a>
 80111b0:	0c1b      	lsrs	r3, r3, #16
 80111b2:	2010      	movs	r0, #16
 80111b4:	b2d9      	uxtb	r1, r3
 80111b6:	b909      	cbnz	r1, 80111bc <__lo0bits+0x32>
 80111b8:	3008      	adds	r0, #8
 80111ba:	0a1b      	lsrs	r3, r3, #8
 80111bc:	0719      	lsls	r1, r3, #28
 80111be:	bf04      	itt	eq
 80111c0:	091b      	lsreq	r3, r3, #4
 80111c2:	3004      	addeq	r0, #4
 80111c4:	0799      	lsls	r1, r3, #30
 80111c6:	bf04      	itt	eq
 80111c8:	089b      	lsreq	r3, r3, #2
 80111ca:	3002      	addeq	r0, #2
 80111cc:	07d9      	lsls	r1, r3, #31
 80111ce:	d403      	bmi.n	80111d8 <__lo0bits+0x4e>
 80111d0:	085b      	lsrs	r3, r3, #1
 80111d2:	f100 0001 	add.w	r0, r0, #1
 80111d6:	d003      	beq.n	80111e0 <__lo0bits+0x56>
 80111d8:	6013      	str	r3, [r2, #0]
 80111da:	4770      	bx	lr
 80111dc:	2000      	movs	r0, #0
 80111de:	4770      	bx	lr
 80111e0:	2020      	movs	r0, #32
 80111e2:	4770      	bx	lr

080111e4 <__i2b>:
 80111e4:	b510      	push	{r4, lr}
 80111e6:	460c      	mov	r4, r1
 80111e8:	2101      	movs	r1, #1
 80111ea:	f7ff febd 	bl	8010f68 <_Balloc>
 80111ee:	4602      	mov	r2, r0
 80111f0:	b928      	cbnz	r0, 80111fe <__i2b+0x1a>
 80111f2:	4b05      	ldr	r3, [pc, #20]	@ (8011208 <__i2b+0x24>)
 80111f4:	4805      	ldr	r0, [pc, #20]	@ (801120c <__i2b+0x28>)
 80111f6:	f240 1145 	movw	r1, #325	@ 0x145
 80111fa:	f7fe fbf3 	bl	800f9e4 <__assert_func>
 80111fe:	2301      	movs	r3, #1
 8011200:	6144      	str	r4, [r0, #20]
 8011202:	6103      	str	r3, [r0, #16]
 8011204:	bd10      	pop	{r4, pc}
 8011206:	bf00      	nop
 8011208:	0806d057 	.word	0x0806d057
 801120c:	0806d0c8 	.word	0x0806d0c8

08011210 <__multiply>:
 8011210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011214:	4617      	mov	r7, r2
 8011216:	690a      	ldr	r2, [r1, #16]
 8011218:	693b      	ldr	r3, [r7, #16]
 801121a:	429a      	cmp	r2, r3
 801121c:	bfa8      	it	ge
 801121e:	463b      	movge	r3, r7
 8011220:	4689      	mov	r9, r1
 8011222:	bfa4      	itt	ge
 8011224:	460f      	movge	r7, r1
 8011226:	4699      	movge	r9, r3
 8011228:	693d      	ldr	r5, [r7, #16]
 801122a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	6879      	ldr	r1, [r7, #4]
 8011232:	eb05 060a 	add.w	r6, r5, sl
 8011236:	42b3      	cmp	r3, r6
 8011238:	b085      	sub	sp, #20
 801123a:	bfb8      	it	lt
 801123c:	3101      	addlt	r1, #1
 801123e:	f7ff fe93 	bl	8010f68 <_Balloc>
 8011242:	b930      	cbnz	r0, 8011252 <__multiply+0x42>
 8011244:	4602      	mov	r2, r0
 8011246:	4b41      	ldr	r3, [pc, #260]	@ (801134c <__multiply+0x13c>)
 8011248:	4841      	ldr	r0, [pc, #260]	@ (8011350 <__multiply+0x140>)
 801124a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801124e:	f7fe fbc9 	bl	800f9e4 <__assert_func>
 8011252:	f100 0414 	add.w	r4, r0, #20
 8011256:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801125a:	4623      	mov	r3, r4
 801125c:	2200      	movs	r2, #0
 801125e:	4573      	cmp	r3, lr
 8011260:	d320      	bcc.n	80112a4 <__multiply+0x94>
 8011262:	f107 0814 	add.w	r8, r7, #20
 8011266:	f109 0114 	add.w	r1, r9, #20
 801126a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801126e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011272:	9302      	str	r3, [sp, #8]
 8011274:	1beb      	subs	r3, r5, r7
 8011276:	3b15      	subs	r3, #21
 8011278:	f023 0303 	bic.w	r3, r3, #3
 801127c:	3304      	adds	r3, #4
 801127e:	3715      	adds	r7, #21
 8011280:	42bd      	cmp	r5, r7
 8011282:	bf38      	it	cc
 8011284:	2304      	movcc	r3, #4
 8011286:	9301      	str	r3, [sp, #4]
 8011288:	9b02      	ldr	r3, [sp, #8]
 801128a:	9103      	str	r1, [sp, #12]
 801128c:	428b      	cmp	r3, r1
 801128e:	d80c      	bhi.n	80112aa <__multiply+0x9a>
 8011290:	2e00      	cmp	r6, #0
 8011292:	dd03      	ble.n	801129c <__multiply+0x8c>
 8011294:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011298:	2b00      	cmp	r3, #0
 801129a:	d055      	beq.n	8011348 <__multiply+0x138>
 801129c:	6106      	str	r6, [r0, #16]
 801129e:	b005      	add	sp, #20
 80112a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112a4:	f843 2b04 	str.w	r2, [r3], #4
 80112a8:	e7d9      	b.n	801125e <__multiply+0x4e>
 80112aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80112ae:	f1ba 0f00 	cmp.w	sl, #0
 80112b2:	d01f      	beq.n	80112f4 <__multiply+0xe4>
 80112b4:	46c4      	mov	ip, r8
 80112b6:	46a1      	mov	r9, r4
 80112b8:	2700      	movs	r7, #0
 80112ba:	f85c 2b04 	ldr.w	r2, [ip], #4
 80112be:	f8d9 3000 	ldr.w	r3, [r9]
 80112c2:	fa1f fb82 	uxth.w	fp, r2
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	fb0a 330b 	mla	r3, sl, fp, r3
 80112cc:	443b      	add	r3, r7
 80112ce:	f8d9 7000 	ldr.w	r7, [r9]
 80112d2:	0c12      	lsrs	r2, r2, #16
 80112d4:	0c3f      	lsrs	r7, r7, #16
 80112d6:	fb0a 7202 	mla	r2, sl, r2, r7
 80112da:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80112de:	b29b      	uxth	r3, r3
 80112e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80112e4:	4565      	cmp	r5, ip
 80112e6:	f849 3b04 	str.w	r3, [r9], #4
 80112ea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80112ee:	d8e4      	bhi.n	80112ba <__multiply+0xaa>
 80112f0:	9b01      	ldr	r3, [sp, #4]
 80112f2:	50e7      	str	r7, [r4, r3]
 80112f4:	9b03      	ldr	r3, [sp, #12]
 80112f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80112fa:	3104      	adds	r1, #4
 80112fc:	f1b9 0f00 	cmp.w	r9, #0
 8011300:	d020      	beq.n	8011344 <__multiply+0x134>
 8011302:	6823      	ldr	r3, [r4, #0]
 8011304:	4647      	mov	r7, r8
 8011306:	46a4      	mov	ip, r4
 8011308:	f04f 0a00 	mov.w	sl, #0
 801130c:	f8b7 b000 	ldrh.w	fp, [r7]
 8011310:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011314:	fb09 220b 	mla	r2, r9, fp, r2
 8011318:	4452      	add	r2, sl
 801131a:	b29b      	uxth	r3, r3
 801131c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011320:	f84c 3b04 	str.w	r3, [ip], #4
 8011324:	f857 3b04 	ldr.w	r3, [r7], #4
 8011328:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801132c:	f8bc 3000 	ldrh.w	r3, [ip]
 8011330:	fb09 330a 	mla	r3, r9, sl, r3
 8011334:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011338:	42bd      	cmp	r5, r7
 801133a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801133e:	d8e5      	bhi.n	801130c <__multiply+0xfc>
 8011340:	9a01      	ldr	r2, [sp, #4]
 8011342:	50a3      	str	r3, [r4, r2]
 8011344:	3404      	adds	r4, #4
 8011346:	e79f      	b.n	8011288 <__multiply+0x78>
 8011348:	3e01      	subs	r6, #1
 801134a:	e7a1      	b.n	8011290 <__multiply+0x80>
 801134c:	0806d057 	.word	0x0806d057
 8011350:	0806d0c8 	.word	0x0806d0c8

08011354 <__pow5mult>:
 8011354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011358:	4615      	mov	r5, r2
 801135a:	f012 0203 	ands.w	r2, r2, #3
 801135e:	4607      	mov	r7, r0
 8011360:	460e      	mov	r6, r1
 8011362:	d007      	beq.n	8011374 <__pow5mult+0x20>
 8011364:	4c25      	ldr	r4, [pc, #148]	@ (80113fc <__pow5mult+0xa8>)
 8011366:	3a01      	subs	r2, #1
 8011368:	2300      	movs	r3, #0
 801136a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801136e:	f7ff fe5d 	bl	801102c <__multadd>
 8011372:	4606      	mov	r6, r0
 8011374:	10ad      	asrs	r5, r5, #2
 8011376:	d03d      	beq.n	80113f4 <__pow5mult+0xa0>
 8011378:	69fc      	ldr	r4, [r7, #28]
 801137a:	b97c      	cbnz	r4, 801139c <__pow5mult+0x48>
 801137c:	2010      	movs	r0, #16
 801137e:	f7ff fd2b 	bl	8010dd8 <malloc>
 8011382:	4602      	mov	r2, r0
 8011384:	61f8      	str	r0, [r7, #28]
 8011386:	b928      	cbnz	r0, 8011394 <__pow5mult+0x40>
 8011388:	4b1d      	ldr	r3, [pc, #116]	@ (8011400 <__pow5mult+0xac>)
 801138a:	481e      	ldr	r0, [pc, #120]	@ (8011404 <__pow5mult+0xb0>)
 801138c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011390:	f7fe fb28 	bl	800f9e4 <__assert_func>
 8011394:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011398:	6004      	str	r4, [r0, #0]
 801139a:	60c4      	str	r4, [r0, #12]
 801139c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80113a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80113a4:	b94c      	cbnz	r4, 80113ba <__pow5mult+0x66>
 80113a6:	f240 2171 	movw	r1, #625	@ 0x271
 80113aa:	4638      	mov	r0, r7
 80113ac:	f7ff ff1a 	bl	80111e4 <__i2b>
 80113b0:	2300      	movs	r3, #0
 80113b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80113b6:	4604      	mov	r4, r0
 80113b8:	6003      	str	r3, [r0, #0]
 80113ba:	f04f 0900 	mov.w	r9, #0
 80113be:	07eb      	lsls	r3, r5, #31
 80113c0:	d50a      	bpl.n	80113d8 <__pow5mult+0x84>
 80113c2:	4631      	mov	r1, r6
 80113c4:	4622      	mov	r2, r4
 80113c6:	4638      	mov	r0, r7
 80113c8:	f7ff ff22 	bl	8011210 <__multiply>
 80113cc:	4631      	mov	r1, r6
 80113ce:	4680      	mov	r8, r0
 80113d0:	4638      	mov	r0, r7
 80113d2:	f7ff fe09 	bl	8010fe8 <_Bfree>
 80113d6:	4646      	mov	r6, r8
 80113d8:	106d      	asrs	r5, r5, #1
 80113da:	d00b      	beq.n	80113f4 <__pow5mult+0xa0>
 80113dc:	6820      	ldr	r0, [r4, #0]
 80113de:	b938      	cbnz	r0, 80113f0 <__pow5mult+0x9c>
 80113e0:	4622      	mov	r2, r4
 80113e2:	4621      	mov	r1, r4
 80113e4:	4638      	mov	r0, r7
 80113e6:	f7ff ff13 	bl	8011210 <__multiply>
 80113ea:	6020      	str	r0, [r4, #0]
 80113ec:	f8c0 9000 	str.w	r9, [r0]
 80113f0:	4604      	mov	r4, r0
 80113f2:	e7e4      	b.n	80113be <__pow5mult+0x6a>
 80113f4:	4630      	mov	r0, r6
 80113f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113fa:	bf00      	nop
 80113fc:	0806d2a4 	.word	0x0806d2a4
 8011400:	0806ceac 	.word	0x0806ceac
 8011404:	0806d0c8 	.word	0x0806d0c8

08011408 <__lshift>:
 8011408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801140c:	460c      	mov	r4, r1
 801140e:	6849      	ldr	r1, [r1, #4]
 8011410:	6923      	ldr	r3, [r4, #16]
 8011412:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011416:	68a3      	ldr	r3, [r4, #8]
 8011418:	4607      	mov	r7, r0
 801141a:	4691      	mov	r9, r2
 801141c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011420:	f108 0601 	add.w	r6, r8, #1
 8011424:	42b3      	cmp	r3, r6
 8011426:	db0b      	blt.n	8011440 <__lshift+0x38>
 8011428:	4638      	mov	r0, r7
 801142a:	f7ff fd9d 	bl	8010f68 <_Balloc>
 801142e:	4605      	mov	r5, r0
 8011430:	b948      	cbnz	r0, 8011446 <__lshift+0x3e>
 8011432:	4602      	mov	r2, r0
 8011434:	4b28      	ldr	r3, [pc, #160]	@ (80114d8 <__lshift+0xd0>)
 8011436:	4829      	ldr	r0, [pc, #164]	@ (80114dc <__lshift+0xd4>)
 8011438:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801143c:	f7fe fad2 	bl	800f9e4 <__assert_func>
 8011440:	3101      	adds	r1, #1
 8011442:	005b      	lsls	r3, r3, #1
 8011444:	e7ee      	b.n	8011424 <__lshift+0x1c>
 8011446:	2300      	movs	r3, #0
 8011448:	f100 0114 	add.w	r1, r0, #20
 801144c:	f100 0210 	add.w	r2, r0, #16
 8011450:	4618      	mov	r0, r3
 8011452:	4553      	cmp	r3, sl
 8011454:	db33      	blt.n	80114be <__lshift+0xb6>
 8011456:	6920      	ldr	r0, [r4, #16]
 8011458:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801145c:	f104 0314 	add.w	r3, r4, #20
 8011460:	f019 091f 	ands.w	r9, r9, #31
 8011464:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011468:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801146c:	d02b      	beq.n	80114c6 <__lshift+0xbe>
 801146e:	f1c9 0e20 	rsb	lr, r9, #32
 8011472:	468a      	mov	sl, r1
 8011474:	2200      	movs	r2, #0
 8011476:	6818      	ldr	r0, [r3, #0]
 8011478:	fa00 f009 	lsl.w	r0, r0, r9
 801147c:	4310      	orrs	r0, r2
 801147e:	f84a 0b04 	str.w	r0, [sl], #4
 8011482:	f853 2b04 	ldr.w	r2, [r3], #4
 8011486:	459c      	cmp	ip, r3
 8011488:	fa22 f20e 	lsr.w	r2, r2, lr
 801148c:	d8f3      	bhi.n	8011476 <__lshift+0x6e>
 801148e:	ebac 0304 	sub.w	r3, ip, r4
 8011492:	3b15      	subs	r3, #21
 8011494:	f023 0303 	bic.w	r3, r3, #3
 8011498:	3304      	adds	r3, #4
 801149a:	f104 0015 	add.w	r0, r4, #21
 801149e:	4560      	cmp	r0, ip
 80114a0:	bf88      	it	hi
 80114a2:	2304      	movhi	r3, #4
 80114a4:	50ca      	str	r2, [r1, r3]
 80114a6:	b10a      	cbz	r2, 80114ac <__lshift+0xa4>
 80114a8:	f108 0602 	add.w	r6, r8, #2
 80114ac:	3e01      	subs	r6, #1
 80114ae:	4638      	mov	r0, r7
 80114b0:	612e      	str	r6, [r5, #16]
 80114b2:	4621      	mov	r1, r4
 80114b4:	f7ff fd98 	bl	8010fe8 <_Bfree>
 80114b8:	4628      	mov	r0, r5
 80114ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114be:	f842 0f04 	str.w	r0, [r2, #4]!
 80114c2:	3301      	adds	r3, #1
 80114c4:	e7c5      	b.n	8011452 <__lshift+0x4a>
 80114c6:	3904      	subs	r1, #4
 80114c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80114cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80114d0:	459c      	cmp	ip, r3
 80114d2:	d8f9      	bhi.n	80114c8 <__lshift+0xc0>
 80114d4:	e7ea      	b.n	80114ac <__lshift+0xa4>
 80114d6:	bf00      	nop
 80114d8:	0806d057 	.word	0x0806d057
 80114dc:	0806d0c8 	.word	0x0806d0c8

080114e0 <__mcmp>:
 80114e0:	690a      	ldr	r2, [r1, #16]
 80114e2:	4603      	mov	r3, r0
 80114e4:	6900      	ldr	r0, [r0, #16]
 80114e6:	1a80      	subs	r0, r0, r2
 80114e8:	b530      	push	{r4, r5, lr}
 80114ea:	d10e      	bne.n	801150a <__mcmp+0x2a>
 80114ec:	3314      	adds	r3, #20
 80114ee:	3114      	adds	r1, #20
 80114f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80114f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80114f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80114fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011500:	4295      	cmp	r5, r2
 8011502:	d003      	beq.n	801150c <__mcmp+0x2c>
 8011504:	d205      	bcs.n	8011512 <__mcmp+0x32>
 8011506:	f04f 30ff 	mov.w	r0, #4294967295
 801150a:	bd30      	pop	{r4, r5, pc}
 801150c:	42a3      	cmp	r3, r4
 801150e:	d3f3      	bcc.n	80114f8 <__mcmp+0x18>
 8011510:	e7fb      	b.n	801150a <__mcmp+0x2a>
 8011512:	2001      	movs	r0, #1
 8011514:	e7f9      	b.n	801150a <__mcmp+0x2a>
	...

08011518 <__mdiff>:
 8011518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801151c:	4689      	mov	r9, r1
 801151e:	4606      	mov	r6, r0
 8011520:	4611      	mov	r1, r2
 8011522:	4648      	mov	r0, r9
 8011524:	4614      	mov	r4, r2
 8011526:	f7ff ffdb 	bl	80114e0 <__mcmp>
 801152a:	1e05      	subs	r5, r0, #0
 801152c:	d112      	bne.n	8011554 <__mdiff+0x3c>
 801152e:	4629      	mov	r1, r5
 8011530:	4630      	mov	r0, r6
 8011532:	f7ff fd19 	bl	8010f68 <_Balloc>
 8011536:	4602      	mov	r2, r0
 8011538:	b928      	cbnz	r0, 8011546 <__mdiff+0x2e>
 801153a:	4b3f      	ldr	r3, [pc, #252]	@ (8011638 <__mdiff+0x120>)
 801153c:	f240 2137 	movw	r1, #567	@ 0x237
 8011540:	483e      	ldr	r0, [pc, #248]	@ (801163c <__mdiff+0x124>)
 8011542:	f7fe fa4f 	bl	800f9e4 <__assert_func>
 8011546:	2301      	movs	r3, #1
 8011548:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801154c:	4610      	mov	r0, r2
 801154e:	b003      	add	sp, #12
 8011550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011554:	bfbc      	itt	lt
 8011556:	464b      	movlt	r3, r9
 8011558:	46a1      	movlt	r9, r4
 801155a:	4630      	mov	r0, r6
 801155c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011560:	bfba      	itte	lt
 8011562:	461c      	movlt	r4, r3
 8011564:	2501      	movlt	r5, #1
 8011566:	2500      	movge	r5, #0
 8011568:	f7ff fcfe 	bl	8010f68 <_Balloc>
 801156c:	4602      	mov	r2, r0
 801156e:	b918      	cbnz	r0, 8011578 <__mdiff+0x60>
 8011570:	4b31      	ldr	r3, [pc, #196]	@ (8011638 <__mdiff+0x120>)
 8011572:	f240 2145 	movw	r1, #581	@ 0x245
 8011576:	e7e3      	b.n	8011540 <__mdiff+0x28>
 8011578:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801157c:	6926      	ldr	r6, [r4, #16]
 801157e:	60c5      	str	r5, [r0, #12]
 8011580:	f109 0310 	add.w	r3, r9, #16
 8011584:	f109 0514 	add.w	r5, r9, #20
 8011588:	f104 0e14 	add.w	lr, r4, #20
 801158c:	f100 0b14 	add.w	fp, r0, #20
 8011590:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011594:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011598:	9301      	str	r3, [sp, #4]
 801159a:	46d9      	mov	r9, fp
 801159c:	f04f 0c00 	mov.w	ip, #0
 80115a0:	9b01      	ldr	r3, [sp, #4]
 80115a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80115a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80115aa:	9301      	str	r3, [sp, #4]
 80115ac:	fa1f f38a 	uxth.w	r3, sl
 80115b0:	4619      	mov	r1, r3
 80115b2:	b283      	uxth	r3, r0
 80115b4:	1acb      	subs	r3, r1, r3
 80115b6:	0c00      	lsrs	r0, r0, #16
 80115b8:	4463      	add	r3, ip
 80115ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80115be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80115c8:	4576      	cmp	r6, lr
 80115ca:	f849 3b04 	str.w	r3, [r9], #4
 80115ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80115d2:	d8e5      	bhi.n	80115a0 <__mdiff+0x88>
 80115d4:	1b33      	subs	r3, r6, r4
 80115d6:	3b15      	subs	r3, #21
 80115d8:	f023 0303 	bic.w	r3, r3, #3
 80115dc:	3415      	adds	r4, #21
 80115de:	3304      	adds	r3, #4
 80115e0:	42a6      	cmp	r6, r4
 80115e2:	bf38      	it	cc
 80115e4:	2304      	movcc	r3, #4
 80115e6:	441d      	add	r5, r3
 80115e8:	445b      	add	r3, fp
 80115ea:	461e      	mov	r6, r3
 80115ec:	462c      	mov	r4, r5
 80115ee:	4544      	cmp	r4, r8
 80115f0:	d30e      	bcc.n	8011610 <__mdiff+0xf8>
 80115f2:	f108 0103 	add.w	r1, r8, #3
 80115f6:	1b49      	subs	r1, r1, r5
 80115f8:	f021 0103 	bic.w	r1, r1, #3
 80115fc:	3d03      	subs	r5, #3
 80115fe:	45a8      	cmp	r8, r5
 8011600:	bf38      	it	cc
 8011602:	2100      	movcc	r1, #0
 8011604:	440b      	add	r3, r1
 8011606:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801160a:	b191      	cbz	r1, 8011632 <__mdiff+0x11a>
 801160c:	6117      	str	r7, [r2, #16]
 801160e:	e79d      	b.n	801154c <__mdiff+0x34>
 8011610:	f854 1b04 	ldr.w	r1, [r4], #4
 8011614:	46e6      	mov	lr, ip
 8011616:	0c08      	lsrs	r0, r1, #16
 8011618:	fa1c fc81 	uxtah	ip, ip, r1
 801161c:	4471      	add	r1, lr
 801161e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011622:	b289      	uxth	r1, r1
 8011624:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011628:	f846 1b04 	str.w	r1, [r6], #4
 801162c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011630:	e7dd      	b.n	80115ee <__mdiff+0xd6>
 8011632:	3f01      	subs	r7, #1
 8011634:	e7e7      	b.n	8011606 <__mdiff+0xee>
 8011636:	bf00      	nop
 8011638:	0806d057 	.word	0x0806d057
 801163c:	0806d0c8 	.word	0x0806d0c8

08011640 <__ulp>:
 8011640:	b082      	sub	sp, #8
 8011642:	ed8d 0b00 	vstr	d0, [sp]
 8011646:	9a01      	ldr	r2, [sp, #4]
 8011648:	4b0f      	ldr	r3, [pc, #60]	@ (8011688 <__ulp+0x48>)
 801164a:	4013      	ands	r3, r2
 801164c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011650:	2b00      	cmp	r3, #0
 8011652:	dc08      	bgt.n	8011666 <__ulp+0x26>
 8011654:	425b      	negs	r3, r3
 8011656:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801165a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801165e:	da04      	bge.n	801166a <__ulp+0x2a>
 8011660:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011664:	4113      	asrs	r3, r2
 8011666:	2200      	movs	r2, #0
 8011668:	e008      	b.n	801167c <__ulp+0x3c>
 801166a:	f1a2 0314 	sub.w	r3, r2, #20
 801166e:	2b1e      	cmp	r3, #30
 8011670:	bfda      	itte	le
 8011672:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011676:	40da      	lsrle	r2, r3
 8011678:	2201      	movgt	r2, #1
 801167a:	2300      	movs	r3, #0
 801167c:	4619      	mov	r1, r3
 801167e:	4610      	mov	r0, r2
 8011680:	ec41 0b10 	vmov	d0, r0, r1
 8011684:	b002      	add	sp, #8
 8011686:	4770      	bx	lr
 8011688:	7ff00000 	.word	0x7ff00000

0801168c <__b2d>:
 801168c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011690:	6906      	ldr	r6, [r0, #16]
 8011692:	f100 0814 	add.w	r8, r0, #20
 8011696:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801169a:	1f37      	subs	r7, r6, #4
 801169c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80116a0:	4610      	mov	r0, r2
 80116a2:	f7ff fd53 	bl	801114c <__hi0bits>
 80116a6:	f1c0 0320 	rsb	r3, r0, #32
 80116aa:	280a      	cmp	r0, #10
 80116ac:	600b      	str	r3, [r1, #0]
 80116ae:	491b      	ldr	r1, [pc, #108]	@ (801171c <__b2d+0x90>)
 80116b0:	dc15      	bgt.n	80116de <__b2d+0x52>
 80116b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80116b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80116ba:	45b8      	cmp	r8, r7
 80116bc:	ea43 0501 	orr.w	r5, r3, r1
 80116c0:	bf34      	ite	cc
 80116c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80116c6:	2300      	movcs	r3, #0
 80116c8:	3015      	adds	r0, #21
 80116ca:	fa02 f000 	lsl.w	r0, r2, r0
 80116ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80116d2:	4303      	orrs	r3, r0
 80116d4:	461c      	mov	r4, r3
 80116d6:	ec45 4b10 	vmov	d0, r4, r5
 80116da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116de:	45b8      	cmp	r8, r7
 80116e0:	bf3a      	itte	cc
 80116e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80116e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80116ea:	2300      	movcs	r3, #0
 80116ec:	380b      	subs	r0, #11
 80116ee:	d012      	beq.n	8011716 <__b2d+0x8a>
 80116f0:	f1c0 0120 	rsb	r1, r0, #32
 80116f4:	fa23 f401 	lsr.w	r4, r3, r1
 80116f8:	4082      	lsls	r2, r0
 80116fa:	4322      	orrs	r2, r4
 80116fc:	4547      	cmp	r7, r8
 80116fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011702:	bf8c      	ite	hi
 8011704:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011708:	2200      	movls	r2, #0
 801170a:	4083      	lsls	r3, r0
 801170c:	40ca      	lsrs	r2, r1
 801170e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011712:	4313      	orrs	r3, r2
 8011714:	e7de      	b.n	80116d4 <__b2d+0x48>
 8011716:	ea42 0501 	orr.w	r5, r2, r1
 801171a:	e7db      	b.n	80116d4 <__b2d+0x48>
 801171c:	3ff00000 	.word	0x3ff00000

08011720 <__d2b>:
 8011720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011724:	460f      	mov	r7, r1
 8011726:	2101      	movs	r1, #1
 8011728:	ec59 8b10 	vmov	r8, r9, d0
 801172c:	4616      	mov	r6, r2
 801172e:	f7ff fc1b 	bl	8010f68 <_Balloc>
 8011732:	4604      	mov	r4, r0
 8011734:	b930      	cbnz	r0, 8011744 <__d2b+0x24>
 8011736:	4602      	mov	r2, r0
 8011738:	4b23      	ldr	r3, [pc, #140]	@ (80117c8 <__d2b+0xa8>)
 801173a:	4824      	ldr	r0, [pc, #144]	@ (80117cc <__d2b+0xac>)
 801173c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011740:	f7fe f950 	bl	800f9e4 <__assert_func>
 8011744:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011748:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801174c:	b10d      	cbz	r5, 8011752 <__d2b+0x32>
 801174e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011752:	9301      	str	r3, [sp, #4]
 8011754:	f1b8 0300 	subs.w	r3, r8, #0
 8011758:	d023      	beq.n	80117a2 <__d2b+0x82>
 801175a:	4668      	mov	r0, sp
 801175c:	9300      	str	r3, [sp, #0]
 801175e:	f7ff fd14 	bl	801118a <__lo0bits>
 8011762:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011766:	b1d0      	cbz	r0, 801179e <__d2b+0x7e>
 8011768:	f1c0 0320 	rsb	r3, r0, #32
 801176c:	fa02 f303 	lsl.w	r3, r2, r3
 8011770:	430b      	orrs	r3, r1
 8011772:	40c2      	lsrs	r2, r0
 8011774:	6163      	str	r3, [r4, #20]
 8011776:	9201      	str	r2, [sp, #4]
 8011778:	9b01      	ldr	r3, [sp, #4]
 801177a:	61a3      	str	r3, [r4, #24]
 801177c:	2b00      	cmp	r3, #0
 801177e:	bf0c      	ite	eq
 8011780:	2201      	moveq	r2, #1
 8011782:	2202      	movne	r2, #2
 8011784:	6122      	str	r2, [r4, #16]
 8011786:	b1a5      	cbz	r5, 80117b2 <__d2b+0x92>
 8011788:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801178c:	4405      	add	r5, r0
 801178e:	603d      	str	r5, [r7, #0]
 8011790:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011794:	6030      	str	r0, [r6, #0]
 8011796:	4620      	mov	r0, r4
 8011798:	b003      	add	sp, #12
 801179a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801179e:	6161      	str	r1, [r4, #20]
 80117a0:	e7ea      	b.n	8011778 <__d2b+0x58>
 80117a2:	a801      	add	r0, sp, #4
 80117a4:	f7ff fcf1 	bl	801118a <__lo0bits>
 80117a8:	9b01      	ldr	r3, [sp, #4]
 80117aa:	6163      	str	r3, [r4, #20]
 80117ac:	3020      	adds	r0, #32
 80117ae:	2201      	movs	r2, #1
 80117b0:	e7e8      	b.n	8011784 <__d2b+0x64>
 80117b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80117b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80117ba:	6038      	str	r0, [r7, #0]
 80117bc:	6918      	ldr	r0, [r3, #16]
 80117be:	f7ff fcc5 	bl	801114c <__hi0bits>
 80117c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80117c6:	e7e5      	b.n	8011794 <__d2b+0x74>
 80117c8:	0806d057 	.word	0x0806d057
 80117cc:	0806d0c8 	.word	0x0806d0c8

080117d0 <__ratio>:
 80117d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d4:	b085      	sub	sp, #20
 80117d6:	e9cd 1000 	strd	r1, r0, [sp]
 80117da:	a902      	add	r1, sp, #8
 80117dc:	f7ff ff56 	bl	801168c <__b2d>
 80117e0:	9800      	ldr	r0, [sp, #0]
 80117e2:	a903      	add	r1, sp, #12
 80117e4:	ec55 4b10 	vmov	r4, r5, d0
 80117e8:	f7ff ff50 	bl	801168c <__b2d>
 80117ec:	9b01      	ldr	r3, [sp, #4]
 80117ee:	6919      	ldr	r1, [r3, #16]
 80117f0:	9b00      	ldr	r3, [sp, #0]
 80117f2:	691b      	ldr	r3, [r3, #16]
 80117f4:	1ac9      	subs	r1, r1, r3
 80117f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80117fa:	1a9b      	subs	r3, r3, r2
 80117fc:	ec5b ab10 	vmov	sl, fp, d0
 8011800:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011804:	2b00      	cmp	r3, #0
 8011806:	bfce      	itee	gt
 8011808:	462a      	movgt	r2, r5
 801180a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801180e:	465a      	movle	r2, fp
 8011810:	462f      	mov	r7, r5
 8011812:	46d9      	mov	r9, fp
 8011814:	bfcc      	ite	gt
 8011816:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801181a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801181e:	464b      	mov	r3, r9
 8011820:	4652      	mov	r2, sl
 8011822:	4620      	mov	r0, r4
 8011824:	4639      	mov	r1, r7
 8011826:	f7ef f821 	bl	800086c <__aeabi_ddiv>
 801182a:	ec41 0b10 	vmov	d0, r0, r1
 801182e:	b005      	add	sp, #20
 8011830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011834 <__copybits>:
 8011834:	3901      	subs	r1, #1
 8011836:	b570      	push	{r4, r5, r6, lr}
 8011838:	1149      	asrs	r1, r1, #5
 801183a:	6914      	ldr	r4, [r2, #16]
 801183c:	3101      	adds	r1, #1
 801183e:	f102 0314 	add.w	r3, r2, #20
 8011842:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011846:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801184a:	1f05      	subs	r5, r0, #4
 801184c:	42a3      	cmp	r3, r4
 801184e:	d30c      	bcc.n	801186a <__copybits+0x36>
 8011850:	1aa3      	subs	r3, r4, r2
 8011852:	3b11      	subs	r3, #17
 8011854:	f023 0303 	bic.w	r3, r3, #3
 8011858:	3211      	adds	r2, #17
 801185a:	42a2      	cmp	r2, r4
 801185c:	bf88      	it	hi
 801185e:	2300      	movhi	r3, #0
 8011860:	4418      	add	r0, r3
 8011862:	2300      	movs	r3, #0
 8011864:	4288      	cmp	r0, r1
 8011866:	d305      	bcc.n	8011874 <__copybits+0x40>
 8011868:	bd70      	pop	{r4, r5, r6, pc}
 801186a:	f853 6b04 	ldr.w	r6, [r3], #4
 801186e:	f845 6f04 	str.w	r6, [r5, #4]!
 8011872:	e7eb      	b.n	801184c <__copybits+0x18>
 8011874:	f840 3b04 	str.w	r3, [r0], #4
 8011878:	e7f4      	b.n	8011864 <__copybits+0x30>

0801187a <__any_on>:
 801187a:	f100 0214 	add.w	r2, r0, #20
 801187e:	6900      	ldr	r0, [r0, #16]
 8011880:	114b      	asrs	r3, r1, #5
 8011882:	4298      	cmp	r0, r3
 8011884:	b510      	push	{r4, lr}
 8011886:	db11      	blt.n	80118ac <__any_on+0x32>
 8011888:	dd0a      	ble.n	80118a0 <__any_on+0x26>
 801188a:	f011 011f 	ands.w	r1, r1, #31
 801188e:	d007      	beq.n	80118a0 <__any_on+0x26>
 8011890:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011894:	fa24 f001 	lsr.w	r0, r4, r1
 8011898:	fa00 f101 	lsl.w	r1, r0, r1
 801189c:	428c      	cmp	r4, r1
 801189e:	d10b      	bne.n	80118b8 <__any_on+0x3e>
 80118a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d803      	bhi.n	80118b0 <__any_on+0x36>
 80118a8:	2000      	movs	r0, #0
 80118aa:	bd10      	pop	{r4, pc}
 80118ac:	4603      	mov	r3, r0
 80118ae:	e7f7      	b.n	80118a0 <__any_on+0x26>
 80118b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80118b4:	2900      	cmp	r1, #0
 80118b6:	d0f5      	beq.n	80118a4 <__any_on+0x2a>
 80118b8:	2001      	movs	r0, #1
 80118ba:	e7f6      	b.n	80118aa <__any_on+0x30>

080118bc <__ascii_wctomb>:
 80118bc:	4603      	mov	r3, r0
 80118be:	4608      	mov	r0, r1
 80118c0:	b141      	cbz	r1, 80118d4 <__ascii_wctomb+0x18>
 80118c2:	2aff      	cmp	r2, #255	@ 0xff
 80118c4:	d904      	bls.n	80118d0 <__ascii_wctomb+0x14>
 80118c6:	228a      	movs	r2, #138	@ 0x8a
 80118c8:	601a      	str	r2, [r3, #0]
 80118ca:	f04f 30ff 	mov.w	r0, #4294967295
 80118ce:	4770      	bx	lr
 80118d0:	700a      	strb	r2, [r1, #0]
 80118d2:	2001      	movs	r0, #1
 80118d4:	4770      	bx	lr

080118d6 <__ssputs_r>:
 80118d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118da:	688e      	ldr	r6, [r1, #8]
 80118dc:	461f      	mov	r7, r3
 80118de:	42be      	cmp	r6, r7
 80118e0:	680b      	ldr	r3, [r1, #0]
 80118e2:	4682      	mov	sl, r0
 80118e4:	460c      	mov	r4, r1
 80118e6:	4690      	mov	r8, r2
 80118e8:	d82d      	bhi.n	8011946 <__ssputs_r+0x70>
 80118ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80118ee:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80118f2:	d026      	beq.n	8011942 <__ssputs_r+0x6c>
 80118f4:	6965      	ldr	r5, [r4, #20]
 80118f6:	6909      	ldr	r1, [r1, #16]
 80118f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80118fc:	eba3 0901 	sub.w	r9, r3, r1
 8011900:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011904:	1c7b      	adds	r3, r7, #1
 8011906:	444b      	add	r3, r9
 8011908:	106d      	asrs	r5, r5, #1
 801190a:	429d      	cmp	r5, r3
 801190c:	bf38      	it	cc
 801190e:	461d      	movcc	r5, r3
 8011910:	0553      	lsls	r3, r2, #21
 8011912:	d527      	bpl.n	8011964 <__ssputs_r+0x8e>
 8011914:	4629      	mov	r1, r5
 8011916:	f7ff fa89 	bl	8010e2c <_malloc_r>
 801191a:	4606      	mov	r6, r0
 801191c:	b360      	cbz	r0, 8011978 <__ssputs_r+0xa2>
 801191e:	6921      	ldr	r1, [r4, #16]
 8011920:	464a      	mov	r2, r9
 8011922:	f7fe f840 	bl	800f9a6 <memcpy>
 8011926:	89a3      	ldrh	r3, [r4, #12]
 8011928:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801192c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011930:	81a3      	strh	r3, [r4, #12]
 8011932:	6126      	str	r6, [r4, #16]
 8011934:	6165      	str	r5, [r4, #20]
 8011936:	444e      	add	r6, r9
 8011938:	eba5 0509 	sub.w	r5, r5, r9
 801193c:	6026      	str	r6, [r4, #0]
 801193e:	60a5      	str	r5, [r4, #8]
 8011940:	463e      	mov	r6, r7
 8011942:	42be      	cmp	r6, r7
 8011944:	d900      	bls.n	8011948 <__ssputs_r+0x72>
 8011946:	463e      	mov	r6, r7
 8011948:	6820      	ldr	r0, [r4, #0]
 801194a:	4632      	mov	r2, r6
 801194c:	4641      	mov	r1, r8
 801194e:	f000 fd68 	bl	8012422 <memmove>
 8011952:	68a3      	ldr	r3, [r4, #8]
 8011954:	1b9b      	subs	r3, r3, r6
 8011956:	60a3      	str	r3, [r4, #8]
 8011958:	6823      	ldr	r3, [r4, #0]
 801195a:	4433      	add	r3, r6
 801195c:	6023      	str	r3, [r4, #0]
 801195e:	2000      	movs	r0, #0
 8011960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011964:	462a      	mov	r2, r5
 8011966:	f000 fda2 	bl	80124ae <_realloc_r>
 801196a:	4606      	mov	r6, r0
 801196c:	2800      	cmp	r0, #0
 801196e:	d1e0      	bne.n	8011932 <__ssputs_r+0x5c>
 8011970:	6921      	ldr	r1, [r4, #16]
 8011972:	4650      	mov	r0, sl
 8011974:	f7fe feac 	bl	80106d0 <_free_r>
 8011978:	230c      	movs	r3, #12
 801197a:	f8ca 3000 	str.w	r3, [sl]
 801197e:	89a3      	ldrh	r3, [r4, #12]
 8011980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011984:	81a3      	strh	r3, [r4, #12]
 8011986:	f04f 30ff 	mov.w	r0, #4294967295
 801198a:	e7e9      	b.n	8011960 <__ssputs_r+0x8a>

0801198c <_svfiprintf_r>:
 801198c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011990:	4698      	mov	r8, r3
 8011992:	898b      	ldrh	r3, [r1, #12]
 8011994:	061b      	lsls	r3, r3, #24
 8011996:	b09d      	sub	sp, #116	@ 0x74
 8011998:	4607      	mov	r7, r0
 801199a:	460d      	mov	r5, r1
 801199c:	4614      	mov	r4, r2
 801199e:	d510      	bpl.n	80119c2 <_svfiprintf_r+0x36>
 80119a0:	690b      	ldr	r3, [r1, #16]
 80119a2:	b973      	cbnz	r3, 80119c2 <_svfiprintf_r+0x36>
 80119a4:	2140      	movs	r1, #64	@ 0x40
 80119a6:	f7ff fa41 	bl	8010e2c <_malloc_r>
 80119aa:	6028      	str	r0, [r5, #0]
 80119ac:	6128      	str	r0, [r5, #16]
 80119ae:	b930      	cbnz	r0, 80119be <_svfiprintf_r+0x32>
 80119b0:	230c      	movs	r3, #12
 80119b2:	603b      	str	r3, [r7, #0]
 80119b4:	f04f 30ff 	mov.w	r0, #4294967295
 80119b8:	b01d      	add	sp, #116	@ 0x74
 80119ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119be:	2340      	movs	r3, #64	@ 0x40
 80119c0:	616b      	str	r3, [r5, #20]
 80119c2:	2300      	movs	r3, #0
 80119c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80119c6:	2320      	movs	r3, #32
 80119c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80119cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80119d0:	2330      	movs	r3, #48	@ 0x30
 80119d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011b70 <_svfiprintf_r+0x1e4>
 80119d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80119da:	f04f 0901 	mov.w	r9, #1
 80119de:	4623      	mov	r3, r4
 80119e0:	469a      	mov	sl, r3
 80119e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119e6:	b10a      	cbz	r2, 80119ec <_svfiprintf_r+0x60>
 80119e8:	2a25      	cmp	r2, #37	@ 0x25
 80119ea:	d1f9      	bne.n	80119e0 <_svfiprintf_r+0x54>
 80119ec:	ebba 0b04 	subs.w	fp, sl, r4
 80119f0:	d00b      	beq.n	8011a0a <_svfiprintf_r+0x7e>
 80119f2:	465b      	mov	r3, fp
 80119f4:	4622      	mov	r2, r4
 80119f6:	4629      	mov	r1, r5
 80119f8:	4638      	mov	r0, r7
 80119fa:	f7ff ff6c 	bl	80118d6 <__ssputs_r>
 80119fe:	3001      	adds	r0, #1
 8011a00:	f000 80a7 	beq.w	8011b52 <_svfiprintf_r+0x1c6>
 8011a04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a06:	445a      	add	r2, fp
 8011a08:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f000 809f 	beq.w	8011b52 <_svfiprintf_r+0x1c6>
 8011a14:	2300      	movs	r3, #0
 8011a16:	f04f 32ff 	mov.w	r2, #4294967295
 8011a1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a1e:	f10a 0a01 	add.w	sl, sl, #1
 8011a22:	9304      	str	r3, [sp, #16]
 8011a24:	9307      	str	r3, [sp, #28]
 8011a26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a2c:	4654      	mov	r4, sl
 8011a2e:	2205      	movs	r2, #5
 8011a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a34:	484e      	ldr	r0, [pc, #312]	@ (8011b70 <_svfiprintf_r+0x1e4>)
 8011a36:	f7ee fbdb 	bl	80001f0 <memchr>
 8011a3a:	9a04      	ldr	r2, [sp, #16]
 8011a3c:	b9d8      	cbnz	r0, 8011a76 <_svfiprintf_r+0xea>
 8011a3e:	06d0      	lsls	r0, r2, #27
 8011a40:	bf44      	itt	mi
 8011a42:	2320      	movmi	r3, #32
 8011a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a48:	0711      	lsls	r1, r2, #28
 8011a4a:	bf44      	itt	mi
 8011a4c:	232b      	movmi	r3, #43	@ 0x2b
 8011a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a52:	f89a 3000 	ldrb.w	r3, [sl]
 8011a56:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a58:	d015      	beq.n	8011a86 <_svfiprintf_r+0xfa>
 8011a5a:	9a07      	ldr	r2, [sp, #28]
 8011a5c:	4654      	mov	r4, sl
 8011a5e:	2000      	movs	r0, #0
 8011a60:	f04f 0c0a 	mov.w	ip, #10
 8011a64:	4621      	mov	r1, r4
 8011a66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a6a:	3b30      	subs	r3, #48	@ 0x30
 8011a6c:	2b09      	cmp	r3, #9
 8011a6e:	d94b      	bls.n	8011b08 <_svfiprintf_r+0x17c>
 8011a70:	b1b0      	cbz	r0, 8011aa0 <_svfiprintf_r+0x114>
 8011a72:	9207      	str	r2, [sp, #28]
 8011a74:	e014      	b.n	8011aa0 <_svfiprintf_r+0x114>
 8011a76:	eba0 0308 	sub.w	r3, r0, r8
 8011a7a:	fa09 f303 	lsl.w	r3, r9, r3
 8011a7e:	4313      	orrs	r3, r2
 8011a80:	9304      	str	r3, [sp, #16]
 8011a82:	46a2      	mov	sl, r4
 8011a84:	e7d2      	b.n	8011a2c <_svfiprintf_r+0xa0>
 8011a86:	9b03      	ldr	r3, [sp, #12]
 8011a88:	1d19      	adds	r1, r3, #4
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	9103      	str	r1, [sp, #12]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	bfbb      	ittet	lt
 8011a92:	425b      	neglt	r3, r3
 8011a94:	f042 0202 	orrlt.w	r2, r2, #2
 8011a98:	9307      	strge	r3, [sp, #28]
 8011a9a:	9307      	strlt	r3, [sp, #28]
 8011a9c:	bfb8      	it	lt
 8011a9e:	9204      	strlt	r2, [sp, #16]
 8011aa0:	7823      	ldrb	r3, [r4, #0]
 8011aa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8011aa4:	d10a      	bne.n	8011abc <_svfiprintf_r+0x130>
 8011aa6:	7863      	ldrb	r3, [r4, #1]
 8011aa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011aaa:	d132      	bne.n	8011b12 <_svfiprintf_r+0x186>
 8011aac:	9b03      	ldr	r3, [sp, #12]
 8011aae:	1d1a      	adds	r2, r3, #4
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	9203      	str	r2, [sp, #12]
 8011ab4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ab8:	3402      	adds	r4, #2
 8011aba:	9305      	str	r3, [sp, #20]
 8011abc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011b80 <_svfiprintf_r+0x1f4>
 8011ac0:	7821      	ldrb	r1, [r4, #0]
 8011ac2:	2203      	movs	r2, #3
 8011ac4:	4650      	mov	r0, sl
 8011ac6:	f7ee fb93 	bl	80001f0 <memchr>
 8011aca:	b138      	cbz	r0, 8011adc <_svfiprintf_r+0x150>
 8011acc:	9b04      	ldr	r3, [sp, #16]
 8011ace:	eba0 000a 	sub.w	r0, r0, sl
 8011ad2:	2240      	movs	r2, #64	@ 0x40
 8011ad4:	4082      	lsls	r2, r0
 8011ad6:	4313      	orrs	r3, r2
 8011ad8:	3401      	adds	r4, #1
 8011ada:	9304      	str	r3, [sp, #16]
 8011adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ae0:	4824      	ldr	r0, [pc, #144]	@ (8011b74 <_svfiprintf_r+0x1e8>)
 8011ae2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ae6:	2206      	movs	r2, #6
 8011ae8:	f7ee fb82 	bl	80001f0 <memchr>
 8011aec:	2800      	cmp	r0, #0
 8011aee:	d036      	beq.n	8011b5e <_svfiprintf_r+0x1d2>
 8011af0:	4b21      	ldr	r3, [pc, #132]	@ (8011b78 <_svfiprintf_r+0x1ec>)
 8011af2:	bb1b      	cbnz	r3, 8011b3c <_svfiprintf_r+0x1b0>
 8011af4:	9b03      	ldr	r3, [sp, #12]
 8011af6:	3307      	adds	r3, #7
 8011af8:	f023 0307 	bic.w	r3, r3, #7
 8011afc:	3308      	adds	r3, #8
 8011afe:	9303      	str	r3, [sp, #12]
 8011b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b02:	4433      	add	r3, r6
 8011b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b06:	e76a      	b.n	80119de <_svfiprintf_r+0x52>
 8011b08:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b0c:	460c      	mov	r4, r1
 8011b0e:	2001      	movs	r0, #1
 8011b10:	e7a8      	b.n	8011a64 <_svfiprintf_r+0xd8>
 8011b12:	2300      	movs	r3, #0
 8011b14:	3401      	adds	r4, #1
 8011b16:	9305      	str	r3, [sp, #20]
 8011b18:	4619      	mov	r1, r3
 8011b1a:	f04f 0c0a 	mov.w	ip, #10
 8011b1e:	4620      	mov	r0, r4
 8011b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b24:	3a30      	subs	r2, #48	@ 0x30
 8011b26:	2a09      	cmp	r2, #9
 8011b28:	d903      	bls.n	8011b32 <_svfiprintf_r+0x1a6>
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d0c6      	beq.n	8011abc <_svfiprintf_r+0x130>
 8011b2e:	9105      	str	r1, [sp, #20]
 8011b30:	e7c4      	b.n	8011abc <_svfiprintf_r+0x130>
 8011b32:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b36:	4604      	mov	r4, r0
 8011b38:	2301      	movs	r3, #1
 8011b3a:	e7f0      	b.n	8011b1e <_svfiprintf_r+0x192>
 8011b3c:	ab03      	add	r3, sp, #12
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	462a      	mov	r2, r5
 8011b42:	4b0e      	ldr	r3, [pc, #56]	@ (8011b7c <_svfiprintf_r+0x1f0>)
 8011b44:	a904      	add	r1, sp, #16
 8011b46:	4638      	mov	r0, r7
 8011b48:	f7fc feba 	bl	800e8c0 <_printf_float>
 8011b4c:	1c42      	adds	r2, r0, #1
 8011b4e:	4606      	mov	r6, r0
 8011b50:	d1d6      	bne.n	8011b00 <_svfiprintf_r+0x174>
 8011b52:	89ab      	ldrh	r3, [r5, #12]
 8011b54:	065b      	lsls	r3, r3, #25
 8011b56:	f53f af2d 	bmi.w	80119b4 <_svfiprintf_r+0x28>
 8011b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b5c:	e72c      	b.n	80119b8 <_svfiprintf_r+0x2c>
 8011b5e:	ab03      	add	r3, sp, #12
 8011b60:	9300      	str	r3, [sp, #0]
 8011b62:	462a      	mov	r2, r5
 8011b64:	4b05      	ldr	r3, [pc, #20]	@ (8011b7c <_svfiprintf_r+0x1f0>)
 8011b66:	a904      	add	r1, sp, #16
 8011b68:	4638      	mov	r0, r7
 8011b6a:	f7fd f941 	bl	800edf0 <_printf_i>
 8011b6e:	e7ed      	b.n	8011b4c <_svfiprintf_r+0x1c0>
 8011b70:	0806d121 	.word	0x0806d121
 8011b74:	0806d12b 	.word	0x0806d12b
 8011b78:	0800e8c1 	.word	0x0800e8c1
 8011b7c:	080118d7 	.word	0x080118d7
 8011b80:	0806d127 	.word	0x0806d127

08011b84 <_sungetc_r>:
 8011b84:	b538      	push	{r3, r4, r5, lr}
 8011b86:	1c4b      	adds	r3, r1, #1
 8011b88:	4614      	mov	r4, r2
 8011b8a:	d103      	bne.n	8011b94 <_sungetc_r+0x10>
 8011b8c:	f04f 35ff 	mov.w	r5, #4294967295
 8011b90:	4628      	mov	r0, r5
 8011b92:	bd38      	pop	{r3, r4, r5, pc}
 8011b94:	8993      	ldrh	r3, [r2, #12]
 8011b96:	f023 0320 	bic.w	r3, r3, #32
 8011b9a:	8193      	strh	r3, [r2, #12]
 8011b9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b9e:	6852      	ldr	r2, [r2, #4]
 8011ba0:	b2cd      	uxtb	r5, r1
 8011ba2:	b18b      	cbz	r3, 8011bc8 <_sungetc_r+0x44>
 8011ba4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	dd08      	ble.n	8011bbc <_sungetc_r+0x38>
 8011baa:	6823      	ldr	r3, [r4, #0]
 8011bac:	1e5a      	subs	r2, r3, #1
 8011bae:	6022      	str	r2, [r4, #0]
 8011bb0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011bb4:	6863      	ldr	r3, [r4, #4]
 8011bb6:	3301      	adds	r3, #1
 8011bb8:	6063      	str	r3, [r4, #4]
 8011bba:	e7e9      	b.n	8011b90 <_sungetc_r+0xc>
 8011bbc:	4621      	mov	r1, r4
 8011bbe:	f000 fbf6 	bl	80123ae <__submore>
 8011bc2:	2800      	cmp	r0, #0
 8011bc4:	d0f1      	beq.n	8011baa <_sungetc_r+0x26>
 8011bc6:	e7e1      	b.n	8011b8c <_sungetc_r+0x8>
 8011bc8:	6921      	ldr	r1, [r4, #16]
 8011bca:	6823      	ldr	r3, [r4, #0]
 8011bcc:	b151      	cbz	r1, 8011be4 <_sungetc_r+0x60>
 8011bce:	4299      	cmp	r1, r3
 8011bd0:	d208      	bcs.n	8011be4 <_sungetc_r+0x60>
 8011bd2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011bd6:	42a9      	cmp	r1, r5
 8011bd8:	d104      	bne.n	8011be4 <_sungetc_r+0x60>
 8011bda:	3b01      	subs	r3, #1
 8011bdc:	3201      	adds	r2, #1
 8011bde:	6023      	str	r3, [r4, #0]
 8011be0:	6062      	str	r2, [r4, #4]
 8011be2:	e7d5      	b.n	8011b90 <_sungetc_r+0xc>
 8011be4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8011be8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011bec:	6363      	str	r3, [r4, #52]	@ 0x34
 8011bee:	2303      	movs	r3, #3
 8011bf0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011bf2:	4623      	mov	r3, r4
 8011bf4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011bf8:	6023      	str	r3, [r4, #0]
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	e7dc      	b.n	8011bb8 <_sungetc_r+0x34>

08011bfe <__ssrefill_r>:
 8011bfe:	b510      	push	{r4, lr}
 8011c00:	460c      	mov	r4, r1
 8011c02:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011c04:	b169      	cbz	r1, 8011c22 <__ssrefill_r+0x24>
 8011c06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c0a:	4299      	cmp	r1, r3
 8011c0c:	d001      	beq.n	8011c12 <__ssrefill_r+0x14>
 8011c0e:	f7fe fd5f 	bl	80106d0 <_free_r>
 8011c12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011c14:	6063      	str	r3, [r4, #4]
 8011c16:	2000      	movs	r0, #0
 8011c18:	6360      	str	r0, [r4, #52]	@ 0x34
 8011c1a:	b113      	cbz	r3, 8011c22 <__ssrefill_r+0x24>
 8011c1c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011c1e:	6023      	str	r3, [r4, #0]
 8011c20:	bd10      	pop	{r4, pc}
 8011c22:	6923      	ldr	r3, [r4, #16]
 8011c24:	6023      	str	r3, [r4, #0]
 8011c26:	2300      	movs	r3, #0
 8011c28:	6063      	str	r3, [r4, #4]
 8011c2a:	89a3      	ldrh	r3, [r4, #12]
 8011c2c:	f043 0320 	orr.w	r3, r3, #32
 8011c30:	81a3      	strh	r3, [r4, #12]
 8011c32:	f04f 30ff 	mov.w	r0, #4294967295
 8011c36:	e7f3      	b.n	8011c20 <__ssrefill_r+0x22>

08011c38 <__ssvfiscanf_r>:
 8011c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c3c:	460c      	mov	r4, r1
 8011c3e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011c42:	2100      	movs	r1, #0
 8011c44:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011c48:	49a6      	ldr	r1, [pc, #664]	@ (8011ee4 <__ssvfiscanf_r+0x2ac>)
 8011c4a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011c4c:	f10d 0804 	add.w	r8, sp, #4
 8011c50:	49a5      	ldr	r1, [pc, #660]	@ (8011ee8 <__ssvfiscanf_r+0x2b0>)
 8011c52:	4fa6      	ldr	r7, [pc, #664]	@ (8011eec <__ssvfiscanf_r+0x2b4>)
 8011c54:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011c58:	4606      	mov	r6, r0
 8011c5a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	f892 9000 	ldrb.w	r9, [r2]
 8011c62:	f1b9 0f00 	cmp.w	r9, #0
 8011c66:	f000 8158 	beq.w	8011f1a <__ssvfiscanf_r+0x2e2>
 8011c6a:	f817 3009 	ldrb.w	r3, [r7, r9]
 8011c6e:	f013 0308 	ands.w	r3, r3, #8
 8011c72:	f102 0501 	add.w	r5, r2, #1
 8011c76:	d019      	beq.n	8011cac <__ssvfiscanf_r+0x74>
 8011c78:	6863      	ldr	r3, [r4, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	dd0f      	ble.n	8011c9e <__ssvfiscanf_r+0x66>
 8011c7e:	6823      	ldr	r3, [r4, #0]
 8011c80:	781a      	ldrb	r2, [r3, #0]
 8011c82:	5cba      	ldrb	r2, [r7, r2]
 8011c84:	0712      	lsls	r2, r2, #28
 8011c86:	d401      	bmi.n	8011c8c <__ssvfiscanf_r+0x54>
 8011c88:	462a      	mov	r2, r5
 8011c8a:	e7e8      	b.n	8011c5e <__ssvfiscanf_r+0x26>
 8011c8c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011c8e:	3201      	adds	r2, #1
 8011c90:	9245      	str	r2, [sp, #276]	@ 0x114
 8011c92:	6862      	ldr	r2, [r4, #4]
 8011c94:	3301      	adds	r3, #1
 8011c96:	3a01      	subs	r2, #1
 8011c98:	6062      	str	r2, [r4, #4]
 8011c9a:	6023      	str	r3, [r4, #0]
 8011c9c:	e7ec      	b.n	8011c78 <__ssvfiscanf_r+0x40>
 8011c9e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011ca0:	4621      	mov	r1, r4
 8011ca2:	4630      	mov	r0, r6
 8011ca4:	4798      	blx	r3
 8011ca6:	2800      	cmp	r0, #0
 8011ca8:	d0e9      	beq.n	8011c7e <__ssvfiscanf_r+0x46>
 8011caa:	e7ed      	b.n	8011c88 <__ssvfiscanf_r+0x50>
 8011cac:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8011cb0:	f040 8085 	bne.w	8011dbe <__ssvfiscanf_r+0x186>
 8011cb4:	9341      	str	r3, [sp, #260]	@ 0x104
 8011cb6:	9343      	str	r3, [sp, #268]	@ 0x10c
 8011cb8:	7853      	ldrb	r3, [r2, #1]
 8011cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cbc:	bf02      	ittt	eq
 8011cbe:	2310      	moveq	r3, #16
 8011cc0:	1c95      	addeq	r5, r2, #2
 8011cc2:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011cc4:	220a      	movs	r2, #10
 8011cc6:	46aa      	mov	sl, r5
 8011cc8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011ccc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011cd0:	2b09      	cmp	r3, #9
 8011cd2:	d91e      	bls.n	8011d12 <__ssvfiscanf_r+0xda>
 8011cd4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8011ef0 <__ssvfiscanf_r+0x2b8>
 8011cd8:	2203      	movs	r2, #3
 8011cda:	4658      	mov	r0, fp
 8011cdc:	f7ee fa88 	bl	80001f0 <memchr>
 8011ce0:	b138      	cbz	r0, 8011cf2 <__ssvfiscanf_r+0xba>
 8011ce2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011ce4:	eba0 000b 	sub.w	r0, r0, fp
 8011ce8:	2301      	movs	r3, #1
 8011cea:	4083      	lsls	r3, r0
 8011cec:	4313      	orrs	r3, r2
 8011cee:	9341      	str	r3, [sp, #260]	@ 0x104
 8011cf0:	4655      	mov	r5, sl
 8011cf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011cf6:	2b78      	cmp	r3, #120	@ 0x78
 8011cf8:	d806      	bhi.n	8011d08 <__ssvfiscanf_r+0xd0>
 8011cfa:	2b57      	cmp	r3, #87	@ 0x57
 8011cfc:	d810      	bhi.n	8011d20 <__ssvfiscanf_r+0xe8>
 8011cfe:	2b25      	cmp	r3, #37	@ 0x25
 8011d00:	d05d      	beq.n	8011dbe <__ssvfiscanf_r+0x186>
 8011d02:	d857      	bhi.n	8011db4 <__ssvfiscanf_r+0x17c>
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d075      	beq.n	8011df4 <__ssvfiscanf_r+0x1bc>
 8011d08:	2303      	movs	r3, #3
 8011d0a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011d0c:	230a      	movs	r3, #10
 8011d0e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011d10:	e088      	b.n	8011e24 <__ssvfiscanf_r+0x1ec>
 8011d12:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011d14:	fb02 1103 	mla	r1, r2, r3, r1
 8011d18:	3930      	subs	r1, #48	@ 0x30
 8011d1a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011d1c:	4655      	mov	r5, sl
 8011d1e:	e7d2      	b.n	8011cc6 <__ssvfiscanf_r+0x8e>
 8011d20:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011d24:	2a20      	cmp	r2, #32
 8011d26:	d8ef      	bhi.n	8011d08 <__ssvfiscanf_r+0xd0>
 8011d28:	a101      	add	r1, pc, #4	@ (adr r1, 8011d30 <__ssvfiscanf_r+0xf8>)
 8011d2a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011d2e:	bf00      	nop
 8011d30:	08011e03 	.word	0x08011e03
 8011d34:	08011d09 	.word	0x08011d09
 8011d38:	08011d09 	.word	0x08011d09
 8011d3c:	08011e5d 	.word	0x08011e5d
 8011d40:	08011d09 	.word	0x08011d09
 8011d44:	08011d09 	.word	0x08011d09
 8011d48:	08011d09 	.word	0x08011d09
 8011d4c:	08011d09 	.word	0x08011d09
 8011d50:	08011d09 	.word	0x08011d09
 8011d54:	08011d09 	.word	0x08011d09
 8011d58:	08011d09 	.word	0x08011d09
 8011d5c:	08011e73 	.word	0x08011e73
 8011d60:	08011e59 	.word	0x08011e59
 8011d64:	08011dbb 	.word	0x08011dbb
 8011d68:	08011dbb 	.word	0x08011dbb
 8011d6c:	08011dbb 	.word	0x08011dbb
 8011d70:	08011d09 	.word	0x08011d09
 8011d74:	08011e15 	.word	0x08011e15
 8011d78:	08011d09 	.word	0x08011d09
 8011d7c:	08011d09 	.word	0x08011d09
 8011d80:	08011d09 	.word	0x08011d09
 8011d84:	08011d09 	.word	0x08011d09
 8011d88:	08011e83 	.word	0x08011e83
 8011d8c:	08011e1d 	.word	0x08011e1d
 8011d90:	08011dfb 	.word	0x08011dfb
 8011d94:	08011d09 	.word	0x08011d09
 8011d98:	08011d09 	.word	0x08011d09
 8011d9c:	08011e7f 	.word	0x08011e7f
 8011da0:	08011d09 	.word	0x08011d09
 8011da4:	08011e59 	.word	0x08011e59
 8011da8:	08011d09 	.word	0x08011d09
 8011dac:	08011d09 	.word	0x08011d09
 8011db0:	08011e03 	.word	0x08011e03
 8011db4:	3b45      	subs	r3, #69	@ 0x45
 8011db6:	2b02      	cmp	r3, #2
 8011db8:	d8a6      	bhi.n	8011d08 <__ssvfiscanf_r+0xd0>
 8011dba:	2305      	movs	r3, #5
 8011dbc:	e031      	b.n	8011e22 <__ssvfiscanf_r+0x1ea>
 8011dbe:	6863      	ldr	r3, [r4, #4]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	dd0d      	ble.n	8011de0 <__ssvfiscanf_r+0x1a8>
 8011dc4:	6823      	ldr	r3, [r4, #0]
 8011dc6:	781a      	ldrb	r2, [r3, #0]
 8011dc8:	454a      	cmp	r2, r9
 8011dca:	f040 80a6 	bne.w	8011f1a <__ssvfiscanf_r+0x2e2>
 8011dce:	3301      	adds	r3, #1
 8011dd0:	6862      	ldr	r2, [r4, #4]
 8011dd2:	6023      	str	r3, [r4, #0]
 8011dd4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011dd6:	3a01      	subs	r2, #1
 8011dd8:	3301      	adds	r3, #1
 8011dda:	6062      	str	r2, [r4, #4]
 8011ddc:	9345      	str	r3, [sp, #276]	@ 0x114
 8011dde:	e753      	b.n	8011c88 <__ssvfiscanf_r+0x50>
 8011de0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011de2:	4621      	mov	r1, r4
 8011de4:	4630      	mov	r0, r6
 8011de6:	4798      	blx	r3
 8011de8:	2800      	cmp	r0, #0
 8011dea:	d0eb      	beq.n	8011dc4 <__ssvfiscanf_r+0x18c>
 8011dec:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011dee:	2800      	cmp	r0, #0
 8011df0:	f040 808b 	bne.w	8011f0a <__ssvfiscanf_r+0x2d2>
 8011df4:	f04f 30ff 	mov.w	r0, #4294967295
 8011df8:	e08b      	b.n	8011f12 <__ssvfiscanf_r+0x2da>
 8011dfa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011dfc:	f042 0220 	orr.w	r2, r2, #32
 8011e00:	9241      	str	r2, [sp, #260]	@ 0x104
 8011e02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011e04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011e08:	9241      	str	r2, [sp, #260]	@ 0x104
 8011e0a:	2210      	movs	r2, #16
 8011e0c:	2b6e      	cmp	r3, #110	@ 0x6e
 8011e0e:	9242      	str	r2, [sp, #264]	@ 0x108
 8011e10:	d902      	bls.n	8011e18 <__ssvfiscanf_r+0x1e0>
 8011e12:	e005      	b.n	8011e20 <__ssvfiscanf_r+0x1e8>
 8011e14:	2300      	movs	r3, #0
 8011e16:	9342      	str	r3, [sp, #264]	@ 0x108
 8011e18:	2303      	movs	r3, #3
 8011e1a:	e002      	b.n	8011e22 <__ssvfiscanf_r+0x1ea>
 8011e1c:	2308      	movs	r3, #8
 8011e1e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011e20:	2304      	movs	r3, #4
 8011e22:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011e24:	6863      	ldr	r3, [r4, #4]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	dd39      	ble.n	8011e9e <__ssvfiscanf_r+0x266>
 8011e2a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011e2c:	0659      	lsls	r1, r3, #25
 8011e2e:	d404      	bmi.n	8011e3a <__ssvfiscanf_r+0x202>
 8011e30:	6823      	ldr	r3, [r4, #0]
 8011e32:	781a      	ldrb	r2, [r3, #0]
 8011e34:	5cba      	ldrb	r2, [r7, r2]
 8011e36:	0712      	lsls	r2, r2, #28
 8011e38:	d438      	bmi.n	8011eac <__ssvfiscanf_r+0x274>
 8011e3a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011e3c:	2b02      	cmp	r3, #2
 8011e3e:	dc47      	bgt.n	8011ed0 <__ssvfiscanf_r+0x298>
 8011e40:	466b      	mov	r3, sp
 8011e42:	4622      	mov	r2, r4
 8011e44:	a941      	add	r1, sp, #260	@ 0x104
 8011e46:	4630      	mov	r0, r6
 8011e48:	f000 f86c 	bl	8011f24 <_scanf_chars>
 8011e4c:	2801      	cmp	r0, #1
 8011e4e:	d064      	beq.n	8011f1a <__ssvfiscanf_r+0x2e2>
 8011e50:	2802      	cmp	r0, #2
 8011e52:	f47f af19 	bne.w	8011c88 <__ssvfiscanf_r+0x50>
 8011e56:	e7c9      	b.n	8011dec <__ssvfiscanf_r+0x1b4>
 8011e58:	220a      	movs	r2, #10
 8011e5a:	e7d7      	b.n	8011e0c <__ssvfiscanf_r+0x1d4>
 8011e5c:	4629      	mov	r1, r5
 8011e5e:	4640      	mov	r0, r8
 8011e60:	f000 fa6c 	bl	801233c <__sccl>
 8011e64:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e6a:	9341      	str	r3, [sp, #260]	@ 0x104
 8011e6c:	4605      	mov	r5, r0
 8011e6e:	2301      	movs	r3, #1
 8011e70:	e7d7      	b.n	8011e22 <__ssvfiscanf_r+0x1ea>
 8011e72:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011e74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e78:	9341      	str	r3, [sp, #260]	@ 0x104
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	e7d1      	b.n	8011e22 <__ssvfiscanf_r+0x1ea>
 8011e7e:	2302      	movs	r3, #2
 8011e80:	e7cf      	b.n	8011e22 <__ssvfiscanf_r+0x1ea>
 8011e82:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011e84:	06c3      	lsls	r3, r0, #27
 8011e86:	f53f aeff 	bmi.w	8011c88 <__ssvfiscanf_r+0x50>
 8011e8a:	9b00      	ldr	r3, [sp, #0]
 8011e8c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011e8e:	1d19      	adds	r1, r3, #4
 8011e90:	9100      	str	r1, [sp, #0]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	07c0      	lsls	r0, r0, #31
 8011e96:	bf4c      	ite	mi
 8011e98:	801a      	strhmi	r2, [r3, #0]
 8011e9a:	601a      	strpl	r2, [r3, #0]
 8011e9c:	e6f4      	b.n	8011c88 <__ssvfiscanf_r+0x50>
 8011e9e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011ea0:	4621      	mov	r1, r4
 8011ea2:	4630      	mov	r0, r6
 8011ea4:	4798      	blx	r3
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d0bf      	beq.n	8011e2a <__ssvfiscanf_r+0x1f2>
 8011eaa:	e79f      	b.n	8011dec <__ssvfiscanf_r+0x1b4>
 8011eac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011eae:	3201      	adds	r2, #1
 8011eb0:	9245      	str	r2, [sp, #276]	@ 0x114
 8011eb2:	6862      	ldr	r2, [r4, #4]
 8011eb4:	3a01      	subs	r2, #1
 8011eb6:	2a00      	cmp	r2, #0
 8011eb8:	6062      	str	r2, [r4, #4]
 8011eba:	dd02      	ble.n	8011ec2 <__ssvfiscanf_r+0x28a>
 8011ebc:	3301      	adds	r3, #1
 8011ebe:	6023      	str	r3, [r4, #0]
 8011ec0:	e7b6      	b.n	8011e30 <__ssvfiscanf_r+0x1f8>
 8011ec2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011ec4:	4621      	mov	r1, r4
 8011ec6:	4630      	mov	r0, r6
 8011ec8:	4798      	blx	r3
 8011eca:	2800      	cmp	r0, #0
 8011ecc:	d0b0      	beq.n	8011e30 <__ssvfiscanf_r+0x1f8>
 8011ece:	e78d      	b.n	8011dec <__ssvfiscanf_r+0x1b4>
 8011ed0:	2b04      	cmp	r3, #4
 8011ed2:	dc0f      	bgt.n	8011ef4 <__ssvfiscanf_r+0x2bc>
 8011ed4:	466b      	mov	r3, sp
 8011ed6:	4622      	mov	r2, r4
 8011ed8:	a941      	add	r1, sp, #260	@ 0x104
 8011eda:	4630      	mov	r0, r6
 8011edc:	f000 f87c 	bl	8011fd8 <_scanf_i>
 8011ee0:	e7b4      	b.n	8011e4c <__ssvfiscanf_r+0x214>
 8011ee2:	bf00      	nop
 8011ee4:	08011b85 	.word	0x08011b85
 8011ee8:	08011bff 	.word	0x08011bff
 8011eec:	0806d1a1 	.word	0x0806d1a1
 8011ef0:	0806d127 	.word	0x0806d127
 8011ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8011f20 <__ssvfiscanf_r+0x2e8>)
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	f43f aec6 	beq.w	8011c88 <__ssvfiscanf_r+0x50>
 8011efc:	466b      	mov	r3, sp
 8011efe:	4622      	mov	r2, r4
 8011f00:	a941      	add	r1, sp, #260	@ 0x104
 8011f02:	4630      	mov	r0, r6
 8011f04:	f7fd f892 	bl	800f02c <_scanf_float>
 8011f08:	e7a0      	b.n	8011e4c <__ssvfiscanf_r+0x214>
 8011f0a:	89a3      	ldrh	r3, [r4, #12]
 8011f0c:	065b      	lsls	r3, r3, #25
 8011f0e:	f53f af71 	bmi.w	8011df4 <__ssvfiscanf_r+0x1bc>
 8011f12:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8011f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f1a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011f1c:	e7f9      	b.n	8011f12 <__ssvfiscanf_r+0x2da>
 8011f1e:	bf00      	nop
 8011f20:	0800f02d 	.word	0x0800f02d

08011f24 <_scanf_chars>:
 8011f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f28:	4615      	mov	r5, r2
 8011f2a:	688a      	ldr	r2, [r1, #8]
 8011f2c:	4680      	mov	r8, r0
 8011f2e:	460c      	mov	r4, r1
 8011f30:	b932      	cbnz	r2, 8011f40 <_scanf_chars+0x1c>
 8011f32:	698a      	ldr	r2, [r1, #24]
 8011f34:	2a00      	cmp	r2, #0
 8011f36:	bf14      	ite	ne
 8011f38:	f04f 32ff 	movne.w	r2, #4294967295
 8011f3c:	2201      	moveq	r2, #1
 8011f3e:	608a      	str	r2, [r1, #8]
 8011f40:	6822      	ldr	r2, [r4, #0]
 8011f42:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011fd4 <_scanf_chars+0xb0>
 8011f46:	06d1      	lsls	r1, r2, #27
 8011f48:	bf5f      	itttt	pl
 8011f4a:	681a      	ldrpl	r2, [r3, #0]
 8011f4c:	1d11      	addpl	r1, r2, #4
 8011f4e:	6019      	strpl	r1, [r3, #0]
 8011f50:	6816      	ldrpl	r6, [r2, #0]
 8011f52:	2700      	movs	r7, #0
 8011f54:	69a0      	ldr	r0, [r4, #24]
 8011f56:	b188      	cbz	r0, 8011f7c <_scanf_chars+0x58>
 8011f58:	2801      	cmp	r0, #1
 8011f5a:	d107      	bne.n	8011f6c <_scanf_chars+0x48>
 8011f5c:	682b      	ldr	r3, [r5, #0]
 8011f5e:	781a      	ldrb	r2, [r3, #0]
 8011f60:	6963      	ldr	r3, [r4, #20]
 8011f62:	5c9b      	ldrb	r3, [r3, r2]
 8011f64:	b953      	cbnz	r3, 8011f7c <_scanf_chars+0x58>
 8011f66:	2f00      	cmp	r7, #0
 8011f68:	d031      	beq.n	8011fce <_scanf_chars+0xaa>
 8011f6a:	e022      	b.n	8011fb2 <_scanf_chars+0x8e>
 8011f6c:	2802      	cmp	r0, #2
 8011f6e:	d120      	bne.n	8011fb2 <_scanf_chars+0x8e>
 8011f70:	682b      	ldr	r3, [r5, #0]
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011f78:	071b      	lsls	r3, r3, #28
 8011f7a:	d41a      	bmi.n	8011fb2 <_scanf_chars+0x8e>
 8011f7c:	6823      	ldr	r3, [r4, #0]
 8011f7e:	06da      	lsls	r2, r3, #27
 8011f80:	bf5e      	ittt	pl
 8011f82:	682b      	ldrpl	r3, [r5, #0]
 8011f84:	781b      	ldrbpl	r3, [r3, #0]
 8011f86:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011f8a:	682a      	ldr	r2, [r5, #0]
 8011f8c:	686b      	ldr	r3, [r5, #4]
 8011f8e:	3201      	adds	r2, #1
 8011f90:	602a      	str	r2, [r5, #0]
 8011f92:	68a2      	ldr	r2, [r4, #8]
 8011f94:	3b01      	subs	r3, #1
 8011f96:	3a01      	subs	r2, #1
 8011f98:	606b      	str	r3, [r5, #4]
 8011f9a:	3701      	adds	r7, #1
 8011f9c:	60a2      	str	r2, [r4, #8]
 8011f9e:	b142      	cbz	r2, 8011fb2 <_scanf_chars+0x8e>
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	dcd7      	bgt.n	8011f54 <_scanf_chars+0x30>
 8011fa4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011fa8:	4629      	mov	r1, r5
 8011faa:	4640      	mov	r0, r8
 8011fac:	4798      	blx	r3
 8011fae:	2800      	cmp	r0, #0
 8011fb0:	d0d0      	beq.n	8011f54 <_scanf_chars+0x30>
 8011fb2:	6823      	ldr	r3, [r4, #0]
 8011fb4:	f013 0310 	ands.w	r3, r3, #16
 8011fb8:	d105      	bne.n	8011fc6 <_scanf_chars+0xa2>
 8011fba:	68e2      	ldr	r2, [r4, #12]
 8011fbc:	3201      	adds	r2, #1
 8011fbe:	60e2      	str	r2, [r4, #12]
 8011fc0:	69a2      	ldr	r2, [r4, #24]
 8011fc2:	b102      	cbz	r2, 8011fc6 <_scanf_chars+0xa2>
 8011fc4:	7033      	strb	r3, [r6, #0]
 8011fc6:	6923      	ldr	r3, [r4, #16]
 8011fc8:	443b      	add	r3, r7
 8011fca:	6123      	str	r3, [r4, #16]
 8011fcc:	2000      	movs	r0, #0
 8011fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fd2:	bf00      	nop
 8011fd4:	0806d1a1 	.word	0x0806d1a1

08011fd8 <_scanf_i>:
 8011fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fdc:	4698      	mov	r8, r3
 8011fde:	4b74      	ldr	r3, [pc, #464]	@ (80121b0 <_scanf_i+0x1d8>)
 8011fe0:	460c      	mov	r4, r1
 8011fe2:	4682      	mov	sl, r0
 8011fe4:	4616      	mov	r6, r2
 8011fe6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011fea:	b087      	sub	sp, #28
 8011fec:	ab03      	add	r3, sp, #12
 8011fee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011ff2:	4b70      	ldr	r3, [pc, #448]	@ (80121b4 <_scanf_i+0x1dc>)
 8011ff4:	69a1      	ldr	r1, [r4, #24]
 8011ff6:	4a70      	ldr	r2, [pc, #448]	@ (80121b8 <_scanf_i+0x1e0>)
 8011ff8:	2903      	cmp	r1, #3
 8011ffa:	bf08      	it	eq
 8011ffc:	461a      	moveq	r2, r3
 8011ffe:	68a3      	ldr	r3, [r4, #8]
 8012000:	9201      	str	r2, [sp, #4]
 8012002:	1e5a      	subs	r2, r3, #1
 8012004:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012008:	bf88      	it	hi
 801200a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801200e:	4627      	mov	r7, r4
 8012010:	bf82      	ittt	hi
 8012012:	eb03 0905 	addhi.w	r9, r3, r5
 8012016:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801201a:	60a3      	strhi	r3, [r4, #8]
 801201c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012020:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012024:	bf98      	it	ls
 8012026:	f04f 0900 	movls.w	r9, #0
 801202a:	6023      	str	r3, [r4, #0]
 801202c:	463d      	mov	r5, r7
 801202e:	f04f 0b00 	mov.w	fp, #0
 8012032:	6831      	ldr	r1, [r6, #0]
 8012034:	ab03      	add	r3, sp, #12
 8012036:	7809      	ldrb	r1, [r1, #0]
 8012038:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801203c:	2202      	movs	r2, #2
 801203e:	f7ee f8d7 	bl	80001f0 <memchr>
 8012042:	b328      	cbz	r0, 8012090 <_scanf_i+0xb8>
 8012044:	f1bb 0f01 	cmp.w	fp, #1
 8012048:	d159      	bne.n	80120fe <_scanf_i+0x126>
 801204a:	6862      	ldr	r2, [r4, #4]
 801204c:	b92a      	cbnz	r2, 801205a <_scanf_i+0x82>
 801204e:	6822      	ldr	r2, [r4, #0]
 8012050:	2108      	movs	r1, #8
 8012052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012056:	6061      	str	r1, [r4, #4]
 8012058:	6022      	str	r2, [r4, #0]
 801205a:	6822      	ldr	r2, [r4, #0]
 801205c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012060:	6022      	str	r2, [r4, #0]
 8012062:	68a2      	ldr	r2, [r4, #8]
 8012064:	1e51      	subs	r1, r2, #1
 8012066:	60a1      	str	r1, [r4, #8]
 8012068:	b192      	cbz	r2, 8012090 <_scanf_i+0xb8>
 801206a:	6832      	ldr	r2, [r6, #0]
 801206c:	1c51      	adds	r1, r2, #1
 801206e:	6031      	str	r1, [r6, #0]
 8012070:	7812      	ldrb	r2, [r2, #0]
 8012072:	f805 2b01 	strb.w	r2, [r5], #1
 8012076:	6872      	ldr	r2, [r6, #4]
 8012078:	3a01      	subs	r2, #1
 801207a:	2a00      	cmp	r2, #0
 801207c:	6072      	str	r2, [r6, #4]
 801207e:	dc07      	bgt.n	8012090 <_scanf_i+0xb8>
 8012080:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012084:	4631      	mov	r1, r6
 8012086:	4650      	mov	r0, sl
 8012088:	4790      	blx	r2
 801208a:	2800      	cmp	r0, #0
 801208c:	f040 8085 	bne.w	801219a <_scanf_i+0x1c2>
 8012090:	f10b 0b01 	add.w	fp, fp, #1
 8012094:	f1bb 0f03 	cmp.w	fp, #3
 8012098:	d1cb      	bne.n	8012032 <_scanf_i+0x5a>
 801209a:	6863      	ldr	r3, [r4, #4]
 801209c:	b90b      	cbnz	r3, 80120a2 <_scanf_i+0xca>
 801209e:	230a      	movs	r3, #10
 80120a0:	6063      	str	r3, [r4, #4]
 80120a2:	6863      	ldr	r3, [r4, #4]
 80120a4:	4945      	ldr	r1, [pc, #276]	@ (80121bc <_scanf_i+0x1e4>)
 80120a6:	6960      	ldr	r0, [r4, #20]
 80120a8:	1ac9      	subs	r1, r1, r3
 80120aa:	f000 f947 	bl	801233c <__sccl>
 80120ae:	f04f 0b00 	mov.w	fp, #0
 80120b2:	68a3      	ldr	r3, [r4, #8]
 80120b4:	6822      	ldr	r2, [r4, #0]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d03d      	beq.n	8012136 <_scanf_i+0x15e>
 80120ba:	6831      	ldr	r1, [r6, #0]
 80120bc:	6960      	ldr	r0, [r4, #20]
 80120be:	f891 c000 	ldrb.w	ip, [r1]
 80120c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80120c6:	2800      	cmp	r0, #0
 80120c8:	d035      	beq.n	8012136 <_scanf_i+0x15e>
 80120ca:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80120ce:	d124      	bne.n	801211a <_scanf_i+0x142>
 80120d0:	0510      	lsls	r0, r2, #20
 80120d2:	d522      	bpl.n	801211a <_scanf_i+0x142>
 80120d4:	f10b 0b01 	add.w	fp, fp, #1
 80120d8:	f1b9 0f00 	cmp.w	r9, #0
 80120dc:	d003      	beq.n	80120e6 <_scanf_i+0x10e>
 80120de:	3301      	adds	r3, #1
 80120e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80120e4:	60a3      	str	r3, [r4, #8]
 80120e6:	6873      	ldr	r3, [r6, #4]
 80120e8:	3b01      	subs	r3, #1
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	6073      	str	r3, [r6, #4]
 80120ee:	dd1b      	ble.n	8012128 <_scanf_i+0x150>
 80120f0:	6833      	ldr	r3, [r6, #0]
 80120f2:	3301      	adds	r3, #1
 80120f4:	6033      	str	r3, [r6, #0]
 80120f6:	68a3      	ldr	r3, [r4, #8]
 80120f8:	3b01      	subs	r3, #1
 80120fa:	60a3      	str	r3, [r4, #8]
 80120fc:	e7d9      	b.n	80120b2 <_scanf_i+0xda>
 80120fe:	f1bb 0f02 	cmp.w	fp, #2
 8012102:	d1ae      	bne.n	8012062 <_scanf_i+0x8a>
 8012104:	6822      	ldr	r2, [r4, #0]
 8012106:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801210a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801210e:	d1c4      	bne.n	801209a <_scanf_i+0xc2>
 8012110:	2110      	movs	r1, #16
 8012112:	6061      	str	r1, [r4, #4]
 8012114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012118:	e7a2      	b.n	8012060 <_scanf_i+0x88>
 801211a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801211e:	6022      	str	r2, [r4, #0]
 8012120:	780b      	ldrb	r3, [r1, #0]
 8012122:	f805 3b01 	strb.w	r3, [r5], #1
 8012126:	e7de      	b.n	80120e6 <_scanf_i+0x10e>
 8012128:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801212c:	4631      	mov	r1, r6
 801212e:	4650      	mov	r0, sl
 8012130:	4798      	blx	r3
 8012132:	2800      	cmp	r0, #0
 8012134:	d0df      	beq.n	80120f6 <_scanf_i+0x11e>
 8012136:	6823      	ldr	r3, [r4, #0]
 8012138:	05d9      	lsls	r1, r3, #23
 801213a:	d50d      	bpl.n	8012158 <_scanf_i+0x180>
 801213c:	42bd      	cmp	r5, r7
 801213e:	d909      	bls.n	8012154 <_scanf_i+0x17c>
 8012140:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012144:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012148:	4632      	mov	r2, r6
 801214a:	4650      	mov	r0, sl
 801214c:	4798      	blx	r3
 801214e:	f105 39ff 	add.w	r9, r5, #4294967295
 8012152:	464d      	mov	r5, r9
 8012154:	42bd      	cmp	r5, r7
 8012156:	d028      	beq.n	80121aa <_scanf_i+0x1d2>
 8012158:	6822      	ldr	r2, [r4, #0]
 801215a:	f012 0210 	ands.w	r2, r2, #16
 801215e:	d113      	bne.n	8012188 <_scanf_i+0x1b0>
 8012160:	702a      	strb	r2, [r5, #0]
 8012162:	6863      	ldr	r3, [r4, #4]
 8012164:	9e01      	ldr	r6, [sp, #4]
 8012166:	4639      	mov	r1, r7
 8012168:	4650      	mov	r0, sl
 801216a:	47b0      	blx	r6
 801216c:	f8d8 3000 	ldr.w	r3, [r8]
 8012170:	6821      	ldr	r1, [r4, #0]
 8012172:	1d1a      	adds	r2, r3, #4
 8012174:	f8c8 2000 	str.w	r2, [r8]
 8012178:	f011 0f20 	tst.w	r1, #32
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	d00f      	beq.n	80121a0 <_scanf_i+0x1c8>
 8012180:	6018      	str	r0, [r3, #0]
 8012182:	68e3      	ldr	r3, [r4, #12]
 8012184:	3301      	adds	r3, #1
 8012186:	60e3      	str	r3, [r4, #12]
 8012188:	6923      	ldr	r3, [r4, #16]
 801218a:	1bed      	subs	r5, r5, r7
 801218c:	445d      	add	r5, fp
 801218e:	442b      	add	r3, r5
 8012190:	6123      	str	r3, [r4, #16]
 8012192:	2000      	movs	r0, #0
 8012194:	b007      	add	sp, #28
 8012196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801219a:	f04f 0b00 	mov.w	fp, #0
 801219e:	e7ca      	b.n	8012136 <_scanf_i+0x15e>
 80121a0:	07ca      	lsls	r2, r1, #31
 80121a2:	bf4c      	ite	mi
 80121a4:	8018      	strhmi	r0, [r3, #0]
 80121a6:	6018      	strpl	r0, [r3, #0]
 80121a8:	e7eb      	b.n	8012182 <_scanf_i+0x1aa>
 80121aa:	2001      	movs	r0, #1
 80121ac:	e7f2      	b.n	8012194 <_scanf_i+0x1bc>
 80121ae:	bf00      	nop
 80121b0:	080130fc 	.word	0x080130fc
 80121b4:	0800e769 	.word	0x0800e769
 80121b8:	080125e9 	.word	0x080125e9
 80121bc:	0806d142 	.word	0x0806d142

080121c0 <__sflush_r>:
 80121c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80121c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121c8:	0716      	lsls	r6, r2, #28
 80121ca:	4605      	mov	r5, r0
 80121cc:	460c      	mov	r4, r1
 80121ce:	d454      	bmi.n	801227a <__sflush_r+0xba>
 80121d0:	684b      	ldr	r3, [r1, #4]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	dc02      	bgt.n	80121dc <__sflush_r+0x1c>
 80121d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80121d8:	2b00      	cmp	r3, #0
 80121da:	dd48      	ble.n	801226e <__sflush_r+0xae>
 80121dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80121de:	2e00      	cmp	r6, #0
 80121e0:	d045      	beq.n	801226e <__sflush_r+0xae>
 80121e2:	2300      	movs	r3, #0
 80121e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80121e8:	682f      	ldr	r7, [r5, #0]
 80121ea:	6a21      	ldr	r1, [r4, #32]
 80121ec:	602b      	str	r3, [r5, #0]
 80121ee:	d030      	beq.n	8012252 <__sflush_r+0x92>
 80121f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80121f2:	89a3      	ldrh	r3, [r4, #12]
 80121f4:	0759      	lsls	r1, r3, #29
 80121f6:	d505      	bpl.n	8012204 <__sflush_r+0x44>
 80121f8:	6863      	ldr	r3, [r4, #4]
 80121fa:	1ad2      	subs	r2, r2, r3
 80121fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80121fe:	b10b      	cbz	r3, 8012204 <__sflush_r+0x44>
 8012200:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012202:	1ad2      	subs	r2, r2, r3
 8012204:	2300      	movs	r3, #0
 8012206:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012208:	6a21      	ldr	r1, [r4, #32]
 801220a:	4628      	mov	r0, r5
 801220c:	47b0      	blx	r6
 801220e:	1c43      	adds	r3, r0, #1
 8012210:	89a3      	ldrh	r3, [r4, #12]
 8012212:	d106      	bne.n	8012222 <__sflush_r+0x62>
 8012214:	6829      	ldr	r1, [r5, #0]
 8012216:	291d      	cmp	r1, #29
 8012218:	d82b      	bhi.n	8012272 <__sflush_r+0xb2>
 801221a:	4a2a      	ldr	r2, [pc, #168]	@ (80122c4 <__sflush_r+0x104>)
 801221c:	40ca      	lsrs	r2, r1
 801221e:	07d6      	lsls	r6, r2, #31
 8012220:	d527      	bpl.n	8012272 <__sflush_r+0xb2>
 8012222:	2200      	movs	r2, #0
 8012224:	6062      	str	r2, [r4, #4]
 8012226:	04d9      	lsls	r1, r3, #19
 8012228:	6922      	ldr	r2, [r4, #16]
 801222a:	6022      	str	r2, [r4, #0]
 801222c:	d504      	bpl.n	8012238 <__sflush_r+0x78>
 801222e:	1c42      	adds	r2, r0, #1
 8012230:	d101      	bne.n	8012236 <__sflush_r+0x76>
 8012232:	682b      	ldr	r3, [r5, #0]
 8012234:	b903      	cbnz	r3, 8012238 <__sflush_r+0x78>
 8012236:	6560      	str	r0, [r4, #84]	@ 0x54
 8012238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801223a:	602f      	str	r7, [r5, #0]
 801223c:	b1b9      	cbz	r1, 801226e <__sflush_r+0xae>
 801223e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012242:	4299      	cmp	r1, r3
 8012244:	d002      	beq.n	801224c <__sflush_r+0x8c>
 8012246:	4628      	mov	r0, r5
 8012248:	f7fe fa42 	bl	80106d0 <_free_r>
 801224c:	2300      	movs	r3, #0
 801224e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012250:	e00d      	b.n	801226e <__sflush_r+0xae>
 8012252:	2301      	movs	r3, #1
 8012254:	4628      	mov	r0, r5
 8012256:	47b0      	blx	r6
 8012258:	4602      	mov	r2, r0
 801225a:	1c50      	adds	r0, r2, #1
 801225c:	d1c9      	bne.n	80121f2 <__sflush_r+0x32>
 801225e:	682b      	ldr	r3, [r5, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d0c6      	beq.n	80121f2 <__sflush_r+0x32>
 8012264:	2b1d      	cmp	r3, #29
 8012266:	d001      	beq.n	801226c <__sflush_r+0xac>
 8012268:	2b16      	cmp	r3, #22
 801226a:	d11e      	bne.n	80122aa <__sflush_r+0xea>
 801226c:	602f      	str	r7, [r5, #0]
 801226e:	2000      	movs	r0, #0
 8012270:	e022      	b.n	80122b8 <__sflush_r+0xf8>
 8012272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012276:	b21b      	sxth	r3, r3
 8012278:	e01b      	b.n	80122b2 <__sflush_r+0xf2>
 801227a:	690f      	ldr	r7, [r1, #16]
 801227c:	2f00      	cmp	r7, #0
 801227e:	d0f6      	beq.n	801226e <__sflush_r+0xae>
 8012280:	0793      	lsls	r3, r2, #30
 8012282:	680e      	ldr	r6, [r1, #0]
 8012284:	bf08      	it	eq
 8012286:	694b      	ldreq	r3, [r1, #20]
 8012288:	600f      	str	r7, [r1, #0]
 801228a:	bf18      	it	ne
 801228c:	2300      	movne	r3, #0
 801228e:	eba6 0807 	sub.w	r8, r6, r7
 8012292:	608b      	str	r3, [r1, #8]
 8012294:	f1b8 0f00 	cmp.w	r8, #0
 8012298:	dde9      	ble.n	801226e <__sflush_r+0xae>
 801229a:	6a21      	ldr	r1, [r4, #32]
 801229c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801229e:	4643      	mov	r3, r8
 80122a0:	463a      	mov	r2, r7
 80122a2:	4628      	mov	r0, r5
 80122a4:	47b0      	blx	r6
 80122a6:	2800      	cmp	r0, #0
 80122a8:	dc08      	bgt.n	80122bc <__sflush_r+0xfc>
 80122aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122b2:	81a3      	strh	r3, [r4, #12]
 80122b4:	f04f 30ff 	mov.w	r0, #4294967295
 80122b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122bc:	4407      	add	r7, r0
 80122be:	eba8 0800 	sub.w	r8, r8, r0
 80122c2:	e7e7      	b.n	8012294 <__sflush_r+0xd4>
 80122c4:	20400001 	.word	0x20400001

080122c8 <_fflush_r>:
 80122c8:	b538      	push	{r3, r4, r5, lr}
 80122ca:	690b      	ldr	r3, [r1, #16]
 80122cc:	4605      	mov	r5, r0
 80122ce:	460c      	mov	r4, r1
 80122d0:	b913      	cbnz	r3, 80122d8 <_fflush_r+0x10>
 80122d2:	2500      	movs	r5, #0
 80122d4:	4628      	mov	r0, r5
 80122d6:	bd38      	pop	{r3, r4, r5, pc}
 80122d8:	b118      	cbz	r0, 80122e2 <_fflush_r+0x1a>
 80122da:	6a03      	ldr	r3, [r0, #32]
 80122dc:	b90b      	cbnz	r3, 80122e2 <_fflush_r+0x1a>
 80122de:	f7fd f93f 	bl	800f560 <__sinit>
 80122e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d0f3      	beq.n	80122d2 <_fflush_r+0xa>
 80122ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80122ec:	07d0      	lsls	r0, r2, #31
 80122ee:	d404      	bmi.n	80122fa <_fflush_r+0x32>
 80122f0:	0599      	lsls	r1, r3, #22
 80122f2:	d402      	bmi.n	80122fa <_fflush_r+0x32>
 80122f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122f6:	f7fd fb54 	bl	800f9a2 <__retarget_lock_acquire_recursive>
 80122fa:	4628      	mov	r0, r5
 80122fc:	4621      	mov	r1, r4
 80122fe:	f7ff ff5f 	bl	80121c0 <__sflush_r>
 8012302:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012304:	07da      	lsls	r2, r3, #31
 8012306:	4605      	mov	r5, r0
 8012308:	d4e4      	bmi.n	80122d4 <_fflush_r+0xc>
 801230a:	89a3      	ldrh	r3, [r4, #12]
 801230c:	059b      	lsls	r3, r3, #22
 801230e:	d4e1      	bmi.n	80122d4 <_fflush_r+0xc>
 8012310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012312:	f7fd fb47 	bl	800f9a4 <__retarget_lock_release_recursive>
 8012316:	e7dd      	b.n	80122d4 <_fflush_r+0xc>

08012318 <fiprintf>:
 8012318:	b40e      	push	{r1, r2, r3}
 801231a:	b503      	push	{r0, r1, lr}
 801231c:	4601      	mov	r1, r0
 801231e:	ab03      	add	r3, sp, #12
 8012320:	4805      	ldr	r0, [pc, #20]	@ (8012338 <fiprintf+0x20>)
 8012322:	f853 2b04 	ldr.w	r2, [r3], #4
 8012326:	6800      	ldr	r0, [r0, #0]
 8012328:	9301      	str	r3, [sp, #4]
 801232a:	f000 f989 	bl	8012640 <_vfiprintf_r>
 801232e:	b002      	add	sp, #8
 8012330:	f85d eb04 	ldr.w	lr, [sp], #4
 8012334:	b003      	add	sp, #12
 8012336:	4770      	bx	lr
 8012338:	20000280 	.word	0x20000280

0801233c <__sccl>:
 801233c:	b570      	push	{r4, r5, r6, lr}
 801233e:	780b      	ldrb	r3, [r1, #0]
 8012340:	4604      	mov	r4, r0
 8012342:	2b5e      	cmp	r3, #94	@ 0x5e
 8012344:	bf0b      	itete	eq
 8012346:	784b      	ldrbeq	r3, [r1, #1]
 8012348:	1c4a      	addne	r2, r1, #1
 801234a:	1c8a      	addeq	r2, r1, #2
 801234c:	2100      	movne	r1, #0
 801234e:	bf08      	it	eq
 8012350:	2101      	moveq	r1, #1
 8012352:	3801      	subs	r0, #1
 8012354:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012358:	f800 1f01 	strb.w	r1, [r0, #1]!
 801235c:	42a8      	cmp	r0, r5
 801235e:	d1fb      	bne.n	8012358 <__sccl+0x1c>
 8012360:	b90b      	cbnz	r3, 8012366 <__sccl+0x2a>
 8012362:	1e50      	subs	r0, r2, #1
 8012364:	bd70      	pop	{r4, r5, r6, pc}
 8012366:	f081 0101 	eor.w	r1, r1, #1
 801236a:	54e1      	strb	r1, [r4, r3]
 801236c:	4610      	mov	r0, r2
 801236e:	4602      	mov	r2, r0
 8012370:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012374:	2d2d      	cmp	r5, #45	@ 0x2d
 8012376:	d005      	beq.n	8012384 <__sccl+0x48>
 8012378:	2d5d      	cmp	r5, #93	@ 0x5d
 801237a:	d016      	beq.n	80123aa <__sccl+0x6e>
 801237c:	2d00      	cmp	r5, #0
 801237e:	d0f1      	beq.n	8012364 <__sccl+0x28>
 8012380:	462b      	mov	r3, r5
 8012382:	e7f2      	b.n	801236a <__sccl+0x2e>
 8012384:	7846      	ldrb	r6, [r0, #1]
 8012386:	2e5d      	cmp	r6, #93	@ 0x5d
 8012388:	d0fa      	beq.n	8012380 <__sccl+0x44>
 801238a:	42b3      	cmp	r3, r6
 801238c:	dcf8      	bgt.n	8012380 <__sccl+0x44>
 801238e:	3002      	adds	r0, #2
 8012390:	461a      	mov	r2, r3
 8012392:	3201      	adds	r2, #1
 8012394:	4296      	cmp	r6, r2
 8012396:	54a1      	strb	r1, [r4, r2]
 8012398:	dcfb      	bgt.n	8012392 <__sccl+0x56>
 801239a:	1af2      	subs	r2, r6, r3
 801239c:	3a01      	subs	r2, #1
 801239e:	1c5d      	adds	r5, r3, #1
 80123a0:	42b3      	cmp	r3, r6
 80123a2:	bfa8      	it	ge
 80123a4:	2200      	movge	r2, #0
 80123a6:	18ab      	adds	r3, r5, r2
 80123a8:	e7e1      	b.n	801236e <__sccl+0x32>
 80123aa:	4610      	mov	r0, r2
 80123ac:	e7da      	b.n	8012364 <__sccl+0x28>

080123ae <__submore>:
 80123ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123b2:	460c      	mov	r4, r1
 80123b4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80123b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80123ba:	4299      	cmp	r1, r3
 80123bc:	d11d      	bne.n	80123fa <__submore+0x4c>
 80123be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80123c2:	f7fe fd33 	bl	8010e2c <_malloc_r>
 80123c6:	b918      	cbnz	r0, 80123d0 <__submore+0x22>
 80123c8:	f04f 30ff 	mov.w	r0, #4294967295
 80123cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80123d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80123d6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80123da:	6360      	str	r0, [r4, #52]	@ 0x34
 80123dc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80123e0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80123e4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80123e8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80123ec:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80123f0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80123f4:	6020      	str	r0, [r4, #0]
 80123f6:	2000      	movs	r0, #0
 80123f8:	e7e8      	b.n	80123cc <__submore+0x1e>
 80123fa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80123fc:	0077      	lsls	r7, r6, #1
 80123fe:	463a      	mov	r2, r7
 8012400:	f000 f855 	bl	80124ae <_realloc_r>
 8012404:	4605      	mov	r5, r0
 8012406:	2800      	cmp	r0, #0
 8012408:	d0de      	beq.n	80123c8 <__submore+0x1a>
 801240a:	eb00 0806 	add.w	r8, r0, r6
 801240e:	4601      	mov	r1, r0
 8012410:	4632      	mov	r2, r6
 8012412:	4640      	mov	r0, r8
 8012414:	f7fd fac7 	bl	800f9a6 <memcpy>
 8012418:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801241c:	f8c4 8000 	str.w	r8, [r4]
 8012420:	e7e9      	b.n	80123f6 <__submore+0x48>

08012422 <memmove>:
 8012422:	4288      	cmp	r0, r1
 8012424:	b510      	push	{r4, lr}
 8012426:	eb01 0402 	add.w	r4, r1, r2
 801242a:	d902      	bls.n	8012432 <memmove+0x10>
 801242c:	4284      	cmp	r4, r0
 801242e:	4623      	mov	r3, r4
 8012430:	d807      	bhi.n	8012442 <memmove+0x20>
 8012432:	1e43      	subs	r3, r0, #1
 8012434:	42a1      	cmp	r1, r4
 8012436:	d008      	beq.n	801244a <memmove+0x28>
 8012438:	f811 2b01 	ldrb.w	r2, [r1], #1
 801243c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012440:	e7f8      	b.n	8012434 <memmove+0x12>
 8012442:	4402      	add	r2, r0
 8012444:	4601      	mov	r1, r0
 8012446:	428a      	cmp	r2, r1
 8012448:	d100      	bne.n	801244c <memmove+0x2a>
 801244a:	bd10      	pop	{r4, pc}
 801244c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012450:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012454:	e7f7      	b.n	8012446 <memmove+0x24>
	...

08012458 <_sbrk_r>:
 8012458:	b538      	push	{r3, r4, r5, lr}
 801245a:	4d06      	ldr	r5, [pc, #24]	@ (8012474 <_sbrk_r+0x1c>)
 801245c:	2300      	movs	r3, #0
 801245e:	4604      	mov	r4, r0
 8012460:	4608      	mov	r0, r1
 8012462:	602b      	str	r3, [r5, #0]
 8012464:	f7f0 ff5a 	bl	800331c <_sbrk>
 8012468:	1c43      	adds	r3, r0, #1
 801246a:	d102      	bne.n	8012472 <_sbrk_r+0x1a>
 801246c:	682b      	ldr	r3, [r5, #0]
 801246e:	b103      	cbz	r3, 8012472 <_sbrk_r+0x1a>
 8012470:	6023      	str	r3, [r4, #0]
 8012472:	bd38      	pop	{r3, r4, r5, pc}
 8012474:	2001a30c 	.word	0x2001a30c

08012478 <abort>:
 8012478:	b508      	push	{r3, lr}
 801247a:	2006      	movs	r0, #6
 801247c:	f000 fab4 	bl	80129e8 <raise>
 8012480:	2001      	movs	r0, #1
 8012482:	f7f0 fed3 	bl	800322c <_exit>

08012486 <_calloc_r>:
 8012486:	b570      	push	{r4, r5, r6, lr}
 8012488:	fba1 5402 	umull	r5, r4, r1, r2
 801248c:	b934      	cbnz	r4, 801249c <_calloc_r+0x16>
 801248e:	4629      	mov	r1, r5
 8012490:	f7fe fccc 	bl	8010e2c <_malloc_r>
 8012494:	4606      	mov	r6, r0
 8012496:	b928      	cbnz	r0, 80124a4 <_calloc_r+0x1e>
 8012498:	4630      	mov	r0, r6
 801249a:	bd70      	pop	{r4, r5, r6, pc}
 801249c:	220c      	movs	r2, #12
 801249e:	6002      	str	r2, [r0, #0]
 80124a0:	2600      	movs	r6, #0
 80124a2:	e7f9      	b.n	8012498 <_calloc_r+0x12>
 80124a4:	462a      	mov	r2, r5
 80124a6:	4621      	mov	r1, r4
 80124a8:	f7fd f959 	bl	800f75e <memset>
 80124ac:	e7f4      	b.n	8012498 <_calloc_r+0x12>

080124ae <_realloc_r>:
 80124ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124b2:	4607      	mov	r7, r0
 80124b4:	4614      	mov	r4, r2
 80124b6:	460d      	mov	r5, r1
 80124b8:	b921      	cbnz	r1, 80124c4 <_realloc_r+0x16>
 80124ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124be:	4611      	mov	r1, r2
 80124c0:	f7fe bcb4 	b.w	8010e2c <_malloc_r>
 80124c4:	b92a      	cbnz	r2, 80124d2 <_realloc_r+0x24>
 80124c6:	f7fe f903 	bl	80106d0 <_free_r>
 80124ca:	4625      	mov	r5, r4
 80124cc:	4628      	mov	r0, r5
 80124ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124d2:	f000 faa5 	bl	8012a20 <_malloc_usable_size_r>
 80124d6:	4284      	cmp	r4, r0
 80124d8:	4606      	mov	r6, r0
 80124da:	d802      	bhi.n	80124e2 <_realloc_r+0x34>
 80124dc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80124e0:	d8f4      	bhi.n	80124cc <_realloc_r+0x1e>
 80124e2:	4621      	mov	r1, r4
 80124e4:	4638      	mov	r0, r7
 80124e6:	f7fe fca1 	bl	8010e2c <_malloc_r>
 80124ea:	4680      	mov	r8, r0
 80124ec:	b908      	cbnz	r0, 80124f2 <_realloc_r+0x44>
 80124ee:	4645      	mov	r5, r8
 80124f0:	e7ec      	b.n	80124cc <_realloc_r+0x1e>
 80124f2:	42b4      	cmp	r4, r6
 80124f4:	4622      	mov	r2, r4
 80124f6:	4629      	mov	r1, r5
 80124f8:	bf28      	it	cs
 80124fa:	4632      	movcs	r2, r6
 80124fc:	f7fd fa53 	bl	800f9a6 <memcpy>
 8012500:	4629      	mov	r1, r5
 8012502:	4638      	mov	r0, r7
 8012504:	f7fe f8e4 	bl	80106d0 <_free_r>
 8012508:	e7f1      	b.n	80124ee <_realloc_r+0x40>
	...

0801250c <_strtoul_l.isra.0>:
 801250c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012510:	4e34      	ldr	r6, [pc, #208]	@ (80125e4 <_strtoul_l.isra.0+0xd8>)
 8012512:	4686      	mov	lr, r0
 8012514:	460d      	mov	r5, r1
 8012516:	4628      	mov	r0, r5
 8012518:	f815 4b01 	ldrb.w	r4, [r5], #1
 801251c:	5d37      	ldrb	r7, [r6, r4]
 801251e:	f017 0708 	ands.w	r7, r7, #8
 8012522:	d1f8      	bne.n	8012516 <_strtoul_l.isra.0+0xa>
 8012524:	2c2d      	cmp	r4, #45	@ 0x2d
 8012526:	d110      	bne.n	801254a <_strtoul_l.isra.0+0x3e>
 8012528:	782c      	ldrb	r4, [r5, #0]
 801252a:	2701      	movs	r7, #1
 801252c:	1c85      	adds	r5, r0, #2
 801252e:	f033 0010 	bics.w	r0, r3, #16
 8012532:	d115      	bne.n	8012560 <_strtoul_l.isra.0+0x54>
 8012534:	2c30      	cmp	r4, #48	@ 0x30
 8012536:	d10d      	bne.n	8012554 <_strtoul_l.isra.0+0x48>
 8012538:	7828      	ldrb	r0, [r5, #0]
 801253a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801253e:	2858      	cmp	r0, #88	@ 0x58
 8012540:	d108      	bne.n	8012554 <_strtoul_l.isra.0+0x48>
 8012542:	786c      	ldrb	r4, [r5, #1]
 8012544:	3502      	adds	r5, #2
 8012546:	2310      	movs	r3, #16
 8012548:	e00a      	b.n	8012560 <_strtoul_l.isra.0+0x54>
 801254a:	2c2b      	cmp	r4, #43	@ 0x2b
 801254c:	bf04      	itt	eq
 801254e:	782c      	ldrbeq	r4, [r5, #0]
 8012550:	1c85      	addeq	r5, r0, #2
 8012552:	e7ec      	b.n	801252e <_strtoul_l.isra.0+0x22>
 8012554:	2b00      	cmp	r3, #0
 8012556:	d1f6      	bne.n	8012546 <_strtoul_l.isra.0+0x3a>
 8012558:	2c30      	cmp	r4, #48	@ 0x30
 801255a:	bf14      	ite	ne
 801255c:	230a      	movne	r3, #10
 801255e:	2308      	moveq	r3, #8
 8012560:	f04f 38ff 	mov.w	r8, #4294967295
 8012564:	2600      	movs	r6, #0
 8012566:	fbb8 f8f3 	udiv	r8, r8, r3
 801256a:	fb03 f908 	mul.w	r9, r3, r8
 801256e:	ea6f 0909 	mvn.w	r9, r9
 8012572:	4630      	mov	r0, r6
 8012574:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012578:	f1bc 0f09 	cmp.w	ip, #9
 801257c:	d810      	bhi.n	80125a0 <_strtoul_l.isra.0+0x94>
 801257e:	4664      	mov	r4, ip
 8012580:	42a3      	cmp	r3, r4
 8012582:	dd1e      	ble.n	80125c2 <_strtoul_l.isra.0+0xb6>
 8012584:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012588:	d007      	beq.n	801259a <_strtoul_l.isra.0+0x8e>
 801258a:	4580      	cmp	r8, r0
 801258c:	d316      	bcc.n	80125bc <_strtoul_l.isra.0+0xb0>
 801258e:	d101      	bne.n	8012594 <_strtoul_l.isra.0+0x88>
 8012590:	45a1      	cmp	r9, r4
 8012592:	db13      	blt.n	80125bc <_strtoul_l.isra.0+0xb0>
 8012594:	fb00 4003 	mla	r0, r0, r3, r4
 8012598:	2601      	movs	r6, #1
 801259a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801259e:	e7e9      	b.n	8012574 <_strtoul_l.isra.0+0x68>
 80125a0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80125a4:	f1bc 0f19 	cmp.w	ip, #25
 80125a8:	d801      	bhi.n	80125ae <_strtoul_l.isra.0+0xa2>
 80125aa:	3c37      	subs	r4, #55	@ 0x37
 80125ac:	e7e8      	b.n	8012580 <_strtoul_l.isra.0+0x74>
 80125ae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80125b2:	f1bc 0f19 	cmp.w	ip, #25
 80125b6:	d804      	bhi.n	80125c2 <_strtoul_l.isra.0+0xb6>
 80125b8:	3c57      	subs	r4, #87	@ 0x57
 80125ba:	e7e1      	b.n	8012580 <_strtoul_l.isra.0+0x74>
 80125bc:	f04f 36ff 	mov.w	r6, #4294967295
 80125c0:	e7eb      	b.n	801259a <_strtoul_l.isra.0+0x8e>
 80125c2:	1c73      	adds	r3, r6, #1
 80125c4:	d106      	bne.n	80125d4 <_strtoul_l.isra.0+0xc8>
 80125c6:	2322      	movs	r3, #34	@ 0x22
 80125c8:	f8ce 3000 	str.w	r3, [lr]
 80125cc:	4630      	mov	r0, r6
 80125ce:	b932      	cbnz	r2, 80125de <_strtoul_l.isra.0+0xd2>
 80125d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125d4:	b107      	cbz	r7, 80125d8 <_strtoul_l.isra.0+0xcc>
 80125d6:	4240      	negs	r0, r0
 80125d8:	2a00      	cmp	r2, #0
 80125da:	d0f9      	beq.n	80125d0 <_strtoul_l.isra.0+0xc4>
 80125dc:	b106      	cbz	r6, 80125e0 <_strtoul_l.isra.0+0xd4>
 80125de:	1e69      	subs	r1, r5, #1
 80125e0:	6011      	str	r1, [r2, #0]
 80125e2:	e7f5      	b.n	80125d0 <_strtoul_l.isra.0+0xc4>
 80125e4:	0806d1a1 	.word	0x0806d1a1

080125e8 <_strtoul_r>:
 80125e8:	f7ff bf90 	b.w	801250c <_strtoul_l.isra.0>

080125ec <__sfputc_r>:
 80125ec:	6893      	ldr	r3, [r2, #8]
 80125ee:	3b01      	subs	r3, #1
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	b410      	push	{r4}
 80125f4:	6093      	str	r3, [r2, #8]
 80125f6:	da08      	bge.n	801260a <__sfputc_r+0x1e>
 80125f8:	6994      	ldr	r4, [r2, #24]
 80125fa:	42a3      	cmp	r3, r4
 80125fc:	db01      	blt.n	8012602 <__sfputc_r+0x16>
 80125fe:	290a      	cmp	r1, #10
 8012600:	d103      	bne.n	801260a <__sfputc_r+0x1e>
 8012602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012606:	f000 b933 	b.w	8012870 <__swbuf_r>
 801260a:	6813      	ldr	r3, [r2, #0]
 801260c:	1c58      	adds	r0, r3, #1
 801260e:	6010      	str	r0, [r2, #0]
 8012610:	7019      	strb	r1, [r3, #0]
 8012612:	4608      	mov	r0, r1
 8012614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012618:	4770      	bx	lr

0801261a <__sfputs_r>:
 801261a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801261c:	4606      	mov	r6, r0
 801261e:	460f      	mov	r7, r1
 8012620:	4614      	mov	r4, r2
 8012622:	18d5      	adds	r5, r2, r3
 8012624:	42ac      	cmp	r4, r5
 8012626:	d101      	bne.n	801262c <__sfputs_r+0x12>
 8012628:	2000      	movs	r0, #0
 801262a:	e007      	b.n	801263c <__sfputs_r+0x22>
 801262c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012630:	463a      	mov	r2, r7
 8012632:	4630      	mov	r0, r6
 8012634:	f7ff ffda 	bl	80125ec <__sfputc_r>
 8012638:	1c43      	adds	r3, r0, #1
 801263a:	d1f3      	bne.n	8012624 <__sfputs_r+0xa>
 801263c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012640 <_vfiprintf_r>:
 8012640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012644:	460d      	mov	r5, r1
 8012646:	b09d      	sub	sp, #116	@ 0x74
 8012648:	4614      	mov	r4, r2
 801264a:	4698      	mov	r8, r3
 801264c:	4606      	mov	r6, r0
 801264e:	b118      	cbz	r0, 8012658 <_vfiprintf_r+0x18>
 8012650:	6a03      	ldr	r3, [r0, #32]
 8012652:	b90b      	cbnz	r3, 8012658 <_vfiprintf_r+0x18>
 8012654:	f7fc ff84 	bl	800f560 <__sinit>
 8012658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801265a:	07d9      	lsls	r1, r3, #31
 801265c:	d405      	bmi.n	801266a <_vfiprintf_r+0x2a>
 801265e:	89ab      	ldrh	r3, [r5, #12]
 8012660:	059a      	lsls	r2, r3, #22
 8012662:	d402      	bmi.n	801266a <_vfiprintf_r+0x2a>
 8012664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012666:	f7fd f99c 	bl	800f9a2 <__retarget_lock_acquire_recursive>
 801266a:	89ab      	ldrh	r3, [r5, #12]
 801266c:	071b      	lsls	r3, r3, #28
 801266e:	d501      	bpl.n	8012674 <_vfiprintf_r+0x34>
 8012670:	692b      	ldr	r3, [r5, #16]
 8012672:	b99b      	cbnz	r3, 801269c <_vfiprintf_r+0x5c>
 8012674:	4629      	mov	r1, r5
 8012676:	4630      	mov	r0, r6
 8012678:	f000 f938 	bl	80128ec <__swsetup_r>
 801267c:	b170      	cbz	r0, 801269c <_vfiprintf_r+0x5c>
 801267e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012680:	07dc      	lsls	r4, r3, #31
 8012682:	d504      	bpl.n	801268e <_vfiprintf_r+0x4e>
 8012684:	f04f 30ff 	mov.w	r0, #4294967295
 8012688:	b01d      	add	sp, #116	@ 0x74
 801268a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801268e:	89ab      	ldrh	r3, [r5, #12]
 8012690:	0598      	lsls	r0, r3, #22
 8012692:	d4f7      	bmi.n	8012684 <_vfiprintf_r+0x44>
 8012694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012696:	f7fd f985 	bl	800f9a4 <__retarget_lock_release_recursive>
 801269a:	e7f3      	b.n	8012684 <_vfiprintf_r+0x44>
 801269c:	2300      	movs	r3, #0
 801269e:	9309      	str	r3, [sp, #36]	@ 0x24
 80126a0:	2320      	movs	r3, #32
 80126a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80126a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80126aa:	2330      	movs	r3, #48	@ 0x30
 80126ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801285c <_vfiprintf_r+0x21c>
 80126b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80126b4:	f04f 0901 	mov.w	r9, #1
 80126b8:	4623      	mov	r3, r4
 80126ba:	469a      	mov	sl, r3
 80126bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126c0:	b10a      	cbz	r2, 80126c6 <_vfiprintf_r+0x86>
 80126c2:	2a25      	cmp	r2, #37	@ 0x25
 80126c4:	d1f9      	bne.n	80126ba <_vfiprintf_r+0x7a>
 80126c6:	ebba 0b04 	subs.w	fp, sl, r4
 80126ca:	d00b      	beq.n	80126e4 <_vfiprintf_r+0xa4>
 80126cc:	465b      	mov	r3, fp
 80126ce:	4622      	mov	r2, r4
 80126d0:	4629      	mov	r1, r5
 80126d2:	4630      	mov	r0, r6
 80126d4:	f7ff ffa1 	bl	801261a <__sfputs_r>
 80126d8:	3001      	adds	r0, #1
 80126da:	f000 80a7 	beq.w	801282c <_vfiprintf_r+0x1ec>
 80126de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126e0:	445a      	add	r2, fp
 80126e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80126e4:	f89a 3000 	ldrb.w	r3, [sl]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	f000 809f 	beq.w	801282c <_vfiprintf_r+0x1ec>
 80126ee:	2300      	movs	r3, #0
 80126f0:	f04f 32ff 	mov.w	r2, #4294967295
 80126f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126f8:	f10a 0a01 	add.w	sl, sl, #1
 80126fc:	9304      	str	r3, [sp, #16]
 80126fe:	9307      	str	r3, [sp, #28]
 8012700:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012704:	931a      	str	r3, [sp, #104]	@ 0x68
 8012706:	4654      	mov	r4, sl
 8012708:	2205      	movs	r2, #5
 801270a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801270e:	4853      	ldr	r0, [pc, #332]	@ (801285c <_vfiprintf_r+0x21c>)
 8012710:	f7ed fd6e 	bl	80001f0 <memchr>
 8012714:	9a04      	ldr	r2, [sp, #16]
 8012716:	b9d8      	cbnz	r0, 8012750 <_vfiprintf_r+0x110>
 8012718:	06d1      	lsls	r1, r2, #27
 801271a:	bf44      	itt	mi
 801271c:	2320      	movmi	r3, #32
 801271e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012722:	0713      	lsls	r3, r2, #28
 8012724:	bf44      	itt	mi
 8012726:	232b      	movmi	r3, #43	@ 0x2b
 8012728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801272c:	f89a 3000 	ldrb.w	r3, [sl]
 8012730:	2b2a      	cmp	r3, #42	@ 0x2a
 8012732:	d015      	beq.n	8012760 <_vfiprintf_r+0x120>
 8012734:	9a07      	ldr	r2, [sp, #28]
 8012736:	4654      	mov	r4, sl
 8012738:	2000      	movs	r0, #0
 801273a:	f04f 0c0a 	mov.w	ip, #10
 801273e:	4621      	mov	r1, r4
 8012740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012744:	3b30      	subs	r3, #48	@ 0x30
 8012746:	2b09      	cmp	r3, #9
 8012748:	d94b      	bls.n	80127e2 <_vfiprintf_r+0x1a2>
 801274a:	b1b0      	cbz	r0, 801277a <_vfiprintf_r+0x13a>
 801274c:	9207      	str	r2, [sp, #28]
 801274e:	e014      	b.n	801277a <_vfiprintf_r+0x13a>
 8012750:	eba0 0308 	sub.w	r3, r0, r8
 8012754:	fa09 f303 	lsl.w	r3, r9, r3
 8012758:	4313      	orrs	r3, r2
 801275a:	9304      	str	r3, [sp, #16]
 801275c:	46a2      	mov	sl, r4
 801275e:	e7d2      	b.n	8012706 <_vfiprintf_r+0xc6>
 8012760:	9b03      	ldr	r3, [sp, #12]
 8012762:	1d19      	adds	r1, r3, #4
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	9103      	str	r1, [sp, #12]
 8012768:	2b00      	cmp	r3, #0
 801276a:	bfbb      	ittet	lt
 801276c:	425b      	neglt	r3, r3
 801276e:	f042 0202 	orrlt.w	r2, r2, #2
 8012772:	9307      	strge	r3, [sp, #28]
 8012774:	9307      	strlt	r3, [sp, #28]
 8012776:	bfb8      	it	lt
 8012778:	9204      	strlt	r2, [sp, #16]
 801277a:	7823      	ldrb	r3, [r4, #0]
 801277c:	2b2e      	cmp	r3, #46	@ 0x2e
 801277e:	d10a      	bne.n	8012796 <_vfiprintf_r+0x156>
 8012780:	7863      	ldrb	r3, [r4, #1]
 8012782:	2b2a      	cmp	r3, #42	@ 0x2a
 8012784:	d132      	bne.n	80127ec <_vfiprintf_r+0x1ac>
 8012786:	9b03      	ldr	r3, [sp, #12]
 8012788:	1d1a      	adds	r2, r3, #4
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	9203      	str	r2, [sp, #12]
 801278e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012792:	3402      	adds	r4, #2
 8012794:	9305      	str	r3, [sp, #20]
 8012796:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801286c <_vfiprintf_r+0x22c>
 801279a:	7821      	ldrb	r1, [r4, #0]
 801279c:	2203      	movs	r2, #3
 801279e:	4650      	mov	r0, sl
 80127a0:	f7ed fd26 	bl	80001f0 <memchr>
 80127a4:	b138      	cbz	r0, 80127b6 <_vfiprintf_r+0x176>
 80127a6:	9b04      	ldr	r3, [sp, #16]
 80127a8:	eba0 000a 	sub.w	r0, r0, sl
 80127ac:	2240      	movs	r2, #64	@ 0x40
 80127ae:	4082      	lsls	r2, r0
 80127b0:	4313      	orrs	r3, r2
 80127b2:	3401      	adds	r4, #1
 80127b4:	9304      	str	r3, [sp, #16]
 80127b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127ba:	4829      	ldr	r0, [pc, #164]	@ (8012860 <_vfiprintf_r+0x220>)
 80127bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80127c0:	2206      	movs	r2, #6
 80127c2:	f7ed fd15 	bl	80001f0 <memchr>
 80127c6:	2800      	cmp	r0, #0
 80127c8:	d03f      	beq.n	801284a <_vfiprintf_r+0x20a>
 80127ca:	4b26      	ldr	r3, [pc, #152]	@ (8012864 <_vfiprintf_r+0x224>)
 80127cc:	bb1b      	cbnz	r3, 8012816 <_vfiprintf_r+0x1d6>
 80127ce:	9b03      	ldr	r3, [sp, #12]
 80127d0:	3307      	adds	r3, #7
 80127d2:	f023 0307 	bic.w	r3, r3, #7
 80127d6:	3308      	adds	r3, #8
 80127d8:	9303      	str	r3, [sp, #12]
 80127da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127dc:	443b      	add	r3, r7
 80127de:	9309      	str	r3, [sp, #36]	@ 0x24
 80127e0:	e76a      	b.n	80126b8 <_vfiprintf_r+0x78>
 80127e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80127e6:	460c      	mov	r4, r1
 80127e8:	2001      	movs	r0, #1
 80127ea:	e7a8      	b.n	801273e <_vfiprintf_r+0xfe>
 80127ec:	2300      	movs	r3, #0
 80127ee:	3401      	adds	r4, #1
 80127f0:	9305      	str	r3, [sp, #20]
 80127f2:	4619      	mov	r1, r3
 80127f4:	f04f 0c0a 	mov.w	ip, #10
 80127f8:	4620      	mov	r0, r4
 80127fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127fe:	3a30      	subs	r2, #48	@ 0x30
 8012800:	2a09      	cmp	r2, #9
 8012802:	d903      	bls.n	801280c <_vfiprintf_r+0x1cc>
 8012804:	2b00      	cmp	r3, #0
 8012806:	d0c6      	beq.n	8012796 <_vfiprintf_r+0x156>
 8012808:	9105      	str	r1, [sp, #20]
 801280a:	e7c4      	b.n	8012796 <_vfiprintf_r+0x156>
 801280c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012810:	4604      	mov	r4, r0
 8012812:	2301      	movs	r3, #1
 8012814:	e7f0      	b.n	80127f8 <_vfiprintf_r+0x1b8>
 8012816:	ab03      	add	r3, sp, #12
 8012818:	9300      	str	r3, [sp, #0]
 801281a:	462a      	mov	r2, r5
 801281c:	4b12      	ldr	r3, [pc, #72]	@ (8012868 <_vfiprintf_r+0x228>)
 801281e:	a904      	add	r1, sp, #16
 8012820:	4630      	mov	r0, r6
 8012822:	f7fc f84d 	bl	800e8c0 <_printf_float>
 8012826:	4607      	mov	r7, r0
 8012828:	1c78      	adds	r0, r7, #1
 801282a:	d1d6      	bne.n	80127da <_vfiprintf_r+0x19a>
 801282c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801282e:	07d9      	lsls	r1, r3, #31
 8012830:	d405      	bmi.n	801283e <_vfiprintf_r+0x1fe>
 8012832:	89ab      	ldrh	r3, [r5, #12]
 8012834:	059a      	lsls	r2, r3, #22
 8012836:	d402      	bmi.n	801283e <_vfiprintf_r+0x1fe>
 8012838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801283a:	f7fd f8b3 	bl	800f9a4 <__retarget_lock_release_recursive>
 801283e:	89ab      	ldrh	r3, [r5, #12]
 8012840:	065b      	lsls	r3, r3, #25
 8012842:	f53f af1f 	bmi.w	8012684 <_vfiprintf_r+0x44>
 8012846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012848:	e71e      	b.n	8012688 <_vfiprintf_r+0x48>
 801284a:	ab03      	add	r3, sp, #12
 801284c:	9300      	str	r3, [sp, #0]
 801284e:	462a      	mov	r2, r5
 8012850:	4b05      	ldr	r3, [pc, #20]	@ (8012868 <_vfiprintf_r+0x228>)
 8012852:	a904      	add	r1, sp, #16
 8012854:	4630      	mov	r0, r6
 8012856:	f7fc facb 	bl	800edf0 <_printf_i>
 801285a:	e7e4      	b.n	8012826 <_vfiprintf_r+0x1e6>
 801285c:	0806d121 	.word	0x0806d121
 8012860:	0806d12b 	.word	0x0806d12b
 8012864:	0800e8c1 	.word	0x0800e8c1
 8012868:	0801261b 	.word	0x0801261b
 801286c:	0806d127 	.word	0x0806d127

08012870 <__swbuf_r>:
 8012870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012872:	460e      	mov	r6, r1
 8012874:	4614      	mov	r4, r2
 8012876:	4605      	mov	r5, r0
 8012878:	b118      	cbz	r0, 8012882 <__swbuf_r+0x12>
 801287a:	6a03      	ldr	r3, [r0, #32]
 801287c:	b90b      	cbnz	r3, 8012882 <__swbuf_r+0x12>
 801287e:	f7fc fe6f 	bl	800f560 <__sinit>
 8012882:	69a3      	ldr	r3, [r4, #24]
 8012884:	60a3      	str	r3, [r4, #8]
 8012886:	89a3      	ldrh	r3, [r4, #12]
 8012888:	071a      	lsls	r2, r3, #28
 801288a:	d501      	bpl.n	8012890 <__swbuf_r+0x20>
 801288c:	6923      	ldr	r3, [r4, #16]
 801288e:	b943      	cbnz	r3, 80128a2 <__swbuf_r+0x32>
 8012890:	4621      	mov	r1, r4
 8012892:	4628      	mov	r0, r5
 8012894:	f000 f82a 	bl	80128ec <__swsetup_r>
 8012898:	b118      	cbz	r0, 80128a2 <__swbuf_r+0x32>
 801289a:	f04f 37ff 	mov.w	r7, #4294967295
 801289e:	4638      	mov	r0, r7
 80128a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128a2:	6823      	ldr	r3, [r4, #0]
 80128a4:	6922      	ldr	r2, [r4, #16]
 80128a6:	1a98      	subs	r0, r3, r2
 80128a8:	6963      	ldr	r3, [r4, #20]
 80128aa:	b2f6      	uxtb	r6, r6
 80128ac:	4283      	cmp	r3, r0
 80128ae:	4637      	mov	r7, r6
 80128b0:	dc05      	bgt.n	80128be <__swbuf_r+0x4e>
 80128b2:	4621      	mov	r1, r4
 80128b4:	4628      	mov	r0, r5
 80128b6:	f7ff fd07 	bl	80122c8 <_fflush_r>
 80128ba:	2800      	cmp	r0, #0
 80128bc:	d1ed      	bne.n	801289a <__swbuf_r+0x2a>
 80128be:	68a3      	ldr	r3, [r4, #8]
 80128c0:	3b01      	subs	r3, #1
 80128c2:	60a3      	str	r3, [r4, #8]
 80128c4:	6823      	ldr	r3, [r4, #0]
 80128c6:	1c5a      	adds	r2, r3, #1
 80128c8:	6022      	str	r2, [r4, #0]
 80128ca:	701e      	strb	r6, [r3, #0]
 80128cc:	6962      	ldr	r2, [r4, #20]
 80128ce:	1c43      	adds	r3, r0, #1
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d004      	beq.n	80128de <__swbuf_r+0x6e>
 80128d4:	89a3      	ldrh	r3, [r4, #12]
 80128d6:	07db      	lsls	r3, r3, #31
 80128d8:	d5e1      	bpl.n	801289e <__swbuf_r+0x2e>
 80128da:	2e0a      	cmp	r6, #10
 80128dc:	d1df      	bne.n	801289e <__swbuf_r+0x2e>
 80128de:	4621      	mov	r1, r4
 80128e0:	4628      	mov	r0, r5
 80128e2:	f7ff fcf1 	bl	80122c8 <_fflush_r>
 80128e6:	2800      	cmp	r0, #0
 80128e8:	d0d9      	beq.n	801289e <__swbuf_r+0x2e>
 80128ea:	e7d6      	b.n	801289a <__swbuf_r+0x2a>

080128ec <__swsetup_r>:
 80128ec:	b538      	push	{r3, r4, r5, lr}
 80128ee:	4b29      	ldr	r3, [pc, #164]	@ (8012994 <__swsetup_r+0xa8>)
 80128f0:	4605      	mov	r5, r0
 80128f2:	6818      	ldr	r0, [r3, #0]
 80128f4:	460c      	mov	r4, r1
 80128f6:	b118      	cbz	r0, 8012900 <__swsetup_r+0x14>
 80128f8:	6a03      	ldr	r3, [r0, #32]
 80128fa:	b90b      	cbnz	r3, 8012900 <__swsetup_r+0x14>
 80128fc:	f7fc fe30 	bl	800f560 <__sinit>
 8012900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012904:	0719      	lsls	r1, r3, #28
 8012906:	d422      	bmi.n	801294e <__swsetup_r+0x62>
 8012908:	06da      	lsls	r2, r3, #27
 801290a:	d407      	bmi.n	801291c <__swsetup_r+0x30>
 801290c:	2209      	movs	r2, #9
 801290e:	602a      	str	r2, [r5, #0]
 8012910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012914:	81a3      	strh	r3, [r4, #12]
 8012916:	f04f 30ff 	mov.w	r0, #4294967295
 801291a:	e033      	b.n	8012984 <__swsetup_r+0x98>
 801291c:	0758      	lsls	r0, r3, #29
 801291e:	d512      	bpl.n	8012946 <__swsetup_r+0x5a>
 8012920:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012922:	b141      	cbz	r1, 8012936 <__swsetup_r+0x4a>
 8012924:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012928:	4299      	cmp	r1, r3
 801292a:	d002      	beq.n	8012932 <__swsetup_r+0x46>
 801292c:	4628      	mov	r0, r5
 801292e:	f7fd fecf 	bl	80106d0 <_free_r>
 8012932:	2300      	movs	r3, #0
 8012934:	6363      	str	r3, [r4, #52]	@ 0x34
 8012936:	89a3      	ldrh	r3, [r4, #12]
 8012938:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801293c:	81a3      	strh	r3, [r4, #12]
 801293e:	2300      	movs	r3, #0
 8012940:	6063      	str	r3, [r4, #4]
 8012942:	6923      	ldr	r3, [r4, #16]
 8012944:	6023      	str	r3, [r4, #0]
 8012946:	89a3      	ldrh	r3, [r4, #12]
 8012948:	f043 0308 	orr.w	r3, r3, #8
 801294c:	81a3      	strh	r3, [r4, #12]
 801294e:	6923      	ldr	r3, [r4, #16]
 8012950:	b94b      	cbnz	r3, 8012966 <__swsetup_r+0x7a>
 8012952:	89a3      	ldrh	r3, [r4, #12]
 8012954:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801295c:	d003      	beq.n	8012966 <__swsetup_r+0x7a>
 801295e:	4621      	mov	r1, r4
 8012960:	4628      	mov	r0, r5
 8012962:	f000 f88b 	bl	8012a7c <__smakebuf_r>
 8012966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801296a:	f013 0201 	ands.w	r2, r3, #1
 801296e:	d00a      	beq.n	8012986 <__swsetup_r+0x9a>
 8012970:	2200      	movs	r2, #0
 8012972:	60a2      	str	r2, [r4, #8]
 8012974:	6962      	ldr	r2, [r4, #20]
 8012976:	4252      	negs	r2, r2
 8012978:	61a2      	str	r2, [r4, #24]
 801297a:	6922      	ldr	r2, [r4, #16]
 801297c:	b942      	cbnz	r2, 8012990 <__swsetup_r+0xa4>
 801297e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012982:	d1c5      	bne.n	8012910 <__swsetup_r+0x24>
 8012984:	bd38      	pop	{r3, r4, r5, pc}
 8012986:	0799      	lsls	r1, r3, #30
 8012988:	bf58      	it	pl
 801298a:	6962      	ldrpl	r2, [r4, #20]
 801298c:	60a2      	str	r2, [r4, #8]
 801298e:	e7f4      	b.n	801297a <__swsetup_r+0x8e>
 8012990:	2000      	movs	r0, #0
 8012992:	e7f7      	b.n	8012984 <__swsetup_r+0x98>
 8012994:	20000280 	.word	0x20000280

08012998 <_raise_r>:
 8012998:	291f      	cmp	r1, #31
 801299a:	b538      	push	{r3, r4, r5, lr}
 801299c:	4605      	mov	r5, r0
 801299e:	460c      	mov	r4, r1
 80129a0:	d904      	bls.n	80129ac <_raise_r+0x14>
 80129a2:	2316      	movs	r3, #22
 80129a4:	6003      	str	r3, [r0, #0]
 80129a6:	f04f 30ff 	mov.w	r0, #4294967295
 80129aa:	bd38      	pop	{r3, r4, r5, pc}
 80129ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80129ae:	b112      	cbz	r2, 80129b6 <_raise_r+0x1e>
 80129b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129b4:	b94b      	cbnz	r3, 80129ca <_raise_r+0x32>
 80129b6:	4628      	mov	r0, r5
 80129b8:	f000 f830 	bl	8012a1c <_getpid_r>
 80129bc:	4622      	mov	r2, r4
 80129be:	4601      	mov	r1, r0
 80129c0:	4628      	mov	r0, r5
 80129c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129c6:	f000 b817 	b.w	80129f8 <_kill_r>
 80129ca:	2b01      	cmp	r3, #1
 80129cc:	d00a      	beq.n	80129e4 <_raise_r+0x4c>
 80129ce:	1c59      	adds	r1, r3, #1
 80129d0:	d103      	bne.n	80129da <_raise_r+0x42>
 80129d2:	2316      	movs	r3, #22
 80129d4:	6003      	str	r3, [r0, #0]
 80129d6:	2001      	movs	r0, #1
 80129d8:	e7e7      	b.n	80129aa <_raise_r+0x12>
 80129da:	2100      	movs	r1, #0
 80129dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80129e0:	4620      	mov	r0, r4
 80129e2:	4798      	blx	r3
 80129e4:	2000      	movs	r0, #0
 80129e6:	e7e0      	b.n	80129aa <_raise_r+0x12>

080129e8 <raise>:
 80129e8:	4b02      	ldr	r3, [pc, #8]	@ (80129f4 <raise+0xc>)
 80129ea:	4601      	mov	r1, r0
 80129ec:	6818      	ldr	r0, [r3, #0]
 80129ee:	f7ff bfd3 	b.w	8012998 <_raise_r>
 80129f2:	bf00      	nop
 80129f4:	20000280 	.word	0x20000280

080129f8 <_kill_r>:
 80129f8:	b538      	push	{r3, r4, r5, lr}
 80129fa:	4d07      	ldr	r5, [pc, #28]	@ (8012a18 <_kill_r+0x20>)
 80129fc:	2300      	movs	r3, #0
 80129fe:	4604      	mov	r4, r0
 8012a00:	4608      	mov	r0, r1
 8012a02:	4611      	mov	r1, r2
 8012a04:	602b      	str	r3, [r5, #0]
 8012a06:	f7f0 fc01 	bl	800320c <_kill>
 8012a0a:	1c43      	adds	r3, r0, #1
 8012a0c:	d102      	bne.n	8012a14 <_kill_r+0x1c>
 8012a0e:	682b      	ldr	r3, [r5, #0]
 8012a10:	b103      	cbz	r3, 8012a14 <_kill_r+0x1c>
 8012a12:	6023      	str	r3, [r4, #0]
 8012a14:	bd38      	pop	{r3, r4, r5, pc}
 8012a16:	bf00      	nop
 8012a18:	2001a30c 	.word	0x2001a30c

08012a1c <_getpid_r>:
 8012a1c:	f7f0 bbee 	b.w	80031fc <_getpid>

08012a20 <_malloc_usable_size_r>:
 8012a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a24:	1f18      	subs	r0, r3, #4
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	bfbc      	itt	lt
 8012a2a:	580b      	ldrlt	r3, [r1, r0]
 8012a2c:	18c0      	addlt	r0, r0, r3
 8012a2e:	4770      	bx	lr

08012a30 <__swhatbuf_r>:
 8012a30:	b570      	push	{r4, r5, r6, lr}
 8012a32:	460c      	mov	r4, r1
 8012a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a38:	2900      	cmp	r1, #0
 8012a3a:	b096      	sub	sp, #88	@ 0x58
 8012a3c:	4615      	mov	r5, r2
 8012a3e:	461e      	mov	r6, r3
 8012a40:	da0d      	bge.n	8012a5e <__swhatbuf_r+0x2e>
 8012a42:	89a3      	ldrh	r3, [r4, #12]
 8012a44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012a48:	f04f 0100 	mov.w	r1, #0
 8012a4c:	bf14      	ite	ne
 8012a4e:	2340      	movne	r3, #64	@ 0x40
 8012a50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012a54:	2000      	movs	r0, #0
 8012a56:	6031      	str	r1, [r6, #0]
 8012a58:	602b      	str	r3, [r5, #0]
 8012a5a:	b016      	add	sp, #88	@ 0x58
 8012a5c:	bd70      	pop	{r4, r5, r6, pc}
 8012a5e:	466a      	mov	r2, sp
 8012a60:	f000 f848 	bl	8012af4 <_fstat_r>
 8012a64:	2800      	cmp	r0, #0
 8012a66:	dbec      	blt.n	8012a42 <__swhatbuf_r+0x12>
 8012a68:	9901      	ldr	r1, [sp, #4]
 8012a6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012a6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012a72:	4259      	negs	r1, r3
 8012a74:	4159      	adcs	r1, r3
 8012a76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012a7a:	e7eb      	b.n	8012a54 <__swhatbuf_r+0x24>

08012a7c <__smakebuf_r>:
 8012a7c:	898b      	ldrh	r3, [r1, #12]
 8012a7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a80:	079d      	lsls	r5, r3, #30
 8012a82:	4606      	mov	r6, r0
 8012a84:	460c      	mov	r4, r1
 8012a86:	d507      	bpl.n	8012a98 <__smakebuf_r+0x1c>
 8012a88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012a8c:	6023      	str	r3, [r4, #0]
 8012a8e:	6123      	str	r3, [r4, #16]
 8012a90:	2301      	movs	r3, #1
 8012a92:	6163      	str	r3, [r4, #20]
 8012a94:	b003      	add	sp, #12
 8012a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a98:	ab01      	add	r3, sp, #4
 8012a9a:	466a      	mov	r2, sp
 8012a9c:	f7ff ffc8 	bl	8012a30 <__swhatbuf_r>
 8012aa0:	9f00      	ldr	r7, [sp, #0]
 8012aa2:	4605      	mov	r5, r0
 8012aa4:	4639      	mov	r1, r7
 8012aa6:	4630      	mov	r0, r6
 8012aa8:	f7fe f9c0 	bl	8010e2c <_malloc_r>
 8012aac:	b948      	cbnz	r0, 8012ac2 <__smakebuf_r+0x46>
 8012aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ab2:	059a      	lsls	r2, r3, #22
 8012ab4:	d4ee      	bmi.n	8012a94 <__smakebuf_r+0x18>
 8012ab6:	f023 0303 	bic.w	r3, r3, #3
 8012aba:	f043 0302 	orr.w	r3, r3, #2
 8012abe:	81a3      	strh	r3, [r4, #12]
 8012ac0:	e7e2      	b.n	8012a88 <__smakebuf_r+0xc>
 8012ac2:	89a3      	ldrh	r3, [r4, #12]
 8012ac4:	6020      	str	r0, [r4, #0]
 8012ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012aca:	81a3      	strh	r3, [r4, #12]
 8012acc:	9b01      	ldr	r3, [sp, #4]
 8012ace:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012ad2:	b15b      	cbz	r3, 8012aec <__smakebuf_r+0x70>
 8012ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ad8:	4630      	mov	r0, r6
 8012ada:	f000 f81d 	bl	8012b18 <_isatty_r>
 8012ade:	b128      	cbz	r0, 8012aec <__smakebuf_r+0x70>
 8012ae0:	89a3      	ldrh	r3, [r4, #12]
 8012ae2:	f023 0303 	bic.w	r3, r3, #3
 8012ae6:	f043 0301 	orr.w	r3, r3, #1
 8012aea:	81a3      	strh	r3, [r4, #12]
 8012aec:	89a3      	ldrh	r3, [r4, #12]
 8012aee:	431d      	orrs	r5, r3
 8012af0:	81a5      	strh	r5, [r4, #12]
 8012af2:	e7cf      	b.n	8012a94 <__smakebuf_r+0x18>

08012af4 <_fstat_r>:
 8012af4:	b538      	push	{r3, r4, r5, lr}
 8012af6:	4d07      	ldr	r5, [pc, #28]	@ (8012b14 <_fstat_r+0x20>)
 8012af8:	2300      	movs	r3, #0
 8012afa:	4604      	mov	r4, r0
 8012afc:	4608      	mov	r0, r1
 8012afe:	4611      	mov	r1, r2
 8012b00:	602b      	str	r3, [r5, #0]
 8012b02:	f7f0 fbe3 	bl	80032cc <_fstat>
 8012b06:	1c43      	adds	r3, r0, #1
 8012b08:	d102      	bne.n	8012b10 <_fstat_r+0x1c>
 8012b0a:	682b      	ldr	r3, [r5, #0]
 8012b0c:	b103      	cbz	r3, 8012b10 <_fstat_r+0x1c>
 8012b0e:	6023      	str	r3, [r4, #0]
 8012b10:	bd38      	pop	{r3, r4, r5, pc}
 8012b12:	bf00      	nop
 8012b14:	2001a30c 	.word	0x2001a30c

08012b18 <_isatty_r>:
 8012b18:	b538      	push	{r3, r4, r5, lr}
 8012b1a:	4d06      	ldr	r5, [pc, #24]	@ (8012b34 <_isatty_r+0x1c>)
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	4604      	mov	r4, r0
 8012b20:	4608      	mov	r0, r1
 8012b22:	602b      	str	r3, [r5, #0]
 8012b24:	f7f0 fbe2 	bl	80032ec <_isatty>
 8012b28:	1c43      	adds	r3, r0, #1
 8012b2a:	d102      	bne.n	8012b32 <_isatty_r+0x1a>
 8012b2c:	682b      	ldr	r3, [r5, #0]
 8012b2e:	b103      	cbz	r3, 8012b32 <_isatty_r+0x1a>
 8012b30:	6023      	str	r3, [r4, #0]
 8012b32:	bd38      	pop	{r3, r4, r5, pc}
 8012b34:	2001a30c 	.word	0x2001a30c

08012b38 <sqrtf>:
 8012b38:	b508      	push	{r3, lr}
 8012b3a:	ed2d 8b02 	vpush	{d8}
 8012b3e:	eeb0 8a40 	vmov.f32	s16, s0
 8012b42:	f000 f817 	bl	8012b74 <__ieee754_sqrtf>
 8012b46:	eeb4 8a48 	vcmp.f32	s16, s16
 8012b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b4e:	d60c      	bvs.n	8012b6a <sqrtf+0x32>
 8012b50:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012b70 <sqrtf+0x38>
 8012b54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5c:	d505      	bpl.n	8012b6a <sqrtf+0x32>
 8012b5e:	f7fc fef5 	bl	800f94c <__errno>
 8012b62:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012b66:	2321      	movs	r3, #33	@ 0x21
 8012b68:	6003      	str	r3, [r0, #0]
 8012b6a:	ecbd 8b02 	vpop	{d8}
 8012b6e:	bd08      	pop	{r3, pc}
 8012b70:	00000000 	.word	0x00000000

08012b74 <__ieee754_sqrtf>:
 8012b74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012b78:	4770      	bx	lr
	...

08012b7c <_init>:
 8012b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b7e:	bf00      	nop
 8012b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b82:	bc08      	pop	{r3}
 8012b84:	469e      	mov	lr, r3
 8012b86:	4770      	bx	lr

08012b88 <_fini>:
 8012b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b8a:	bf00      	nop
 8012b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b8e:	bc08      	pop	{r3}
 8012b90:	469e      	mov	lr, r3
 8012b92:	4770      	bx	lr
